/*
#############################################################################################
# Guilty Gear Xrd Rev 2 (GGXRD-R2) SDK 1.0.0.0
# Generated with the CodeRedGenerator v1.1.5
# ========================================================================================= #
# File: Engine_classes.hpp
# ========================================================================================= #
# Credits: ItsBranK, TheFeckless
# Links: www.github.com/CodeRedModding/CodeRed-Generator
#############################################################################################
*/
#pragma once

#ifdef _MSC_VER
#pragma pack(push, 0x4)
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_MINFLOORZ                                             0
#define CONST_ACTORMAXSTEPHEIGHT                                    3
#define CONST_RBSTATE_LINVELSCALE                                   1
#define CONST_RBSTATE_ANGVELSCALE                                   1
#define CONST_RB_None                                               0
#define CONST_RB_NeedsUpdate                                        0
#define CONST_RB_Sleeping                                           0
#define CONST_REP_RBLOCATION_ERROR_TOLERANCE_SQ                     1
#define CONST_TRACEFLAG_ForceController                             1
#define CONST_TRACEFLAG_Blocking                                    8
#define CONST_TRACEFLAG_SkipMovers                                  4
#define CONST_TRACEFLAG_PhysicsVolumes                              2
#define CONST_TRACEFLAG_Bullet                                      1
#define CONST_SDPG_NumBits                                          3
#define CONST_REDSceneView_NumBits                                  4
#define CONST_LATENT_MOVETOWARD                                     5
#define CONST_MAX_ACTIVE_CAMERA_ANIMS                               8
#define CONST_MAXCLIENTUPDATEINTERVAL                               0
#define CONST_CLIENTADJUSTUPDATECOST                                1
#define CONST_MAXVEHICLEPOSITIONERRORSQUARED                        9
#define CONST_MAXNEARZEROVELOCITYSQUARED                            9
#define CONST_MAXPOSITIONERRORSQUARED                               3
#define CONST_BLOCKEDPATHCOST                                       1
#define CONST_INFINITE_PATH_COST                                    1
#define CONST_DEFAULT_SIZE_X                                        1
#define CONST_DEFAULT_SIZE_Y                                        7
#define CONST_MAX_SUPPORTED_GAMEPADS                                4
#define CONST_MaxHistory                                            1
#define CONST_COVERLINK_DangerDist                                  1
#define CONST_COVERLINK_EdgeExposureDot                             0
#define CONST_COVERLINK_EdgeCheckDot                                0
#define CONST_COVERLINK_ExposureDot                                 0
#define CONST_NULLCHARACTER                                         1
#define CONST_MAX_INSTANCES_PER_CLASS                               5
#define CONST_MAX_BOOKMARK_NUMBER                                   1
#define CONST_FSM_DEFAULTRECYCLETIME                                0
#define CONST_HeaderFlags_NoEventStrings                            1
#define CONST_GAMEEVENT_MATCH_STARTED                               0
#define CONST_GAMEEVENT_MATCH_ENDED                                 1
#define CONST_GAMEEVENT_ROUND_STARTED                               2
#define CONST_GAMEEVENT_ROUND_ENDED                                 3
#define CONST_GAMEEVENT_GAME_CLASS                                  6
#define CONST_GAMEEVENT_GAME_OPTION_URL                             7
#define CONST_GAMEEVENT_GAME_MAPNAME                                8
#define CONST_GAMEEVENT_MEMORYUSAGE_POLL                            3
#define CONST_GAMEEVENT_FRAMERATE_POLL                              3
#define CONST_GAMEEVENT_NETWORKUSAGEIN_POLL                         3
#define CONST_GAMEEVENT_NETWORKUSAGEOUT_POLL                        3
#define CONST_GAMEEVENT_PING_POLL                                   3
#define CONST_GAMEEVENT_RENDERTHREAD_POLL                           4
#define CONST_GAMEEVENT_GAMETHREAD_POLL                             4
#define CONST_GAMEEVENT_GPUFRAMETIME_POLL                           4
#define CONST_GAMEEVENT_FRAMETIME_POLL                              4
#define CONST_GAMEEVENT_TEAM_CREATED                                5
#define CONST_GAMEEVENT_TEAM_GAME_SCORE                             5
#define CONST_GAMEEVENT_TEAM_MATCH_WON                              4
#define CONST_GAMEEVENT_TEAM_ROUND_WON                              5
#define CONST_GAMEEVENT_TEAM_ROUND_STALEMATE                        5
#define CONST_GAMEEVENT_PLAYER_LOGIN                                1
#define CONST_GAMEEVENT_PLAYER_LOGOUT                               1
#define CONST_GAMEEVENT_PLAYER_SPAWN                                1
#define CONST_GAMEEVENT_PLAYER_MATCH_WON                            1
#define CONST_GAMEEVENT_PLAYER_KILL                                 1
#define CONST_GAMEEVENT_PLAYER_LOCATION_POLL                        1
#define CONST_GAMEEVENT_PLAYER_TEAMCHANGE                           1
#define CONST_GAMEEVENT_PLAYER_KILL_STREAK                          1
#define CONST_GAMEEVENT_PLAYER_DEATH                                1
#define CONST_GAMEEVENT_PLAYER_ROUND_WON                            1
#define CONST_GAMEEVENT_PLAYER_ROUND_STALEMATE                      1
#define CONST_GAMEEVENT_WEAPON_DAMAGE                               1
#define CONST_GAMEEVENT_WEAPON_DAMAGE_MELEE                         1
#define CONST_GAMEEVENT_WEAPON_FIRED                                1
#define CONST_GAMEEVENT_PLAYER_KILL_NORMAL                          2
#define CONST_GAMEEVENT_GENERIC_PARAM_LIST_START                    3
#define CONST_GAMEEVENT_GENERIC_PARAM_LIST_END                      4
#define CONST_GAMEEVENT_GAME_SPECIFIC                               1
#define CONST_GAMEEVENT_MAX_EVENTID                                 0
#define CONST_SCENEFILTER_None                                      0
#define CONST_SCENEFILTER_IncludeTransient                          0
#define CONST_SCENEFILTER_InputProcessorOnly                        0
#define CONST_SCENEFILTER_PausersOnly                               0
#define CONST_SCENEFILTER_PrimitiveUsersOnly                        0
#define CONST_SCENEFILTER_UsesPostProcessing                        0
#define CONST_SCENEFILTER_ReceivesFocus                             0
#define CONST_SCENEFILTER_Any                                       0
#define CONST_MAX_AIGROUP_NUMBER                                    1
#define CONST_LINECHECK_GRANULARITY                                 7
#define CONST_NUM_PATHFINDING_PARAMS                                9
#define CONST_NumBreadCrumbs                                        1
#define CONST_PROCBUILDING_VERSION                                  1
#define CONST_ROOF_MINZ                                             0

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum Engine.Actor.EActorMetricsType
enum class EActorMetricsType : uint8_t
{
	METRICS_VERTS                                      = 0,
	METRICS_TRIS                                       = 1,
	METRICS_SECTIONS                                   = 2,
	METRICS_END                                        = 3
};

// Enum Engine.Actor.EMoveDir
enum class EMoveDir : uint8_t
{
	MD_Stationary                                      = 0,
	MD_Forward                                         = 1,
	MD_Backward                                        = 2,
	MD_Left                                            = 3,
	MD_Right                                           = 4,
	MD_Up                                              = 5,
	MD_Down                                            = 6,
	MD_END                                             = 7
};

// Enum Engine.Actor.EPhysics
enum class EPhysics : uint8_t
{
	PHYS_None                                          = 0,
	PHYS_Walking                                       = 1,
	PHYS_Falling                                       = 2,
	PHYS_Swimming                                      = 3,
	PHYS_Flying                                        = 4,
	PHYS_Rotating                                      = 5,
	PHYS_Projectile                                    = 6,
	PHYS_Interpolating                                 = 7,
	PHYS_Spider                                        = 8,
	PHYS_Ladder                                        = 9,
	PHYS_RigidBody                                     = 10,
	PHYS_SoftBody                                      = 11,
	PHYS_NavMeshWalking                                = 12,
	PHYS_Unused                                        = 13,
	PHYS_Custom                                        = 14,
	PHYS_END                                           = 15
};

// Enum Engine.Actor.ECollisionType
enum class ECollisionType : uint8_t
{
	COLLIDE_CustomDefault                              = 0,
	COLLIDE_NoCollision                                = 1,
	COLLIDE_BlockAll                                   = 2,
	COLLIDE_BlockWeapons                               = 3,
	COLLIDE_TouchAll                                   = 4,
	COLLIDE_TouchWeapons                               = 5,
	COLLIDE_BlockAllButWeapons                         = 6,
	COLLIDE_TouchAllButWeapons                         = 7,
	COLLIDE_BlockWeaponsKickable                       = 8,
	COLLIDE_END                                        = 9
};

// Enum Engine.Actor.EREDViewType
enum class EREDViewType : uint8_t
{
	REDView_Character                                  = 0,
	REDView_Effect                                     = 1,
	REDView_BG                                         = 2,
	REDView_HUD                                        = 3,
	REDView_END                                        = 4
};

// Enum Engine.Actor.ETravelType
enum class ETravelType : uint8_t
{
	TRAVEL_Absolute                                    = 0,
	TRAVEL_Partial                                     = 1,
	TRAVEL_Relative                                    = 2,
	TRAVEL_END                                         = 3
};

// Enum Engine.Actor.EDoubleClickDir
enum class EDoubleClickDir : uint8_t
{
	DCLICK_None                                        = 0,
	DCLICK_Left                                        = 1,
	DCLICK_Right                                       = 2,
	DCLICK_Forward                                     = 3,
	DCLICK_Back                                        = 4,
	DCLICK_Active                                      = 5,
	DCLICK_Done                                        = 6,
	DCLICK_END                                         = 7
};

// Enum Engine.Actor.ENetRole
enum class ENetRole : uint8_t
{
	ROLE_None                                          = 0,
	ROLE_SimulatedProxy                                = 1,
	ROLE_AutonomousProxy                               = 2,
	ROLE_Authority                                     = 3,
	ROLE_END                                           = 4
};

// Enum Engine.Settings.EOnlineDataAdvertisementType
enum class EOnlineDataAdvertisementType : uint8_t
{
	ODAT_DontAdvertise                                 = 0,
	ODAT_OnlineService                                 = 1,
	ODAT_QoS                                           = 2,
	ODAT_OnlineServiceAndQoS                           = 3,
	ODAT_END                                           = 4
};

// Enum Engine.Settings.ESettingsDataType
enum class ESettingsDataType : uint8_t
{
	SDT_Empty                                          = 0,
	SDT_Int32                                          = 1,
	SDT_Int64                                          = 2,
	SDT_Double                                         = 3,
	SDT_String                                         = 4,
	SDT_Float                                          = 5,
	SDT_Blob                                           = 6,
	SDT_DateTime                                       = 7,
	SDT_END                                            = 8
};

// Enum Engine.Settings.EPropertyValueMappingType
enum class EPropertyValueMappingType : uint8_t
{
	PVMT_RawValue                                      = 0,
	PVMT_PredefinedValues                              = 1,
	PVMT_Ranged                                        = 2,
	PVMT_IdMapped                                      = 3,
	PVMT_END                                           = 4
};

// Enum Engine.OnlineSubsystem.EOnlineNewsType
enum class EOnlineNewsType : uint8_t
{
	ONT_Unknown                                        = 0,
	ONT_GameNews                                       = 1,
	ONT_ContentAnnouncements                           = 2,
	ONT_Misc                                           = 3,
	ONT_END                                            = 4
};

// Enum Engine.OnlineSubsystem.ENATType
enum class ENATType : uint8_t
{
	NAT_Unknown                                        = 0,
	NAT_Open                                           = 1,
	NAT_Moderate                                       = 2,
	NAT_Strict                                         = 3,
	NAT_END                                            = 4
};

// Enum Engine.OnlineSubsystem.EOnlineServerConnectionStatus
enum class EOnlineServerConnectionStatus : uint8_t
{
	OSCS_NotConnected                                  = 0,
	OSCS_Connected                                     = 1,
	OSCS_ConnectionDropped                             = 2,
	OSCS_NoNetworkConnection                           = 3,
	OSCS_ServiceUnavailable                            = 4,
	OSCS_UpdateRequired                                = 5,
	OSCS_ServersTooBusy                                = 6,
	OSCS_DuplicateLoginDetected                        = 7,
	OSCS_InvalidUser                                   = 8,
	OSCS_Banned                                        = 9,
	OSCS_TooYoung                                      = 10,
	OSCS_PSNUnavailable                                = 11,
	OSCS_END                                           = 12
};

// Enum Engine.OnlineSubsystem.EOnlineEnumerationReadState
enum class EOnlineEnumerationReadState : uint8_t
{
	OERS_NotStarted                                    = 0,
	OERS_InProgress                                    = 1,
	OERS_Done                                          = 2,
	OERS_Failed                                        = 3,
	OERS_END                                           = 4
};

// Enum Engine.OnlineSubsystem.EOnlineGameState
enum class EOnlineGameState : uint8_t
{
	OGS_NoSession                                      = 0,
	OGS_Pending                                        = 1,
	OGS_Starting                                       = 2,
	OGS_InProgress                                     = 3,
	OGS_Ending                                         = 4,
	OGS_Ended                                          = 5,
	OGS_END                                            = 6
};

// Enum Engine.OnlineSubsystem.EOnlineAccountCreateStatus
enum class EOnlineAccountCreateStatus : uint8_t
{
	OACS_CreateSuccessful                              = 0,
	OACS_UnknownError                                  = 1,
	OACS_InvalidUserName                               = 2,
	OACS_InvalidPassword                               = 3,
	OACS_InvalidUniqueUserName                         = 4,
	OACS_UniqueUserNameInUse                           = 5,
	OACS_ServiceUnavailable                            = 6,
	OACS_END                                           = 7
};

// Enum Engine.OnlineSubsystem.ELanBeaconState
enum class ELanBeaconState : uint8_t
{
	LANB_NotUsingLanBeacon                             = 0,
	LANB_Hosting                                       = 1,
	LANB_Searching                                     = 2,
	LANB_END                                           = 3
};

// Enum Engine.OnlineSubsystem.EOnlineContentType
enum class EOnlineContentType : uint8_t
{
	OCT_Downloaded                                     = 0,
	OCT_SaveGame                                       = 1,
	OCT_END                                            = 2
};

// Enum Engine.OnlineSubsystem.EOnlineFriendState
enum class EOnlineFriendState : uint8_t
{
	OFS_Offline                                        = 0,
	OFS_Online                                         = 1,
	OFS_Away                                           = 2,
	OFS_Busy                                           = 3,
	OFS_END                                            = 4
};

// Enum Engine.OnlineSubsystem.ENetworkNotificationPosition
enum class ENetworkNotificationPosition : uint8_t
{
	NNP_TopLeft                                        = 0,
	NNP_TopCenter                                      = 1,
	NNP_TopRight                                       = 2,
	NNP_CenterLeft                                     = 3,
	NNP_Center                                         = 4,
	NNP_CenterRight                                    = 5,
	NNP_BottomLeft                                     = 6,
	NNP_BottomCenter                                   = 7,
	NNP_BottomRight                                    = 8,
	NNP_END                                            = 9
};

// Enum Engine.OnlineSubsystem.EFeaturePrivilegeLevel
enum class EFeaturePrivilegeLevel : uint8_t
{
	FPL_Disabled                                       = 0,
	FPL_EnabledFriendsOnly                             = 1,
	FPL_Enabled                                        = 2,
	FPL_END                                            = 3
};

// Enum Engine.OnlineSubsystem.ELoginStatus
enum class ELoginStatus : uint8_t
{
	LS_NotLoggedIn                                     = 0,
	LS_UsingLocalProfile                               = 1,
	LS_LoggedIn                                        = 2,
	LS_END                                             = 3
};

// Enum Engine.OnlineAuthInterface.EAuthStatus
enum class EAuthStatus : uint8_t
{
	AUS_NotStarted                                     = 0,
	AUS_Pending                                        = 1,
	AUS_Authenticated                                  = 2,
	AUS_Failed                                         = 3,
	AUS_END                                            = 4
};

// Enum Engine.PrimitiveComponent.GJKResult
enum class EGJKResult : uint8_t
{
	GJK_Intersect                                      = 0,
	GJK_NoIntersection                                 = 1,
	GJK_Fail                                           = 2,
	GJK_END                                            = 3
};

// Enum Engine.Scene.EDetailMode
enum class EDetailMode : uint8_t
{
	DM_Low                                             = 0,
	DM_Medium                                          = 1,
	DM_High                                            = 2,
	DM_END                                             = 3
};

// Enum Engine.Scene.ESceneDepthPriorityGroup
enum class ESceneDepthPriorityGroup : uint8_t
{
	SDPG_UnrealEdBackground                            = 0,
	SDPG_World                                         = 1,
	SDPG_Foreground                                    = 2,
	SDPG_UnrealEdForeground                            = 3,
	SDPG_PostProcess                                   = 4,
	SDPG_END                                           = 5
};

// Enum Engine.Scene.EREDSceneViewType
enum class EREDSceneViewType : uint8_t
{
	REDSceneView_Character                             = 0,
	REDSceneView_Effect                                = 1,
	REDSceneView_BG                                    = 2,
	REDSceneView_HUD                                   = 3,
	REDSceneView_END                                   = 4
};

// Enum Engine.PrimitiveComponent.ERadialImpulseFalloff
enum class ERadialImpulseFalloff : uint8_t
{
	RIF_Constant                                       = 0,
	RIF_Linear                                         = 1,
	RIF_END                                            = 2
};

// Enum Engine.PrimitiveComponent.ERBCollisionChannel
enum class ERBCollisionChannel : uint8_t
{
	RBCC_Default                                       = 0,
	RBCC_Nothing                                       = 1,
	RBCC_Pawn                                          = 2,
	RBCC_Vehicle                                       = 3,
	RBCC_Water                                         = 4,
	RBCC_GameplayPhysics                               = 5,
	RBCC_EffectPhysics                                 = 6,
	RBCC_Untitled1                                     = 7,
	RBCC_Untitled2                                     = 8,
	RBCC_Untitled3                                     = 9,
	RBCC_Untitled4                                     = 10,
	RBCC_Cloth                                         = 11,
	RBCC_FluidDrain                                    = 12,
	RBCC_SoftBody                                      = 13,
	RBCC_FracturedMeshPart                             = 14,
	RBCC_BlockingVolume                                = 15,
	RBCC_DeadPawn                                      = 16,
	RBCC_Clothing                                      = 17,
	RBCC_ClothingCollision                             = 18,
	RBCC_END                                           = 19
};

// Enum Engine.Camera.EViewTargetBlendFunction
enum class EViewTargetBlendFunction : uint8_t
{
	VTBlend_Linear                                     = 0,
	VTBlend_Cubic                                      = 1,
	VTBlend_EaseIn                                     = 2,
	VTBlend_EaseOut                                    = 3,
	VTBlend_EaseInOut                                  = 4,
	VTBlend_END                                        = 5
};

// Enum Engine.DOFEffect.EFocusType
enum class EFocusType : uint8_t
{
	FOCUS_Distance                                     = 0,
	FOCUS_Position                                     = 1,
	FOCUS_END                                          = 2
};

// Enum Engine.Camera.ECameraAnimPlaySpace
enum class ECameraAnimPlaySpace : uint8_t
{
	CAPS_CameraLocal                                   = 0,
	CAPS_World                                         = 1,
	CAPS_UserDefined                                   = 2,
	CAPS_END                                           = 3
};

// Enum Engine.SeqAct_ControlMovieTexture.EMovieControlType
enum class EMovieControlType : uint8_t
{
	MCT_Play                                           = 0,
	MCT_Stop                                           = 1,
	MCT_Pause                                          = 2,
	MCT_END                                            = 3
};

// Enum Engine.OnlineGameSearch.EOnlineGameSearchComparisonType
enum class EOnlineGameSearchComparisonType : uint8_t
{
	OGSCT_Equals                                       = 0,
	OGSCT_NotEquals                                    = 1,
	OGSCT_GreaterThan                                  = 2,
	OGSCT_GreaterThanEquals                            = 3,
	OGSCT_LessThan                                     = 4,
	OGSCT_LessThanEquals                               = 5,
	OGSCT_END                                          = 6
};

// Enum Engine.OnlineGameSearch.EOnlineGameSearchEntryType
enum class EOnlineGameSearchEntryType : uint8_t
{
	OGSET_Property                                     = 0,
	OGSET_LocalizedSetting                             = 1,
	OGSET_ObjectProperty                               = 2,
	OGSET_END                                          = 3
};

// Enum Engine.OnlineGameSearch.EOnlineGameSearchSortType
enum class EOnlineGameSearchSortType : uint8_t
{
	OGSSO_Ascending                                    = 0,
	OGSSO_Descending                                   = 1,
	OGSSO_END                                          = 2
};

// Enum Engine.PlayerController.EProgressMessageType
enum class EProgressMessageType : uint8_t
{
	PMT_Clear                                          = 0,
	PMT_Information                                    = 1,
	PMT_AdminMessage                                   = 2,
	PMT_DownloadProgress                               = 3,
	PMT_ConnectionFailure                              = 4,
	PMT_PeerConnectionFailure                          = 5,
	PMT_PeerHostMigrationFailure                       = 6,
	PMT_SocketFailure                                  = 7,
	PMT_END                                            = 8
};

// Enum Engine.SkeletalMeshComponent.EPhysBodyOp
enum class EPhysBodyOp : uint8_t
{
	PBO_None                                           = 0,
	PBO_Term                                           = 1,
	PBO_Disable                                        = 2,
	PBO_END                                            = 3
};

// Enum Engine.SkeletalMeshComponent.EBoneVisibilityStatus
enum class EBoneVisibilityStatus : uint8_t
{
	BVS_HiddenByParent                                 = 0,
	BVS_Visible                                        = 1,
	BVS_ExplicitlyHidden                               = 2,
	BVS_END                                            = 3
};

// Enum Engine.SkeletalMeshComponent.EFaceFXRegOp
enum class EFaceFXRegOp : uint8_t
{
	FXRO_Add                                           = 0,
	FXRO_Multiply                                      = 1,
	FXRO_Replace                                       = 2,
	FXRO_END                                           = 3
};

// Enum Engine.SkeletalMeshComponent.EFaceFXBlendMode
enum class EFaceFXBlendMode : uint8_t
{
	FXBM_Overwrite                                     = 0,
	FXBM_Additive                                      = 1,
	FXBM_END                                           = 2
};

// Enum Engine.SkeletalMeshComponent.EInstanceWeightUsage
enum class EInstanceWeightUsage : uint8_t
{
	IWU_PartialSwap                                    = 0,
	IWU_FullSwap                                       = 1,
	IWU_END                                            = 2
};

// Enum Engine.SkeletalMeshComponent.EAnimRotationOnly
enum class EAnimRotationOnly : uint8_t
{
	EARO_AnimSet                                       = 0,
	EARO_ForceEnabled                                  = 1,
	EARO_ForceDisabled                                 = 2,
	EARO_END                                           = 3
};

// Enum Engine.SkeletalMeshComponent.ERootMotionRotationMode
enum class ERootMotionRotationMode : uint8_t
{
	RMRM_Ignore                                        = 0,
	RMRM_RotateActor                                   = 1,
	RMRM_END                                           = 2
};

// Enum Engine.SkeletalMeshComponent.ERootMotionMode
enum class ERootMotionMode : uint8_t
{
	RMM_Translate                                      = 0,
	RMM_Velocity                                       = 1,
	RMM_Ignore                                         = 2,
	RMM_Accel                                          = 3,
	RMM_Relative                                       = 4,
	RMM_END                                            = 5
};

// Enum Engine.SkeletalMeshComponent.EMaxDistanceScaleMode
enum class EMaxDistanceScaleMode : uint8_t
{
	MDSM_Multiply                                      = 0,
	MDSM_Substract                                     = 1,
	MDSM_END                                           = 2
};

// Enum Engine.PlayerController.EInputMatchAction
enum class EInputMatchAction : uint8_t
{
	IMA_GreaterThan                                    = 0,
	IMA_LessThan                                       = 1,
	IMA_END                                            = 2
};

// Enum Engine.PlayerController.EInputTypes
enum class EInputTypes : uint8_t
{
	IT_XAxis                                           = 0,
	IT_YAxis                                           = 1,
	IT_END                                             = 2
};

// Enum Engine.Pylon.ENavMeshEdgeType
enum class ENavMeshEdgeType : uint8_t
{
	NAVEDGE_Normal                                     = 0,
	NAVEDGE_Mantle                                     = 1,
	NAVEDGE_Coverslip                                  = 2,
	NAVEDGE_SwatTurn                                   = 3,
	NAVEDGE_DropDown                                   = 4,
	NAVEDGE_PathObject                                 = 5,
	NAVEDGE_BackRefDummy                               = 6,
	NAVEDGE_Jump                                       = 7,
	NAVEDGE_END                                        = 8
};

// Enum Engine.AmbientOcclusionEffect.EAmbientOcclusionQuality
enum class EAmbientOcclusionQuality : uint8_t
{
	AO_High                                            = 0,
	AO_Medium                                          = 1,
	AO_Low                                             = 2,
	AO_END                                             = 3
};

// Enum Engine.Brush.ECsgOper
enum class ECsgOper : uint8_t
{
	CSG_Active                                         = 0,
	CSG_Add                                            = 1,
	CSG_Subtract                                       = 2,
	CSG_Intersect                                      = 3,
	CSG_Deintersect                                    = 4,
	CSG_END                                            = 5
};

// Enum Engine.ReverbVolume.ReverbPreset
enum class EReverbPreset : uint8_t
{
	REVERB_Default                                     = 0,
	REVERB_Bathroom                                    = 1,
	REVERB_StoneRoom                                   = 2,
	REVERB_Auditorium                                  = 3,
	REVERB_ConcertHall                                 = 4,
	REVERB_Cave                                        = 5,
	REVERB_Hallway                                     = 6,
	REVERB_StoneCorridor                               = 7,
	REVERB_Alley                                       = 8,
	REVERB_Forest                                      = 9,
	REVERB_City                                        = 10,
	REVERB_Mountains                                   = 11,
	REVERB_Quarry                                      = 12,
	REVERB_Plain                                       = 13,
	REVERB_ParkingLot                                  = 14,
	REVERB_SewerPipe                                   = 15,
	REVERB_Underwater                                  = 16,
	REVERB_SmallRoom                                   = 17,
	REVERB_MediumRoom                                  = 18,
	REVERB_LargeRoom                                   = 19,
	REVERB_MediumHall                                  = 20,
	REVERB_LargeHall                                   = 21,
	REVERB_Plate                                       = 22,
	REVERB_END                                         = 23
};

// Enum Engine.EngineTypes.EPathFindingError
enum class EPathFindingError : uint8_t
{
	PATHERROR_STARTPOLYNOTFOUND                        = 0,
	PATHERROR_GOALPOLYNOTFOUND                         = 1,
	PATHERROR_ANCHORPYLONNOTFOUND                      = 2,
	PATHERROR_NOPATHFOUND                              = 3,
	PATHERROR_COMPUTEVALIDFINALDEST_FAIL               = 4,
	PATHERROR_GETNEXTMOVELOCATION_FAIL                 = 5,
	PATHERROR_MOVETIMEOUT                              = 6,
	PATHERROR_END                                      = 7
};

// Enum Engine.AudioDevice.EDebugState
enum class EDebugState : uint8_t
{
	DEBUGSTATE_None                                    = 0,
	DEBUGSTATE_IsolateDryAudio                         = 1,
	DEBUGSTATE_IsolateReverb                           = 2,
	DEBUGSTATE_TestLPF                                 = 3,
	DEBUGSTATE_TestStereoBleed                         = 4,
	DEBUGSTATE_TestLFEBleed                            = 5,
	DEBUGSTATE_DisableLPF                              = 6,
	DEBUGSTATE_DisableRadio                            = 7,
	DEBUGSTATE_END                                     = 8
};

// Enum Engine.AudioDevice.ESoundClassName
enum class ESoundClassName : uint8_t
{
	AdjustAmbient                                      = 0,
	Always                                             = 1,
	AmbientSE                                          = 2,
	BGM                                                = 3,
	BGM_adv                                            = 4,
	chara                                              = 5,
	DemoChara                                          = 6,
	DemoSE                                             = 7,
	GameRoot                                           = 8,
	Master                                             = 9,
	MasterAmbient                                      = 10,
	MasterBGM                                          = 11,
	MasterSE                                           = 12,
	MasterVoice                                        = 13,
	Mob                                                = 14,
	MovieEffects                                       = 15,
	Narration                                          = 16,
	SE                                                 = 17,
	UI                                                 = 18,
	ESoundClassName_END                                = 19
};

// Enum Engine.AudioDevice.ETTSSpeaker
enum class ETTSSpeaker : uint8_t
{
	TTSSPEAKER_Paul                                    = 0,
	TTSSPEAKER_Harry                                   = 1,
	TTSSPEAKER_Frank                                   = 2,
	TTSSPEAKER_Dennis                                  = 3,
	TTSSPEAKER_Kit                                     = 4,
	TTSSPEAKER_Betty                                   = 5,
	TTSSPEAKER_Ursula                                  = 6,
	TTSSPEAKER_Rita                                    = 7,
	TTSSPEAKER_Wendy                                   = 8,
	TTSSPEAKER_END                                     = 9
};

// Enum Engine.SoundNodeAttenuation.ESoundDistanceCalc
enum class ESoundDistanceCalc : uint8_t
{
	SOUNDDISTANCE_Normal                               = 0,
	SOUNDDISTANCE_InfiniteXYPlane                      = 1,
	SOUNDDISTANCE_InfiniteXZPlane                      = 2,
	SOUNDDISTANCE_InfiniteYZPlane                      = 3,
	SOUNDDISTANCE_END                                  = 4
};

// Enum Engine.SoundNodeAttenuation.SoundDistanceModel
enum class ESoundDistanceModel : uint8_t
{
	ATTENUATION_Linear                                 = 0,
	ATTENUATION_Logarithmic                            = 1,
	ATTENUATION_Inverse                                = 2,
	ATTENUATION_LogReverse                             = 3,
	ATTENUATION_NaturalSound                           = 4,
	ATTENUATION_END                                    = 5
};

// Enum Engine.PlatformInterfaceBase.EPlatformInterfaceDataType
enum class EPlatformInterfaceDataType : uint8_t
{
	PIDT_None                                          = 0,
	PIDT_Int                                           = 1,
	PIDT_Float                                         = 2,
	PIDT_String                                        = 3,
	PIDT_Object                                        = 4,
	PIDT_Custom                                        = 5,
	PIDT_END                                           = 6
};

// Enum Engine.AnimSequence.AnimationCompressionFormat
enum class EAnimationCompressionFormat : uint8_t
{
	ACF_None                                           = 0,
	ACF_Float96NoW                                     = 1,
	ACF_Fixed48NoW                                     = 2,
	ACF_IntervalFixed32NoW                             = 3,
	ACF_Fixed32NoW                                     = 4,
	ACF_Float32NoW                                     = 5,
	ACF_Identity                                       = 6,
	ACF_END                                            = 7
};

// Enum Engine.AnimSequence.AnimationKeyFormat
enum class EAnimationKeyFormat : uint8_t
{
	AKF_ConstantKeyLerp                                = 0,
	AKF_VariableKeyLerp                                = 1,
	AKF_PerTrackCompression                            = 2,
	AKF_END                                            = 3
};

// Enum Engine.AnimNode.ESliderType
enum class ESliderType : uint8_t
{
	ST_1D                                              = 0,
	ST_2D                                              = 1,
	ST_END                                             = 2
};

// Enum Engine.AnimNode_MultiBlendPerBone.EWeightCheck
enum class EWeightCheck : uint8_t
{
	EWC_AnimNodeSlotNotPlaying                         = 0,
	EWC_END                                            = 1
};

// Enum Engine.AnimNode_MultiBlendPerBone.EBlendType
enum class EBlendType : uint8_t
{
	EBT_ParentBoneSpace                                = 0,
	EBT_MeshSpace                                      = 1,
	EBT_END                                            = 2
};

// Enum Engine.AnimNodeAimOffset.EAnimAimDir
enum class EAnimAimDir : uint8_t
{
	ANIMAIM_LEFTUP                                     = 0,
	ANIMAIM_CENTERUP                                   = 1,
	ANIMAIM_RIGHTUP                                    = 2,
	ANIMAIM_LEFTCENTER                                 = 3,
	ANIMAIM_CENTERCENTER                               = 4,
	ANIMAIM_RIGHTCENTER                                = 5,
	ANIMAIM_LEFTDOWN                                   = 6,
	ANIMAIM_CENTERDOWN                                 = 7,
	ANIMAIM_RIGHTDOWN                                  = 8,
	ANIMAIM_END                                        = 9
};

// Enum Engine.AnimNodeAimOffset.EAimID
enum class EAimID : uint8_t
{
	EAID_LeftUp                                        = 0,
	EAID_LeftDown                                      = 1,
	EAID_RightUp                                       = 2,
	EAID_RightDown                                     = 3,
	EAID_ZeroUp                                        = 4,
	EAID_ZeroDown                                      = 5,
	EAID_ZeroLeft                                      = 6,
	EAID_ZeroRight                                     = 7,
	EAID_CellLU                                        = 8,
	EAID_CellCU                                        = 9,
	EAID_CellRU                                        = 10,
	EAID_CellLC                                        = 11,
	EAID_CellCC                                        = 12,
	EAID_CellRC                                        = 13,
	EAID_CellLD                                        = 14,
	EAID_CellCD                                        = 15,
	EAID_CellRD                                        = 16,
	EAID_END                                           = 17
};

// Enum Engine.AnimNodeBlendByBase.EBaseBlendType
enum class EBaseBlendType : uint8_t
{
	BBT_ByActorTag                                     = 0,
	BBT_ByActorClass                                   = 1,
	BBT_END                                            = 2
};

// Enum Engine.AnimNodeSequence.ERootRotationOption
enum class ERootRotationOption : uint8_t
{
	RRO_Default                                        = 0,
	RRO_Discard                                        = 1,
	RRO_Extract                                        = 2,
	RRO_END                                            = 3
};

// Enum Engine.AnimNodeSequence.ERootBoneAxis
enum class ERootBoneAxis : uint8_t
{
	RBA_Default                                        = 0,
	RBA_Discard                                        = 1,
	RBA_Translate                                      = 2,
	RBA_END                                            = 3
};

// Enum Engine.EngineTypes.EBlendMode
enum class EBlendMode : uint8_t
{
	BLEND_Opaque                                       = 0,
	BLEND_Masked                                       = 1,
	BLEND_Translucent                                  = 2,
	BLEND_Additive                                     = 3,
	BLEND_Modulate                                     = 4,
	BLEND_ModulateAndAdd                               = 5,
	BLEND_SoftMasked                                   = 6,
	BLEND_AlphaComposite                               = 7,
	BLEND_DitheredTranslucent                          = 8,
	BLEND_X2Multiply                                   = 9,
	BLEND_END                                          = 10
};

// Enum Engine.EngineTypes.EMaterialLightingModel
enum class EMaterialLightingModel : uint8_t
{
	MLM_Phong                                          = 0,
	MLM_NonDirectional                                 = 1,
	MLM_Unlit                                          = 2,
	MLM_SHPRT                                          = 3,
	MLM_Custom                                         = 4,
	MLM_Anisotropic                                    = 5,
	MLM_END                                            = 6
};

// Enum Engine.EngineTypes.EMaterialTessellationMode
enum class EMaterialTessellationMode : uint8_t
{
	MTM_NoTessellation                                 = 0,
	MTM_FlatTessellation                               = 1,
	MTM_PNTriangles                                    = 2,
	MTM_END                                            = 3
};

// Enum Engine.EngineTypes.EMobileValueSource
enum class EMobileValueSource : uint8_t
{
	MVS_Constant                                       = 0,
	MVS_VertexColorRed                                 = 1,
	MVS_VertexColorGreen                               = 2,
	MVS_VertexColorBlue                                = 3,
	MVS_VertexColorAlpha                               = 4,
	MVS_BaseTextureRed                                 = 5,
	MVS_BaseTextureGreen                               = 6,
	MVS_BaseTextureBlue                                = 7,
	MVS_BaseTextureAlpha                               = 8,
	MVS_MaskTextureRed                                 = 9,
	MVS_MaskTextureGreen                               = 10,
	MVS_MaskTextureBlue                                = 11,
	MVS_MaskTextureAlpha                               = 12,
	MVS_NormalTextureAlpha                             = 13,
	MVS_EmissiveTextureRed                             = 14,
	MVS_EmissiveTextureGreen                           = 15,
	MVS_EmissiveTextureBlue                            = 16,
	MVS_EmissiveTextureAlpha                           = 17,
	MVS_END                                            = 18
};

// Enum Engine.EngineTypes.EMobileTextureBlendFactorSource
enum class EMobileTextureBlendFactorSource : uint8_t
{
	MTBFS_VertexColor                                  = 0,
	MTBFS_MaskTexture                                  = 1,
	MTBFS_END                                          = 2
};

// Enum Engine.EngineTypes.EMobileTexCoordsSource
enum class EMobileTexCoordsSource : uint8_t
{
	MTCS_TexCoords0                                    = 0,
	MTCS_TexCoords1                                    = 1,
	MTCS_TexCoords2                                    = 2,
	MTCS_TexCoords3                                    = 3,
	MTCS_END                                           = 4
};

// Enum Engine.EngineTypes.EMobileAlphaValueSource
enum class EMobileAlphaValueSource : uint8_t
{
	MAVS_DiffuseTextureAlpha                           = 0,
	MAVS_MaskTextureRed                                = 1,
	MAVS_MaskTextureGreen                              = 2,
	MAVS_MaskTextureBlue                               = 3,
	MAVS_END                                           = 4
};

// Enum Engine.EngineTypes.EMobileColorMultiplySource
enum class EMobileColorMultiplySource : uint8_t
{
	MCMS_None                                          = 0,
	MCMS_BaseTextureRed                                = 1,
	MCMS_BaseTextureGreen                              = 2,
	MCMS_BaseTextureBlue                               = 3,
	MCMS_BaseTextureAlpha                              = 4,
	MCMS_MaskTextureRed                                = 5,
	MCMS_MaskTextureGreen                              = 6,
	MCMS_MaskTextureBlue                               = 7,
	MCMS_MaskTextureAlpha                              = 8,
	MCMS_END                                           = 9
};

// Enum Engine.EngineTypes.EMobileEmissiveColorSource
enum class EMobileEmissiveColorSource : uint8_t
{
	MECS_EmissiveTexture                               = 0,
	MECS_BaseTexture                                   = 1,
	MECS_Constant                                      = 2,
	MECS_END                                           = 3
};

// Enum Engine.EngineTypes.EMobileEnvironmentBlendMode
enum class EMobileEnvironmentBlendMode : uint8_t
{
	MEBM_Add                                           = 0,
	MEBM_Lerp                                          = 1,
	MEBM_END                                           = 2
};

// Enum Engine.EngineTypes.EMobileSpecularMask
enum class EMobileSpecularMask : uint8_t
{
	MSM_Constant                                       = 0,
	MSM_Luminance                                      = 1,
	MSM_DiffuseRed                                     = 2,
	MSM_DiffuseGreen                                   = 3,
	MSM_DiffuseBlue                                    = 4,
	MSM_DiffuseAlpha                                   = 5,
	MSM_MaskTextureRGB                                 = 6,
	MSM_MaskTextureRed                                 = 7,
	MSM_MaskTextureGreen                               = 8,
	MSM_MaskTextureBlue                                = 9,
	MSM_MaskTextureAlpha                               = 10,
	MSM_END                                            = 11
};

// Enum Engine.EngineTypes.EMobileAmbientOcclusionSource
enum class EMobileAmbientOcclusionSource : uint8_t
{
	MAOS_Disabled                                      = 0,
	MAOS_VertexColorRed                                = 1,
	MAOS_VertexColorGreen                              = 2,
	MAOS_VertexColorBlue                               = 3,
	MAOS_VertexColorAlpha                              = 4,
	MAOS_END                                           = 5
};

// Enum Engine.EngineTypes.ELightingBuildQuality
enum class ELightingBuildQuality : uint8_t
{
	Quality_Preview                                    = 0,
	Quality_Medium                                     = 1,
	Quality_High                                       = 2,
	Quality_Production                                 = 3,
	Quality_NoGlobalIllumination                       = 4,
	Quality_END                                        = 5
};

// Enum Engine.Pawn.EPathSearchType
enum class EPathSearchType : uint8_t
{
	PST_Default                                        = 0,
	PST_Breadth                                        = 1,
	PST_NewBestPathTo                                  = 2,
	PST_Constraint                                     = 3,
	PST_END                                            = 4
};

// Enum Engine.DynamicLightEnvironmentComponent.EDynamicLightEnvironmentBoundsMethod
enum class EDynamicLightEnvironmentBoundsMethod : uint8_t
{
	DLEB_OwnerComponents                               = 0,
	DLEB_ManualOverride                                = 1,
	DLEB_ActiveComponents                              = 2,
	DLEB_END                                           = 3
};

// Enum Engine.ApexDestructibleAsset.EImpactDamageOverride
enum class EImpactDamageOverride : uint8_t
{
	IDO_None                                           = 0,
	IDO_On                                             = 1,
	IDO_Off                                            = 2,
	IDO_END                                            = 3
};

// Enum Engine.ApexDestructibleDamageParameters.EDamageParameterOverrideMode
enum class EDamageParameterOverrideMode : uint8_t
{
	DPOM_Absolute                                      = 0,
	DPOM_Multiplier                                    = 1,
	DPOM_END                                           = 2
};

// Enum Engine.CameraShake.EInitialOscillatorOffset
enum class EInitialOscillatorOffset : uint8_t
{
	EOO_OffsetRandom                                   = 0,
	EOO_OffsetZero                                     = 1,
	EOO_END                                            = 2
};

// Enum Engine.Canvas.ECanvasBlendMode
enum class ECanvasBlendMode : uint8_t
{
	BLEND_CANVAS_Opaque                                = 0,
	BLEND_CANVAS_Masked                                = 1,
	BLEND_CANVAS_Translucent                           = 2,
	BLEND_CANVAS_Additive                              = 3,
	BLEND_CANVAS_Modulate                              = 4,
	BLEND_CANVAS_ModulateAndAdd                        = 5,
	BLEND_CANVAS_SoftMasked                            = 6,
	BLEND_CANVAS_AlphaComposite                        = 7,
	BLEND_CANVAS_DitheredTranslucent                   = 8,
	BLEND_CANVAS_AlphaOnly                             = 9,
	BLEND_CANVAS_END                                   = 10
};

// Enum Engine.Texture.TextureCompressionSettings
enum class ETextureCompressionSettings : uint8_t
{
	TC_Default                                         = 0,
	TC_Normalmap                                       = 1,
	TC_Displacementmap                                 = 2,
	TC_NormalmapAlpha                                  = 3,
	TC_Grayscale                                       = 4,
	TC_HighDynamicRange                                = 5,
	TC_OneBitAlpha                                     = 6,
	TC_NormalmapUncompressed                           = 7,
	TC_NormalmapBC5                                    = 8,
	TC_OneBitMonochrome                                = 9,
	TC_SimpleLightmapModification                      = 10,
	TC_VectorDisplacementmap                           = 11,
	TC_END                                             = 12
};

// Enum Engine.Texture.EPixelFormat
enum class EPixelFormat : uint8_t
{
	PF_Unknown                                         = 0,
	PF_A32B32G32R32F                                   = 1,
	PF_A8R8G8B8                                        = 2,
	PF_G8                                              = 3,
	PF_G16                                             = 4,
	PF_DXT1                                            = 5,
	PF_DXT3                                            = 6,
	PF_DXT5                                            = 7,
	PF_UYVY                                            = 8,
	PF_FloatRGB                                        = 9,
	PF_FloatRGBA                                       = 10,
	PF_DepthStencil                                    = 11,
	PF_ShadowDepth                                     = 12,
	PF_FilteredShadowDepth                             = 13,
	PF_R32F                                            = 14,
	PF_G16R16                                          = 15,
	PF_G16R16F                                         = 16,
	PF_G16R16F_FILTER                                  = 17,
	PF_G32R32F                                         = 18,
	PF_A2B10G10R10                                     = 19,
	PF_A16B16G16R16                                    = 20,
	PF_D24                                             = 21,
	PF_R16F                                            = 22,
	PF_R16F_FILTER                                     = 23,
	PF_BC5                                             = 24,
	PF_V8U8                                            = 25,
	PF_A1                                              = 26,
	PF_FloatR11G11B10                                  = 27,
	PF_A4R4G4B4                                        = 28,
	PF_END                                             = 29
};

// Enum Engine.Texture.TextureFilter
enum class ETextureFilter : uint8_t
{
	TF_Nearest                                         = 0,
	TF_Linear                                          = 1,
	TF_END                                             = 2
};

// Enum Engine.Texture.TextureAddress
enum class ETextureAddress : uint8_t
{
	TA_Wrap                                            = 0,
	TA_Clamp                                           = 1,
	TA_Mirror                                          = 2,
	TA_END                                             = 3
};

// Enum Engine.Texture.TextureGroup
enum class ETextureGroup : uint8_t
{
	TEXTUREGROUP_World                                 = 0,
	TEXTUREGROUP_WorldNormalMap                        = 1,
	TEXTUREGROUP_WorldSpecular                         = 2,
	TEXTUREGROUP_Character                             = 3,
	TEXTUREGROUP_CharacterNormalMap                    = 4,
	TEXTUREGROUP_CharacterSpecular                     = 5,
	TEXTUREGROUP_Weapon                                = 6,
	TEXTUREGROUP_WeaponNormalMap                       = 7,
	TEXTUREGROUP_WeaponSpecular                        = 8,
	TEXTUREGROUP_Vehicle                               = 9,
	TEXTUREGROUP_VehicleNormalMap                      = 10,
	TEXTUREGROUP_VehicleSpecular                       = 11,
	TEXTUREGROUP_Cinematic                             = 12,
	TEXTUREGROUP_Effects                               = 13,
	TEXTUREGROUP_EffectsNotFiltered                    = 14,
	TEXTUREGROUP_Skybox                                = 15,
	TEXTUREGROUP_UI                                    = 16,
	TEXTUREGROUP_Lightmap                              = 17,
	TEXTUREGROUP_RenderTarget                          = 18,
	TEXTUREGROUP_MobileFlattened                       = 19,
	TEXTUREGROUP_ProcBuilding_Face                     = 20,
	TEXTUREGROUP_ProcBuilding_LightMap                 = 21,
	TEXTUREGROUP_Shadowmap                             = 22,
	TEXTUREGROUP_ColorLookupTable                      = 23,
	TEXTUREGROUP_Terrain_Heightmap                     = 24,
	TEXTUREGROUP_Terrain_Weightmap                     = 25,
	TEXTUREGROUP_ImageBasedReflection                  = 26,
	TEXTUREGROUP_Bokeh                                 = 27,
	TEXTUREGROUP_END                                   = 28
};

// Enum Engine.Texture.TextureMipGenSettings
enum class ETextureMipGenSettings : uint8_t
{
	TMGS_FromTextureGroup                              = 0,
	TMGS_SimpleAverage                                 = 1,
	TMGS_Sharpen0                                      = 2,
	TMGS_Sharpen1                                      = 3,
	TMGS_Sharpen2                                      = 4,
	TMGS_Sharpen3                                      = 5,
	TMGS_Sharpen4                                      = 6,
	TMGS_Sharpen5                                      = 7,
	TMGS_Sharpen6                                      = 8,
	TMGS_Sharpen7                                      = 9,
	TMGS_Sharpen8                                      = 10,
	TMGS_Sharpen9                                      = 11,
	TMGS_Sharpen10                                     = 12,
	TMGS_NoMipmaps                                     = 13,
	TMGS_LeaveExistingMips                             = 14,
	TMGS_Blur1                                         = 15,
	TMGS_Blur2                                         = 16,
	TMGS_Blur3                                         = 17,
	TMGS_Blur4                                         = 18,
	TMGS_Blur5                                         = 19,
	TMGS_END                                           = 20
};

// Enum Engine.Texture.ETextureMipCount
enum class ETextureMipCount : uint8_t
{
	TMC_ResidentMips                                   = 0,
	TMC_AllMips                                        = 1,
	TMC_AllMipsBiased                                  = 2,
	TMC_END                                            = 3
};

// Enum Engine.CloudStorageBase.ECloudStorageDelegate
enum class ECloudStorageDelegate : uint8_t
{
	CSD_KeyValueReadComplete                           = 0,
	CSD_KeyValueWriteComplete                          = 1,
	CSD_ValueChanged                                   = 2,
	CSD_DocumentQueryComplete                          = 3,
	CSD_DocumentReadComplete                           = 4,
	CSD_DocumentWriteComplete                          = 5,
	CSD_DocumentConflictDetected                       = 6,
	CSD_END                                            = 7
};

// Enum Engine.UIRoot.EInputPlatformType
enum class EInputPlatformType : uint8_t
{
	IPT_PC                                             = 0,
	IPT                                                = 1,
	IPT_PS3                                            = 2,
	IPT_END                                            = 3
};

// Enum Engine.Interaction.ETouchType
enum class ETouchType : uint8_t
{
	Touch_Began                                        = 0,
	Touch_Moved                                        = 1,
	Touch_Stationary                                   = 2,
	Touch_Ended                                        = 3,
	Touch_Cancelled                                    = 4,
	Touch_END                                          = 5
};

// Enum Engine.CoverGroup.ECoverGroupFillAction
enum class ECoverGroupFillAction : uint8_t
{
	CGFA_Overwrite                                     = 0,
	CGFA_Add                                           = 1,
	CGFA_Remove                                        = 2,
	CGFA_Clear                                         = 3,
	CGFA_Cylinder                                      = 4,
	CGFA_END                                           = 5
};

// Enum Engine.CoverLink.ECoverLocationDescription
enum class ECoverLocationDescription : uint8_t
{
	CoverDesc_None                                     = 0,
	CoverDesc_InWindow                                 = 1,
	CoverDesc_InDoorway                                = 2,
	CoverDesc_BehindCar                                = 3,
	CoverDesc_BehindTruck                              = 4,
	CoverDesc_OnTruck                                  = 5,
	CoverDesc_BehindBarrier                            = 6,
	CoverDesc_BehindColumn                             = 7,
	CoverDesc_BehindCrate                              = 8,
	CoverDesc_BehindWall                               = 9,
	CoverDesc_BehindStatue                             = 10,
	CoverDesc_BehindSandbags                           = 11,
	CoverDesc_END                                      = 12
};

// Enum Engine.CoverLink.ECoverType
enum class ECoverType : uint8_t
{
	CT_None                                            = 0,
	CT_Standing                                        = 1,
	CT_MidLevel                                        = 2,
	CT_END                                             = 3
};

// Enum Engine.CoverLink.ECoverAction
enum class ECoverAction : uint8_t
{
	CA_Default                                         = 0,
	CA_BlindLeft                                       = 1,
	CA_BlindRight                                      = 2,
	CA_LeanLeft                                        = 3,
	CA_LeanRight                                       = 4,
	CA_PopUp                                           = 5,
	CA_BlindUp                                         = 6,
	CA_PeekLeft                                        = 7,
	CA_PeekRight                                       = 8,
	CA_PeekUp                                          = 9,
	CA_END                                             = 10
};

// Enum Engine.CoverLink.ECoverDirection
enum class ECoverDirection : uint8_t
{
	CD_Default                                         = 0,
	CD_Left                                            = 1,
	CD_Right                                           = 2,
	CD_Up                                              = 3,
	CD_END                                             = 4
};

// Enum Engine.CoverLink.EFireLinkID
enum class EFireLinkID : uint8_t
{
	FLI_FireLink                                       = 0,
	FLI_RejectedFireLink                               = 1,
	FLI_END                                            = 2
};

// Enum Engine.StaticMeshComponent.ELightmapModificationFunction
enum class ELightmapModificationFunction : uint8_t
{
	MLMF_Modulate                                      = 0,
	MLMF_ModulateAlpha                                 = 1,
	MLMF_END                                           = 2
};

// Enum Engine.DecalComponent.EFilterMode
enum class EFilterMode : uint8_t
{
	FM_None                                            = 0,
	FM_Ignore                                          = 1,
	FM_Affect                                          = 2,
	FM_END                                             = 3
};

// Enum Engine.DecalComponent.EDecalTransform
enum class EDecalTransform : uint8_t
{
	DecalTransform_OwnerAbsolute                       = 0,
	DecalTransform_OwnerRelative                       = 1,
	DecalTransform_SpawnRelative                       = 2,
	DecalTransform_END                                 = 3
};

// Enum Engine.MaterialInterface.EMaterialUsage
enum class EMaterialUsage : uint8_t
{
	MATUSAGE_SkeletalMesh                              = 0,
	MATUSAGE_FracturedMeshes                           = 1,
	MATUSAGE_ParticleSprites                           = 2,
	MATUSAGE_BeamTrails                                = 3,
	MATUSAGE_ParticleSubUV                             = 4,
	MATUSAGE_SpeedTree                                 = 5,
	MATUSAGE_StaticLighting                            = 6,
	MATUSAGE_GammaCorrection                           = 7,
	MATUSAGE_LensFlare                                 = 8,
	MATUSAGE_InstancedMeshParticles                    = 9,
	MATUSAGE_FluidSurface                              = 10,
	MATUSAGE_Decals                                    = 11,
	MATUSAGE_MaterialEffect                            = 12,
	MATUSAGE_MorphTargets                              = 13,
	MATUSAGE_FogVolumes                                = 14,
	MATUSAGE_RadialBlur                                = 15,
	MATUSAGE_InstancedMeshes                           = 16,
	MATUSAGE_SplineMesh                                = 17,
	MATUSAGE_ScreenDoorFade                            = 18,
	MATUSAGE_APEXMesh                                  = 19,
	MATUSAGE_Terrain                                   = 20,
	MATUSAGE_Landscape                                 = 21,
	MATUSAGE_END                                       = 22
};

// Enum Engine.LightComponent.EShadowFilterQuality
enum class EShadowFilterQuality : uint8_t
{
	SFQ_Low                                            = 0,
	SFQ_Medium                                         = 1,
	SFQ_High                                           = 2,
	SFQ_END                                            = 3
};

// Enum Engine.LightComponent.EShadowProjectionTechnique
enum class EShadowProjectionTechnique : uint8_t
{
	ShadowProjTech_Default                             = 0,
	ShadowProjTech_PCF                                 = 1,
	ShadowProjTech_VSM                                 = 2,
	ShadowProjTech_BPCF_Low                            = 3,
	ShadowProjTech_BPCF_Medium                         = 4,
	ShadowProjTech_BPCF_High                           = 5,
	ShadowProjTech_END                                 = 6
};

// Enum Engine.LightComponent.ELightShadowMode
enum class ELightShadowMode : uint8_t
{
	LightShadow_Normal                                 = 0,
	LightShadow_Modulate                               = 1,
	LightShadow_ModulateBetter                         = 2,
	LightShadow_END                                    = 3
};

// Enum Engine.LightComponent.ELightAffectsClassification
enum class ELightAffectsClassification : uint8_t
{
	LAC_USER_SELECTED                                  = 0,
	LAC_DYNAMIC_AFFECTING                              = 1,
	LAC_STATIC_AFFECTING                               = 2,
	LAC_DYNAMIC_AND_STATIC_AFFECTING                   = 3,
	LAC_END                                            = 4
};

// Enum Engine.DistributionFloatParameterBase.DistributionParamMode
enum class EDistributionParamMode : uint8_t
{
	DPM_Normal                                         = 0,
	DPM_Abs                                            = 1,
	DPM_Direct                                         = 2,
	DPM_END                                            = 3
};

// Enum Engine.DOFAndBloomEffect.EDOFQuality
enum class EDOFQuality : uint8_t
{
	DOFQuality_Low                                     = 0,
	DOFQuality_Medium                                  = 1,
	DOFQuality_High                                    = 2,
	DOFQuality_END                                     = 3
};

// Enum Engine.DOFAndBloomEffect.EDOFType
enum class EDOFType : uint8_t
{
	DOFType_SimpleDOF                                  = 0,
	DOFType_ReferenceDOF                               = 1,
	DOFType_BokehDOF                                   = 2,
	DOFType_END                                        = 3
};

// Enum Engine.DoorMarker.EDoorType
enum class EDoorType : uint8_t
{
	DOOR_Shoot                                         = 0,
	DOOR_Touch                                         = 1,
	DOOR_END                                           = 2
};

// Enum Engine.ParticleSystemComponent.EParticleSysParamType
enum class EParticleSysParamType : uint8_t
{
	PSPT_None                                          = 0,
	PSPT_Scalar                                        = 1,
	PSPT_ScalarRand                                    = 2,
	PSPT_Vector                                        = 3,
	PSPT_VectorRand                                    = 4,
	PSPT_Color                                         = 5,
	PSPT_Actor                                         = 6,
	PSPT_Material                                      = 7,
	PSPT_END                                           = 8
};

// Enum Engine.ParticleSystemComponent.ParticleReplayState
enum class EParticleReplayState : uint8_t
{
	PRS_Disabled                                       = 0,
	PRS_Capturing                                      = 1,
	PRS_Replaying                                      = 2,
	PRS_END                                            = 3
};

// Enum Engine.ParticleSystemComponent.EParticleEventType
enum class EParticleEventType : uint8_t
{
	EPET_Any                                           = 0,
	EPET_Spawn                                         = 1,
	EPET_Death                                         = 2,
	EPET_Collision                                     = 3,
	EPET_WorldAttractorCollision                       = 4,
	EPET_Kismet                                        = 5,
	EPET_END                                           = 6
};

// Enum Engine.ParticleSystem.ParticleSystemLODMethod
enum class EParticleSystemLODMethod : uint8_t
{
	PARTICLESYSTEMLODMETHOD_Automatic                  = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                  = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic          = 2,
	PARTICLESYSTEMLODMETHOD_END                        = 3
};

// Enum Engine.Engine.ETransitionType
enum class ETransitionType : uint8_t
{
	TT_None                                            = 0,
	TT_Paused                                          = 1,
	TT_Loading                                         = 2,
	TT_Saving                                          = 3,
	TT_Connecting                                      = 4,
	TT_Precaching                                      = 5,
	TT_END                                             = 6
};

// Enum Engine.FacebookIntegration.EFacebookIntegrationDelegate
enum class EFacebookIntegrationDelegate : uint8_t
{
	FID_AuthorizationComplete                          = 0,
	FID_FacebookRequestComplete                        = 1,
	FID_DialogComplete                                 = 2,
	FID_FriendsListComplete                            = 3,
	FID_END                                            = 4
};

// Enum Engine.FileWriter.FWFileType
enum class EFWFileType : uint8_t
{
	FWFT_Log                                           = 0,
	FWFT_Stats                                         = 1,
	FWFT_HTML                                          = 2,
	FWFT_User                                          = 3,
	FWFT_Debug                                         = 4,
	FWFT_END                                           = 5
};

// Enum Engine.FluidInfluenceComponent.EInfluenceType
enum class EInfluenceType : uint8_t
{
	Fluid_Flow                                         = 0,
	Fluid_Raindrops                                    = 1,
	Fluid_Wave                                         = 2,
	Fluid_Sphere                                       = 3,
	Fluid_END                                          = 4
};

// Enum Engine.FontImportOptions.EFontImportCharacterSet
enum class EFontImportCharacterSet : uint8_t
{
	FontICS_Default                                    = 0,
	FontICS_Ansi                                       = 1,
	FontICS_Symbol                                     = 2,
	FontICS_END                                        = 3
};

// Enum Engine.ForceFeedbackWaveform.EWaveformFunction
enum class EWaveformFunction : uint8_t
{
	WF_Constant                                        = 0,
	WF_LinearIncreasing                                = 1,
	WF_LinearDecreasing                                = 2,
	WF_Sin0to90                                        = 3,
	WF_Sin90to180                                      = 4,
	WF_Sin0to180                                       = 5,
	WF_Noise                                           = 6,
	WF_END                                             = 7
};

// Enum Engine.WorldInfo.EHostMigrationProgress
enum class EHostMigrationProgress : uint8_t
{
	HostMigration_None                                 = 0,
	HostMigration_FindingNewHost                       = 1,
	HostMigration_MigratingAsHost                      = 2,
	HostMigration_MigratingAsClient                    = 3,
	HostMigration_ClientTravel                         = 4,
	HostMigration_HostReadyToTravel                    = 5,
	HostMigration_Failed                               = 6,
	HostMigration_END                                  = 7
};

// Enum Engine.WorldInfo.EConsoleType
enum class EConsoleType : uint8_t
{
	CONSOLE_Any                                        = 0,
	CONSOLE_Xbox360                                    = 1,
	CONSOLE_PS3                                        = 2,
	CONSOLE_Mobile                                     = 3,
	CONSOLE_IPhone                                     = 4,
	CONSOLE_Android                                    = 5,
	CONSOLE_WiiU                                       = 6,
	CONSOLE_Flash                                      = 7,
	CONSOLE_Orbis                                      = 8,
	CONSOLE_END                                        = 9
};

// Enum Engine.WorldInfo.EPreferredLightmapType
enum class EPreferredLightmapType : uint8_t
{
	EPLT_Default                                       = 0,
	EPLT_Directional                                   = 1,
	EPLT_Simple                                        = 2,
	EPLT_END                                           = 3
};

// Enum Engine.WorldInfo.EVisibilityAggressiveness
enum class EVisibilityAggressiveness : uint8_t
{
	VIS_LeastAggressive                                = 0,
	VIS_ModeratelyAggressive                           = 1,
	VIS_MostAggressive                                 = 2,
	VIS_Max                                            = 3
};

// Enum Engine.WorldInfo.ENetMode
enum class ENetMode : uint8_t
{
	NM_Standalone                                      = 0,
	NM_DedicatedServer                                 = 1,
	NM_ListenServer                                    = 2,
	NM_Client                                          = 3,
	NM_END                                             = 4
};

// Enum Engine.GameEngine.EFullyLoadPackageType
enum class EFullyLoadPackageType : uint8_t
{
	FULLYLOAD_Map                                      = 0,
	FULLYLOAD_Game_PreLoadClass                        = 1,
	FULLYLOAD_Game_PostLoadClass                       = 2,
	FULLYLOAD_Always                                   = 3,
	FULLYLOAD_Mutator                                  = 4,
	FULLYLOAD_END                                      = 5
};

// Enum Engine.GameInfo.EStandbyType
enum class EStandbyType : uint8_t
{
	STDBY_Rx                                           = 0,
	STDBY_Tx                                           = 1,
	STDBY_BadPing                                      = 2,
	STDBY_END                                          = 3
};

// Enum Engine.GamePadLightbarSubsystem.LightBarState
enum class ELightBarState : uint8_t
{
	ELBS_Standby                                       = 0,
	ELBS_Lerping                                       = 1,
	ELBS_Pulsing                                       = 2,
	ELBS_END                                           = 3
};

// Enum Engine.GameplayEvents.EGameStatGroups
enum class EGameStatGroups : uint8_t
{
	GSG_EngineStats                                    = 0,
	GSG_Game                                           = 1,
	GSG_Team                                           = 2,
	GSG_Player                                         = 3,
	GSG_Weapon                                         = 4,
	GSG_Damage                                         = 5,
	GSG_Projectile                                     = 6,
	GSG_Pawn                                           = 7,
	GSG_GameSpecific                                   = 8,
	GSG_Aggregate                                      = 9,
	GSG_END                                            = 10
};

// Enum Engine.GameViewportClient.ESplitScreenType
enum class ESplitScreenType : uint8_t
{
	eSST_NONE                                          = 0,
	eSST_2P_HORIZONTAL                                 = 1,
	eSST_2P_VERTICAL                                   = 2,
	eSST_3P_FAVOR_TOP                                  = 3,
	eSST_3P_FAVOR_BOTTOM                               = 4,
	eSST_4P                                            = 5,
	eSST_END                                           = 6
};

// Enum Engine.GameViewportClient.ESafeZoneType
enum class ESafeZoneType : uint8_t
{
	eSZ_TOP                                            = 0,
	eSZ_BOTTOM                                         = 1,
	eSZ_LEFT                                           = 2,
	eSZ_RIGHT                                          = 3,
	eSZ_END                                            = 4
};

// Enum Engine.GameViewportClient.ESetMode
enum class ESetMode : uint8_t
{
	SetMode_Toggle                                     = 0,
	SetMode_Enable                                     = 1,
	SetMode_Disable                                    = 2,
	SetMode_END                                        = 3
};

// Enum Engine.InAppMessageBase.EInAppMessageInterfaceDelegate
enum class EInAppMessageInterfaceDelegate : uint8_t
{
	IAMD_InAppSMSUIComplete                            = 0,
	IAMD_InAppEmailComplete                            = 1,
	IAMD_END                                           = 2
};

// Enum Engine.InGameAdManager.EAdManagerDelegate
enum class EAdManagerDelegate : uint8_t
{
	AMD_ClickedBanner                                  = 0,
	AMD_UserClosedAd                                   = 1,
	AMD_END                                            = 2
};

// Enum Engine.InstancedFoliageSettings.FoliageCullOption
enum class EFoliageCullOption : uint8_t
{
	FOLIAGECULL_Cull                                   = 0,
	FOLIAGECULL_ScaleZ                                 = 1,
	FOLIAGECULL_ScaleXYZ                               = 2,
	FOLIAGECULL_TranslateZ                             = 3,
	FOLIAGECULL_END                                    = 4
};

// Enum Engine.Interface_NavMeshPathObstacle.EEdgeHandlingStatus
enum class EEdgeHandlingStatus : uint8_t
{
	EHS_AddedBothDirs                                  = 0,
	EHS_Added0to1                                      = 1,
	EHS_Added1to0                                      = 2,
	EHS_AddedNone                                      = 3,
	EHS_END                                            = 4
};

// Enum Engine.InterpTrack.ETrackActiveCondition
enum class ETrackActiveCondition : uint8_t
{
	ETAC_Always                                        = 0,
	ETAC_GoreEnabled                                   = 1,
	ETAC_GoreDisabled                                  = 2,
	ETAC_END                                           = 3
};

// Enum Engine.InterpTrackHeadTracking.EHeadTrackingAction
enum class EHeadTrackingAction : uint8_t
{
	EHTA_DisableHeadTracking                           = 0,
	EHTA_EnableHeadTracking                            = 1,
	EHTA_END                                           = 2
};

// Enum Engine.InterpTrackToggle.ETrackToggleAction
enum class ETrackToggleAction : uint8_t
{
	ETTA_Off                                           = 0,
	ETTA_On                                            = 1,
	ETTA_Toggle                                        = 2,
	ETTA_Trigger                                       = 3,
	ETTA_END                                           = 4
};

// Enum Engine.InterpTrackVisibility.EVisibilityTrackCondition
enum class EVisibilityTrackCondition : uint8_t
{
	EVTC_Always                                        = 0,
	EVTC_GoreEnabled                                   = 1,
	EVTC_GoreDisabled                                  = 2,
	EVTC_END                                           = 3
};

// Enum Engine.InterpTrackVisibility.EVisibilityTrackAction
enum class EVisibilityTrackAction : uint8_t
{
	EVTA_Hide                                          = 0,
	EVTA_Show                                          = 1,
	EVTA_Toggle                                        = 2,
	EVTA_END                                           = 3
};

// Enum Engine.InterpTrackMove.EInterpTrackMoveRotMode
enum class EInterpTrackMoveRotMode : uint8_t
{
	IMR_Keyframed                                      = 0,
	IMR_LookAtGroup                                    = 1,
	IMR_Ignore                                         = 2,
	IMR_END                                            = 3
};

// Enum Engine.InterpTrackMove.EInterpTrackMoveFrame
enum class EInterpTrackMoveFrame : uint8_t
{
	IMF_World                                          = 0,
	IMF_RelativeToInitial                              = 1,
	IMF_END                                            = 2
};

// Enum Engine.InterpTrackMoveAxis.EInterpMoveAxis
enum class EInterpMoveAxis : uint8_t
{
	AXIS_TranslationX                                  = 0,
	AXIS_TranslationY                                  = 1,
	AXIS_TranslationZ                                  = 2,
	AXIS_RotationX                                     = 3,
	AXIS_RotationY                                     = 4,
	AXIS_RotationZ                                     = 5,
	AXIS_END                                           = 6
};

// Enum Engine.Landscape.ELandscapeSetupErrors
enum class ELandscapeSetupErrors : uint8_t
{
	LSE_None                                           = 0,
	LSE_NoLandscapeInfo                                = 1,
	LSE_CollsionXY                                     = 2,
	LSE_NoLayerInfo                                    = 3,
	LSE_END                                            = 4
};

// Enum Engine.LandscapeGizmoActiveActor.ELandscapeGizmoType
enum class ELandscapeGizmoType : uint8_t
{
	LGT_None                                           = 0,
	LGT_Height                                         = 1,
	LGT_Weight                                         = 2,
	LGT_END                                            = 3
};

// Enum Engine.LevelGridVolume.LevelGridCellShape
enum class ELevelGridCellShape : uint8_t
{
	LGCS_Box                                           = 0,
	LGCS_Hex                                           = 1,
	LGCS_END                                           = 2
};

// Enum Engine.LevelStreamingVolume.EStreamingVolumeUsage
enum class EStreamingVolumeUsage : uint8_t
{
	SVB_Loading                                        = 0,
	SVB_LoadingAndVisibility                           = 1,
	SVB_VisibilityBlockingOnLoad                       = 2,
	SVB_BlockingOnLoad                                 = 3,
	SVB_LoadingNotVisible                              = 4,
	SVB_END                                            = 5
};

// Enum Engine.MaterialExpressionAntialiasedTextureMask.ETextureColorChannel
enum class ETextureColorChannel : uint8_t
{
	TCC_Red                                            = 0,
	TCC_Green                                          = 1,
	TCC_Blue                                           = 2,
	TCC_Alpha                                          = 3,
	TCC_END                                            = 4
};

// Enum Engine.MaterialExpressionCustom.ECustomMaterialOutputType
enum class ECustomMaterialOutputType : uint8_t
{
	CMOT_Float1                                        = 0,
	CMOT_Float2                                        = 1,
	CMOT_Float3                                        = 2,
	CMOT_Float4                                        = 3,
	CMOT_END                                           = 4
};

// Enum Engine.MaterialExpressionDepthOfFieldFunction.EDepthOfFieldFunctionValue
enum class EDepthOfFieldFunctionValue : uint8_t
{
	TDOF_NearAndFarMask                                = 0,
	TDOF_NearMask                                      = 1,
	TDOF_FarMask                                       = 2,
	TDOF_END                                           = 3
};

// Enum Engine.MaterialExpressionFunctionInput.EFunctionInputType
enum class EFunctionInputType : uint8_t
{
	FunctionInput_Scalar                               = 0,
	FunctionInput_Vector2                              = 1,
	FunctionInput_Vector3                              = 2,
	FunctionInput_Vector4                              = 3,
	FunctionInput_Texture2D                            = 4,
	FunctionInput_TextureCube                          = 5,
	FunctionInput_StaticBool                           = 6,
	FunctionInput_END                                  = 7
};

// Enum Engine.MaterialExpressionLandscapeLayerBlend.ELandscapeLayerBlendType
enum class ELandscapeLayerBlendType : uint8_t
{
	LB_AlphaBlend                                      = 0,
	LB_HeightBlend                                     = 1,
	LB_END                                             = 2
};

// Enum Engine.MaterialExpressionSceneTexture.ESceneTextureType
enum class ESceneTextureType : uint8_t
{
	SceneTex_Lighting                                  = 0,
	SceneTex_HalfRes                                   = 1,
	SceneTex_END                                       = 2
};

// Enum Engine.MaterialExpressionTerrainLayerCoords.ETerrainCoordMappingType
enum class ETerrainCoordMappingType : uint8_t
{
	TCMT_Auto                                          = 0,
	TCMT_XY                                            = 1,
	TCMT_XZ                                            = 2,
	TCMT_YZ                                            = 3,
	TCMT_END                                           = 4
};

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransform
enum class EMaterialVectorCoordTransform : uint8_t
{
	TRANSFORM_World                                    = 0,
	TRANSFORM_View                                     = 1,
	TRANSFORM_Local                                    = 2,
	TRANSFORM_Tangent                                  = 3,
	TRANSFORM_END                                      = 4
};

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransformSource
enum class EMaterialVectorCoordTransformSource : uint8_t
{
	TRANSFORMSOURCE_World                              = 0,
	TRANSFORMSOURCE_Local                              = 1,
	TRANSFORMSOURCE_Tangent                            = 2,
	TRANSFORMSOURCE_View                               = 3,
	TRANSFORMSOURCE_END                                = 4
};

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransform
enum class EMaterialPositionTransform : uint8_t
{
	TRANSFORMPOS_World                                 = 0,
	TRANSFORMPOS_END                                   = 1
};

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransformSource
enum class EMaterialPositionTransformSource : uint8_t
{
	TRANSFORMPOSSOURCE_Local                           = 0,
	TRANSFORMPOSSOURCE_PostProjection                  = 1,
	TRANSFORMPOSSOURCE_END                             = 2
};

// Enum Engine.MicroTransactionBase.EMicroTransactionDelegate
enum class EMicroTransactionDelegate : uint8_t
{
	MTD_PurchaseQueryComplete                          = 0,
	MTD_PurchaseComplete                               = 1,
	MTD_END                                            = 2
};

// Enum Engine.MicroTransactionBase.EMicroTransactionResult
enum class EMicroTransactionResult : uint8_t
{
	MTR_Succeeded                                      = 0,
	MTR_Failed                                         = 1,
	MTR_Canceled                                       = 2,
	MTR_RestoredFromServer                             = 3,
	MTR_END                                            = 4
};

// Enum Engine.NxForceFieldGeneric.FFG_ForceFieldCoordinates
enum class EFFG_ForceFieldCoordinates : uint8_t
{
	FFG_CARTESIAN                                      = 0,
	FFG_SPHERICAL                                      = 1,
	FFG_CYLINDRICAL                                    = 2,
	FFG_TOROIDAL                                       = 3,
	FFG_END                                            = 4
};

// Enum Engine.NxGenericForceFieldBrush.FFB_ForceFieldCoordinates
enum class EFFB_ForceFieldCoordinates : uint8_t
{
	FFB_CARTESIAN                                      = 0,
	FFB_SPHERICAL                                      = 1,
	FFB_CYLINDRICAL                                    = 2,
	FFB_TOROIDAL                                       = 3,
	FFB_END                                            = 4
};

// Enum Engine.OnlineGameDownloadInterface.EDownloadSpeed
enum class EDownloadSpeed : uint8_t
{
	EDLS_Pause                                         = 0,
	EDLS_Slow                                          = 1,
	EDLS_Fast                                          = 2,
	EDLS_END                                           = 3
};

// Enum Engine.OnlinePlayerStorage.EOnlineProfilePropertyOwner
enum class EOnlineProfilePropertyOwner : uint8_t
{
	OPPO_None                                          = 0,
	OPPO_OnlineService                                 = 1,
	OPPO_Game                                          = 2,
	OPPO_END                                           = 3
};

// Enum Engine.OnlinePlayerStorage.EOnlinePlayerStorageAsyncState
enum class EOnlinePlayerStorageAsyncState : uint8_t
{
	OPAS_NotStarted                                    = 0,
	OPAS_Read                                          = 1,
	OPAS_Write                                         = 2,
	OPAS_Finished                                      = 3,
	OPAS_END                                           = 4
};

// Enum Engine.OnlineProfileSettings.EProfileSettingID
enum class EProfileSettingID : uint8_t
{
	PSI_Unknown                                        = 0,
	PSI_ControllerVibration                            = 1,
	PSI_YInversion                                     = 2,
	PSI_GamerCred                                      = 3,
	PSI_GamerRep                                       = 4,
	PSI_VoiceMuted                                     = 5,
	PSI_VoiceThruSpeakers                              = 6,
	PSI_VoiceVolume                                    = 7,
	PSI_GamerPictureKey                                = 8,
	PSI_GamerMotto                                     = 9,
	PSI_GamerTitlesPlayed                              = 10,
	PSI_GamerAchievementsEarned                        = 11,
	PSI_GameDifficulty                                 = 12,
	PSI_ControllerSensitivity                          = 13,
	PSI_PreferredColor1                                = 14,
	PSI_PreferredColor2                                = 15,
	PSI_AutoAim                                        = 16,
	PSI_AutoCenter                                     = 17,
	PSI_MovementControl                                = 18,
	PSI_RaceTransmission                               = 19,
	PSI_RaceCameraLocation                             = 20,
	PSI_RaceBrakeControl                               = 21,
	PSI_RaceAcceleratorControl                         = 22,
	PSI_GameCredEarned                                 = 23,
	PSI_GameAchievementsEarned                         = 24,
	PSI_EndLiveIds                                     = 25,
	PSI_ProfileVersionNum                              = 26,
	PSI_ProfileSaveCount                               = 27,
	PSI_END                                            = 28
};

// Enum Engine.OnlineProfileSettings.EProfileDifficultyOptions
enum class EProfileDifficultyOptions : uint8_t
{
	PDO_Normal                                         = 0,
	PDO_Easy                                           = 1,
	PDO_Hard                                           = 2,
	PDO_END                                            = 3
};

// Enum Engine.OnlineProfileSettings.EProfileControllerSensitivityOptions
enum class EProfileControllerSensitivityOptions : uint8_t
{
	PCSO_Medium                                        = 0,
	PCSO_Low                                           = 1,
	PCSO_High                                          = 2,
	PCSO_END                                           = 3
};

// Enum Engine.OnlineProfileSettings.EProfilePreferredColorOptions
enum class EProfilePreferredColorOptions : uint8_t
{
	PPCO_None                                          = 0,
	PPCO_Black                                         = 1,
	PPCO_White                                         = 2,
	PPCO_Yellow                                        = 3,
	PPCO_Orange                                        = 4,
	PPCO_Pink                                          = 5,
	PPCO_Red                                           = 6,
	PPCO_Purple                                        = 7,
	PPCO_Blue                                          = 8,
	PPCO_Green                                         = 9,
	PPCO_Brown                                         = 10,
	PPCO_Silver                                        = 11,
	PPCO_END                                           = 12
};

// Enum Engine.OnlineProfileSettings.EProfileAutoAimOptions
enum class EProfileAutoAimOptions : uint8_t
{
	PAAO_Off                                           = 0,
	PAAO_On                                            = 1,
	PAAO_END                                           = 2
};

// Enum Engine.OnlineProfileSettings.EProfileAutoCenterOptions
enum class EProfileAutoCenterOptions : uint8_t
{
	PACO_Off                                           = 0,
	PACO_On                                            = 1,
	PACO_END                                           = 2
};

// Enum Engine.OnlineProfileSettings.EProfileMovementControlOptions
enum class EProfileMovementControlOptions : uint8_t
{
	PMCO_L_Thumbstick                                  = 0,
	PMCO_R_Thumbstick                                  = 1,
	PMCO_END                                           = 2
};

// Enum Engine.OnlineProfileSettings.EProfileRaceTransmissionOptions
enum class EProfileRaceTransmissionOptions : uint8_t
{
	PRTO_Auto                                          = 0,
	PRTO_Manual                                        = 1,
	PRTO_END                                           = 2
};

// Enum Engine.OnlineProfileSettings.EProfileRaceCameraLocationOptions
enum class EProfileRaceCameraLocationOptions : uint8_t
{
	PRCLO_Behind                                       = 0,
	PRCLO_Front                                        = 1,
	PRCLO_Inside                                       = 2,
	PRCLO_END                                          = 3
};

// Enum Engine.OnlineProfileSettings.EProfileRaceBrakeControlOptions
enum class EProfileRaceBrakeControlOptions : uint8_t
{
	PRBCO_Trigger                                      = 0,
	PRBCO_Button                                       = 1,
	PRBCO_END                                          = 2
};

// Enum Engine.OnlineProfileSettings.EProfileRaceAcceleratorControlOptions
enum class EProfileRaceAcceleratorControlOptions : uint8_t
{
	PRACO_Trigger                                      = 0,
	PRACO_Button                                       = 1,
	PRACO_END                                          = 2
};

// Enum Engine.OnlineProfileSettings.EProfileYInversionOptions
enum class EProfileYInversionOptions : uint8_t
{
	PYIO_Off                                           = 0,
	PYIO_On                                            = 1,
	PYIO_END                                           = 2
};

// Enum Engine.OnlineProfileSettings.EProfileXInversionOptions
enum class EProfileXInversionOptions : uint8_t
{
	PXIO_Off                                           = 0,
	PXIO_On                                            = 1,
	PXIO_END                                           = 2
};

// Enum Engine.OnlineProfileSettings.EProfileOmniDirEvadeOptions
enum class EProfileOmniDirEvadeOptions : uint8_t
{
	PODI_Off                                           = 0,
	PODI_On                                            = 1,
	PODI_END                                           = 2
};

// Enum Engine.OnlineProfileSettings.EProfileControllerVibrationToggleOptions
enum class EProfileControllerVibrationToggleOptions : uint8_t
{
	PCVTO_Off                                          = 0,
	PCVTO_IgnoreThis                                   = 1,
	PCVTO_IgnoreThis2                                  = 2,
	PCVTO_On                                           = 3,
	PCVTO_END                                          = 4
};

// Enum Engine.OnlineProfileSettings.EProfileVoiceThruSpeakersOptions
enum class EProfileVoiceThruSpeakersOptions : uint8_t
{
	PVTSO_Off                                          = 0,
	PVTSO_On                                           = 1,
	PVTSO_Both                                         = 2,
	PVTSO_END                                          = 3
};

// Enum Engine.ParticleEmitter.EEmitterRenderMode
enum class EEmitterRenderMode : uint8_t
{
	ERM_Normal                                         = 0,
	ERM_Point                                          = 1,
	ERM_Cross                                          = 2,
	ERM_None                                           = 3,
	ERM_END                                            = 4
};

// Enum Engine.ParticleEmitter.EParticleSubUVInterpMethod
enum class EParticleSubUVInterpMethod : uint8_t
{
	PSUVIM_None                                        = 0,
	PSUVIM_Linear                                      = 1,
	PSUVIM_Linear_Blend                                = 2,
	PSUVIM_Random                                      = 3,
	PSUVIM_Random_Blend                                = 4,
	PSUVIM_END                                         = 5
};

// Enum Engine.ParticleEmitter.EParticleBurstMethod
enum class EParticleBurstMethod : uint8_t
{
	EPBM_Instant                                       = 0,
	EPBM_Interpolated                                  = 1,
	EPBM_END                                           = 2
};

// Enum Engine.ParticleModule.EModuleType
enum class EModuleType : uint8_t
{
	EPMT_General                                       = 0,
	EPMT_TypeData                                      = 1,
	EPMT_Beam                                          = 2,
	EPMT_Trail                                         = 3,
	EPMT_Spawn                                         = 4,
	EPMT_Required                                      = 5,
	EPMT_Event                                         = 6,
	EPMT_END                                           = 7
};

// Enum Engine.ParticleModule.EParticleSourceSelectionMethod
enum class EParticleSourceSelectionMethod : uint8_t
{
	EPSSM_Random                                       = 0,
	EPSSM_Sequential                                   = 1,
	EPSSM_END                                          = 2
};

// Enum Engine.ParticleModuleAttractorBoneSocket.EBoneSocketAttractorFalloffType
enum class EBoneSocketAttractorFalloffType : uint8_t
{
	BSFOFF_Constant                                    = 0,
	BSFOFF_Linear                                      = 1,
	BSFOFF_Exponent                                    = 2,
	BSFOFF_END                                         = 3
};

// Enum Engine.ParticleModuleAttractorBoneSocket.ELocationBoneSocketDestSelectionMethod
enum class ELocationBoneSocketDestSelectionMethod : uint8_t
{
	BONESOCKETDESTSEL_Sequential                       = 0,
	BONESOCKETDESTSEL_Random                           = 1,
	BONESOCKETDESTSEL_RandomExhaustive                 = 2,
	BONESOCKETDESTSEL_BlendAll                         = 3,
	BONESOCKETDESTSEL_END                              = 4
};

// Enum Engine.ParticleModuleAttractorBoneSocket.ELocationBoneSocketDestination
enum class ELocationBoneSocketDestination : uint8_t
{
	BONESOCKETDEST_Bones                               = 0,
	BONESOCKETDEST_Sockets                             = 1,
	BONESOCKETDEST_END                                 = 2
};

// Enum Engine.ParticleModuleAttractorParticle.EAttractorParticleSelectionMethod
enum class EAttractorParticleSelectionMethod : uint8_t
{
	EAPSM_Random                                       = 0,
	EAPSM_Sequential                                   = 1,
	EAPSM_END                                          = 2
};

// Enum Engine.ParticleModuleAttractorSkelVertSurface.EVertSurfaceAttractorFalloffType
enum class EVertSurfaceAttractorFalloffType : uint8_t
{
	VSFOFF_Constant                                    = 0,
	VSFOFF_Linear                                      = 1,
	VSFOFF_Exponent                                    = 2,
	VSFOFF_END                                         = 3
};

// Enum Engine.ParticleModuleAttractorSkelVertSurface.EAttractorSkelVertSurfaceDestination
enum class EAttractorSkelVertSurfaceDestination : uint8_t
{
	VERTSURFACEDEST_Vert                               = 0,
	VERTSURFACEDEST_Surface                            = 1,
	VERTSURFACEDEST_END                                = 2
};

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetMethod
enum class EBeam2SourceTargetMethod : uint8_t
{
	PEB2STM_Default                                    = 0,
	PEB2STM_UserSet                                    = 1,
	PEB2STM_Emitter                                    = 2,
	PEB2STM_Particle                                   = 3,
	PEB2STM_Actor                                      = 4,
	PEB2STM_END                                        = 5
};

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetTangentMethod
enum class EBeam2SourceTargetTangentMethod : uint8_t
{
	PEB2STTM_Direct                                    = 0,
	PEB2STTM_UserSet                                   = 1,
	PEB2STTM_Distribution                              = 2,
	PEB2STTM_Emitter                                   = 3,
	PEB2STTM_END                                       = 4
};

// Enum Engine.ParticleModuleBeamModifier.BeamModifierType
enum class EBeamModifierType : uint8_t
{
	PEB2MT_Source                                      = 0,
	PEB2MT_Target                                      = 1,
	PEB2MT_END                                         = 2
};

// Enum Engine.ParticleModuleCameraOffset.EParticleCameraOffsetUpdateMethod
enum class EParticleCameraOffsetUpdateMethod : uint8_t
{
	EPCOUM_DirectSet                                   = 0,
	EPCOUM_Additive                                    = 1,
	EPCOUM_Scalar                                      = 2,
	EPCOUM_END                                         = 3
};

// Enum Engine.ParticleModuleCollisionBase.EParticleCollisionComplete
enum class EParticleCollisionComplete : uint8_t
{
	EPCC_Kill                                          = 0,
	EPCC_Freeze                                        = 1,
	EPCC_HaltCollisions                                = 2,
	EPCC_FreezeTranslation                             = 3,
	EPCC_FreezeRotation                                = 4,
	EPCC_FreezeMovement                                = 5,
	EPCC_END                                           = 6
};

// Enum Engine.ParticleModuleCollision.ParticleAttractorActionType
enum class EParticleAttractorActionType : uint8_t
{
	PAAT_None                                          = 0,
	PAAT_Destroy                                       = 1,
	PAAT_Freeze                                        = 2,
	PAAT_Event                                         = 3,
	PAAT_END                                           = 4
};

// Enum Engine.ParticleModuleLocationBoneSocket.ELocationBoneSocketSource
enum class ELocationBoneSocketSource : uint8_t
{
	BONESOCKETSOURCE_Bones                             = 0,
	BONESOCKETSOURCE_Sockets                           = 1,
	BONESOCKETSOURCE_END                               = 2
};

// Enum Engine.ParticleModuleLocationBoneSocket.ELocationBoneSocketSelectionMethod
enum class ELocationBoneSocketSelectionMethod : uint8_t
{
	BONESOCKETSEL_Sequential                           = 0,
	BONESOCKETSEL_Random                               = 1,
	BONESOCKETSEL_RandomExhaustive                     = 2,
	BONESOCKETSEL_END                                  = 3
};

// Enum Engine.ParticleModuleLocationEmitter.ELocationEmitterSelectionMethod
enum class ELocationEmitterSelectionMethod : uint8_t
{
	ELESM_Random                                       = 0,
	ELESM_Sequential                                   = 1,
	ELESM_END                                          = 2
};

// Enum Engine.ParticleModuleLocationPrimitiveCylinder.CylinderHeightAxis
enum class ECylinderHeightAxis : uint8_t
{
	PMLPC_HEIGHTAXIS_X                                 = 0,
	PMLPC_HEIGHTAXIS_Y                                 = 1,
	PMLPC_HEIGHTAXIS_Z                                 = 2,
	PMLPC_HEIGHTAXIS_END                               = 3
};

// Enum Engine.ParticleModuleLocationSkelVertSurface.ELocationSkelVertSurfaceSource
enum class ELocationSkelVertSurfaceSource : uint8_t
{
	VERTSURFACESOURCE_Vert                             = 0,
	VERTSURFACESOURCE_Surface                          = 1,
	VERTSURFACESOURCE_END                              = 2
};

// Enum Engine.ParticleModuleLocationStaticVertSurface.ELocationStaticVertSurfaceSource
enum class ELocationStaticVertSurfaceSource : uint8_t
{
	VERTSTATICSURFACESOURCE_Vert                       = 0,
	VERTSTATICSURFACESOURCE_Surface                    = 1,
	VERTSTATICSURFACESOURCE_END                        = 2
};

// Enum Engine.ParticleModuleOrbit.EOrbitChainMode
enum class EOrbitChainMode : uint8_t
{
	EOChainMode_Add                                    = 0,
	EOChainMode_Scale                                  = 1,
	EOChainMode_Link                                   = 2,
	EOChainMode_END                                    = 3
};

// Enum Engine.ParticleModuleOrientationAxisLock.EParticleAxisLock
enum class EParticleAxisLock : uint8_t
{
	EPAL_NONE                                          = 0,
	EPAL_X                                             = 1,
	EPAL_Y                                             = 2,
	EPAL_Z                                             = 3,
	EPAL_NEGATIVE_X                                    = 4,
	EPAL_NEGATIVE_Y                                    = 5,
	EPAL_NEGATIVE_Z                                    = 6,
	EPAL_ROTATE_X                                      = 7,
	EPAL_ROTATE_Y                                      = 8,
	EPAL_ROTATE_Z                                      = 9,
	EPAL_END                                           = 10
};

// Enum Engine.ParticleModuleParameterDynamic.EEmitterDynamicParameterValue
enum class EEmitterDynamicParameterValue : uint8_t
{
	EDPV_UserSet                                       = 0,
	EDPV_VelocityX                                     = 1,
	EDPV_VelocityY                                     = 2,
	EDPV_VelocityZ                                     = 3,
	EDPV_VelocityMag                                   = 4,
	EDPV_END                                           = 5
};

// Enum Engine.ParticleModulePhysicsVolumes.EParticleLevelInfluenceType
enum class EParticleLevelInfluenceType : uint8_t
{
	LIT_Never                                          = 0,
	LIT_OutsidePhysicsVolumes                          = 1,
	LIT_Always                                         = 2,
	LIT_END                                            = 3
};

// Enum Engine.ParticleSpriteEmitter.EParticleScreenAlignment
enum class EParticleScreenAlignment : uint8_t
{
	PSA_Square                                         = 0,
	PSA_Rectangle                                      = 1,
	PSA_Velocity                                       = 2,
	PSA_TypeSpecific                                   = 3,
	PSA_END                                            = 4
};

// Enum Engine.ParticleModuleRequired.EEmitterNormalsMode
enum class EEmitterNormalsMode : uint8_t
{
	ENM_CameraFacing                                   = 0,
	ENM_Spherical                                      = 1,
	ENM_Cylindrical                                    = 2,
	ENM_END                                            = 3
};

// Enum Engine.ParticleModuleRequired.EParticleSortMode
enum class EParticleSortMode : uint8_t
{
	PSORTMODE_None                                     = 0,
	PSORTMODE_ViewProjDepth                            = 1,
	PSORTMODE_DistanceToView                           = 2,
	PSORTMODE_Age_OldestFirst                          = 3,
	PSORTMODE_Age_NewestFirst                          = 4,
	PSORTMODE_END                                      = 5
};

// Enum Engine.ParticleModuleTrailSource.ETrail2SourceMethod
enum class ETrail2SourceMethod : uint8_t
{
	PET2SRCM_Default                                   = 0,
	PET2SRCM_Particle                                  = 1,
	PET2SRCM_Actor                                     = 2,
	PET2SRCM_END                                       = 3
};

// Enum Engine.ParticleModuleTrailSpawn.ETrail2SpawnMethod
enum class ETrail2SpawnMethod : uint8_t
{
	PET2SM_Emitter                                     = 0,
	PET2SM_Velocity                                    = 1,
	PET2SM_Distance                                    = 2,
	PET2SM_END                                         = 3
};

// Enum Engine.ParticleModuleTrailTaper.ETrailTaperMethod
enum class ETrailTaperMethod : uint8_t
{
	PETTM_None                                         = 0,
	PETTM_Full                                         = 1,
	PETTM_Partial                                      = 2,
	PETTM_END                                          = 3
};

// Enum Engine.ParticleModuleTypeDataBeam.EBeamMethod
enum class EBeamMethod : uint8_t
{
	PEBM_Distance                                      = 0,
	PEBM_EndPoints                                     = 1,
	PEBM_EndPoints_Interpolated                        = 2,
	PEBM_UserSet_EndPoints                             = 3,
	PEBM_UserSet_EndPoints_Interpolated                = 4,
	PEBM_END                                           = 5
};

// Enum Engine.ParticleModuleTypeDataBeam.EBeamEndPointMethod
enum class EBeamEndPointMethod : uint8_t
{
	PEBEPM_Calculated                                  = 0,
	PEBEPM_Distribution                                = 1,
	PEBEPM_Distribution_Constant                       = 2,
	PEBEPM_END                                         = 3
};

// Enum Engine.ParticleModuleTypeDataBeam2.EBeam2Method
enum class EBeam2Method : uint8_t
{
	PEB2M_Distance                                     = 0,
	PEB2M_Target                                       = 1,
	PEB2M_Branch                                       = 2,
	PEB2M_END                                          = 3
};

// Enum Engine.ParticleModuleTypeDataBeam2.EBeamTaperMethod
enum class EBeamTaperMethod : uint8_t
{
	PEBTM_None                                         = 0,
	PEBTM_Full                                         = 1,
	PEBTM_Partial                                      = 2,
	PEBTM_END                                          = 3
};

// Enum Engine.ParticleModuleTypeDataMesh.EMeshCameraFacingOptions
enum class EMeshCameraFacingOptions : uint8_t
{
	XAxisFacing_NoUp                                   = 0,
	XAxisFacing_ZUp                                    = 1,
	XAxisFacing_NegativeZUp                            = 2,
	XAxisFacing_YUp                                    = 3,
	XAxisFacing_NegativeYUp                            = 4,
	LockedAxis_ZAxisFacing                             = 5,
	LockedAxis_NegativeZAxisFacing                     = 6,
	LockedAxis_YAxisFacing                             = 7,
	LockedAxis_NegativeYAxisFacing                     = 8,
	VelocityAligned_ZAxisFacing                        = 9,
	VelocityAligned_NegativeZAxisFacing                = 10,
	VelocityAligned_YAxisFacing                        = 11,
	VelocityAligned_NegativeYAxisFacing                = 12,
	EMeshCameraFacingOptions_END                       = 13
};

// Enum Engine.ParticleModuleTypeDataMesh.EMeshCameraFacingUpAxis
enum class EMeshCameraFacingUpAxis : uint8_t
{
	CameraFacing_NoneUP                                = 0,
	CameraFacing_ZUp                                   = 1,
	CameraFacing_NegativeZUp                           = 2,
	CameraFacing_YUp                                   = 3,
	CameraFacing_NegativeYUp                           = 4,
	CameraFacing_END                                   = 5
};

// Enum Engine.ParticleModuleTypeDataMesh.EMeshScreenAlignment
enum class EMeshScreenAlignment : uint8_t
{
	PSMA_MeshFaceCameraWithRoll                        = 0,
	PSMA_MeshFaceCameraWithSpin                        = 1,
	PSMA_MeshFaceCameraWithLockedAxis                  = 2,
	PSMA_END                                           = 3
};

// Enum Engine.ParticleModuleTypeDataMeshPhysX.EPhysXMeshRotationMethod
enum class EPhysXMeshRotationMethod : uint8_t
{
	PMRM_Disabled                                      = 0,
	PMRM_Spherical                                     = 1,
	PMRM_Box                                           = 2,
	PMRM_LongBox                                       = 3,
	PMRM_FlatBox                                       = 4,
	PMRM_Velocity                                      = 5,
	PMRM_END                                           = 6
};

// Enum Engine.ParticleModuleTypeDataRibbon.ETrailsRenderAxisOption
enum class ETrailsRenderAxisOption : uint8_t
{
	Trails_CameraUp                                    = 0,
	Trails_SourceUp                                    = 1,
	Trails_WorldUp                                     = 2,
	Trails_END                                         = 3
};

// Enum Engine.ParticleSystem.EParticleSystemOcclusionBoundsMethod
enum class EParticleSystemOcclusionBoundsMethod : uint8_t
{
	EPSOBM_None                                        = 0,
	EPSOBM_ParticleBounds                              = 1,
	EPSOBM_CustomBounds                                = 2,
	EPSOBM_END                                         = 3
};

// Enum Engine.ParticleSystem.EParticleSystemUpdateMode
enum class EParticleSystemUpdateMode : uint8_t
{
	EPSUM_RealTime                                     = 0,
	EPSUM_FixedTime                                    = 1,
	EPSUM_END                                          = 2
};

// Enum Engine.ProcBuildingRuleset.EProcBuildingAxis
enum class EProcBuildingAxis : uint8_t
{
	EPBAxis_X                                          = 0,
	EPBAxis_Z                                          = 1,
	EPBAxis_END                                        = 2
};

// Enum Engine.ProcBuilding.EScopeEdge
enum class EScopeEdge : uint8_t
{
	EPSA_Top                                           = 0,
	EPSA_Bottom                                        = 1,
	EPSA_Left                                          = 2,
	EPSA_Right                                         = 3,
	EPSA_None                                          = 4,
	EPSA_END                                           = 5
};

// Enum Engine.ProcBuilding.EBuildingStatsBrowserColumns
enum class EBuildingStatsBrowserColumns : uint8_t
{
	BSBC_Name                                          = 0,
	BSBC_Ruleset                                       = 1,
	BSBC_NumStaticMeshComps                            = 2,
	BSBC_NumInstancedStaticMeshComps                   = 3,
	BSBC_NumInstancedTris                              = 4,
	BSBC_LightmapMemBytes                              = 5,
	BSBC_ShadowmapMemBytes                             = 6,
	BSBC_LODDiffuseMemBytes                            = 7,
	BSBC_LODLightingMemBytes                           = 8,
	BSBC_END                                           = 9
};

// Enum Engine.ProcBuilding.EPBCornerType
enum class EPBCornerType : uint8_t
{
	EPBC_Default                                       = 0,
	EPBC_Chamfer                                       = 1,
	EPBC_Round                                         = 2,
	EPBC_END                                           = 3
};

// Enum Engine.PBRuleNodeEdgeAngle.EProcBuildingEdge
enum class EProcBuildingEdge : uint8_t
{
	EPBE_Top                                           = 0,
	EPBE_Bottom                                        = 1,
	EPBE_Left                                          = 2,
	EPBE_Right                                         = 3,
	EPBE_END                                           = 4
};

// Enum Engine.PhysicalMaterial.EPhysEffectType
enum class EPhysEffectType : uint8_t
{
	EPMET_Impact                                       = 0,
	EPMET_Slide                                        = 1,
	EPMET_END                                          = 2
};

// Enum Engine.PhysXParticleSystem.ESimulationMethod
enum class ESimulationMethod : uint8_t
{
	ESM_SPH                                            = 0,
	ESM_NO_PARTICLE_INTERACTION                        = 1,
	ESM_MIXED_MODE                                     = 2,
	ESM_END                                            = 3
};

// Enum Engine.PhysXParticleSystem.EPacketSizeMultiplier
enum class EPacketSizeMultiplier : uint8_t
{
	EPSM                                               = 0,
	EPSM01                                             = 1,
	EPSM02                                             = 2,
	EPSM03                                             = 3,
	EPSM04                                             = 4,
	EPSM05                                             = 5,
	EPSM_END                                           = 6
};

// Enum Engine.SceneCaptureComponent.ESceneCaptureViewMode
enum class ESceneCaptureViewMode : uint8_t
{
	SceneCapView_Lit                                   = 0,
	SceneCapView_Unlit                                 = 1,
	SceneCapView_LitNoShadows                          = 2,
	SceneCapView_Wire                                  = 3,
	SceneCapView_END                                   = 4
};

// Enum Engine.RB_BodySetup.ESleepFamily
enum class ESleepFamily : uint8_t
{
	SF_Normal                                          = 0,
	SF_Sensitive                                       = 1,
	SF_END                                             = 2
};

// Enum Engine.RB_RadialForceActor.ERadialForceType
enum class ERadialForceType : uint8_t
{
	RFT_Force                                          = 0,
	RFT_Impulse                                        = 1,
	RFT_END                                            = 2
};

// Enum Engine.Route.ERouteDirection
enum class ERouteDirection : uint8_t
{
	ERD_Forward                                        = 0,
	ERD_Reverse                                        = 1,
	ERD_END                                            = 2
};

// Enum Engine.Route.ERouteFillAction
enum class ERouteFillAction : uint8_t
{
	RFA_Overwrite                                      = 0,
	RFA_Add                                            = 1,
	RFA_Remove                                         = 2,
	RFA_Clear                                          = 3,
	RFA_END                                            = 4
};

// Enum Engine.Route.ERouteType
enum class ERouteType : uint8_t
{
	ERT_Linear                                         = 0,
	ERT_Loop                                           = 1,
	ERT_Circle                                         = 2,
	ERT_END                                            = 3
};

// Enum Engine.SeqAct_ActorFactory.EPointSelection
enum class EPointSelection : uint8_t
{
	PS_Normal                                          = 0,
	PS_Random                                          = 1,
	PS_Reverse                                         = 2,
	PS_END                                             = 3
};

// Enum Engine.SeqAct_SetMesh.EMeshType
enum class EMeshType : uint8_t
{
	MeshType_StaticMesh                                = 0,
	MeshType_SkeletalMesh                              = 1,
	MeshType_END                                       = 2
};

// Enum Engine.WorldAttractor.EWorldAttractorFalloffType
enum class EWorldAttractorFalloffType : uint8_t
{
	FOFF_Constant                                      = 0,
	FOFF_Linear                                        = 1,
	FOFF_Exponent                                      = 2,
	FOFF_END                                           = 3
};

// Enum Engine.SeqEvent_ParticleEvent.EParticleEventOutputType
enum class EParticleEventOutputType : uint8_t
{
	ePARTICLEOUT_Spawn                                 = 0,
	ePARTICLEOUT_Death                                 = 1,
	ePARTICLEOUT_Collision                             = 2,
	ePARTICLEOUT_AttractorCollision                    = 3,
	ePARTICLEOUT_Kismet                                = 4,
	ePARTICLEOUT_END                                   = 5
};

// Enum Engine.SkelControlBase.EBoneControlSpace
enum class EBoneControlSpace : uint8_t
{
	BCS_WorldSpace                                     = 0,
	BCS_ActorSpace                                     = 1,
	BCS_ComponentSpace                                 = 2,
	BCS_ParentBoneSpace                                = 3,
	BCS_BoneSpace                                      = 4,
	BCS_OtherBoneSpace                                 = 5,
	BCS_BaseMeshSpace                                  = 6,
	BCS_END                                            = 7
};

// Enum Engine.SkelControlSpline.ESplineControlRotMode
enum class ESplineControlRotMode : uint8_t
{
	SCR_NoChange                                       = 0,
	SCR_AlongSpline                                    = 1,
	SCR_Interpolate                                    = 2,
	SCR_END                                            = 3
};

// Enum Engine.SkeletalMesh.SoftBodyBoneType
enum class ESoftBodyBoneType : uint8_t
{
	SOFTBODYBONE_Fixed                                 = 0,
	SOFTBODYBONE_BreakableAttachment                   = 1,
	SOFTBODYBONE_TwoWayAttachment                      = 2,
	SOFTBODYBONE_END                                   = 3
};

// Enum Engine.SkeletalMesh.ClothBoneType
enum class EClothBoneType : uint8_t
{
	CLOTHBONE_Fixed                                    = 0,
	CLOTHBONE_BreakableAttachment                      = 1,
	CLOTHBONE_TearLine                                 = 2,
	CLOTHBONE_END                                      = 3
};

// Enum Engine.SkeletalMesh.SkeletalMeshOptimizationNormalMode
enum class ESkeletalMeshOptimizationNormalMode : uint8_t
{
	SMONM_Recalculate                                  = 0,
	SMONM_RecalculateSoft                              = 1,
	SMONM_RecalculateHard                              = 2,
	SMONM_END                                          = 3
};

// Enum Engine.SkeletalMesh.SkeletalMeshOptimizationImportance
enum class ESkeletalMeshOptimizationImportance : uint8_t
{
	SMOI_Normal                                        = 0,
	SMOI_High                                          = 1,
	SMOI_Highest                                       = 2,
	SMOI_END                                           = 3
};

// Enum Engine.SkeletalMesh.TriangleSortOption
enum class ETriangleSortOption : uint8_t
{
	TRISORT_None                                       = 0,
	TRISORT_CenterRadialDistance                       = 1,
	TRISORT_Random                                     = 2,
	TRISORT_MergeContiguous                            = 3,
	TRISORT_Custom                                     = 4,
	TRISORT_CustomLeftRight                            = 5,
	TRISORT_END                                        = 6
};

// Enum Engine.SkeletalMesh.BoneBreakOption
enum class EBoneBreakOption : uint8_t
{
	BONEBREAK_SoftPreferred                            = 0,
	BONEBREAK_AutoDetect                               = 1,
	BONEBREAK_RigidPreferred                           = 2,
	BONEBREAK_END                                      = 3
};

// Enum Engine.SkeletalMesh.TriangleSortAxis
enum class ETriangleSortAxis : uint8_t
{
	TSA_X_Axis                                         = 0,
	TSA_Y_Axis                                         = 1,
	TSA_Z_Axis                                         = 2,
	TSA_END                                            = 3
};

// Enum Engine.SkeletalMesh.ClothMovementScaleGen
enum class EClothMovementScaleGen : uint8_t
{
	ECMDM_DistToFixedVert                              = 0,
	ECMDM_VertexBoneWeight                             = 1,
	ECMDM_Empty                                        = 2,
	ECMDM_END                                          = 3
};

// Enum Engine.SoundNodeWave.EDecompressionType
enum class EDecompressionType : uint8_t
{
	DTYPE_Setup                                        = 0,
	DTYPE_Invalid                                      = 1,
	DTYPE_Preview                                      = 2,
	DTYPE_Native                                       = 3,
	DTYPE_RealTime                                     = 4,
	DTYPE_Procedural                                   = 5,
	DTYPE_Xenon                                        = 6,
	DTYPE_END                                          = 7
};

// Enum Engine.SpeedTreeComponent.ESpeedTreeMeshType
enum class ESpeedTreeMeshType : uint8_t
{
	STMT_MinMinusOne                                   = 0,
	STMT_Branches1                                     = 1,
	STMT_Branches2                                     = 2,
	STMT_Fronds                                        = 3,
	STMT_LeafCards                                     = 4,
	STMT_LeafMeshes                                    = 5,
	STMT_Billboards                                    = 6,
	STMT_Max                                           = 7
};

// Enum Engine.SVehicleWheel.EWheelSide
enum class EWheelSide : uint8_t
{
	SIDE_None                                          = 0,
	SIDE_Left                                          = 1,
	SIDE_Right                                         = 2,
	SIDE_END                                           = 3
};

// Enum Engine.TerrainMaterial.ETerrainMappingType
enum class ETerrainMappingType : uint8_t
{
	TMT_Auto                                           = 0,
	TMT_XY                                             = 1,
	TMT_XZ                                             = 2,
	TMT_YZ                                             = 3,
	TMT_END                                            = 4
};

// Enum Engine.TextureFlipBook.TextureFlipBookMethod
enum class ETextureFlipBookMethod : uint8_t
{
	TFBM_UL_ROW                                        = 0,
	TFBM_UL_COL                                        = 1,
	TFBM_UR_ROW                                        = 2,
	TFBM_UR_COL                                        = 3,
	TFBM_LL_ROW                                        = 4,
	TFBM_LL_COL                                        = 5,
	TFBM_LR_ROW                                        = 6,
	TFBM_LR_COL                                        = 7,
	TFBM_RANDOM                                        = 8,
	TFBM_END                                           = 9
};

// Enum Engine.TextureMovie.EMovieStreamSource
enum class EMovieStreamSource : uint8_t
{
	MovieStream_File                                   = 0,
	MovieStream_Memory                                 = 1,
	MovieStream_END                                    = 2
};

// Enum Engine.TwitterIntegrationBase.ETwitterRequestMethod
enum class ETwitterRequestMethod : uint8_t
{
	TRM_Get                                            = 0,
	TRM_Post                                           = 1,
	TRM_Delete                                         = 2,
	TRM_END                                            = 3
};

// Enum Engine.TwitterIntegrationBase.ETwitterIntegrationDelegate
enum class ETwitterIntegrationDelegate : uint8_t
{
	TID_AuthorizeComplete                              = 0,
	TID_TweetUIComplete                                = 1,
	TID_RequestComplete                                = 2,
	TID_END                                            = 3
};

// Enum Engine.UberPostProcessEffect.EPostProcessREDType
enum class EPostProcessREDType : uint8_t
{
	PostProcessRED_Off                                 = 0,
	PostProcessRED_DiffusionFilter                     = 1,
	PostProcessRED_DiffusionFilter2                    = 2,
	PostProcessRED_SoftFocus                           = 3,
	PostProcessRED_Glow                                = 4,
	PostProcessRED_DiffusionFilter2Sepia               = 5,
	PostProcessRED_END                                 = 6
};

// Enum Engine.UberPostProcessEffect.EPostProcessAAType
enum class EPostProcessAAType : uint8_t
{
	PostProcessAA_Off                                  = 0,
	PostProcessAA_FXAA0                                = 1,
	PostProcessAA_FXAA1                                = 2,
	PostProcessAA_FXAA2                                = 3,
	PostProcessAA_FXAA3                                = 4,
	PostProcessAA_FXAA4                                = 5,
	PostProcessAA_FXAA5                                = 6,
	PostProcessAA_MLAA                                 = 7,
	PostProcessAA_SMAA1                                = 8,
	PostProcessAA_SMAA2                                = 9,
	PostProcessAA_SMAA3                                = 10,
	PostProcessAA_END                                  = 11
};

// Enum Engine.UberPostProcessEffect.ETonemapperType
enum class ETonemapperType : uint8_t
{
	Tonemapper_Off                                     = 0,
	Tonemapper_Filmic                                  = 1,
	Tonemapper_Customizable                            = 2,
	Tonemapper_END                                     = 3
};

// Enum Engine.UIDataProvider_MenuItem.EMenuOptionType
enum class EMenuOptionType : uint8_t
{
	MENUOT_ComboReadOnly                               = 0,
	MENUOT_ComboNumeric                                = 1,
	MENUOT_CheckBox                                    = 2,
	MENUOT_Slider                                      = 3,
	MENUOT_Spinner                                     = 4,
	MENUOT_EditBox                                     = 5,
	MENUOT_CollectionCheckBox                          = 6,
	MENUOT_CollapsingList                              = 7,
	MENUOT_END                                         = 8
};

// Enum Engine.UIDataStore_OnlineStats.EStatsFetchType
enum class EStatsFetchType : uint8_t
{
	SFT_Player                                         = 0,
	SFT_CenteredOnPlayer                               = 1,
	SFT_Friends                                        = 2,
	SFT_TopRankings                                    = 3,
	SFT_END                                            = 4
};

// Enum Engine.Weapon.EWeaponFireType
enum class EWeaponFireType : uint8_t
{
	EWFT_InstantHit                                    = 0,
	EWFT_Projectile                                    = 1,
	EWFT_Custom                                        = 2,
	EWFT_None                                          = 3,
	EWFT_END                                           = 4
};


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class Engine.Actor
// 0x018C (0x003C - 0x01C8)
class AActor : public UObject
{
public:
	class TArray<class UActorComponent*>               Components;                                    // 0x003C (0x000C) [0x000000000448000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UActorComponent*>               AllComponents;                                 // 0x0048 (0x000C) [0x000000000448200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	struct FVector                                     Location;                                      // 0x0054 (0x000C) [0x0000000000000023] (CPF_Edit | CPF_Const | CPF_Net)
	struct FRotator                                    Rotation;                                      // 0x0060 (0x000C) [0x0000000000000023] (CPF_Edit | CPF_Const | CPF_Net)
	float                                              DrawScale;                                     // 0x006C (0x0004) [0x0000000000000023] (CPF_Edit | CPF_Const | CPF_Net | CPF_RepNotify | CPF_Interp)
	struct FVector                                     DrawScale3D;                                   // 0x0070 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	struct FVector                                     PrePivot;                                      // 0x007C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FColor                                      EditorIconColor;                               // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	struct FRenderCommandFence                         DetachFence;                                   // 0x008C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CustomTimeDilation;                            // 0x0090 (0x0004) [0x0000000000000000]               
	EPhysics                                           Physics;                                       // 0x0094 (0x0001) [0x0000000000000023] (CPF_Edit | CPF_Const | CPF_Net)
	ENetRole                                           RemoteRole;                                    // 0x0095 (0x0001) [0x0000000000000020] (CPF_Net)     
	ENetRole                                           Role;                                          // 0x0096 (0x0001) [0x0000000000000020] (CPF_Net)     
	ECollisionType                                     CollisionType;                                 // 0x0097 (0x0001) [0x0000000000002003] (CPF_Edit | CPF_Const | CPF_Transient)
	ECollisionType                                     ReplicatedCollisionType;                       // 0x0098 (0x0001) [0x0000000000002020] (CPF_Net | CPF_Transient)
	EREDViewType                                       REDViewType;                                   // 0x0099 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ETickingGroup                                      TickGroup;                                     // 0x009A (0x0001) [0x0000000000000002] (CPF_Const)   
	class AActor*                                      Owner;                                         // 0x009C (0x0004) [0x0000000000000022] (CPF_Const | CPF_Net)
	class AActor*                                      Base;                                          // 0x00A0 (0x0004) [0x0000000000000023] (CPF_Edit | CPF_Const | CPF_Net)
	class TArray<struct FTimerData>                    Timers;                                        // 0x00A4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           bStatic : 1;                                   // 0x00B0 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bHidden : 1;                                   // 0x00B0 (0x0004) [0x0000000000000023] [0x00000002] (CPF_Edit | CPF_Const | CPF_Net)
	uint32_t                                           bNoDelete : 1;                                 // 0x00B0 (0x0004) [0x0000000000000002] [0x00000004] (CPF_Const)
	uint32_t                                           bDeleteMe : 1;                                 // 0x00B0 (0x0004) [0x0000000000000002] [0x00000008] (CPF_Const)
	uint32_t                                           bTicked : 1;                                   // 0x00B0 (0x0004) [0x0000000000002002] [0x00000010] (CPF_Const | CPF_Transient)
	uint32_t                                           bOnlyOwnerSee : 1;                             // 0x00B0 (0x0004) [0x0000000000000002] [0x00000020] (CPF_Const)
	uint32_t                                           bTickIsDisabled : 1;                           // 0x00B0 (0x0004) [0x0000000000000002] [0x00000040] (CPF_Const)
	uint32_t                                           bWorldGeometry : 1;                            // 0x00B0 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bIgnoreRigidBodyPawns : 1;                     // 0x00B0 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bOrientOnSlope : 1;                            // 0x00B0 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bIgnoreEncroachers : 1;                        // 0x00B0 (0x0004) [0x0000000000000002] [0x00000400] (CPF_Const)
	uint32_t                                           bPushedByEncroachers : 1;                      // 0x00B0 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bDestroyedByInterpActor : 1;                   // 0x00B0 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bRouteBeginPlayEvenIfStatic : 1;               // 0x00B0 (0x0004) [0x0000000000000002] [0x00002000] (CPF_Const)
	uint32_t                                           bIsMoving : 1;                                 // 0x00B0 (0x0004) [0x0000000000000002] [0x00004000] (CPF_Const)
	uint32_t                                           bAlwaysEncroachCheck : 1;                      // 0x00B0 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bHasAlternateTargetLocation : 1;               // 0x00B0 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bCanStepUpOn : 1;                              // 0x00B0 (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           bNetTemporary : 1;                             // 0x00B0 (0x0004) [0x0000000000000002] [0x00040000] (CPF_Const)
	uint32_t                                           bOnlyRelevantToOwner : 1;                      // 0x00B0 (0x0004) [0x0000000000000002] [0x00080000] (CPF_Const)
	uint32_t                                           bNetDirty : 1;                                 // 0x00B0 (0x0004) [0x0000000000002000] [0x00100000] (CPF_Transient)
	uint32_t                                           bAlwaysRelevant : 1;                           // 0x00B0 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bReplicateInstigator : 1;                      // 0x00B0 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bReplicateMovement : 1;                        // 0x00B0 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bSkipActorPropertyReplication : 1;             // 0x00B0 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bUpdateSimulatedPosition : 1;                  // 0x00B0 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bTearOff : 1;                                  // 0x00B0 (0x0004) [0x0000000000000020] [0x04000000] (CPF_Net)
	uint32_t                                           bOnlyDirtyReplication : 1;                     // 0x00B0 (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bAllowFluidSurfaceInteraction : 1;             // 0x00B0 (0x0004) [0x0000000000000001] [0x10000000] (CPF_Edit)
	uint32_t                                           bDemoRecording : 1;                            // 0x00B0 (0x0004) [0x0000000000002000] [0x20000000] (CPF_Transient)
	uint32_t                                           bDemoOwner : 1;                                // 0x00B0 (0x0004) [0x0000000000000000] [0x40000000] 
	uint32_t                                           bForceDemoRelevant : 1;                        // 0x00B0 (0x0004) [0x0000000000000000] [0x80000000] 
	uint32_t                                           bNetInitialRotation : 1;                       // 0x00B4 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bReplicateRigidBodyLocation : 1;               // 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bKillDuringLevelTransition : 1;                // 0x00B4 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bExchangedRoles : 1;                           // 0x00B4 (0x0004) [0x0000000000000002] [0x00000008] (CPF_Const)
	uint32_t                                           bConsiderAllStaticMeshComponentsForStreaming : 1;// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bDebug : 1;                                    // 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bPostRenderIfNotVisible : 1;                   // 0x00B4 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bForceNetUpdate : 1;                           // 0x00B4 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bPendingNetUpdate : 1;                         // 0x00B4 (0x0004) [0x0000000000002002] [0x00000100] (CPF_Const | CPF_Transient)
	uint32_t                                           bHardAttach : 1;                               // 0x00B4 (0x0004) [0x0000000000000023] [0x00000200] (CPF_Edit | CPF_Const | CPF_Net)
	uint32_t                                           bIgnoreBaseRotation : 1;                       // 0x00B4 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bShadowParented : 1;                           // 0x00B4 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bSkipAttachedMoves : 1;                        // 0x00B4 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bCanBeAdheredTo : 1;                           // 0x00B4 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bCanBeFrictionedTo : 1;                        // 0x00B4 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bHurtEntry : 1;                                // 0x00B4 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bGameRelevant : 1;                             // 0x00B4 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bMovable : 1;                                  // 0x00B4 (0x0004) [0x0000000000000002] [0x00020000] (CPF_Const)
	uint32_t                                           bDestroyInPainVolume : 1;                      // 0x00B4 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bCanBeDamaged : 1;                             // 0x00B4 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bShouldBaseAtStartup : 1;                      // 0x00B4 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bPendingDelete : 1;                            // 0x00B4 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bCanTeleport : 1;                              // 0x00B4 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bAlwaysTick : 1;                               // 0x00B4 (0x0004) [0x0000000000000002] [0x00800000] (CPF_Const)
	uint32_t                                           bBlocksNavigation : 1;                         // 0x00B4 (0x0004) [0x0000000000000001] [0x01000000] (CPF_Edit)
	uint32_t                                           BlockRigidBody : 1;                            // 0x00B4 (0x0004) [0x0000000000002003] [0x02000000] (CPF_Edit | CPF_Const | CPF_Transient)
	uint32_t                                           bCollideWhenPlacing : 1;                       // 0x00B4 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bCollideActors : 1;                            // 0x00B4 (0x0004) [0x0000000000000022] [0x08000000] (CPF_Const | CPF_Net)
	uint32_t                                           bCollideWorld : 1;                             // 0x00B4 (0x0004) [0x0000000000000020] [0x10000000] (CPF_Net)
	uint32_t                                           bCollideComplex : 1;                           // 0x00B4 (0x0004) [0x0000000000000001] [0x20000000] (CPF_Edit)
	uint32_t                                           bBlockActors : 1;                              // 0x00B4 (0x0004) [0x0000000000000020] [0x40000000] (CPF_Net)
	uint32_t                                           bProjTarget : 1;                               // 0x00B4 (0x0004) [0x0000000000000020] [0x80000000] (CPF_Net)
	uint32_t                                           bBlocksTeleport : 1;                           // 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bMoveIgnoresDestruction : 1;                   // 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bProjectileMoveSingleBlocking : 1;             // 0x00B8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bNoEncroachCheck : 1;                          // 0x00B8 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCollideAsEncroacher : 1;                      // 0x00B8 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bPhysRigidBodyOutOfWorldCheck : 1;             // 0x00B8 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bComponentOutsideWorld : 1;                    // 0x00B8 (0x0004) [0x0000000000002002] [0x00000040] (CPF_Const | CPF_Transient)
	uint32_t                                           bForceOctreeSNFilter : 1;                      // 0x00B8 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bForceOctreeMNFilter : 1;                      // 0x00B8 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bRigidBodyWasAwake : 1;                        // 0x00B8 (0x0004) [0x0000000000002002] [0x00000200] (CPF_Const | CPF_Transient)
	uint32_t                                           bCallRigidBodyWakeEvents : 1;                  // 0x00B8 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bBounce : 1;                                   // 0x00B8 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bJustTeleported : 1;                           // 0x00B8 (0x0004) [0x0000000000000002] [0x00001000] (CPF_Const)
	uint32_t                                           bEnableMobileTouch : 1;                        // 0x00B8 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bNetInitial : 1;                               // 0x00B8 (0x0004) [0x0000000000000002] [0x00004000] (CPF_Const)
	uint32_t                                           bNetOwner : 1;                                 // 0x00B8 (0x0004) [0x0000000000000022] [0x00008000] (CPF_Const | CPF_Net)
	uint32_t                                           bHiddenEd : 1;                                 // 0x00B8 (0x0004) [0x0000000000000002] [0x00010000] (CPF_Const)
	uint32_t                                           bEditable : 1;                                 // 0x00B8 (0x0004) [0x0000000000000002] [0x00020000] (CPF_Const)
	uint32_t                                           bHiddenEdGroup : 1;                            // 0x00B8 (0x0004) [0x0000000020000002] [0x00040000] (CPF_Const | CPF_Deprecated)
	uint32_t                                           bHiddenEdLayer : 1;                            // 0x00B8 (0x0004) [0x0000000000000002] [0x00080000] (CPF_Const)
	uint32_t                                           bHiddenEdCustom : 1;                           // 0x00B8 (0x0004) [0x0000000000000002] [0x00100000] (CPF_Const)
	uint32_t                                           bHiddenEdTemporary : 1;                        // 0x00B8 (0x0004) [0x0000000000002000] [0x00200000] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bHiddenEdLevel : 1;                            // 0x00B8 (0x0004) [0x0000000000002000] [0x00400000] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bHiddenEdScene : 1;                            // 0x00B8 (0x0004) [0x0000000000002000] [0x00800000] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bEdShouldSnap : 1;                             // 0x00B8 (0x0004) [0x0000000000000001] [0x01000000] (CPF_Edit)
	uint32_t                                           bTempEditor : 1;                               // 0x00B8 (0x0004) [0x0000000000002002] [0x02000000] (CPF_Const | CPF_Transient)
	uint32_t                                           bPathColliding : 1;                            // 0x00B8 (0x0004) [0x0000000000000001] [0x04000000] (CPF_Edit)
	uint32_t                                           bPathTemp : 1;                                 // 0x00B8 (0x0004) [0x0000000000002000] [0x08000000] (CPF_Transient)
	uint32_t                                           bScriptInitialized : 1;                        // 0x00B8 (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bLockLocation : 1;                             // 0x00B8 (0x0004) [0x0000000000000001] [0x20000000] (CPF_Edit)
	uint32_t                                           bForceAllowKismetModification : 1;             // 0x00B8 (0x0004) [0x0000000000000002] [0x40000000] (CPF_Const)
	uint32_t                                           bDebugEffectIsRelevant : 1;                    // 0x00B8 (0x0004) [0x0000000000000001] [0x80000000] (CPF_Edit)
	int32_t                                            NetTag;                                        // 0x00BC (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              NetUpdateTime;                                 // 0x00C0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              NetUpdateFrequency;                            // 0x00C4 (0x0004) [0x0000000000000000]               
	float                                              NetPriority;                                   // 0x00C8 (0x0004) [0x0000000000000000]               
	float                                              LastNetUpdateTime;                             // 0x00CC (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              TimeSinceLastTick;                             // 0x00D0 (0x0004) [0x0000000000000000]               
	class APawn*                                       Instigator;                                    // 0x00D4 (0x0004) [0x0000000000000020] (CPF_Net)     
	class AWorldInfo*                                  WorldInfo;                                     // 0x00D8 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              LifeSpan;                                      // 0x00DC (0x0004) [0x0000000000000000]               
	float                                              CreationTime;                                  // 0x00E0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LastRenderTime;                                // 0x00E4 (0x0004) [0x0000000000002000] (CPF_Transient)
	class FName                                        Tag;                                           // 0x00E8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        InitialState;                                  // 0x00F0 (0x0008) [0x0000000000000000]               
	class FName                                        Layer;                                         // 0x00F8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        Group;                                         // 0x0100 (0x0008) [0x0000000020000000]  CPF_Deprecated)
	struct FQWord                                      HiddenEditorViews;                             // 0x0108 (0x0008) [0x0000000000002000] (CPF_Transient)
	class TArray<class AActor*>                        Touching;                                      // 0x0110 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class AActor*>                        Children;                                      // 0x011C (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              LatentFloat;                                   // 0x0128 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UAnimNodeSequence*                           LatentSeqNode;                                 // 0x012C (0x0004) [0x0000000000000002] (CPF_Const)   
	class APhysicsVolume*                              PhysicsVolume;                                 // 0x0130 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector                                     Velocity;                                      // 0x0134 (0x000C) [0x0000000000000020] (CPF_Net)     
	struct FVector                                     Acceleration;                                  // 0x0140 (0x000C) [0x0000000000000000]               
	struct FVector                                     AngularVelocity;                               // 0x014C (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class USkeletalMeshComponent*                      BaseSkelComponent;                             // 0x0158 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class FName                                        BaseBoneName;                                  // 0x015C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<class AActor*>                        Attached;                                      // 0x0164 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FVector                                     RelativeLocation;                              // 0x0170 (0x000C) [0x0000000000000022] (CPF_Const | CPF_Net)
	struct FRotator                                    RelativeRotation;                              // 0x017C (0x000C) [0x0000000000000022] (CPF_Const | CPF_Net)
	class UPrimitiveComponent*                         CollisionComponent;                            // 0x0188 (0x0004) [0x00000000040A0009] (CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	int32_t                                            OverlapTag;                                    // 0x018C (0x0004) [0x0000000000001000] (CPF_Native)  
	struct FRotator                                    RotationRate;                                  // 0x0190 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      PendingTouch;                                  // 0x019C (0x0004) [0x0000000000000000]               
	class UClass*                                      MessageClass;                                  // 0x01A0 (0x0004) [0x0000000000000000]               
	class TArray<class UClass*>                        SupportedEvents;                               // 0x01A4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class USequenceEvent*>                GeneratedEvents;                               // 0x01B0 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class USeqAct_Latent*>                LatentActions;                                 // 0x01BC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Actor");
		}

		return uClassPointer;
	};

	class USpriteComponent* GetActorSpriteComponent();
	int32_t GetActorMetrics(EActorMetricsType MetricsType);
	bool eventOnMobileTouch(class APlayerController* InPC, const struct FVector2D& TouchLocation);
	bool IsMobileTouchEnabled();
	bool ShouldBeHiddenBySHOW_NavigationNodes();
	bool WillOverlap(const struct FVector& PosA, const struct FVector& VelA, const struct FVector& PosB, const struct FVector& VelB, float StepSize, float Radius, float& outTime);
	struct FVector GetAvoidanceVector(const struct FVector& GoalLocation, float CollisionRadius, float MaxSpeed, int32_t optionalNumSamples, float optionalVelocityStepRate, float optionalMaxTimeTilOverlap, class TArray<class AActor*>& outObstacles);
	void eventReplicationEnded();
	void eventPostDemoRewind();
	void eventAnimTreeUpdated(class USkeletalMeshComponent* SkelMesh);
	bool SupportsKismetModification(class USequenceOp* AskingOp, class FString& outReason);
	class UParticleSystem* GetAnimTrailParticleSystem(class UAnimNotify_Trails* AnimNotifyData);
	void eventTrailsNotifyEnd(class UAnimNotify_Trails* AnimNotifyData);
	void eventTrailsNotifyTick(class UAnimNotify_Trails* AnimNotifyData);
	void eventTrailsNotify(class UAnimNotify_Trails* AnimNotifyData);
	bool eventCreateForceField(class UAnimNotify_ForceField* AnimNotifyData);
	bool eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	void GetAimAdhesionExtent(float& outWidth, float& outHeight, struct FVector& outCenter);
	void GetAimFrictionExtent(float& outWidth, float& outHeight, struct FVector& outCenter);
	bool IsInPersistentLevel(bool optionalBIncludeLevelStreamingPersistent);
	void eventOnRigidBodySpringOverextension(class URB_BodyInstance* BodyInstance);
	static struct FGuid GetPackageGuid(const class FName& PackageName);
	void eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void eventRootMotionExtracted(class USkeletalMeshComponent* SkelComp, struct FBoneAtom& outExtractedRootMotionDelta);
	void eventRootMotionProcessed(class USkeletalMeshComponent* SkelComp);
	void eventRootMotionModeChanged(class USkeletalMeshComponent* SkelComp);
	void eventPostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void NativePostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void SetHUDLocation(const struct FVector& NewHUDLocation);
	void eventOnRanOver(class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int32_t WheelIndex);
	void eventRigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int32_t ContactIndex, struct FCollisionImpactData& outRigidCollisionData);
	void eventInterpolationChanged(class USeqAct_Interp* InterpAction);
	void eventInterpolationFinished(class USeqAct_Interp* InterpAction);
	void eventInterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void eventSpawnedByKismet();
	struct FVector GetTargetLocation(class AActor* optionalRequestedBy, bool optionalBRequestAlternateLoc);
	void FindGoodEndView(class APlayerController* PC, struct FRotator& outGoodRotation);
	void NotifyLocalPlayerTeamReceived();
	uint8_t eventScriptGetTeamNum();
	uint8_t GetTeamNum();
	void PawnBaseDied();
	bool IsPlayerOwned();
	void eventGetActorEyesViewPoint(struct FVector& outOut_Location, struct FRotator& outOut_Rotation);
	bool IsStationary();
	class UFaceFXAsset* eventGetActorFaceFXAsset();
	bool CanActorPlayFaceFXAnim();
	bool IsActorPlayingFaceFXAnim();
	void eventTickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp, class USkelControlBase* SkelCtrl);
	void eventSetSkelControlScale(const class FName& SkelControlName, float Scale);
	void eventSetMorphWeight(const class FName& MorphNodeName, float MorphWeight);
	void eventStopActorFaceFXAnim();
	bool eventPlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const class FString& GroupName, const class FString& SeqName, class USoundCue* SoundCueToPlay);
	void eventFinishAnimControl(class UInterpGroup* InInterpGroup);
	void eventSetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void eventBeginAnimControl(class UInterpGroup* InInterpGroup);
	void eventOnAnimPlay(class UAnimNodeSequence* SeqNode);
	void eventOnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void OnAttachToActor(class USeqAct_AttachToActor* Action);
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void OnChangeCollision(class USeqAct_ChangeCollision* Action);
	void OnSetPhysics(class USeqAct_SetPhysics* Action);
	void OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action);
	void OnSetVelocity(class USeqAct_SetVelocity* Action);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnModifyHealth(class USeqAct_ModifyHealth* Action);
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t optionalCinematicTextureGroups);
	void eventShutDown();
	void SetNetUpdateTime(float NewUpdateTime);
	void eventForceNetRelevant();
	void OnDestroy(class USeqAct_Destroy* Action);
	void ClearLatentAction(class UClass* actionClass, bool optionalBAborted, class USeqAct_Latent* optionalExceptionAction);
	bool FindEventsOfClass(class UClass* EventClass, bool optionalBIncludeDisabled, class TArray<class USequenceEvent*>& outOut_EventList);
	bool ActivateEventClass(class UClass* InClass, class AActor* InInstigator, bool optionalBTest, class TArray<class USequenceEvent*>& outEventList, class TArray<int32_t>& outActivateIndices, class TArray<class USequenceEvent*>& outActivatedEvents);
	bool TriggerGlobalEventClass(class UClass* InEventClass, class AActor* InInstigator, int32_t optionalActivateIndex);
	void eventReceivedNewEvent(class USequenceEvent* Evt);
	bool TriggerEventClass(class UClass* InEventClass, class AActor* InInstigator, int32_t optionalActivateIndex, bool optionalBTest, class TArray<class USequenceEvent*>& outActivatedEvents);
	void eventDebugMessagePlayer(const class FString& msg);
	bool ImpactEffectIsRelevant(class APawn* EffectInstigator, const struct FVector& SpawnLocation, bool bForceDedicated, float optionalVisibleCullDistance, float optionalHiddenCullDistance, bool optionalBSkipLOSCheck);
	bool ActorEffectIsRelevant(class APawn* EffectInstigator, bool bForceDedicated, float optionalVisibleCullDistance, float optionalHiddenCullDistance);
	bool EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float optionalVisibleCullDistance, float optionalHiddenCullDistance);
	void ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation);
	bool CanSplash();
	void PlayTeleportEffect(bool bOut, bool bSound);
	bool IsInPain();
	void eventReset();
	class UAudioComponent* eventGetFaceFXAudioComponent();
	void eventModifyHearSoundComponent(class UAudioComponent* AC);
	class FString GetPhysicsName();
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	class FString GetDebugName();
	void MatchStarting();
	static class FString GetLocalString(int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01);
	static void ReplaceText(const class FString& Replace, const class FString& With, class FString& outText);
	class FString GetHumanReadableName();
	class FString GetItemName(const class FString& FullName);
	bool CalcCamera(float fDeltaTime, struct FVector& outOut_CamLoc, struct FRotator& outOut_CamRot, float& outOut_FOV);
	void eventEndViewTarget(class APlayerController* PC);
	void eventBecomeViewTarget(class APlayerController* PC);
	bool CheckForErrors();
	void eventDebugFreezeGame(class AActor* optionalActorToLookAt);
	float GetGravityZ();
	void CheckHitInfo(class UPrimitiveComponent* FallBackComponent, const struct FVector& Dir, struct FTraceHitInfo& outHitInfo, struct FVector& outOut_HitLocation);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float optionalDamageFalloffExponent);
	bool eventHealDamage(int32_t Amount, class AController* Healer, class UClass* DamageType);
	void eventTakeDamage(int32_t DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	void KilledBy(class APawn* EventInstigator);
	bool HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* optionalIgnoredActor, class AController* optionalInstigatedByController, bool optionalBDoFullDamage);
	bool StopsProjectile(class AProjectile* P);
	void eventNotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt);
	void eventConstraintBrokenNotify(class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance);
	void eventSetInitialState();
	void eventPostBeginPlay();
	void eventBroadcastLocalizedTeamMessage(int32_t TeamIndex, class UClass* InMessageClass, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	void eventBroadcastLocalizedMessage(class UClass* InMessageClass, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	void eventPreBeginPlay();
	class APlayerController* GetALocalPlayerController();
	void LocalPlayerControllers(class UClass* BaseClass, class APlayerController*& outPC);
	void AllOwnedComponents(class UClass* BaseClass, class UActorComponent*& outOutComponent);
	void ComponentList(class UClass* BaseClass, class UActorComponent*& outOut_Component);
	void OverlappingActors(class UClass* BaseClass, float Radius, const struct FVector& optionalLoc, bool optionalBIgnoreHidden, class AActor*& outOut_Actor);
	void CollidingActors(class UClass* BaseClass, float Radius, const struct FVector& optionalLoc, bool optionalBUseOverlapCheck, class UClass* optionalInterfaceClass, class AActor*& outActor, struct FTraceHitInfo& outHitInfo);
	void VisibleCollidingActors(class UClass* BaseClass, float Radius, const struct FVector& optionalLoc, bool optionalBIgnoreHidden, const struct FVector& optionalExtent, bool optionalBTraceActors, class UClass* optionalInterfaceClass, class AActor*& outActor, struct FTraceHitInfo& outHitInfo);
	void VisibleActors(class UClass* BaseClass, float optionalRadius, const struct FVector& optionalLoc, class AActor*& outActor);
	void TraceActors(class UClass* BaseClass, const struct FVector& End, const struct FVector& optionalStart, const struct FVector& optionalExtent, int32_t optionalExtraTraceFlags, class AActor*& outActor, struct FVector& outHitLoc, struct FVector& outHitNorm, struct FTraceHitInfo& outHitInfo);
	void TouchingActors(class UClass* BaseClass, class AActor*& outActor);
	void BasedActors(class UClass* BaseClass, class AActor*& outActor);
	void ChildActors(class UClass* BaseClass, class AActor*& outActor);
	void DynamicActors(class UClass* BaseClass, class UClass* optionalInterfaceClass, class AActor*& outActor);
	void AllActors(class UClass* BaseClass, class UClass* optionalInterfaceClass, class AActor*& outActor);
	class FString GetURLMap();
	void PostTeleport(class ATeleporter* OutTeleporter);
	bool PreTeleport(class ATeleporter* InTeleporter);
	struct FVector GetDestination(class AController* C);
	bool CalculateMinSpeedTrajectory(const struct FVector& End, const struct FVector& Start, float MaxTossSpeed, float MinTossSpeed, const struct FVector& optionalCollisionSize, float optionalTerminalVelocity, float optionalGravityZ, bool optionalBOnlyTraceUp, struct FVector& outOut_Velocity);
	bool SuggestTossVelocity(const struct FVector& Destination, const struct FVector& Start, float TossSpeed, float optionalBaseTossZ, float optionalDesiredZPct, const struct FVector& optionalCollisionSize, float optionalTerminalVelocity, float optionalOverrideGravityZ, bool optionalBOnlyTraceUp, struct FVector& outTossVelocity);
	bool PlayerCanSeeMe(bool optionalBForceLOSCheck);
	void MakeNoise(float Loudness, const class FName& optionalNoiseType);
	void PlaySound(class USoundCue* InSoundCue, bool optionalBNotReplicated, bool optionalBNoRepToOwner, bool optionalBStopWhenOwnerDestroyed, const struct FVector& optionalSoundLocation, bool optionalBNoRepToRelevant);
	class UAudioComponent* CreateAudioComponent(class USoundCue* InSoundCue, bool optionalBPlay, bool optionalBStopWhenOwnerDestroyed, bool optionalBUseLocation, const struct FVector& optionalSourceLocation, bool optionalBAttachToSelf);
	void ResetTimerTimeDilation(const class FName& TimerName, class UObject* optionalInObj);
	void ModifyTimerTimeDilation(const class FName& TimerName, float InTimerTimeDilation, class UObject* optionalInObj);
	float GetRemainingTimeForTimer(const class FName& optionalTimerFuncName, class UObject* optionalInObj);
	float GetTimerRate(const class FName& optionalTimerFuncName, class UObject* optionalInObj);
	float GetTimerCount(const class FName& optionalInTimerFunc, class UObject* optionalInObj);
	bool IsTimerActive(const class FName& optionalInTimerFunc, class UObject* optionalInObj);
	void PauseTimer(bool bPause, const class FName& optionalInTimerFunc, class UObject* optionalInObj);
	void ClearAllTimers(class UObject* optionalInObj);
	void ClearTimer(const class FName& optionalInTimerFunc, class UObject* optionalInObj);
	void SetTimer(float InRate, bool optionalInbLoop, const class FName& optionalInTimerFunc, class UObject* optionalInObj);
	void eventTornOff();
	bool Destroy();
	class AActor* Spawn(class UClass* SpawnClass, class AActor* optionalSpawnOwner, const class FName& optionalSpawnTag, const struct FVector& optionalSpawnLocation, const struct FRotator& optionalSpawnRotation, class AActor* optionalActorTemplate, bool optionalBNoCollisionFail);
	bool IsBlockedBy(class AActor* Other);
	void GetBoundingCylinder(float& outCollisionRadius, float& outCollisionHeight);
	void GetComponentsBoundingBox(struct FBox& outActorBox);
	bool IsOverlapping(class AActor* A);
	bool ContainsPoint(const struct FVector& Spot);
	bool FindSpot(const struct FVector& BoxExtent, struct FVector& outSpotLocation);
	bool TraceAllPhysicsAssetInteractions(class USkeletalMeshComponent* SkelMeshComp, const struct FVector& EndTrace, const struct FVector& StartTrace, const struct FVector& optionalExtent, class TArray<struct FImpactInfo>& outOut_Hits);
	bool FastTrace(const struct FVector& TraceEnd, const struct FVector& optionalTraceStart, const struct FVector& optionalBoxExtent, bool optionalBTraceBullet);
	bool PointCheckComponent(class UPrimitiveComponent* InComponent, const struct FVector& PointLocation, const struct FVector& PointExtent);
	bool TraceComponent(class UPrimitiveComponent* InComponent, const struct FVector& TraceEnd, const struct FVector& optionalTraceStart, const struct FVector& optionalExtent, bool optionalBComplexCollision, struct FVector& outHitLocation, struct FVector& outHitNormal, struct FTraceHitInfo& outHitInfo);
	class AActor* Trace(const struct FVector& TraceEnd, const struct FVector& optionalTraceStart, bool optionalBTraceActors, const struct FVector& optionalExtent, int32_t optionalExtraTraceFlags, struct FVector& outHitLocation, struct FVector& outHitNormal, struct FTraceHitInfo& outHitInfo);
	void VolumeBasedDestroy(class APhysicsVolume* PV);
	void eventOutsideWorldBounds();
	void eventFellOutOfWorld(class UClass* dmgType);
	bool UsedBy(class APawn* User);
	bool eventOverRotated(struct FRotator& outOut_Desired, struct FRotator& outOut_Actual);
	bool ClampRotation(const struct FRotator& rBase, const struct FRotator& rUpperLimits, const struct FRotator& rLowerLimits, struct FRotator& outOut_Rot);
	void eventOnSleepRBPhysics();
	void eventOnWakeRBPhysics();
	void eventRanInto(class AActor* Other);
	void eventEncroachedBy(class AActor* Other);
	bool eventEncroachingOn(class AActor* Other);
	void eventCollisionChanged();
	class AActor* eventSpecialHandling(class APawn* Other);
	void eventDetach(class AActor* Other);
	void eventAttach(class AActor* Other);
	void eventBaseChange();
	void eventBump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void eventUnTouch(class AActor* Other);
	void eventPostTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventPhysicsVolumeChange(class APhysicsVolume* NewVolume);
	void eventLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	void eventFalling();
	void eventHitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void eventTimer();
	void eventTick(float DeltaTime);
	void eventLostChild(class AActor* Other);
	void eventGainedChild(class AActor* Other);
	void eventDestroyed();
	void SetTickIsDisabled(bool bInDisabled);
	void SetTickGroup(ETickingGroup NewTickGroup);
	void ReattachComponent(class UActorComponent* ComponentToReattach);
	void DetachComponent(class UActorComponent* ExComponent);
	void AttachComponent(class UActorComponent* NewComponent);
	void UnClock(float& outTime);
	void Clock(float& outTime);
	void SetPhysics(EPhysics newPhysics);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetHidden(bool bNewHidden);
	void ChartData(const class FString& DataName, float DataValue);
	static void FlushDebugStrings();
	static void DrawDebugFrustrum(uint8_t R, uint8_t G, uint8_t B, bool optionalBPersistentLines, struct FMatrix& outFrustumToWorld);
	static void DrawDebugString(const struct FVector& TextLocation, const class FString& Text, class AActor* optionalTestBaseActor, const struct FColor& optionalTextColor, float optionalDuration);
	static void DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, const struct FColor& DrawColor, bool optionalBPersistentLines);
	static void DrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int32_t Segments, uint8_t R, uint8_t G, uint8_t B, bool optionalBPersistentLines);
	static void DrawDebugSphere(const struct FVector& Center, float Radius, int32_t Segments, uint8_t R, uint8_t G, uint8_t B, bool optionalBPersistentLines);
	static void DrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool optionalBPersistentLines);
	static void DrawDebugStar(const struct FVector& Position, float Size, uint8_t R, uint8_t G, uint8_t B, bool optionalBPersistentLines);
	static void DrawDebugBox(const struct FVector& Center, const struct FVector& Extent, uint8_t R, uint8_t G, uint8_t B, bool optionalBPersistentLines);
	static void DrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, bool optionalBPersistentLines);
	static void DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, uint8_t R, uint8_t G, uint8_t B, bool optionalBPersistentLines);
	static void FlushPersistentDebugLines();
	static struct FVector GetBasedPosition(const struct FBasedPosition& BP);
	static void SetBasedPosition(const struct FVector& pos, class AActor* optionalForcedBase, struct FBasedPosition& outBP);
	static struct FVector BP2Vect(const struct FBasedPosition& BP);
	static void Vect2BP(const struct FVector& pos, class AActor* optionalForcedBase, struct FBasedPosition& outBP);
	void SetForcedInitialReplicatedProperty(class UProperty* PropToReplicate, bool bAdd);
	void eventReplicatedEvent(const class FName& VarName);
	struct FVector GetAggregateBaseVelocity(class AActor* optionalTestBase);
	bool IsOwnedBy(class AActor* TestActor);
	class AActor* GetBaseMost();
	bool IsBasedOn(class AActor* TestActor);
	void SearchForBaseBelow(float HeightBelow, class AActor*& outNewBase, struct FVector& outHitNormal);
	void FindBase();
	void SetOwner(class AActor* NewOwner);
	void SetBase(class AActor* NewBase, const struct FVector& optionalNewFloor, class USkeletalMeshComponent* optionalSkelComp, const class FName& optionalAttachName);
	float GetTerminalVelocity();
	void AutonomousPhysics(float DeltaSeconds);
	bool MoveSmooth(const struct FVector& Delta);
	int32_t fixedTurn(int32_t Current, int32_t Desired, int32_t DeltaRate);
	void SetShadowParentOnAllAttachedComponents(class UPrimitiveComponent* MyPrimComp, class ULightEnvironmentComponent* MyLightEnv);
	void SetHardAttach(bool optionalBNewHardAttach);
	bool SetRelativeLocation(const struct FVector& NewLocation);
	bool SetRelativeRotation(const struct FRotator& NewRotation);
	void SetZone(bool bForceRefresh);
	EMoveDir MovingWhichWay(float& outAmount);
	bool SetRotation(const struct FRotator& NewRotation);
	bool SetLocation(const struct FVector& NewLocation);
	bool Move(const struct FVector& Delta);
	void SetDrawScale3D(const struct FVector& NewScale3D);
	void SetDrawScale(float NewScale);
	void SetCollisionType(ECollisionType NewCollisionType);
	void SetCollisionSize(float NewRadius, float NewHeight);
	void SetCollision(bool optionalBNewColActors, bool optionalBNewBlockActors, bool optionalBNewIgnoreEncroachers);
	void FinishAnim(class UAnimNodeSequence* SeqNode, bool optionalBFinishOnBlendOut);
	void Sleep(float Seconds);
	class FString ConsoleCommand(const class FString& Command, bool optionalBWriteToLog);
	void ForceUpdateComponents(bool optionalBCollisionUpdate, bool optionalBTransformOnly);
};

// Class Engine.Info
// 0x0000 (0x01C8 - 0x01C8)
class AInfo : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Info");
		}

		return uClassPointer;
	};

};

// Class Engine.ZoneInfo
// 0x0010 (0x01C8 - 0x01D8)
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                         // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SoftKill;                                      // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      KillZDamageType;                               // 0x01D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSoftKillZ : 1;                                // 0x01D4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ZoneInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.WorldInfo
// 0x067C (0x01D8 - 0x0854)
class AWorldInfo : public AZoneInfo
{
public:
	struct FPostProcessSettings                        DefaultPostProcessSettings;                    // 0x01D8 (0x0154) [0x0000000000404001] (CPF_Edit | CPF_Config | CPF_NeedCtorLink)
	class UPostProcessChain*                           WorldPostProcessChain;                         // 0x032C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPersistPostProcessToNextLevel : 1;            // 0x0330 (0x0004) [0x0000000000004001] [0x00000001] (CPF_Edit | CPF_Config)
	uint32_t                                           bFogEnabled : 1;                               // 0x0330 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBumpOffsetEnabled : 1;                        // 0x0330 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseGammaCorrection : 1;                       // 0x0330 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bMapNeedsLightingFullyRebuilt : 1;             // 0x0330 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bMapHasMultipleDominantLightsAffectingOnePrimitive : 1;// 0x0330 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bMapHasPathingErrors : 1;                      // 0x0330 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bRequestedBlockOnAsyncLoading : 1;             // 0x0330 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bBegunPlay : 1;                                // 0x0330 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bPlayersOnly : 1;                              // 0x0330 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bPlayersOnlyPending : 1;                       // 0x0330 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bSuspendAI : 1;                                // 0x0330 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bDropDetail : 1;                               // 0x0330 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bAggressiveLOD : 1;                            // 0x0330 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           bStartup : 1;                                  // 0x0330 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bPathsRebuilt : 1;                             // 0x0330 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bHasPathNodes : 1;                             // 0x0330 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bIsMenuLevel : 1;                              // 0x0330 (0x0004) [0x0000000000002002] [0x00020000] (CPF_Const | CPF_Transient)
	uint32_t                                           bDebugPauseExecution : 1;                      // 0x0330 (0x0004) [0x0000000000002002] [0x00040000] (CPF_Const | CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bDebugStepExecution : 1;                       // 0x0330 (0x0004) [0x0000000000002002] [0x00080000] (CPF_Const | CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bUseConsoleInput : 1;                          // 0x0330 (0x0004) [0x0000000000002000] [0x00100000] (CPF_Transient)
	uint32_t                                           bMinimizeBSPSections : 1;                      // 0x0330 (0x0004) [0x0000000000000001] [0x00200000] (CPF_Edit)
	uint32_t                                           bNoDefaultInventoryForPlayer : 1;              // 0x0330 (0x0004) [0x0000000000000001] [0x00400000] (CPF_Edit)
	uint32_t                                           bNoPathWarnings : 1;                           // 0x0330 (0x0004) [0x0000000000000001] [0x00800000] (CPF_Edit)
	uint32_t                                           bNoMobileMapWarnings : 1;                      // 0x0330 (0x0004) [0x0000000000004001] [0x01000000] (CPF_Edit | CPF_Config)
	uint32_t                                           bHighPriorityLoading : 1;                      // 0x0330 (0x0004) [0x0000000000000020] [0x02000000] (CPF_Net)
	uint32_t                                           bHighPriorityLoadingLocal : 1;                 // 0x0330 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bUseProcBuildingRulesetOverride : 1;           // 0x0330 (0x0004) [0x0000000000000001] [0x08000000] (CPF_Edit)
	uint32_t                                           bSupportDoubleBufferedPhysics : 1;             // 0x0330 (0x0004) [0x0000000000000001] [0x10000000] (CPF_Edit)
	uint32_t                                           bPhysicsIgnoreDeltaTime : 1;                   // 0x0330 (0x0004) [0x0000000000000001] [0x20000000] (CPF_Edit)
	uint32_t                                           bEnableChanceOfPhysicsChunkOverride : 1;       // 0x0330 (0x0004) [0x0000000000004001] [0x40000000] (CPF_Edit | CPF_Config)
	uint32_t                                           bLimitExplosionChunkSize : 1;                  // 0x0330 (0x0004) [0x0000000000004001] [0x80000000] (CPF_Edit | CPF_Config)
	uint32_t                                           bLimitDamageChunkSize : 1;                     // 0x0334 (0x0004) [0x0000000000004001] [0x00000001] (CPF_Edit | CPF_Config)
	uint32_t                                           bPrecomputeVisibility : 1;                     // 0x0334 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPlaceCellsOnSurfaces : 1;                     // 0x0334 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAllowTemporalAA : 1;                          // 0x0334 (0x0004) [0x0000000000044001] [0x00000008] (CPF_Edit | CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bUseGlobalIllumination : 1;                    // 0x0334 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit | CPF_EditorOnly)
	uint32_t                                           bForceNoPrecomputedLighting : 1;               // 0x0334 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bHaveActiveCrowd : 1;                          // 0x0334 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bAllowHostMigration : 1;                       // 0x0334 (0x0004) [0x0000000000004000] [0x00000080] (CPF_Config)
	uint32_t                                           bGameplayFramePause : 1;                       // 0x0334 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bIgnoreKismetFrameSkip : 1;                    // 0x0334 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	float                                              SquintModeKernelSize;                          // 0x0338 (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;              // 0x033C (0x0004) [0x0000000001002002] (CPF_Const | CPF_Transient)
	struct FReverbSettings                             DefaultReverbSettings;                         // 0x0340 (0x0010) [0x0000000000004001] (CPF_Edit | CPF_Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                    // 0x0350 (0x0024) [0x0000000000004001] (CPF_Edit | CPF_Config)
	float                                              FogStart;                                      // 0x0374 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FogEnd;                                        // 0x0378 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      FogColor;                                      // 0x037C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BumpEnd;                                       // 0x0380 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AReverbVolume*                               HighestPriorityReverbVolume;                   // 0x0384 (0x0004) [0x0000000001002002] (CPF_Const | CPF_Transient)
	class TArray<class AMassiveLODOverrideVolume*>     MassiveLODOverrideVolumes;                     // 0x0388 (0x000C) [0x0000000001402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class APortalVolume*>                 PortalVolumes;                                 // 0x0394 (0x000C) [0x0000000001402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class AEnvironmentVolume*>            EnvironmentVolumes;                            // 0x03A0 (0x000C) [0x0000000001402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class ULevelStreaming*>               StreamingLevels;                               // 0x03AC (0x000C) [0x0000000004420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline)
	struct FDouble                                     LastTimeUnbuiltLightingWasEncountered;         // 0x03B8 (0x0008) [0x0000000000002000] (CPF_Transient)
	class UBookMark*                                   BookMarks[10];                                 // 0x03C0 (0x0028) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class UKismetBookMark*                             KismetBookMarks[10];                           // 0x03E8 (0x0028) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class TArray<class UClipPadEntry*>                 ClipPadEntries;                                // 0x0410 (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline | CPF_EditorOnly)
	float                                              TimeDilation;                                  // 0x041C (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              DemoPlayTimeDilation;                          // 0x0420 (0x0004) [0x0000000000000000]               
	float                                              TimeSeconds;                                   // 0x0424 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RealTimeSeconds;                               // 0x0428 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              AudioTimeSeconds;                              // 0x042C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              DeltaSeconds;                                  // 0x0430 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              PauseDelay;                                    // 0x0434 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RealTimeToUnPause;                             // 0x0438 (0x0004) [0x0000000000002000] (CPF_Transient)
	class APlayerReplicationInfo*                      Pauser;                                        // 0x043C (0x0004) [0x0000000000000020] (CPF_Net)     
	class FString                                      VisibleGroups;                                 // 0x0440 (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated | CPF_EditorOnly)
	class FString                                      VisibleLayers;                                 // 0x044C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class UTexture2D*                                  DefaultTexture;                                // 0x0458 (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  WireframeTexture;                              // 0x045C (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  WhiteSquareTexture;                            // 0x0460 (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  LargeVertex;                                   // 0x0464 (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  BSPVertex;                                     // 0x0468 (0x0004) [0x0000000000000000]               
	class TArray<class FString>                        DeferredExecs;                                 // 0x046C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class AGameReplicationInfo*                        GRI;                                           // 0x0478 (0x0004) [0x0000000000002000] (CPF_Transient)
	ENetMode                                           NetMode;                                       // 0x047C (0x0001) [0x0000000000000000]               
	ETravelType                                        NextTravelType;                                // 0x047D (0x0001) [0x0000000000000000]               
	EVisibilityAggressiveness                          VisibilityAggressiveness;                      // 0x047E (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPreferredLightmapType                             PreferredLightmapType;                         // 0x047F (0x0001) [0x0000000000000000]               
	ELightingBuildQuality                              LevelLightingQuality;                          // 0x0480 (0x0001) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	class FString                                      ComputerName;                                  // 0x0484 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      EngineVersion;                                 // 0x0490 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      MinNetVersion;                                 // 0x049C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class AGameInfo*                                   Game;                                          // 0x04A8 (0x0004) [0x0000000000000000]               
	float                                              StallZ;                                        // 0x04AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WorldGravityZ;                                 // 0x04B0 (0x0004) [0x0000000000002020] (CPF_Net | CPF_Transient)
	float                                              DefaultGravityZ;                               // 0x04B4 (0x0004) [0x0000000000044002] (CPF_Const | CPF_Config | CPF_GlobalConfig)
	float                                              GlobalGravityZ;                                // 0x04B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RBPhysicsGravityScaling;                       // 0x04BC (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class ANavigationPoint*                            NavigationPointList;                           // 0x04C0 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class AController*                                 ControllerList;                                // 0x04C4 (0x0004) [0x0000000000000002] (CPF_Const)   
	class APawn*                                       PawnList;                                      // 0x04C8 (0x0004) [0x0000000000000002] (CPF_Const)   
	class ACoverLink*                                  CoverList;                                     // 0x04CC (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class APylon*                                      PylonList;                                     // 0x04D0 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              MoveRepSize;                                   // 0x04D4 (0x0004) [0x0000000000000000]               
	class TArray<struct FNetViewer>                    ReplicationViewers;                            // 0x04D8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      NextURL;                                       // 0x04E4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              NextSwitchCountdown;                           // 0x04F0 (0x0004) [0x0000000000000000]               
	int32_t                                            PackedLightAndShadowMapTextureSize;            // 0x04F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     DefaultColorScale;                             // 0x04F8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      DefaultGameType;                               // 0x0504 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UClass*>                        GameTypesSupportedOnThisMap;                   // 0x0508 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UClass*                                      GameTypeForPIE;                                // 0x0514 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class TArray<class UObject*>                       ClientDestroyedActorContent;                   // 0x0518 (0x000C) [0x0000000000420002] (CPF_Const | CPF_EditConst | CPF_NeedCtorLink)
	class TArray<class FName>                          PreparingLevelNames;                           // 0x0524 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class FName                                        CommittedPersistentLevelName;                  // 0x0530 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UObjectReferencer*                           PersistentMapForcedObjects;                    // 0x0538 (0x0004) [0x0000000000000000]               
	class UAudioComponent*                             MusicComp;                                     // 0x053C (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	struct FMusicTrackStruct                           CurrentMusicTrack;                             // 0x0540 (0x0024) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FMusicTrackStruct                           ReplicatedMusicTrack;                          // 0x0564 (0x0024) [0x0000000000402020] (CPF_Net | CPF_Transient | CPF_NeedCtorLink | CPF_RepNotify)
	class FString                                      Title;                                         // 0x0588 (0x000C) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Author;                                        // 0x0594 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UMapInfo*                                    MyMapInfo;                                     // 0x05A0 (0x0004) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class FString                                      EmitterPoolClassPath;                          // 0x05A4 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class AEmitterPool*                                MyEmitterPool;                                 // 0x05B0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class FString                                      DecalManagerClassPath;                         // 0x05B4 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class ADecalManager*                               MyDecalManager;                                // 0x05C0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class FString                                      FractureManagerClassPath;                      // 0x05C4 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class AFractureManager*                            MyFractureManager;                             // 0x05D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class FString                                      ParticleEventManagerClassPath;                 // 0x05D4 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class AParticleEventManager*                       MyParticleEventManager;                        // 0x05E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UProcBuildingRuleset*                        ProcBuildingRulesetOverride;                   // 0x05E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPhysicsDeltaTime;                           // 0x05E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxPhysicsSubsteps;                            // 0x05EC (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FPhysXSceneProperties                       PhysicsProperties;                             // 0x05F0 (0x003C) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class TArray<struct FCompartmentRunList>           CompartmentRunFrames;                          // 0x062C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              DefaultSkinWidth;                              // 0x0638 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ApexLODResourceBudget;                         // 0x063C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ApexDestructionLODResourceValue;               // 0x0640 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ApexClothingLODResourceValue;                  // 0x0644 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FApexModuleDestructibleSettings             DestructibleSettings;                          // 0x0648 (0x0014) [0x0000000000000001] (CPF_Edit)    
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                               // 0x065C (0x0004) [0x0000000000000000]               
	struct FPhysXVerticalProperties                    VerticalProperties;                            // 0x0660 (0x0018) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class TArray<struct FPointer>                      WorldAttractors;                               // 0x0678 (0x000C) [0x0000000000001000] (CPF_Native)  
	float                                              ChanceOfPhysicsChunkOverride;                  // 0x0684 (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	float                                              MaxExplosionChunkSize;                         // 0x0688 (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	float                                              MaxDamageChunkSize;                            // 0x068C (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	float                                              FractureExplosionVelScale;                     // 0x0690 (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	int32_t                                            MaxNumFacturedChunksToSpawnInAFrame;           // 0x0694 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NumFacturedChunksSpawnedThisFrame;             // 0x0698 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FracturedMeshWeaponDamage;                     // 0x069C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            VisibilityCellSize;                            // 0x06A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CharacterLitIndirectBrightness;                // 0x06A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CharacterLitIndirectContrastFactor;            // 0x06A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CharacterShadowedIndirectBrightness;           // 0x06AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CharacterShadowedIndirectContrastFactor;       // 0x06B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CharacterLightingContrastFactor;               // 0x06B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  ImageReflectionEnvironmentTexture;             // 0x06B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                ImageReflectionEnvironmentColor;               // 0x06BC (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              ImageReflectionEnvironmentRotation;            // 0x06CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FMap_Mirror                                 ScreenMessages;                                // 0x06D0 (0x003C) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class TArray<struct FScreenMessageString>          PriorityScreenMessages;                        // 0x070C (0x000C) [0x0000000000003000] (CPF_Native | CPF_Transient)
	int32_t                                            MaxTrianglesPerLeaf;                           // 0x0718 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class ULightmassLevelSettings*                     LMLevelSettings;                               // 0x071C (0x0004) [0x0000000024400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_Deprecated | CPF_EditorOnly)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0720 (0x003C) MISSED OFFSET
	struct FLightmassWorldInfoSettings                 LightmassSettings;                             // 0x075C (0x0058) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            UnknownData01[0x78];                            // 0x07B4 (0x0078) MISSED OFFSET
	class ACrowdPopulationManagerBase*                 PopulationManager;                             // 0x082C (0x0004) [0x0000000000000000]               
	struct FHostMigrationState                         PeerHostMigration;                             // 0x0830 (0x001C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	float                                              HostMigrationTimeout;                          // 0x084C (0x0004) [0x0000000000004000] (CPF_Config)  
	class APhysicsVolume*                              FirstPhysicsVolume;                            // 0x0850 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WorldInfo");
		}

		return uClassPointer;
	};

	void ClearObjectPools();
	void ToggleHostMigration(bool bEnabled);
	void eventNotifyHostMigrationStateChanged(EHostMigrationProgress NewState, EHostMigrationProgress OldState);
	bool BeginHostMigration();
	bool eventCanBeginHostMigration();
	class AEnvironmentVolume* FindEnvironmentVolume(const struct FVector& TestLocation);
	static class AWorldInfo* GetWorldInfo();
	struct FWorldFractureSettings GetWorldFractureSettings();
	void DoMemoryTracking();
	bool GetDemoRewindPoints(class TArray<int32_t>& outOutRewindPoints);
	void GetDemoFrameInfo(int32_t& outCurrentFrame, int32_t& outTotalFrames);
	bool IsPlayingDemo();
	bool IsRecordingDemo();
	EDetailMode GetDetailMode();
	class FString GetMapName(bool optionalBIncludePrefix);
	void SetMapInfo(class UMapInfo* NewMapInfo);
	class UMapInfo* GetMapInfo();
	void SetSeamlessTravelMidpointPause(bool bNowPaused);
	bool IsInSeamlessTravel();
	void SeamlessTravel(const class FString& URL, bool optionalBAbsolute, const struct FGuid& optionalMapPackageGuid);
	void CommitMapChange();
	void CancelPendingMapChange();
	bool IsMapChangeReady();
	bool IsPreparingMapChange();
	void PrepareMapChange(class TArray<class FName>& outLevelNames);
	void NotifyMatchStarted(bool optionalBShouldActivateLevelStartupEvents, bool optionalBShouldActivateLevelBeginningEvents, bool optionalBShouldActivateLevelLoadedEvents);
	void AllClientConnections(class UPlayer*& outClientConnection, int32_t& outClientIP, int32_t& outClientPort);
	void AllPawns(class UClass* BaseClass, const struct FVector& optionalTestLocation, float optionalTestRadius, class APawn*& outP);
	void AllControllers(class UClass* BaseClass, class AController*& outC);
	void NavigationPointCheck(const struct FVector& Point, const struct FVector& Extent, class TArray<class ANavigationPoint*>& outNavs, class TArray<class UReachSpec*>& outSpecs);
	void RadiusNavigationPoints(class UClass* BaseClass, const struct FVector& Point, float Radius, class ANavigationPoint*& outN);
	void AllNavigationPoints(class UClass* BaseClass, class ANavigationPoint*& outN);
	void Reset();
	void PostBeginPlay();
	void PreBeginPlay();
	void ThisIsNeverExecuted(class ADefaultPhysicsVolume* P);
	void eventServerTravel(const class FString& URL, bool optionalBAbsolute, bool optionalBShouldSkipGameNotify);
	class UClass* GetGameClass();
	class FString GetAddressURL();
	void VerifyNavList();
	void ForceGarbageCollection(bool optionalBFullPurge);
	static bool IsPlayInMobilePreview();
	static bool IsPlayInPreview();
	static bool IsPlayInEditor();
	static bool IsWithGFx();
	static bool IsConsoleBuild(EConsoleType optionalConsoleType);
	static bool IsDemoBuild();
	class FString GetLocalURL();
	void SetLevelRBGravity(const struct FVector& NewGrav);
	class TArray<class USequence*> GetAllRootSequences();
	class USequence* GetGameSequence();
	float GetGravityZ();
	void UpdateMusicTrack(const struct FMusicTrackStruct& NewMusicTrack);
	static bool IsMenuLevel(const class FString& optionalMapName);
	void AddOnScreenDebugMessage(int32_t Key, float TimeToDisplay, const struct FColor& DisplayColor, const class FString& DebugMessage);
	void eventReplicatedEvent(const class FName& VarName);
	class UNavMeshPathGoalEvaluator* GetNavMeshPathGoalEvaluatorFromCache(class UClass* GoalEvalClass, class UNavigationHandle* Requestor);
	class UNavMeshPathConstraint* GetNavMeshPathConstraintFromCache(class UClass* ConstraintClass, class UNavigationHandle* Requestor);
	void ReleaseCachedConstraintsAndEvaluators();
};

// Class Engine.DownloadableContentEnumerator
// 0x0030 (0x003C - 0x006C)
class UDownloadableContentEnumerator : public UObject
{
public:
	class TArray<struct FOnlineContent>                DLCBundles;                                    // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_ProtectedWrite)
	class FString                                      DLCRootDir;                                    // 0x0048 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FScriptDelegate>               FindDLCDelegates;                              // 0x0054 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnFindDLCComplete__Delegate;                 // 0x0060 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DownloadableContentEnumerator");
		}

		return uClassPointer;
	};

	void TriggerFindDLCDelegates();
	void InstallDLC(const class FString& DLCName);
	void InstallAllDLC();
	void DeleteDLC(const class FString& DLCName);
	void ClearFindDLCDelegate(const struct FScriptDelegate& InDelegate);
	void AddFindDLCDelegate(const struct FScriptDelegate& InDelegate);
	void OnFindDLCComplete();
	void FindDLC();
};

// Class Engine.DownloadableContentManager
// 0x0088 (0x003C - 0x00C4)
class UDownloadableContentManager : public UObject
{
public:
	class TArray<struct FPointer>                      DLCConfigCacheChanges;                         // 0x003C (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class FString>                        InstalledDLC;                                  // 0x0048 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FMap_Mirror                                 NonPackageFilePathMap;                         // 0x0054 (0x003C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class UClass*>                        ClassesToReload;                               // 0x0090 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class UObject*>                       ObjectsToReload;                               // 0x009C (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class FString>                        QueuedFullyLoadPackageInis;                    // 0x00A8 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class UGameEngine*                                 GameEngine;                                    // 0x00B4 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FScriptDelegate                             __OnRefreshComplete__Delegate;                 // 0x00B8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DownloadableContentManager");
		}

		return uClassPointer;
	};

	void OnRefreshComplete();
	void AddPackagesToFullyLoad(const class FString& Filename);
	void RefreshDLCEnumComplete();
	void RefreshDLC();
	void OnContentChange();
	void OnStorageDeviceChange();
	void OnLoginChange(uint8_t LocalUserNum);
	void eventInit();
	void InstallNonPackageFiles(struct FOnlineContent& outDLCBundle);
	void InstallPackages(struct FOnlineContent& outDLCBundle);
	void UpdateObjectLists();
	void MarkPerObjectConfigPendingKill(const class FString& Section);
	void AddSectionToObjectList(const class FString& Section);
	bool GetDLCNonPackageFilePath(const class FName& NonPackageFileName, class FString& outPath);
	void ClearDLC();
	void InstallDLCs(class TArray<struct FOnlineContent>& outDLCBundles);
	bool InstallDLC(struct FOnlineContent& outDLCBundle);
};

// Class Engine.Engine
// 0x0618 (0x0040 - 0x0658)
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                      // 0x0040 (0x0004) [0x0000000000000000]               
	class FString                                      TinyFontName;                                  // 0x0044 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UFont*                                       SmallFont;                                     // 0x0050 (0x0004) [0x0000000000000000]               
	class FString                                      SmallFontName;                                 // 0x0054 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UFont*                                       MediumFont;                                    // 0x0060 (0x0004) [0x0000000000000000]               
	class FString                                      MediumFontName;                                // 0x0064 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UFont*                                       LargeFont;                                     // 0x0070 (0x0004) [0x0000000000000000]               
	class FString                                      LargeFontName;                                 // 0x0074 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UFont*                                       SubtitleFont;                                  // 0x0080 (0x0004) [0x0000000000000000]               
	class FString                                      SubtitleFontName;                              // 0x0084 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class TArray<class UFont*>                         AdditionalFonts;                               // 0x0090 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        AdditionalFontNames;                           // 0x009C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UClass*                                      ConsoleClass;                                  // 0x00A8 (0x0004) [0x0000000000000000]               
	class FString                                      ConsoleClassName;                              // 0x00AC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UClass*                                      GameViewportClientClass;                       // 0x00B8 (0x0004) [0x0000000000000000]               
	class FString                                      GameViewportClientClassName;                   // 0x00BC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UClass*                                      DataStoreClientClass;                          // 0x00C8 (0x0004) [0x0000000000000000]               
	class FString                                      DataStoreClientClassName;                      // 0x00CC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UClass*                                      LocalPlayerClass;                              // 0x00D8 (0x0004) [0x0000000000000000]               
	class FString                                      LocalPlayerClassName;                          // 0x00DC (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UMaterial*                                   DefaultMaterial;                               // 0x00E8 (0x0004) [0x0000000000000000]               
	class FString                                      DefaultMaterialName;                           // 0x00EC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   DefaultDecalMaterial;                          // 0x00F8 (0x0004) [0x0000000000000000]               
	class FString                                      DefaultDecalMaterialName;                      // 0x00FC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture*                                    DefaultTexture;                                // 0x0108 (0x0004) [0x0000000000000000]               
	class FString                                      DefaultTextureName;                            // 0x010C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   WireframeMaterial;                             // 0x0118 (0x0004) [0x0000000000000000]               
	class FString                                      WireframeMaterialName;                         // 0x011C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   EmissiveTexturedMaterial;                      // 0x0128 (0x0004) [0x0000000000000000]               
	class FString                                      EmissiveTexturedMaterialName;                  // 0x012C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   GeomMaterial;                                  // 0x0138 (0x0004) [0x0000000000000000]               
	class FString                                      GeomMaterialName;                              // 0x013C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   DefaultFogVolumeMaterial;                      // 0x0148 (0x0004) [0x0000000000000000]               
	class FString                                      DefaultFogVolumeMaterialName;                  // 0x014C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   TickMaterial;                                  // 0x0158 (0x0004) [0x0000000000000000]               
	class FString                                      TickMaterialName;                              // 0x015C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   CrossMaterial;                                 // 0x0168 (0x0004) [0x0000000000000000]               
	class FString                                      CrossMaterialName;                             // 0x016C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   LevelColorationLitMaterial;                    // 0x0178 (0x0004) [0x0000000000000000]               
	class FString                                      LevelColorationLitMaterialName;                // 0x017C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   LevelColorationUnlitMaterial;                  // 0x0188 (0x0004) [0x0000000000000000]               
	class FString                                      LevelColorationUnlitMaterialName;              // 0x018C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   LightingTexelDensityMaterial;                  // 0x0198 (0x0004) [0x0000000000000000]               
	class FString                                      LightingTexelDensityName;                      // 0x019C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;              // 0x01A8 (0x0004) [0x0000000000000000]               
	class FString                                      ShadedLevelColorationLitMaterialName;          // 0x01AC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;            // 0x01B8 (0x0004) [0x0000000000000000]               
	class FString                                      ShadedLevelColorationUnlitMaterialName;        // 0x01BC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   RemoveSurfaceMaterial;                         // 0x01C8 (0x0004) [0x0000000000000000]               
	class FString                                      RemoveSurfaceMaterialName;                     // 0x01CC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   VertexColorMaterial;                           // 0x01D8 (0x0004) [0x0000000000000000]               
	class FString                                      VertexColorMaterialName;                       // 0x01DC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;         // 0x01E8 (0x0004) [0x0000000000000000]               
	class FString                                      VertexColorViewModeMaterialName_ColorOnly;     // 0x01EC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;      // 0x01F8 (0x0004) [0x0000000000000000]               
	class FString                                      VertexColorViewModeMaterialName_AlphaAsColor;  // 0x01FC (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;           // 0x0208 (0x0004) [0x0000000000000000]               
	class FString                                      VertexColorViewModeMaterialName_RedOnly;       // 0x020C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;         // 0x0218 (0x0004) [0x0000000000000000]               
	class FString                                      VertexColorViewModeMaterialName_GreenOnly;     // 0x021C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;          // 0x0228 (0x0004) [0x0000000000000000]               
	class FString                                      VertexColorViewModeMaterialName_BlueOnly;      // 0x022C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   HeatmapMaterial;                               // 0x0238 (0x0004) [0x0000000000000000]               
	class FString                                      HeatmapMaterialName;                           // 0x023C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   BoneWeightMaterial;                            // 0x0248 (0x0004) [0x0000000000000000]               
	class FString                                      BoneWeightMaterialName;                        // 0x024C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   TangentColorMaterial;                          // 0x0258 (0x0004) [0x0000000000000000]               
	class FString                                      TangentColorMaterialName;                      // 0x025C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   MobileEmulationMasterMaterial;                 // 0x0268 (0x0004) [0x0000000000000000]               
	class FString                                      MobileEmulationMasterMaterialName;             // 0x026C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   ProcBuildingSimpleMaterial;                    // 0x0278 (0x0004) [0x0000000000000000]               
	class FString                                      ProcBuildingSimpleMaterialName;                // 0x027C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UStaticMesh*                                 BuildingQuadStaticMesh;                        // 0x0288 (0x0004) [0x0000000000000000]               
	class FString                                      BuildingQuadStaticMeshName;                    // 0x028C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	float                                              ProcBuildingLODColorTexelsPerWorldUnit;        // 0x0298 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              ProcBuildingLODLightingTexelsPerWorldUnit;     // 0x029C (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MaxProcBuildingLODColorTextureSize;            // 0x02A0 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MaxProcBuildingLODLightingTextureSize;         // 0x02A4 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           UseProcBuildingLODTextureCropping : 1;         // 0x02A8 (0x0004) [0x0000000000044000] [0x00000001] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           ForcePowerOfTwoProcBuildingLODTextures : 1;    // 0x02A8 (0x0004) [0x0000000000044000] [0x00000002] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bCombineSimilarMappings : 1;                   // 0x02A8 (0x0004) [0x0000000000044000] [0x00000004] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bRenderLightMapDensityGrayscale : 1;           // 0x02A8 (0x0004) [0x0000000000044000] [0x00000008] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bUseSound : 1;                                 // 0x02A8 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bUseBackgroundLevelStreaming : 1;              // 0x02A8 (0x0004) [0x0000000000004001] [0x00000020] (CPF_Edit | CPF_Config)
	uint32_t                                           bSubtitlesEnabled : 1;                         // 0x02A8 (0x0004) [0x0000000000004001] [0x00000040] (CPF_Edit | CPF_Config)
	uint32_t                                           bSubtitlesForcedOff : 1;                       // 0x02A8 (0x0004) [0x0000000000004001] [0x00000080] (CPF_Edit | CPF_Config)
	uint32_t                                           bSmoothFrameRate : 1;                          // 0x02A8 (0x0004) [0x0000000000004000] [0x00000100] (CPF_Config)
	uint32_t                                           bCheckForMultiplePawnsSpawnedInAFrame : 1;     // 0x02A8 (0x0004) [0x0000000000004000] [0x00000200] (CPF_Config)
	uint32_t                                           bShouldGenerateSimpleLightmaps : 1;            // 0x02A8 (0x0004) [0x0000000000044000] [0x00000400] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bForceStaticTerrain : 1;                       // 0x02A8 (0x0004) [0x0000000000004001] [0x00000800] (CPF_Edit | CPF_Config)
	uint32_t                                           bForceCPUSkinning : 1;                         // 0x02A8 (0x0004) [0x0000000000004000] [0x00001000] (CPF_Config)
	uint32_t                                           bUsePostProcessEffects : 1;                    // 0x02A8 (0x0004) [0x0000000000004000] [0x00002000] (CPF_Config)
	uint32_t                                           bOnScreenKismetWarnings : 1;                   // 0x02A8 (0x0004) [0x0000000000004000] [0x00004000] (CPF_Config)
	uint32_t                                           bEnableKismetLogging : 1;                      // 0x02A8 (0x0004) [0x0000000000004000] [0x00008000] (CPF_Config)
	uint32_t                                           bAllowMatureLanguage : 1;                      // 0x02A8 (0x0004) [0x0000000000004000] [0x00010000] (CPF_Config)
	uint32_t                                           bDisablePhysXHardwareSupport : 1;              // 0x02A8 (0x0004) [0x0000000000044000] [0x00020000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bPauseOnLossOfFocus : 1;                       // 0x02A8 (0x0004) [0x0000000000004000] [0x00040000] (CPF_Config)
	uint32_t                                           bCheckParticleRenderSize : 1;                  // 0x02A8 (0x0004) [0x0000000000044000] [0x00080000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bEnableColorClear : 1;                         // 0x02A8 (0x0004) [0x0000000000044002] [0x00100000] (CPF_Const | CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bAreConstraintsDirty : 1;                      // 0x02A8 (0x0004) [0x0000000000002000] [0x00200000] (CPF_Transient)
	uint32_t                                           bHasPendingGlobalReattach : 1;                 // 0x02A8 (0x0004) [0x0000000000002000] [0x00400000] (CPF_Transient)
	uint32_t                                           bEnableOnScreenDebugMessages : 1;              // 0x02A8 (0x0004) [0x0000000000044000] [0x00800000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bEnableOnScreenDebugMessagesDisplay : 1;       // 0x02A8 (0x0004) [0x0000000000002000] [0x01000000] (CPF_Transient)
	uint32_t                                           bSuppressMapWarnings : 1;                      // 0x02A8 (0x0004) [0x0000000000044000] [0x02000000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bCookSeparateSharedMPGameContent : 1;          // 0x02A8 (0x0004) [0x0000000000044000] [0x04000000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bUseRecastNavMesh : 1;                         // 0x02A8 (0x0004) [0x0000000000044000] [0x08000000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bDisableAILogging : 1;                         // 0x02A8 (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bUseNormalMapsForSimpleLightMaps : 1;          // 0x02A8 (0x0004) [0x0000000000044000] [0x20000000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bStartWithMatineeCapture : 1;                  // 0x02A8 (0x0004) [0x0000000000002000] [0x40000000] (CPF_Transient)
	uint32_t                                           bCompressMatineeCapture : 1;                   // 0x02A8 (0x0004) [0x0000000000002000] [0x80000000] (CPF_Transient)
	uint32_t                                           bLockReadOnlyLevels : 1;                       // 0x02AC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              MaxRMSDForCombiningMappings;                   // 0x02B0 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            ImageReflectionTextureSize;                    // 0x02B4 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                        // 0x02B8 (0x0010) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class TArray<struct FColor>                        LightComplexityColors;                         // 0x02C8 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class TArray<struct FLinearColor>                  ShaderComplexityColors;                        // 0x02D4 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	float                                              MaxPixelShaderAdditiveComplexityCount;         // 0x02E0 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              MinTextureDensity;                             // 0x02E4 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              IdealTextureDensity;                           // 0x02E8 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              MaxTextureDensity;                             // 0x02EC (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              MinLightMapDensity;                            // 0x02F0 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              IdealLightMapDensity;                          // 0x02F4 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              MaxLightMapDensity;                            // 0x02F8 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              RenderLightMapDensityGrayscaleScale;           // 0x02FC (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              RenderLightMapDensityColorScale;               // 0x0300 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	struct FLinearColor                                LightMapDensityVertexMappedColor;              // 0x0304 (0x0010) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	struct FLinearColor                                LightMapDensitySelectedColor;                  // 0x0314 (0x0010) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class TArray<struct FStatColorMapping>             StatColorMappings;                             // 0x0324 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   EditorBrushMaterial;                           // 0x0330 (0x0004) [0x0000000000000000]               
	class FString                                      EditorBrushMaterialName;                       // 0x0334 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                           // 0x0340 (0x0004) [0x0000000000000000]               
	class FString                                      DefaultPhysMaterialName;                       // 0x0344 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UPhysicalMaterial*                           LandscapeHolePhysMaterial;                     // 0x0350 (0x0004) [0x0000000000000000]               
	class FString                                      LandscapeHolePhysMaterialName;                 // 0x0354 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UApexDestructibleDamageParameters*           ApexDamageParams;                              // 0x0360 (0x0004) [0x0000000000000000]               
	class FString                                      ApexDamageParamsName;                          // 0x0364 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   TerrainErrorMaterial;                          // 0x0370 (0x0004) [0x0000000000000000]               
	class FString                                      TerrainErrorMaterialName;                      // 0x0374 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	int32_t                                            TerrainMaterialMaxTextureCount;                // 0x0380 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            TerrainTessellationCheckCount;                 // 0x0384 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              TerrainTessellationCheckDistance;              // 0x0388 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class UClass*                                      OnlineSubsystemClass;                          // 0x038C (0x0004) [0x0000000000000000]               
	class FString                                      DefaultOnlineSubsystemName;                    // 0x0390 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UPostProcessChain*                           DefaultPostProcess;                            // 0x039C (0x0004) [0x0000000000000000]               
	class FString                                      DefaultPostProcessName;                        // 0x03A0 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;              // 0x03AC (0x0004) [0x0000000000000000]               
	class FString                                      ThumbnailSkeletalMeshPostProcessName;          // 0x03B0 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;            // 0x03BC (0x0004) [0x0000000000000000]               
	class FString                                      ThumbnailParticleSystemPostProcessName;        // 0x03C0 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                  // 0x03CC (0x0004) [0x0000000000000000]               
	class FString                                      ThumbnailMaterialPostProcessName;              // 0x03D0 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UPostProcessChain*                           DefaultUIScenePostProcess;                     // 0x03DC (0x0004) [0x0000000000000000]               
	class FString                                      DefaultUIScenePostProcessName;                 // 0x03E0 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UMaterial*                                   DefaultUICaretMaterial;                        // 0x03EC (0x0004) [0x0000000000000000]               
	class FString                                      DefaultUICaretMaterialName;                    // 0x03F0 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   SceneCaptureReflectActorMaterial;              // 0x03FC (0x0004) [0x0000000000000000]               
	class FString                                      SceneCaptureReflectActorMaterialName;          // 0x0400 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                 // 0x040C (0x0004) [0x0000000000000000]               
	class FString                                      SceneCaptureCubeActorMaterialName;             // 0x0410 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  ScreenDoorNoiseTexture;                        // 0x041C (0x0004) [0x0000000000000000]               
	class FString                                      ScreenDoorNoiseTextureName;                    // 0x0420 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  ImageGrainNoiseTexture;                        // 0x042C (0x0004) [0x0000000000000000]               
	class FString                                      ImageGrainNoiseTextureName;                    // 0x0430 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  RandomAngleTexture;                            // 0x043C (0x0004) [0x0000000000000000]               
	class FString                                      RandomAngleTextureName;                        // 0x0440 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  RandomNormalTexture;                           // 0x044C (0x0004) [0x0000000000000000]               
	class FString                                      RandomNormalTextureName;                       // 0x0450 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  RandomMirrorDiscTexture;                       // 0x045C (0x0004) [0x0000000000000000]               
	class FString                                      RandomMirrorDiscTextureName;                   // 0x0460 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture*                                    WeightMapPlaceholderTexture;                   // 0x046C (0x0004) [0x0000000000000000]               
	class FString                                      WeightMapPlaceholderTextureName;               // 0x0470 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  LightMapDensityTexture;                        // 0x047C (0x0004) [0x0000000000000000]               
	class FString                                      LightMapDensityTextureName;                    // 0x0480 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  LightMapDensityNormal;                         // 0x048C (0x0004) [0x0000000000000000]               
	class FString                                      LightMapDensityNormalName;                     // 0x0490 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  SMAASearchTexture;                             // 0x049C (0x0004) [0x0000000000000000]               
	class FString                                      SMAASearchTextureName;                         // 0x04A0 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class UTexture2D*                                  SMAAAreaTexture;                               // 0x04AC (0x0004) [0x0000000000000000]               
	class FString                                      SMAAAreaTextureName;                           // 0x04B0 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class USoundNodeWave*                              DefaultSound;                                  // 0x04BC (0x0004) [0x0000000000000000]               
	class FString                                      DefaultSoundName;                              // 0x04C0 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	float                                              TimeBetweenPurgingPendingKillObjects;          // 0x04CC (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	class UClient*                                     Client;                                        // 0x04D0 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class ULocalPlayer*>                  GamePlayers;                                   // 0x04D4 (0x000C) [0x0000000000500000] (CPF_NeedCtorLink)
	class UGameViewportClient*                         GameViewport;                                  // 0x04E0 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class FString>                        DeferredCommands;                              // 0x04E4 (0x000C) [0x0000000000500000] (CPF_NeedCtorLink)
	int32_t                                            TickCycles;                                    // 0x04F0 (0x0004) [0x0000000000000000]               
	int32_t                                            GameCycles;                                    // 0x04F4 (0x0004) [0x0000000000000000]               
	int32_t                                            ClientCycles;                                  // 0x04F8 (0x0004) [0x0000000000000000]               
	float                                              MaxSmoothedFrameRate;                          // 0x04FC (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MinSmoothedFrameRate;                          // 0x0500 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            NumPawnsAllowedToBeSpawnedInAFrame;            // 0x0504 (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FPointer                                    RemoteControlExec;                             // 0x0508 (0x0004) [0x0000000000001000] (CPF_Native)  
	struct FPointer                                    MobileMaterialEmulator;                        // 0x050C (0x0004) [0x0000000000001000] (CPF_Native)  
	struct FColor                                      C_WorldBox;                                    // 0x0510 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_BrushWire;                                   // 0x0514 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_AddWire;                                     // 0x0518 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_SubtractWire;                                // 0x051C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_SemiSolidWire;                               // 0x0520 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_NonSolidWire;                                // 0x0524 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_WireBackground;                              // 0x0528 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_ScaleBoxHi;                                  // 0x052C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_VolumeCollision;                             // 0x0530 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_BSPCollision;                                // 0x0534 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_OrthoBackground;                             // 0x0538 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_Volume;                                      // 0x053C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      C_BrushShape;                                  // 0x0540 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StreamingDistanceFactor;                       // 0x0544 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      ScoutClassName;                                // 0x0548 (0x000C) [0x0000000000404002] (CPF_Const | CPF_Config | CPF_NeedCtorLink)
	ETransitionType                                    TransitionType;                                // 0x0554 (0x0001) [0x0000000000000000]               
	class FString                                      TransitionDescription;                         // 0x0558 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      TransitionGameType;                            // 0x0564 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              MeshLODRange;                                  // 0x0570 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CameraRotationThreshold;                       // 0x0574 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              CameraTranslationThreshold;                    // 0x0578 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PrimitiveProbablyVisibleTime;                  // 0x057C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PercentUnoccludedRequeries;                    // 0x0580 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              MaxOcclusionPixelsFraction;                    // 0x0584 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxFluidNumVerts;                              // 0x0588 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              FluidSimulationTimeLimit;                      // 0x058C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxParticleResize;                             // 0x0590 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxParticleResizeWarn;                         // 0x0594 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxParticleVertexMemory;                       // 0x0598 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxParticleSpriteCount;                        // 0x059C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MaxParticleSubUVCount;                         // 0x05A0 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            BeginUPTryCount;                               // 0x05A4 (0x0004) [0x0000000000004000] (CPF_Config)  
	class TArray<struct FDropNoteInfo>                 PendingDroppedNotes;                           // 0x05A8 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      DynamicCoverMeshComponentName;                 // 0x05B4 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	float                                              NetClientTicksPerSecond;                       // 0x05C0 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              MaxTrackedOcclusionIncrement;                  // 0x05C4 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              TrackedOcclusionStepSize;                      // 0x05C8 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	struct FLinearColor                                DefaultSelectedMaterialColor;                  // 0x05CC (0x0010) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	struct FLinearColor                                DefaultHoveredMaterialColor;                   // 0x05DC (0x0010) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	struct FLinearColor                                SelectedMaterialColor;                         // 0x05EC (0x0010) [0x0000000000002000] (CPF_Transient)
	struct FLinearColor                                UnselectedMaterialColor;                       // 0x05FC (0x0010) [0x0000000000002000] (CPF_Transient)
	class TArray<class FName>                          IgnoreSimulatedFuncWarnings;                   // 0x060C (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	int32_t                                            ScreenSaverInhibitorSemaphore;                 // 0x0618 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FPointer                                    ScreenSaverInhibitor;                          // 0x061C (0x0004) [0x0000000000002000] (CPF_Transient)
	class UTranslationContext*                         GlobalTranslationContext;                      // 0x0620 (0x0004) [0x0000000000000000]               
	struct FDouble                                     LoadingMovieStartTime;                         // 0x0624 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class FString                                      MatineeCaptureName;                            // 0x062C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      MatineePackageCaptureName;                     // 0x0638 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FString                                      VisibleLevelsForMatineeCapture;                // 0x0644 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            MatineeCaptureFPS;                             // 0x0650 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MatineeCaptureType;                            // 0x0654 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Engine");
		}

		return uClassPointer;
	};

	static void LaunchURL(const class FString& URL);
	static bool BasicLoadObject(class UObject* Obj, const class FString& PathName, bool bIsSaveGame, int32_t Version);
	static bool BasicSaveObject(class UObject* Obj, const class FString& PathName, bool bIsSaveGame, int32_t Version, bool optionalBEncrypt);
	void AddTextureStreamingSlaveLoc(const struct FVector& InLoc, float BoostFactor, bool bOverrideLocation, float OverrideDuration);
	static class UPostProcessChain* GetWorldPostProcessChain();
	static class UPostProcessChain* GetDefaultPostProcessChain();
	static class UEngine* GetEngine();
	static bool IsRealDStereoEnabled();
	static void AddOverlayWrapped(class UFont* Font, const class FString& Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth);
	static void AddOverlay(class UFont* Font, const class FString& Text, float X, float Y, float ScaleX, float ScaleY, bool bIsCentered);
	static void RemoveAllOverlays();
	static void StopMovie(bool bDelayStopUntilGameHasRendered);
	static bool PlayLoadMapMovie();
	static class FString GetLastMovieName();
	static class UAudioDevice* GetAudioDevice();
	static bool IsUsingES2Renderer();
	static bool IsStereoscopic3D();
	static bool IsSplitScreen();
	static class UFont* GetAdditionalFont(int32_t AdditionalFontIndex);
	static class UFont* GetSubtitleFont();
	static class UFont* GetLargeFont();
	static class UFont* GetMediumFont();
	static class UFont* GetSmallFont();
	static class UFont* GetTinyFont();
	static bool HasNetworkConnection();
	static class FString GetDevicePushNotificationToken();
	static float GetOSVersion();
	static class FString GetDeviceUUID();
	static class FString GetBuildDate();
	static class AWorldInfo* GetCurrentWorldInfo();
	static bool IsGame();
	static bool IsEditor();
};

// Class Engine.GameEngine
// 0x0168 (0x0658 - 0x07C0)
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                 // 0x0658 (0x0004) [0x0000000000000000]               
	class FString                                      PendingLevelPlayerControllerClassName;         // 0x065C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FURL                                        LastURL;                                       // 0x0668 (0x0044) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FURL                                        LastRemoteURL;                                 // 0x06AC (0x0044) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        ServerActors;                                  // 0x06F0 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      TravelURL;                                     // 0x06FC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                            TravelType;                                    // 0x0708 (0x0001) [0x0000000000000000]               
	uint32_t                                           bWorldWasLoadedThisTick : 1;                   // 0x070C (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           bCheckForMovieCapture : 1;                     // 0x070C (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bTriggerPostLoadMap : 1;                       // 0x070C (0x0004) [0x0000000000002002] [0x00000004] (CPF_Const | CPF_Transient)
	uint32_t                                           bStartedLoadMapMovie : 1;                      // 0x070C (0x0004) [0x0000000000002002] [0x00000008] (CPF_Const | CPF_Transient)
	uint32_t                                           bShouldCommitPendingMapChange : 1;             // 0x070C (0x0004) [0x0000000000000002] [0x00000010] (CPF_Const)
	uint32_t                                           bClearAnimSetLinkupCachesOnLoadMap : 1;        // 0x070C (0x0004) [0x0000000000004000] [0x00000020] (CPF_Config)
	uint32_t                                           bEnableSecondaryDisplay : 1;                   // 0x070C (0x0004) [0x0000000000004000] [0x00000040] (CPF_Config)
	uint32_t                                           bEnableSecondaryViewport : 1;                  // 0x070C (0x0004) [0x0000000000004000] [0x00000080] (CPF_Config)
	class UOnlineSubsystem*                            OnlineSubsystem;                               // 0x0710 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UGamePadLightbarSubsystem*                   GamePadLightbarSubsystem;                      // 0x0714 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UDownloadableContentEnumerator*              DLCEnumerator;                                 // 0x0718 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class FString                                      DownloadableContentEnumeratorClassName;        // 0x071C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UDownloadableContentManager*                 DLCManager;                                    // 0x0728 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class FString                                      DownloadableContentManagerClassName;           // 0x072C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<class FName>                          LevelsToLoadForPendingMapChange;               // 0x0738 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class ULevel*>                        LoadedLevelsForPendingMapChange;               // 0x0744 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      PendingMapChangeFailureDescription;            // 0x0750 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	float                                              MaxDeltaTime;                                  // 0x075C (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      SecondaryViewportClientClassName;              // 0x0760 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<class UScriptViewportClient*>         SecondaryViewportClients;                      // 0x076C (0x000C) [0x0000000000500000] (CPF_NeedCtorLink)
	class TArray<struct FPointer>                      SecondaryViewportFrames;                       // 0x0778 (0x000C) [0x0000000000500000] (CPF_NeedCtorLink)
	class TArray<struct FLevelStreamingStatus>         PendingLevelStreamingStatusUpdates;            // 0x0784 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class UObjectReferencer*>             ObjectReferencers;                             // 0x0790 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FFullyLoadedPackagesInfo>      PackagesToFullyLoad;                           // 0x079C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FNamedNetDriver>               NamedNetDrivers;                               // 0x07A8 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FAnimTag>                      AnimTags;                                      // 0x07B4 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameEngine");
		}

		return uClassPointer;
	};

	static bool HasSecondaryScreenActive();
	static class UDownloadableContentManager* GetDLCManager();
	static class UDownloadableContentEnumerator* GetDLCEnumerator();
	static class UOnlineSubsystem* GetOnlineSubsystem();
	void DestroyNamedNetDriver(const class FName& NetDriverName);
	bool CreateNamedNetDriver(const class FName& NetDriverName);
};

// Class Engine.EngineBaseTypes
// 0x0000 (0x003C - 0x003C)
class UEngineBaseTypes : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.EngineBaseTypes");
		}

		return uClassPointer;
	};

};

// Class Engine.Brush
// 0x0024 (0x01C8 - 0x01EC)
class ABrush : public AActor
{
public:
	ECsgOper                                           CsgOper;                                       // 0x01C8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      BrushColor;                                    // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            PolyFlags;                                     // 0x01D0 (0x0004) [0x0000000000000000]               
	uint32_t                                           bColored : 1;                                  // 0x01D4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSolidWhenSelected : 1;                        // 0x01D4 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bPlaceableFromClassBrowser : 1;                // 0x01D4 (0x0004) [0x0000000000000000] [0x00000004] 
	class UModel*                                      Brush;                                         // 0x01D8 (0x0004) [0x000000000000000A] (CPF_Const | CPF_ExportObject)
	class UBrushComponent*                             BrushComponent;                                // 0x01DC (0x0004) [0x00000000040A000A] (CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class TArray<struct FGeomSelection>                SavedSelections;                               // 0x01E0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Brush");
		}

		return uClassPointer;
	};

};

// Class Engine.BrushShape
// 0x0000 (0x01EC - 0x01EC)
class ABrushShape : public ABrush
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.BrushShape");
		}

		return uClassPointer;
	};

};

// Class Engine.Volume
// 0x0008 (0x01EC - 0x01F4)
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                               // 0x01EC (0x0004) [0x0000000000000000]               
	uint32_t                                           bForcePawnWalk : 1;                            // 0x01F0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bProcessAllActors : 1;                         // 0x01F0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPawnsOnly : 1;                                // 0x01F0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Volume");
		}

		return uClassPointer;
	};

	void eventProcessActorSetVolume(class AActor* Other);
	void eventCollisionChanged();
	void OnToggle(class USeqAct_Toggle* Action);
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void eventPostBeginPlay();
	bool EncompassesPoint(const struct FVector& Loc);
	bool Encompasses(class AActor* Other);
};

// Class Engine.BlockingVolume
// 0x0004 (0x01F4 - 0x01F8)
class ABlockingVolume : public AVolume
{
public:
	uint32_t                                           bBlockCamera : 1;                              // 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.BlockingVolume");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class Engine.DynamicBlockingVolume
// 0x0004 (0x01F8 - 0x01FC)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x01F8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicBlockingVolume");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord& outRecord);
	void eventPostBeginPlay();
};

// Class Engine.CullDistanceVolume
// 0x0010 (0x01F4 - 0x0204)
class ACullDistanceVolume : public AVolume
{
public:
	class TArray<struct FCullDistanceSizePair>         CullDistances;                                 // 0x01F4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bEnabled : 1;                                  // 0x0200 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CullDistanceVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelGridVolume
// 0x0088 (0x01F4 - 0x027C)
class ALevelGridVolume : public AVolume
{
public:
	class FString                                      LevelGridVolumeName;                           // 0x01F4 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	ELevelGridCellShape                                CellShape;                                     // 0x0200 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            Subdivisions[3];                               // 0x0204 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LoadingDistance;                               // 0x0210 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              KeepLoadedRange;                               // 0x0214 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FKConvexElem                                CellConvexElem;                                // 0x0218 (0x0064) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelGridVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelStreamingVolume
// 0x0018 (0x01F4 - 0x020C)
class ALevelStreamingVolume : public AVolume
{
public:
	class TArray<class ULevelStreaming*>               StreamingLevels;                               // 0x01F4 (0x000C) [0x0000000001420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink)
	uint32_t                                           bEditorPreVisOnly : 1;                         // 0x0200 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDisabled : 1;                                 // 0x0200 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bTestDistanceToVolume : 1;                     // 0x0200 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	EStreamingVolumeUsage                              StreamingUsage;                                // 0x0204 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EStreamingVolumeUsage                              Usage;                                         // 0x0205 (0x0001) [0x0000000020000000]  CPF_Deprecated)
	float                                              TestVolumeDistance;                            // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelStreamingVolume");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord& outRecord);
	void OnToggle(class USeqAct_Toggle* Action);
};

// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x01F4 - 0x01F4)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightmassCharacterIndirectDetailVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.LightmassImportanceVolume
// 0x0000 (0x01F4 - 0x01F4)
class ALightmassImportanceVolume : public AVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightmassImportanceVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.MassiveLODOverrideVolume
// 0x0000 (0x01F4 - 0x01F4)
class AMassiveLODOverrideVolume : public AVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MassiveLODOverrideVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.PathBlockingVolume
// 0x0000 (0x01F4 - 0x01F4)
class APathBlockingVolume : public AVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PathBlockingVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.PhysicsVolume
// 0x0040 (0x01F4 - 0x0234)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                  // 0x01F4 (0x000C) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           bVelocityAffectsWalking : 1;                   // 0x0200 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPainCausing : 1;                              // 0x0200 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAIShouldIgnorePain : 1;                       // 0x0200 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bEntryPain : 1;                                // 0x0200 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           BACKUP_bPainCausing : 1;                       // 0x0200 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bDestructive : 1;                              // 0x0200 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bNoInventory : 1;                              // 0x0200 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bMoveProjectiles : 1;                          // 0x0200 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bBounceVelocity : 1;                           // 0x0200 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bNeutralZone : 1;                              // 0x0200 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bCrowdAgentsPlayDeathAnim : 1;                 // 0x0200 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bPhysicsOnContact : 1;                         // 0x0200 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bWaterVolume : 1;                              // 0x0200 (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              GroundFriction;                                // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TerminalVelocity;                              // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DamagePerSec;                                  // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      DamageType;                                    // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Priority;                                      // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FluidFriction;                                 // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PainInterval;                                  // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RigidBodyDamping;                              // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDampingForce;                               // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AInfo*                                       PainTimer;                                     // 0x0228 (0x0004) [0x0000000000000000]               
	class AController*                                 DamageInstigator;                              // 0x022C (0x0004) [0x0000000000000000]               
	class APhysicsVolume*                              NextPhysicsVolume;                             // 0x0230 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PhysicsVolume");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct APhysicsVolume_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct APhysicsVolume_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
	void OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action);
	void NotifyPawnBecameViewTarget(class APawn* P, class APlayerController* PC);
	void ModifyPlayer(class APawn* PlayerPawn);
	void CausePainTo(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void TimerPop(class AVolumeTimer* T);
	void eventCollisionChanged();
	void OnToggle(class USeqAct_Toggle* inAction);
	void eventPawnLeavingVolume(class APawn* Other);
	void eventPawnEnteredVolume(class APawn* Other);
	void eventActorLeavingVolume(class AActor* Other);
	void eventActorEnteredVolume(class AActor* Other);
	void eventPhysicsChangedFor(class AActor* Other);
	void Reset();
	void eventPostBeginPlay();
	struct FVector GetZoneVelocityForActor(class AActor* TheActor);
	float GetGravityZ();
};

// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0234 - 0x0234)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		}

		return uClassPointer;
	};

	void eventDestroyed();
};

// Class Engine.GravityVolume
// 0x0004 (0x0234 - 0x0238)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                      // 0x0234 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GravityVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.LadderVolume
// 0x0034 (0x0234 - 0x0268)
class ALadderVolume : public APhysicsVolume
{
public:
	struct FRotator                                    WallDir;                                       // 0x0234 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     LookDir;                                       // 0x0240 (0x000C) [0x0000000000000000]               
	struct FVector                                     ClimbDir;                                      // 0x024C (0x000C) [0x0000000000000000]               
	class ALadder*                                     LadderList;                                    // 0x0258 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bNoPhysicalLadder : 1;                         // 0x025C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAutoPath : 1;                                 // 0x025C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAllowLadderStrafing : 1;                      // 0x025C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class APawn*                                       PendingClimber;                                // 0x0260 (0x0004) [0x0000000000000000]               
	class UArrowComponent*                             WallDirArrow;                                  // 0x0264 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LadderVolume");
		}

		return uClassPointer;
	};

	void eventPhysicsChangedFor(class AActor* Other);
	void eventPawnLeavingVolume(class APawn* P);
	void eventPawnEnteredVolume(class APawn* P);
	bool InUse(class APawn* Ignored);
	void eventPostBeginPlay();
};

// Class Engine.PortalVolume
// 0x000C (0x01F4 - 0x0200)
class APortalVolume : public AVolume
{
public:
	class TArray<class APortalTeleporter*>             Portals;                                       // 0x01F4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PortalVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.PostProcessVolume
// 0x0160 (0x01F4 - 0x0354)
class APostProcessVolume : public AVolume
{
public:
	float                                              Priority;                                      // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOverrideWorldPostProcessChain : 1;            // 0x01F8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnabled : 1;                                  // 0x01F8 (0x0004) [0x0000000000000021] [0x00000002] (CPF_Edit | CPF_Net)
	struct FPostProcessSettings                        Settings;                                      // 0x01FC (0x0154) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class APostProcessVolume*                          NextLowerPriorityVolume;                       // 0x0350 (0x0004) [0x0000000001002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PostProcessVolume");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0018 (0x01F4 - 0x020C)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	class TArray<class AActor*>                        OverrideVisibleActors;                         // 0x01F4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class AActor*>                        OverrideInvisibleActors;                       // 0x0200 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PrecomputedVisibilityOverrideVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x01F4 - 0x01F4)
class APrecomputedVisibilityVolume : public AVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PrecomputedVisibilityVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.ReverbVolume
// 0x0040 (0x01F4 - 0x0234)
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                      // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnabled : 1;                                  // 0x01F8 (0x0004) [0x0000000000000021] [0x00000001] (CPF_Edit | CPF_Net)
	struct FReverbSettings                             Settings;                                      // 0x01FC (0x0010) [0x0000000000000001] (CPF_Edit)    
	struct FInteriorSettings                           AmbientZoneSettings;                           // 0x020C (0x0024) [0x0000000000000001] (CPF_Edit)    
	class AReverbVolume*                               NextLowerPriorityVolume;                       // 0x0230 (0x0004) [0x0000000001002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ReverbVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.TriggerVolume
// 0x0000 (0x01F4 - 0x01F4)
class ATriggerVolume : public AVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TriggerVolume");
		}

		return uClassPointer;
	};

	bool StopsProjectile(class AProjectile* P);
	void eventPostBeginPlay();
};

// Class Engine.DroppedPickup
// 0x0010 (0x01C8 - 0x01D8)
class ADroppedPickup : public AActor
{
public:
	class AInventory*                                  Inventory;                                     // 0x01C8 (0x0004) [0x0000000000000000]               
	class UClass*                                      InventoryClass;                                // 0x01CC (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	class ANavigationPoint*                            PickupCache;                                   // 0x01D0 (0x0004) [0x0000000000000000]               
	uint32_t                                           bFadeOut : 1;                                  // 0x01D4 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DroppedPickup");
		}

		return uClassPointer;
	};

	void RecheckValidTouch();
	void PickedUpBy(class APawn* P);
	void GiveTo(class APawn* P);
	void eventLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	float DetourWeight(class APawn* Other, float PathWeight);
	void eventEncroachedBy(class AActor* Other);
	void eventSetPickupParticles(class UParticleSystemComponent* PickupParticles);
	void eventSetPickupMesh(class UPrimitiveComponent* PickupMesh);
	void Reset();
	void eventReplicatedEvent(const class FName& VarName);
	void eventDestroyed();
	void RemoveFromNavigation();
	void AddToNavigation();
};

// Class Engine.DynamicSMActor
// 0x003C (0x01C8 - 0x0204)
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                           // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x01CC (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class UStaticMesh*                                 ReplicatedMesh;                                // 0x01D0 (0x0004) [0x0000000000002020] (CPF_Net | CPF_Transient | CPF_RepNotify)
	class UMaterialInterface*                          ReplicatedMaterial0;                           // 0x01D4 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	class UMaterialInterface*                          ReplicatedMaterial1;                           // 0x01D8 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bForceStaticDecals : 1;                        // 0x01DC (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bPawnCanBaseOn : 1;                            // 0x01DC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSafeBaseIfAsleep : 1;                         // 0x01DC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FVector                                     ReplicatedMeshTranslation;                     // 0x01E0 (0x000C) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	struct FRotator                                    ReplicatedMeshRotation;                        // 0x01EC (0x000C) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	struct FVector                                     ReplicatedMeshScale3D;                         // 0x01F8 (0x000C) [0x0000000000000020] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicSMActor");
		}

		return uClassPointer;
	};

	void SetLightEnvironmentToNotBeDynamic();
	void eventDetach(class AActor* Other);
	void eventAttach(class AActor* Other);
	bool CanBasePawn(class APawn* P);
	void SetStaticMesh(class UStaticMesh* NewMesh, const struct FVector& optionalNewTranslation, const struct FRotator& optionalNewRotation, const struct FVector& optionalNewScale3D);
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void OnSetMesh(class USeqAct_SetMesh* Action);
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
};

// Class Engine.InterpActor
// 0x002C (0x0204 - 0x0230)
class AInterpActor : public ADynamicSMActor
{
public:
	uint32_t                                           bShouldSaveForCheckpoint : 1;                  // 0x0204 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bMonitorMover : 1;                             // 0x0204 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bMonitorZVelocity : 1;                         // 0x0204 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bDestroyProjectilesOnEncroach : 1;             // 0x0204 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bContinueOnEncroachPhysicsObject : 1;          // 0x0204 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bStopOnEncroach : 1;                           // 0x0204 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bShouldShadowParentAllAttachedActors : 1;      // 0x0204 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bIsLift : 1;                                   // 0x0204 (0x0004) [0x0000000000000000] [0x00000080] 
	class ANavigationPoint*                            MyMarker;                                      // 0x0208 (0x0004) [0x0000000000000000]               
	float                                              MaxZVelocity;                                  // 0x020C (0x0004) [0x0000000000000000]               
	float                                              StayOpenTime;                                  // 0x0210 (0x0004) [0x0000000000000000]               
	class USoundCue*                                   OpenSound;                                     // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   OpeningAmbientSound;                           // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   OpenedSound;                                   // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   CloseSound;                                    // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   ClosingAmbientSound;                           // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   ClosedSound;                                   // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAudioComponent*                             AmbientSoundComponent;                         // 0x022C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpActor");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct AInterpActor_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct AInterpActor_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
	void ShutDown();
	void eventInterpolationChanged(class USeqAct_Interp* InterpAction);
	void eventInterpolationFinished(class USeqAct_Interp* InterpAction);
	void eventInterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void PlayMovingSound(bool bClosing);
	void FinishedOpen();
	void Restart();
	void eventDetach(class AActor* Other);
	void eventAttach(class AActor* Other);
	void eventRanInto(class AActor* Other);
	bool eventEncroachingOn(class AActor* Other);
	void eventPostBeginPlay();
};

// Class Engine.Emitter
// 0x000C (0x01C8 - 0x01D4)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                       // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x01CC (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bDestroyOnSystemFinish : 1;                    // 0x01D0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bPostUpdateTickGroup : 1;                      // 0x01D0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCurrentlyActive : 1;                          // 0x01D0 (0x0004) [0x0000000000000020] [0x00000004] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Emitter");
		}

		return uClassPointer;
	};

	void HideSelf();
	void ApplyCheckpointRecord(struct AEmitter_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct AEmitter_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
	void OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action);
	void SetActorParameter(const class FName& ParameterName, class AActor* Param);
	void SetExtColorParameter(const class FName& ParameterName, uint8_t Red, uint8_t Green, uint8_t Blue, uint8_t Alpha);
	void SetColorParameter(const class FName& ParameterName, const struct FColor& Param);
	void SetVectorParameter(const class FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const class FName& ParameterName, float Param);
	void ShutDown();
	void OnParticleEventGenerator(class USeqAct_ParticleEventGenerator* Action);
	void OnToggle(class USeqAct_Toggle* Action);
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
	void eventSetTemplate(class UParticleSystem* NewTemplate, bool optionalBDestroyOnFinish);
};

// Class Engine.EmitterPool
// 0x0058 (0x01C8 - 0x0220)
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                   // 0x01C8 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class TArray<class UParticleSystemComponent*>      PoolComponents;                                // 0x01CC (0x000C) [0x000000000448200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UParticleSystemComponent*>      ActiveComponents;                              // 0x01D8 (0x000C) [0x0000000004482008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	int32_t                                            MaxActiveEffects;                              // 0x01E4 (0x0004) [0x0000000000000000]               
	uint32_t                                           bLogPoolOverflow : 1;                          // 0x01E8 (0x0004) [0x0000000000044000] [0x00000001] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bLogPoolOverflowList : 1;                      // 0x01E8 (0x0004) [0x0000000000044000] [0x00000002] (CPF_Config | CPF_GlobalConfig)
	class TArray<struct FEmitterBaseInfo>              RelativePSCs;                                  // 0x01EC (0x000C) [0x0000000000482000] (CPF_Transient | CPF_Component | CPF_NeedCtorLink)
	float                                              SMC_MIC_ReductionTime;                         // 0x01F8 (0x0004) [0x0000000000000000]               
	float                                              SMC_MIC_CurrentReductionTime;                  // 0x01FC (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            IdealStaticMeshComponents;                     // 0x0200 (0x0004) [0x0000000000000000]               
	int32_t                                            IdealMaterialInstanceConstants;                // 0x0204 (0x0004) [0x0000000000000000]               
	class TArray<class UStaticMeshComponent*>          FreeSMComponents;                              // 0x0208 (0x000C) [0x000000000448200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UMaterialInstanceConstant*>     FreeMatInstConsts;                             // 0x0214 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.EmitterPool");
		}

		return uClassPointer;
	};

	class UParticleSystemComponent* SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate, bool optionalBSkipAutoActivate);
	class UParticleSystemComponent* SpawnEmitterMeshAttachment(class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, const class FName& AttachPointName, bool optionalBAttachToSocket, const struct FVector& optionalRelativeLoc, const struct FRotator& optionalRelativeRot);
	class UParticleSystemComponent* SpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& optionalSpawnRotation, class AActor* optionalAttachToActor, class AActor* optionalInInstigator, int32_t optionalMaxDLEPooledReuses, bool optionalBInheritScaleFromBase);
	class UParticleSystemComponent* GetPooledComponent(class UParticleSystem* EmitterTemplate, bool bAutoActivate);
	class UMaterialInstanceConstant* GetFreeMatInstConsts(bool optionalBCreateNewObject);
	void FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC);
	class UStaticMeshComponent* GetFreeStaticMeshComponent(bool optionalBCreateNewObject);
	void FreeStaticMeshComponents(class UParticleSystemComponent* PSC);
	void ReturnToPool(class UParticleSystemComponent* PSC);
	void ClearPoolComponents(bool optionalBClearActive);
	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
};

// Class Engine.HUD
// 0x0288 (0x01C8 - 0x0450)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                    // 0x01C8 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FColor                                      GreenColor;                                    // 0x01CC (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FColor                                      RedColor;                                      // 0x01D0 (0x0004) [0x0000000000000002] (CPF_Const)   
	class APlayerController*                           PlayerOwner;                                   // 0x01D4 (0x0004) [0x0000000000000000]               
	uint32_t                                           bLostFocusPaused : 1;                          // 0x01D8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bShowHUD : 1;                                  // 0x01D8 (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	uint32_t                                           bShowScores : 1;                               // 0x01D8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bShowDebugInfo : 1;                            // 0x01D8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bShowBadConnectionAlert : 1;                   // 0x01D8 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bShowDirectorInfoDebug : 1;                    // 0x01D8 (0x0004) [0x0000000000004000] [0x00000020] (CPF_Config)
	uint32_t                                           bShowDirectorInfoHUD : 1;                      // 0x01D8 (0x0004) [0x0000000000004000] [0x00000040] (CPF_Config)
	uint32_t                                           bMessageBeep : 1;                              // 0x01D8 (0x0004) [0x0000000000044000] [0x00000080] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bShowOverlays : 1;                             // 0x01D8 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              HudCanvasScale;                                // 0x01DC (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class TArray<class AActor*>                        PostRenderedActors;                            // 0x01E0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FConsoleMessage>               ConsoleMessages;                               // 0x01EC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FColor                                      ConsoleColor;                                  // 0x01F8 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            ConsoleMessageCount;                           // 0x01FC (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            ConsoleFontSize;                               // 0x0200 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MessageFontOffset;                             // 0x0204 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MaxHUDAreaMessageCount;                        // 0x0208 (0x0004) [0x0000000000000000]               
	struct FHudLocalizedMessage                        LocalMessages[8];                              // 0x020C (0x0200) [0x0000000000402001] (CPF_Edit | CPF_Transient | CPF_NeedCtorLink)
	float                                              ConsoleMessagePosX;                            // 0x040C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ConsoleMessagePosY;                            // 0x0410 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UCanvas*                                     Canvas;                                        // 0x0414 (0x0004) [0x0000000000000000]               
	float                                              LastHUDRenderTime;                             // 0x0418 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RenderDelta;                                   // 0x041C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SizeX;                                         // 0x0420 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SizeY;                                         // 0x0424 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CenterX;                                       // 0x0428 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CenterY;                                       // 0x042C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RatioX;                                        // 0x0430 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RatioY;                                        // 0x0434 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class FName>                          DebugDisplay;                                  // 0x0438 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class TArray<struct FKismetDrawTextInfo>           KismetTextInfo;                                // 0x0444 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.HUD");
		}

		return uClassPointer;
	};

	void eventOnLostFocusPause(bool bEnable);
	void NotifyBindPostProcessEffects();
	void PlayerOwnerDied();
	static class UFont* GetFontSizeIndex(int32_t FontSize);
	void DrawTextW(const class FString& Text, const struct FVector2D& Position, class UFont* TextFont, const struct FVector2D& FontScale, const struct FColor& TextColor, struct FFontRenderInfo& outRenderInfo);
	void DisplayKismetMessages();
	void DisplayLocalMessages();
	void DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY);
	void DrawMessage(int32_t I, float PosY, float& outDX, float& outDY);
	void GetScreenCoords(float PosY, float& outScreenX, float& outScreenY, struct FHudLocalizedMessage& outInMessage);
	void AddLocalizedMessage(int32_t Index, class UClass* InMessageClass, const class FString& CriticalString, int32_t Switch, float Position, float Lifetime, int32_t FontSize, const struct FColor& DrawColor, int32_t optionalMessageCount, class UObject* optionalOptionalObject);
	void LocalizedMessage(class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, const class FString& CriticalString, int32_t Switch, float Position, float Lifetime, int32_t FontSize, const struct FColor& DrawColor, class UObject* optionalOptionalObject);
	void AddConsoleMessage(const class FString& M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float optionalLifetime);
	bool ShouldShowConsoleMessage(const struct FConsoleMessage& InConsoleMessage);
	void DisplayConsoleMessages();
	void Message(class APlayerReplicationInfo* PRI, const class FString& msg, const class FName& MsgType, float optionalLifetime);
	void ClearMessage(struct FHudLocalizedMessage& outM);
	void DisplayBadConnectionAlert();
	void DrawHUD();
	void eventPostRender();
	void PreCalcValues();
	void DrawRoute(class APawn* Target);
	void ShowDebugInfo(float& outOut_YL, float& outOut_YPos);
	void ToggleDirectorInfoDebug();
	void ToggleDirectorInfoHUD();
	bool ShouldDisplayDebug(const class FName& DebugType);
	void ShowDebug(const class FName& optionalDebugType);
	void SetShowScores(bool bNewValue);
	void ShowScores();
	void ShowHUD();
	void ToggleHUD();
	void AddPostRenderedActor(class AActor* A);
	void RemovePostRenderedActor(class AActor* A);
	void DrawActorOverlays(const struct FVector& ViewPoint, const struct FRotator& ViewRotation);
	void eventPostBeginPlay();
	void Draw2DLine(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2, const struct FColor& LineColor);
	void Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor);
};

// Class Engine.AutoTestManager
// 0x009C (0x01C8 - 0x0264)
class AAutoTestManager : public AInfo
{
public:
	uint32_t                                           bAutomatedPerfTesting : 1;                     // 0x01C8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bAutoContinueToNextRound : 1;                  // 0x01C8 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bUsingAutomatedTestingMapList : 1;             // 0x01C8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bAutomatedTestingWithOpen : 1;                 // 0x01C8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bExitOnCyclesComplete : 1;                     // 0x01C8 (0x0004) [0x0000000000044000] [0x00000010] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bCheckingForFragmentation : 1;                 // 0x01C8 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bCheckingForMemLeaks : 1;                      // 0x01C8 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bDoingASentinelRun : 1;                        // 0x01C8 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bSentinelStreamingLevelStillLoading : 1;       // 0x01C8 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	int32_t                                            AutomatedPerfRemainingTime;                    // 0x01CC (0x0004) [0x0000000000000000]               
	int32_t                                            AutomatedTestingMapIndex;                      // 0x01D0 (0x0004) [0x0000000000000000]               
	class TArray<class FString>                        AutomatedMapTestingList;                       // 0x01D4 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	int32_t                                            NumAutomatedMapTestingCycles;                  // 0x01E0 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            NumberOfMatchesPlayed;                         // 0x01E4 (0x0004) [0x0000000000000000]               
	int32_t                                            NumMapListCyclesDone;                          // 0x01E8 (0x0004) [0x0000000000000000]               
	class FString                                      AutomatedTestingExecCommandToRunAtStartMatch;  // 0x01EC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      AutomatedMapTestingTransitionMap;              // 0x01F8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      SentinelTaskDescription;                       // 0x0204 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      SentinelTaskParameter;                         // 0x0210 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      SentinelTagDesc;                               // 0x021C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class APlayerController*                           SentinelPC;                                    // 0x0228 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FVector>                       SentinelTravelArray;                           // 0x022C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            SentinelNavigationIdx;                         // 0x0238 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SentinelIdx;                                   // 0x023C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumRotationsIncrement;                         // 0x0240 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            TravelPointsIncrement;                         // 0x0244 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumMinutesPerMap;                              // 0x0248 (0x0004) [0x0000000000004000] (CPF_Config)  
	class TArray<class FString>                        CommandsToRunAtEachTravelTheWorldNode;         // 0x024C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      CommandStringToExec;                           // 0x0258 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AutoTestManager");
		}

		return uClassPointer;
	};

	bool CheckForSentinelRun();
	void StartMatch();
	class FString GetNextAutomatedTestingMap();
	void IncrementNumberOfMatchesPlayed();
	void IncrementAutomatedTestingMapIndex();
	void CloseAutomatedMapTestTimer();
	void StartAutomatedMapTestTimerWorker();
	void eventStartAutomatedMapTestTimer();
	void DoMemoryTracking();
	void DoTimeBasedSentinelStatGathering();
	void DoSentinel_ViewDependentMemoryAtSpecificLocation(struct FVector& outInLocation, struct FRotator& outInRotation);
	void DoSentinel_PerfAtSpecificLocation(struct FVector& outInLocation, struct FRotator& outInRotation);
	void DoSentinel_MemoryAtSpecificLocation(const struct FVector& InLocation, const struct FRotator& InRotation);
	void GetTravelLocations(const class FName& LevelName, class APlayerController* PC, class TArray<struct FVector>& outTravelPoints);
	void HandlePerLoadedMapAudioStats();
	void DoSentinelActionPerLoadedMap();
	void DoTravelTheWorld();
	void EndSentinelRun(EAutomatedRunResult RunResult);
	void AddSentinelPerTimePeriodStats(const struct FVector& InLocation, const struct FRotator& InRotation);
	void BeginSentinelRun(const class FString& TaskDescription, const class FString& TaskParameter, const class FString& TagDesc);
	void InitializeOptions(const class FString& Options);
	void eventTimer();
	void eventPostBeginPlay();
};

// Class Engine.CoverGroup
// 0x0014 (0x01C8 - 0x01DC)
class ACoverGroup : public AInfo
{
public:
	class TArray<struct FActorReference>               CoverLinkRefs;                                 // 0x01C8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              AutoSelectRadius;                              // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AutoSelectHeight;                              // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CoverGroup");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void ToggleGroup();
	void DisableGroup();
	void EnableGroup();
};

// Class Engine.FileWriter
// 0x0018 (0x01C8 - 0x01E0)
class AFileWriter : public AInfo
{
public:
	struct FPointer                                    ArchivePtr;                                    // 0x01C8 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class FString                                      Filename;                                      // 0x01CC (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	EFWFileType                                        FileType;                                      // 0x01D8 (0x0001) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bFlushEachWrite : 1;                           // 0x01DC (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bWantsAsyncWrites : 1;                         // 0x01DC (0x0004) [0x0000000000000000] [0x00000002] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FileWriter");
		}

		return uClassPointer;
	};

	void eventDestroyed();
	void Logf(const class FString& logString);
	void CloseFile();
	bool OpenFile(const class FString& InFilename, EFWFileType optionalInFileType, const class FString& optionalInExtension, bool optionalBUnique, bool optionalBIncludeTimeStamp);
};

// Class Engine.FileLog
// 0x0000 (0x01E0 - 0x01E0)
class AFileLog : public AFileWriter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FileLog");
		}

		return uClassPointer;
	};

	void CloseLog();
	void OpenLog(const class FString& LogFilename, const class FString& optionalExtension, bool optionalBUnique);
};

// Class Engine.GameInfo
// 0x01B0 (0x01C8 - 0x0378)
class AGameInfo : public AInfo
{
public:
	uint32_t                                           bRestartLevel : 1;                             // 0x01C8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bPauseable : 1;                                // 0x01C8 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bTeamGame : 1;                                 // 0x01C8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bGameEnded : 1;                                // 0x01C8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bOverTime : 1;                                 // 0x01C8 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bDelayedStart : 1;                             // 0x01C8 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bWaitingToStartMatch : 1;                      // 0x01C8 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bChangeLevels : 1;                             // 0x01C8 (0x0004) [0x0000000000044000] [0x00000080] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bAlreadyChanged : 1;                           // 0x01C8 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bAdminCanPause : 1;                            // 0x01C8 (0x0004) [0x0000000000044000] [0x00000200] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bGameRestarted : 1;                            // 0x01C8 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bLevelChange : 1;                              // 0x01C8 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bKickLiveIdlers : 1;                           // 0x01C8 (0x0004) [0x0000000000044000] [0x00001000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bUsingArbitration : 1;                         // 0x01C8 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bHasArbitratedHandshakeBegun : 1;              // 0x01C8 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bNeedsEndGameHandshake : 1;                    // 0x01C8 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bIsEndGameHandshakeComplete : 1;               // 0x01C8 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bHasEndGameHandshakeBegun : 1;                 // 0x01C8 (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bFixedPlayerStart : 1;                         // 0x01C8 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bDoFearCostFallOff : 1;                        // 0x01C8 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bUseSeamlessTravel : 1;                        // 0x01C8 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bHasNetworkError : 1;                          // 0x01C8 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bRequiresPushToTalk : 1;                       // 0x01C8 (0x0004) [0x0000000000000002] [0x00400000] (CPF_Const)
	uint32_t                                           bIsStandbyCheckingEnabled : 1;                 // 0x01C8 (0x0004) [0x0000000000004000] [0x00800000] (CPF_Config)
	uint32_t                                           bIsStandbyCheckingOn : 1;                      // 0x01C8 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bHasStandbyCheatTriggered : 1;                 // 0x01C8 (0x0004) [0x0000000000000000] [0x02000000] 
	class FString                                      CauseEventCommand;                             // 0x01CC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      BugLocString;                                  // 0x01D8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      BugRotString;                                  // 0x01E4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class APlayerController*>             PendingArbitrationPCs;                         // 0x01F0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class APlayerController*>             ArbitrationPCs;                                // 0x01FC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              ArbitrationHandshakeTimeout;                   // 0x0208 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              GameDifficulty;                                // 0x020C (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            GoreLevel;                                     // 0x0210 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              GameSpeed;                                     // 0x0214 (0x0004) [0x0000000000000000]               
	class UClass*                                      DefaultPawnClass;                              // 0x0218 (0x0004) [0x0000000000000000]               
	class UClass*                                      HUDType;                                       // 0x021C (0x0004) [0x0000000000000000]               
	class UClass*                                      SecondaryHUDType;                              // 0x0220 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxSpectators;                                 // 0x0224 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MaxSpectatorsAllowed;                          // 0x0228 (0x0004) [0x0000000000000000]               
	int32_t                                            NumSpectators;                                 // 0x022C (0x0004) [0x0000000000000000]               
	int32_t                                            MaxPlayers;                                    // 0x0230 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MaxPlayersAllowed;                             // 0x0234 (0x0004) [0x0000000000000000]               
	int32_t                                            NumPlayers;                                    // 0x0238 (0x0004) [0x0000000000000000]               
	int32_t                                            NumBots;                                       // 0x023C (0x0004) [0x0000000000000000]               
	int32_t                                            NumTravellingPlayers;                          // 0x0240 (0x0004) [0x0000000000000000]               
	int32_t                                            CurrentID;                                     // 0x0244 (0x0004) [0x0000000000000000]               
	class FString                                      DefaultPlayerName;                             // 0x0248 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      GameName;                                      // 0x0254 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	float                                              FearCostFallOff;                               // 0x0260 (0x0004) [0x0000000000000000]               
	int32_t                                            GoalScore;                                     // 0x0264 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxLives;                                      // 0x0268 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            TimeLimit;                                     // 0x026C (0x0004) [0x0000000000004000] (CPF_Config)  
	class UClass*                                      DeathMessageClass;                             // 0x0270 (0x0004) [0x0000000000000000]               
	class UClass*                                      GameMessageClass;                              // 0x0274 (0x0004) [0x0000000000000000]               
	class AMutator*                                    BaseMutator;                                   // 0x0278 (0x0004) [0x0000000000000000]               
	class UClass*                                      AccessControlClass;                            // 0x027C (0x0004) [0x0000000000000000]               
	class AAccessControl*                              AccessControl;                                 // 0x0280 (0x0004) [0x0000000000000000]               
	class UClass*                                      BroadcastHandlerClass;                         // 0x0284 (0x0004) [0x0000000000000000]               
	class ABroadcastHandler*                           BroadcastHandler;                              // 0x0288 (0x0004) [0x0000000000000000]               
	class UClass*                                      AutoTestManagerClass;                          // 0x028C (0x0004) [0x0000000000000000]               
	class AAutoTestManager*                            MyAutoTestManager;                             // 0x0290 (0x0004) [0x0000000000000000]               
	class UClass*                                      PlayerControllerClass;                         // 0x0294 (0x0004) [0x0000000000000000]               
	class UClass*                                      PlayerReplicationInfoClass;                    // 0x0298 (0x0004) [0x0000000000000000]               
	class UClass*                                      GameReplicationInfoClass;                      // 0x029C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AGameReplicationInfo*                        GameReplicationInfo;                           // 0x02A0 (0x0004) [0x0000000000000000]               
	class ACrowdPopulationManagerBase*                 PopulationManager;                             // 0x02A4 (0x0004) [0x0000000000000000]               
	class UClass*                                      PopulationManagerClass;                        // 0x02A8 (0x0004) [0x0000000000000000]               
	float                                              MaxIdleTime;                                   // 0x02AC (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              MaxTimeMargin;                                 // 0x02B0 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              TimeMarginSlack;                               // 0x02B4 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              MinTimeMargin;                                 // 0x02B8 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class TArray<class APlayerReplicationInfo*>        InactivePRIArray;                              // 0x02BC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FScriptDelegate>               Pausers;                                       // 0x02C8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UOnlineSubsystem*                            OnlineSub;                                     // 0x02D4 (0x0004) [0x0000000000000000]               
	class UOnlineGameInterface*                        GameInterface_Object;                          // 0x02D8 (0x0004) [0x0000000000000000] 
	class UOnlineGameInterface*                        GameInterface_Interface;                       // 0x02DC (0x0004) [0x0000000000000000]               
	class UClass*                                      OnlineStatsWriteClass;                         // 0x02E0 (0x0004) [0x0000000000000000]               
	int32_t                                            LeaderboardId;                                 // 0x02E4 (0x0004) [0x0000000000000000]               
	int32_t                                            ArbitratedLeaderboardId;                       // 0x02E8 (0x0004) [0x0000000000000000]               
	class ACoverReplicator*                            CoverReplicatorBase;                           // 0x02EC (0x0004) [0x0000000000000000]               
	class UClass*                                      OnlineGameSettingsClass;                       // 0x02F0 (0x0004) [0x0000000000000002] (CPF_Const)   
	class FString                                      ServerOptions;                                 // 0x02F4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            AdjustedNetSpeed;                              // 0x0300 (0x0004) [0x0000000000000000]               
	float                                              LastNetSpeedUpdateTime;                        // 0x0304 (0x0004) [0x0000000000000000]               
	int32_t                                            TotalNetBandwidth;                             // 0x0308 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MinDynamicBandwidth;                           // 0x030C (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MaxDynamicBandwidth;                           // 0x0310 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              StandbyRxCheatTime;                            // 0x0314 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              StandbyTxCheatTime;                            // 0x0318 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            BadPingThreshold;                              // 0x031C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PercentMissingForRxStandby;                    // 0x0320 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PercentMissingForTxStandby;                    // 0x0324 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PercentForBadPing;                             // 0x0328 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              JoinInProgressStandbyWaitTime;                 // 0x032C (0x0004) [0x0000000000004000] (CPF_Config)  
	class UMaterial*                                   StreamingPauseIcon;                            // 0x0330 (0x0004) [0x0000000000000000]               
	class TArray<struct FGameClassShortName>           GameInfoClassAliases;                          // 0x0334 (0x000C) [0x0000000000404003] (CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink)
	class FString                                      DefaultGameType;                               // 0x0340 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FGameTypePrefix>               DefaultMapPrefixes;                            // 0x034C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FGameTypePrefix>               CustomMapPrefixes;                             // 0x0358 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	int32_t                                            AnimTreePoolSize;                              // 0x0364 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            REDCurrentViewType;                            // 0x0368 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FScriptDelegate                             __CanUnpause__Delegate;                        // 0x036C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameInfo");
		}

		return uClassPointer;
	};

	void ClearOnlineDelegates();
	void InitCrowdPopulationManager();
	void eventOnEngineHasLoaded();
	void OnDestroyOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	void eventStandbyCheatDetected(EStandbyType StandbyType);
	void EnableStandbyCheatDetection(bool bIsEnabled);
	void BeginBVT(const class FString& optionalTagDesc);
	bool CheckForSentinelRun();
	bool ShouldAutoContinueToNextRound();
	bool IsDoingASentinelRun();
	bool IsCheckingForMemLeaks();
	bool IsCheckingForFragmentation();
	bool IsAutomatedPerfTesting();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void DoTravelTheWorld();
	void TellClientsToTravelToSession(const class FName& SessionName, class UClass* SearchClass, uint8_t PlatformSpecificInfo[80]);
	void TellClientsPartyHostIsLeaving(const struct FUniqueNetId& PartyHostPlayerId);
	void TellClientsToReturnToPartyHost();
	void OnServerCreateComplete(const class FName& SessionName, bool bWasSuccessful);
	void RegisterServer();
	void OnLoginChange(uint8_t LocalUserNum);
	void OnLoginFailed(uint8_t LocalUserNum, EOnlineServerConnectionStatus ErrorCode);
	void ClearAutoLoginDelegates();
	bool ProcessServerLogin();
	void eventMatineeCancelled();
	void RecalculateSkillRating();
	void UpdateGameplayMuteList(class APlayerController* PC);
	void NotifyArbitratedMatchEnd();
	bool MatchIsInProgress();
	void ArbitrationRegistrationComplete(const class FName& SessionName, bool bWasSuccessful);
	void RegisterServerForArbitration();
	void StartArbitratedMatch();
	void StartArbitrationRegistration();
	void ProcessClientRegistrationCompletion(class APlayerController* PC, bool bWasSuccessful);
	void UpdateGameSettingsCounts();
	void SetSeamlessTravelViewTarget(class APlayerController* PC);
	void eventHandleSeamlessTravelPlayer(class AController*& outC);
	void UpdateGameSettings();
	void eventDestroyOnSeamlessTravel();
	void eventPostSeamlessTravel();
	void SwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void eventGetSeamlessTravelActorList(bool bToEntry, class TArray<class AActor*>& outActorList);
	void OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI);
	bool FindInactivePRI(class APlayerController* PC);
	void AddInactivePRI(class APlayerReplicationInfo* PRI, class APlayerController* PC);
	void eventPostCommitMapChange();
	void eventPreCommitMapChange(const class FString& PreviousMapName, const class FString& NextMapName);
	bool AllowPausing(class APlayerController* optionalPC);
	bool AllowCheats(class APlayerController* P);
	static bool AllowMutator(const class FString& MutatorClassName);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	bool PlayerCanRestartGame(class APlayerController* aPlayer);
	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	bool CanLeaveVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	void ModifyScoreKill(class AController* Killer, class AController* Other);
	void ScoreKill(class AController* Killer, class AController* Other);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	void ScoreObjective(class APlayerReplicationInfo* Scorer, int32_t Score);
	void AddObjectiveScore(class APlayerReplicationInfo* Scorer, int32_t Score);
	float RatePlayerStart(class APlayerStart* P, uint8_t Team, class AController* Player);
	class APlayerStart* ChoosePlayerStart(class AController* Player, uint8_t optionalInTeam);
	class ANavigationPoint* FindPlayerStart(class AController* Player, uint8_t optionalInTeam, const class FString& optionalIncomingName);
	bool ShouldSpawnAtStartSpot(class AController* Player);
	void EndLogging(const class FString& Reason);
	void GameEventsPoll();
	void EndOnlineGame();
	void PerformEndGameHandling();
	void EndGame(class APlayerReplicationInfo* Winner, const class FString& Reason);
	void WriteOnlinePlayerScores();
	void WriteOnlineStats();
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const class FString& Reason);
	bool CheckModifiedEndGame(class APlayerReplicationInfo* Winner, const class FString& Reason);
	void eventBroadcastLocalizedTeam(int32_t TeamIndex, class AActor* Sender, class UClass* Message, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	void eventBroadcastLocalized(class AActor* Sender, class UClass* Message, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	void BroadcastTeam(class AController* Sender, const class FString& msg, const class FName& optionalType);
	void eventBroadcast(class AActor* Sender, const class FString& msg, const class FName& optionalType);
	void RestartGame();
	bool GetTravelType();
	class FString GetNextMap();
	void SendPlayer(class APlayerController* aPlayer, const class FString& URL);
	uint8_t PickTeam(uint8_t Current, class AController* C);
	bool ChangeTeam(class AController* Other, int32_t N, bool bNewTeam);
	void ChangeName(class AController* Other, const class FString& S, bool bNameChange);
	void DiscardInventory(class APawn* Other, class AController* optionalKiller);
	bool PickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup);
	bool ShouldRespawn(class APickupFactory* Other);
	bool CheckRelevance(class AActor* Other);
	void ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int32_t& outDamage, struct FVector& outMomentum);
	bool CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget);
	void KickBan(const class FString& S);
	void Kick(const class FString& S);
	void BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType);
	bool PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType);
	void SetPlayerDefaults(class APawn* PlayerPawn);
	void Mutate(const class FString& MutateString, class APlayerController* Sender);
	void eventAddDefaultInventory(class APawn* P);
	void eventAcceptInventory(class APawn* PlayerPawn);
	void UnregisterPlayer(class APlayerController* PC);
	void Logout(class AController* Exiting);
	void eventPreExit();
	int32_t CalculatedNetSpeed();
	void UpdateNetSpeeds();
	void eventPostLogin(class APlayerController* NewPlayer);
	void UpdateBestNextHosts();
	int32_t BestNextHostSort(class APlayerController* A, class APlayerController* B);
	void GenericPlayerInitialization(class AController* C);
	void ReplicateStreamingStatus(class APlayerController* PC);
	class UClass* GetDefaultPlayerClass(class AController* C);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot);
	void RestartPlayer(class AController* NewPlayer);
	void StartBots();
	void StartHumans();
	void OnStartOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	void StartOnlineGame();
	void StartMatch();
	class APlayerController* eventLogin(const class FString& Portal, const class FString& Options, const struct FUniqueNetId& UniqueId, class FString& outErrorMessage);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	int32_t GetNextPlayerID();
	bool AtCapacity(bool bSpectator);
	static void RejectLogin(class UPlayer* InPlayer, const class FString& Error);
	static void ResumeLogin(class UPlayer* InPlayer);
	static class UPlayer* PauseLogin();
	void eventPreLogin(const class FString& Options, const class FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, class FString& outErrorMessage);
	bool RequiresPassword();
	class APlayerController* ProcessClientTravel(const struct FGuid& NextMapGuid, bool bSeamless, bool bAbsolute, class FString& outURL);
	void ProcessServerTravel(const class FString& URL, bool optionalBAbsolute);
	void RemoveMutator(class AMutator* MutatorToRemove);
	void AddMutator(const class FString& mutname, bool optionalBUserAdded);
	void eventNotifyPendingConnectionLost();
	void eventInitGame(const class FString& Options, class FString& outErrorMessage);
	static class UClass* eventSetGameType(const class FString& MapName, const class FString& Options, const class FString& Portal);
	static class FString eventGetDefaultGameClassPath(const class FString& MapName, const class FString& Options, const class FString& Portal);
	static int32_t GetIntOption(const class FString& Options, const class FString& ParseString, int32_t CurrentValue);
	static bool HasOption(const class FString& Options, const class FString& InKey);
	static class FString ParseOption(const class FString& Options, const class FString& InKey);
	static void GetKeyValue(const class FString& Pair, class FString& outKey, class FString& outValue);
	static bool GrabOption(class FString& outOptions, class FString& outResult);
	void SetGameSpeed(float T);
	void DebugPause();
	void ForceClearUnpauseDelegates(class AActor* PauseActor);
	void eventClearPause();
	bool SetPause(class APlayerController* PC, const struct FScriptDelegate& optionalCanUnpauseDelegate);
	bool CanUnpause();
	int32_t GetNumPlayers();
	class FString GetNetworkNumber();
	void InitGameReplicationInfo();
	void eventForceKickPlayer(class APlayerController* PC, const class FString& KickReason);
	void eventKickIdler(class APlayerController* PC);
	void eventGameEnding();
	void NotifyNavigationChanged(class ANavigationPoint* N);
	void DoNavFearCostFallOff();
	bool ShouldStartInCinematicMode(int32_t& outOutHidePlayer, int32_t& outOutHideHud, int32_t& outOutDisableMovement, int32_t& outOutDisableTurning, int32_t& outOutDisableInput);
	void eventTimer();
	void ResetLevel();
	bool ShouldReset(class AActor* ActorToReset);
	void Reset();
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void eventPostBeginPlay();
	class ACoverReplicator* GetCoverReplicator();
	void eventPreBeginPlay();
	bool GetMapCommonPackageName(class FString& outInFilename, class FString& outOutCommonPackageName);
	bool GetSupportedGameTypes(bool optionalBCheckExt, class FString& outInFilename, struct FGameTypePrefix& outOutGameType);
};

// Class Engine.Mutator
// 0x0014 (0x01C8 - 0x01DC)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                   // 0x01C8 (0x0004) [0x0000000000000000]               
	class TArray<class FString>                        GroupNames;                                    // 0x01CC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bUserAdded : 1;                                // 0x01D8 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Mutator");
		}

		return uClassPointer;
	};

	void NetDamage(int32_t OriginalDamage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int32_t& outDamage, struct FVector& outMomentum);
	void ScoreKill(class AController* Killer, class AController* Killed);
	void ScoreObjective(class APlayerReplicationInfo* Scorer, int32_t Score);
	bool PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	bool OverridePickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup, uint8_t& outBAllowPickup);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const class FString& Reason);
	bool HandleRestartGame();
	class ANavigationPoint* FindPlayerStart(class AController* Player, uint8_t optionalInTeam, const class FString& optionalIncomingName);
	void GetSeamlessTravelActorList(bool bToEntry, class TArray<class AActor*>& outActorList);
	void InitMutator(const class FString& Options, class FString& outErrorMessage);
	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	bool CanLeaveVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	void NotifyLogin(class AController* NewPlayer);
	void NotifyLogout(class AController* Exiting);
	bool CheckReplacement(class AActor* Other);
	bool CheckRelevance(class AActor* Other);
	bool IsRelevant(class AActor* Other);
	bool AlwaysKeep(class AActor* Other);
	void AddMutator(class AMutator* M);
	void ModifyPlayer(class APawn* Other);
	void ModifyLogin(class FString& outPortal, class FString& outOptions);
	void Mutate(const class FString& MutateString, class APlayerController* Sender);
	void eventDestroyed();
	bool MutatorIsAllowed();
	void eventPreBeginPlay();
};

// Class Engine.PotentialClimbWatcher
// 0x0000 (0x01C8 - 0x01C8)
class APotentialClimbWatcher : public AInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PotentialClimbWatcher");
		}

		return uClassPointer;
	};

	void eventTick(float DeltaTime);
};

// Class Engine.Route
// 0x001C (0x01C8 - 0x01E4)
class ARoute : public AInfo
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;         // 0x01C8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	ERouteType                                         RouteType;                                     // 0x01CC (0x0001) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FActorReference>               RouteList;                                     // 0x01D0 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              FudgeFactor;                                   // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            RouteIndexOffset;                              // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Route");
		}

		return uClassPointer;
	};

	int32_t MoveOntoRoutePath(class APawn* P, ERouteDirection optionalRouteDirection, float optionalDistFudgeFactor);
	int32_t ResolveRouteIndex(int32_t Idx, ERouteDirection RouteDirection, uint8_t& outOut_bComplete, uint8_t& outOut_bReverse);
};

// Class Engine.WindPointSource
// 0x0004 (0x01C8 - 0x01CC)
class AWindPointSource : public AInfo
{
public:
	class UWindPointSourceComponent*                   Component;                                     // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WindPointSource");
		}

		return uClassPointer;
	};

};

// Class Engine.Inventory
// 0x004C (0x01C8 - 0x0214)
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                     // 0x01C8 (0x0004) [0x0000000000000020] (CPF_Net)     
	class AInventoryManager*                           InvManager;                                    // 0x01CC (0x0004) [0x0000000000000020] (CPF_Net)     
	class FString                                      ItemName;                                      // 0x01D0 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bDropOnDeath : 1;                              // 0x01DC (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDelayedSpawn : 1;                             // 0x01DC (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bPredictRespawns : 1;                          // 0x01DC (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              RespawnTime;                                   // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDesireability;                              // 0x01E4 (0x0004) [0x0000000000000000]               
	class FString                                      PickupMessage;                                 // 0x01E8 (0x000C) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class USoundCue*                                   PickupSound;                                   // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      PickupForce;                                   // 0x01F8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UClass*                                      DroppedPickupClass;                            // 0x0204 (0x0004) [0x0000000000000000]               
	class UPrimitiveComponent*                         DroppedPickupMesh;                             // 0x0208 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UPrimitiveComponent*                         PickupFactoryMesh;                             // 0x020C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UParticleSystemComponent*                    DroppedPickupParticles;                        // 0x0210 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Inventory");
		}

		return uClassPointer;
	};

	static class FString GetLocalString(int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01);
	void DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity);
	bool DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void ItemRemovedFromInvManager();
	void ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate);
	void GivenTo(class APawn* thisPawn, bool optionalBDoNotActivate);
	void AnnouncePickup(class APawn* Other);
	void GiveTo(class APawn* Other);
	static float DetourWeight(class APawn* Other, float PathWeight);
	static float BotDesireability(class AActor* PickupHolder, class APawn* P, class AController* C);
	void eventDestroyed();
	class FString GetHumanReadableName();
};

// Class Engine.Weapon
// 0x00A4 (0x0214 - 0x02B8)
class AWeapon : public AInventory
{
public:
	uint8_t                                            CurrentFireMode;                               // 0x0214 (0x0001) [0x0000000000000000]               
	class TArray<class FName>                          FiringStatesArray;                             // 0x0218 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<EWeaponFireType>                      WeaponFireTypes;                               // 0x0224 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UClass*>                        WeaponProjectiles;                             // 0x0230 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<float>                                FireInterval;                                  // 0x023C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<float>                                Spread;                                        // 0x0248 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<float>                                InstantHitDamage;                              // 0x0254 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<float>                                InstantHitMomentum;                            // 0x0260 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UClass*>                        InstantHitDamageTypes;                         // 0x026C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              EquipTime;                                     // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PutDownTime;                                   // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FireOffset;                                    // 0x0280 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bWeaponPutDown : 1;                            // 0x028C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bCanThrow : 1;                                 // 0x028C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bWasOptionalSet : 1;                           // 0x028C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bWasDoNotActivate : 1;                         // 0x028C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bInstantHit : 1;                               // 0x028C (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bMeleeWeapon : 1;                              // 0x028C (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              WeaponRange;                                   // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMeshComponent*                              Mesh;                                          // 0x0294 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              DefaultAnimSpeed;                              // 0x0298 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Priority;                                      // 0x029C (0x0004) [0x0000000000004000] (CPF_Config)  
	class AAIController*                               AIController;                                  // 0x02A0 (0x0004) [0x0000000000000000] (CPF_ProtectedWrite)
	class TArray<uint8_t>                              ShouldFireOnRelease;                           // 0x02A4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              AIRating;                                      // 0x02B0 (0x0004) [0x0000000000000000]               
	float                                              CachedMaxRange;                                // 0x02B4 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Weapon");
		}

		return uClassPointer;
	};

	float GetTargetDistance();
	void CacheAIController();
	void WeaponIsDown();
	bool StillFiring(uint8_t FireMode);
	bool ShouldRefire();
	void NotifyWeaponFinishedFiring(uint8_t FireMode);
	void NotifyWeaponFired(uint8_t FireMode);
	void HandleFinishedFiring();
	bool TryPutDown();
	struct FVector eventGetPhysicalFireStartLoc(const struct FVector& optionalAimDir);
	struct FVector eventGetMuzzleLoc();
	void CustomFire();
	class AProjectile* ProjectileFire();
	void ProcessInstantHit(uint8_t FiringMode, const struct FImpactInfo& Impact, int32_t optionalNumHits);
	void InstantFire();
	static bool PassThroughDamage(class AActor* HitActor);
	struct FImpactInfo CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, const struct FVector& optionalExtent, class TArray<struct FImpactInfo>& outImpactList);
	class AActor* GetTraceOwner();
	float eventGetTraceRange();
	struct FRotator GetAdjustedAim(const struct FVector& StartFireLoc);
	void FireAmmunition();
	void FireModeUpdated(uint8_t FiringMode, bool bViaReplication);
	void SetCurrentFireMode(uint8_t FiringModeNum);
	void SendToFiringState(uint8_t FireModeNum);
	void ForceEndFire();
	void EndFire(uint8_t FireModeNum);
	void ServerStopFire(uint8_t FireModeNum);
	void StopFire(uint8_t FireModeNum);
	void BeginFire(uint8_t FireModeNum);
	void ServerStartFire(uint8_t FireModeNum);
	void StartFire(uint8_t FireModeNum);
	void ClientWeaponSet(bool bOptionalSet, bool optionalBDoNotActivate);
	void ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate);
	void DetachWeapon();
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const class FName& optionalSocketName);
	void ClearFlashLocation();
	void SetFlashLocation(const struct FVector& HitLocation);
	void ClearFlashCount();
	void IncrementFlashCount();
	void WeaponEmpty();
	bool DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void PutDownWeapon();
	void Activate();
	void TimeWeaponEquipping();
	void TimeWeaponPutDown();
	void RefireCheckTimer();
	void TimeWeaponFiring(uint8_t FireModeNum);
	float GetFireInterval(uint8_t FireModeNum);
	void StopFireEffects(uint8_t FireModeNum);
	void PlayFireEffects(uint8_t FireModeNum, const struct FVector& optionalHitLocation);
	void StopWeaponAnimation();
	void PlayWeaponAnimation(const class FName& Sequence, float fDesiredDuration, bool optionalBLoop, class USkeletalMeshComponent* optionalSkelMesh);
	class UAnimNodeSequence* GetWeaponAnimNodeSeq();
	bool FireOnRelease();
	bool CanAttack(class AActor* Other);
	float GetWeaponRating();
	float GetAIRating();
	float MaxRange();
	struct FRotator AddSpread(const struct FRotator& BaseAim);
	class UClass* GetProjectileClass();
	void ClearPendingFire(int32_t FireMode);
	void SetPendingFire(int32_t FireMode);
	bool PendingFire(int32_t FireMode);
	int32_t GetPendingFireLength();
	bool HasAnyAmmo();
	bool HasAmmo(uint8_t FireModeNum, int32_t optionalAmount);
	int32_t AddAmmo(int32_t Amount);
	void ConsumeAmmo(uint8_t FireModeNum);
	void GetWeaponDebug(class TArray<class FString>& outDebugInfo);
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	bool DenyClientWeaponSet();
	bool eventIsFiring();
	void ClientWeaponThrown();
	bool CanThrow();
	void DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity);
	bool DoOverridePrevWeapon();
	bool DoOverrideNextWeapon();
	void HolderDied();
	void ItemRemovedFromInvManager();
	void eventDestroyed();
};

// Class Engine.InventoryManager
// 0x001C (0x01C8 - 0x01E4)
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                // 0x01C8 (0x0004) [0x0000000000000020] (CPF_Net)     
	class AWeapon*                                     PendingWeapon;                                 // 0x01CC (0x0004) [0x0000000000000000]               
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                   // 0x01D0 (0x0004) [0x0000000000000000]               
	uint32_t                                           bMustHoldWeapon : 1;                           // 0x01D4 (0x0004) [0x0000000000000000] [0x00000001] 
	class TArray<int32_t>                              PendingFire;                                   // 0x01D8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InventoryManager");
		}

		return uClassPointer;
	};

	void UpdateController();
	void ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet, bool optionalBDoNotActivate);
	void ChangedWeapon();
	void ClearPendingWeapon();
	bool CancelWeaponChange();
	void SetPendingWeapon(class AWeapon* DesiredWeapon);
	void InternalSetCurrentWeapon(class AWeapon* DesiredWeapon);
	void ServerSetCurrentWeapon(class AWeapon* DesiredWeapon);
	void SetCurrentWeapon(class AWeapon* DesiredWeapon);
	void NextWeapon();
	void PrevWeapon();
	void SwitchToBestWeapon(bool optionalBForceADifferentWeapon);
	class AWeapon* GetBestWeapon(bool optionalBForceADifferentWeapon);
	float GetWeaponRatingFor(class AWeapon* W);
	void DrawHUD(class AHUD* H);
	void OwnerDied();
	void eventDiscardInventory();
	void RemoveFromInventory(class AInventory* ItemToRemove);
	bool AddInventory(class AInventory* NewItem, bool optionalBDoNotActivate);
	class AInventory* CreateInventory(class UClass* NewInventoryItemClass, bool optionalBDoNotActivate);
	class AInventory* eventFindInventoryType(class UClass* DesiredClass, bool optionalBAllowSubclass);
	bool HandlePickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void eventDestroyed();
	void SetupFor(class APawn* P);
	void InventoryActors(class UClass* BaseClass, class AInventory*& outInv);
	void ClearAllPendingFire(class AWeapon* InWeapon);
	bool IsPendingFire(class AWeapon* InWeapon, int32_t InFiringMode);
	void ClearPendingFire(class AWeapon* InWeapon, int32_t InFiringMode);
	void SetPendingFire(class AWeapon* InWeapon, int32_t InFiringMode);
	int32_t GetPendingFireLength(class AWeapon* InWeapon);
	void eventPostBeginPlay();
};

// Class Engine.Keypoint
// 0x0004 (0x01C8 - 0x01CC)
class AKeypoint : public AActor
{
public:
	class USpriteComponent*                            SpriteComp;                                    // 0x01C8 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Keypoint");
		}

		return uClassPointer;
	};

};

// Class Engine.TargetPoint
// 0x0008 (0x01CC - 0x01D4)
class ATargetPoint : public AKeypoint
{
public:
	class UTexture2D*                                  SpawnSpriteTexture;                            // 0x01CC (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	int32_t                                            SpawnRefCount;                                 // 0x01D0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TargetPoint");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialInstanceActor
// 0x0004 (0x01C8 - 0x01CC)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                       // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialInstanceActor");
		}

		return uClassPointer;
	};

};

// Class Engine.MatineeActor
// 0x00B4 (0x01C8 - 0x027C)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                  // 0x01C8 (0x0004) [0x0000000000000022] (CPF_Const | CPF_Net)
	uint32_t                                           bIsPlaying : 1;                                // 0x01CC (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net)
	uint32_t                                           bReversePlayback : 1;                          // 0x01CC (0x0004) [0x0000000000000020] [0x00000002] (CPF_Net)
	uint32_t                                           bPaused : 1;                                   // 0x01CC (0x0004) [0x0000000000000020] [0x00000004] (CPF_Net)
	uint32_t                                           AllAIGroupsInitialized : 1;                    // 0x01CC (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	float                                              PlayRate;                                      // 0x01D0 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              Position;                                      // 0x01D4 (0x0004) [0x0000000000000020] (CPF_Net)     
	class FName                                        AIGroupNames[10];                              // 0x01D8 (0x0050) [0x0000000000000020] (CPF_Net)     
	class APawn*                                       AIGroupPawns[10];                              // 0x0228 (0x0028) [0x0000000000000020] (CPF_Net)     
	int32_t                                            AIGroupInitStage[10];                          // 0x0250 (0x0028) [0x0000000000002000] (CPF_Transient)
	float                                              ClientSidePositionErrorTolerance;              // 0x0278 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MatineeActor");
		}

		return uClassPointer;
	};

	void CheckPriorityRefresh();
	void eventUpdate();
	void AddAIGroupActor(class UInterpGroupInstAI* AIGroupInst);
};

// Class Engine.NavigationPoint
// 0x00D8 (0x01C8 - 0x02A0)
class ANavigationPoint : public AActor
{
public:
	uint32_t                                           bEndPoint : 1;                                 // 0x01C8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bTransientEndPoint : 1;                        // 0x01C8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bHideEditorPaths : 1;                          // 0x01C8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bCanReach : 1;                                 // 0x01C8 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bBlocked : 1;                                  // 0x01C8 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bOneWayPath : 1;                               // 0x01C8 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bNeverUseStrafing : 1;                         // 0x01C8 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bAlwaysUseStrafing : 1;                        // 0x01C8 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bForceNoStrafing : 1;                          // 0x01C8 (0x0004) [0x0000000000000002] [0x00000100] (CPF_Const)
	uint32_t                                           bAutoBuilt : 1;                                // 0x01C8 (0x0004) [0x0000000000000002] [0x00000200] (CPF_Const)
	uint32_t                                           bSpecialMove : 1;                              // 0x01C8 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bNoAutoConnect : 1;                            // 0x01C8 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bNotBased : 1;                                 // 0x01C8 (0x0004) [0x0000000000000002] [0x00001000] (CPF_Const)
	uint32_t                                           bPathsChanged : 1;                             // 0x01C8 (0x0004) [0x0000000000000002] [0x00002000] (CPF_Const)
	uint32_t                                           bDestinationOnly : 1;                          // 0x01C8 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bSourceOnly : 1;                               // 0x01C8 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bSpecialForced : 1;                            // 0x01C8 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bMustBeReachable : 1;                          // 0x01C8 (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bBlockable : 1;                                // 0x01C8 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bFlyingPreferred : 1;                          // 0x01C8 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bMayCausePain : 1;                             // 0x01C8 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bAlreadyVisited : 1;                           // 0x01C8 (0x0004) [0x0000000000002000] [0x00200000] (CPF_Transient)
	uint32_t                                           bVehicleDestination : 1;                       // 0x01C8 (0x0004) [0x0000000000000001] [0x00400000] (CPF_Edit)
	uint32_t                                           bMakeSourceOnly : 1;                           // 0x01C8 (0x0004) [0x0000000000000001] [0x00800000] (CPF_Edit)
	uint32_t                                           bMustTouchToReach : 1;                         // 0x01C8 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bCanWalkOnToReach : 1;                         // 0x01C8 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bBuildLongPaths : 1;                           // 0x01C8 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bBlockedForVehicles : 1;                       // 0x01C8 (0x0004) [0x0000000000000001] [0x08000000] (CPF_Edit)
	uint32_t                                           bPreferredVehiclePath : 1;                     // 0x01C8 (0x0004) [0x0000000000000001] [0x10000000] (CPF_Edit)
	uint32_t                                           bHasCrossLevelPaths : 1;                       // 0x01C8 (0x0004) [0x0000000000000002] [0x20000000] (CPF_Const)
	uint32_t                                           bShouldSaveForCheckpoint : 1;                  // 0x01C8 (0x0004) [0x0000000000002000] [0x40000000] (CPF_Transient)
	struct FNavigationOctreeObject                     NavOctreeObject;                               // 0x01CC (0x0034) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class UReachSpec*>                    PathList;                                      // 0x0200 (0x000C) [0x0000000004620003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FActorReference>               EditorProscribedPaths;                         // 0x020C (0x000C) [0x0000000000600000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FActorReference>               EditorForcedPaths;                             // 0x0218 (0x000C) [0x0000000000600000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FActorReference>               Volumes;                                       // 0x0224 (0x000C) [0x0000000000420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink)
	int32_t                                            visitedWeight;                                 // 0x0230 (0x0004) [0x0000000000000000]               
	int32_t                                            bestPathWeight;                                // 0x0234 (0x0004) [0x0000000000000002] (CPF_Const)   
	class ANavigationPoint*                            nextNavigationPoint;                           // 0x0238 (0x0004) [0x0000000000000002] (CPF_Const)   
	class ANavigationPoint*                            nextOrdered;                                   // 0x023C (0x0004) [0x0000000000000002] (CPF_Const)   
	class ANavigationPoint*                            prevOrdered;                                   // 0x0240 (0x0004) [0x0000000000000002] (CPF_Const)   
	class ANavigationPoint*                            previousPath;                                  // 0x0244 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            Cost;                                          // 0x0248 (0x0004) [0x0000000000000000]               
	int32_t                                            ExtraCost;                                     // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TransientCost;                                 // 0x0250 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            FearCost;                                      // 0x0254 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FDebugNavCost>                 CostArray;                                     // 0x0258 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class ADroppedPickup*                              InventoryCache;                                // 0x0264 (0x0004) [0x0000000000000000]               
	float                                              InventoryDist;                                 // 0x0268 (0x0004) [0x0000000000000000]               
	float                                              LastDetourWeight;                              // 0x026C (0x0004) [0x0000000000000002] (CPF_Const)   
	class UCylinderComponent*                          CylinderComponent;                             // 0x0270 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FCylinder                                   MaxPathSize;                                   // 0x0274 (0x0008) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	struct FGuid                                       NavGuid;                                       // 0x027C (0x0010) [0x0000000000220003] (CPF_Edit | CPF_Const | CPF_EditConst)
	class USpriteComponent*                            GoodSprite;                                    // 0x028C (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class USpriteComponent*                            BadSprite;                                     // 0x0290 (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	int32_t                                            NetworkID;                                     // 0x0294 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	class APawn*                                       AnchoredPawn;                                  // 0x0298 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastAnchoredPawnTime;                          // 0x029C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavigationPoint");
		}

		return uClassPointer;
	};

	class FString eventGetDebugAbbrev();
	void ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
	void eventShutDown();
	void OnToggle(class USeqAct_Toggle* inAction);
	bool IsOnDifferentNetwork(class ANavigationPoint* Nav);
	static bool GetAllNavInRadius(class AActor* ChkActor, const struct FVector& ChkPoint, float Radius, bool optionalBSkipBlocked, int32_t optionalInNetworkID, const struct FCylinder& optionalMinSize, class TArray<class ANavigationPoint*>& outOut_NavList);
	static class ANavigationPoint* GetNearestNavToPoint(class AActor* ChkActor, const struct FVector& ChkPoint, class UClass* optionalRequiredClass, const class TArray<class ANavigationPoint*>& optionalExcludeList);
	static class ANavigationPoint* GetNearestNavToActor(class AActor* ChkActor, class UClass* optionalRequiredClass, const class TArray<class ANavigationPoint*>& optionalExcludeList, float optionalMinDist);
	bool ProceedWithMove(class APawn* Other);
	bool eventSuggestMovePreparation(class APawn* Other);
	float eventDetourWeight(class APawn* Other, float PathWeight);
	bool eventAccept(class AActor* Incoming, class AActor* Source);
	int32_t eventSpecialCost(class APawn* Seeker, class UReachSpec* Path);
	bool CanTeleport(class AActor* A);
	bool IsUsableAnchorFor(class APawn* P);
	class UReachSpec* GetReachSpecTo(class ANavigationPoint* Nav, class UClass* optionalSpecClass);
	void GetBoundingCylinder(float& outCollisionRadius, float& outCollisionHeight);
};

// Class Engine.CoverLink
// 0x0089 (0x02A0 - 0x0329)
class ACoverLink : public ANavigationPoint
{
public:
	uint32_t                                           GLOBAL_bUseSlotMarkers : 1;                    // 0x02A0 (0x0004) [0x0000000000044000] [0x00000001] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bDisabled : 1;                                 // 0x02A0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bClaimAllSlots : 1;                            // 0x02A0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAutoSort : 1;                                 // 0x02A0 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bAutoAdjust : 1;                               // 0x02A0 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bCircular : 1;                                 // 0x02A0 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bLooped : 1;                                   // 0x02A0 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bPlayerOnly : 1;                               // 0x02A0 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bDynamicCover : 1;                             // 0x02A0 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bFractureOnTouch : 1;                          // 0x02A0 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bDebug_FireLinks : 1;                          // 0x02A0 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bDebug_ExposedLinks : 1;                       // 0x02A0 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bDebug_CoverGen : 1;                           // 0x02A0 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bDoAutoSlotDensityFixup : 1;                   // 0x02A0 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	float                                              LeanTraceDist;                                 // 0x02A4 (0x0004) [0x0000000000000000]               
	class TArray<struct FCoverSlot>                    Slots;                                         // 0x02A8 (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FDynamicLinkInfo>              DynamicLinkInfos;                              // 0x02B4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class APawn*>                         Claims;                                        // 0x02C0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              InvalidateDistance;                            // 0x02CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxFireLinkDist;                               // 0x02D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     CircularOrigin;                                // 0x02D4 (0x000C) [0x0000000000000002] (CPF_Const)   
	float                                              CircularRadius;                                // 0x02E0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AlignDist;                                     // 0x02E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AutoCoverSlotInterval;                         // 0x02E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              StandHeight;                                   // 0x02EC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MidHeight;                                     // 0x02F0 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     StandingLeanOffset;                            // 0x02F4 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     CrouchLeanOffset;                              // 0x0300 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     PopupOffset;                                   // 0x030C (0x000C) [0x0000000000000002] (CPF_Const)   
	float                                              SlipDist;                                      // 0x0318 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              TurnDist;                                      // 0x031C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              DangerScale;                                   // 0x0320 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class ACoverLink*                                  NextCoverLink;                                 // 0x0324 (0x0004) [0x0000000000000002] (CPF_Const)   
	ECoverLocationDescription                          LocationDescription;                           // 0x0328 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CoverLink");
		}

		return uClassPointer;
	};

	class FString eventGetDebugAbbrev();
	ECoverLocationDescription GetLocationDescription(int32_t SlotIdx);
	class FString eventGetDebugString(int32_t SlotIdx);
	int32_t AddCoverSlot(const struct FVector& SlotLocation, const struct FRotator& SlotRotation, int32_t optionalSlotIdx, bool optionalBForceSlotUpdate, class AScout* optionalScout);
	void BreakFracturedMeshes(const struct FVector& Origin, float Radius, float RBStrength, class UClass* DamageType);
	bool GetSwatTurnTarget(int32_t SlotIdx, int32_t Direction, struct FCoverInfo& outOut_Info);
	void eventShutDown();
	void ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord& outRecord);
	void OnToggle(class USeqAct_Toggle* inAction);
	bool IsEnabled();
	bool AutoAdjustSlot(int32_t SlotIdx, bool bOnlyCheckLeans);
	void OnModifyCover(class USeqAct_ModifyCover* Action);
	void eventSetSlotPlayerOnly(int32_t SlotIdx, bool bInPlayerOnly);
	void NotifySlotOwnerCoverDisabled(int32_t SlotIdx, bool optionalBAIOnly);
	void eventSetSlotEnabled(int32_t SlotIdx, bool bEnable);
	void eventSetDisabled(bool bNewDisabled);
	void GetSlotActions(int32_t SlotIdx, class TArray<ECoverAction>& outActions);
	bool HasFireLinkTo(int32_t SlotIdx, const struct FCoverInfo& ChkCover, bool optionalBAllowFallbackLinks);
	bool GetFireLinkTo(int32_t SlotIdx, const struct FCoverInfo& ChkCover, ECoverAction ChkAction, ECoverType ChkType, int32_t& outOut_FireLinkIdx, class TArray<int32_t>& outOut_Items);
	bool AllowLeftTransition(int32_t SlotIdx);
	bool AllowRightTransition(int32_t SlotIdx);
	int32_t GetSlotIdxToRight(int32_t SlotIdx, int32_t optionalCnt);
	int32_t GetSlotIdxToLeft(int32_t SlotIdx, int32_t optionalCnt);
	bool IsRightEdgeSlot(int32_t SlotIdx, bool bIgnoreLeans);
	bool IsLeftEdgeSlot(int32_t SlotIdx, bool bIgnoreLeans);
	bool IsEdgeSlot(int32_t SlotIdx, bool optionalBIgnoreLeans);
	bool FindSlots(const struct FVector& CheckLocation, float MaxDistance, int32_t& outLeftSlotIdx, int32_t& outRightSlotIdx);
	bool IsStationarySlot(int32_t SlotIdx);
	bool IsValidClaimBetween(class APawn* ChkClaim, int32_t StartSlotIdx, int32_t EndSlotIdx, bool optionalBSkipTeamCheck, bool optionalBSkipOverlapCheck);
	bool IsValidClaim(class APawn* ChkClaim, int32_t SlotIdx, bool optionalBSkipTeamCheck, bool optionalBSkipOverlapCheck);
	bool eventUnClaim(class APawn* OldClaim, int32_t SlotIdx, bool bUnclaimAll);
	bool eventClaim(class APawn* NewClaim, int32_t SlotIdx);
	void eventSetInvalidUntil(int32_t SlotIdx, float TimeToBecomeValid);
	bool IsExposedTo(int32_t SlotIdx, const struct FCoverInfo& ChkSlot, float& outOut_ExposedScale);
	struct FVector GetSlotViewPoint(int32_t SlotIdx, ECoverType optionalType, ECoverAction optionalAction);
	struct FRotator GetSlotRotation(int32_t SlotIdx, bool optionalBForceUseOffset);
	struct FVector GetSlotLocation(int32_t SlotIdx, bool optionalBForceUseOffset);
	static void UnPackFireLinkInteractionInfo(uint8_t PackedByte, ECoverType& outSrcType, ECoverAction& outSrcAction, ECoverType& outDestType, ECoverAction& outDestAction);
	static uint8_t PackFireLinkInteractionInfo(ECoverType SrcType, ECoverAction SrcAction, ECoverType DestType, ECoverAction DestAction);
	bool GetFireLinkTargetCoverInfo(int32_t SlotIdx, int32_t FireLinkIdx, EFireLinkID optionalArrayID, struct FCoverInfo& outOut_Info);
};

// Class Engine.DoorMarker
// 0x0010 (0x02A0 - 0x02B0)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                        // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EDoorType                                          DoorType;                                      // 0x02A4 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      DoorTrigger;                                   // 0x02A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bWaitUntilCompletelyOpened : 1;                // 0x02AC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInitiallyClosed : 1;                          // 0x02AC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBlockedWhenClosed : 1;                        // 0x02AC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDoorOpen : 1;                                 // 0x02AC (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bTempDisabledCollision : 1;                    // 0x02AC (0x0004) [0x0000000000002002] [0x00000010] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DoorMarker");
		}

		return uClassPointer;
	};

	bool eventSuggestMovePreparation(class APawn* Other);
	bool ProceedWithMove(class APawn* Other);
	class AActor* eventSpecialHandling(class APawn* Other);
	void MoverClosed();
	void MoverOpened();
	void eventPostBeginPlay();
};

// Class Engine.DynamicAnchor
// 0x0004 (0x02A0 - 0x02A4)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                   // 0x02A0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicAnchor");
		}

		return uClassPointer;
	};

};

// Class Engine.Ladder
// 0x0008 (0x02A0 - 0x02A8)
class ALadder : public ANavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                      // 0x02A0 (0x0004) [0x0000000000000000]               
	class ALadder*                                     LadderList;                                    // 0x02A4 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Ladder");
		}

		return uClassPointer;
	};

	bool eventSuggestMovePreparation(class APawn* Other);
};

// Class Engine.AutoLadder
// 0x0000 (0x02A8 - 0x02A8)
class AAutoLadder : public ALadder
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AutoLadder");
		}

		return uClassPointer;
	};

};

// Class Engine.LiftCenter
// 0x0020 (0x02A0 - 0x02C0)
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                        // 0x02A0 (0x0004) [0x0000000000000000]               
	float                                              MaxDist2D;                                     // 0x02A4 (0x0004) [0x0000000000000000]               
	struct FVector                                     LiftOffset;                                    // 0x02A8 (0x000C) [0x0000000000000000]               
	uint32_t                                           bJumpLift : 1;                                 // 0x02B4 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CollisionHeight;                               // 0x02B8 (0x0004) [0x0000000000000000]               
	class ATrigger*                                    LiftTrigger;                                   // 0x02BC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LiftCenter");
		}

		return uClassPointer;
	};

	bool ProceedWithMove(class APawn* Other);
	bool eventSuggestMovePreparation(class APawn* Other);
	class AActor* eventSpecialHandling(class APawn* Other);
	void eventPostBeginPlay();
};

// Class Engine.LiftExit
// 0x0008 (0x02A0 - 0x02A8)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                  // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bExitOnly : 1;                                 // 0x02A4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LiftExit");
		}

		return uClassPointer;
	};

	bool eventSuggestMovePreparation(class APawn* Other);
	void WaitForLift(class APawn* Other);
	bool CanBeReachedFromLiftBy(class APawn* Other);
};

// Class Engine.PathNode
// 0x0000 (0x02A0 - 0x02A0)
class APathNode : public ANavigationPoint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PathNode");
		}

		return uClassPointer;
	};

	class FString eventGetDebugAbbrev();
};

// Class Engine.VolumePathNode
// 0x0008 (0x02A0 - 0x02A8)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartingHeight;                                // 0x02A4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.VolumePathNode");
		}

		return uClassPointer;
	};

};

// Class Engine.PickupFactory
// 0x001C (0x02A0 - 0x02BC)
class APickupFactory : public ANavigationPoint
{
public:
	uint32_t                                           bOnlyReplicateHidden : 1;                      // 0x02A0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bPickupHidden : 1;                             // 0x02A0 (0x0004) [0x0000000000000020] [0x00000002] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bPredictRespawns : 1;                          // 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bIsSuperItem : 1;                              // 0x02A0 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bRespawnPaused : 1;                            // 0x02A0 (0x0004) [0x0000000000000000] [0x00000010] 
	class UClass*                                      InventoryType;                                 // 0x02A4 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	float                                              RespawnEffectTime;                             // 0x02A8 (0x0004) [0x0000000000000000]               
	float                                              MaxDesireability;                              // 0x02AC (0x0004) [0x0000000000000000]               
	class UPrimitiveComponent*                         PickupMesh;                                    // 0x02B0 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class APickupFactory*                              ReplacementFactory;                            // 0x02B4 (0x0004) [0x0000000000000000]               
	class APickupFactory*                              OriginalFactory;                               // 0x02B8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PickupFactory");
		}

		return uClassPointer;
	};

	bool DelayRespawn();
	void eventDestroyed();
	void SetPickupVisible();
	void SetPickupHidden();
	void RespawnEffect();
	float GetRespawnTime();
	void RecheckValidTouch();
	void PickedUpBy(class APawn* P);
	void GiveTo(class APawn* P);
	bool ReadyToPickup(float MaxWait);
	void SpawnCopyFor(class APawn* Recipient);
	float eventDetourWeight(class APawn* Other, float PathWeight);
	void StartSleeping();
	void SetRespawn();
	bool CheckForErrors();
	void Reset();
	void SetPickupMesh();
	void ShutDown();
	void eventSetInitialState();
	void InitializePickup();
	void eventPreBeginPlay();
	void eventReplicatedEvent(const class FName& VarName);
};

// Class Engine.PlayerStart
// 0x0010 (0x02A0 - 0x02B0)
class APlayerStart : public ANavigationPoint
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x02A0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPrimaryStart : 1;                             // 0x02A0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBestStart : 1;                                // 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 
	int32_t                                            TeamIndex;                                     // 0x02A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Score;                                         // 0x02A8 (0x0004) [0x0000000000000000]               
	int32_t                                            SelectionIndex;                                // 0x02AC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PlayerStart");
		}

		return uClassPointer;
	};

	void eventPostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void OnToggle(class USeqAct_Toggle* Action);
};

// Class Engine.PortalMarker
// 0x0004 (0x02A0 - 0x02A4)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                      // 0x02A0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PortalMarker");
		}

		return uClassPointer;
	};

	bool CanTeleport(class AActor* A);
};

// Class Engine.Pylon
// 0x00C8 (0x02A0 - 0x0368)
class APylon : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;         // 0x02A0 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IInterface_NavigationHandle;           // 0x02A4 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    NavMeshPtr;                                    // 0x02A8 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    ObstacleMesh;                                  // 0x02AC (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    DynamicObstacleMesh;                           // 0x02B0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    WorkingSetPtr;                                 // 0x02B4 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    PathObjectsThatAffectThisPylon;                // 0x02B8 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FVector>                       NextPassSeedList;                              // 0x02BC (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FOctreeElementId                            OctreeId;                                      // 0x02C8 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    OctreeIWasAddedTo;                             // 0x02D0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class APylon*                                      NextPylon;                                     // 0x02D4 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class AVolume*>                       ExpansionVolumes;                              // 0x02D8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              ExpansionRadius;                               // 0x02E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxExpansionRadius;                            // 0x02E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UDrawPylonRadiusComponent*                   PylonRadiusPreview;                            // 0x02EC (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint32_t                                           bImportedMesh : 1;                             // 0x02F0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bUseExpansionSphereOverride : 1;               // 0x02F0 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bNeedsCostCheck : 1;                           // 0x02F0 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bPylonInHighLevelPath : 1;                     // 0x02F0 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bUseRecast : 1;                                // 0x02F0 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAllowRecastGenerator : 1;                     // 0x02F0 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bDrawEdgePolys : 1;                            // 0x02F0 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bDrawPolyBounds : 1;                           // 0x02F0 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bRenderInShowPaths : 1;                        // 0x02F0 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bDrawWalkableSurface : 1;                      // 0x02F0 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bDrawObstacleSurface : 1;                      // 0x02F0 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bSolidObstaclesInGame : 1;                     // 0x02F0 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bBuildThisPylon : 1;                           // 0x02F0 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bDisabled : 1;                                 // 0x02F0 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bForceObstacleMeshCollision : 1;               // 0x02F0 (0x0004) [0x0000000000000000] [0x00004000] 
	struct FVector                                     ExpansionSphereCenter;                         // 0x02F4 (0x000C) [0x0000000000000000]               
	class UNavMeshRenderingComponent*                  RenderingComp;                                 // 0x0300 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpriteComponent*                            BrokenSprite;                                  // 0x0304 (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class TArray<class APylon*>                        ImposterPylons;                                // 0x0308 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class AActor*>                        OnBuild_DisableCollisionForThese;              // 0x0314 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class AActor*>                        OnBuild_EnableCollisionForThese;               // 0x0320 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              MaxPolyHeight_Optional;                        // 0x032C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            NavMeshGenerator;                              // 0x0330 (0x0001) [0x0000000000000000]               
	class TArray<struct FKAggregateGeom>               VoxelFilterBounds;                             // 0x0334 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FMatrix>                       VoxelFilterTM;                                 // 0x0340 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            DebugEdgeCount;                                // 0x034C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     DebugPathExtent;                               // 0x0350 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     DebugPathStartLocation;                        // 0x035C (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Pylon");
		}

		return uClassPointer;
	};

	bool CanReachPylon(class APylon* DestPylon, class AController* C);
	void OnToggle(class USeqAct_Toggle* Action);
	bool eventIsEnabled();
	void eventSetEnabled(bool bEnabled);
	void PostBeginPlay();
	void eventNotifyPathChanged();
	void VerifyTopLevelConnections();
	struct FVector GetTestPathExtent();
	void FlushDynamicEdges();
	void UpdateMeshForPreExistingNavMeshObstacles();
	void OnPylonStatusChange();
};

// Class Engine.AISwitchablePylon
// 0x0004 (0x0368 - 0x036C)
class AAISwitchablePylon : public APylon
{
public:
	uint32_t                                           bOpen : 1;                                     // 0x0368 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AISwitchablePylon");
		}

		return uClassPointer;
	};

	bool eventIsEnabled();
	void eventSetEnabled(bool bEnabled);
	void PostBeginPlay();
};

// Class Engine.DynamicPylon
// 0x0004 (0x0368 - 0x036C)
class ADynamicPylon : public APylon
{
public:
	uint32_t                                           bMoving : 1;                                   // 0x0368 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicPylon");
		}

		return uClassPointer;
	};

	void eventStoppedMoving();
	void eventStartedMoving();
	void FlushDynamicEdges();
	void RebuildDynamicEdges();
	void PostBeginPlay();
};

// Class Engine.Teleporter
// 0x0028 (0x02A0 - 0x02C8)
class ATeleporter : public ANavigationPoint
{
public:
	class FString                                      URL;                                           // 0x02A0 (0x000C) [0x0000000000400021] (CPF_Edit | CPF_Net | CPF_NeedCtorLink)
	class FName                                        ProductRequired;                               // 0x02AC (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bChangesVelocity : 1;                          // 0x02B4 (0x0004) [0x0000000000000021] [0x00000001] (CPF_Edit | CPF_Net)
	uint32_t                                           bChangesYaw : 1;                               // 0x02B4 (0x0004) [0x0000000000000021] [0x00000002] (CPF_Edit | CPF_Net)
	uint32_t                                           bReversesX : 1;                                // 0x02B4 (0x0004) [0x0000000000000021] [0x00000004] (CPF_Edit | CPF_Net)
	uint32_t                                           bReversesY : 1;                                // 0x02B4 (0x0004) [0x0000000000000021] [0x00000008] (CPF_Edit | CPF_Net)
	uint32_t                                           bReversesZ : 1;                                // 0x02B4 (0x0004) [0x0000000000000021] [0x00000010] (CPF_Edit | CPF_Net)
	uint32_t                                           bEnabled : 1;                                  // 0x02B4 (0x0004) [0x0000000000000021] [0x00000020] (CPF_Edit | CPF_Net)
	uint32_t                                           bCanTeleportVehicles : 1;                      // 0x02B4 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	struct FVector                                     TargetVelocity;                                // 0x02B8 (0x000C) [0x0000000000000021] (CPF_Edit | CPF_Net)
	float                                              LastFired;                                     // 0x02C4 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Teleporter");
		}

		return uClassPointer;
	};

	class AActor* eventSpecialHandling(class APawn* Other);
	void eventPostTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool eventAccept(class AActor* Incoming, class AActor* Source);
	void eventPostBeginPlay();
	bool CanTeleport(class AActor* A);
};

// Class Engine.Note
// 0x000C (0x01C8 - 0x01D4)
class ANote : public AActor
{
public:
	class FString                                      Text;                                          // 0x01C8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_NotForConsole)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Note");
		}

		return uClassPointer;
	};

};

// Class Engine.Projectile
// 0x003C (0x01C8 - 0x0204)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                         // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxSpeed;                                      // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSwitchToZeroCollision : 1;                    // 0x01D0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bBlockedByInstigator : 1;                      // 0x01D0 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bBegunPlay : 1;                                // 0x01D0 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bRotationFollowsVelocity : 1;                  // 0x01D0 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bIgnoreFoliageTouch : 1;                       // 0x01D0 (0x0004) [0x0000000000000000] [0x00000010] 
	class AActor*                                      ZeroCollider;                                  // 0x01D4 (0x0004) [0x0000000000000000]               
	class UPrimitiveComponent*                         ZeroColliderComponent;                         // 0x01D8 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              Damage;                                        // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DamageRadius;                                  // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MomentumTransfer;                              // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      MyDamageType;                                  // 0x01E8 (0x0004) [0x0000000000000000]               
	class USoundCue*                                   SpawnSound;                                    // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   ImpactSound;                                   // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AController*                                 InstigatorController;                          // 0x01F4 (0x0004) [0x0000000000000000]               
	class AActor*                                      ImpactedActor;                                 // 0x01F8 (0x0004) [0x0000000000000000]               
	float                                              NetCullDistanceSquared;                        // 0x01FC (0x0004) [0x0000000000000000]               
	class UCylinderComponent*                          CylinderComponent;                             // 0x0200 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Projectile");
		}

		return uClassPointer;
	};

	void ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation);
	static float GetRange();
	static float StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy);
	float GetTimeToLocation(const struct FVector& TargetLoc);
	void eventFellOutOfWorld(class UClass* dmgType);
	bool IsStationary();
	void RandSpin(float spinRate);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventEncroachedBy(class AActor* Other);
	void eventHitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool HurtRadius(float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* optionalIgnoredActor, class AController* optionalInstigatedByController, bool optionalBDoFullDamage);
	bool ProjectileHurtRadius(const struct FVector& HurtOrigin, const struct FVector& HitNormal);
	void Reset();
	bool CanSplash();
	uint8_t GetTeamNum();
	void Init(const struct FVector& Direction);
	void eventPostBeginPlay();
	void eventPreBeginPlay();
	bool eventEncroachingOn(class AActor* Other);
};

// Class Engine.RigidBodyBase
// 0x0000 (0x01C8 - 0x01C8)
class ARigidBodyBase : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RigidBodyBase");
		}

		return uClassPointer;
	};

};

// Class Engine.SceneCaptureActor
// 0x0004 (0x01C8 - 0x01CC)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                  // 0x01C8 (0x0004) [0x000000000408000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCaptureActor");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class Engine.SceneCapture2DActor
// 0x0004 (0x01CC - 0x01D0)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                   // 0x01CC (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCapture2DActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SceneCaptureCubeMapActor
// 0x0008 (0x01CC - 0x01D4)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                    // 0x01CC (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UMaterialInstanceConstant*                   CubeMaterialInst;                              // 0x01D0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCaptureCubeMapActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SceneCaptureReflectActor
// 0x0008 (0x01CC - 0x01D4)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                    // 0x01CC (0x0004) [0x000000000408000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                           // 0x01D0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCaptureReflectActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SceneCapturePortalActor
// 0x0000 (0x01D4 - 0x01D4)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCapturePortalActor");
		}

		return uClassPointer;
	};

};

// Class Engine.PortalTeleporter
// 0x0014 (0x01D4 - 0x01E8)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                  // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TextureResolutionX;                            // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TextureResolutionY;                            // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class APortalMarker*                               MyMarker;                                      // 0x01E0 (0x0004) [0x0000000000000000]               
	uint32_t                                           bMovablePortal : 1;                            // 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAlwaysTeleportNonPawns : 1;                   // 0x01E4 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bCanTeleportVehicles : 1;                      // 0x01E4 (0x0004) [0x0000000000000000] [0x00000004] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PortalTeleporter");
		}

		return uClassPointer;
	};

	bool StopsProjectile(class AProjectile* P);
	class UTextureRenderTarget2D* CreatePortalTexture();
	struct FVector TransformHitLocation(const struct FVector& HitLocation);
	struct FVector TransformVectorDir(const struct FVector& V);
	bool TransformActor(class AActor* A);
};

// Class Engine.StaticMeshActorBase
// 0x0000 (0x01C8 - 0x01C8)
class AStaticMeshActorBase : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StaticMeshActorBase");
		}

		return uClassPointer;
	};

};

// Class Engine.StaticMeshActor
// 0x0009 (0x01C8 - 0x01D1)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                           // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bDisableAutoBaseOnProcBuilding : 1;            // 0x01CC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit | CPF_EditorOnly)
	uint32_t                                           bProxy : 1;                                    // 0x01CC (0x0004) [0x0000000000000000] [0x00000002] (CPF_EditorOnly)
	uint32_t                                           bHiddenByProxy : 1;                            // 0x01CC (0x0004) [0x0000000000000000] [0x00000004] (CPF_EditorOnly)
	uint32_t                                           OldCastShadow : 1;                             // 0x01CC (0x0004) [0x0000000000000000] [0x00000008] (CPF_EditorOnly)
	uint32_t                                           OldAcceptsLights : 1;                          // 0x01CC (0x0004) [0x0000000000000000] [0x00000010] (CPF_EditorOnly)
	ECollisionType                                     OldCollisionType;                              // 0x01D0 (0x0001) [0x0000000000000000] (CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StaticMeshActor");
		}

		return uClassPointer;
	};

	void eventPreBeginPlay();
};

// Class Engine.StaticMeshCollectionActor
// 0x0010 (0x01C8 - 0x01D8)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	class TArray<class UStaticMeshComponent*>          StaticMeshComponents;                          // 0x01C8 (0x000C) [0x000000000448000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	int32_t                                            MaxStaticMeshComponents;                       // 0x01D4 (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StaticMeshCollectionActor");
		}

		return uClassPointer;
	};

};

// Class Engine.StaticMeshActorBasedOnExtremeContent
// 0x001C (0x01C8 - 0x01E4)
class AStaticMeshActorBasedOnExtremeContent : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                           // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class TArray<struct FSMMaterialSetterDatum>        ExtremeContent;                                // 0x01CC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FSMMaterialSetterDatum>        NonExtremeContent;                             // 0x01D8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StaticMeshActorBasedOnExtremeContent");
		}

		return uClassPointer;
	};

	void SetMaterialBasedOnExtremeContent();
	void eventPostBeginPlay();
};

// Class Engine.Trigger
// 0x000C (0x01C8 - 0x01D4)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                             // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bRecentlyTriggered : 1;                        // 0x01CC (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              AITriggerDelay;                                // 0x01D0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Trigger");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct ATrigger_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct ATrigger_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
	bool StopsProjectile(class AProjectile* P);
	void UnTrigger();
	void NotifyTriggered();
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventPostBeginPlay();
};

// Class Engine.Trigger_PawnsOnly
// 0x0000 (0x01D4 - 0x01D4)
class ATrigger_PawnsOnly : public ATrigger
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Trigger_PawnsOnly");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorComponent
// 0x000D (0x0048 - 0x0055)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    Scene;                                         // 0x0048 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class AActor*                                      Owner;                                         // 0x004C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint32_t                                           bAttached : 1;                                 // 0x0050 (0x0004) [0x0000000000003002] [0x00000001] (CPF_Const | CPF_Native | CPF_Transient)
	uint32_t                                           bTickInEditor : 1;                             // 0x0050 (0x0004) [0x0000000000000002] [0x00000002] (CPF_Const)
	uint32_t                                           bNeedsReattach : 1;                            // 0x0050 (0x0004) [0x0000000000002002] [0x00000004] (CPF_Const | CPF_Transient)
	uint32_t                                           bNeedsUpdateTransform : 1;                     // 0x0050 (0x0004) [0x0000000000002002] [0x00000008] (CPF_Const | CPF_Transient)
	uint32_t                                           bNeedsUpdateDispSwitch : 1;                    // 0x0050 (0x0004) [0x0000000000002002] [0x00000010] (CPF_Const | CPF_Transient)
	ETickingGroup                                      TickGroup;                                     // 0x0054 (0x0001) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorComponent");
		}

		return uClassPointer;
	};

	void DetachFromAny();
	void ForceUpdate(bool bTransformOnly);
	void SetComponentRBFixed(bool bFixed);
	void SetTickGroup(ETickingGroup NewTickGroup);
};

// Class Engine.AudioComponent
// 0x01D7 (0x0055 - 0x022C)
class UAudioComponent : public UActorComponent
{
public:
	class USoundCue*                                   SoundCue;                                      // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundNode*                                  CueFirstNode;                                  // 0x005C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FAudioComponentParam>          InstanceParameters;                            // 0x0060 (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bUseOwnerLocation : 1;                         // 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bAutoPlay : 1;                                 // 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bAutoDestroy : 1;                              // 0x006C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bStopWhenOwnerDestroyed : 1;                   // 0x006C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bShouldRemainActiveIfDropped : 1;              // 0x006C (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bWasOccluded : 1;                              // 0x006C (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bSuppressSubtitles : 1;                        // 0x006C (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bWasPlaying : 1;                               // 0x006C (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bAllowSpatialization : 1;                      // 0x006C (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bFinished : 1;                                 // 0x006C (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bApplyRadioFilter : 1;                         // 0x006C (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bRadioFilterSelected : 1;                      // 0x006C (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	uint32_t                                           bPreviewComponent : 1;                         // 0x006C (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bIgnoreForFlushing : 1;                        // 0x006C (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	float                                              StereoBleed;                                   // 0x0070 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LFEBleed;                                      // 0x0074 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bEQFilterApplied : 1;                          // 0x0078 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bAlwaysPlay : 1;                               // 0x0078 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bIsUISound : 1;                                // 0x0078 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bIsMusic : 1;                                  // 0x0078 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bReverb : 1;                                   // 0x0078 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bCenterChannelOnly : 1;                        // 0x0078 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	class TArray<struct FPointer>                      WaveInstances;                                 // 0x007C (0x000C) [0x0000000000201002] (CPF_Const | CPF_Native)
	class TArray<uint8_t>                              SoundNodeData;                                 // 0x0088 (0x000C) [0x0000000000201002] (CPF_Const | CPF_Native)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0094 (0x003C) MISSED OFFSET
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                         // 0x00D0 (0x003C) [0x0000000000201002] (CPF_Const | CPF_Native)
	struct FPointer                                    Listener;                                      // 0x010C (0x0004) [0x0000000000201002] (CPF_Const | CPF_Native)
	float                                              PlaybackTime;                                  // 0x0110 (0x0004) [0x0000000000201002] (CPF_Const | CPF_Native)
	class APortalVolume*                               PortalVolume;                                  // 0x0114 (0x0004) [0x0000000000201002] (CPF_Const | CPF_Native)
	struct FVector                                     Location;                                      // 0x0118 (0x000C) [0x0000000000201000] (CPF_Native)  
	struct FVector                                     ComponentLocation;                             // 0x0124 (0x000C) [0x0000000000201002] (CPF_Const | CPF_Native)
	class AActor*                                      LastOwner;                                     // 0x0130 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              SubtitlePriority;                              // 0x0134 (0x0004) [0x0000000000001000] (CPF_Native)  
	float                                              FadeInStartTime;                               // 0x0138 (0x0004) [0x0000000000000000]               
	float                                              FadeInStopTime;                                // 0x013C (0x0004) [0x0000000000000000]               
	float                                              FadeInTargetVolume;                            // 0x0140 (0x0004) [0x0000000000000000]               
	float                                              FadeOutStartTime;                              // 0x0144 (0x0004) [0x0000000000000000]               
	float                                              FadeOutStopTime;                               // 0x0148 (0x0004) [0x0000000000000000]               
	float                                              FadeOutTargetVolume;                           // 0x014C (0x0004) [0x0000000000000000]               
	float                                              AdjustVolumeStartTime;                         // 0x0150 (0x0004) [0x0000000000000000]               
	float                                              AdjustVolumeStopTime;                          // 0x0154 (0x0004) [0x0000000000000000]               
	float                                              AdjustVolumeTargetVolume;                      // 0x0158 (0x0004) [0x0000000000000000]               
	float                                              CurrAdjustVolumeTargetVolume;                  // 0x015C (0x0004) [0x0000000000000000]               
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;               // 0x0160 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FVector                                     CurrentLocation;                               // 0x0164 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FVector                                     CurrentVelocity;                               // 0x0170 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentVolume;                                 // 0x017C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentPitch;                                  // 0x0180 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentHighFrequencyGain;                      // 0x0184 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            CurrentUseSpatialization;                      // 0x0188 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            CurrentNotifyOnLoop;                           // 0x018C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              OmniRadius;                                    // 0x0190 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentVolumeMultiplier;                       // 0x0194 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentPitchMultiplier;                        // 0x0198 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentHighFrequencyGainMultiplier;            // 0x019C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentVoiceCenterChannelVolume;               // 0x01A0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentRadioFilterVolume;                      // 0x01A4 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentRadioFilterVolumeThreshold;             // 0x01A8 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     LastUpdateTime;                                // 0x01AC (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              SourceInteriorVolume;                          // 0x01B4 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              SourceInteriorLPF;                             // 0x01B8 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentInteriorVolume;                         // 0x01BC (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              CurrentInteriorLPF;                            // 0x01C0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FVector                                     LastLocation;                                  // 0x01C4 (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FInteriorSettings                           LastInteriorSettings;                          // 0x01D0 (0x0024) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            LastReverbVolumeIndex;                         // 0x01F4 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              VolumeMultiplier;                              // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMultiplier;                               // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HighFrequencyGainMultiplier;                   // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionCheckInterval;                        // 0x0204 (0x0004) [0x0000000000000000]               
	float                                              LastOcclusionCheckTime;                        // 0x0208 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                            // 0x020C (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	int32_t                                            PadSpeakerIndex;                               // 0x0210 (0x0004) [0x0000000000000000]               
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                   // 0x0214 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnQueueSubtitles__Delegate;                  // 0x0220 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AudioComponent");
		}

		return uClassPointer;
	};

	void eventOcclusionChanged(bool bNowOccluded);
	void OnQueueSubtitles(const class TArray<struct FSubtitleCue>& Subtitles, float CueDuration);
	void OnAudioFinished(class UAudioComponent* AC);
	void ResetToDefaults();
	void SetWaveParameter(const class FName& InName, class USoundNodeWave* InWave);
	void SetFloatParameter(const class FName& InName, float InFloat);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	bool IsFadingOut();
	bool IsFadingIn();
	bool IsPlaying();
	void Stop();
	void Play();
};

// Class Engine.SplineAudioComponent
// 0x0014 (0x022C - 0x0240)
class USplineAudioComponent : public UAudioComponent
{
public:
	float                                              ListenerScopeRadius;                           // 0x022C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ClosestPointOnSplineIndex;                     // 0x0230 (0x0004) [0x0000000000000000]               
	class TArray<struct FInterpPointOnSpline>          Points;                                        // 0x0234 (0x000C) [0x0000000000500000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SplineAudioComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.MultiCueSplineAudioComponent
// 0x0010 (0x0240 - 0x0250)
class UMultiCueSplineAudioComponent : public USplineAudioComponent
{
public:
	class TArray<struct FMultiCueSplineSoundSlot>      SoundSlots;                                    // 0x0240 (0x000C) [0x0000000000500001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            CurrentSlotIndex;                              // 0x024C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MultiCueSplineAudioComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.SimpleSplineAudioComponent
// 0x0030 (0x0240 - 0x0270)
class USimpleSplineAudioComponent : public USplineAudioComponent
{
public:
	uint32_t                                           bAttenuateWithLPF : 1;                         // 0x0240 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              LPFRadiusMin;                                  // 0x0244 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFRadiusMax;                                  // 0x0248 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              dBAttenuationAtMax;                            // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FlattenAttenuationRadius;                      // 0x0250 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ESoundDistanceModel                                DistanceAlgorithm;                             // 0x0254 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusMin;                                     // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusMax;                                     // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FSplineSoundSlot>              SoundSlots;                                    // 0x0260 (0x000C) [0x0000000000500001] (CPF_Edit | CPF_NeedCtorLink)
	class USoundNode*                                  NotifyBufferFinishedHook;                      // 0x026C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SimpleSplineAudioComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.SimpleSplineNonLoopAudioComponent
// 0x0028 (0x0270 - 0x0298)
class USimpleSplineNonLoopAudioComponent : public USimpleSplineAudioComponent
{
public:
	float                                              DelayMin;                                      // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DelayMax;                                      // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMin;                                      // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMax;                                      // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VolumeMin;                                     // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VolumeMax;                                     // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CurrentSlotIndex;                              // 0x0288 (0x0004) [0x0000000000000000]               
	float                                              UsedVolumeModulation;                          // 0x028C (0x0004) [0x0000000000000000]               
	float                                              UsedPitchModulation;                           // 0x0290 (0x0004) [0x0000000000000000]               
	float                                              NextSoundTime;                                 // 0x0294 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SimpleSplineNonLoopAudioComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.HeightFogComponent
// 0x001F (0x0055 - 0x0074)
class UHeightFogComponent : public UActorComponent
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0058 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              Height;                                        // 0x005C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              Density;                                       // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              LightBrightness;                               // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	struct FColor                                      LightColor;                                    // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              ExtinctionDistance;                            // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              StartDistance;                                 // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.HeightFogComponent");
		}

		return uClassPointer;
	};

	void SetEnabled(bool bSetEnabled);
};

// Class Engine.PrimitiveComponent
// 0x0183 (0x0055 - 0x01D8)
class UPrimitiveComponent : public UActorComponent
{
public:
	int32_t                                            Tag;                                           // 0x0058 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FBoxSphereBounds                            Bounds;                                        // 0x005C (0x001C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    SceneInfo;                                     // 0x0078 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            DetachFence;                                   // 0x007C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              LocalToWorldDeterminant;                       // 0x0080 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	uint8_t                                            UnknownData00[0xC];                              // 0x0084 (0x000C) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                  // 0x0090 (0x0040) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            MotionBlurInfoIndex;                           // 0x00D0 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      DecalList;                                     // 0x00D4 (0x000C) [0x0000000001001002] (CPF_Const | CPF_Native)
	class TArray<class UDecalComponent*>               DecalsToReattach;                              // 0x00E0 (0x000C) [0x000000000448200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class UPrimitiveComponent*                         ShadowParent;                                  // 0x00EC (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UPrimitiveComponent*                         ReplacementPrimitive;                          // 0x00F0 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline | CPF_CrossLevelPassive)
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                            // 0x00F4 (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class ULightComponent*                             OverrideLightComponent;                        // 0x00F8 (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                              // 0x00FC (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class ULightEnvironmentComponent*                  PreviousLightEnvironment;                      // 0x0100 (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	float                                              MinDrawDistance;                               // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MassiveLODDistance;                            // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDrawDistance;                               // 0x010C (0x0004) [0x0000000000800003] (CPF_Edit | CPF_Const | CPF_NoExport)
	float                                              CachedMaxDrawDistance;                         // 0x0110 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              MotionBlurInstanceScale;                       // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CullDistance;                                  // 0x0118 (0x0004) [0x0000000020800002] (CPF_Const | CPF_NoExport | CPF_Deprecated)
	float                                              CachedCullDistance;                            // 0x011C (0x0004) [0x0000000020020000] (CPF_EditConst | CPF_Deprecated)
	ESceneDepthPriorityGroup                           DepthPriorityGroup;                            // 0x0120 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESceneDepthPriorityGroup                           ViewOwnerDepthPriorityGroup;                   // 0x0121 (0x0001) [0x0000000000000002] (CPF_Const)   
	EDetailMode                                        DetailMode;                                    // 0x0122 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ERBCollisionChannel                                RBChannel;                                     // 0x0123 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                            RBDominanceGroup;                              // 0x0124 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            PreviewEnvironmentShadowing;                   // 0x0125 (0x0001) [0x0000000000000000]               
	uint32_t                                           bUseViewOwnerDepthPriorityGroup : 1;           // 0x0128 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bAllowCullDistanceVolume : 1;                  // 0x0128 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           HiddenGame : 1;                                // 0x0128 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           HiddenEditor : 1;                              // 0x0128 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bOwnerNoSee : 1;                               // 0x0128 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bOnlyOwnerSee : 1;                             // 0x0128 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bIgnoreOwnerHidden : 1;                        // 0x0128 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseAsOccluder : 1;                            // 0x0128 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bAllowApproximateOcclusion : 1;                // 0x0128 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bFirstFrameOcclusion : 1;                      // 0x0128 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bIgnoreNearPlaneIntersection : 1;              // 0x0128 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bSelectable : 1;                               // 0x0128 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bForceMipStreaming : 1;                        // 0x0128 (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAcceptsDecals : 1;                            // 0x0128 (0x0004) [0x0000000020000002] [0x00002000] (CPF_Const | CPF_Deprecated)
	uint32_t                                           bAcceptsDecalsDuringGameplay : 1;              // 0x0128 (0x0004) [0x0000000020000002] [0x00004000] (CPF_Const | CPF_Deprecated)
	uint32_t                                           bAcceptsStaticDecals : 1;                      // 0x0128 (0x0004) [0x0000000000000003] [0x00008000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAcceptsDynamicDecals : 1;                     // 0x0128 (0x0004) [0x0000000000000003] [0x00010000] (CPF_Edit | CPF_Const)
	uint32_t                                           bIsRefreshingDecals : 1;                       // 0x0128 (0x0004) [0x0000000000003002] [0x00020000] (CPF_Const | CPF_Native | CPF_Transient)
	uint32_t                                           bAllowDecalAutomaticReAttach : 1;              // 0x0128 (0x0004) [0x0000000000002000] [0x00040000] (CPF_Transient)
	uint32_t                                           bUsePerInstanceHitProxies : 1;                 // 0x0128 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           CastShadow : 1;                                // 0x0128 (0x0004) [0x0000000000000001] [0x00100000] (CPF_Edit)
	uint32_t                                           bForceDirectLightMap : 1;                      // 0x0128 (0x0004) [0x0000000000000002] [0x00200000] (CPF_Const)
	uint32_t                                           bCastDynamicShadow : 1;                        // 0x0128 (0x0004) [0x0000000000000001] [0x00400000] (CPF_Edit)
	uint32_t                                           bCastStaticShadow : 1;                         // 0x0128 (0x0004) [0x0000000000000001] [0x00800000] (CPF_Edit)
	uint32_t                                           bSelfShadowOnly : 1;                           // 0x0128 (0x0004) [0x0000000000000001] [0x01000000] (CPF_Edit)
	uint32_t                                           bNoModSelfShadow : 1;                          // 0x0128 (0x0004) [0x0000000000000001] [0x02000000] (CPF_Edit)
	uint32_t                                           bAcceptsDynamicDominantLightShadows : 1;       // 0x0128 (0x0004) [0x0000000000000001] [0x04000000] (CPF_Edit)
	uint32_t                                           bCastHiddenShadow : 1;                         // 0x0128 (0x0004) [0x0000000000000001] [0x08000000] (CPF_Edit)
	uint32_t                                           bCastShadowAsTwoSided : 1;                     // 0x0128 (0x0004) [0x0000000000000001] [0x10000000] (CPF_Edit)
	uint32_t                                           bAcceptsLights : 1;                            // 0x0128 (0x0004) [0x0000000000000003] [0x20000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAcceptsDynamicLights : 1;                     // 0x0128 (0x0004) [0x0000000000000003] [0x40000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseOnePassLightingOnTranslucency : 1;         // 0x0128 (0x0004) [0x0000000000000003] [0x80000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsePrecomputedShadows : 1;                    // 0x012C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bHasExplicitShadowParent : 1;                  // 0x012C (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bAllowAmbientOcclusion : 1;                    // 0x012C (0x0004) [0x0000000020000000] [0x00000004]  CPF_Deprecated)
	uint32_t                                           CollideActors : 1;                             // 0x012C (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           AlwaysCheckCollision : 1;                      // 0x012C (0x0004) [0x0000000000000002] [0x00000010] (CPF_Const)
	uint32_t                                           BlockActors : 1;                               // 0x012C (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           BlockZeroExtent : 1;                           // 0x012C (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           BlockNonZeroExtent : 1;                        // 0x012C (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           CanBlockCamera : 1;                            // 0x012C (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           BlockRigidBody : 1;                            // 0x012C (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bBlockFootPlacement : 1;                       // 0x012C (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisableAllRigidBody : 1;                      // 0x012C (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bSkipRBGeomCreation : 1;                       // 0x012C (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bNotifyRigidBodyCollision : 1;                 // 0x012C (0x0004) [0x0000000000000003] [0x00002000] (CPF_Edit | CPF_Const)
	uint32_t                                           bFluidDrain : 1;                               // 0x012C (0x0004) [0x0000000000000003] [0x00004000] (CPF_Edit | CPF_Const)
	uint32_t                                           bFluidTwoWay : 1;                              // 0x012C (0x0004) [0x0000000000000003] [0x00008000] (CPF_Edit | CPF_Const)
	uint32_t                                           bIgnoreRadialImpulse : 1;                      // 0x012C (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bIgnoreRadialForce : 1;                        // 0x012C (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           bIgnoreForceField : 1;                         // 0x012C (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           bUseCompartment : 1;                           // 0x012C (0x0004) [0x0000000000000003] [0x00080000] (CPF_Edit | CPF_Const)
	uint32_t                                           AlwaysLoadOnClient : 1;                        // 0x012C (0x0004) [0x0000000000000002] [0x00100000] (CPF_Const)
	uint32_t                                           AlwaysLoadOnServer : 1;                        // 0x012C (0x0004) [0x0000000000000002] [0x00200000] (CPF_Const)
	uint32_t                                           bIgnoreHiddenActorsMembership : 1;             // 0x012C (0x0004) [0x0000000000000001] [0x00400000] (CPF_Edit)
	uint32_t                                           AbsoluteTranslation : 1;                       // 0x012C (0x0004) [0x0000000000000003] [0x00800000] (CPF_Edit | CPF_Const)
	uint32_t                                           AbsoluteRotation : 1;                          // 0x012C (0x0004) [0x0000000000000003] [0x01000000] (CPF_Edit | CPF_Const)
	uint32_t                                           AbsoluteScale : 1;                             // 0x012C (0x0004) [0x0000000000000003] [0x02000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowShadowFade : 1;                          // 0x012C (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bSupportedOnMobile : 1;                        // 0x012C (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bHiddenPrimitive : 1;                          // 0x012C (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bWasSNFiltered : 1;                            // 0x012C (0x0004) [0x0000000000003002] [0x20000000] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<int32_t>                              OctreeNodes;                                   // 0x0130 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            TranslucencySortPriority;                      // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            VisibilityId;                                  // 0x0140 (0x0004) [0x0000000000200000]               
	struct FLightingChannelContainer                   LightingChannels;                              // 0x0144 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                         // 0x0148 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicalMaterial*                           PhysMaterialOverride;                          // 0x014C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class URB_BodyInstance*                            BodyInstance;                                  // 0x0150 (0x0004) [0x0000000000201002] (CPF_Const | CPF_Native)
	uint8_t                                            UnknownData01[0xC];                              // 0x0154 (0x000C) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                           // 0x0160 (0x0040) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FVector                                     Translation;                                   // 0x01A0 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRotator                                    Rotation;                                      // 0x01AC (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Scale;                                         // 0x01B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     Scale3D;                                       // 0x01BC (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BoundsScale;                                   // 0x01C8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LastSubmitTime;                                // 0x01CC (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              LastRenderTime;                                // 0x01D0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ScriptRigidBodyCollisionThreshold;             // 0x01D4 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PrimitiveComponent");
		}

		return uClassPointer;
	};

	EGJKResult ClosestPointOnComponentToComponent(class UPrimitiveComponent*& outOtherComponent, struct FVector& outPointOnComponentA, struct FVector& outPointOnComponentB);
	EGJKResult ClosestPointOnComponentToPoint(struct FVector& outPOI, struct FVector& outExtent, struct FVector& outOutPointA, struct FVector& outOutPointB);
	struct FRotator GetRotation();
	struct FVector GetPosition();
	void SetAbsolute(bool optionalNewAbsoluteTranslation, bool optionalNewAbsoluteRotation, bool optionalNewAbsoluteScale);
	void SetScale3D(const struct FVector& NewScale3D);
	void SetScale(float NewScale);
	void SetRotation(const struct FRotator& NewRotation);
	void SetTranslation(const struct FVector& NewTranslation);
	void SetActorCollision(bool NewCollideActors, bool NewBlockActors, bool optionalNewAlwaysCheckCollision);
	void SetTraceBlocking(bool NewBlockZeroExtent, bool NewBlockNonZeroExtent);
	void SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, ESceneDepthPriorityGroup NewViewOwnerDepthPriorityGroup);
	void SetDepthPriorityGroup(ESceneDepthPriorityGroup NewDepthPriorityGroup);
	void SetLightingChannels(const struct FLightingChannelContainer& NewLightingChannels);
	void SetCullDistance(float NewCullDistance);
	void SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment);
	void SetShadowParent(class UPrimitiveComponent* NewShadowParent);
	void SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetHidden(bool NewHidden);
	bool ShouldComponentAddToScene();
	void SetRBDominanceGroup(uint8_t InDomGroup);
	class URB_BodyInstance* GetRootBodyInstance();
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void InitRBPhys();
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetRBChannel(ERBCollisionChannel Channel);
	void SetRBCollisionChannels(const struct FRBCollisionChannelContainer& Channels);
	void SetRBCollidesWithChannel(ERBCollisionChannel Channel, bool bNewCollides);
	void SetBlockRigidBody(bool bNewBlockRigidBody);
	bool RigidBodyIsAwake(const class FName& optionalBoneName);
	void PutRigidBodyToSleep(const class FName& optionalBoneName);
	void WakeRigidBody(const class FName& optionalBoneName);
	void SetRBRotation(const struct FRotator& NewRot, const class FName& optionalBoneName);
	void SetRBPosition(const struct FVector& NewPos, const class FName& optionalBoneName);
	void RetardRBLinearVelocity(const struct FVector& RetardDir, float VelScale);
	void SetRBAngularVelocity(const struct FVector& NewAngVel, bool optionalBAddToCurrent);
	void SetRBLinearVelocity(const struct FVector& NewVel, bool optionalBAddToCurrent);
	void AddTorque(const struct FVector& Torque, const class FName& optionalBoneName);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff);
	void AddForce(const struct FVector& Force, const struct FVector& optionalPosition, const class FName& optionalBoneName);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool optionalBVelChange);
	void AddImpulse(const struct FVector& Impulse, const struct FVector& optionalPosition, const class FName& optionalBoneName, bool optionalBVelChange);
};

// Class Engine.ArrowComponent
// 0x0014 (0x01D8 - 0x01EC)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                    // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ArrowSize;                                     // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bTreatAsASprite : 1;                           // 0x01E0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class FName                                        SpriteCategoryName;                            // 0x01E4 (0x0008) [0x0000000000000000] (CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ArrowComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.BrushComponent
// 0x0054 (0x01D8 - 0x022C)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                         // 0x01D8 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FKAggregateGeom                             BrushAggGeom;                                  // 0x01DC (0x0038) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPointer                                    BrushPhysDesc;                                 // 0x0214 (0x0004) [0x0000000001003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                           // 0x0218 (0x000C) [0x0000000001003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            CachedPhysBrushDataVersion;                    // 0x0224 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bBlockComplexCollisionTrace : 1;               // 0x0228 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.BrushComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.CameraConeComponent
// 0x0000 (0x01D8 - 0x01D8)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CameraConeComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.CylinderComponent
// 0x0010 (0x01D8 - 0x01E8)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                               // 0x01D8 (0x0004) [0x000000000000000B] (CPF_Edit | CPF_Const | CPF_ExportObject)
	float                                              CollisionRadius;                               // 0x01DC (0x0004) [0x000000000000000B] (CPF_Edit | CPF_Const | CPF_ExportObject)
	struct FColor                                      CylinderColor;                                 // 0x01E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bDrawBoundingBox : 1;                          // 0x01E4 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bDrawNonColliding : 1;                         // 0x01E4 (0x0004) [0x0000000000000002] [0x00000002] (CPF_Const)
	uint32_t                                           bAlwaysRenderIfSelected : 1;                   // 0x01E4 (0x0004) [0x0000000000000002] [0x00000004] (CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CylinderComponent");
		}

		return uClassPointer;
	};

	void SetCylinderSize(float NewRadius, float NewHeight);
};

// Class Engine.DrawBoxComponent
// 0x0018 (0x01D8 - 0x01F0)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                      // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterial*                                   BoxMaterial;                                   // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     BoxExtent;                                     // 0x01E0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDrawWireBox : 1;                              // 0x01EC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDrawLitBox : 1;                               // 0x01EC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDrawOnlyIfSelected : 1;                       // 0x01EC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawBoxComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawCapsuleComponent
// 0x0014 (0x01D8 - 0x01EC)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                  // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterial*                                   CapsuleMaterial;                               // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CapsuleHeight;                                 // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CapsuleRadius;                                 // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDrawWireCapsule : 1;                          // 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDrawLitCapsule : 1;                           // 0x01E8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDrawOnlyIfSelected : 1;                       // 0x01E8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawCapsuleComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawConeComponent
// 0x0010 (0x01D8 - 0x01E8)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                     // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ConeRadius;                                    // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ConeAngle;                                     // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ConeSides;                                     // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawConeComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawCylinderComponent
// 0x0020 (0x01D8 - 0x01F8)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                 // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterial*                                   CylinderMaterial;                              // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CylinderRadius;                                // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CylinderTopRadius;                             // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CylinderHeight;                                // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CylinderHeightOffset;                          // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CylinderSides;                                 // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDrawWireCylinder : 1;                         // 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDrawLitCylinder : 1;                          // 0x01F4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDrawOnlyIfSelected : 1;                       // 0x01F4 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawCylinderComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawFrustumComponent
// 0x0018 (0x01D8 - 0x01F0)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                  // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrustumAngle;                                  // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrustumAspectRatio;                            // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrustumStartDist;                              // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrustumEndDist;                                // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    Texture;                                       // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawFrustumComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawQuadComponent
// 0x000C (0x01D8 - 0x01E4)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                       // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Width;                                         // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Height;                                        // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawQuadComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawSphereComponent
// 0x0014 (0x01D8 - 0x01EC)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                   // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterial*                                   SphereMaterial;                                // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SphereRadius;                                  // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SphereSides;                                   // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDrawWireSphere : 1;                           // 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDrawLitSphere : 1;                            // 0x01E8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDrawOnlyIfSelected : 1;                       // 0x01E8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawSphereComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawPylonRadiusComponent
// 0x0000 (0x01EC - 0x01EC)
class UDrawPylonRadiusComponent : public UDrawSphereComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawPylonRadiusComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawSoundRadiusComponent
// 0x0000 (0x01EC - 0x01EC)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawSoundRadiusComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelGridVolumeRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class ULevelGridVolumeRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelGridVolumeRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.LineBatchComponent
// 0x0024 (0x01D8 - 0x01FC)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                // 0x01D8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    FPrimitiveDrawInterfaceView;                   // 0x01DC (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class TArray<struct FPointer>                      BatchedLines;                                  // 0x01E0 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      BatchedPoints;                                 // 0x01EC (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	float                                              DefaultLifeTime;                               // 0x01F8 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LineBatchComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ModelComponent
// 0x0024 (0x01D8 - 0x01FC)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                         // 0x01D8 (0x0004) [0x0000000000803002] (CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport)
	int32_t                                            ZoneIndex;                                     // 0x01DC (0x0004) [0x0000000000803002] (CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport)
	int32_t                                            ComponentIndex;                                // 0x01E0 (0x0004) [0x0000000000803002] (CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport)
	class TArray<struct FPointer>                      Nodes;                                         // 0x01E4 (0x000C) [0x0000000000803002] (CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport)
	class TArray<struct FPointer>                      Elements;                                      // 0x01F0 (0x000C) [0x0000000000803002] (CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ModelComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.SpriteComponent
// 0x0024 (0x01D8 - 0x01FC)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                        // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIsScreenSizeScaled : 1;                       // 0x01DC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              ScreenSize;                                    // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              U;                                             // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              UL;                                            // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              V;                                             // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VL;                                            // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SpriteCategoryName;                            // 0x01F4 (0x0008) [0x0000000000000000] (CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpriteComponent");
		}

		return uClassPointer;
	};

	void SetSpriteAndUV(class UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);
	void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);
	void SetSprite(class UTexture2D* NewSprite);
};

// Class Engine.RadialBlurComponent
// 0x006B (0x0055 - 0x00C0)
class URadialBlurComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          Material;                                      // 0x0058 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESceneDepthPriorityGroup                           DepthPriorityGroup;                            // 0x005C (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BlurScale;                                     // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              BlurFalloffExponent;                           // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              BlurOpacity;                                   // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              MaxCullDistance;                               // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              DistanceFalloffExponent;                       // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bRenderAsVelocity : 1;                         // 0x0074 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnabled : 1;                                  // 0x0074 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint8_t                                            UnknownData00[0x8];                              // 0x0078 (0x0008) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                  // 0x0080 (0x0040) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RadialBlurComponent");
		}

		return uClassPointer;
	};

	void OnUpdatePropertyBlurOpacity();
	void OnUpdatePropertyBlurFalloffExponent();
	void OnUpdatePropertyBlurScale();
	void SetEnabled(bool bInEnabled);
	void SetBlurOpacity(float InBlurOpacity);
	void SetBlurFalloffExponent(float InBlurFalloffExponent);
	void SetBlurScale(float InBlurScale);
	void SetMaterial(class UMaterialInterface* InMaterial);
};

// Class Engine.SceneCaptureComponent
// 0x003B (0x0055 - 0x0090)
class USceneCaptureComponent : public UActorComponent
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnablePostProcess : 1;                        // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEnableFog : 1;                                // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseMainScenePostProcessSettings : 1;          // 0x0058 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bSkipUpdateIfTextureUsersOccluded : 1;         // 0x0058 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bSkipUpdateIfOwnerOccluded : 1;                // 0x0058 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bSkipRenderingDepthPrepass : 1;                // 0x0058 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	struct FColor                                      ClearColor;                                    // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	ESceneCaptureViewMode                              ViewMode;                                      // 0x0060 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SceneLOD;                                      // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrameRate;                                     // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPostProcessChain*                           PostProcess;                                   // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxUpdateDist;                                 // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxViewDistanceOverride;                       // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxStreamingUpdateDist;                        // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    CaptureInfo;                                   // 0x007C (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    ViewState;                                     // 0x0080 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      PostProcessProxies;                            // 0x0084 (0x000C) [0x0000000001203002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCaptureComponent");
		}

		return uClassPointer;
	};

	void SetEnabled(bool bEnable);
	void SetFrameRate(float NewFrameRate);
};

// Class Engine.SceneCapture2DComponent
// 0x00A0 (0x0090 - 0x0130)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                 // 0x0090 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FieldOfView;                                   // 0x0094 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              NearPlane;                                     // 0x0098 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              FarPlane;                                      // 0x009C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bUpdateMatrices : 1;                           // 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint8_t                                            UnknownData00[0xC];                              // 0x00A4 (0x000C) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                    // 0x00B0 (0x0040) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FMatrix                                     ProjMatrix;                                    // 0x00F0 (0x0040) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCapture2DComponent");
		}

		return uClassPointer;
	};

	void SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetCaptureParameters(class UTextureRenderTarget2D* optionalNewTextureTarget, float optionalNewFOV, float optionalNewNearPlane, float optionalNewFarPlane);
};

// Class Engine.SceneCapture2DHitMaskComponent
// 0x0024 (0x0090 - 0x00B4)
class USceneCapture2DHitMaskComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                 // 0x0090 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class USkeletalMeshComponent*                      SkeletalMeshComp;                              // 0x0094 (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	int32_t                                            MaterialIndex;                                 // 0x0098 (0x0004) [0x0000000000000000]               
	int32_t                                            ForceLOD;                                      // 0x009C (0x0004) [0x0000000000000000]               
	int32_t                                            HitMaskCullDistance;                           // 0x00A0 (0x0004) [0x0000000000000000]               
	float                                              FadingStartTimeSinceHit;                       // 0x00A4 (0x0004) [0x0000000000000000]               
	float                                              FadingPercentage;                              // 0x00A8 (0x0004) [0x0000000000000000]               
	float                                              FadingDurationTime;                            // 0x00AC (0x0004) [0x0000000000000000]               
	float                                              FadingIntervalTime;                            // 0x00B0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCapture2DHitMaskComponent");
		}

		return uClassPointer;
	};

	void SetFadingStartTimeSinceHit(float InFadingStartTimeSinceHit);
	void SetCaptureParameters(const struct FVector& InMaskPosition, float InMaskRadius, const struct FVector& InStartupPosition, bool bOnlyWhenFacing);
	void SetCaptureTargetTexture(class UTextureRenderTarget2D* InTextureTarget);
};

// Class Engine.SceneCaptureCubeMapComponent
// 0x0018 (0x0090 - 0x00A8)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                 // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NearPlane;                                     // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FarPlane;                                      // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     WorldLocation;                                 // 0x009C (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCaptureCubeMapComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.SceneCapturePortalComponent
// 0x000C (0x0090 - 0x009C)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                 // 0x0090 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ScaleFOV;                                      // 0x0094 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class AActor*                                      ViewDestination;                               // 0x0098 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCapturePortalComponent");
		}

		return uClassPointer;
	};

	void SetCaptureParameters(class UTextureRenderTarget2D* optionalNewTextureTarget, float optionalNewScaleFOV, class AActor* optionalNewViewDest);
};

// Class Engine.SceneCaptureReflectComponent
// 0x0008 (0x0090 - 0x0098)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                 // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ScaleFOV;                                      // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SceneCaptureReflectComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.WindDirectionalSourceComponent
// 0x0017 (0x0055 - 0x006C)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneProxy;                                    // 0x0058 (0x0004) [0x0000000001003002] (CPF_Const | CPF_Native | CPF_Transient)
	float                                              Strength;                                      // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              Phase;                                         // 0x0060 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              Frequency;                                     // 0x0064 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              Speed;                                         // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.WindPointSourceComponent
// 0x0008 (0x006C - 0x0074)
class UWindPointSourceComponent : public UWindDirectionalSourceComponent
{
public:
	class UDrawSphereComponent*                        PreviewRadiusComponent;                        // 0x006C (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              Radius;                                        // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WindPointSourceComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactory
// 0x002C (0x003C - 0x0068)
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                            // 0x003C (0x0004) [0x0000000000000000]               
	class FString                                      MenuName;                                      // 0x0040 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            MenuPriority;                                  // 0x004C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            AlternateMenuPriority;                         // 0x0050 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	class FString                                      NewActorClassName;                             // 0x0054 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      NewActorClass;                                 // 0x0060 (0x0004) [0x0000000000000000]               
	uint32_t                                           bPlaceable : 1;                                // 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bShowInEditorQuickMenu : 1;                    // 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactory");
		}

		return uClassPointer;
	};

	void eventPostCreateActor(class AActor* NewActor, class USeqAct_ActorFactory* optionalActorFactoryData);
};

// Class Engine.ActorFactoryActor
// 0x0004 (0x0068 - 0x006C)
class UActorFactoryActor : public UActorFactory
{
public:
	class UClass*                                      ActorClass;                                    // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryActor");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryAI
// 0x0028 (0x0068 - 0x0090)
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                               // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      PawnClass;                                     // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      PawnName;                                      // 0x0070 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bGiveDefaultInventory : 1;                     // 0x007C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<class UClass*>                        InventoryList;                                 // 0x0080 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            TeamIndex;                                     // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryAI");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryAmbientSound
// 0x0004 (0x0068 - 0x006C)
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                               // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryAmbientSound");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryAmbientSoundMovable
// 0x0000 (0x006C - 0x006C)
class UActorFactoryAmbientSoundMovable : public UActorFactoryAmbientSound
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryAmbientSoundSimple
// 0x0004 (0x0068 - 0x006C)
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                 // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundSimple");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryAmbientSoundNonLoop
// 0x0000 (0x006C - 0x006C)
class UActorFactoryAmbientSoundNonLoop : public UActorFactoryAmbientSoundSimple
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundNonLoop");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryAmbientSoundSimpleToggleable
// 0x0000 (0x006C - 0x006C)
class UActorFactoryAmbientSoundSimpleToggleable : public UActorFactoryAmbientSoundSimple
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundSimpleToggleable");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryAmbientSoundNonLoopingToggleable
// 0x0000 (0x006C - 0x006C)
class UActorFactoryAmbientSoundNonLoopingToggleable : public UActorFactoryAmbientSoundSimpleToggleable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundNonLoopingToggleable");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryApexDestructible
// 0x0010 (0x0068 - 0x0078)
class UActorFactoryApexDestructible : public UActorFactory
{
public:
	uint32_t                                           bStartAwake : 1;                               // 0x0068 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	ERBCollisionChannel                                RBChannel;                                     // 0x006C (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRBCollisionChannelContainer                CollideWithChannels;                           // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UApexDestructibleAsset*                      DestructibleAsset;                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryApexDestructible");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryArchetype
// 0x0004 (0x0068 - 0x006C)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryArchetype");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryCoverLink
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryCoverLink : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryCoverLink");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryDominantDirectionalLight
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryDominantDirectionalLight : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryDominantDirectionalLight");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryDominantDirectionalLightMovable
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryDominantDirectionalLightMovable : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryDominantDirectionalLightMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryDynamicSM
// 0x0015 (0x0068 - 0x007D)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                    // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     DrawScale3D;                                   // 0x006C (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoEncroachCheck : 1;                          // 0x0078 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNotifyRigidBodyCollision : 1;                 // 0x0078 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBlockRigidBody : 1;                           // 0x0078 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseCompartment : 1;                           // 0x0078 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCastDynamicShadow : 1;                        // 0x0078 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	ECollisionType                                     CollisionType;                                 // 0x007C (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryDynamicSM");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryMover
// 0x0003 (0x007D - 0x0080)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryMover");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryRigidBody
// 0x0027 (0x007D - 0x00A4)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	uint32_t                                           bStartAwake : 1;                               // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDamageAppliesImpulse : 1;                     // 0x0080 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bLocalSpaceInitialVelocity : 1;                // 0x0080 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bEnableStayUprightSpring : 1;                  // 0x0080 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	struct FVector                                     InitialVelocity;                               // 0x0084 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UDistributionVector*                         AdditionalVelocity;                            // 0x0090 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDistributionVector*                         InitialAngularVelocity;                        // 0x0094 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	ERBCollisionChannel                                RBChannel;                                     // 0x0098 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              StayUprightTorqueFactor;                       // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StayUprightMaxTorque;                          // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryRigidBody");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryEmitter
// 0x0004 (0x0068 - 0x006C)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryEmitter");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryFracturedStaticMesh
// 0x0010 (0x0068 - 0x0078)
class UActorFactoryFracturedStaticMesh : public UActorFactory
{
public:
	class UFracturedStaticMesh*                        FracturedStaticMesh;                           // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     DrawScale3D;                                   // 0x006C (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryFracturedStaticMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryLensFlare
// 0x0004 (0x0068 - 0x006C)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                               // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryLensFlare");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryLight
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryLight : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryLight");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryPathNode
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryPathNode : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryPathNode");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryPhysicsAsset
// 0x0024 (0x0068 - 0x008C)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                  // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               SkeletalMesh;                                  // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStartAwake : 1;                               // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDamageAppliesImpulse : 1;                     // 0x0070 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bNotifyRigidBodyCollision : 1;                 // 0x0070 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseCompartment : 1;                           // 0x0070 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCastDynamicShadow : 1;                        // 0x0070 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	struct FVector                                     InitialVelocity;                               // 0x0074 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     DrawScale3D;                                   // 0x0080 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryPhysicsAsset");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryPlayerStart
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryPlayerStart");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryPylon
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryPylon : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryPylon");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactorySkeletalMesh
// 0x0010 (0x0068 - 0x0078)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                  // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UAnimSet*                                    AnimSet;                                       // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimSequenceName;                              // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactorySkeletalMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryStaticMesh
// 0x0010 (0x0068 - 0x0078)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                    // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     DrawScale3D;                                   // 0x006C (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryStaticMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryTrigger
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryTrigger : public UActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryTrigger");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryVehicle
// 0x0004 (0x0068 - 0x006C)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                  // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryVehicle");
		}

		return uClassPointer;
	};

};

// Class Engine.BookMark
// 0x0024 (0x003C - 0x0060)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                      // 0x003C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    Rotation;                                      // 0x0048 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class TArray<class FString>                        HiddenLevels;                                  // 0x0054 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.BookMark");
		}

		return uClassPointer;
	};

};

// Class Engine.BookMark2D
// 0x000C (0x003C - 0x0048)
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                        // 0x003C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FIntPoint                                   Location;                                      // 0x0040 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.BookMark2D");
		}

		return uClassPointer;
	};

};

// Class Engine.KismetBookMark
// 0x000C (0x0048 - 0x0054)
class UKismetBookMark : public UBookMark2D
{
public:
	class FString                                      BookMarkSequencePathName;                      // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.KismetBookMark");
		}

		return uClassPointer;
	};

};

// Class Engine.Canvas
// 0x0058 (0x003C - 0x0094)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                          // 0x003C (0x0004) [0x0000000000000000]               
	float                                              OrgX;                                          // 0x0040 (0x0004) [0x0000000000000000]               
	float                                              OrgY;                                          // 0x0044 (0x0004) [0x0000000000000000]               
	float                                              ClipX;                                         // 0x0048 (0x0004) [0x0000000000000000]               
	float                                              ClipY;                                         // 0x004C (0x0004) [0x0000000000000000]               
	float                                              CurX;                                          // 0x0050 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              CurY;                                          // 0x0054 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              CurZ;                                          // 0x0058 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              CurYL;                                         // 0x005C (0x0004) [0x0000000000000000]               
	struct FColor                                      DrawColor;                                     // 0x0060 (0x0004) [0x0000000000000000]               
	uint32_t                                           bCenter : 1;                                   // 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bNoSmooth : 1;                                 // 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	int32_t                                            SizeX;                                         // 0x0068 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SizeY;                                         // 0x006C (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FPointer                                    Canvas;                                        // 0x0070 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    SceneView;                                     // 0x0074 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint8_t                                            UnknownData00[0x8];                              // 0x0078 (0x0008) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                 // 0x0080 (0x0010) [0x0000000000000000]               
	class UTexture2D*                                  DefaultTexture;                                // 0x0090 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Canvas");
		}

		return uClassPointer;
	};

	void DrawDebugGraph(const class FString& Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, const struct FVector2D& RangeX, const struct FVector2D& RangeY);
	void DrawTextureDoubleLineW(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Spacing, float Width, const struct FColor& LineColor, const struct FColor& AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL);
	void DrawTextureLineW(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Width, const struct FColor& LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL);
	void Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor);
	void SetDrawColorStruct(const struct FColor& C);
	void SetDrawColor(uint8_t R, uint8_t G, uint8_t B, uint8_t optionalA);
	void DrawBox(float Width, float Height);
	void DrawRect(float RectX, float RectY, class UTexture* optionalTex);
	void DrawIcon(const struct FCanvasIcon& Icon, float X, float Y, float optionalScale);
	void DrawScaledIcon(const struct FCanvasIcon& Icon, float X, float Y, const struct FVector& Scale);
	struct FCanvasIcon MakeIcon(class UTexture* Texture, float optionalU, float optionalV, float optionalUL, float optionalVL);
	void DrawBlendedTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, ECanvasBlendMode Blend);
	void DrawTextureW(class UTexture* Tex, float Scale);
	void PopMaskRegion();
	void PushMaskRegion(float X, float Y, float XL, float YL);
	void SetClip(float X, float Y);
	void SetOrigin(float X, float Y);
	void SetPos(float PosX, float PosY, float optionalPosZ);
	class UFont* GetDefaultCanvasFont();
	void eventReset(bool optionalBKeepOrigin);
	void PopTransform();
	void PushTranslationMatrix(const struct FVector& TranslationVector);
	void DeProject(const struct FVector2D& ScreenPos, struct FVector& outWorldOrigin, struct FVector& outWorldDirection);
	struct FVector Project(const struct FVector& Location);
	void DrawTextW(const class FString& Text, bool optionalCR, float optionalXScale, float optionalYScale, struct FFontRenderInfo& outRenderInfo);
	void TextSize(const class FString& String, float optionalXScale, float optionalYScale, float& outXL, float& outYL);
	void StrLen(const class FString& String, float& outXL, float& outYL);
	static struct FFontRenderInfo CreateFontRenderInfo(bool optionalBClipText, bool optionalBEnableShadow, const struct FLinearColor& optionalGlowColor, const struct FVector2D& optionalGlowOuterRadius, const struct FVector2D& optionalGlowInnerRadius);
	void DrawTris(class UTexture* Tex, const class TArray<struct FCanvasUVTri>& Triangles, const struct FColor& InColor);
	void DrawTileStretched(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& optionalLColor, bool optionalBStretchHorizontally, bool optionalBStretchVertically, float optionalScalingFactor);
	void DrawTimer(class UTexture* Tex, float StartTime, float TotalTime, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& optionalLColor, EBlendMode optionalBlend);
	void DrawRotatedMaterialTile(class UMaterialInterface* Mat, const struct FRotator& Rotation, float XL, float YL, float optionalU, float optionalV, float optionalUL, float optionalVL, float optionalAnchorX, float optionalAnchorY);
	void DrawRotatedTile(class UTexture* Tex, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float optionalAnchorX, float optionalAnchorY);
	void DrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL, float optionalU, float optionalV, float optionalUL, float optionalVL, bool optionalBClipTile);
	void PreOptimizeDrawTiles(int32_t Num, class UTexture* Tex, EBlendMode optionalBlend);
	void DrawTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& optionalLColor, bool optionalClipTile, EBlendMode optionalBlend);
};

// Class Engine.Channel
// 0x0034 (0x003C - 0x0070)
class UChannel : public UObject
{
public:
	uint8_t                                            UnknownData00[0x34];                            // 0x003C (0x0034) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Channel");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorChannel
// 0x005C (0x0070 - 0x00CC)
class UActorChannel : public UChannel
{
public:
	uint8_t                                            UnknownData00[0x5C];                            // 0x0070 (0x005C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorChannel");
		}

		return uClassPointer;
	};

};

// Class Engine.ControlChannel
// 0x0010 (0x0070 - 0x0080)
class UControlChannel : public UChannel
{
public:
	uint8_t                                            UnknownData00[0x10];                            // 0x0070 (0x0010) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ControlChannel");
		}

		return uClassPointer;
	};

};

// Class Engine.FileChannel
// 0x0210 (0x0070 - 0x0280)
class UFileChannel : public UChannel
{
public:
	uint8_t                                            UnknownData00[0x210];                          // 0x0070 (0x0210) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FileChannel");
		}

		return uClassPointer;
	};

};

// Class Engine.VoiceChannel
// 0x000C (0x0070 - 0x007C)
class UVoiceChannel : public UChannel
{
public:
	uint8_t                                            UnknownData00[0xC];                              // 0x0070 (0x000C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.VoiceChannel");
		}

		return uClassPointer;
	};

};

// Class Engine.Controller
// 0x0184 (0x01C8 - 0x034C)
class AController : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;           // 0x01C8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class APawn*                                       Pawn;                                          // 0x01CC (0x0004) [0x0000000004000020] (CPF_Net | CPF_EditInline | CPF_RepNotify)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                         // 0x01D0 (0x0004) [0x0000000004000020] (CPF_Net | CPF_EditInline | CPF_RepNotify)
	int32_t                                            PlayerNum;                                     // 0x01D4 (0x0004) [0x0000000000000002] (CPF_Const)   
	class AController*                                 NextController;                                // 0x01D8 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bIsPlayer : 1;                                 // 0x01DC (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bGodMode : 1;                                  // 0x01DC (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bSoaking : 1;                                  // 0x01DC (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bSlowerZAcquire : 1;                           // 0x01DC (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bNotifyPostLanded : 1;                         // 0x01DC (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bNotifyApex : 1;                               // 0x01DC (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bOverrideSearchStart : 1;                      // 0x01DC (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bAdvancedTactics : 1;                          // 0x01DC (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bCanDoSpecial : 1;                             // 0x01DC (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bAdjusting : 1;                                // 0x01DC (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bPreparingMove : 1;                            // 0x01DC (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bForceStrafe : 1;                              // 0x01DC (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bLOSflag : 1;                                  // 0x01DC (0x0004) [0x0000000000000002] [0x00001000] (CPF_Const)
	uint32_t                                           bSkipExtraLOSChecks : 1;                       // 0x01DC (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bNotifyFallingHitWall : 1;                     // 0x01DC (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bEarlyOutOfSighTestsForSameType : 1;           // 0x01DC (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bPreciseDestination : 1;                       // 0x01DC (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bSeeFriendly : 1;                              // 0x01DC (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bUsingPathLanes : 1;                           // 0x01DC (0x0004) [0x0000000000000000] [0x00040000] 
	uint8_t                                            bFire;                                         // 0x01E0 (0x0001) [0x0000000000000004] (CPF_Input)   
	uint8_t                                            bAltFire;                                      // 0x01E1 (0x0001) [0x0000000000000004] (CPF_Input)   
	float                                              MinHitWall;                                    // 0x01E4 (0x0004) [0x0000000000000000]               
	class UClass*                                      NavigationHandleClass;                         // 0x01E8 (0x0004) [0x0000000000000000]               
	class UNavigationHandle*                           NavigationHandle;                              // 0x01EC (0x0004) [0x0000000004000000] (CPF_EditInline)
	struct FVector                                     OverrideSearchStart;                           // 0x01F0 (0x000C) [0x0000000000000000]               
	float                                              MoveTimer;                                     // 0x01FC (0x0004) [0x0000000000000000]               
	class AActor*                                      MoveTarget;                                    // 0x0200 (0x0004) [0x0000000000000000]               
	struct FBasedPosition                              DestinationPosition;                           // 0x0204 (0x0034) [0x0000000000000000]               
	struct FBasedPosition                              FocalPosition;                                 // 0x0238 (0x0034) [0x0000000000000000]               
	class AActor*                                      Focus;                                         // 0x026C (0x0004) [0x0000000000000000]               
	class AActor*                                      GoalList[4];                                   // 0x0270 (0x0010) [0x0000000000000000]               
	struct FBasedPosition                              AdjustPosition;                                // 0x0280 (0x0034) [0x0000000000000000]               
	class ANavigationPoint*                            StartSpot;                                     // 0x02B4 (0x0004) [0x0000000000000000]               
	class TArray<class ANavigationPoint*>              RouteCache;                                    // 0x02B8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UReachSpec*                                  CurrentPath;                                   // 0x02C4 (0x0004) [0x0000000000000000]               
	class UReachSpec*                                  NextRoutePath;                                 // 0x02C8 (0x0004) [0x0000000000000000]               
	struct FVector                                     CurrentPathDir;                                // 0x02CC (0x000C) [0x0000000000000000]               
	class AActor*                                      RouteGoal;                                     // 0x02D8 (0x0004) [0x0000000000000000]               
	float                                              RouteDist;                                     // 0x02DC (0x0004) [0x0000000000000000]               
	float                                              LastRouteFind;                                 // 0x02E0 (0x0004) [0x0000000000000000]               
	class AInterpActor*                                PendingMover;                                  // 0x02E4 (0x0004) [0x0000000000000000]               
	class AActor*                                      FailedMoveTarget;                              // 0x02E8 (0x0004) [0x0000000000000000]               
	int32_t                                            MoveFailureCount;                              // 0x02EC (0x0004) [0x0000000000000000]               
	float                                              GroundPitchTime;                               // 0x02F0 (0x0004) [0x0000000000000000]               
	class APawn*                                       ShotTarget;                                    // 0x02F4 (0x0004) [0x0000000000000000]               
	class AActor*                                      LastFailedReach;                               // 0x02F8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              FailedReachTime;                               // 0x02FC (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     FailedReachLocation;                           // 0x0300 (0x000C) [0x0000000000000002] (CPF_Const)   
	float                                              SightCounter;                                  // 0x030C (0x0004) [0x0000000000000000]               
	float                                              SightCounterInterval;                          // 0x0310 (0x0004) [0x0000000000000000]               
	float                                              InUseNodeCostMultiplier;                       // 0x0314 (0x0004) [0x0000000000000000]               
	int32_t                                            HighJumpNodeCostModifier;                      // 0x0318 (0x0004) [0x0000000000000000]               
	float                                              MaxMoveTowardPawnTargetTime;                   // 0x031C (0x0004) [0x0000000000000000]               
	class APawn*                                       Enemy;                                         // 0x0320 (0x0004) [0x0000000000000000]               
	class TArray<struct FVisiblePortalInfo>            VisiblePortals;                                // 0x0324 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              LaneOffset;                                    // 0x0330 (0x0004) [0x0000000000000000]               
	struct FRotator                                    OldBasedRotation;                              // 0x0334 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     NavMeshPath_SearchExtent_Modifier;             // 0x0340 (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Controller");
		}

		return uClassPointer;
	};

	bool eventGeneratePathToLocation(const struct FVector& Goal, float optionalWithinDistance, bool optionalBAllowPartialPath);
	bool eventGeneratePathToActor(class AActor* Goal, float optionalWithinDistance, bool optionalBAllowPartialPath);
	void eventInterpolationFinished(class USeqAct_Interp* InterpAction);
	void eventInterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void InitNavigationHandle();
	void ReadyForLift();
	void SendMessageW(class APlayerReplicationInfo* Recipient, const class FName& MessageType, float Wait, class UClass* optionalDamageType);
	void eventCurrentLevelUnloaded();
	bool eventIsInCombat(bool optionalBForceCheck);
	bool eventIsSpectating();
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void NotifyAddInventory(class AInventory* NewItem);
	void OnModifyHealth(class USeqAct_ModifyHealth* Action);
	bool NotifyCoverClaimViolation(class AController* NewClaim, class ACoverLink* Link, int32_t SlotIdx);
	void eventNotifyCoverAdjusted();
	void NotifyCoverDisabled(class ACoverLink* Link, int32_t SlotIdx, bool optionalBAdjacentIdx);
	void OnSetVelocity(class USeqAct_SetVelocity* Action);
	void OnSetPhysics(class USeqAct_SetPhysics* Action);
	void OnToggleGodMode(class USeqAct_ToggleGodMode* inAction);
	void OnAttachToActor(class USeqAct_AttachToActor* Action);
	void OnTeleport(class USeqAct_Teleport* Action);
	bool IsDead();
	class FString GetHumanReadableName();
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void StopLatentExecution();
	bool InLatentExecution(int32_t LatentActionNumber);
	void eventReachedPreciseDestination();
	void eventNotifyMissedJump();
	void eventNotifyJumpApex();
	bool eventNotifyBump(class AActor* Other, const struct FVector& HitNormal);
	void eventNotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall);
	bool eventNotifyHitWall(const struct FVector& HitNormal, class AActor* Wall);
	bool eventNotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	bool eventNotifyHeadVolumeChange(class APhysicsVolume* NewVolume);
	void eventNotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume);
	bool LandingShake();
	bool IsAimingAt(class AActor* ATarget, float Epsilon);
	void eventGetActorEyesViewPoint(struct FVector& outOut_Location, struct FRotator& outOut_Rotation);
	void eventGetPlayerViewPoint(struct FVector& outOut_Location, struct FRotator& outOut_Rotation);
	bool eventHandlePathObstruction(class AActor* BlockedBy);
	void UnderLift(class ALiftCenter* Lift);
	bool eventMoverFinished();
	void WaitForMover(class AInterpActor* M);
	bool eventAllowDetourTo(class ANavigationPoint* N);
	void eventMayFall(bool bFloor, const struct FVector& FloorNormal);
	void EndClimbLadder();
	void eventLongFall();
	void WaitForLanding(float optionalWaitDuration);
	bool PickWallAdjust(const struct FVector& HitNormal);
	void eventMoveUnreachable(const struct FVector& AttemptedDest, class AActor* AttemptedTarget);
	bool ActorReachable(class AActor* anActor);
	bool PointReachable(const struct FVector& aPoint);
	class AActor* FindPathToIntercept(class APawn* P, class AActor* InRouteGoal, bool optionalBWeightDetours, int32_t optionalMaxPathLength, bool optionalBReturnPartial);
	class ANavigationPoint* FindRandomDest();
	class AActor* FindPathTowardNearest(class UClass* GoalClass, bool optionalBWeightDetours, int32_t optionalMaxPathLength, bool optionalBReturnPartial);
	class AActor* FindPathToward(class AActor* anActor, bool optionalBWeightDetours, int32_t optionalMaxPathLength, bool optionalBReturnPartial);
	class AActor* FindPathTo(const struct FVector& aPoint, int32_t optionalMaxPathLength, bool optionalBReturnPartial);
	void FinishRotation();
	void eventSetupSpecialPathAbilities();
	void MoveToward(class AActor* NewTarget, class AActor* optionalViewFocus, float optionalDestinationOffset, bool optionalBUseStrafing, bool optionalBShouldWalk);
	void MoveToDirectNonPathPos(const struct FVector& NewDestination, class AActor* optionalViewFocus, float optionalDestinationOffset, bool optionalBShouldWalk);
	void MoveTo(const struct FVector& NewDestination, class AActor* optionalViewFocus, float optionalDestinationOffset, bool optionalBShouldWalk);
	void eventEnemyNotVisible();
	void eventSeeMonster(class APawn* Seen);
	void eventSeePlayer(class APawn* Seen);
	void eventHearNoise(float Loudness, class AActor* NoiseMaker, const class FName& optionalNoiseType);
	class APawn* PickTarget(class UClass* TargetClass, const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float& outBestAim, float& outBestDist);
	bool CanSeeByPoints(const struct FVector& ViewLocation, const struct FVector& TestLocation, const struct FRotator& ViewRotation);
	bool CanSee(class APawn* Other);
	bool LineOfSightTo(class AActor* Other, const struct FVector& optionalChkLocation, bool optionalBTryAlternateTargetLoc);
	void NotifyChangedWeapon(class AWeapon* PrevWeapon, class AWeapon* NewWeapon);
	void ClientSwitchToBestWeapon(bool optionalBForceNewWeapon);
	void SwitchToBestWeapon(bool optionalBForceNewWeapon);
	void ReceiveProjectileWarning(class AProjectile* Proj);
	void ReceiveWarning(class APawn* shooter, float projSpeed, const struct FVector& FireDir);
	void InstantWarnTarget(class AActor* InTarget, class AWeapon* FiredWeapon, const struct FVector& FireDir);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	void HandlePickup(class AInventory* Inv);
	void RoundHasEnded(class AActor* optionalEndRoundFocus);
	void eventStopFiring();
	bool FireWeaponAt(class AActor* inActor);
	float eventRatePickup(class AActor* PickupHolder, class UClass* inPickup);
	void WarnProjExplode(class AProjectile* Proj);
	void NotifyProjLanded(class AProjectile* Proj);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp);
	void GameHasEnded(class AActor* optionalEndGameFocus, bool optionalBIsWinner);
	void SetCharacter(const class FString& inCharacter);
	void ServerGivePawn();
	void ServerRestartPlayer();
	uint8_t GetTeamNum();
	void InitPlayerReplicationInfo();
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int32_t Damage, class UClass* DamageType, const struct FVector& Momentum);
	void EnemyJustTeleported();
	bool BeyondFogDistance(const struct FVector& ViewPoint, const struct FVector& OtherPoint);
	void Restart(bool bVehicleTransition);
	void CleanupPRI();
	void eventDestroyed();
	void eventNotifyPostLanded();
	bool GamePlayEndedState();
	void PawnDied(class APawn* inPawn);
	void eventUnPossess();
	void eventPossess(class APawn* inPawn, bool bVehicleTransition);
	void OnPossess(class USeqAct_Possess* inAction);
	void eventReplicatedEvent(const class FName& VarName);
	void ClientSetRotation(const struct FRotator& NewRotation, bool optionalBResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void Reset();
	void eventPostBeginPlay();
	void eventSetSkelControlScale(const class FName& SkelControlName, float Scale);
	void eventSetMorphWeight(const class FName& MorphNodeName, float MorphWeight);
	void eventStopActorFaceFXAnim();
	bool eventPlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const class FString& GroupName, const class FString& SeqName, class USoundCue* SoundCueToPlay);
	void eventFinishAnimControl(class UInterpGroup* InInterpGroup);
	void eventSetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void eventBeginAnimControl(class UInterpGroup* InInterpGroup);
	void eventNotifyPathChanged();
	struct FVector GetAdjustLocation();
	void SetAdjustLocation(const struct FVector& NewLoc, bool bAdjust, bool optionalBOffsetFromBase);
	struct FVector GetDestinationPosition();
	void SetDestinationPosition(const struct FVector& Dest, bool optionalBOffsetFromBase);
	struct FVector GetFocalPoint();
	void SetFocalPoint(const struct FVector& FP, bool optionalBOffsetFromBase);
	void RouteCache_RemoveIndex(int32_t InIndex, int32_t optionalCount);
	void RouteCache_RemoveItem(class ANavigationPoint* Nav);
	void RouteCache_InsertItem(class ANavigationPoint* Nav, int32_t optionalIdx);
	void RouteCache_AddItem(class ANavigationPoint* Nav);
	void RouteCache_Empty();
	bool IsLocalController();
	bool IsLocalPlayerController();
};

// Class Engine.PlayerController
// 0x0238 (0x034C - 0x0584)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                        // 0x034C (0x0004) [0x0000000000000002] (CPF_Const)   
	class ACamera*                                     PlayerCamera;                                  // 0x0350 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class UClass*                                      CameraClass;                                   // 0x0354 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bFrozen : 1;                                   // 0x0358 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bPressedJump : 1;                              // 0x0358 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bDoubleJump : 1;                               // 0x0358 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bUpdatePosition : 1;                           // 0x0358 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bUpdating : 1;                                 // 0x0358 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bNeverSwitchOnPickup : 1;                      // 0x0358 (0x0004) [0x0000000000044000] [0x00000020] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bCheatFlying : 1;                              // 0x0358 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bCameraPositionLocked : 1;                     // 0x0358 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bShortConnectTimeOut : 1;                      // 0x0358 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bPendingDestroy : 1;                           // 0x0358 (0x0004) [0x0000000000000002] [0x00000200] (CPF_Const)
	uint32_t                                           bWasSpeedHack : 1;                             // 0x0358 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bWasSaturated : 1;                             // 0x0358 (0x0004) [0x0000000000000002] [0x00000800] (CPF_Const)
	uint32_t                                           bAimingHelp : 1;                               // 0x0358 (0x0004) [0x0000000000044000] [0x00001000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bCameraCut : 1;                                // 0x0358 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           bClientSimulatingViewTarget : 1;               // 0x0358 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bHasVoiceHandshakeCompleted : 1;               // 0x0358 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bCinematicMode : 1;                            // 0x0358 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bInteractiveMode : 1;                          // 0x0358 (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bCinemaDisableInputMove : 1;                   // 0x0358 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bCinemaDisableInputLook : 1;                   // 0x0358 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bRenderHUDFullScreen : 1;                      // 0x0358 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bIgnoreNetworkMessages : 1;                    // 0x0358 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bShowKismetDrawText : 1;                       // 0x0358 (0x0004) [0x0000000000004000] [0x00400000] (CPF_Config)
	uint32_t                                           bReplicateAllPawns : 1;                        // 0x0358 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bIsUsingStreamingVolumes : 1;                  // 0x0358 (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bIsExternalUIOpen : 1;                         // 0x0358 (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bIsControllerConnected : 1;                    // 0x0358 (0x0004) [0x0000000000000000] [0x04000000] 
	uint32_t                                           bCheckSoundOcclusion : 1;                      // 0x0358 (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bDebugCameraAnims : 1;                         // 0x0358 (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bBlockCameraAnimsFromOverridingPostProcess : 1;// 0x0358 (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           bLogHearSoundOverflow : 1;                     // 0x0358 (0x0004) [0x0000000000044000] [0x40000000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bCheckRelevancyThroughPortals : 1;             // 0x0358 (0x0004) [0x0000000000044000] [0x80000000] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bDebugClientAdjustPosition : 1;                // 0x035C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              MaxResponseTime;                               // 0x0360 (0x0004) [0x0000000000000000]               
	float                                              WaitDelay;                                     // 0x0364 (0x0004) [0x0000000000000000]               
	class APawn*                                       AcknowledgedPawn;                              // 0x0368 (0x0004) [0x0000000000000000]               
	EDoubleClickDir                                    DoubleClickDir;                                // 0x036C (0x0001) [0x0000000000000000]               
	uint8_t                                            bIgnoreMoveInput;                              // 0x036D (0x0001) [0x0000000000000000]               
	uint8_t                                            bIgnoreLookInput;                              // 0x036E (0x0001) [0x0000000000000000]               
	uint8_t                                            bRun;                                          // 0x036F (0x0001) [0x0000000000000004] (CPF_Input)   
	uint8_t                                            bDuck;                                         // 0x0370 (0x0001) [0x0000000000000004] (CPF_Input)   
	uint8_t                                            NetPlayerIndex;                                // 0x0371 (0x0001) [0x0000000000200002] (CPF_Const)   
	class AActor*                                      ViewTarget;                                    // 0x0374 (0x0004) [0x0000000000000002] (CPF_Const)   
	class APlayerReplicationInfo*                      RealViewTarget;                                // 0x0378 (0x0004) [0x0000000000000000]               
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                       // 0x037C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FOVAngle;                                      // 0x0380 (0x0004) [0x0000000000000000]               
	float                                              DesiredFOV;                                    // 0x0384 (0x0004) [0x0000000000000000]               
	float                                              DefaultFOV;                                    // 0x0388 (0x0004) [0x0000000000000000]               
	float                                              LODDistanceFactor;                             // 0x038C (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FRotator                                    TargetViewRotation;                            // 0x0390 (0x000C) [0x0000000000000020] (CPF_Net)     
	float                                              TargetEyeHeight;                               // 0x039C (0x0004) [0x0000000000000020] (CPF_Net)     
	struct FRotator                                    BlendedTargetViewRotation;                     // 0x03A0 (0x000C) [0x0000000000000000]               
	class AHUD*                                        myHUD;                                         // 0x03AC (0x0004) [0x0000000000000000]               
	class AHUD*                                        mySecondaryHUD;                                // 0x03B0 (0x0004) [0x0000000000000000]               
	class UClass*                                      SavedMoveClass;                                // 0x03B4 (0x0004) [0x0000000000000000]               
	class USavedMove*                                  SavedMoves;                                    // 0x03B8 (0x0004) [0x0000000000000000]               
	class USavedMove*                                  FreeMoves;                                     // 0x03BC (0x0004) [0x0000000000000000]               
	class USavedMove*                                  PendingMove;                                   // 0x03C0 (0x0004) [0x0000000000000000]               
	struct FVector                                     LastAckedAccel;                                // 0x03C4 (0x000C) [0x0000000000000000]               
	float                                              CurrentTimeStamp;                              // 0x03D0 (0x0004) [0x0000000000000000]               
	float                                              LastUpdateTime;                                // 0x03D4 (0x0004) [0x0000000000000000]               
	float                                              ServerTimeStamp;                               // 0x03D8 (0x0004) [0x0000000000000000]               
	float                                              TimeMargin;                                    // 0x03DC (0x0004) [0x0000000000000000]               
	float                                              ClientUpdateTime;                              // 0x03E0 (0x0004) [0x0000000000000000]               
	float                                              MaxTimeMargin;                                 // 0x03E4 (0x0004) [0x0000000000000000]               
	float                                              LastActiveTime;                                // 0x03E8 (0x0004) [0x0000000000000000]               
	int32_t                                            ClientCap;                                     // 0x03EC (0x0004) [0x0000000000000000]               
	float                                              DynamicPingThreshold;                          // 0x03F0 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              LastPingUpdate;                                // 0x03F4 (0x0004) [0x0000000000000000]               
	float                                              LastSpeedHackLog;                              // 0x03F8 (0x0004) [0x0000000000000000]               
	struct FClientAdjustment                           PendingAdjustment;                             // 0x03FC (0x0034) [0x0000000000000000]               
	int32_t                                            GroundPitch;                                   // 0x0430 (0x0004) [0x0000000000000000]               
	class UCheatManager*                               CheatManager;                                  // 0x0434 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UClass*                                      CheatClass;                                    // 0x0438 (0x0004) [0x0000000000000000]               
	class UPlayerInput*                                PlayerInput;                                   // 0x043C (0x0004) [0x0000000004002001] (CPF_Edit | CPF_Transient | CPF_EditInline)
	class UClass*                                      InputClass;                                    // 0x0440 (0x0004) [0x0000000000000000]               
	struct FVector                                     FailedPathStart;                               // 0x0444 (0x000C) [0x0000000000000002] (CPF_Const)   
	class UCylinderComponent*                          CylinderComponent;                             // 0x0450 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class FString                                      ForceFeedbackManagerClassName;                 // 0x0454 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UForceFeedbackManager*                       ForceFeedbackManager;                          // 0x0460 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class UInteraction*>                  Interactions;                                  // 0x0464 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FUniqueNetId>                  VoiceMuteList;                                 // 0x0470 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FUniqueNetId>                  GameplayVoiceMuteList;                         // 0x047C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FUniqueNetId>                  VoicePacketFilter;                             // 0x0488 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FConnectedPeerInfo>            ConnectedPeers;                                // 0x0494 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FUniqueNetId>                  BestNextHostPeers;                             // 0x04A0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UOnlineGameSearch*                           MigratedSearchToJoin;                          // 0x04AC (0x0004) [0x0000000000000000]               
	class UOnlineSubsystem*                            OnlineSub;                                     // 0x04B0 (0x0004) [0x0000000000000000]               
	class UOnlineVoiceInterface*                       VoiceInterface_Object;                         // 0x04B4 (0x0004) [0x0000000000000000] 
	class UOnlineVoiceInterface*                       VoiceInterface_Interface;                      // 0x04B8 (0x0004) [0x0000000000000000]               
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                              // 0x04BC (0x0004) [0x0000000000000000]               
	float                                              InteractDistance;                              // 0x04C0 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FName                                        DelayedJoinSessionName;                        // 0x04C4 (0x0008) [0x0000000000000000]               
	class TArray<struct FInputMatchRequest>            InputRequests;                                 // 0x04CC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              LastBroadcastTime;                             // 0x04D8 (0x0004) [0x0000000000000000]               
	class FString                                      LastBroadcastString[4];                        // 0x04DC (0x0030) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FName>                          PendingMapChangeLevelNames;                    // 0x050C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class ACoverReplicator*                            MyCoverReplicator;                             // 0x0518 (0x0004) [0x0000000000000000]               
	class TArray<struct FDebugTextInfo>                DebugTextList;                                 // 0x051C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              SpectatorCameraSpeed;                          // 0x0528 (0x0004) [0x0000000000000000]               
	class UNetConnection*                              PendingSwapConnection;                         // 0x052C (0x0004) [0x0000000000200002] (CPF_Const)   
	float                                              MinRespawnDelay;                               // 0x0530 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxConcurrentHearSounds;                       // 0x0534 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class TArray<class UAudioComponent*>               HearSoundActiveComponents;                     // 0x0538 (0x000C) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UAudioComponent*>               HearSoundPoolComponents;                       // 0x0544 (0x000C) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class AActor*>                        HiddenActors;                                  // 0x0550 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              LastSpectatorStateSynchTime;                   // 0x055C (0x0004) [0x0000000000000000]               
	struct FScriptDelegate                             __OnMissingPeersUnregistered__Delegate;        // 0x0560 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __CanUnpause__Delegate;                        // 0x056C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __InputMatchDelegate__Delegate;                // 0x0578 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PlayerController");
		}

		return uClassPointer;
	};

	void eventSetMatineeConstantCameraAnim(bool bOn, uint8_t Type, float Rate);
	bool eventNotifyDisconnect(const class FString& Command);
	void ReceivedGameClass(class UClass* GameClass);
	void LogOutBugItAIGoToLogFile(const class FString& InScreenShotDesc, const class FString& InGoString, const class FString& InLocString);
	void LogOutBugItGoToLogFile(const class FString& InScreenShotDesc, const class FString& InGoString, const class FString& InLocString);
	void DisableDebugAI();
	void eventOnEngineInitialTick();
	void BugItStringCreator(struct FVector& outViewLocation, struct FRotator& outViewRotation, class FString& outGoString, class FString& outLocString);
	void BugItAI(const class FString& optionalScreenShotDescription);
	void LogLoc();
	void BugIt(const class FString& optionalScreenShotDescription);
	void BugItWorker(const struct FVector& TheLocation, const struct FRotator& TheRotation);
	void BugItGoString(const class FString& TheLocation, const class FString& TheRotation);
	void BugItGo(float X, float Y, float Z, int32_t Pitch, int32_t Yaw, int32_t Roll);
	bool HasPeerConnection(struct FUniqueNetId& outPeerNetId);
	void OnSetSoundMode(class USeqAct_SetSoundMode* Action);
	void eventClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void DebugCameraAnims();
	void eventClientStopCameraAnim(class UCameraAnim* AnimToStop, bool optionalBImmediate);
	void eventClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float optionalScale, float optionalRate, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBLoop, bool optionalBRandomStartTime, ECameraAnimPlaySpace optionalSpace, const struct FRotator& optionalCustomPlaySpace);
	void OnCameraShake(class USeqAct_CameraShake* inAction);
	void ClientStopCameraShake(class UCameraShake* Shake);
	void ClientPlayCameraShake(class UCameraShake* Shake, float optionalScale, bool optionalBTryForceFeedback, ECameraAnimPlaySpace optionalPlaySpace, const struct FRotator& optionalUserPlaySpaceRot);
	void DoForceFeedbackForScreenShake(class UCameraShake* ShakeData, float ShakeScale);
	void InputMatchDelegate();
	void Sentinel_PostAcquireTravelTheWorldPoints();
	void Sentinel_PreAcquireTravelTheWorldPoints();
	void Sentinel_SetupForGamebasedTravelTheWorld();
	void OnFlyThroughHasEnded(class USeqAct_FlyThroughHasEnded* inAction);
	bool eventGetAchievementProgression(int32_t AchievementId, float& outCurrentValue, float& outMaxValue);
	static class FString GetPartyGameTypeName();
	static class FString GetPartyMapName();
	bool IsPartyLeader();
	void eventClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void eventClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t optionalCinematicTextureGroups);
	void eventClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32_t optionalCinematicTextureGroups);
	void ClientControlMovieTexture(class UTextureMovie* MovieTexture, EMovieControlType Mode);
	int32_t GetSplitscreenPlayerCount();
	class APlayerReplicationInfo* GetSplitscreenPlayerByIndex(int32_t optionalPlayerIndex);
	bool IsSplitscreenPlayer(int32_t& outOut_SplitscreenPlayerIndex);
	bool IsPrimaryPlayer();
	void ServerNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId);
	void ClientNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId);
	void ClientReturnToParty(const struct FUniqueNetId& RequestingPlayerId);
	void OnJoinTravelToSessionComplete(const class FName& SessionName, bool bWasSuccessful);
	void PreJoinUpdateGameSettings(const class FName& SessionName, class UOnlineGameSettings* GameSettings);
	void ClientTravelToSession(const class FName& SessionName, class UClass* SearchClass, uint8_t PlatformSpecificInfo[80]);
	void PathClear();
	void PathChild(int32_t optionalCnt);
	void PathStep(int32_t optionalCnt);
	void eventSoakPause(class APawn* P);
	void IncrementNumberOfMatchesPlayed();
	bool CanViewUserCreatedContent();
	void ClientEndOnlineGame();
	void ClientStartOnlineGame();
	void ServerRegisterClientStatGuid(const class FString& StatGuid);
	void OnRegisterHostStatGuidComplete(bool bWasSuccessful);
	void ClientRegisterHostStatGuid(const class FString& StatGuid);
	void eventRemoveAllDebugStrings();
	void eventRemoveDebugText(class AActor* SrcActor);
	void eventAddDebugText(const class FString& DebugText, class AActor* optionalSrcActor, float optionalDuration, const struct FVector& optionalOffset, const struct FVector& optionalDesiredOffset, const struct FColor& optionalTextColor, bool optionalBSkipOverwriteCheck, bool optionalBAbsoluteLocation, bool optionalBKeepAttachedToActor, class UFont* optionalInFont);
	void DrawDebugTextList(class UCanvas* Canvas, float RenderDelta);
	void OnDestroy(class USeqAct_Destroy* Action);
	void ClientStartNetworkedVoice();
	void ClientStopNetworkedVoice();
	void ClientSetHostUniqueId(const struct FUniqueNetId& InHostId);
	void ClientWriteLeaderboardStats(class UClass* OnlineStatsWriteClass, bool optionalBIsIncomplete);
	void ClientWriteOnlinePlayerScores(int32_t LeaderboardId);
	void ClientArbitratedMatchEnded();
	void NotifyNotEnoughSpaceInInvite();
	void NotifyNotAllPlayersCanJoinInvite();
	void NotifyInviteFailed();
	void OnInviteJoinComplete(const class FName& SessionName, bool bWasSuccessful);
	class FString ModifyClientURL(const class FString& URL);
	void OnDestroyForInviteComplete(const class FName& SessionName, bool bWasSuccessful);
	void OnEndForInviteComplete(const class FName& SessionName, bool bWasSuccessful);
	void ClearInviteDelegates();
	bool CanAllPlayersPlayOnline();
	bool InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings);
	void OnGameInviteAccepted(struct FOnlineGameSearchResult& outInviteResult);
	void ServerRegisteredForArbitration(bool bWasSuccessful);
	void OnArbitrationRegisterComplete(const class FName& SessionName, bool bWasSuccessful);
	void ClientRegisterForArbitration();
	void eventClientWasKicked();
	bool IsShowingSubtitles();
	void SetShowSubtitles(bool bValue);
	void eventNotifyDirectorControl(bool bNowControlling, class USeqAct_Interp* CurrentMatinee);
	void eventServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void eventServerMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void eventClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void eventClientMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ClientVoiceHandshakeComplete();
	static class APlayerController* GetPlayerControllerFromNetId(const struct FUniqueNetId& PlayerNetId);
	void ClientSetOnlineStatus();
	void SeamlessTravelFrom(class APlayerController* OldPC);
	void SeamlessTravelTo(class APlayerController* NewPC);
	void eventGetSeamlessTravelActorList(bool bToEntry, class TArray<class AActor*>& outActorList);
	bool IsPlayerMuted(struct FUniqueNetId& outSender);
	class UUIInteraction* GetUIController();
	void SaveActorConfig(const class FName& actorName);
	void SaveClassConfig(const class FString& ClassName);
	void ClientWaitForLevelsVisible(class USeqAct_WaitForLevelsVisible* inAction);
	void eventClientSetBlockOnAsyncLoading();
	void eventClientFlushLevelStreaming();
	void eventClientCancelPendingMapChange();
	void eventClientCommitMapChange();
	void DelayedPrepareMapChange();
	void eventClientPrepareMapChange(const class FName& LevelName, bool bFirst, bool bLast);
	void eventServerUpdateLevelVisibility(const class FName& PackageName, bool bIsVisible);
	void ClientUpdateLevelStreamingStatus(const class FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad);
	void eventLevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad);
	void eventClientForceGarbageCollection();
	void OnConsoleCommand(class USeqAct_ConsoleCommand* inAction);
	void ResetPlayerMovementInput();
	bool eventIsLookInputIgnored();
	void IgnoreLookInput(bool bNewLookInput);
	bool eventIsMoveInputIgnored();
	void IgnoreMoveInput(bool bNewMoveInput);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons);
	void OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action);
	bool IsForceFeedbackAllowed();
	void eventClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* optionalFFWaveform);
	void eventClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform, class AActor* optionalFFWaveformInstigator);
	void eventPlayRumble(class UAnimNotify_Rumble* TheAnimNotify);
	void OnForceFeedback(class USeqAct_ForceFeedback* Action);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int32_t Damage, class UClass* DamageType, const struct FVector& Momentum);
	void ShowGameState();
	void ShowPlayerState();
	void ServerRemoteEvent(const class FName& EventName);
	void RE(const class FName& optionalEventName);
	void RemoteEvent(const class FName& optionalEventName);
	void ListCE();
	void ListConsoleEvents();
	void CE(const class FName& optionalEventName);
	void CauseEvent(const class FName& optionalEventName);
	void ServerCauseEvent(const class FName& EventName);
	void OnToggleHUD(class USeqAct_ToggleHUD* inAction);
	void OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction);
	void ClientClearKismetText(const struct FVector2D& MessageOffset);
	void ClientDrawKismetText(const struct FKismetDrawTextInfo& DrawTextInfo, float DisplayTime);
	void OnDrawTextW(class USeqAct_DrawText* inAction);
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientIgnoreMoveInput(bool bIgnore);
	void OnToggleInput(class USeqAct_ToggleInput* inAction);
	void eventAdjustHUDRenderSize(int32_t FullScreenSizeX, int32_t FullScreenSizeY, int32_t& outX, int32_t& outY, int32_t& outSizeX, int32_t& outSizeY);
	void DrawHUD(class AHUD* H);
	bool CanRestartPlayer();
	void ServerViewSelf(const struct FViewTargetTransitionParams& optionalTransitionParams);
	void ViewAPlayer(int32_t Dir);
	class APlayerReplicationInfo* GetNextViewablePlayer(int32_t Dir);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerSetSpectatorLocation(const struct FVector& NewLoc);
	bool IsSpectating();
	void AdjustPlayerWalkingMoveAccel(struct FVector& outNewAccel);
	void CheckJumpOrDuck();
	struct FRotator eventLimitViewRotation(const struct FRotator& ViewRotation, float ViewPitchMin, float ViewPitchMax);
	void ProcessViewRotation(float DeltaTime, const struct FRotator& DeltaRot, struct FRotator& outOut_ViewRotation);
	void UpdateRotation(float DeltaTime);
	void ViewShake(float DeltaTime);
	void eventGetPlayerViewPoint(struct FVector& outOut_Location, struct FRotator& outOut_Rotation);
	void eventSpawnPlayerCamera();
	void ServerVerifyViewTarget();
	class AActor* GetViewTarget();
	void eventClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& optionalTransitionParams);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float optionalBlendTime, EViewTargetBlendFunction optionalBlendFunc, float optionalBlendExp, bool optionalBLockOutgoing);
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& optionalTransitionParams);
	bool IsLocalController();
	bool IsLocalPlayerController();
	bool IsOrthoBlendTransversal();
	float GetOrthoBlend();
	float eventGetFOVAngle();
	void AdjustFOV(float DeltaTime);
	bool eventNotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	float AimHelpDot(bool bInstantHit);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	void eventCameraLookAtFinished(class USeqAct_CameraLookAt* Action);
	bool AimingHelp(bool bInstantHit);
	void PlayerMove(float DeltaTime);
	void eventPlayerTick(float DeltaTime);
	void NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void GameHasEnded(class AActor* optionalEndGameFocus, bool optionalBIsWinner);
	void ClientRestart(class APawn* NewPawn);
	void EnterStartState();
	void ForceSingleNetUpdateFor(class AActor* Target);
	bool HasClientLoadedCurrentWorld();
	void eventNotifyLoadedWorld(const class FName& WorldPackageName, bool bFinalDest);
	void eventServerNotifyLoadedWorld(const class FName& WorldPackageName);
	void Restart(bool bVehicleTransition);
	void eventClientSetProgressMessage(EProgressMessageType MessageType, const class FString& Message, const class FString& optionalTitle, bool optionalBIgnoreFutureNetworkMessages);
	void SwitchLevel(const class FString& URL);
	void ServerChangeTeam(int32_t N);
	void ChangeTeam(const class FString& optionalTeamName);
	void SwitchTeam();
	void ServerChangeName(const class FString& S);
	void SetName(const class FString& S);
	void ServerSuicide();
	void Suicide();
	bool TriggerInteracted();
	bool FindVehicleToDrive();
	bool PerformedUseAction();
	void ServerUse();
	void Use();
	void GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, class TArray<class ATrigger*>& outOut_useList);
	void StopAltFire(uint8_t optionalFireModeNum);
	void StartAltFire(uint8_t optionalFireModeNum);
	void StopFire(uint8_t optionalFireModeNum);
	void StartFire(uint8_t optionalFireModeNum);
	void NextWeapon();
	void PrevWeapon();
	void ServerThrowWeapon();
	void ThrowWeapon();
	void UTrace();
	void ServerUTrace();
	void eventConditionalPause(bool bDesiredPauseState);
	void ServerPause();
	void Pause();
	bool IsPaused();
	bool SetPause(bool bPause, const struct FScriptDelegate& optionalCanUnpauseDelegate);
	bool CanUnpause();
	void ClientPauseRumble(bool bShouldPauseRumble);
	void PauseRumbleForAllPlayers(bool optionalBShouldPauseRumble);
	void LocalTravel(const class FString& URL);
	void RestartLevel();
	void ServerSpeech(const class FName& Type, int32_t Index, const class FString& Callsign);
	void Speech(const class FName& Type, int32_t Index, const class FString& Callsign);
	void ServerRestartGame();
	void HandleWalking();
	void ServerUpdateCamera(const struct FVector& CamLoc, int32_t CamPitchAndYaw);
	void CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, uint8_t ClientRoll, int32_t View, class USavedMove* OldMove);
	void ReplicateMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot);
	int32_t CompressAccel(int32_t C);
	class USavedMove* GetFreeMove();
	void ClientUpdatePosition();
	void ClearAckedMoves();
	void ServerUpdatePing(int32_t NewPing);
	void UpdateStateFromAdjustment(const class FName& NewState);
	void LongClientAdjustPosition(float TimeStamp, const class FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ);
	bool SkipPositionUpdateForRM();
	void UpdatePing(float TimeStamp);
	void ClientAdjustPosition(float TimeStamp, const class FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase);
	void ClientAckGoodMove(float TimeStamp);
	void ClientCapBandwidth(int32_t Cap);
	void ShortClientAdjustPosition(float TimeStamp, const class FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase);
	void VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase);
	void MoveAutonomous(float DeltaTime, uint8_t CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot);
	void ProcessMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot);
	void ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump);
	void ServerDrive(float InForward, float InStrafe, float aUp, bool InJump, int32_t View);
	void eventSendClientAdjustment();
	void ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, uint8_t MoveFlags, uint8_t ClientRoll, int32_t View);
	void ServerMoveHandleClientError(float TimeStamp, const struct FVector& Accel, const struct FVector& ClientLoc);
	float GetServerMoveDeltaTime(float TimeStamp);
	void OldServerMove(float OldTimeStamp, uint8_t OldAccelX, uint8_t OldAccelY, uint8_t OldAccelZ, uint8_t OldMoveFlags);
	void DualServerMove(float TimeStamp0, const struct FVector& InAccel0, uint8_t PendingFlags, int32_t View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, uint8_t NewFlags, uint8_t ClientRoll, int32_t View);
	void ForceDeathUpdate();
	bool UsingFirstPersonCamera();
	void eventClientSetCameraFade(bool bEnableFading, const struct FColor& optionalFadeColor, const struct FVector2D& optionalFadeAlpha, float optionalFadeTime, bool optionalBFadeAudio);
	void eventResetCameraMode();
	void SetCameraMode(const class FName& NewCamMode);
	void ClientSetCameraMode(const class FName& NewCamMode);
	void ServerCamera(const class FName& NewMode);
	void Camera(const class FName& NewMode);
	void eventPreClientTravel(const class FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel);
	void ServerTeamSay(const class FString& msg);
	void TeamSay(const class FString& msg);
	void ClientAdminMessage(const class FString& msg);
	void ServerSay(const class FString& msg);
	void Say(const class FString& msg);
	bool AllowTextMessage(const class FString& msg);
	void ServerMutate(const class FString& MutateString);
	void Mutate(const class FString& MutateString);
	void FOV(float F);
	void ResetFOV();
	void SetFOV(float NewFOV);
	void FixFOV();
	void eventDestroyed();
	void CleanupPawn();
	void eventClearOnlineDelegates();
	void OnPartyMembersInfoChanged(const class FString& PlayerName, const struct FUniqueNetId& PlayerID, int32_t CustomData1, int32_t CustomData2, int32_t CustomData3, int32_t CustomData4);
	void OnPartyMemberListChanged(bool bJoinedOrLeft, const class FString& PlayerName, const struct FUniqueNetId& PlayerID);
	void RegisterOnlineDelegates();
	void PlayBeepSound();
	void eventTeamMessage(class APlayerReplicationInfo* PRI, const class FString& S, const class FName& Type, float optionalMsgLifeTime);
	void SpeakTTS(const class FString& S, class APlayerReplicationInfo* optionalPRI);
	void TeamTalk();
	void Talk();
	class USoundCue* CreateTTSSoundCue(const class FString& StrToSpeak, class APlayerReplicationInfo* PRI);
	bool AllowTTSMessageFrom(class APlayerReplicationInfo* PRI);
	bool CanCommunicate();
	void eventClientMessage(const class FString& S, const class FName& optionalType, float optionalMsgLifeTime);
	void ClientPlayActorFaceFXAnim(class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, const class FString& GroupName, const class FString& SeqName, class USoundCue* SoundCueToPlay);
	void eventKismet_ClientStopSound(class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime);
	void eventKismet_ClientPlaySound(class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, bool bSuppressSubtitles, bool bSuppressSpatialization);
	bool IsClosestLocalPlayerToActor(class AActor* TheActor);
	void eventClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool optionalBIsOccluded);
	class UAudioComponent* GetPooledAudioComponent(class USoundCue* ASound, class AActor* SourceActor, bool bStopWhenOwnerDestroyed, bool optionalBUseLocation, const struct FVector& optionalSourceLocation);
	void HearSoundFinished(class UAudioComponent* AC);
	void eventClientPlaySound(class USoundCue* ASound);
	void eventReceiveLocalizedMessage(class UClass* Message, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	void CleanupPRI();
	void HandlePickup(class AInventory* Inv);
	void ClientSetSecondaryHUD(class UClass* newHUDType);
	void ClientSetHUD(class UClass* newHUDType);
	void PawnDied(class APawn* P);
	void eventUnPossess();
	void ServerAcknowledgePossession(class APawn* P);
	void AcknowledgePossession(class APawn* P);
	void eventPossess(class APawn* aPawn, bool bVehicleTransition);
	void GivePawn(class APawn* NewPawn);
	void AskForPawn();
	void ClientGotoState(const class FName& NewState, const class FName& optionalNewLabel);
	void SetTiltActive(bool bActive);
	bool IsMouseAvailable();
	bool IsKeyboardAvailable();
	void SetUseTiltForwardAndBack(bool bActive);
	void SetOnlyUseControllerTiltInput(bool bActive);
	void SetControllerTiltActive(bool bActive);
	bool IsControllerTiltActive();
	void SetRumbleScale(float ScaleBy);
	void ReloadProfileSettings();
	void UnregisterStandardPlayerDataStores();
	void UnregisterPlayerDataStores();
	void RegisterStandardPlayerDataStores();
	void RegisterCustomPlayerDataStores();
	void RegisterPlayerDataStores();
	void ClientInitializeDataStores();
	void eventInitInputSystem();
	class UOnlineSubsystem* GetOnlineSubsystem();
	void PostControllerIdChange();
	void PreControllerIdChange();
	void CleanOutSavedMoves();
	void ClientReset();
	void Reset();
	void SpawnDefaultHUD();
	void EnableCheats();
	void AddCheats(bool optionalBForce);
	void eventKickWarning();
	void ServerGivePawn();
	void ServerShortTimeout();
	void ResetTimeMargin();
	void eventPreRender(class UCanvas* Canvas);
	void OnJoinMigratedGame(const class FName& SessionName, bool bWasSuccessful);
	void PeerDesignatedAsClient(const class FName& SessionName);
	void OnUnregisterPlayerCompleteForJoinMigrate(const class FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	void eventPeerReceivedMigratedSession(const struct FUniqueNetId& FromPeerNetId, const class FName& SessionName, class UClass* SearchClass, uint8_t PlatformSpecificInfo[80]);
	void TellPeerToTravelToSession(const struct FUniqueNetId& ToPeerNetId, const class FName& SessionName, class UClass* SearchClass, uint8_t PlatformSpecificInfo[80], int32_t PlatformSpecificInfoSize);
	void TellPeerToTravel(const struct FUniqueNetId& ToPeerNetId);
	void PeerTravelAsHost(float TravelCountdownTimer, const class FString& URL);
	class FString GetNewPeerHostURL();
	void PeerDesignatedAsHost(const class FName& SessionName);
	class UClass* GetCurrentSearchClass();
	void OnHostMigratedOnlineGame(const class FName& SessionName, bool bWasSuccessful);
	void OnUnregisterPlayerCompleteForHostMigrate(const class FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	bool RemoveMissingPeersFromSession(const class FName& SessionName, const struct FScriptDelegate& UnregisterDelegate);
	class APlayerReplicationInfo* GetPRIFromNetId(const struct FUniqueNetId& PlayerID);
	void OnMissingPeersUnregistered(const class FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	void GetRegisteredPlayersInSession(const class FName& SessionName, class TArray<struct FUniqueNetId>& outOutRegisteredPlayers);
	void NotifyHostMigrationStarted();
	bool eventMigrateNewHost();
	bool IsBestHostPeer(const struct FUniqueNetId& PeerNetId);
	void eventNotifyPeerDisconnectHost(const struct FUniqueNetId& PeerNetId);
	void ClientUpdateBestNextHosts(struct FUniqueNetId SortedNextHosts[10], uint8_t NumEntries);
	void ServerRemovePeer(const struct FUniqueNetId& PeerNetId);
	void ServerAddPeer(const struct FUniqueNetId& PeerNetId, ENATType NatType);
	void eventRemovePeer(const struct FUniqueNetId& PeerNetId);
	void eventAddPeer(const struct FUniqueNetId& PeerNetId, ENATType NatType);
	int32_t FindConnectedPeerIndex(const struct FUniqueNetId& PeerNetId);
	void eventReceivedPlayer();
	void eventPostBeginPlay();
	class ACoverReplicator* SpawnCoverReplicator();
	bool CanUnpauseControllerConnected();
	void OnControllerChanged(int32_t ControllerId, bool bIsConnected);
	bool CanUnpauseExternalUI();
	void OnExternalUIChanged(bool bIsOpening);
	void ForceClearUnpauseDelegates();
	void DisableActorHeadTracking(class AActor* TargetActor);
	void EnableActorHeadTracking(class AActor* TargetActor, class FName TrackControllerName[10], class UClass* ActorClassesToLookAt[10], bool bLookAtPawns, float MinLookAtTime, float MaxLookAtTime, float MaxInterestTime, float LookAtActorRadius, class FName TargetBoneNames[10]);
	void eventFellOutOfWorld(class UClass* dmgType);
	void CleanUpAudioComponents();
	int32_t FindStairRotation(float DeltaTime);
	bool CheckSpeedHack(float DeltaTime);
	void eventServerProcessConvolve(const class FString& C, int32_t H);
	void eventClientConvolve(const class FString& C, int32_t H);
	void SetAudioGroupVolume(const class FName& GroupName, float Volume);
	void SetAllowMatureLanguage(bool bAllowMatureLanguge);
	class FString PasteFromClipboard();
	void CopyToClipboard(const class FString& Text);
	class FString GetDefaultURL(const class FString& Option);
	void UpdateURL(const class FString& NewOption, const class FString& NewValue, bool bSave1Default);
	void eventClientTravel(const class FString& URL, ETravelType TravelType, bool optionalBSeamless, const struct FGuid& optionalMapPackageGuid);
	class FString ConsoleCommand(const class FString& Command, bool optionalBWriteToLog);
	class FString GetServerNetworkAddress();
	class FString GetPlayerNetworkAddress();
	void SetNetSpeed(int32_t NewSpeed);
};

// Class Engine.CheatManager
// 0x0018 (0x003C - 0x0054)
class UCheatManager : public UObject
{
public:
	class FString                                      ViewingFrom;                                   // 0x003C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      OwnCamera;                                     // 0x0048 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CheatManager");
		}

		return uClassPointer;
	};

	void OnRequestComplete(class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* Response, bool bDidSucceed);
	void TestHttp(const class FString& Verb, const class FString& Payload, const class FString& URL, bool optionalBSendParallelRequest);
	void OnDeleteUserFileComplete(bool bWasSuccessful, const class FString& UserId, const class FString& Filename);
	void DebugDeleteUserFile(const class FString& UserId, const class FString& Filename);
	void OnReadUserFileComplete(bool bWasSuccessful, const class FString& UserId, const class FString& Filename);
	void DebugReadUserFile(const class FString& UserId, const class FString& Filename);
	void OnWriteUserFileComplete(bool bWasSuccessful, const class FString& UserId, const class FString& Filename);
	void DebugWriteUserFile(const class FString& UserId, const class FString& Filename);
	void OnEnumerateUserFilesComplete(bool bWasSuccessful, const class FString& UserId);
	void DebugQueryUserFiles(const class FString& UserId);
	void OnReceivedLocalNotificationDebug(bool bWasAppActive, struct FNotificationInfo& outNotification);
	void DebugNotification(const class FString& MessageBody, int32_t SecondsFromNow);
	void DrawLocationXYZ(float X, float Y, float Z);
	void DrawLocation(const struct FVector& Loc);
	void DumpCoverStats();
	void DebugEmsDownload();
	void DebugDeleteTitleFiles();
	void OnSaveComplete(bool bWasSuccessful, const class FString& Filename);
	void DebugSaveTitleFile(const class FString& Filename);
	void OnLoadComplete(bool bWasSuccessful, const class FString& Filename);
	void OnDownloadComplete(bool bWasSuccessful, const class FString& Filename);
	void DebugDownloadTitleFile(const class FString& Filename, bool optionalBFromCache);
	void DebugIniLocPatcher();
	void ToggleAILogging();
	void VerifyNavMeshCoverRefs();
	void PrintNavMeshObstacles();
	void PrintAllPathObjectEdges();
	void NavMeshVerification(float optionalInterval);
	void DrawUnsupportingEdges(const class FString& PawnClassName);
	void VerifyNavMeshObjects();
	void LogParticleActivateSystemCalls(bool bShouldLog);
	void LogPlaySoundCalls(bool bShouldLog);
	void InitCheatManager();
	void VerbosePathDebug();
	void TestPylonConnectivity();
	void TestNavMeshPath(bool optionalBDrawPath);
	void SetOnlineDebugLevel(int32_t DebugLevel);
	void TestLevel();
	void StreamLevelOut(const class FName& PackageName);
	void OnlyLoadLevel(const class FName& PackageName);
	void StreamLevelIn(const class FName& PackageName);
	void SetLevelStreamingStatus(const class FName& PackageName, bool bShouldBeLoaded, bool bShouldBeVisible);
	void AllWeapons();
	void Loaded();
	void ViewClass(class UClass* aClass);
	void ViewBot();
	void ViewActor(const class FName& actorName);
	void ViewPlayer(const class FString& S);
	void ViewSelf(bool optionalBQuiet);
	void RememberSpot();
	void FractureAllMeshesToMaximizeMemoryUsage();
	void FractureAllMeshes();
	void DestroyFractures(float optionalRadius);
	void SuspendAI();
	void PlayersOnly();
	class AWeapon* GiveWeapon(const class FString& WeaponClassStr);
	void Summon(const class FString& ClassName);
	void Avatar(const class FName& ClassName);
	void KillPawns();
	void KillAllPawns(class UClass* aClass);
	void KillAll(class UClass* aClass);
	void SetSpeed(float F);
	void SetGravity(float F);
	void SetJumpZ(float F);
	void Slomo(float T);
	void God();
	void AllAmmo();
	void Ghost();
	void Walk();
	void Fly();
	void Amphibious();
	void EndPath();
	void ChangeSize(float F);
	void Teleport();
	void KillViewedActor();
	void WriteToLog(const class FString& Param);
	void FreezeFrame(float Delay);
	void ListDynamicActors();
	void DebugPause();
	void EditAIByTrace();
	void DebugAI(const class FName& optionalCategory);
	void FXStop(class UClass* aClass);
	void FXPlay(class UClass* aClass, const class FString& FXAnimPath);
};

// Class Engine.Client
// 0x0014 (0x003C - 0x0050)
class UClient : public UObject
{
public:
	uint8_t                                            UnknownData00[0x4];                              // 0x003C (0x0004) MISSED OFFSET
	float                                              MinDesiredFrameRate;                           // 0x0040 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              DisplayGamma;                                  // 0x0044 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InitialButtonRepeatDelay;                      // 0x0048 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ButtonRepeatDelay;                             // 0x004C (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Client");
		}

		return uClassPointer;
	};

};

// Class Engine.ClipPadEntry
// 0x0018 (0x003C - 0x0054)
class UClipPadEntry : public UObject
{
public:
	class FString                                      Title;                                         // 0x003C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      Text;                                          // 0x0048 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ClipPadEntry");
		}

		return uClassPointer;
	};

};

// Class Engine.CodecMovie
// 0x0004 (0x003C - 0x0040)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                              // 0x003C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CodecMovie");
		}

		return uClassPointer;
	};

};

// Class Engine.CodecMovieBink
// 0x0000 (0x0040 - 0x0040)
class UCodecMovieBink : public UCodecMovie
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CodecMovieBink");
		}

		return uClassPointer;
	};

};

// Class Engine.CodecMovieFallback
// 0x0004 (0x0040 - 0x0044)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                   // 0x0040 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CodecMovieFallback");
		}

		return uClassPointer;
	};

};

// Class Engine.CurveEdPresetCurve
// 0x0018 (0x003C - 0x0054)
class UCurveEdPresetCurve : public UObject
{
public:
	class FString                                      CurveName;                                     // 0x003C (0x000C) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class TArray<struct FPresetGeneratedPoint>         Points;                                        // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		}

		return uClassPointer;
	};

};

// Class Engine.CustomPropertyItemHandler
// 0x0000 (0x003C - 0x003C)
class UCustomPropertyItemHandler : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CustomPropertyItemHandler");
		}

		return uClassPointer;
	};

};

// Class Engine.DamageType
// 0x0028 (0x003C - 0x0064)
class UDamageType : public UObject
{
public:
	uint32_t                                           bArmorStops : 1;                               // 0x003C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCausedByWorld : 1;                            // 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bExtraMomentumZ : 1;                           // 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bCausesFracture : 1;                           // 0x003C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bRadialDamageVelChange : 1;                    // 0x003C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	float                                              KDamageImpulse;                                // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              KDeathVel;                                     // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              KDeathUpKick;                                  // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RadialDamageImpulse;                           // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VehicleDamageScaling;                          // 0x0050 (0x0004) [0x0000000000000000]               
	float                                              VehicleMomentumScaling;                        // 0x0054 (0x0004) [0x0000000000000000]               
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                             // 0x0058 (0x0004) [0x0000000000000000]               
	class UForceFeedbackWaveform*                      KilledFFWaveform;                              // 0x005C (0x0004) [0x0000000000000000]               
	float                                              FracturedMeshDamage;                           // 0x0060 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DamageType");
		}

		return uClassPointer;
	};

	static float VehicleDamageScalingFor(class AVehicle* V);
};

// Class Engine.KillZDamageType
// 0x0000 (0x0064 - 0x0064)
class UKillZDamageType : public UDamageType
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.KillZDamageType");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionFloatConstant
// 0x0004 (0x0050 - 0x0054)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                      // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionFloatConstant");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionFloatParameterBase
// 0x0019 (0x0054 - 0x006D)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	class FName                                        ParameterName;                                 // 0x0054 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              MinInput;                                      // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxInput;                                      // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinOutput;                                     // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxOutput;                                     // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EDistributionParamMode                             ParamMode;                                     // 0x006C (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionFloatConstantCurve
// 0x0010 (0x0050 - 0x0060)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                 // 0x0050 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionFloatUniform
// 0x0008 (0x0050 - 0x0058)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                           // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Max;                                           // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionFloatUniform");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionFloatUniformCurve
// 0x0010 (0x0050 - 0x0060)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                 // 0x0050 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionFloatUniformRange
// 0x0014 (0x0050 - 0x0064)
class UDistributionFloatUniformRange : public UDistributionFloat
{
public:
	float                                              MaxHigh;                                       // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxLow;                                        // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinHigh;                                       // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinLow;                                        // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bMirrorMaxMin : 1;                             // 0x0060 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionFloatUniformRange");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionVectorConstant
// 0x0011 (0x0050 - 0x0061)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                      // 0x0050 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLockAxes : 1;                                 // 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	EDistributionVectorLockFlags                       LockedAxes;                                    // 0x0060 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionVectorConstant");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionVectorParameterBase
// 0x003E (0x0061 - 0x009F)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	class FName                                        ParameterName;                                 // 0x0064 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MinInput;                                      // 0x006C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MaxInput;                                      // 0x0078 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MinOutput;                                     // 0x0084 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MaxOutput;                                     // 0x0090 (0x000C) [0x0000000000000001] (CPF_Edit)    
	EDistributionParamMode                             ParamModes[3];                                 // 0x009C (0x0003) [0x0000000000080009] (CPF_Edit | CPF_ExportObject | CPF_Component)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionVectorConstantCurve
// 0x0015 (0x0050 - 0x0065)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                 // 0x0050 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bLockAxes : 1;                                 // 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	EDistributionVectorLockFlags                       LockedAxes;                                    // 0x0064 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionVectorUniform
// 0x0020 (0x0050 - 0x0070)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                           // 0x0050 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Min;                                           // 0x005C (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLockAxes : 1;                                 // 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bUseExtremes : 1;                              // 0x0068 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	EDistributionVectorLockFlags                       LockedAxes;                                    // 0x006C (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDistributionVectorMirrorFlags                     MirrorFlags[3];                                // 0x006D (0x0003) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionVectorUniform");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionVectorUniformCurve
// 0x0019 (0x0050 - 0x0069)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                 // 0x0050 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bLockAxes1 : 1;                                // 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bLockAxes2 : 1;                                // 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bUseExtremes : 1;                              // 0x0060 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	EDistributionVectorLockFlags                       LockedAxes[2];                                 // 0x0064 (0x0002) [0x0000000000000001] (CPF_Edit)    
	EDistributionVectorMirrorFlags                     MirrorFlags[3];                                // 0x0066 (0x0003) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionVectorUniformRange
// 0x0030 (0x0050 - 0x0080)
class UDistributionVectorUniformRange : public UDistributionVector
{
public:
	struct FVector                                     MaxHigh;                                       // 0x0050 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MaxLow;                                        // 0x005C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MinHigh;                                       // 0x0068 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MinLow;                                        // 0x0074 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionVectorUniformRange");
		}

		return uClassPointer;
	};

};

// Class Engine.Download
// 0x0A34 (0x003C - 0x0A70)
class UDownload : public UObject
{
public:
	uint8_t                                            UnknownData00[0xA34];                          // 0x003C (0x0A34) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Download");
		}

		return uClassPointer;
	};

};

// Class Engine.ChannelDownload
// 0x0004 (0x0A70 - 0x0A74)
class UChannelDownload : public UDownload
{
public:
	uint8_t                                            UnknownData00[0x4];                              // 0x0A70 (0x0004) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ChannelDownload");
		}

		return uClassPointer;
	};

};

// Class Engine.EdCoordSystem
// 0x0050 (0x003C - 0x008C)
class UEdCoordSystem : public UObject
{
public:
	uint8_t                                            UnknownData00[0x4];                              // 0x003C (0x0004) MISSED OFFSET
	struct FMatrix                                     M;                                             // 0x0040 (0x0040) [0x0000000000000001] (CPF_Edit)    
	class FString                                      Desc;                                          // 0x0080 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.EdCoordSystem");
		}

		return uClassPointer;
	};

};

// Class Engine.EditorLinkSelectionInterface
// 0x0000 (0x003C - 0x003C)
class UEditorLinkSelectionInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.EditorLinkSelectionInterface");
		}

		return uClassPointer;
	};

};

// Class Engine.EngineTypes
// 0x0000 (0x003C - 0x003C)
class UEngineTypes : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.EngineTypes");
		}

		return uClassPointer;
	};

};

// Class Engine.FaceFXAnimSet
// 0x0030 (0x003C - 0x006C)
class UFaceFXAnimSet : public UObject
{
public:
	class UFaceFXAsset*                                DefaultFaceFXAsset;                            // 0x003C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_EditorOnly)
	struct FPointer                                    InternalFaceFXAnimSet;                         // 0x0040 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<uint8_t>                              RawFaceFXAnimSetBytes;                         // 0x0044 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<uint8_t>                              RawFaceFXMiniSessionBytes;                     // 0x0050 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<class USoundCue*>                     ReferencedSoundCues;                           // 0x005C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly | CPF_NotForConsole)
	int32_t                                            NumLoadErrors;                                 // 0x0068 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FaceFXAnimSet");
		}

		return uClassPointer;
	};

};

// Class Engine.FaceFXAsset
// 0x0048 (0x003C - 0x0084)
class UFaceFXAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                               // 0x003C (0x0004) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)
	struct FPointer                                    FaceFXActor;                                   // 0x0040 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<uint8_t>                              RawFaceFXActorBytes;                           // 0x0044 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<uint8_t>                              RawFaceFXSessionBytes;                         // 0x0050 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<class UMorphTargetSet*>               PreviewMorphSets;                              // 0x005C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<class UFaceFXAnimSet*>                MountedFaceFXAnimSets;                         // 0x0068 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class USoundCue*>                     ReferencedSoundCues;                           // 0x0074 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly | CPF_NotForConsole)
	int32_t                                            NumLoadErrors;                                 // 0x0080 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FaceFXAsset");
		}

		return uClassPointer;
	};

	void UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet);
	void MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet);
};

// Class Engine.Font
// 0x0120 (0x003C - 0x015C)
class UFont : public UObject
{
public:
	class TArray<struct FFontCharacter>                Characters;                                    // 0x003C (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UTexture2D*>                    Textures;                                      // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0054 (0x003C) MISSED OFFSET
	int32_t                                            IsRemapped;                                    // 0x0090 (0x0004) [0x0000000000000000]               
	float                                              EmScale;                                       // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Ascent;                                        // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Descent;                                       // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Leading;                                       // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Kerning;                                       // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FFontImportOptionsData                      ImportOptions;                                 // 0x00A8 (0x00A0) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            NumCharacters;                                 // 0x0148 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<int32_t>                              MaxCharHeight;                                 // 0x014C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              ScalingFactor;                                 // 0x0158 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Font");
		}

		return uClassPointer;
	};

	void GetStringHeightAndWidth(class FString& outInString, int32_t& outHeight, int32_t& outWidth);
	float GetMaxCharHeight();
	float GetAuthoredViewportHeight(float ViewportHeight);
	float GetScalingFactor(float HeightTest);
	int32_t GetResolutionPageIndex(float HeightTest);
};

// Class Engine.MultiFont
// 0x000C (0x015C - 0x0168)
class UMultiFont : public UFont
{
public:
	class TArray<float>                                ResolutionTestTable;                           // 0x015C (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MultiFont");
		}

		return uClassPointer;
	};

	int32_t GetResolutionTestTableIndex(float HeightTest);
};

// Class Engine.FontImportOptions
// 0x00A0 (0x003C - 0x00DC)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                          // 0x003C (0x00A0) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FontImportOptions");
		}

		return uClassPointer;
	};

};

// Class Engine.ForceFeedbackManager
// 0x0018 (0x003C - 0x0054)
class UForceFeedbackManager : public UObject
{
public:
	uint32_t                                           bAllowsForceFeedback : 1;                      // 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bIsPaused : 1;                                 // 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	class UForceFeedbackWaveform*                      FFWaveform;                                    // 0x0040 (0x0004) [0x0000000000000000]               
	int32_t                                            CurrentSample;                                 // 0x0044 (0x0004) [0x0000000000000000]               
	float                                              ElapsedTime;                                   // 0x0048 (0x0004) [0x0000000000000000]               
	float                                              ScaleAllWaveformsBy;                           // 0x004C (0x0004) [0x0000000000000000]               
	class AActor*                                      WaveformInstigator;                            // 0x0050 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ForceFeedbackManager");
		}

		return uClassPointer;
	};

	void PauseWaveform(bool optionalBPause);
	void StopForceFeedbackWaveform(class UForceFeedbackWaveform* optionalWaveForm);
	void PlayForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator);
};

// Class Engine.ForceFeedbackWaveform
// 0x0018 (0x003C - 0x0054)
class UForceFeedbackWaveform : public UObject
{
public:
	uint32_t                                           bIsLooping : 1;                                // 0x003C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<struct FWaveformSample>               Samples;                                       // 0x0040 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              WaveformFalloffStartDistance;                  // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxWaveformDistance;                           // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ForceFeedbackWaveform");
		}

		return uClassPointer;
	};

};

// Class Engine.GamePadLightbarSubsystem
// 0x0070 (0x003C - 0x00AC)
class UGamePadLightbarSubsystem : public UObject
{
public:
	ELightBarState                                     CurrentLightBarState;                          // 0x003C (0x0001) [0x0000000000000000]               
	struct FLinearColor                                CurrentColor;                                  // 0x0040 (0x0010) [0x0000000000000000]               
	struct FLinearColor                                OriginalColor;                                 // 0x0050 (0x0010) [0x0000000000000000]               
	struct FLinearColor                                TargetColor;                                   // 0x0060 (0x0010) [0x0000000000000000]               
	float                                              LerpTimeRemaining;                             // 0x0070 (0x0004) [0x0000000000000000]               
	float                                              TotalLerpTime;                                 // 0x0074 (0x0004) [0x0000000000000000]               
	struct FColor                                      DefaultColor;                                  // 0x0078 (0x0004) [0x0000000000004003] (CPF_Edit | CPF_Const | CPF_Config)
	class TArray<struct FColorDefinition>              ColorDefinitions;                              // 0x007C (0x000C) [0x0000000004404003] (CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FLerpToInstruction>            LerpToInstructions;                            // 0x0088 (0x000C) [0x0000000004404003] (CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FSetAndLerpInstruction>        SetAndLerpInstructions;                        // 0x0094 (0x000C) [0x0000000004404003] (CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FPulseInstruction>             PulseInstructions;                             // 0x00A0 (0x000C) [0x0000000004404002] (CPF_Const | CPF_Config | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GamePadLightbarSubsystem");
		}

		return uClassPointer;
	};

	static void ResetState();
	static void SetPulsingFromDef(const class FString& InstructionId);
	static void SetPulsing(float LerpTime, const struct FColor& Target1, const struct FColor& optionalTarget2);
	static void SetPadColorAndLerpFromDef(const class FString& InstructionId);
	static void SetPadColorAndLerp(float LerpTime, const struct FColor& NewPadColor, const struct FColor& optionalNewTargetColor);
	static void BeginLerpFromDef(const class FString& InstructionId);
	static void BeginLerp(const struct FColor& NewLerpColor, float LerpTime);
	static void SetPadColorFromDef(const class FString& TheColorId);
	static void SetPadColor(const struct FColor& NewPadColor);
};

// Class Engine.GameplayEvents
// 0x0118 (0x003C - 0x0154)
class UGameplayEvents : public UObject
{
public:
	struct FPointer                                    Archive;                                       // 0x003C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class FString                                      StatsFileName;                                 // 0x0040 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FGameplayEventsHeader                       Header;                                        // 0x004C (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FGameSessionInformation                     CurrentSessionInfo;                            // 0x0078 (0x0070) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FPlayerInformation>            PlayerList;                                    // 0x00E8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FTeamInformation>              TeamList;                                      // 0x00F4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FGameplayEventMetaData>        SupportedEvents;                               // 0x0100 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FWeaponClassEventData>         WeaponClassArray;                              // 0x010C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FDamageClassEventData>         DamageClassArray;                              // 0x0118 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FProjectileClassEventData>     ProjectileClassArray;                          // 0x0124 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FPawnClassEventData>           PawnClassArray;                                // 0x0130 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        ActorArray;                                    // 0x013C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        SoundCueArray;                                 // 0x0148 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameplayEvents");
		}

		return uClassPointer;
	};

	class FString eventGetFilename();
	void CloseStatsFile();
	bool OpenStatsFile(const class FString& Filename);
};

// Class Engine.GameplayEventsReader
// 0x000C (0x0154 - 0x0160)
class UGameplayEventsReader : public UGameplayEvents
{
public:
	class TArray<class UGameplayEventsHandler*>        RegisteredHandlers;                            // 0x0154 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameplayEventsReader");
		}

		return uClassPointer;
	};

	float GetSessionDuration();
	float GetSessionEnd();
	float GetSessionStart();
	class FString GetSessionTimestamp();
	int32_t GetPlatform();
	int32_t GetTitleID();
	class FString GetSessionID();
	void ProcessStreamEnd();
	void ProcessStream();
	void ProcessStreamStart();
	void eventUnregisterHandler(class UGameplayEventsHandler* ExistingHandler);
	void eventRegisterHandler(class UGameplayEventsHandler* NewHandler);
	bool SerializeHeader();
	void CloseStatsFile();
	bool OpenStatsFile(const class FString& Filename);
};

// Class Engine.GameplayEventsWriterBase
// 0x0004 (0x0154 - 0x0158)
class UGameplayEventsWriterBase : public UGameplayEvents
{
public:
	class AGameInfo*                                   Game;                                          // 0x0154 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameplayEventsWriterBase");
		}

		return uClassPointer;
	};

	int32_t RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player);
	void RecordAIPathFail(class AController* AI, const class FString& Reason, const struct FVector& Dest);
	void LogSystemPollEvents();
	void LogProjectileIntEvent(int32_t EventID, class AController* Player, class UClass* Proj, int32_t Value);
	void LogDamageEvent(int32_t EventID, class AController* Player, class UClass* dmgType, class AController* Target, int32_t Amount);
	void LogWeaponIntEvent(int32_t EventID, class AController* Player, class UClass* WeaponClass, int32_t Value);
	void LogPlayerPlayerEvent(int32_t EventID, class AController* Player, class AController* Target);
	void LogPlayerKillDeath(int32_t EventID, int32_t KillType, class AController* Killer, class UClass* dmgType, class AController* Dead);
	void LogAllPlayerPositionsEvent(int32_t EventID);
	void LogPlayerLoginChange(int32_t EventID, class AController* Player, const class FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen);
	void LogPlayerSpawnEvent(int32_t EventID, class AController* Player, class UClass* PawnClass, int32_t TeamID);
	void LogPlayerStringEvent(int32_t EventID, class AController* Player, const class FString& EventString);
	void LogPlayerFloatEvent(int32_t EventID, class AController* Player, float Value);
	void LogPlayerIntEvent(int32_t EventID, class AController* Player, int32_t Value);
	void LogTeamStringEvent(int32_t EventID, class ATeamInfo* Team, const class FString& Value);
	void LogTeamFloatEvent(int32_t EventID, class ATeamInfo* Team, float Value);
	void LogTeamIntEvent(int32_t EventID, class ATeamInfo* Team, int32_t Value);
	void LogGamePositionEvent(int32_t EventID, float Value, struct FVector& outPosition);
	void LogGameFloatEvent(int32_t EventID, float Value);
	void LogGameStringEvent(int32_t EventID, const class FString& Value);
	void LogGameIntEvent(int32_t EventID, int32_t Value);
	void EndLogging();
	void ResetLogging(float optionalHeartbeatDelta);
	void StartLogging(float optionalHeartbeatDelta);
	int32_t eventGetPlaylistId();
	int32_t eventGetGameTypeId();
	void Poll();
	void eventStopPolling();
	void eventStartPolling(float HearbeatDelta);
	bool IsSessionInProgress();
};

// Class Engine.GameplayEventsUploadAnalytics
// 0x0000 (0x0158 - 0x0158)
class UGameplayEventsUploadAnalytics : public UGameplayEventsWriterBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameplayEventsUploadAnalytics");
		}

		return uClassPointer;
	};

	int32_t RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player);
	void RecordAIPathFail(class AController* AI, const class FString& Reason, const struct FVector& Dest);
	class UGenericParamListStatEntry* GetGenericParamListEntry();
	void LogProjectileIntEvent(int32_t EventID, class AController* Player, class UClass* Proj, int32_t Value);
	void LogDamageEvent(int32_t EventID, class AController* Player, class UClass* dmgType, class AController* Target, int32_t Amount);
	void LogWeaponIntEvent(int32_t EventID, class AController* Player, class UClass* WeaponClass, int32_t Value);
	void LogPlayerPlayerEvent(int32_t EventID, class AController* Player, class AController* Target);
	void LogPlayerKillDeath(int32_t EventID, int32_t KillType, class AController* Killer, class UClass* dmgType, class AController* Dead);
	void LogAllPlayerPositionsEvent(int32_t EventID);
	void LogPlayerLoginChange(int32_t EventID, class AController* Player, const class FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen);
	void LogPlayerSpawnEvent(int32_t EventID, class AController* Player, class UClass* PawnClass, int32_t TeamID);
	void LogPlayerStringEvent(int32_t EventID, class AController* Player, const class FString& EventString);
	void LogPlayerFloatEvent(int32_t EventID, class AController* Player, float Value);
	void LogPlayerIntEvent(int32_t EventID, class AController* Player, int32_t Value);
	void LogTeamStringEvent(int32_t EventID, class ATeamInfo* Team, const class FString& Value);
	void LogTeamFloatEvent(int32_t EventID, class ATeamInfo* Team, float Value);
	void LogTeamIntEvent(int32_t EventID, class ATeamInfo* Team, int32_t Value);
	void LogGamePositionEvent(int32_t EventID, float Value, struct FVector& outPosition);
	void LogGameFloatEvent(int32_t EventID, float Value);
	void LogGameStringEvent(int32_t EventID, const class FString& Value);
	void LogGameIntEvent(int32_t EventID, int32_t Value);
	void EndLogging();
	void ResetLogging(float optionalHeartbeatDelta);
	void StartLogging(float optionalHeartbeatDelta);
};

// Class Engine.GameplayEventsWriter
// 0x0000 (0x0158 - 0x0158)
class UGameplayEventsWriter : public UGameplayEventsWriterBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameplayEventsWriter");
		}

		return uClassPointer;
	};

	int32_t RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player);
	void RecordAIPathFail(class AController* AI, const class FString& Reason, const struct FVector& Dest);
	class UGenericParamListStatEntry* GetGenericParamListEntry();
	void LogSystemPollEvents();
	void LogProjectileIntEvent(int32_t EventID, class AController* Player, class UClass* Proj, int32_t Value);
	void LogDamageEvent(int32_t EventID, class AController* Player, class UClass* dmgType, class AController* Target, int32_t Amount);
	void LogWeaponIntEvent(int32_t EventID, class AController* Player, class UClass* WeaponClass, int32_t Value);
	void LogPlayerPlayerEvent(int32_t EventID, class AController* Player, class AController* Target);
	void LogPlayerKillDeath(int32_t EventID, int32_t KillType, class AController* Killer, class UClass* dmgType, class AController* Dead);
	void LogAllPlayerPositionsEvent(int32_t EventID);
	void LogPlayerLoginChange(int32_t EventID, class AController* Player, const class FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen);
	void LogPlayerSpawnEvent(int32_t EventID, class AController* Player, class UClass* PawnClass, int32_t TeamID);
	void LogPlayerStringEvent(int32_t EventID, class AController* Player, const class FString& EventString);
	void LogPlayerFloatEvent(int32_t EventID, class AController* Player, float Value);
	void LogPlayerIntEvent(int32_t EventID, class AController* Player, int32_t Value);
	void LogTeamStringEvent(int32_t EventID, class ATeamInfo* Team, const class FString& Value);
	void LogTeamFloatEvent(int32_t EventID, class ATeamInfo* Team, float Value);
	void LogTeamIntEvent(int32_t EventID, class ATeamInfo* Team, int32_t Value);
	void LogGamePositionEvent(int32_t EventID, float Value, struct FVector& outPosition);
	void LogGameFloatEvent(int32_t EventID, float Value);
	void LogGameStringEvent(int32_t EventID, const class FString& Value);
	void LogGameIntEvent(int32_t EventID, int32_t Value);
	void EndLogging();
	void ResetLogging(float optionalHeartbeatDelta);
	void StartLogging(float optionalHeartbeatDelta);
	bool SerializeFooter();
	bool SerializeHeader();
	void CloseStatsFile();
	bool OpenStatsFile(const class FString& Filename);
	int32_t ResolvePlayerIndex(class AController* Player);
};

// Class Engine.GameplayEventsHandler
// 0x001C (0x003C - 0x0058)
class UGameplayEventsHandler : public UObject
{
public:
	class TArray<int32_t>                              EventIDFilter;                                 // 0x003C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FGameStatGroup>                GroupFilter;                                   // 0x0048 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UGameplayEventsReader*                       Reader;                                        // 0x0054 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameplayEventsHandler");
		}

		return uClassPointer;
	};

	void RemoveFilter(int32_t EventID);
	void AddFilter(int32_t EventID);
	void eventResolveGroupFilters();
	void eventPostProcessStream();
	void eventPreProcessStream();
	void SetReader(class UGameplayEventsReader* NewReader);
};

// Class Engine.GenericParamListStatEntry
// 0x0008 (0x003C - 0x0044)
class UGenericParamListStatEntry : public UObject
{
public:
	struct FPointer                                    StatEvent;                                     // 0x003C (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class UGameplayEventsWriter*                       Writer;                                        // 0x0040 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GenericParamListStatEntry");
		}

		return uClassPointer;
	};

	void CommitToDisk();
	bool GetString(const class FName& ParamName, class FString& outOut_string);
	bool GetVector(const class FName& ParamName, struct FVector& outOut_vector);
	bool GetInt(const class FName& ParamName, int32_t& outOut_int);
	bool GetFloat(const class FName& ParamName, float& outOut_Float);
	void AddString(const class FName& ParamName, const class FString& Value);
	void AddVector(const class FName& ParamName, const struct FVector& Value);
	void AddInt(const class FName& ParamName, int32_t Value);
	void AddFloat(const class FName& ParamName, float Value);
};

// Class Engine.GuidCache
// 0x0048 (0x003C - 0x0084)
class UGuidCache : public UObject
{
public:
	uint8_t                                            UnknownData00[0x48];                            // 0x003C (0x0048) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GuidCache");
		}

		return uClassPointer;
	};

};

// Class Engine.HttpBaseInterface
// 0x0000 (0x003C - 0x003C)
class UHttpBaseInterface : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.HttpBaseInterface");
		}

		return uClassPointer;
	};

	void GetContent(class TArray<uint8_t>& outContent);
	class FString GetURL();
	int32_t GetContentLength();
	class FString GetContentType();
	class FString GetURLParameter(const class FString& ParameterName);
	class TArray<class FString> GetHeaders();
	class FString GetHeader(const class FString& HeaderName);
};

// Class Engine.HttpRequestInterface
// 0x000C (0x003C - 0x0048)
class UHttpRequestInterface : public UHttpBaseInterface
{
public:
	struct FScriptDelegate                             __OnProcessRequestComplete__Delegate;          // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.HttpRequestInterface");
		}

		return uClassPointer;
	};

	class UHttpRequestInterface* SetProcessRequestCompleteDelegate(const struct FScriptDelegate& ProcessRequestCompleteDelegate);
	void OnProcessRequestComplete(class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* InHttpResponse, bool bDidSucceed);
	bool ProcessRequest();
	class UHttpRequestInterface* SetHeader(const class FString& HeaderName, const class FString& HeaderValue);
	class UHttpRequestInterface* SetContentAsString(const class FString& ContentString);
	class UHttpRequestInterface* SetContent(class TArray<uint8_t>& outContentPayload);
	class UHttpRequestInterface* SetURL(const class FString& URL);
	class UHttpRequestInterface* SetVerb(const class FString& Verb);
	class FString GetVerb();
};

// Class Engine.HttpResponseInterface
// 0x0000 (0x003C - 0x003C)
class UHttpResponseInterface : public UHttpBaseInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.HttpResponseInterface");
		}

		return uClassPointer;
	};

	class FString GetContentAsString();
	int32_t GetResponseCode();
};

// Class Engine.IniLocPatcher
// 0x0048 (0x003C - 0x0084)
class UIniLocPatcher : public UObject
{
public:
	class TArray<struct FIniLocFileEntry>              Files;                                         // 0x003C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	uint32_t                                           bRequestEmsFileList : 1;                       // 0x0048 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	int32_t                                            MaxCachedFileAge;                              // 0x004C (0x0004) [0x0000000000004000] (CPF_Config)  
	class UOnlineTitleFileInterface*                   TitleFileInterface_Object;                     // 0x0050 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UOnlineTitleFileInterface*                   TitleFileInterface_Interface;                  // 0x0054 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UOnlineTitleFileCacheInterface*              TitleFileCacheInterface_Object;                // 0x0058 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UOnlineTitleFileCacheInterface*              TitleFileCacheInterface_Interface;             // 0x005C (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FScriptDelegate>               ReadTitleFileCompleteDelegates;                // 0x0060 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;           // 0x006C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnAllTitleFilesCompleted__Delegate;          // 0x0078 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.IniLocPatcher");
		}

		return uClassPointer;
	};

	class FString UpdateLocFileName(const class FString& Filename);
	void ClearCachedFiles();
	void ClearReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate);
	void AddReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate);
	void AddFileToDownload(const class FString& Filename);
	void ProcessIniLocFile(const class FString& Filename, bool bIsUnicode, class TArray<uint8_t>& outFileData);
	void CheckForAllFilesComplete();
	void TriggerDownloadCompleteDelegates(bool bSuccess, const class FString& Filename);
	void OnFileCacheSaveComplete(bool bWasSuccessful, const class FString& Filename);
	void OnFileCacheLoadComplete(bool bWasSuccessful, const class FString& Filename);
	void OnDownloadFileComplete(bool bWasSuccessful, const class FString& Filename);
	void StartLoadingFiles();
	void OnRequestTitleFileListComplete(bool bWasSuccessful, const class FString& ResultStr);
	void DownloadFiles();
	void Init();
	void OnAllTitleFilesCompleted();
	void OnReadTitleFileComplete(bool bWasSuccessful, const class FString& Filename);
};

// Class Engine.Interface_NavigationHandle
// 0x0000 (0x003C - 0x003C)
class UInterface_NavigationHandle : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Interface_NavigationHandle");
		}

		return uClassPointer;
	};

	void eventNotifyPathChanged();
};

// Class Engine.Interface_Speaker
// 0x0000 (0x003C - 0x003C)
class UInterface_Speaker : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Interface_Speaker");
		}

		return uClassPointer;
	};

	void eventSpeak(class USoundCue* Cue);
};

// Class Engine.InterpCurveEdSetup
// 0x0010 (0x003C - 0x004C)
class UInterpCurveEdSetup : public UObject
{
public:
	class TArray<struct FCurveEdTab>                   Tabs;                                          // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ActiveTab;                                     // 0x0048 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrack
// 0x0044 (0x003C - 0x0080)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;               // 0x003C (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    CurveEdVTable;                                 // 0x0040 (0x0004) [0x0000000000801000] (CPF_Native | CPF_NoExport)
	class TArray<class UInterpTrack*>                  SubTracks;                                     // 0x0044 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FSubTrackGroup>                SubTrackGroups;                                // 0x0050 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FSupportedSubTrackInfo>        SupportedSubTracks;                            // 0x005C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink | CPF_EditorOnly)
	class UClass*                                      TrackInstClass;                                // 0x0068 (0x0004) [0x0000000000000000]               
	ETrackActiveCondition                              ActiveCondition;                               // 0x006C (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FString                                      TrackTitle;                                    // 0x0070 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bOnePerGroup : 1;                              // 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDirGroupOnly : 1;                             // 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bDisableTrack : 1;                             // 0x007C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bIsAnimControlTrack : 1;                       // 0x007C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bSubTrackOnly : 1;                             // 0x007C (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bVisible : 1;                                  // 0x007C (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bIsSelected : 1;                               // 0x007C (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bIsRecording : 1;                              // 0x007C (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bIsCollapsed : 1;                              // 0x007C (0x0004) [0x0000000000000000] [0x00000100] (CPF_EditorOnly)
	uint32_t                                           bCutSceneTrack : 1;                            // 0x007C (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bLightAnimTrack : 1;                           // 0x007C (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrack");
		}

		return uClassPointer;
	};

};

// Class Engine.JsonObject
// 0x0090 (0x003C - 0x00CC)
class UJsonObject : public UObject
{
public:
	struct FMap_Mirror                                 ValueMap;                                      // 0x003C (0x003C) [0x0000000000001000] (CPF_Native)  
	struct FMap_Mirror                                 ObjectMap;                                     // 0x0078 (0x003C) [0x0000000000001000] (CPF_Native)  
	class TArray<class FString>                        ValueArray;                                    // 0x00B4 (0x000C) [0x0000000000001000] (CPF_Native)  
	class TArray<class UJsonObject*>                   ObjectArray;                                   // 0x00C0 (0x000C) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.JsonObject");
		}

		return uClassPointer;
	};

	static class UJsonObject* DecodeJson(const class FString& Str);
	static class FString EncodeJson(class UJsonObject* Root);
	void SetBoolValue(const class FString& Key, bool Value);
	void SetFloatValue(const class FString& Key, float Value);
	void SetIntValue(const class FString& Key, int32_t Value);
	void SetStringValue(const class FString& Key, const class FString& Value);
	void SetObject(const class FString& Key, class UJsonObject* Object);
	bool GetBoolValue(const class FString& Key);
	float GetFloatValue(const class FString& Key);
	int32_t GetIntValue(const class FString& Key);
	class FString GetStringValue(const class FString& Key);
	class UJsonObject* GetObjectW(const class FString& Key);
};

// Class Engine.KMeshProps
// 0x0044 (0x003C - 0x0080)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                      // 0x003C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FKAggregateGeom                             AggGeom;                                       // 0x0048 (0x0038) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.KMeshProps");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelBase
// 0x0054 (0x003C - 0x0090)
class ULevelBase : public UObject
{
public:
	uint8_t                                            UnknownData00[0x54];                            // 0x003C (0x0054) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelBase");
		}

		return uClassPointer;
	};

};

// Class Engine.Level
// 0x0320 (0x0090 - 0x03B0)
class ULevel : public ULevelBase
{
public:
	uint8_t                                            UnknownData00[0xD8];                            // 0x0090 (0x00D8) MISSED OFFSET
	float                                              LightmapTotalSize;                             // 0x0168 (0x0004) [0x0000000000020002] (CPF_Const | CPF_EditConst)
	float                                              ShadowmapTotalSize;                            // 0x016C (0x0004) [0x0000000000020002] (CPF_Const | CPF_EditConst)
	uint8_t                                            UnknownData01[0x240];                          // 0x0170 (0x0240) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Level");
		}

		return uClassPointer;
	};

};

// Class Engine.PendingLevel
// 0x0034 (0x0090 - 0x00C4)
class UPendingLevel : public ULevelBase
{
public:
	uint8_t                                            UnknownData00[0x34];                            // 0x0090 (0x0034) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PendingLevel");
		}

		return uClassPointer;
	};

};

// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x00C4 - 0x00C4)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DemoPlayPendingLevel");
		}

		return uClassPointer;
	};

};

// Class Engine.NetPendingLevel
// 0x0000 (0x00C4 - 0x00C4)
class UNetPendingLevel : public UPendingLevel
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NetPendingLevel");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelStreaming
// 0x00A8 (0x003C - 0x00E4)
class ULevelStreaming : public UObject
{
public:
	class FName                                        PackageName;                                   // 0x003C (0x0008) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	class ULevel*                                      LoadedLevel;                                   // 0x0044 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector                                     offset;                                        // 0x0048 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                            UnknownData00[0xC];                              // 0x0054 (0x000C) MISSED OFFSET
	struct FMatrix                                     LevelTransform;                                // 0x0060 (0x0040) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     OldOffset;                                     // 0x00A0 (0x000C) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bIsVisible : 1;                                // 0x00AC (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           bHasLoadRequestPending : 1;                    // 0x00AC (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bHasUnloadRequestPending : 1;                  // 0x00AC (0x0004) [0x0000000000002002] [0x00000004] (CPF_Const | CPF_Transient)
	uint32_t                                           bShouldBeVisibleInEditor : 1;                  // 0x00AC (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const | CPF_EditorOnly)
	uint32_t                                           bBoundingBoxVisible : 1;                       // 0x00AC (0x0004) [0x0000000000000002] [0x00000010] (CPF_Const)
	uint32_t                                           bLocked : 1;                                   // 0x00AC (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bIsFullyStatic : 1;                            // 0x00AC (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bShouldBeLoaded : 1;                           // 0x00AC (0x0004) [0x0000000000002002] [0x00000080] (CPF_Const | CPF_Transient)
	uint32_t                                           bShouldBeVisible : 1;                          // 0x00AC (0x0004) [0x0000000000002002] [0x00000100] (CPF_Const | CPF_Transient)
	uint32_t                                           bShouldBlockOnLoad : 1;                        // 0x00AC (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient)
	uint32_t                                           bDrawOnLevelStatusMap : 1;                     // 0x00AC (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bIsRequestingUnloadAndRemoval : 1;             // 0x00AC (0x0004) [0x0000000000002002] [0x00000800] (CPF_Const | CPF_Transient)
	struct FColor                                      DrawColor;                                     // 0x00B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class ALevelStreamingVolume*>         EditorStreamingVolumes;                        // 0x00B4 (0x000C) [0x0000000000420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink)
	float                                              MinTimeBetweenVolumeUnloadRequests;            // 0x00C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LastVolumeUnloadRequestTime;                   // 0x00C4 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class TArray<class FString>                        Keywords;                                      // 0x00C8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class ALevelGridVolume*                            EditorGridVolume;                              // 0x00D4 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	int32_t                                            GridPosition[3];                               // 0x00D8 (0x000C) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelStreaming");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0004 (0x00E4 - 0x00E8)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	uint32_t                                           bIsProceduralBuildingLODLevel : 1;             // 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelStreamingDistance
// 0x0010 (0x00E4 - 0x00F4)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                        // 0x00E4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDistance;                                   // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelStreamingDistance");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelStreamingKismet
// 0x0000 (0x00E4 - 0x00E4)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelStreamingKismet");
		}

		return uClassPointer;
	};

};

// Class Engine.LevelStreamingPersistent
// 0x0000 (0x00E4 - 0x00E4)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		}

		return uClassPointer;
	};

};

// Class Engine.LightmappedSurfaceCollection
// 0x0010 (0x003C - 0x004C)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                   // 0x003C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<int32_t>                              Surfaces;                                      // 0x0040 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		}

		return uClassPointer;
	};

};

// Class Engine.LightmassLevelSettings
// 0x0030 (0x003C - 0x006C)
class ULightmassLevelSettings : public UObject
{
public:
	int32_t                                            NumIndirectLightingBounces;                    // 0x003C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      EnvironmentColor;                              // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EnvironmentIntensity;                          // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EmissiveBoost;                                 // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DiffuseBoost;                                  // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpecularBoost;                                 // 0x0050 (0x0004) [0x0000000000000000]               
	uint32_t                                           bUseAmbientOcclusion : 1;                      // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bVisualizeAmbientOcclusion : 1;                // 0x0054 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              DirectIlluminationOcclusionFraction;           // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IndirectIlluminationOcclusionFraction;         // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionExponent;                             // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FullyOccludedSamplesFraction;                  // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxOcclusionDistance;                          // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightmassLevelSettings");
		}

		return uClassPointer;
	};

};

// Class Engine.LightmassPrimitiveSettingsObject
// 0x001C (0x003C - 0x0058)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                             // 0x003C (0x001C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		}

		return uClassPointer;
	};

};

// Class Engine.MapInfo
// 0x0000 (0x003C - 0x003C)
class UMapInfo : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MapInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.Model
// 0x09D0 (0x003C - 0x0A0C)
class UModel : public UObject
{
public:
	uint8_t                                            UnknownData00[0x9D0];                          // 0x003C (0x09D0) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Model");
		}

		return uClassPointer;
	};

};

// Class Engine.MusicTrackDataStructures
// 0x0000 (0x003C - 0x003C)
class UMusicTrackDataStructures : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MusicTrackDataStructures");
		}

		return uClassPointer;
	};

};

// Class Engine.NavigationMeshBase
// 0x0274 (0x003C - 0x02B0)
class UNavigationMeshBase : public UObject
{
public:
	uint8_t                                            UnknownData00[0x274];                          // 0x003C (0x0274) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavigationMeshBase");
		}

		return uClassPointer;
	};

};

// Class Engine.NetDriver
// 0x0144 (0x0040 - 0x0184)
class UNetDriver : public USubsystem
{
public:
	uint8_t                                            UnknownData00[0x20];                            // 0x0040 (0x0020) MISSED OFFSET
	float                                              ConnectionTimeout;                             // 0x0060 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              InitialConnectTimeout;                         // 0x0064 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              KeepAliveTime;                                 // 0x0068 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              RelevantTimeout;                               // 0x006C (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              SpawnPrioritySeconds;                          // 0x0070 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              ServerTravelPause;                             // 0x0074 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxClientRate;                                 // 0x0078 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxInternetClientRate;                         // 0x007C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            NetServerMaxTickRate;                          // 0x0080 (0x0004) [0x0000000000004000] (CPF_Config)  
	uint32_t                                           bClampListenServerTickRate : 1;                // 0x0084 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           AllowDownloads : 1;                            // 0x0088 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           AllowPeerConnections : 1;                      // 0x008C (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           AllowPeerVoice : 1;                            // 0x0090 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint8_t                                            UnknownData01[0x18];                            // 0x0094 (0x0018) MISSED OFFSET
	int32_t                                            MaxDownloadSize;                               // 0x00AC (0x0004) [0x0000000000004000] (CPF_Config)  
	class TArray<class FString>                        DownloadManagers;                              // 0x00B0 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	uint8_t                                            UnknownData02[0x90];                            // 0x00BC (0x0090) MISSED OFFSET
	class FString                                      NetConnectionClassName;                        // 0x014C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	uint8_t                                            UnknownData03[0x2C];                            // 0x0158 (0x002C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NetDriver");
		}

		return uClassPointer;
	};

};

// Class Engine.DemoRecDriver
// 0x00C4 (0x0184 - 0x0248)
class UDemoRecDriver : public UNetDriver
{
public:
	uint8_t                                            UnknownData00[0x28];                            // 0x0184 (0x0028) MISSED OFFSET
	class FString                                      DemoSpectatorClass;                            // 0x01AC (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	uint8_t                                            UnknownData01[0x7C];                            // 0x01B8 (0x007C) MISSED OFFSET
	int32_t                                            MaxRewindPoints;                               // 0x0234 (0x0004) [0x0000000000004000] (CPF_Config)  
	uint8_t                                            UnknownData02[0x4];                              // 0x0238 (0x0004) MISSED OFFSET
	float                                              RewindPointInterval;                           // 0x023C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            NumRecentRewindPoints;                         // 0x0240 (0x0004) [0x0000000000004000] (CPF_Config)  
	uint8_t                                            UnknownData03[0x4];                              // 0x0244 (0x0004) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DemoRecDriver");
		}

		return uClassPointer;
	};

};

// Class Engine.ObjectReferencer
// 0x000C (0x003C - 0x0048)
class UObjectReferencer : public UObject
{
public:
	class TArray<class UObject*>                       ReferencedObjects;                             // 0x003C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ObjectReferencer");
		}

		return uClassPointer;
	};

};

// Class Engine.OnlineAuthInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineAuthInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineAuthInterface");
		}

		return uClassPointer;
	};

	bool GetServerAddr(int32_t& outOutServerIP, int32_t& outOutServerPort);
	bool GetServerUniqueId(struct FUniqueNetId& outOutServerUID);
	bool FindLocalServerAuthSession(class UPlayer* ClientConnection, struct FLocalAuthSession& outOutSessionInfo);
	bool FindServerAuthSession(class UPlayer* ServerConnection, struct FAuthSession& outOutSessionInfo);
	bool FindLocalClientAuthSession(class UPlayer* ServerConnection, struct FLocalAuthSession& outOutSessionInfo);
	bool FindClientAuthSession(class UPlayer* ClientConnection, struct FAuthSession& outOutSessionInfo);
	void AllLocalServerAuthSessions(struct FLocalAuthSession& outOutSessionInfo);
	void AllServerAuthSessions(struct FAuthSession& outOutSessionInfo);
	void AllLocalClientAuthSessions(struct FLocalAuthSession& outOutSessionInfo);
	void AllClientAuthSessions(struct FAuthSession& outOutSessionInfo);
	void EndAllRemoteServerAuthSessions();
	void EndAllLocalServerAuthSessions();
	void EndRemoteServerAuthSession(const struct FUniqueNetId& ServerUID, int32_t ServerIP);
	void EndLocalServerAuthSession(const struct FUniqueNetId& ClientUID, int32_t ClientIP);
	bool VerifyServerAuthSession(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t AuthTicketUID);
	bool CreateServerAuthSession(const struct FUniqueNetId& ClientUID, int32_t ClientIP, int32_t ClientPort, int32_t& outOutAuthTicketUID);
	void EndAllRemoteClientAuthSessions();
	void EndAllLocalClientAuthSessions();
	void EndRemoteClientAuthSession(const struct FUniqueNetId& ClientUID, int32_t ClientIP);
	void EndLocalClientAuthSession(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t ServerPort);
	bool VerifyClientAuthSession(const struct FUniqueNetId& ClientUID, int32_t ClientIP, int32_t ClientPort, int32_t AuthTicketUID);
	bool CreateClientAuthSession(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t ServerPort, bool bSecure, int32_t& outOutAuthTicketUID);
	bool SendServerAuthRetryRequest();
	bool SendClientAuthEndSessionRequest(class UPlayer* ClientConnection);
	bool SendServerAuthResponse(class UPlayer* ClientConnection, int32_t AuthTicketUID);
	bool SendClientAuthResponse(int32_t AuthTicketUID);
	bool SendServerAuthRequest(const struct FUniqueNetId& ServerUID);
	bool SendClientAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID);
	void ClearServerConnectionCloseDelegate(const struct FScriptDelegate& ServerConnectionCloseDelegate);
	void AddServerConnectionCloseDelegate(const struct FScriptDelegate& ServerConnectionCloseDelegate);
	void OnServerConnectionClose(class UPlayer* ServerConnection);
	void ClearClientConnectionCloseDelegate(const struct FScriptDelegate& ClientConnectionCloseDelegate);
	void AddClientConnectionCloseDelegate(const struct FScriptDelegate& ClientConnectionCloseDelegate);
	void OnClientConnectionClose(class UPlayer* ClientConnection);
	void ClearServerAuthRetryRequestDelegate(const struct FScriptDelegate& ServerAuthRetryRequestDelegate);
	void AddServerAuthRetryRequestDelegate(const struct FScriptDelegate& ServerAuthRetryRequestDelegate);
	void OnServerAuthRetryRequest(class UPlayer* ClientConnection);
	void ClearClientAuthEndSessionRequestDelegate(const struct FScriptDelegate& ClientAuthEndSessionRequestDelegate);
	void AddClientAuthEndSessionRequestDelegate(const struct FScriptDelegate& ClientAuthEndSessionRequestDelegate);
	void OnClientAuthEndSessionRequest(class UPlayer* ServerConnection);
	void ClearServerAuthCompleteDelegate(const struct FScriptDelegate& ServerAuthCompleteDelegate);
	void AddServerAuthCompleteDelegate(const struct FScriptDelegate& ServerAuthCompleteDelegate);
	void OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const class FString& ExtraInfo);
	void ClearClientAuthCompleteDelegate(const struct FScriptDelegate& ClientAuthCompleteDelegate);
	void AddClientAuthCompleteDelegate(const struct FScriptDelegate& ClientAuthCompleteDelegate);
	void OnClientAuthComplete(bool bSuccess, const struct FUniqueNetId& ClientUID, class UPlayer* ClientConnection, const class FString& ExtraInfo);
	void ClearServerAuthResponseDelegate(const struct FScriptDelegate& ServerAuthResponseDelegate);
	void AddServerAuthResponseDelegate(const struct FScriptDelegate& ServerAuthResponseDelegate);
	void OnServerAuthResponse(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t AuthTicketUID);
	void ClearClientAuthResponseDelegate(const struct FScriptDelegate& ClientAuthResponseDelegate);
	void AddClientAuthResponseDelegate(const struct FScriptDelegate& ClientAuthResponseDelegate);
	void OnClientAuthResponse(const struct FUniqueNetId& ClientUID, int32_t ClientIP, int32_t AuthTicketUID);
	void ClearServerAuthRequestDelegate(const struct FScriptDelegate& ServerAuthRequestDelegate);
	void AddServerAuthRequestDelegate(const struct FScriptDelegate& ServerAuthRequestDelegate);
	void OnServerAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID, int32_t ClientIP, int32_t ClientPort);
	void ClearClientAuthRequestDelegate(const struct FScriptDelegate& ClientAuthRequestDelegate);
	void AddClientAuthRequestDelegate(const struct FScriptDelegate& ClientAuthRequestDelegate);
	void OnClientAuthRequest(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t ServerPort, bool bSecure);
	void ClearAuthReadyDelegate(const struct FScriptDelegate& AuthReadyDelegate);
	void AddAuthReadyDelegate(const struct FScriptDelegate& AuthReadyDelegate);
	void OnAuthReady();
	bool IsReady();
};

// Class Engine.OnlineMatchmakingStats
// 0x0000 (0x003C - 0x003C)
class UOnlineMatchmakingStats : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineMatchmakingStats");
		}

		return uClassPointer;
	};

	void StopTimer(struct FMMStats_Timer& outTimer);
	void StartTimer(struct FMMStats_Timer& outTimer);
};

// Class Engine.OnlinePlayerStorage
// 0x002C (0x003C - 0x0068)
class UOnlinePlayerStorage : public UObject
{
public:
	int32_t                                            VersionNumber;                                 // 0x003C (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            VersionSettingsId;                             // 0x0040 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SaveCountSettingId;                            // 0x0044 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<struct FOnlineProfileSetting>         ProfileSettings;                               // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FSettingsPropertyPropertyMetaData> ProfileMappings;                               // 0x0054 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	EOnlinePlayerStorageAsyncState                     AsyncState;                                    // 0x0060 (0x0001) [0x0000000000000002] (CPF_Const)   
	int32_t                                            DeviceID;                                      // 0x0064 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlinePlayerStorage");
		}

		return uClassPointer;
	};

	void SetDefaultVersionNumber();
	int32_t GetVersionNumber();
	void AppendVersionToSettings();
	void eventSetToDefaults();
	void AddSettingFloat(int32_t SettingId);
	void AddSettingInt(int32_t SettingId);
	bool GetRangedProfileSettingValue(int32_t ProfileId, float& outOutValue);
	bool SetRangedProfileSettingValue(int32_t ProfileId, float NewValue);
	bool GetProfileSettingRange(int32_t ProfileId, float& outOutMinValue, float& outOutMaxValue, float& outRangeIncrement, uint8_t& outBFormatAsInt);
	static bool GetProfileSettingMappingIds(int32_t ProfileId, class TArray<int32_t>& outIds);
	bool GetProfileSettingMappingType(int32_t ProfileId, EPropertyValueMappingType& outOutType);
	bool SetProfileSettingValueFloat(int32_t ProfileSettingId, float Value);
	bool SetProfileSettingValueInt(int32_t ProfileSettingId, int32_t Value);
	bool SetProfileSettingValueId(int32_t ProfileSettingId, int32_t Value);
	bool GetProfileSettingValueFloat(int32_t ProfileSettingId, float& outValue);
	bool GetProfileSettingValueInt(int32_t ProfileSettingId, int32_t& outValue);
	bool GetProfileSettingValueFromListIndex(int32_t ProfileSettingId, int32_t ListIndex, int32_t& outValue);
	bool GetProfileSettingValueId(int32_t ProfileSettingId, int32_t& outValueId, int32_t& outListIndex);
	bool SetProfileSettingValue(int32_t ProfileSettingId, class FString& outNewValue);
	bool SetProfileSettingValueByName(const class FName& ProfileSettingName, class FString& outNewValue);
	bool GetProfileSettingValueByName(const class FName& ProfileSettingName, class FString& outValue);
	bool GetProfileSettingValues(int32_t ProfileSettingId, class TArray<class FName>& outValues);
	class FName GetProfileSettingValueName(int32_t ProfileSettingId);
	bool GetProfileSettingValue(int32_t ProfileSettingId, int32_t optionalValueMapID, class FString& outValue);
	bool IsProfileSettingIdMapped(int32_t ProfileSettingId);
	static int32_t FindDefaultProfileMappingIndexByName(const class FName& ProfileSettingName);
	int32_t FindProfileMappingIndexByName(const class FName& ProfileSettingName);
	int32_t FindProfileMappingIndex(int32_t ProfileSettingId);
	int32_t FindProfileSettingIndex(int32_t ProfileSettingId);
	class FString GetProfileSettingColumnHeader(int32_t ProfileSettingId);
	class FName GetProfileSettingName(int32_t ProfileSettingId);
	bool GetProfileSettingId(const class FName& ProfileSettingName, int32_t& outProfileSettingId);
};

// Class Engine.OnlineProfileSettings
// 0x0024 (0x0068 - 0x008C)
class UOnlineProfileSettings : public UOnlinePlayerStorage
{
public:
	class TArray<int32_t>                              ProfileSettingIds;                             // 0x0068 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FOnlineProfileSetting>         DefaultSettings;                               // 0x0074 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FIdToStringMapping>            OwnerMappings;                                 // 0x0080 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineProfileSettings");
		}

		return uClassPointer;
	};

	void eventModifyAvailableProfileSettings();
	void AppendVersionToReadIds();
	void eventSetToDefaults();
	bool GetProfileSettingDefaultFloat(int32_t ProfileSettingId, float& outDefaultFloat);
	bool GetProfileSettingDefaultInt(int32_t ProfileSettingId, int32_t& outDefaultInt);
	bool GetProfileSettingDefaultId(int32_t ProfileSettingId, int32_t& outDefaultId, int32_t& outListIndex);
};

// Class Engine.OnlineStats
// 0x000C (0x003C - 0x0048)
class UOnlineStats : public UObject
{
public:
	class TArray<struct FStringIdToStringMapping>      ViewIdMappings;                                // 0x003C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineStats");
		}

		return uClassPointer;
	};

	class FName GetViewName(int32_t ViewId);
	bool GetViewId(const class FName& ViewName, int32_t& outViewId);
};

// Class Engine.OnlineStatsRead
// 0x0040 (0x0048 - 0x0088)
class UOnlineStatsRead : public UOnlineStats
{
public:
	int32_t                                            ViewId;                                        // 0x0048 (0x0004) [0x0000000000000000]               
	int32_t                                            SortColumnId;                                  // 0x004C (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<int32_t>                              ColumnIds;                                     // 0x0050 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	int32_t                                            TotalRowsInView;                               // 0x005C (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<struct FOnlineStatsRow>               Rows;                                          // 0x0060 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FColumnMetaData>               ColumnMappings;                                // 0x006C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FString                                      ViewName;                                      // 0x0078 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	int32_t                                            TitleId;                                       // 0x0084 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineStatsRead");
		}

		return uClassPointer;
	};

	int32_t GetRankForPlayer(const struct FUniqueNetId& PlayerID);
	void AddPlayer(const class FString& PlayerName, const struct FUniqueNetId& PlayerID);
	bool IsStatZero(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo);
	bool GetStatValueForPlayerAsString(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, class FString& outStatValue);
	bool SetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, float StatValue);
	bool GetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, float& outStatValue);
	bool SetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, int32_t StatValue);
	bool GetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int32_t StatColumnNo, int32_t& outStatValue);
	void eventOnReadComplete();
};

// Class Engine.OnlineStatsWrite
// 0x0040 (0x0048 - 0x0088)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	class TArray<struct FStringIdToStringMapping>      StatMappings;                                  // 0x0048 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FSettingsProperty>             Properties;                                    // 0x0054 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<int32_t>                              ViewIds;                                       // 0x0060 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<int32_t>                              ArbitratedViewIds;                             // 0x006C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            RatingId;                                      // 0x0078 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;              // 0x007C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineStatsWrite");
		}

		return uClassPointer;
	};

	void DecrementIntStat(int32_t StatId, int32_t optionalDecBy);
	void DecrementFloatStat(int32_t StatId, float optionalDecBy);
	void IncrementIntStat(int32_t StatId, int32_t optionalIncBy);
	void IncrementFloatStat(int32_t StatId, float optionalIncBy);
	void SetIntStat(int32_t StatId, int32_t Value);
	void SetFloatStat(int32_t StatId, float Value);
	class FName GetStatName(int32_t StatId);
	bool GetStatId(const class FName& StatName, int32_t& outStatId);
	void OnStatsWriteComplete();
};

// Class Engine.OnlineSubsystem
// 0x00C4 (0x003C - 0x0100)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                       // 0x003C (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UOnlineAccountInterface*                     AccountInterface_Object;                       // 0x0040 (0x0004) [0x0000000000000000] 
	class UOnlineAccountInterface*                     AccountInterface_Interface;                    // 0x0044 (0x0004) [0x0000000000000000]               
	class UOnlinePlayerInterface*                      PlayerInterface_Object;                        // 0x0048 (0x0004) [0x0000000000000000] 
	class UOnlinePlayerInterface*                      PlayerInterface_Interface;                     // 0x004C (0x0004) [0x0000000000000000]               
	class UOnlinePlayerInterfaceEx*                    PlayerInterfaceEx_Object;                      // 0x0050 (0x0004) [0x0000000000000000] 
	class UOnlinePlayerInterfaceEx*                    PlayerInterfaceEx_Interface;                   // 0x0054 (0x0004) [0x0000000000000000]               
	class UOnlineSystemInterface*                      SystemInterface_Object;                        // 0x0058 (0x0004) [0x0000000000000000] 
	class UOnlineSystemInterface*                      SystemInterface_Interface;                     // 0x005C (0x0004) [0x0000000000000000]               
	class UOnlineGameInterface*                        GameInterface_Object;                          // 0x0060 (0x0004) [0x0000000000000000] 
	class UOnlineGameInterface*                        GameInterface_Interface;                       // 0x0064 (0x0004) [0x0000000000000000]               
	class UOnlineContentInterface*                     ContentInterface_Object;                       // 0x0068 (0x0004) [0x0000000000000000] 
	class UOnlineContentInterface*                     ContentInterface_Interface;                    // 0x006C (0x0004) [0x0000000000000000]               
	class UOnlineVoiceInterface*                       VoiceInterface_Object;                         // 0x0070 (0x0004) [0x0000000000000000] 
	class UOnlineVoiceInterface*                       VoiceInterface_Interface;                      // 0x0074 (0x0004) [0x0000000000000000]               
	class UOnlineStatsInterface*                       StatsInterface_Object;                         // 0x0078 (0x0004) [0x0000000000000000] 
	class UOnlineStatsInterface*                       StatsInterface_Interface;                      // 0x007C (0x0004) [0x0000000000000000]               
	class UOnlineNewsInterface*                        NewsInterface_Object;                          // 0x0080 (0x0004) [0x0000000000000000] 
	class UOnlineNewsInterface*                        NewsInterface_Interface;                       // 0x0084 (0x0004) [0x0000000000000000]               
	class UOnlinePartyChatInterface*                   PartyChatInterface_Object;                     // 0x0088 (0x0004) [0x0000000000000000] 
	class UOnlinePartyChatInterface*                   PartyChatInterface_Interface;                  // 0x008C (0x0004) [0x0000000000000000]               
	class UOnlineTitleFileInterface*                   TitleFileInterface_Object;                     // 0x0090 (0x0004) [0x0000000000000000] 
	class UOnlineTitleFileInterface*                   TitleFileInterface_Interface;                  // 0x0094 (0x0004) [0x0000000000000000]               
	class UOnlineTitleFileCacheInterface*              TitleFileCacheInterface_Object;                // 0x0098 (0x0004) [0x0000000000000000] 
	class UOnlineTitleFileCacheInterface*              TitleFileCacheInterface_Interface;             // 0x009C (0x0004) [0x0000000000000000]               
	class UUserCloudFileInterface*                     UserCloudInterface_Object;                     // 0x00A0 (0x0004) [0x0000000000000000] 
	class UUserCloudFileInterface*                     UserCloudInterface_Interface;                  // 0x00A4 (0x0004) [0x0000000000000000]               
	class USharedCloudFileInterface*                   SharedCloudInterface_Object;                   // 0x00A8 (0x0004) [0x0000000000000000] 
	class USharedCloudFileInterface*                   SharedCloudInterface_Interface;                // 0x00AC (0x0004) [0x0000000000000000]               
	class UOnlineSocialInterface*                      SocialInterface_Object;                        // 0x00B0 (0x0004) [0x0000000000000000] 
	class UOnlineSocialInterface*                      SocialInterface_Interface;                     // 0x00B4 (0x0004) [0x0000000000000000]               
	class UOnlineAuthInterface*                        AuthInterface_Object;                          // 0x00B8 (0x0004) [0x0000000000000000] 
	class UOnlineAuthInterface*                        AuthInterface_Interface;                       // 0x00BC (0x0004) [0x0000000000000000]               
	class TArray<struct FNamedInterface>               NamedInterfaces;                               // 0x00C0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FNamedInterfaceDef>            NamedInterfaceDefs;                            // 0x00CC (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FNamedSession>                 Sessions;                                      // 0x00D8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           bUseBuildIdOverride : 1;                       // 0x00E4 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	int32_t                                            BuildIdOverride;                               // 0x00E8 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      IniLocPatcherClassName;                        // 0x00EC (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UIniLocPatcher*                              Patcher;                                       // 0x00F8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              AsyncMinCompletionTime;                        // 0x00FC (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineSubsystem");
		}

		return uClassPointer;
	};

	void SetDebugSpewLevel(int32_t DebugSpewLevel);
	void DumpVoiceRegistration();
	void DumpSessionState();
	static void DumpGameSettings(class UOnlineGameSettings* GameSettings);
	static int32_t GetNumSupportedLogins();
	int32_t GetBuildUniqueId();
	struct FUniqueNetId eventGetPlayerUniqueNetIdFromIndex(int32_t UserIndex);
	static bool StringToUniqueNetId(const class FString& UniqueNetIdString, struct FUniqueNetId& outOut_UniqueId);
	static class FString UniqueNetIdToString(struct FUniqueNetId& outIdToConvert);
	class UObject* eventGetNamedInterface(const class FName& InterfaceName);
	void eventSetNamedInterface(const class FName& InterfaceName, class UObject* NewInterface);
	bool eventSetSharedCloudInterface(class UObject* InCloudInterface);
	bool eventSetUserCloudInterface(class UObject* InCloudInterface);
	bool eventSetAuthInterface(class UObject* InAuthInterface);
	bool eventSetSocialInterface(class UObject* InSocialInterface);
	bool eventSetTitleFileCacheInterface(class UObject* NewInterface);
	bool eventSetTitleFileInterface(class UObject* NewInterface);
	bool eventSetPartyChatInterface(class UObject* NewInterface);
	bool eventSetNewsInterface(class UObject* NewInterface);
	bool eventSetStatsInterface(class UObject* NewInterface);
	bool eventSetVoiceInterface(class UObject* NewInterface);
	bool eventSetContentInterface(class UObject* NewInterface);
	bool eventSetGameInterface(class UObject* NewInterface);
	bool eventSetSystemInterface(class UObject* NewInterface);
	bool eventSetPlayerInterfaceEx(class UObject* NewInterface);
	bool eventSetPlayerInterface(class UObject* NewInterface);
	bool eventSetAccountInterface(class UObject* NewInterface);
	void eventExit();
	bool eventPostInit();
	bool eventInit();
};

// Class Engine.PackageMapLevel
// 0x0004 (0x00C0 - 0x00C4)
class UPackageMapLevel : public UPackageMap
{
public:
	uint8_t                                            UnknownData00[0x4];                              // 0x00C0 (0x0004) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PackageMapLevel");
		}

		return uClassPointer;
	};

};

// Class Engine.PackageMapSeekFree
// 0x0000 (0x00C4 - 0x00C4)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PackageMapSeekFree");
		}

		return uClassPointer;
	};

};

// Class Engine.PatchScriptCommandlet
// 0x0004 (0x007C - 0x0080)
class UPatchScriptCommandlet : public UCommandlet
{
public:
	uint8_t                                            UnknownData00[0x4];                              // 0x007C (0x0004) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PatchScriptCommandlet");
		}

		return uClassPointer;
	};

};

// Class Engine.Player
// 0x0024 (0x003C - 0x0060)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                 // 0x003C (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class APlayerController*                           Actor;                                         // 0x0040 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            CurrentNetSpeed;                               // 0x0044 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            ConfiguredInternetSpeed;                       // 0x0048 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            ConfiguredLanSpeed;                            // 0x004C (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              PP_DesaturationMultiplier;                     // 0x0050 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PP_HighlightsMultiplier;                       // 0x0054 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PP_MidTonesMultiplier;                         // 0x0058 (0x0004) [0x0000000000004000] (CPF_Config)  
	float                                              PP_ShadowsMultiplier;                          // 0x005C (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Player");
		}

		return uClassPointer;
	};

	void SwitchController(class APlayerController* PC);
};

// Class Engine.LocalPlayer
// 0x034C (0x0060 - 0x03AC)
class ULocalPlayer : public UPlayer
{
public:
	struct FPointer                                    VfTable_FObserverInterface;                    // 0x0060 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	int32_t                                            ControllerId;                                  // 0x0064 (0x0004) [0x0000000000000000]               
	class UGameViewportClient*                         ViewportClient;                                // 0x0068 (0x0004) [0x0000000000000000]               
	struct FVector2D                                   Origin;                                        // 0x006C (0x0008) [0x0000000000000000]               
	struct FVector2D                                   Size;                                          // 0x0074 (0x0008) [0x0000000000000000]               
	class UPostProcessChain*                           PlayerPostProcess;                             // 0x007C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class TArray<class UPostProcessChain*>             PlayerPostProcessChains;                       // 0x0080 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bForceDefaultPostProcessChain : 1;             // 0x008C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bWantToResetToMapDefaultPP : 1;                // 0x008C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bSentSplitJoin : 1;                            // 0x008C (0x0004) [0x0000000000022002] [0x00000004] (CPF_Const | CPF_Transient | CPF_EditConst)
	uint32_t                                           bPendingServerAuth : 1;                        // 0x008C (0x0004) [0x0000000000000000] [0x00000008] 
	struct FPointer                                    ViewState;                                     // 0x0090 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    ViewState2;                                    // 0x0094 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                        // 0x0098 (0x0008) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FVector                                     LastViewLocation;                              // 0x00A0 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                 // 0x00AC (0x0160) [0x0000000001402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FCurrentPostProcessVolumeInfo               LevelPPInfo;                                   // 0x020C (0x0160) [0x0000000001402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FPostProcessSettingsOverride>  ActivePPOverrides;                             // 0x036C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	EAspectRatioAxisConstraint                         AspectRatioAxisConstraint;                     // 0x0378 (0x0001) [0x0000000000004000] (CPF_Config)  
	class FString                                      LastMap;                                       // 0x037C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UTranslationContext*                         TagContext;                                    // 0x0388 (0x0004) [0x0000000000000000]               
	class UOnlineAuthInterface*                        CachedAuthInt_Object;                          // 0x038C (0x0004) [0x0000000000000000] 
	class UOnlineAuthInterface*                        CachedAuthInt_Interface;                       // 0x0390 (0x0004) [0x0000000000000000]               
	float                                              ServerAuthTimestamp;                           // 0x0394 (0x0004) [0x0000000000000000]               
	int32_t                                            ServerAuthTimeout;                             // 0x0398 (0x0004) [0x0000000000000000]               
	int32_t                                            ServerAuthRetryCount;                          // 0x039C (0x0004) [0x0000000000000000]               
	int32_t                                            MaxServerAuthRetryCount;                       // 0x03A0 (0x0004) [0x0000000000000000]               
	struct FUniqueNetId                                ServerAuthUID;                                 // 0x03A4 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LocalPlayer");
		}

		return uClassPointer;
	};

	void Cleanup(bool optionalBExit);
	void eventExit();
	void eventNotifyServerConnectionClose();
	void eventViewportClosed();
	static void StaticOnServerConnectionClose(class UPlayer* ServerConnection);
	void OnServerConnectionClose(class UPlayer* ServerConnection);
	void ServerAuthFailure();
	void eventServerAuthTimedOut();
	void OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const class FString& ExtraInfo);
	void ProcessServerAuthResponse(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t AuthTicketUID);
	void ProcessClientAuthEndSessionRequest(class UPlayer* ServerConnection);
	void ProcessClientAuthRequest(const struct FUniqueNetId& ServerUID, int32_t ServerIP, int32_t ServerPort, bool bSecure);
	void eventNotifyServerConnectionOpen();
	class FString eventGetNickname();
	struct FUniqueNetId eventGetUniqueNetId();
	struct FVector2D Project(const struct FVector& WorldLoc);
	void DeProject(const struct FVector2D& RelativeScreenPos, struct FVector& outWorldOrigin, struct FVector& outWorldDirection);
	void TouchPlayerPostProcessChain();
	class UPostProcessChain* GetPostProcessChain(int32_t InIndex);
	bool RemoveAllPostProcessingChains();
	bool RemovePostProcessingChain(int32_t InIndex);
	bool InsertPostProcessingChain(class UPostProcessChain* InChain, int32_t InIndex, bool bInClone);
	class UTranslationContext* GetTranslationContext();
	void SetControllerId(int32_t NewControllerId);
	void ClearPostProcessSettingsOverride(float optionalBlendOutTime);
	void OverridePostProcessSettingsCurve(const struct FPostProcessSettings& OverrideSettings, struct FInterpCurveFloat& outCurve);
	void OverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings, float optionalBlendInTime);
	bool GetActorVisibility(class AActor* TestActor);
	void SendSplitJoin();
	bool SpawnPlayActor(const class FString& URL, class FString& outOutError);
};

// Class Engine.NetConnection
// 0x8F90 (0x0060 - 0x8FF0)
class UNetConnection : public UPlayer
{
public:
	uint8_t                                            UnknownData00[0x8F68];                        // 0x0060 (0x8F68) MISSED OFFSET
	class TArray<class UChildConnection*>              Children;                                      // 0x8FC8 (0x000C) [0x0000000000602000] (CPF_Transient | CPF_NeedCtorLink)
	uint8_t                                            UnknownData01[0x1C];                            // 0x8FD4 (0x001C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NetConnection");
		}

		return uClassPointer;
	};

};

// Class Engine.ChildConnection
// 0x0004 (0x8FF0 - 0x8FF4)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                        // 0x8FF0 (0x0004) [0x0000000000202002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ChildConnection");
		}

		return uClassPointer;
	};

};

// Class Engine.DemoRecConnection
// 0x0000 (0x8FF0 - 0x8FF0)
class UDemoRecConnection : public UNetConnection
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DemoRecConnection");
		}

		return uClassPointer;
	};

};

// Class Engine.Polys
// 0x0010 (0x003C - 0x004C)
class UPolys : public UObject
{
public:
	uint8_t                                            UnknownData00[0x10];                            // 0x003C (0x0010) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Polys");
		}

		return uClassPointer;
	};

};

// Class Engine.PostProcessChain
// 0x000C (0x003C - 0x0048)
class UPostProcessChain : public UObject
{
public:
	class TArray<class UPostProcessEffect*>            Effects;                                       // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PostProcessChain");
		}

		return uClassPointer;
	};

	class UPostProcessEffect* FindPostProcessEffect(const class FName& EffectName);
};

// Class Engine.PostProcessEffect
// 0x0025 (0x003C - 0x0061)
class UPostProcessEffect : public UObject
{
public:
	uint32_t                                           bShowInEditor : 1;                             // 0x003C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bShowInGame : 1;                               // 0x003C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseWorldSettings : 1;                         // 0x003C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAffectsLightingOnly : 1;                      // 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	class FName                                        EffectName;                                    // 0x0040 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NodePosY;                                      // 0x0048 (0x0004) [0x0000000000000000]               
	int32_t                                            NodePosX;                                      // 0x004C (0x0004) [0x0000000000000000]               
	int32_t                                            DrawWidth;                                     // 0x0050 (0x0004) [0x0000000000000000]               
	int32_t                                            DrawHeight;                                    // 0x0054 (0x0004) [0x0000000000000000]               
	int32_t                                            OutDrawY;                                      // 0x0058 (0x0004) [0x0000000000000000]               
	int32_t                                            InDrawY;                                       // 0x005C (0x0004) [0x0000000000000000]               
	ESceneDepthPriorityGroup                           SceneDPG;                                      // 0x0060 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PostProcessEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientOcclusionEffect
// 0x005F (0x0061 - 0x00C0)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	struct FLinearColor                                OcclusionColor;                                // 0x0064 (0x0010) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              OcclusionPower;                                // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionScale;                                // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionBias;                                 // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinOcclusion;                                  // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           SSAO2 : 1;                                     // 0x0084 (0x0004) [0x0000000020000000] [0x00000001]  CPF_Deprecated)
	uint32_t                                           bAngleBasedSSAO : 1;                           // 0x0084 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              OcclusionRadius;                               // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionAttenuation;                          // 0x008C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	EAmbientOcclusionQuality                           OcclusionQuality;                              // 0x0090 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionFadeoutMinDistance;                   // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionFadeoutMaxDistance;                   // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HaloDistanceThreshold;                         // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HaloDistanceScale;                             // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HaloOcclusion;                                 // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EdgeDistanceThreshold;                         // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EdgeDistanceScale;                             // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FilterDistanceScale;                           // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            FilterSize;                                    // 0x00B4 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              HistoryConvergenceTime;                        // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HistoryWeightConvergenceTime;                  // 0x00BC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientOcclusionEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.BlurEffect
// 0x0007 (0x0061 - 0x0068)
class UBlurEffect : public UPostProcessEffect
{
public:
	int32_t                                            BlurKernelSize;                                // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.BlurEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.DOFEffect
// 0x002F (0x0061 - 0x0090)
class UDOFEffect : public UPostProcessEffect
{
public:
	float                                              FalloffExponent;                               // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlurKernelSize;                                // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxNearBlurAmount;                             // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinBlurAmount;                                 // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxFarBlurAmount;                              // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EFocusType                                         FocusType;                                     // 0x0078 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              FocusInnerRadius;                              // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FocusDistance;                                 // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FocusPosition;                                 // 0x0084 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DOFEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.DOFAndBloomEffect
// 0x0024 (0x0090 - 0x00B4)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                    // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomThreshold;                                // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      BloomTint;                                     // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomScreenBlendThreshold;                     // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SceneMultiplier;                               // 0x00A0 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              BlurBloomKernelSize;                           // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnableReferenceDOF : 1;                       // 0x00A8 (0x0004) [0x0000000020000000] [0x00000001]  CPF_Deprecated)
	EDOFType                                           DepthOfFieldType;                              // 0x00AC (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDOFQuality                                        DepthOfFieldQuality;                           // 0x00AD (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  BokehTexture;                                  // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DOFAndBloomEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.DOFBloomMotionBlurEffect
// 0x0014 (0x00B4 - 0x00C8)
class UDOFBloomMotionBlurEffect : public UDOFAndBloomEffect
{
public:
	float                                              MaxVelocity;                                   // 0x00B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MotionBlurAmount;                              // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           FullMotionBlur : 1;                            // 0x00BC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              CameraRotationThreshold;                       // 0x00C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraTranslationThreshold;                    // 0x00C4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DOFBloomMotionBlurEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.UberPostProcessEffect
// 0x00B0 (0x00C8 - 0x0178)
class UUberPostProcessEffect : public UDOFBloomMotionBlurEffect
{
public:
	struct FVector                                     SceneShadows;                                  // 0x00C8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     SceneHighLights;                               // 0x00D4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     SceneMidTones;                                 // 0x00E0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              SceneDesaturation;                             // 0x00EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     SceneColorize;                                 // 0x00F0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	ETonemapperType                                    TonemapperType;                                // 0x00FC (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPostProcessAAType                                 PostProcessAAType;                             // 0x00FD (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPostProcessREDType                                PostProcessREDType;                            // 0x00FE (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              TonemapperRange;                               // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TonemapperToeFactor;                           // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TonemapperScale;                               // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MotionBlurSoftEdgeKernelSize;                  // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnableImageGrain : 1;                         // 0x0110 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bScaleEffectsWithViewSize : 1;                 // 0x0110 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseColorEdgeDetectionForSMAA : 1;             // 0x0110 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bEnableHDRTonemapper : 1;                      // 0x0110 (0x0004) [0x0000000020000000] [0x00000008]  CPF_Deprecated)
	float                                              SceneImageGrainScale;                          // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomWeightSmall;                              // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomWeightMedium;                             // 0x011C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomWeightLarge;                              // 0x0120 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomSizeScaleSmall;                           // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomSizeScaleMedium;                          // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomSizeScaleLarge;                           // 0x012C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EdgeDetectionThreshold;                        // 0x0130 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DiffusionFilter_LuminanceSampleLow;            // 0x0134 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DiffusionFilter2_LuminancePow;                 // 0x0138 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SoftFocus_Blend;                               // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Glow_LuminanceSampleLow;                       // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              All_Saturation;                                // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SMAAEdgeDetectionThreshold;                    // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLUTBlender                                 PreviousLUTBlender;                            // 0x014C (0x001C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	float                                              SceneHDRTonemapperScale;                       // 0x0168 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	struct FVector                                     ContrastEffectParam;                           // 0x016C (0x000C) [0x0000000000003000] (CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UberPostProcessEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.DwTriovizImplEffect
// 0x0003 (0x0061 - 0x0064)
class UDwTriovizImplEffect : public UPostProcessEffect
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DwTriovizImplEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialEffect
// 0x0007 (0x0061 - 0x0068)
class UMaterialEffect : public UPostProcessEffect
{
public:
	class UMaterialInterface*                          Material;                                      // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.MotionBlurEffect
// 0x0017 (0x0061 - 0x0078)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	float                                              MaxVelocity;                                   // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MotionBlurAmount;                              // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           FullMotionBlur : 1;                            // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              CameraRotationThreshold;                       // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraTranslationThreshold;                    // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MotionBlurEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.PrimitiveComponentFactory
// 0x0004 (0x003C - 0x0040)
class UPrimitiveComponentFactory : public UObject
{
public:
	uint32_t                                           CollideActors : 1;                             // 0x003C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           BlockActors : 1;                               // 0x003C (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           BlockZeroExtent : 1;                           // 0x003C (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           BlockNonZeroExtent : 1;                        // 0x003C (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           BlockRigidBody : 1;                            // 0x003C (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           HiddenGame : 1;                                // 0x003C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           HiddenEditor : 1;                              // 0x003C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           CastShadow : 1;                                // 0x003C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PrimitiveComponentFactory");
		}

		return uClassPointer;
	};

};

// Class Engine.MeshComponentFactory
// 0x000C (0x0040 - 0x004C)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	class TArray<class UMaterialInterface*>            Materials;                                     // 0x0040 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MeshComponentFactory");
		}

		return uClassPointer;
	};

};

// Class Engine.StaticMeshComponentFactory
// 0x0004 (0x004C - 0x0050)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                    // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StaticMeshComponentFactory");
		}

		return uClassPointer;
	};

};

// Class Engine.ReachSpec
// 0x0054 (0x003C - 0x0090)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                               // 0x003C (0x0004) [0x0000000000023002] (CPF_Const | CPF_Native | CPF_Transient | CPF_EditConst)
	int32_t                                            Distance;                                      // 0x0040 (0x0004) [0x0000000000000000]               
	struct FVector                                     Direction;                                     // 0x0044 (0x000C) [0x0000000000000000]               
	class ANavigationPoint*                            Start;                                         // 0x0050 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	struct FActorReference                             End;                                           // 0x0054 (0x0014) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	int32_t                                            CollisionRadius;                               // 0x0068 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	int32_t                                            CollisionHeight;                               // 0x006C (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	int32_t                                            reachFlags;                                    // 0x0070 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxLandingVelocity;                            // 0x0074 (0x0004) [0x0000000000000000]               
	uint8_t                                            bPruned;                                       // 0x0078 (0x0001) [0x0000000000000000]               
	uint8_t                                            PathColorIndex;                                // 0x0079 (0x0001) [0x0000000000000000]               
	uint32_t                                           bAddToNavigationOctree : 1;                    // 0x007C (0x0004) [0x0000000000020002] [0x00000001] (CPF_Const | CPF_EditConst)
	uint32_t                                           bCanCutCorners : 1;                            // 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bCheckForObstructions : 1;                     // 0x007C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bSkipPrune : 1;                                // 0x007C (0x0004) [0x0000000000000002] [0x00000008] (CPF_Const)
	uint32_t                                           bDisabled : 1;                                 // 0x007C (0x0004) [0x0000000000020001] [0x00000010] (CPF_Edit | CPF_EditConst)
	class TArray<class UClass*>                        PruneSpecList;                                 // 0x0080 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class AActor*                                      BlockedBy;                                     // 0x008C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ReachSpec");
		}

		return uClassPointer;
	};

	bool IsBlockedFor(class APawn* P);
	struct FVector GetDirection();
	class ANavigationPoint* GetEnd();
	int32_t CostFor(class APawn* P);
};

// Class Engine.AdvancedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UAdvancedReachSpec : public UReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AdvancedReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.CeilingReachSpec
// 0x0000 (0x0090 - 0x0090)
class UCeilingReachSpec : public UReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CeilingReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.ForcedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UForcedReachSpec : public UReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ForcedReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.CoverSlipReachSpec
// 0x0001 (0x0090 - 0x0091)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	uint8_t                                            SpecDirection;                                 // 0x0090 (0x0001) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CoverSlipReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.FloorToCeilingReachSpec
// 0x0000 (0x0090 - 0x0090)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FloorToCeilingReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.MantleReachSpec
// 0x0004 (0x0090 - 0x0094)
class UMantleReachSpec : public UForcedReachSpec
{
public:
	uint32_t                                           bClimbUp : 1;                                  // 0x0090 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MantleReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.SlotToSlotReachSpec
// 0x0001 (0x0090 - 0x0091)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	uint8_t                                            SpecDirection;                                 // 0x0090 (0x0001) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SlotToSlotReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.SwatTurnReachSpec
// 0x0001 (0x0090 - 0x0091)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	uint8_t                                            SpecDirection;                                 // 0x0090 (0x0001) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SwatTurnReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.WallTransReachSpec
// 0x0000 (0x0090 - 0x0090)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WallTransReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.LadderReachSpec
// 0x0000 (0x0090 - 0x0090)
class ULadderReachSpec : public UReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LadderReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.ProscribedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UProscribedReachSpec : public UReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ProscribedReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.TeleportReachSpec
// 0x0000 (0x0090 - 0x0090)
class UTeleportReachSpec : public UReachSpec
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TeleportReachSpec");
		}

		return uClassPointer;
	};

};

// Class Engine.SavedMove
// 0x00AC (0x003C - 0x00E8)
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                      // 0x003C (0x0004) [0x0000000000000000]               
	float                                              TimeStamp;                                     // 0x0040 (0x0004) [0x0000000000000000]               
	float                                              Delta;                                         // 0x0044 (0x0004) [0x0000000000000000]               
	uint32_t                                           bRun : 1;                                      // 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDuck : 1;                                     // 0x0048 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bPressedJump : 1;                              // 0x0048 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bDoubleJump : 1;                               // 0x0048 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bPreciseDestination : 1;                       // 0x0048 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bForceRMVelocity : 1;                          // 0x0048 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bForceMaxAccel : 1;                            // 0x0048 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bRootMotionFromInterpCurve : 1;                // 0x0048 (0x0004) [0x0000000000000000] [0x00000080] 
	EDoubleClickDir                                    DoubleClickMove;                               // 0x004C (0x0001) [0x0000000000000000]               
	EPhysics                                           SavedPhysics;                                  // 0x004D (0x0001) [0x0000000000000000]               
	ERootMotionMode                                    RootMotionMode;                                // 0x004E (0x0001) [0x0000000000000000]               
	struct FVector                                     StartLocation;                                 // 0x0050 (0x000C) [0x0000000000000000]               
	struct FVector                                     StartRelativeLocation;                         // 0x005C (0x000C) [0x0000000000000000]               
	struct FVector                                     StartVelocity;                                 // 0x0068 (0x000C) [0x0000000000000000]               
	struct FVector                                     StartFloor;                                    // 0x0074 (0x000C) [0x0000000000000000]               
	struct FVector                                     SavedLocation;                                 // 0x0080 (0x000C) [0x0000000000000000]               
	struct FVector                                     SavedVelocity;                                 // 0x008C (0x000C) [0x0000000000000000]               
	struct FVector                                     SavedRelativeLocation;                         // 0x0098 (0x000C) [0x0000000000000000]               
	struct FVector                                     RMVelocity;                                    // 0x00A4 (0x000C) [0x0000000000000000]               
	struct FVector                                     Acceleration;                                  // 0x00B0 (0x000C) [0x0000000000000000]               
	struct FRotator                                    Rotation;                                      // 0x00BC (0x000C) [0x0000000000000000]               
	class AActor*                                      StartBase;                                     // 0x00C8 (0x0004) [0x0000000000000000]               
	class AActor*                                      EndBase;                                       // 0x00CC (0x0004) [0x0000000000000000]               
	float                                              CustomTimeDilation;                            // 0x00D0 (0x0004) [0x0000000000000000]               
	float                                              AccelDotThreshold;                             // 0x00D4 (0x0004) [0x0000000000000000]               
	float                                              RootMotionInterpCurrentTime;                   // 0x00D8 (0x0004) [0x0000000000000000]               
	struct FVector                                     RootMotionInterpCurveLastValue;                // 0x00DC (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SavedMove");
		}

		return uClassPointer;
	};

	class FString GetDebugString();
	static EDoubleClickDir SetFlags(uint8_t Flags, class APlayerController* PC);
	uint8_t CompressedFlags();
	void ResetMoveFor(class APawn* P);
	void PrepMoveFor(class APawn* P);
	void SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, EDoubleClickDir InDoubleClick);
	bool CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta);
	void SetInitialPosition(class APawn* P);
	struct FVector GetStartLocation();
	bool IsImportantMove(const struct FVector& CompareAccel);
	void PostUpdate(class APlayerController* P);
	void Clear();
};

// Class Engine.SaveGameSummary
// 0x0014 (0x003C - 0x0050)
class USaveGameSummary : public UObject
{
public:
	class FName                                        BaseLevel;                                     // 0x003C (0x0008) [0x0000000000000000]               
	class FString                                      Description;                                   // 0x0044 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SaveGameSummary");
		}

		return uClassPointer;
	};

};

// Class Engine.ScriptViewportClient
// 0x0004 (0x003C - 0x0040)
class UScriptViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                       // 0x003C (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ScriptViewportClient");
		}

		return uClassPointer;
	};

};

// Class Engine.GameViewportClient
// 0x00E8 (0x0040 - 0x0128)
class UGameViewportClient : public UScriptViewportClient
{
public:
	struct FPointer                                    VfTable_FExec;                                 // 0x0040 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    Viewport;                                      // 0x0044 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FPointer                                    ViewportFrame;                                 // 0x0048 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class UInteraction*>                  GlobalInteractions;                            // 0x004C (0x000C) [0x0000000000500000] (CPF_NeedCtorLink)
	class UClass*                                      UIControllerClass;                             // 0x0058 (0x0004) [0x0000000000000000]               
	class UUIInteraction*                              UIController;                                  // 0x005C (0x0004) [0x0000000000000000]               
	class UConsole*                                    ViewportConsole;                               // 0x0060 (0x0004) [0x0000000000000000]               
	struct FExportShowFlags_Mirror                     ShowFlags;                                     // 0x0064 (0x0010) [0x0000000000000002] (CPF_Const)   
	class FString                                      LoadingMessage;                                // 0x0074 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SavingMessage;                                 // 0x0080 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ConnectingMessage;                             // 0x008C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PausedMessage;                                 // 0x0098 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PrecachingMessage;                             // 0x00A4 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bShowTitleSafeZone : 1;                        // 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDisplayHardwareMouseCursor : 1;               // 0x00B0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bOverrideDiffuseAndSpecular : 1;               // 0x00B0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bIsPlayInEditorViewport : 1;                   // 0x00B0 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bShowSystemMouseCursor : 1;                    // 0x00B0 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bDisableWorldRendering : 1;                    // 0x00B0 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bDebugNoGFxUI : 1;                             // 0x00B0 (0x0004) [0x0000000000004000] [0x00000040] (CPF_Config)
	struct FTitleSafeZoneArea                          TitleSafeZone;                                 // 0x00B4 (0x0010) [0x0000000000000000]               
	class TArray<struct FSplitscreenData>              SplitscreenInfo;                               // 0x00C4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	ESplitScreenType                                   DesiredSplitscreenType;                        // 0x00D0 (0x0001) [0x0000000000000000]               
	ESplitScreenType                                   ActiveSplitscreenType;                         // 0x00D1 (0x0001) [0x0000000000000000]               
	ESplitScreenType                                   Default2PSplitType;                            // 0x00D2 (0x0001) [0x0000000000000002] (CPF_Const)   
	ESplitScreenType                                   Default3PSplitType;                            // 0x00D3 (0x0001) [0x0000000000000002] (CPF_Const)   
	class FString                                      ProgressMessage[2];                            // 0x00D4 (0x0018) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              ProgressTimeOut;                               // 0x00EC (0x0004) [0x0000000000000000]               
	float                                              ProgressFadeTime;                              // 0x00F0 (0x0004) [0x0000000000000000]               
	class TArray<struct FDebugDisplayProperty>         DebugProperties;                               // 0x00F4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPointer                                    ScaleformInteraction;                          // 0x0100 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FScriptDelegate                             __HandleInputKey__Delegate;                    // 0x0104 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                   // 0x0110 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __HandleInputChar__Delegate;                   // 0x011C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameViewportClient");
		}

		return uClassPointer;
	};

	void eventSetHardwareMouseCursorVisibility(bool bIsVisible);
	void DebugSetUISystemEnabled(bool bOldUISystemActive, bool bGFxUISystemActive);
	void BecomePrimaryPlayer(int32_t PlayerIndex);
	void OnPrimaryPlayerSwitch(class ULocalPlayer* OldPrimaryPlayer, class ULocalPlayer* NewPrimaryPlayer);
	void FixupOwnerReferences(const class TArray<int32_t>& IDMappings);
	class ULocalPlayer* GetPlayerOwner(int32_t PlayerIndex);
	void ClearProgressMessages();
	void SetProgressTime(float T);
	void NotifyConnectionError(EProgressMessageType MessageType, const class FString& optionalMessage, const class FString& optionalTitle);
	void eventSetProgressMessage(EProgressMessageType MessageType, const class FString& Message, const class FString& optionalTitle, bool optionalBIgnoreFutureNetworkMessages);
	int32_t RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer);
	int32_t AddLocalPlayer(class ULocalPlayer* NewPlayer);
	void NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer);
	void DrawTransitionMessage(class UCanvas* Canvas, const class FString& Message);
	void DrawTransition(class UCanvas* Canvas);
	void DisplayProgressMessage(class UCanvas* Canvas);
	void eventPostRender(class UCanvas* Canvas);
	void DrawTitleSafeArea(class UCanvas* Canvas);
	void eventTick(float DeltaTime);
	bool CalculateDeadZoneForAllSides(class ULocalPlayer* LPlayer, class UCanvas* Canvas, bool optionalBUseMaxPercent, float& outFTopSafeZone, float& outFBottomSafeZone, float& outFLeftSafeZone, float& outFRightSafeZone);
	void CalculateSafeZoneValues(class UCanvas* Canvas, int32_t LocalPlayerIndex, bool bUseMaxPercent, float& outOut_Horizontal, float& outOut_Vertical);
	void GetPixelSizeOfScreen(class UCanvas* Canvas, int32_t LocalPlayerIndex, float& outOut_Width, float& outOut_Height);
	bool HasRightSafeZone(int32_t LocalPlayerIndex);
	bool HasLeftSafeZone(int32_t LocalPlayerIndex);
	bool HasBottomSafeZone(int32_t LocalPlayerIndex);
	bool HasTopSafeZone(int32_t LocalPlayerIndex);
	int32_t ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer);
	void eventGetSubtitleRegion(struct FVector2D& outMinPos, struct FVector2D& outMaxPos);
	void eventLayoutPlayers();
	void UpdateActiveSplitscreenType();
	ESplitScreenType GetSplitscreenConfiguration();
	void SetSplitscreenConfiguration(ESplitScreenType SplitType);
	void eventGameSessionEnded();
	int32_t eventInsertInteraction(class UInteraction* NewInteraction, int32_t optionalInIndex);
	bool CreateInitialPlayer(class FString& outOutError);
	bool eventInit(class FString& outOutError);
	class ULocalPlayer* eventFindPlayerByControllerId(int32_t ControllerId);
	bool eventRemovePlayer(class ULocalPlayer* ExPlayer);
	class ULocalPlayer* eventCreatePlayer(int32_t ControllerId, bool bSpawnActor, class FString& outOutError);
	void SetMouse(int32_t X, int32_t Y);
	void ForceUpdateMouseCursor(bool bSetCursor);
	void NotifySplitscreenLayoutChanged();
	void SetCustomInteractionObject(class UInteraction* InInteraction);
	class UClass* GetCustomInteractionClass(int32_t InIndex);
	int32_t GetNumCustomInteractions();
	bool ShouldForceFullscreenViewport();
	struct FVector2D GetMousePosition();
	bool IsFullScreenViewport();
	void GetViewportSize(struct FVector2D& outOut_ViewportSize);
	class FString ConsoleCommand(const class FString& Command);
	bool HandleInputChar(int32_t ControllerId, const class FString& Unicode);
	bool HandleInputAxis(int32_t ControllerId, const class FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool HandleInputKey(int32_t ControllerId, const class FName& Key, EInputEvent EventType, float AmountDepressed, bool optionalBGamepad);
};

// Class Engine.Selection
// 0x0024 (0x003C - 0x0060)
class USelection : public UObject
{
public:
	uint8_t                                            UnknownData00[0x24];                            // 0x003C (0x0024) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Selection");
		}

		return uClassPointer;
	};

};

// Class Engine.ServerCommandlet
// 0x0000 (0x007C - 0x007C)
class UServerCommandlet : public UCommandlet
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ServerCommandlet");
		}

		return uClassPointer;
	};

};

// Class Engine.Settings
// 0x0030 (0x003C - 0x006C)
class USettings : public UObject
{
public:
	class TArray<struct FLocalizedStringSetting>       LocalizedSettings;                             // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FSettingsProperty>             Properties;                                    // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FLocalizedStringSettingMetaData> LocalizedSettingsMappings;                     // 0x0054 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FSettingsPropertyPropertyMetaData> PropertyMappings;                              // 0x0060 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Settings");
		}

		return uClassPointer;
	};

	void UpdateFromURL(class AGameInfo* Game, class FString& outURL);
	void BuildURL(class FString& outURL);
	void AppendContextsToURL(class FString& outURL);
	void AppendPropertiesToURL(class FString& outURL);
	void AppendDataBindingsToURL(class FString& outURL);
	void GetQoSAdvertisedStringSettings(class TArray<struct FLocalizedStringSetting>& outQoSSettings);
	void GetQoSAdvertisedProperties(class TArray<struct FSettingsProperty>& outQoSProps);
	bool GetRangedPropertyValue(int32_t PropertyId, float& outOutValue);
	bool SetRangedPropertyValue(int32_t PropertyId, float NewValue);
	bool GetPropertyRange(int32_t PropertyId, float& outOutMinValue, float& outOutMaxValue, float& outRangeIncrement, uint8_t& outBFormatAsInt);
	bool GetPropertyMappingType(int32_t PropertyId, EPropertyValueMappingType& outOutType);
	bool HasStringSetting(int32_t SettingId);
	bool HasProperty(int32_t PropertyId);
	void UpdateProperties(bool optionalBShouldAddIfMissing, class TArray<struct FSettingsProperty>& outProps);
	void UpdateStringSettings(bool optionalBShouldAddIfMissing, class TArray<struct FLocalizedStringSetting>& outSettings);
	ESettingsDataType GetPropertyType(int32_t PropertyId);
	bool GetPropertyValueId(int32_t PropertyId, int32_t& outValueId);
	bool SetPropertyValueId(int32_t PropertyId, int32_t ValueId);
	bool GetStringProperty(int32_t PropertyId, class FString& outValue);
	void SetStringProperty(int32_t PropertyId, const class FString& Value);
	bool GetIntProperty(int32_t PropertyId, int32_t& outValue);
	void SetIntProperty(int32_t PropertyId, int32_t Value);
	bool GetFloatProperty(int32_t PropertyId, float& outValue);
	void SetFloatProperty(int32_t PropertyId, float Value);
	bool SetPropertyFromStringByName(const class FName& PropertyName, class FString& outNewValue);
	class FString GetPropertyAsStringByName(const class FName& PropertyName);
	class FString GetPropertyAsString(int32_t PropertyId);
	class FString GetPropertyColumnHeader(int32_t PropertyId);
	class FName GetPropertyName(int32_t PropertyId);
	bool GetPropertyId(const class FName& PropertyName, int32_t& outPropertyId);
	bool SetStringSettingValueFromStringByName(const class FName& StringSettingName, class FString& outNewValue);
	class FName GetStringSettingValueNameByName(const class FName& StringSettingName);
	class FName GetStringSettingValueName(int32_t StringSettingId, int32_t ValueIndex);
	bool IsWildcardStringSetting(int32_t StringSettingId);
	class FString GetStringSettingColumnHeader(int32_t StringSettingId);
	class FName GetStringSettingName(int32_t StringSettingId);
	bool GetStringSettingId(const class FName& StringSettingName, int32_t& outStringSettingId);
	bool GetStringSettingValueByName(const class FName& StringSettingName, int32_t& outValueIndex);
	void SetStringSettingValueByName(const class FName& StringSettingName, int32_t ValueIndex, bool bShouldAutoAdd);
	bool GetStringSettingValueNames(int32_t StringSettingId, class TArray<struct FIdToStringMapping>& outValues);
	bool IncrementStringSettingValue(int32_t StringSettingId, int32_t Direction, bool bShouldWrap);
	bool GetStringSettingValue(int32_t StringSettingId, int32_t& outValueIndex);
	void SetStringSettingValue(int32_t StringSettingId, int32_t ValueIndex, bool optionalBShouldAutoAdd);
	static void GetSettingsDataDateTime(struct FSettingsData& outData, int32_t& outOutInt1, int32_t& outOutInt2);
	static void GetSettingsDataBlob(struct FSettingsData& outData, class TArray<uint8_t>& outOutBlob);
	static int32_t GetSettingsDataInt(struct FSettingsData& outData);
	static float GetSettingsDataFloat(struct FSettingsData& outData);
	static void EmptySettingsData(struct FSettingsData& outData);
	static void SetSettingsData(struct FSettingsData& outData, struct FSettingsData& outData2Copy);
	static void SetSettingsDataBlob(struct FSettingsData& outData, class TArray<uint8_t>& outInBlob);
	static void SetSettingsDataDateTime(int32_t InInt1, int32_t InInt2, struct FSettingsData& outData);
	static void SetSettingsDataInt(int32_t InInt, struct FSettingsData& outData);
	static void SetSettingsDataFloat(float InFloat, struct FSettingsData& outData);
};

// Class Engine.OnlineGameSearch
// 0x0088 (0x006C - 0x00F4)
class UOnlineGameSearch : public USettings
{
public:
	int32_t                                            MaxSearchResults;                              // 0x006C (0x0004) [0x0000000000000000]               
	struct FLocalizedStringSetting                     Query;                                         // 0x0070 (0x000C) [0x0000000000000000]               
	uint32_t                                           bIsLanQuery : 1;                               // 0x007C (0x0004) [0x0000000040000000] [0x00000001] (CPF_DataBinding)
	uint32_t                                           bUsesArbitration : 1;                          // 0x007C (0x0004) [0x0000000040000000] [0x00000002] (CPF_DataBinding)
	uint32_t                                           bIsSearchInProgress : 1;                       // 0x007C (0x0004) [0x0000000000000002] [0x00000004] (CPF_Const)
	class UClass*                                      GameSettingsClass;                             // 0x0080 (0x0004) [0x0000000000000000]               
	class TArray<struct FOnlineGameSearchResult>       Results;                                       // 0x0084 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FOverrideSkill                              ManualSkillOverride;                           // 0x0090 (0x0028) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FNamedObjectProperty>          NamedProperties;                               // 0x00B8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FOnlineGameSearchQuery                      FilterQuery;                                   // 0x00C4 (0x0018) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      AdditionalSearchCriteria;                      // 0x00DC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            PingBucketSize;                                // 0x00E8 (0x0004) [0x0000000000000000]               
	int32_t                                            NumPingProbes;                                 // 0x00EC (0x0004) [0x0000000000000000]               
	int32_t                                            MaxPingBytes;                                  // 0x00F0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineGameSearch");
		}

		return uClassPointer;
	};

	bool eventGetNamedProperty(const class FName& PropertyName, class FString& outValue);
	bool eventSetNamedProperty(const class FName& PropertyName, const class FString& Value);
	void eventSortSearchResults();
	void SetSkillOverride(int32_t LeaderboardId, class TArray<struct FUniqueNetId>& outPlayers);
};

// Class Engine.OnlineGameSettings
// 0x0040 (0x006C - 0x00AC)
class UOnlineGameSettings : public USettings
{
public:
	int32_t                                            NumPublicConnections;                          // 0x006C (0x0004) [0x0000000040000000] (CPF_DataBinding)
	int32_t                                            NumPrivateConnections;                         // 0x0070 (0x0004) [0x0000000040000000] (CPF_DataBinding)
	int32_t                                            NumOpenPublicConnections;                      // 0x0074 (0x0004) [0x0000000040000000] (CPF_DataBinding)
	int32_t                                            NumOpenPrivateConnections;                     // 0x0078 (0x0004) [0x0000000040000000] (CPF_DataBinding)
	struct FQWord                                      ServerNonce;                                   // 0x007C (0x0008) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bShouldAdvertise : 1;                          // 0x0084 (0x0004) [0x0000000040000000] [0x00000001] (CPF_DataBinding)
	uint32_t                                           bIsLanMatch : 1;                               // 0x0084 (0x0004) [0x0000000040000000] [0x00000002] (CPF_DataBinding)
	uint32_t                                           bUsesStats : 1;                                // 0x0084 (0x0004) [0x0000000040000000] [0x00000004] (CPF_DataBinding)
	uint32_t                                           bAllowJoinInProgress : 1;                      // 0x0084 (0x0004) [0x0000000040000000] [0x00000008] (CPF_DataBinding)
	uint32_t                                           bAllowInvites : 1;                             // 0x0084 (0x0004) [0x0000000040000000] [0x00000010] (CPF_DataBinding)
	uint32_t                                           bUsesPresence : 1;                             // 0x0084 (0x0004) [0x0000000040000000] [0x00000020] (CPF_DataBinding)
	uint32_t                                           bAllowJoinViaPresence : 1;                     // 0x0084 (0x0004) [0x0000000040000000] [0x00000040] (CPF_DataBinding)
	uint32_t                                           bAllowJoinViaPresenceFriendsOnly : 1;          // 0x0084 (0x0004) [0x0000000040000000] [0x00000080] (CPF_DataBinding)
	uint32_t                                           bUsesArbitration : 1;                          // 0x0084 (0x0004) [0x0000000040000000] [0x00000100] (CPF_DataBinding)
	uint32_t                                           bAntiCheatProtected : 1;                       // 0x0084 (0x0004) [0x0000000040000000] [0x00000200] (CPF_DataBinding)
	uint32_t                                           bWasFromInvite : 1;                            // 0x0084 (0x0004) [0x0000000000000002] [0x00000400] (CPF_Const)
	uint32_t                                           bIsDedicated : 1;                              // 0x0084 (0x0004) [0x0000000040000000] [0x00000800] (CPF_DataBinding)
	uint32_t                                           bHasSkillUpdateInProgress : 1;                 // 0x0084 (0x0004) [0x0000000000000002] [0x00001000] (CPF_Const)
	uint32_t                                           bShouldShrinkArbitratedSessions : 1;           // 0x0084 (0x0004) [0x0000000000000002] [0x00002000] (CPF_Const)
	class FString                                      OwningPlayerName;                              // 0x0088 (0x000C) [0x0000000040400000] (CPF_NeedCtorLink | CPF_DataBinding)
	struct FUniqueNetId                                OwningPlayerId;                                // 0x0094 (0x0008) [0x0000000000000000]               
	int32_t                                            PingInMs;                                      // 0x009C (0x0004) [0x0000000040000000] (CPF_DataBinding)
	float                                              MatchQuality;                                  // 0x00A0 (0x0004) [0x0000000040000000] (CPF_DataBinding)
	EOnlineGameState                                   GameState;                                     // 0x00A4 (0x0001) [0x0000000040000002] (CPF_Const | CPF_DataBinding)
	int32_t                                            BuildUniqueId;                                 // 0x00A8 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineGameSettings");
		}

		return uClassPointer;
	};

};

// Class Engine.ShaderCache
// 0x004C (0x003C - 0x0088)
class UShaderCache : public UObject
{
public:
	uint8_t                                            UnknownData00[0x4C];                            // 0x003C (0x004C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ShaderCache");
		}

		return uClassPointer;
	};

};

// Class Engine.ShadowMap1D
// 0x0040 (0x003C - 0x007C)
class UShadowMap1D : public UObject
{
public:
	uint8_t                                            UnknownData00[0x40];                            // 0x003C (0x0040) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ShadowMap1D");
		}

		return uClassPointer;
	};

};

// Class Engine.ShadowMap2D
// 0x0030 (0x003C - 0x006C)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                       // 0x003C (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FVector2D                                   CoordinateScale;                               // 0x0040 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FVector2D                                   CoordinateBias;                                // 0x0048 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FGuid                                       LightGuid;                                     // 0x0050 (0x0010) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bIsShadowFactorTexture : 1;                    // 0x0060 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	class UInstancedStaticMeshComponent*               Component;                                     // 0x0064 (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	int32_t                                            InstanceIndex;                                 // 0x0068 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ShadowMap2D");
		}

		return uClassPointer;
	};

};

// Class Engine.SmokeTestCommandlet
// 0x0000 (0x007C - 0x007C)
class USmokeTestCommandlet : public UCommandlet
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundCue
// 0x008C (0x003C - 0x00C8)
class USoundCue : public UObject
{
public:
	class FName                                        SoundClass;                                    // 0x003C (0x0008) [0x0000000000000001] (CPF_Edit)    
	ESoundClassName                                    SoundClassName;                                // 0x0044 (0x0001) [0x0000000000000000]               
	uint32_t                                           bDebug : 1;                                    // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class USoundNode*                                  FirstNode;                                     // 0x004C (0x0004) [0x0000000000000000]               
	uint8_t                                            UnknownData00[0x3C];                            // 0x0050 (0x003C) MISSED OFFSET
	float                                              MaxAudibleDistance;                            // 0x008C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              VolumeMultiplier;                              // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMultiplier;                               // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0098 (0x0004) [0x0000000000000000]               
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                              // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      FaceFXGroupName;                               // 0x00A0 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      FaceFXAnimName;                                // 0x00AC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            MaxConcurrentPlayCount;                        // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CurrentPlayCount;                              // 0x00BC (0x0004) [0x0000000000202002] (CPF_Const | CPF_Transient)
	class FName                                        SoundGroup;                                    // 0x00C0 (0x0008) [0x0000000020000000]  CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundCue");
		}

		return uClassPointer;
	};

	float GetCueDuration();
};

// Class Engine.SpeechRecognition
// 0x0088 (0x003C - 0x00C4)
class USpeechRecognition : public UObject
{
public:
	class FString                                      Language;                                      // 0x003C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              ConfidenceThreshhold;                          // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FRecogVocabulary>              Vocabularies;                                  // 0x004C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<uint8_t>                              VoiceData;                                     // 0x0058 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<uint8_t>                              WorkingVoiceData;                              // 0x0064 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<uint8_t>                              UserData;                                      // 0x0070 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FRecogUserData                              InstanceData[4];                               // 0x007C (0x0040) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bDirty : 1;                                    // 0x00BC (0x0004) [0x0000000000202000] [0x00000001] (CPF_Transient)
	uint32_t                                           bInitialised : 1;                              // 0x00BC (0x0004) [0x0000000000202000] [0x00000002] (CPF_Transient)
	struct FPointer                                    FnxVoiceData;                                  // 0x00C0 (0x0004) [0x0000000000201002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpeechRecognition");
		}

		return uClassPointer;
	};

};

// Class Engine.StaticMesh
// 0x0164 (0x003C - 0x01A0)
class UStaticMesh : public UObject
{
public:
	uint8_t                                            UnknownData00[0xC];                              // 0x003C (0x000C) MISSED OFFSET
	class TArray<struct FStaticMeshLODInfo>            LODInfo;                                       // 0x0048 (0x000C) [0x0000000000001041] (CPF_Edit | CPF_EditFixedSize | CPF_Native)
	float                                              LODDistanceRatio;                              // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LODMaxRange;                                   // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            UnknownData01[0x10];                            // 0x005C (0x0010) MISSED OFFSET
	int32_t                                            LightMapResolution;                            // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LightMapCoordinateIndex;                       // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            UnknownData02[0x50];                            // 0x0074 (0x0050) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                     // 0x00C4 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	uint8_t                                            UnknownData03[0x34];                            // 0x00C8 (0x0034) MISSED OFFSET
	uint32_t                                           UseSimpleLineCollision : 1;                    // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           UseSimpleBoxCollision : 1;                     // 0x0100 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           UseSimpleRigidBodyCollision : 1;               // 0x0104 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           UseFullPrecisionUVs : 1;                       // 0x0108 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUsedForInstancing : 1;                        // 0x010C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            ConsolePreallocateInstanceCount;               // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseMaximumStreamingTexelRatio : 1;            // 0x0114 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPartitionForEdgeGeometry : 1;                 // 0x0118 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCanBecomeDynamic : 1;                         // 0x011C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint8_t                                            UnknownData04[0x4];                              // 0x0120 (0x0004) MISSED OFFSET
	uint32_t                                           bStripComplexCollisionForConsole : 1;          // 0x0124 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPerLODStaticLightingForInstancing : 1;        // 0x0128 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              StreamingDistanceMultiplier;                   // 0x012C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            UnknownData05[0x20];                            // 0x0130 (0x0020) MISSED OFFSET
	class UInstancedFoliageSettings*                   FoliageDefaultSettings;                        // 0x0150 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class FString                                      SourceFilePath;                                // 0x0154 (0x000C) [0x0000000000420001] (CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)
	class FString                                      SourceFileTimestamp;                           // 0x0160 (0x000C) [0x0000000000420001] (CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)
	uint8_t                                            UnknownData06[0x34];                            // 0x016C (0x0034) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StaticMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.Surface
// 0x0000 (0x003C - 0x003C)
class USurface : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Surface");
		}

		return uClassPointer;
	};

	float GetSurfaceHeight();
	float GetSurfaceWidth();
};

// Class Engine.MaterialInterface
// 0x01AC (0x003C - 0x01E8)
class UMaterialInterface : public USurface
{
public:
	struct FRenderCommandFence_Mirror                  ParentRefFence;                                // 0x003C (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                             // 0x0040 (0x001C) [0x0000000000000001] (CPF_Edit)    
	class FString                                      PreviewMesh;                                   // 0x005C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	struct FGuid                                       LightingGuid;                                  // 0x0068 (0x0010) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)
	uint32_t                                           bHasQualitySwitch : 1;                         // 0x0078 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bAutoFlattenMobile : 1;                        // 0x0078 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAutoFlattenMobileNormalTexture : 1;           // 0x0078 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bMobileAllowFog : 1;                           // 0x0078 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bGenerateSubUV : 1;                            // 0x0078 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bUseMobileSpecular : 1;                        // 0x0078 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bUseMobileVertexSpecular : 1;                  // 0x0078 (0x0004) [0x0000000020000000] [0x00000040]  CPF_Deprecated)
	uint32_t                                           bUseMobilePixelSpecular : 1;                   // 0x0078 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bUseMobileBumpOffset : 1;                      // 0x0078 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bLockColorBlending : 1;                        // 0x0078 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bUseMobileUniformColorMultiply : 1;            // 0x0078 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bUseMobileVertexColorMultiply : 1;             // 0x0078 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bUseMobileDetailNormal : 1;                    // 0x0078 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bBaseTextureTransformed : 1;                   // 0x0078 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bEmissiveTextureTransformed : 1;               // 0x0078 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bNormalTextureTransformed : 1;                 // 0x0078 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bMaskTextureTransformed : 1;                   // 0x0078 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bDetailTextureTransformed : 1;                 // 0x0078 (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           bUseMobileWaveVertexMovement : 1;              // 0x0078 (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           bMobileEnableBounceLight : 1;                  // 0x0078 (0x0004) [0x0000000000000001] [0x00080000] (CPF_Edit)
	struct FColor                                      FlattenBackgroundColor;                        // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    MobileBaseTexture;                             // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    FlattenedTexture;                              // 0x0084 (0x0004) [0x0000000020200000]  CPF_Deprecated)
	EMobileTexCoordsSource                             MobileBaseTextureTexCoordsSource;              // 0x0088 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileAmbientOcclusionSource                      MobileAmbientOcclusionSource;                  // 0x0089 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileSpecularMask                                MobileSpecularMask;                            // 0x008A (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileEmissiveColorSource                         MobileEmissiveColorSource;                     // 0x008B (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileValueSource                                 MobileEmissiveMaskSource;                      // 0x008C (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileValueSource                                 MobileEnvironmentMaskSource;                   // 0x008D (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileEnvironmentBlendMode                        MobileEnvironmentBlendMode;                    // 0x008E (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileValueSource                                 MobileRimLightingMaskSource;                   // 0x008F (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileTexCoordsSource                             MobileMaskTextureTexCoordsSource;              // 0x0090 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileAlphaValueSource                            MobileAlphaValueSource;                        // 0x0091 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileTexCoordsSource                             MobileDetailTextureTexCoordsSource;            // 0x0092 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileTextureBlendFactorSource                    MobileTextureBlendFactorSource;                // 0x0093 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMobileColorMultiplySource                         MobileColorMultiplySource;                     // 0x0094 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    MobileNormalTexture;                           // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SubUVFrameRate;                                // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SubUVFrameCountAlongAxes;                      // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SubUVFrameSize;                                // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                MobileSpecularColor;                           // 0x00A8 (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileSpecularPower;                           // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    MobileEmissiveTexture;                         // 0x00BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                MobileEmissiveColor;                           // 0x00C0 (0x0010) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    MobileEnvironmentTexture;                      // 0x00D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileEnvironmentAmount;                       // 0x00D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                MobileEnvironmentColor;                        // 0x00D8 (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileEnvironmentFresnelAmount;                // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileEnvironmentFresnelExponent;              // 0x00EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileRimLightingStrength;                     // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileRimLightingExponent;                     // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                MobileRimLightingColor;                        // 0x00F8 (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileBumpOffsetReferencePlane;                // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileBumpOffsetHeightRatio;                   // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    MobileMaskTexture;                             // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileOpacityMultiplier;                       // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    MobileDetailTexture;                           // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    MobileDetailTexture2;                          // 0x011C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    MobileDetailTexture3;                          // 0x0120 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                DefaultUniformColor;                           // 0x0124 (0x0010) [0x0000000020000000]  CPF_Deprecated)
	struct FLinearColor                                MobileDefaultUniformColor;                     // 0x0134 (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              TransformCenterX;                              // 0x0144 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileTransformCenterX;                        // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TransformCenterY;                              // 0x014C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileTransformCenterY;                        // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PannerSpeedX;                                  // 0x0154 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobilePannerSpeedX;                            // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PannerSpeedY;                                  // 0x015C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobilePannerSpeedY;                            // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RotateSpeed;                                   // 0x0164 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileRotateSpeed;                             // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FixedScaleX;                                   // 0x016C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileFixedScaleX;                             // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FixedScaleY;                                   // 0x0174 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileFixedScaleY;                             // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SineScaleX;                                    // 0x017C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileSineScaleX;                              // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SineScaleY;                                    // 0x0184 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileSineScaleY;                              // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SineScaleFrequencyMultipler;                   // 0x018C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileSineScaleFrequencyMultipler;             // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FixedOffsetX;                                  // 0x0194 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileFixedOffsetX;                            // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FixedOffsetY;                                  // 0x019C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	float                                              MobileFixedOffsetY;                            // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileTangentVertexFrequencyMultiplier;        // 0x01A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileVerticalFrequencyMultiplier;             // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileMaxVertexMovementAmplitude;              // 0x01AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileSwayFrequencyMultiplier;                 // 0x01B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileSwayMaxAngle;                            // 0x01B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MobileDirectionalLightDirection;               // 0x01B8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileDirectionalLightBrightness;              // 0x01C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      MobileDirectionalLightColor;                   // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MobileBounceLightDirection;                    // 0x01CC (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileBounceLightBrightness;                   // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      MobileBounceLightColor;                        // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MobileSkyLightBrightness;                      // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      MobileSkyLightColor;                           // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialInterface");
		}

		return uClassPointer;
	};

	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t optionalCinematicTextureGroups);
	bool GetMobileVectorParameterValue(const class FName& ParameterName, struct FLinearColor& outOutValue);
	bool GetMobileTextureParameterValue(const class FName& ParameterName, class UTexture*& outOutValue);
	bool GetMobileScalarParameterValue(const class FName& ParameterName, float& outOutValue);
	bool GetGroupName(const class FName& ParameterName, class FName& outGroupName);
	bool GetLinearColorCurveParameterValue(const class FName& ParameterName, struct FInterpCurveLinearColor& outOutValue);
	bool GetLinearColorParameterValue(const class FName& ParameterName, struct FLinearColor& outOutValue);
	bool GetVectorCurveParameterValue(const class FName& ParameterName, struct FInterpCurveVector& outOutValue);
	bool GetVectorParameterValue(const class FName& ParameterName, struct FLinearColor& outOutValue);
	bool GetTextureParameterValue(const class FName& ParameterName, class UTexture*& outOutValue);
	bool GetScalarCurveParameterValue(const class FName& ParameterName, struct FInterpCurveFloat& outOutValue);
	bool GetScalarParameterValue(const class FName& ParameterName, float& outOutValue);
	bool GetFontParameterValue(const class FName& ParameterName, class UFont*& outOutFontValue, int32_t& outOutFontPage);
	bool GetParameterDesc(const class FName& ParameterName, class FString& outOutDesc);
	class UPhysicalMaterial* GetPhysicalMaterial();
	class UMaterial* GetMaterial();
};

// Class Engine.RB_BodySetup
// 0x004C (0x0080 - 0x00CC)
class URB_BodySetup : public UKMeshProps
{
public:
	ESleepFamily                                       SleepFamily;                                   // 0x0080 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        BoneName;                                      // 0x0084 (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	uint32_t                                           bFixed : 1;                                    // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoCollision : 1;                              // 0x008C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBlockZeroExtent : 1;                          // 0x008C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bBlockNonZeroExtent : 1;                       // 0x008C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bEnableContinuousCollisionDetection : 1;       // 0x008C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAlwaysFullAnimWeight : 1;                     // 0x008C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bConsiderForBounds : 1;                        // 0x008C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	class UPhysicalMaterial*                           PhysMaterial;                                  // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MassScale;                                     // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FPointer>                      CollisionGeom;                                 // 0x0098 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FVector>                       CollisionGeomScale3D;                          // 0x00A4 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FVector>                       PreCachedPhysScale;                            // 0x00B0 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FKCachedConvexData>            PreCachedPhysData;                             // 0x00BC (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            PreCachedPhysDataVersion;                      // 0x00C8 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_BodySetup");
		}

		return uClassPointer;
	};

};

// Class Engine.InstancedFoliageSettings
// 0x0064 (0x003C - 0x00A0)
class UInstancedFoliageSettings : public UObject
{
public:
	float                                              Density;                                       // 0x003C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Radius;                                        // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ScaleMinX;                                     // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ScaleMinY;                                     // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ScaleMinZ;                                     // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ScaleMaxX;                                     // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ScaleMaxY;                                     // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ScaleMaxZ;                                     // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           LockScaleX : 1;                                // 0x005C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           LockScaleY : 1;                                // 0x005C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           LockScaleZ : 1;                                // 0x005C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           AlignToNormal : 1;                             // 0x005C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           RandomYaw : 1;                                 // 0x005C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           UniformScale : 1;                              // 0x005C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           ReapplyDensity : 1;                            // 0x005C (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           ReapplyRadius : 1;                             // 0x005C (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           ReapplyAlignToNormal : 1;                      // 0x005C (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           ReapplyRandomYaw : 1;                          // 0x005C (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           ReapplyScaleX : 1;                             // 0x005C (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           ReapplyScaleY : 1;                             // 0x005C (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           ReapplyScaleZ : 1;                             // 0x005C (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           ReapplyRandomPitchAngle : 1;                   // 0x005C (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           ReapplyGroundSlope : 1;                        // 0x005C (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           ReapplyHeight : 1;                             // 0x005C (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           ReapplyLandscapeLayer : 1;                     // 0x005C (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           ReapplyZOffset : 1;                            // 0x005C (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           IsSelected : 1;                                // 0x005C (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           ShowNothing : 1;                               // 0x005C (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           ShowPaintSettings : 1;                         // 0x005C (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           ShowInstanceSettings : 1;                      // 0x005C (0x0004) [0x0000000000000000] [0x00200000] 
	float                                              AlignMaxAngle;                                 // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RandomPitchAngle;                              // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GroundSlope;                                   // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HeightMin;                                     // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HeightMax;                                     // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        LandscapeLayer;                                // 0x0074 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              ZOffsetMin;                                    // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ZOffsetMax;                                    // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxInstancesPerCluster;                        // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxClusterRadius;                              // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ReapplyDensityAmount;                          // 0x008C (0x0004) [0x0000000000000000]               
	int32_t                                            StartCullDistance;                             // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            EndCullDistance;                               // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EFoliageCullOption                                 CullOption;                                    // 0x0098 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            DisplayOrder;                                  // 0x009C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InstancedFoliageSettings");
		}

		return uClassPointer;
	};

};

// Class Engine.FracturedStaticMesh
// 0x00C0 (0x01A0 - 0x0260)
class UFracturedStaticMesh : public UStaticMesh
{
public:
	uint8_t                                            UnknownData00[0x30];                            // 0x01A0 (0x0030) MISSED OFFSET
	uint32_t                                           bSliceUsingCoreCollision : 1;                  // 0x01D0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class UParticleSystem*                             FragmentDestroyEffect;                         // 0x01D4 (0x0004) [0x0000000000000000]               
	class TArray<class UParticleSystem*>               FragmentDestroyEffects;                        // 0x01D8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              FragmentDestroyEffectScale;                    // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FragmentHealthScale;                           // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FragmentMinHealth;                             // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FragmentMaxHealth;                             // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUniformFragmentHealth : 1;                    // 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              ChunkLinVel;                                   // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ChunkAngVel;                                   // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ChunkLinHorizontalScale;                       // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExplosionVelScale;                             // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bCompositeChunksExplodeOnImpact : 1;           // 0x0208 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFixIsolatedChunks : 1;                        // 0x020C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAlwaysBreakOffIsolatedIslands : 1;            // 0x0210 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSpawnPhysicsChunks : 1;                       // 0x0214 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              ChanceOfPhysicsChunk;                          // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExplosionChanceOfPhysicsChunk;                 // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalPhysicsChunkScaleMin;                    // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalPhysicsChunkScaleMax;                    // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExplosionPhysicsChunkScaleMin;                 // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExplosionPhysicsChunkScaleMax;                 // 0x022C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinConnectionSupportArea;                      // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          DynamicOutsideMaterial;                        // 0x0234 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          LoseChunkOutsideMaterial;                      // 0x0238 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            OutsideMaterialIndex;                          // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            UnknownData01[0x20];                            // 0x0240 (0x0020) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FracturedStaticMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleSystem
// 0x00FC (0x003C - 0x0138)
class UParticleSystem : public UObject
{
public:
	EParticleSystemUpdateMode                          SystemUpdateMode;                              // 0x003C (0x0001) [0x0000000000000001] (CPF_Edit)    
	EParticleSystemLODMethod                           LODMethod;                                     // 0x003D (0x0001) [0x0000000000000001] (CPF_Edit)    
	EParticleSystemOcclusionBoundsMethod               OcclusionBoundsMethod;                         // 0x003E (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              UpdateTime_FPS;                                // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              UpdateTime_Delta;                              // 0x0044 (0x0004) [0x0000000000000000]               
	float                                              WarmupTime;                                    // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WarmupTickRate;                                // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UParticleEmitter*>              Emitters;                                      // 0x0050 (0x000C) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UParticleSystemComponent*                    PreviewComponent;                              // 0x005C (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	struct FRotator                                    ThumbnailAngle;                                // 0x0060 (0x000C) [0x0000000000000000] (CPF_EditorOnly)
	float                                              ThumbnailDistance;                             // 0x006C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	float                                              ThumbnailWarmup;                               // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	uint32_t                                           bLit : 1;                                      // 0x0074 (0x0004) [0x0000000020000002] [0x00000001] (CPF_Const | CPF_Deprecated)
	uint32_t                                           bOrientZAxisTowardCamera : 1;                  // 0x0074 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseLocalAxisBillboard : 1;                    // 0x0074 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bRegenerateLODDuplicate : 1;                   // 0x0074 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bUseFixedRelativeBoundingBox : 1;              // 0x0074 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bShouldResetPeakCounts : 1;                    // 0x0074 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bHasPhysics : 1;                               // 0x0074 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bUseRealtimeThumbnail : 1;                     // 0x0074 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           ThumbnailImageOutOfDate : 1;                   // 0x0074 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bSkipSpawnCountCheck : 1;                      // 0x0074 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bUseDelayRange : 1;                            // 0x0074 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                  // 0x0078 (0x0004) [0x0000000000000008] (CPF_ExportObject)
	float                                              LODDistanceCheckTime;                          // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<float>                                LODDistances;                                  // 0x0080 (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)
	int32_t                                            EditorLODSetting;                              // 0x008C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<struct FParticleSystemLOD>            LODSettings;                                   // 0x0090 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FBox                                        FixedRelativeBoundingBox;                      // 0x009C (0x001C) [0x0000000000000001] (CPF_Edit)    
	float                                              SecondsBeforeInactive;                         // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      FloorMesh;                                     // 0x00BC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	struct FVector                                     FloorPosition;                                 // 0x00C8 (0x000C) [0x0000000000000000] (CPF_EditorOnly)
	struct FRotator                                    FloorRotation;                                 // 0x00D4 (0x000C) [0x0000000000000000] (CPF_EditorOnly)
	float                                              FloorScale;                                    // 0x00E0 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	struct FVector                                     FloorScale3D;                                  // 0x00E4 (0x000C) [0x0000000000000000] (CPF_EditorOnly)
	struct FColor                                      BackgroundColor;                               // 0x00F0 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class UTexture2D*                                  ThumbnailImage;                                // 0x00F4 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	float                                              Delay;                                         // 0x00F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DelayLow;                                      // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MacroUVPosition;                               // 0x0100 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              MacroUVRadius;                                 // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FBox                                        CustomOcclusionBounds;                         // 0x0110 (0x001C) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FLODSoloTrack>                 SoloTracking;                                  // 0x012C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleSystem");
		}

		return uClassPointer;
	};

	float GetMaxLifespan(float InComponentDelay);
	bool SetLODDistance(int32_t LODLevelIndex, float InDistance);
	void SetCurrentLODMethod(EParticleSystemLODMethod InMethod);
	float GetLODDistance(int32_t LODLevelIndex);
	int32_t GetLODLevelCount();
	EParticleSystemLODMethod GetCurrentLODMethod();
};

// Class Engine.Texture
// 0x00BC (0x003C - 0x00F8)
class UTexture : public USurface
{
public:
	uint32_t                                           SRGB : 1;                                      // 0x003C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           RGBE : 1;                                      // 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bIsSourceArtUncompressed : 1;                  // 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           CompressionNoAlpha : 1;                        // 0x003C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           CompressionNone : 1;                           // 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           CompressionNoMipmaps : 1;                      // 0x003C (0x0004) [0x0000000020000000] [0x00000020]  CPF_Deprecated)
	uint32_t                                           CompressionFullDynamicRange : 1;               // 0x003C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           DeferCompression : 1;                          // 0x003C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           NeverStream : 1;                               // 0x003C (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bDitherMipMapAlpha : 1;                        // 0x003C (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bPreserveBorderR : 1;                          // 0x003C (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bPreserveBorderG : 1;                          // 0x003C (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bPreserveBorderB : 1;                          // 0x003C (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bPreserveBorderA : 1;                          // 0x003C (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bNoTiling : 1;                                 // 0x003C (0x0004) [0x0000000000000002] [0x00004000] (CPF_Const)
	uint32_t                                           bForcePVRTC4 : 1;                              // 0x003C (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bAsyncResourceReleaseHasBeenStarted : 1;       // 0x003C (0x0004) [0x0000000000002002] [0x00010000] (CPF_Const | CPF_Transient)
	uint32_t                                           bUseCinematicMipLevels : 1;                    // 0x003C (0x0004) [0x0000000000002002] [0x00020000] (CPF_Const | CPF_Transient)
	float                                              UnpackMin[4];                                  // 0x0040 (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              UnpackMax[4];                                  // 0x0050 (0x0010) [0x0000000000000001] (CPF_Edit)    
	struct FUntypedBulkData_Mirror                     SourceArt;                                     // 0x0060 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	ETextureCompressionSettings                        CompressionSettings;                           // 0x0094 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ETextureFilter                                     Filter;                                        // 0x0095 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ETextureGroup                                      LODGroup;                                      // 0x0096 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ETextureGroup                                      CachedLODGroup;                                // 0x0097 (0x0001) [0x0000000000002000] (CPF_Transient)
	ETextureMipGenSettings                             MipGenSettings;                                // 0x0098 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LODBias;                                       // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CachedCombinedLODBias;                         // 0x00A0 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumCinematicMipLevels;                         // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      SourceFilePath;                                // 0x00A8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	class FString                                      SourceFileTimestamp;                           // 0x00B4 (0x000C) [0x0000000000420001] (CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)
	struct FPointer                                    Resource;                                      // 0x00C0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FGuid                                       LightingGuid;                                  // 0x00C4 (0x0010) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)
	float                                              AdjustBrightness;                              // 0x00D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AdjustBrightnessCurve;                         // 0x00D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AdjustVibrance;                                // 0x00DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AdjustSaturation;                              // 0x00E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AdjustRGBCurve;                                // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AdjustHue;                                     // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            InternalFormatLODBias;                         // 0x00EC (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            LODBiasPS3forNoMipmap;                         // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LODBiasPCforNoMipmap;                          // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Texture");
		}

		return uClassPointer;
	};

};

// Class Engine.Texture2D
// 0x00D0 (0x00F8 - 0x01C8)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                          // 0x00F8 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FIndirectArray_Mirror                       CachedPVRTCMips;                               // 0x0104 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FIndirectArray_Mirror                       CachedATITCMips;                               // 0x0110 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            CachedFlashMipsMaxResolution;                  // 0x011C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FUntypedBulkData_Mirror                     CachedFlashMips;                               // 0x0120 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            SizeX;                                         // 0x0154 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SizeY;                                         // 0x0158 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            OriginalSizeX;                                 // 0x015C (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            OriginalSizeY;                                 // 0x0160 (0x0004) [0x0000000000000002] (CPF_Const)   
	EPixelFormat                                       Format;                                        // 0x0164 (0x0001) [0x0000000000000002] (CPF_Const)   
	ETextureAddress                                    AddressX;                                      // 0x0165 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ETextureAddress                                    AddressY;                                      // 0x0166 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIsStreamable : 1;                             // 0x0168 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           bHasCancelationPending : 1;                    // 0x0168 (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bHasBeenLoadedFromPersistentArchive : 1;       // 0x0168 (0x0004) [0x0000000000002002] [0x00000004] (CPF_Const | CPF_Transient)
	uint32_t                                           bForceMiplevelsToBeResident : 1;               // 0x0168 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bGlobalForceMipLevelsToBeResident : 1;         // 0x0168 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bIsCompositingSource : 1;                      // 0x0168 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bHasBeenPaintedInEditor : 1;                   // 0x0168 (0x0004) [0x0000000000000000] [0x00000040] (CPF_EditorOnly)
	uint32_t                                           bFullHDTexture : 1;                            // 0x0168 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bNoReduceOriginalSize : 1;                     // 0x0168 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bAutoReduced : 1;                              // 0x0168 (0x0004) [0x0000000000000002] [0x00000200] (CPF_Const)
	uint32_t                                           bScaleForPS3 : 1;                              // 0x0168 (0x0004) [0x0000000000000002] [0x00000400] (CPF_Const)
	float                                              ForceMipLevelsToBeResidentTimestamp;           // 0x016C (0x0004) [0x0000000000002000] (CPF_Transient)
	class FName                                        TextureFileCacheName;                          // 0x0170 (0x0008) [0x0000000000000000]               
	struct FGuid                                       TextureFileCacheGuid;                          // 0x0178 (0x0010) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            RequestedMips;                                 // 0x0188 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            ResidentMips;                                  // 0x018C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            MipsToRemoveOnCompress;                        // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                 // 0x0194 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<uint8_t>                              SystemMemoryData;                              // 0x0198 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                        // 0x01A4 (0x000C) [0x0000000001201002] (CPF_Const | CPF_Native)
	int32_t                                            StreamingIndex;                                // 0x01B0 (0x0004) [0x0000000000202002] (CPF_Const | CPF_Transient)
	int32_t                                            MipTailBaseIdx;                                // 0x01B4 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FPointer                                    ResourceMem;                                   // 0x01B8 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            FirstResourceMemMip;                           // 0x01BC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              Timer;                                         // 0x01C0 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	float                                              ScaleForPS3;                                   // 0x01C4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Texture2D");
		}

		return uClassPointer;
	};

	static class UTexture2D* Create(int32_t InSizeX, int32_t InSizeY, EPixelFormat optionalInFormat);
	void SetForceMipLevelsToBeResident(float Seconds, int32_t optionalCinematicTextureGroups);
};

// Class Engine.LightMapTexture2D
// 0x0004 (0x01C8 - 0x01CC)
class ULightMapTexture2D : public UTexture2D
{
public:
	uint8_t                                            UnknownData00[0x4];                              // 0x01C8 (0x0004) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightMapTexture2D");
		}

		return uClassPointer;
	};

};

// Class Engine.ShadowMapTexture2D
// 0x0004 (0x01C8 - 0x01CC)
class UShadowMapTexture2D : public UTexture2D
{
public:
	int32_t                                            ShadowmapFlags;                                // 0x01C8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		}

		return uClassPointer;
	};

};

// Class Engine.TranslationContext
// 0x000C (0x003C - 0x0048)
class UTranslationContext : public UObject
{
public:
	class TArray<class UTranslatorTag*>                TranslatorTags;                                // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TranslationContext");
		}

		return uClassPointer;
	};

	bool RegisterTranslatorTag(class UTranslatorTag* InTagHandler);
};

// Class Engine.TranslatorTag
// 0x0008 (0x003C - 0x0044)
class UTranslatorTag : public UObject
{
public:
	class FName                                        Tag;                                           // 0x003C (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TranslatorTag");
		}

		return uClassPointer;
	};

	class FString Translate(const class FString& InArgument);
};

// Class Engine.StringsTag
// 0x0000 (0x0044 - 0x0044)
class UStringsTag : public UTranslatorTag
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StringsTag");
		}

		return uClassPointer;
	};

	class FString Translate(const class FString& InArgument);
};

// Class Engine.UIRoot
// 0x000C (0x003C - 0x0048)
class UUIRoot : public UObject
{
public:
	class TArray<class FString>                        BadCapsLocContexts;                            // 0x003C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIRoot");
		}

		return uClassPointer;
	};

	static class FString SafeCaps(const class FString& StringToCap);
	static class UOnlinePlayerInterfaceEx* GetOnlinePlayerInterfaceEx();
	static class UOnlinePlayerInterface* GetOnlinePlayerInterface();
	static class UOnlineGameInterface* GetOnlineGameInterface();
	static class UUIDataStore* StaticResolveDataStore(const class FName& DataStoreTag, class ULocalPlayer* optionalInPlayerOwner);
	static class UGameUISceneClient* GetSceneClient();
	static class UUIInteraction* GetCurrentUIController();
	static EInputPlatformType GetInputPlatformType(class ULocalPlayer* optionalOwningPlayer);
};

// Class Engine.Interaction
// 0x0030 (0x0048 - 0x0078)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;          // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;         // 0x0054 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;         // 0x0060 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnInitialize__Delegate;                      // 0x006C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Interaction");
		}

		return uClassPointer;
	};

	void NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyGameSessionEnded();
	void Initialized();
	void OnInitialize();
	void Init();
	void eventPostRender(class UCanvas* Canvas);
	void eventTick(float DeltaTime);
	bool OnReceivedNativeInputChar(int32_t ControllerId, const class FString& Unicode);
	bool OnReceivedNativeInputAxis(int32_t ControllerId, const class FName& Key, float Delta, float DeltaTime, bool optionalBGamepad);
	bool OnReceivedNativeInputKey(int32_t ControllerId, const class FName& Key, EInputEvent EventType, float optionalAmountDepressed, bool optionalBGamepad);
};

// Class Engine.UIInteraction
// 0x00F0 (0x0078 - 0x0168)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                 // 0x0078 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;         // 0x007C (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_FCallbackEventDevice;                  // 0x0080 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UUIManager*                                  UIManager;                                     // 0x0084 (0x0004) [0x0000000000000000]               
	class UClass*                                      UIManagerClass;                                // 0x0088 (0x0004) [0x0000000000000000]               
	class UClass*                                      SceneClientClass;                              // 0x008C (0x0004) [0x0000000000000000]               
	class UGameUISceneClient*                          SceneClient;                                   // 0x0090 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class TArray<class FName>                          SupportedDoubleClickKeys;                      // 0x0094 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UDataStoreClient*                            DataStoreManager;                              // 0x00A0 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint32_t                                           bProcessInput : 1;                             // 0x00A4 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	float                                              UIJoystickDeadZone;                            // 0x00A8 (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	float                                              UIAxisMultiplier;                              // 0x00AC (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	float                                              AxisRepeatDelay;                               // 0x00B0 (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	float                                              MouseButtonRepeatDelay;                        // 0x00B4 (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	float                                              DoubleClickTriggerSeconds;                     // 0x00B8 (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	int32_t                                            DoubleClickPixelTolerance;                     // 0x00BC (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                         // 0x00C0 (0x0010) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class TArray<struct FUIAxisEmulationDefinition>    ConfiguredAxisEmulationDefinitions;            // 0x00D0 (0x000C) [0x0000000000404002] (CPF_Const | CPF_Config | CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x3C];                            // 0x00DC (0x003C) MISSED OFFSET
	struct FUIAxisEmulationData                        AxisInputEmulation[4];                         // 0x0118 (0x0050) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIInteraction");
		}

		return uClassPointer;
	};

	void NotifyGameSessionEnded();
	static ENATType eventGetNATType();
	static int32_t GetConnectedGamepadCount(const class TArray<uint32_t>& optionalControllerConnectionStatusOverrides);
	static bool IsGamepadConnected(int32_t ControllerId);
	static int32_t GetNumGuestsLoggedIn();
	static int32_t GetLoggedInPlayerCount(bool optionalBRequireOnlineLogin);
	static bool eventIsLoggedIn(int32_t ControllerId, bool optionalBRequireOnlineLogin);
	static bool eventHasLinkConnection();
	ELoginStatus GetLowestLoginStatusOfControllers();
	static ELoginStatus eventGetLoginStatus(int32_t ControllerId);
	void NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer);
	static class ULocalPlayer* GetLocalPlayer(int32_t PlayerIndex);
	static class UDataStoreClient* GetDataStoreClient();
	static int32_t GetPlayerControllerId(int32_t PlayerIndex);
	static int32_t GetPlayerIndex(int32_t ControllerId);
	static int32_t GetPlayerCount();
};

// Class Engine.UIManager
// 0x0000 (0x003C - 0x003C)
class UUIManager : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIManager");
		}

		return uClassPointer;
	};

	int32_t FindLocalPlayerIndex(class UPlayer* P);
	void NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer);
	void eventPauseGame(bool bDesiredPauseState, int32_t optionalPlayerIndex);
	bool CanUnpauseInternalUI();
	static class UUIManager* GetUIManager();
};

// Class Engine.WaveFormBase
// 0x0004 (0x003C - 0x0040)
class UWaveFormBase : public UObject
{
public:
	class UForceFeedbackWaveform*                      TheWaveForm;                                   // 0x003C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WaveFormBase");
		}

		return uClassPointer;
	};

};

// Class Engine.World
// 0x02A0 (0x003C - 0x02DC)
class UWorld : public UObject
{
public:
	uint8_t                                            UnknownData00[0x2A0];                          // 0x003C (0x02A0) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.World");
		}

		return uClassPointer;
	};

};

// Class Engine.EnvironmentVolume
// 0x000C (0x01F4 - 0x0200)
class AEnvironmentVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;        // 0x01F4 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x01F8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bSplitNavMesh : 1;                             // 0x01FC (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.EnvironmentVolume");
		}

		return uClassPointer;
	};

	void SetSplitNavMesh(bool bNewValue);
};

// Class Engine.TestSplittingVolume
// 0x0004 (0x01F4 - 0x01F8)
class ATestSplittingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x01F4 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TestSplittingVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.AIController
// 0x0018 (0x034C - 0x0364)
class AAIController : public AController
{
public:
	uint32_t                                           bAdjustFromWalls : 1;                          // 0x034C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bReverseScriptedRoute : 1;                     // 0x034C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              Skill;                                         // 0x0350 (0x0004) [0x0000000000000000]               
	class AActor*                                      ScriptedMoveTarget;                            // 0x0354 (0x0004) [0x0000000000000000]               
	class ARoute*                                      ScriptedRoute;                                 // 0x0358 (0x0004) [0x0000000000000000]               
	int32_t                                            ScriptedRouteIndex;                            // 0x035C (0x0004) [0x0000000000000000]               
	class AActor*                                      ScriptedFocus;                                 // 0x0360 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AIController");
		}

		return uClassPointer;
	};

	bool CanFireWeapon(class AWeapon* Wpn, uint8_t FireModeNum);
	void NotifyWeaponFinishedFiring(class AWeapon* W, uint8_t FireMode);
	void NotifyWeaponFired(class AWeapon* W, uint8_t FireMode);
	void OnAIMoveToActor(class USeqAct_AIMoveToActor* Action);
	void eventGetPlayerViewPoint(struct FVector& outOut_Location, struct FRotator& outOut_Rotation);
	void eventSetTeam(int32_t inTeamIdx);
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void Reset();
	void eventPreBeginPlay();
};

// Class Engine.CrowdAgentBase
// 0x0004 (0x01C8 - 0x01CC)
class ACrowdAgentBase : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;           // 0x01C8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CrowdAgentBase");
		}

		return uClassPointer;
	};

	void eventNotifyPathChanged();
};

// Class Engine.CrowdPopulationManagerBase
// 0x0000 (0x01C8 - 0x01C8)
class ACrowdPopulationManagerBase : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CrowdPopulationManagerBase");
		}

		return uClassPointer;
	};

};

// Class Engine.PathTargetPoint
// 0x0000 (0x01CC - 0x01CC)
class APathTargetPoint : public AKeypoint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PathTargetPoint");
		}

		return uClassPointer;
	};

	bool ShouldBeHiddenBySHOW_NavigationNodes();
};

// Class Engine.NavMeshObstacle
// 0x0008 (0x01C8 - 0x01D0)
class ANavMeshObstacle : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;        // 0x01C8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	uint32_t                                           bEnabled : 1;                                  // 0x01CC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPreserveInternalGeo : 1;                      // 0x01CC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshObstacle");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct ANavMeshObstacle_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct ANavMeshObstacle_FCheckpointRecord& outRecord);
	void SetEnabled(bool bInEnabled);
	void OnToggle(class USeqAct_Toggle* Action);
	void PostBeginPlay();
	void UnRegisterObstacle();
	void RegisterObstacle();
	bool eventGetObstacleBoudingShape(class TArray<struct FVector>& outShape);
};

// Class Engine.PylonSeed
// 0x0004 (0x01C8 - 0x01CC)
class APylonSeed : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;          // 0x01C8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PylonSeed");
		}

		return uClassPointer;
	};

};

// Class Engine.CoverGroupRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CoverGroupRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.MeshComponent
// 0x000C (0x01D8 - 0x01E4)
class UMeshComponent : public UPrimitiveComponent
{
public:
	class TArray<class UMaterialInterface*>            Materials;                                     // 0x01D8 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MeshComponent");
		}

		return uClassPointer;
	};

	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying(int32_t ElementIndex);
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant(int32_t ElementIndex);
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t optionalCinematicTextureGroups);
	int32_t GetNumElements();
	void SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material);
	class UMaterialInterface* GetMaterial(int32_t ElementIndex);
};

// Class Engine.StaticMeshComponent
// 0x0070 (0x01E4 - 0x0254)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int32_t                                            ForcedLodModel;                                // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            PreviousLODLevel;                              // 0x01E8 (0x0004) [0x0000000000000000]               
	class UStaticMesh*                                 StaticMesh;                                    // 0x01EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FColor                                      WireframeColor;                                // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIgnoreInstanceForTextureStreaming : 1;        // 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOverrideLightMapResolution : 1;               // 0x01F4 (0x0004) [0x0000000020000002] [0x00000002] (CPF_Const | CPF_Deprecated)
	uint32_t                                           bOverrideLightMapRes : 1;                      // 0x01F4 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	int32_t                                            OverriddenLightMapResolution;                  // 0x01F8 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	int32_t                                            OverriddenLightMapRes;                         // 0x01FC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              OverriddenLODMaxRange;                         // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StreamingDistanceMultiplier;                   // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SubDivisionStepSize;                           // 0x0208 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bUseSubDivisions : 1;                          // 0x020C (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bForceStaticDecals : 1;                        // 0x020C (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bCanHighlightSelectedSections : 1;             // 0x020C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bUseSimpleLightmapModifications : 1;           // 0x020C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	class UTexture*                                    SimpleLightmapModificationTexture;             // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	ELightmapModificationFunction                      SimpleLightmapModificationFunction;            // 0x0214 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNeverBecomeDynamic : 1;                       // 0x0218 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<struct FGuid>                         IrrelevantLights;                              // 0x021C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FStaticMeshComponentLODInfo>   LODData;                                       // 0x0228 (0x000C) [0x0000000080001002] (CPF_Const | CPF_Native | CPF_SerializeText)
	int32_t                                            VertexPositionVersionNumber;                   // 0x0234 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FLightmassPrimitiveSettings                 LightmassSettings;                             // 0x0238 (0x001C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StaticMeshComponent");
		}

		return uClassPointer;
	};

	bool CanBecomeDynamic();
	void SetForceStaticDecals(bool bInForceStaticDecals);
	void DisableRBCollisionWithSMC(class UPrimitiveComponent* OtherSMC, bool bDisabled);
	bool SetStaticMesh(class UStaticMesh* NewMesh, bool optionalBForce);
};

// Class Engine.CoverMeshComponent
// 0x0028 (0x0254 - 0x027C)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	class TArray<struct FCoverMeshes>                  Meshes;                                        // 0x0254 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVector                                     LocationOffset;                                // 0x0260 (0x000C) [0x0000000000000000]               
	class UStaticMesh*                                 AutoAdjustOn;                                  // 0x026C (0x0004) [0x0000000000000000]               
	class UStaticMesh*                                 AutoAdjustOff;                                 // 0x0270 (0x0004) [0x0000000000000000]               
	class UStaticMesh*                                 Disabled;                                      // 0x0274 (0x0004) [0x0000000000000000]               
	uint32_t                                           bShowWhenNotSelected : 1;                      // 0x0278 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CoverMeshComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.NavMeshRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.PathRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PathRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.RouteRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RouteRenderingComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.AICommandBase
// 0x0000 (0x003C - 0x003C)
class UAICommandBase : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AICommandBase");
		}

		return uClassPointer;
	};

	static int32_t eventGetUtility(class AAIController* InAI);
};

// Class Engine.AutoNavMeshPathObstacleUnregister
// 0x0008 (0x003C - 0x0044)
class UAutoNavMeshPathObstacleUnregister : public UObject
{
public:
	class UInterface_NavMeshPathObstacle*              PathObstacleRef_Object;                        // 0x003C (0x0004) [0x0000000000001000] (CPF_Native)
	class UInterface_NavMeshPathObstacle*              PathObstacleRef_Interface;                     // 0x0040 (0x0004) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AutoNavMeshPathObstacleUnregister");
		}

		return uClassPointer;
	};

};

// Class Engine.Interface_NavMeshPathObject
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathObject : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Interface_NavMeshPathObject");
		}

		return uClassPointer;
	};

};

// Class Engine.Interface_NavMeshPathSwitch
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathSwitch : public UInterface_NavMeshPathObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Interface_NavMeshPathSwitch");
		}

		return uClassPointer;
	};

	bool eventAIActivateSwitch(class AAIController* AI);
};

// Class Engine.Interface_NavMeshPathObstacle
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathObstacle : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Interface_NavMeshPathObstacle");
		}

		return uClassPointer;
	};

};

// Class Engine.Interface_PylonGeometryProvider
// 0x0000 (0x003C - 0x003C)
class UInterface_PylonGeometryProvider : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Interface_PylonGeometryProvider");
		}

		return uClassPointer;
	};

};

// Class Engine.Interface_RVO
// 0x0000 (0x003C - 0x003C)
class UInterface_RVO : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Interface_RVO");
		}

		return uClassPointer;
	};

};

// Class Engine.NavigationHandle
// 0x0118 (0x003C - 0x0154)
class UNavigationHandle : public UObject
{
public:
	class APylon*                                      AnchorPylon;                                   // 0x003C (0x0004) [0x0000000000000000]               
	struct FPointer                                    AnchorPoly;                                    // 0x0040 (0x0004) [0x0000000000001000] (CPF_Native)  
	struct FPathStore                                  PathCache;                                     // 0x0044 (0x000C) [0x0000000000000000]               
	struct FPointer                                    BestUnfinishedPathPoint;                       // 0x0050 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	struct FPointer                                    CurrentEdge;                                   // 0x0054 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    SubGoal_DestPoly;                              // 0x0058 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FBasedPosition                              FinalDestination;                              // 0x005C (0x0034) [0x0000000000000000]               
	uint32_t                                           bSkipRouteCacheUpdates : 1;                    // 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bUseORforEvaluateGoal : 1;                     // 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bDebugConstraintsAndGoalEvals : 1;             // 0x0090 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUltraVerbosePathDebugging : 1;                // 0x0090 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bVisualPathDebugging : 1;                      // 0x0090 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bDebug_Breadcrumbs : 1;                        // 0x0090 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	class UNavMeshPathConstraint*                      PathConstraintList;                            // 0x0094 (0x0004) [0x0000000000000000]               
	class UNavMeshPathGoalEvaluator*                   PathGoalList;                                  // 0x0098 (0x0004) [0x0000000000000000]               
	struct FNavMeshPathParams                          CachedPathParams;                              // 0x009C (0x0030) [0x0000000000000000]               
	EPathFindingError                                  LastPathError;                                 // 0x00CC (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              LastPathFailTime;                              // 0x00D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Breadcrumbs[10];                               // 0x00D4 (0x0078) [0x0000000000000000]               
	int32_t                                            BreadCrumbMostRecentIdx;                       // 0x014C (0x0004) [0x0000000000000000]               
	float                                              BreadCrumbDistanceInterval;                    // 0x0150 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavigationHandle");
		}

		return uClassPointer;
	};

	void DrawBreadCrumbs(bool optionalBPersistent);
	static bool StaticGetValidatedAnchorPosition(const struct FVector& StartCheckBaseLocation, const struct FVector& Extent, struct FVector& outOut_NewAnchorLoc);
	bool GetValidatedAnchorPosition(const struct FVector& optionalOverrideStartLoc, struct FVector& outOut_NewAnchorLoc);
	static bool GetAllCoverSlotsInRadius(const struct FVector& FromLoc, float Radius, class TArray<struct FCoverInfo>& outOut_CoverList);
	bool PopulatePathfindingParamCache();
	static struct FVector MoveToDesiredHeightAboveMesh(const struct FVector& Point, float Height);
	void CopyMovePointsFromPathCache(const struct FVector& FinalDest, class TArray<struct FVector>& outOut_MovePoints);
	float CalculatePathDistance(const struct FVector& optionalFinalDest);
	struct FVector GetFirstMoveLocation();
	bool IsAnchorInescapable();
	void LimitPathCacheDistance(float MaxDist);
	static void GetValidPositionsForBox(const struct FVector& pos, float Radius, const struct FVector& Extent, bool bMustBeReachableFromStartPos, int32_t optionalMaxPositions, float optionalMinRadius, const struct FVector& optionalValidBoxAroundStartPos, class TArray<struct FVector>& outOut_ValidPositions);
	static void GetAllPolyCentersWithinBounds(const struct FVector& pos, const struct FVector& Extent, class TArray<struct FVector>& outOut_PolyCtrs);
	ENavMeshEdgeType GetCurrentEdgeType();
	void ClearCurrentEdge();
	class FString GetCurrentEdgeDebugText();
	void PrintPathCacheDebugText();
	void DrawPathCache(const struct FVector& optionalDrawOffset, bool optionalBPersistent, const struct FColor& optionalDrawColor);
	bool ActorReachable(class AActor* A);
	bool PointReachable(const struct FVector& Point, const struct FVector& optionalOverrideStartPoint, bool optionalBAllowHitsInEndCollisionBox);
	bool PointCheck(const struct FVector& Pt, const struct FVector& Extent);
	bool LineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector& outOut_HitLocation, struct FVector& outOut_HitNormal);
	static bool ObstaclePointCheck(const struct FVector& Pt, const struct FVector& Extent);
	static bool ObstacleLineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector& outOut_HitLoc, struct FVector& outOut_HitNorm);
	bool SuggestMovePreparation(class AController* C, struct FVector& outMovePt);
	bool FindPath(class AActor*& outOut_DestActor, int32_t& outOut_DestItem);
	bool ComputeValidFinalDestination(struct FVector& outOut_ComputedPosition);
	bool SetFinalDestination(const struct FVector& FinalDest);
	bool GetNextMoveLocation(float ArrivalDistance, struct FVector& outOut_MoveDest);
	static class APylon* GetPylonFromPos(const struct FVector& Position);
	bool FindPylon();
	struct FVector GetBestUnfinishedPathPoint();
	bool PathCache_RemoveIndex(int32_t InIdx, int32_t optionalCount);
	struct FVector PathCache_GetGoalPoint();
	bool PathCache_Empty();
	int32_t GetPathCacheLength();
	class UNavMeshPathGoalEvaluator* CreatePathGoalEvaluator(class UClass* GoalEvalClass);
	class UNavMeshPathConstraint* CreatePathConstraint(class UClass* ConstraintClass);
	bool DoesPylonAHaveAPathToPylonB(class APylon* A, class APylon* B);
	class APylon* BuildFromPylonAToPylonB(class APylon* A, class APylon* B);
	void AddGoalEvaluator(class UNavMeshPathGoalEvaluator* Evaluator);
	void AddPathConstraint(class UNavMeshPathConstraint* Constraint);
	void ClearConstraints();
	bool GetNextBreadCrumb(struct FVector& outOut_BreadCrumbLoc);
	void UpdateBreadCrumbs(const struct FVector& InLocation);
	void CopyPathStoreToPathCache(struct FPathStore& outInStore);
};

// Class Engine.NavMeshGoal_Filter
// 0x000C (0x003C - 0x0048)
class UNavMeshGoal_Filter : public UObject
{
public:
	uint32_t                                           bShowDebug : 1;                                // 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	int32_t                                            NumNodesThrownOut;                             // 0x0040 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumNodesProcessed;                             // 0x0044 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoal_Filter");
		}

		return uClassPointer;
	};

	class FString eventGetDumpString();
};

// Class Engine.NavMeshGoalFilter_MinPathDistance
// 0x0004 (0x0048 - 0x004C)
class UNavMeshGoalFilter_MinPathDistance : public UNavMeshGoal_Filter
{
public:
	int32_t                                            MinDistancePathShouldBe;                       // 0x0048 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoalFilter_MinPathDistance");
		}

		return uClassPointer;
	};

	static bool MustBeLongerPathThan(class UNavMeshGoal_GenericFilterContainer* FilterContainer, int32_t InMinDistancePathShouldBe);
};

// Class Engine.NavMeshGoalFilter_NotNearOtherAI
// 0x0004 (0x0048 - 0x004C)
class UNavMeshGoalFilter_NotNearOtherAI : public UNavMeshGoal_Filter
{
public:
	float                                              DistanceToCheck;                               // 0x0048 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoalFilter_NotNearOtherAI");
		}

		return uClassPointer;
	};

	static bool NotNearOtherAI(class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck);
};

// Class Engine.NavMeshGoalFilter_OutOfViewFrom
// 0x0010 (0x0048 - 0x0058)
class UNavMeshGoalFilter_OutOfViewFrom : public UNavMeshGoal_Filter
{
public:
	struct FPointer                                    GoalPoly;                                      // 0x0048 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	struct FVector                                     OutOfViewLocation;                             // 0x004C (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoalFilter_OutOfViewFrom");
		}

		return uClassPointer;
	};

	static bool MustBeHiddenFromThisPoint(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOutOfViewLocation);
};

// Class Engine.NavMeshGoalFilter_OutSideOfDotProductWedge
// 0x001C (0x0048 - 0x0064)
class UNavMeshGoalFilter_OutSideOfDotProductWedge : public UNavMeshGoal_Filter
{
public:
	struct FVector                                     Location;                                      // 0x0048 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     Rotation;                                      // 0x0054 (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              Epsilon;                                       // 0x0060 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoalFilter_OutSideOfDotProductWedge");
		}

		return uClassPointer;
	};

	static bool OutsideOfDotProductWedge(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InLocation, const struct FRotator& InRotation, float InEpsilon);
};

// Class Engine.NavMeshGoalFilter_PolyEncompassesAI
// 0x000C (0x0048 - 0x0054)
class UNavMeshGoalFilter_PolyEncompassesAI : public UNavMeshGoal_Filter
{
public:
	struct FVector                                     OverrideExtentToCheck;                         // 0x0048 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoalFilter_PolyEncompassesAI");
		}

		return uClassPointer;
	};

	static bool MakeSureAIFits(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& optionalInOverrideExtentToCheck);
};

// Class Engine.NavMeshPathConstraint
// 0x0014 (0x003C - 0x0050)
class UNavMeshPathConstraint : public UObject
{
public:
	class UNavMeshPathConstraint*                      NextConstraint;                                // 0x003C (0x0004) [0x0000000000000000]               
	int32_t                                            NumNodesProcessed;                             // 0x0040 (0x0004) [0x0000000000000000]               
	int32_t                                            NumThrownOutNodes;                             // 0x0044 (0x0004) [0x0000000000000000]               
	float                                              AddedDirectCost;                               // 0x0048 (0x0004) [0x0000000000000000]               
	float                                              AddedHeuristicCost;                            // 0x004C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPathConstraint");
		}

		return uClassPointer;
	};

	class FString eventGetDumpString();
	void eventRecycle();
};

// Class Engine.NavMeshPath_AlongLine
// 0x000C (0x0050 - 0x005C)
class UNavMeshPath_AlongLine : public UNavMeshPathConstraint
{
public:
	struct FVector                                     Direction;                                     // 0x0050 (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPath_AlongLine");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool AlongLine(class UNavigationHandle* NavHandle, const struct FVector& Dir);
};

// Class Engine.NavMeshPath_EnforceTwoWayEdges
// 0x0000 (0x0050 - 0x0050)
class UNavMeshPath_EnforceTwoWayEdges : public UNavMeshPathConstraint
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPath_EnforceTwoWayEdges");
		}

		return uClassPointer;
	};

	static bool EnforceTwoWayEdges(class UNavigationHandle* NavHandle);
};

// Class Engine.NavMeshPath_MinDistBetweenSpecsOfType
// 0x0018 (0x0050 - 0x0068)
class UNavMeshPath_MinDistBetweenSpecsOfType : public UNavMeshPathConstraint
{
public:
	float                                              MinDistBetweenEdgeTypes;                       // 0x0050 (0x0004) [0x0000000000000000]               
	struct FVector                                     InitLocation;                                  // 0x0054 (0x000C) [0x0000000000000000]               
	ENavMeshEdgeType                                   EdgeType;                                      // 0x0060 (0x0001) [0x0000000000000000]               
	float                                              Penalty;                                       // 0x0064 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPath_MinDistBetweenSpecsOfType");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool EnforceMinDist(class UNavigationHandle* NavHandle, float InMinDist, ENavMeshEdgeType InEdgeType, const struct FVector& optionalLastLocation, float optionalInPenalty);
};

// Class Engine.NavMeshPath_SameCoverLink
// 0x0004 (0x0050 - 0x0054)
class UNavMeshPath_SameCoverLink : public UNavMeshPathConstraint
{
public:
	class ACoverLink*                                  TestLink;                                      // 0x0050 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPath_SameCoverLink");
		}

		return uClassPointer;
	};

	void Recycle();
	static void SameCoverLink(class UNavigationHandle* NavHandle, class ACoverLink* InLink);
};

// Class Engine.NavMeshPath_Toward
// 0x0018 (0x0050 - 0x0068)
class UNavMeshPath_Toward : public UNavMeshPathConstraint
{
public:
	uint32_t                                           bBiasAgainstHighLevelPath : 1;                 // 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              OutOfHighLevelPathBias;                        // 0x0054 (0x0004) [0x0000000000000000]               
	class AActor*                                      GoalActor;                                     // 0x0058 (0x0004) [0x0000000000000000]               
	struct FVector                                     GoalPoint;                                     // 0x005C (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPath_Toward");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool TowardPoint(class UNavigationHandle* NavHandle, const struct FVector& Point);
	static bool TowardGoal(class UNavigationHandle* NavHandle, class AActor* Goal);
};

// Class Engine.NavMeshPath_WithinDistanceEnvelope
// 0x001C (0x0050 - 0x006C)
class UNavMeshPath_WithinDistanceEnvelope : public UNavMeshPathConstraint
{
public:
	float                                              MaxDistance;                                   // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDistance;                                   // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSoft : 1;                                     // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOnlyThrowOutNodesThatLeaveEnvelope : 1;       // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              SoftStartPenalty;                              // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     EnvelopeTestPoint;                             // 0x0060 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPath_WithinDistanceEnvelope");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool StayWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool optionalBInSoft, float optionalInSoftStartPenalty, bool optionalBOnlyTossOutSpecsThatLeave);
};

// Class Engine.NavMeshPath_WithinTraversalDist
// 0x000C (0x0050 - 0x005C)
class UNavMeshPath_WithinTraversalDist : public UNavMeshPathConstraint
{
public:
	float                                              MaxTraversalDist;                              // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSoft : 1;                                     // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              SoftStartPenalty;                              // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPath_WithinTraversalDist");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool DontExceedMaxDist(class UNavigationHandle* NavHandle, float InMaxTraversalDist, bool optionalBInSoft);
};

// Class Engine.NavMeshPathGoalEvaluator
// 0x0018 (0x003C - 0x0054)
class UNavMeshPathGoalEvaluator : public UObject
{
public:
	class UNavMeshPathGoalEvaluator*                   NextEvaluator;                                 // 0x003C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MaxPathVisits;                                 // 0x0040 (0x0004) [0x0000000000000000]               
	uint32_t                                           bAlwaysCallEvaluateGoal : 1;                   // 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDoPartialAStar : 1;                           // 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	int32_t                                            NumNodesThrownOut;                             // 0x0048 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumNodesProcessed;                             // 0x004C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MaxOpenListSize;                               // 0x0050 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshPathGoalEvaluator");
		}

		return uClassPointer;
	};

	class FString eventGetDumpString();
	void eventRecycle();
};

// Class Engine.NavMeshGoal_At
// 0x0020 (0x0054 - 0x0074)
class UNavMeshGoal_At : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     Goal;                                          // 0x0054 (0x000C) [0x0000000000000000]               
	float                                              GoalDist;                                      // 0x0060 (0x0004) [0x0000000000000000]               
	uint32_t                                           bKeepPartial : 1;                              // 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bWeightPartialByDist : 1;                      // 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bGoalInSamePolyAsAnchor : 1;                   // 0x0064 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              PartialDistSq;                                 // 0x0068 (0x0004) [0x0000000000000000]               
	struct FPointer                                    GoalPoly;                                      // 0x006C (0x0004) [0x0000000000001000] (CPF_Native)  
	struct FPointer                                    PartialGoal;                                   // 0x0070 (0x0004) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoal_At");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool AtLocation(class UNavigationHandle* NavHandle, const struct FVector& GoalLocation, float optionalDist, bool optionalBReturnPartial, bool optionalBInWeightPartialByDist);
	static bool AtActor(class UNavigationHandle* NavHandle, class AActor* GoalActor, float optionalDist, bool optionalBReturnPartial, bool optionalBInWeightPartialByDist);
	void RecycleNative();
};

// Class Engine.NavMeshGoal_ClosestActorInList
// 0x004C (0x0054 - 0x00A0)
class UNavMeshGoal_ClosestActorInList : public UNavMeshPathGoalEvaluator
{
public:
	class TArray<struct FBiasedGoalActor>              GoalList;                                      // 0x0054 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FMultiMap_Mirror                            PolyToGoalActorMap;                            // 0x0060 (0x003C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    CachedAnchorPoly;                              // 0x009C (0x0004) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoal_ClosestActorInList");
		}

		return uClassPointer;
	};

	void RecycleInternal();
	void eventRecycle();
	static class UNavMeshGoal_ClosestActorInList* ClosestActorInList(class UNavigationHandle* NavHandle, class TArray<struct FBiasedGoalActor>& outInGoalList);
};

// Class Engine.NavMeshGoal_GenericFilterContainer
// 0x0020 (0x0054 - 0x0074)
class UNavMeshGoal_GenericFilterContainer : public UNavMeshPathGoalEvaluator
{
public:
	class TArray<class UNavMeshGoal_Filter*>           GoalFilters;                                   // 0x0054 (0x000C) [0x0000000004402008] (CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline)
	struct FPointer                                    SuccessfulGoal;                                // 0x0060 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class UNavigationHandle*                           MyNavigationHandle;                            // 0x0064 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FVector>                       SeedLocations;                                 // 0x0068 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoal_GenericFilterContainer");
		}

		return uClassPointer;
	};

	void Recycle();
	struct FVector GetGoalPoint();
	class UNavMeshGoal_Filter* GetFilterOfType(class UClass* Filter_Class);
	static class UNavMeshGoal_GenericFilterContainer* CreateAndAddFilterToNavHandleFromSeedList(class UNavigationHandle* NavHandle, int32_t optionalInMaxPathVisits, class TArray<struct FVector>& outInSearchSeeds);
	static class UNavMeshGoal_GenericFilterContainer* CreateAndAddFilterToNavHandle(class UNavigationHandle* NavHandle, int32_t optionalInMaxPathVisits);
};

// Class Engine.NavMeshGoal_Null
// 0x0004 (0x0054 - 0x0058)
class UNavMeshGoal_Null : public UNavMeshPathGoalEvaluator
{
public:
	struct FPointer                                    PartialGoal;                                   // 0x0054 (0x0004) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoal_Null");
		}

		return uClassPointer;
	};

	void Recycle();
	void RecycleNative();
	static bool GoUntilBust(class UNavigationHandle* NavHandle, int32_t optionalInMaxPathVisits);
};

// Class Engine.NavMeshGoal_PolyEncompassesAI
// 0x000C (0x0054 - 0x0060)
class UNavMeshGoal_PolyEncompassesAI : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     OverrideExtentToCheck;                         // 0x0054 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoal_PolyEncompassesAI");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool MakeSureAIFits(class UNavigationHandle* NavHandle, const struct FVector& optionalInOverrideExtentToCheck);
};

// Class Engine.NavMeshGoal_Random
// 0x000C (0x0054 - 0x0060)
class UNavMeshGoal_Random : public UNavMeshPathGoalEvaluator
{
public:
	int32_t                                            MinDist;                                       // 0x0054 (0x0004) [0x0000000000000000]               
	float                                              BestRating;                                    // 0x0058 (0x0004) [0x0000000000000000]               
	struct FPointer                                    PartialGoal;                                   // 0x005C (0x0004) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoal_Random");
		}

		return uClassPointer;
	};

	void Recycle();
	void RecycleNative();
	static bool FindRandom(class UNavigationHandle* NavHandle, int32_t optionalInMinDist, int32_t optionalInMaxPathVisits);
};

// Class Engine.NavMeshGoal_WithinDistanceEnvelope
// 0x0018 (0x0054 - 0x006C)
class UNavMeshGoal_WithinDistanceEnvelope : public UNavMeshPathGoalEvaluator
{
public:
	float                                              MaxDistance;                                   // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDistance;                                   // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinTraversalDist;                              // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     EnvelopeTestPoint;                             // 0x0060 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshGoal_WithinDistanceEnvelope");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool GoalWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, float optionalInMinTraversalDist);
};

// Class Engine.PathConstraint
// 0x0008 (0x003C - 0x0044)
class UPathConstraint : public UObject
{
public:
	int32_t                                            CacheIdx;                                      // 0x003C (0x0004) [0x0000000000000002] (CPF_Const)   
	class UPathConstraint*                             NextConstraint;                                // 0x0040 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PathConstraint");
		}

		return uClassPointer;
	};

	class FString eventGetDumpString();
	void eventRecycle();
};

// Class Engine.Path_AlongLine
// 0x000C (0x0044 - 0x0050)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                     // 0x0044 (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Path_AlongLine");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool AlongLine(class APawn* P, const struct FVector& Dir);
};

// Class Engine.Path_AvoidInEscapableNodes
// 0x0010 (0x0044 - 0x0054)
class UPath_AvoidInEscapableNodes : public UPathConstraint
{
public:
	int32_t                                            Radius;                                        // 0x0044 (0x0004) [0x0000000000000000]               
	int32_t                                            Height;                                        // 0x0048 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxFallSpeed;                                  // 0x004C (0x0004) [0x0000000000000000]               
	int32_t                                            MoveFlags;                                     // 0x0050 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Path_AvoidInEscapableNodes");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool DontGetStuck(class APawn* P);
	void CachePawnReacFlags(class APawn* P);
};

// Class Engine.Path_MinDistBetweenSpecsOfType
// 0x0014 (0x0044 - 0x0058)
class UPath_MinDistBetweenSpecsOfType : public UPathConstraint
{
public:
	float                                              MinDistBetweenSpecTypes;                       // 0x0044 (0x0004) [0x0000000000000000]               
	struct FVector                                     InitLocation;                                  // 0x0048 (0x000C) [0x0000000000000000]               
	class UClass*                                      ReachSpecClass;                                // 0x0054 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Path_MinDistBetweenSpecsOfType");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool EnforceMinDist(class APawn* P, float InMinDist, class UClass* InSpecClass, const struct FVector& optionalLastLocation);
};

// Class Engine.Path_TowardGoal
// 0x0004 (0x0044 - 0x0048)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                     // 0x0044 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Path_TowardGoal");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool TowardGoal(class APawn* P, class AActor* Goal);
};

// Class Engine.Path_TowardPoint
// 0x000C (0x0044 - 0x0050)
class UPath_TowardPoint : public UPathConstraint
{
public:
	struct FVector                                     GoalPoint;                                     // 0x0044 (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Path_TowardPoint");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool TowardPoint(class APawn* P, const struct FVector& Point);
};

// Class Engine.Path_WithinDistanceEnvelope
// 0x001C (0x0044 - 0x0060)
class UPath_WithinDistanceEnvelope : public UPathConstraint
{
public:
	float                                              MaxDistance;                                   // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinDistance;                                   // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSoft : 1;                                     // 0x004C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOnlyThrowOutNodesThatLeaveEnvelope : 1;       // 0x004C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              SoftStartPenalty;                              // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     EnvelopeTestPoint;                             // 0x0054 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Path_WithinDistanceEnvelope");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool StayWithinEnvelopeToLoc(class APawn* P, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool optionalBInSoft, float optionalInSoftStartPenalty, bool optionalBOnlyTossOutSpecsThatLeave);
};

// Class Engine.Path_WithinTraversalDist
// 0x000C (0x0044 - 0x0050)
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                              // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSoft : 1;                                     // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              SoftStartPenalty;                              // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Path_WithinTraversalDist");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool DontExceedMaxDist(class APawn* P, float InMaxTraversalDist, bool optionalBInSoft);
};

// Class Engine.PathGoalEvaluator
// 0x0010 (0x003C - 0x004C)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                 // 0x003C (0x0004) [0x0000000000000000]               
	class ANavigationPoint*                            GeneratedGoal;                                 // 0x0040 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxPathVisits;                                 // 0x0044 (0x0004) [0x0000000000000000]               
	int32_t                                            CacheIdx;                                      // 0x0048 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PathGoalEvaluator");
		}

		return uClassPointer;
	};

	class FString eventGetDumpString();
	void eventRecycle();
};

// Class Engine.Goal_AtActor
// 0x000C (0x004C - 0x0058)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                     // 0x004C (0x0004) [0x0000000000000000]               
	float                                              GoalDist;                                      // 0x0050 (0x0004) [0x0000000000000000]               
	uint32_t                                           bKeepPartial : 1;                              // 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Goal_AtActor");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool AtActor(class APawn* P, class AActor* Goal, float optionalDist, bool optionalBReturnPartial);
};

// Class Engine.Goal_Null
// 0x0000 (0x004C - 0x004C)
class UGoal_Null : public UPathGoalEvaluator
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Goal_Null");
		}

		return uClassPointer;
	};

	void Recycle();
	static bool GoUntilBust(class APawn* P, int32_t optionalInMaxPathVisits);
};

// Class Engine.SkeletalMeshActor
// 0x0040 (0x01C8 - 0x0208)
class ASkeletalMeshActor : public AActor
{
public:
	uint32_t                                           bDamageAppliesImpulse : 1;                     // 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bShouldDoAnimNotifies : 1;                     // 0x01C8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bForceSaveInCheckpoint : 1;                    // 0x01C8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bCollideActors_OldValue : 1;                   // 0x01C8 (0x0004) [0x0000000020000000] [0x00000008]  CPF_Deprecated)
	uint32_t                                           bShouldShadowParentAllAttachedActors : 1;      // 0x01C8 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                         // 0x01CC (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                              // 0x01D0 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class UAudioComponent*                             FacialAudioComp;                               // 0x01D4 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USkeletalMesh*                               ReplicatedMesh;                                // 0x01D8 (0x0004) [0x0000000000002020] (CPF_Net | CPF_Transient | CPF_RepNotify)
	class UMaterialInterface*                          ReplicatedMaterial0;                           // 0x01DC (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	class UMaterialInterface*                          ReplicatedMaterial1;                           // 0x01E0 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	class TArray<struct FSkelMeshActorControlTarget>   ControlTargets;                                // 0x01E4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UInterpGroup*>                  InterpGroupList;                               // 0x01F0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class FName                                        SavedAnimSeqName;                              // 0x01FC (0x0008) [0x0000000000002000] (CPF_Transient)
	float                                              SavedCurrentTime;                              // 0x0204 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActor");
		}

		return uClassPointer;
	};

	bool eventCreateForceField(class UAnimNotify_ForceField* AnimNotifyData);
	void SkelMeshActorOnParticleSystemFinished(class UParticleSystemComponent* PSC);
	bool eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	void ApplyCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
	void eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void eventOnSetSkelControlTarget(class USeqAct_SetSkelControlTarget* Action);
	void eventOnUpdatePhysBonesFromAnim(class USeqAct_UpdatePhysBonesFromAnim* Action);
	void eventOnSetMesh(class USeqAct_SetMesh* Action);
	bool IsActorPlayingFaceFXAnim();
	class UFaceFXAsset* eventGetActorFaceFXAsset();
	void OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction);
	class UAudioComponent* eventGetFaceFXAudioComponent();
	void eventStopActorFaceFXAnim();
	bool eventPlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const class FString& GroupName, const class FString& SeqName, class USoundCue* SoundCueToPlay);
	void MAT_FinishAnimControl(class UInterpGroup* InInterpGroup);
	void eventFinishAnimControl(class UInterpGroup* InInterpGroup);
	void eventSetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void MAT_BeginAnimControl(class UInterpGroup* InInterpGroup);
	void eventBeginAnimControl(class UInterpGroup* InInterpGroup);
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void OnToggle(class USeqAct_Toggle* Action);
	void eventReplicatedEvent(const class FName& VarName);
	void UpdateAnimSetList();
	void eventDestroyed();
	void eventPostBeginPlay();
};

// Class Engine.SkeletalMeshActorBasedOnExtremeContent
// 0x0018 (0x0208 - 0x0220)
class ASkeletalMeshActorBasedOnExtremeContent : public ASkeletalMeshActor
{
public:
	class TArray<struct FSkelMaterialSetterDatum>      ExtremeContent;                                // 0x0208 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FSkelMaterialSetterDatum>      NonExtremeContent;                             // 0x0214 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActorBasedOnExtremeContent");
		}

		return uClassPointer;
	};

	void SetMaterialBasedOnExtremeContent();
	void eventPostBeginPlay();
};

// Class Engine.SkeletalMeshActorSpawnable
// 0x0000 (0x0208 - 0x0208)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActorSpawnable");
		}

		return uClassPointer;
	};

};

// Class Engine.SkeletalMeshCinematicActor
// 0x0000 (0x0208 - 0x0208)
class ASkeletalMeshCinematicActor : public ASkeletalMeshActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshCinematicActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SkeletalMeshActorMAT
// 0x000C (0x0208 - 0x0214)
class ASkeletalMeshActorMAT : public ASkeletalMeshCinematicActor
{
public:
	class TArray<class UAnimNodeSlot*>                 SlotNodes;                                     // 0x0208 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActorMAT");
		}

		return uClassPointer;
	};

	void eventSetSkelControlScale(const class FName& SkelControlName, float Scale);
	void eventSetMorphWeight(const class FName& MorphNodeName, float MorphWeight);
	void eventFinishAnimControl(class UInterpGroup* InInterpGroup);
	void MAT_SetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void eventSetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void ClearAnimNodes();
	void CacheAnimNodes();
	void eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void eventDestroyed();
	void MAT_SetSkelControlStrength(const class FName& SkelControlName, float ControlStrength);
	void MAT_SetSkelControlScale(const class FName& SkelControlName, float Scale);
	void MAT_SetMorphWeight(const class FName& MorphNodeName, float MorphWeight);
	void MAT_SetAnimWeights(const class TArray<struct FAnimSlotInfo>& SlotInfos);
};

// Class Engine.HeadTrackingComponent
// 0x009F (0x0055 - 0x00F4)
class UHeadTrackingComponent : public UActorComponent
{
public:
	class TArray<class FName>                          TrackControllerName;                           // 0x0058 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              LookAtActorRadius;                             // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDisableBeyondLimit : 1;                       // 0x0068 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              MaxLookAtTime;                                 // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinLookAtTime;                                 // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxInterestTime;                               // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UClass*>                        ActorClassesToLookAt;                          // 0x0078 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FName>                          TargetBoneNames;                               // 0x0084 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0090 (0x003C) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComp;                              // 0x00CC (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class TArray<class USkelControlLookAt*>            TrackControls;                                 // 0x00D0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FVector                                     RootMeshLocation;                              // 0x00DC (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    RootMeshRotation;                              // 0x00E8 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.HeadTrackingComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm
// 0x0012 (0x003C - 0x004E)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	class FString                                      Description;                                   // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bNeedsSkeleton : 1;                            // 0x0048 (0x0004) [0x0000000000000000] [0x00000001] 
	EAnimationCompressionFormat                        TranslationCompressionFormat;                  // 0x004C (0x0001) [0x0000000000000000]               
	EAnimationCompressionFormat                        RotationCompressionFormat;                     // 0x004D (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm_Automatic
// 0x000A (0x004E - 0x0058)
class UAnimationCompressionAlgorithm_Automatic : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxEndEffectorError;                           // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bTryFixedBitwiseCompression : 1;               // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTryPerTrackBitwiseCompression : 1;            // 0x0054 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bTryLinearKeyRemovalCompression : 1;           // 0x0054 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bTryIntervalKeyRemoval : 1;                    // 0x0054 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bRunCurrentDefaultCompressor : 1;              // 0x0054 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAutoReplaceIfExistingErrorTooGreat : 1;       // 0x0054 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRaiseMaxErrorToExisting : 1;                  // 0x0054 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_Automatic");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly
// 0x0002 (0x004E - 0x0050)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm_LeastDestructive
// 0x0002 (0x004E - 0x0050)
class UAnimationCompressionAlgorithm_LeastDestructive : public UAnimationCompressionAlgorithm
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_LeastDestructive");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey
// 0x000A (0x004E - 0x0058)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	int32_t                                            MinKeys;                                       // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStartAtSecondKey : 1;                         // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys
// 0x001E (0x004E - 0x006C)
class UAnimationCompressionAlgorithm_RemoveLinearKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                    // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxAngleDiff;                                  // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxEffectorDiff;                               // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinEffectorDiff;                               // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EffectorDiffSocket;                            // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ParentKeyScale;                                // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRetarget : 1;                                 // 0x0068 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bActuallyFilterLinearKeys : 1;                 // 0x0068 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm_PerTrackCompression
// 0x0050 (0x006C - 0x00BC)
class UAnimationCompressionAlgorithm_PerTrackCompression : public UAnimationCompressionAlgorithm_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                           // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPosDiffBitwise;                             // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxAngleDiffBitwise;                           // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<EAnimationCompressionFormat>          AllowedRotationFormats;                        // 0x0078 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<EAnimationCompressionFormat>          AllowedTranslationFormats;                     // 0x0084 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bResampleAnimation : 1;                        // 0x0090 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseAdaptiveError : 1;                         // 0x0090 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseOverrideForEndEffectors : 1;               // 0x0090 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseAdaptiveError2 : 1;                        // 0x0090 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	float                                              ResampledFramerate;                            // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MinKeysForResampling;                          // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TrackHeightBias;                               // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ParentingDivisor;                              // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ParentingDivisorExponent;                      // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RotationErrorSourceRatio;                      // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TranslationErrorSourceRatio;                   // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxErrorPerTrackRatio;                         // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PerturbationProbeSize;                         // 0x00B4 (0x0004) [0x0000000000000000]               
	struct FPointer                                    PerReductionCachedData;                        // 0x00B8 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_PerTrackCompression");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys
// 0x000A (0x004E - 0x0058)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                    // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxAngleDiff;                                  // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimationCompressionAlgorithm_RevertToRaw
// 0x0002 (0x004E - 0x0050)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RevertToRaw");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimMetaData
// 0x0000 (0x003C - 0x003C)
class UAnimMetaData : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimMetaData");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimMetaData_SkelControl
// 0x0018 (0x003C - 0x0054)
class UAnimMetaData_SkelControl : public UAnimMetaData
{
public:
	class TArray<class FName>                          SkelControlNameList;                           // 0x003C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bFullControlOverController : 1;                // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class FName                                        SkelControlName;                               // 0x004C (0x0008) [0x0000000020000000]  CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimMetaData_SkelControl");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimMetaData_SkelControlKeyFrame
// 0x000C (0x0054 - 0x0060)
class UAnimMetaData_SkelControlKeyFrame : public UAnimMetaData_SkelControl
{
public:
	class TArray<struct FTimeModifier>                 KeyFrames;                                     // 0x0054 (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimMetaData_SkelControlKeyFrame");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimMetaData_SkelControlScaleKeyFrame
// 0x000C (0x0054 - 0x0060)
class UAnimMetaData_SkelControlScaleKeyFrame : public UAnimMetaData_SkelControl
{
public:
	class TArray<struct FScaleKeyFrame>                ScaleKeys;                                     // 0x0054 (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimMetaData_SkelControlScaleKeyFrame");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify
// 0x0004 (0x003C - 0x0040)
class UAnimNotify : public UObject
{
public:
	struct FColor                                      NotifyColor;                                   // 0x003C (0x0004) [0x0000000000000000] (CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify");
		}

		return uClassPointer;
	};

	bool FindNextNotifyOfClass(class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent& outOutEvent);
};

// Class Engine.AnimNotify_CameraEffect
// 0x0004 (0x0040 - 0x0044)
class UAnimNotify_CameraEffect : public UAnimNotify
{
public:
	class UClass*                                      CameraLensEffect;                              // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_CameraEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_ClothingMaxDistanceScale
// 0x0010 (0x0040 - 0x0050)
class UAnimNotify_ClothingMaxDistanceScale : public UAnimNotify
{
public:
	float                                              StartScale;                                    // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EndScale;                                      // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EMaxDistanceScaleMode                              ScaleMode;                                     // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x004C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_ClothingMaxDistanceScale");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_Footstep
// 0x0004 (0x0040 - 0x0044)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int32_t                                            FootDown;                                      // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_Footstep");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_ForceField
// 0x0018 (0x0040 - 0x0058)
class UAnimNotify_ForceField : public UAnimNotify
{
public:
	class UNxForceFieldComponent*                      ForceFieldComponent;                           // 0x0040 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint32_t                                           bAttach : 1;                                   // 0x0044 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class FName                                        SocketName;                                    // 0x0048 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        BoneName;                                      // 0x0050 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_ForceField");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_Kismet
// 0x0008 (0x0040 - 0x0048)
class UAnimNotify_Kismet : public UAnimNotify
{
public:
	class FName                                        NotifyName;                                    // 0x0040 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_Kismet");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_PlayParticleEffect
// 0x0024 (0x0040 - 0x0064)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                    // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIsExtremeContent : 1;                         // 0x0044 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAttach : 1;                                   // 0x0044 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPreview : 1;                                  // 0x0044 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit | CPF_EditorOnly)
	uint32_t                                           bSkipIfOwnerIsHidden : 1;                      // 0x0044 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	class UParticleSystem*                             PSNonExtremeContentTemplate;                   // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SocketName;                                    // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        BoneName;                                      // 0x0054 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        BoneSocketModuleActorName;                     // 0x005C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_PlayParticleEffect");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_Rumble
// 0x0010 (0x0040 - 0x0050)
class UAnimNotify_Rumble : public UAnimNotify
{
public:
	class UClass*                                      PredefinedWaveForm;                            // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UForceFeedbackWaveform*                      WaveForm;                                      // 0x0044 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	uint32_t                                           bCheckForBasedPlayer : 1;                      // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              EffectRadius;                                  // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_Rumble");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_Script
// 0x0018 (0x0040 - 0x0058)
class UAnimNotify_Script : public UAnimNotify
{
public:
	class FName                                        NotifyName;                                    // 0x0040 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        NotifyTickName;                                // 0x0048 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        NotifyEndName;                                 // 0x0050 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_Script");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_Scripted
// 0x0000 (0x0040 - 0x0040)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_Scripted");
		}

		return uClassPointer;
	};

	void eventNotifyEnd(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
	void eventNotify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};

// Class Engine.AnimNotify_PawnMaterialParam
// 0x000C (0x0040 - 0x004C)
class UAnimNotify_PawnMaterialParam : public UAnimNotify_Scripted
{
public:
	class TArray<struct FScalarParameterInterpStruct>  ScalarParameterInterpArray;                    // 0x0040 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_PawnMaterialParam");
		}

		return uClassPointer;
	};

	void eventNotify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};

// Class Engine.AnimNotify_ViewShake
// 0x0050 (0x0040 - 0x0090)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              Duration;                                      // 0x0040 (0x0004) [0x0000000000020000] (CPF_EditConst)
	struct FVector                                     RotAmplitude;                                  // 0x0044 (0x000C) [0x0000000000020000] (CPF_EditConst)
	struct FVector                                     RotFrequency;                                  // 0x0050 (0x000C) [0x0000000000020000] (CPF_EditConst)
	struct FVector                                     LocAmplitude;                                  // 0x005C (0x000C) [0x0000000000020000] (CPF_EditConst)
	struct FVector                                     LocFrequency;                                  // 0x0068 (0x000C) [0x0000000000020000] (CPF_EditConst)
	float                                              FOVAmplitude;                                  // 0x0074 (0x0004) [0x0000000000020000] (CPF_EditConst)
	float                                              FOVFrequency;                                  // 0x0078 (0x0004) [0x0000000000020000] (CPF_EditConst)
	uint32_t                                           bDoControllerVibration : 1;                    // 0x007C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseBoneLocation : 1;                          // 0x007C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              ShakeRadius;                                   // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        BoneName;                                      // 0x0084 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UCameraShake*                                ShakeParams;                                   // 0x008C (0x0004) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_ViewShake");
		}

		return uClassPointer;
	};

	void eventNotify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};

// Class Engine.AnimNotify_Sound
// 0x001C (0x0040 - 0x005C)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                      // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bFollowActor : 1;                              // 0x0044 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIgnoreIfActorHidden : 1;                      // 0x0044 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class FName                                        BoneName;                                      // 0x0048 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              PercentToPlay;                                 // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VolumeMultiplier;                              // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMultiplier;                               // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_Sound");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_Trails
// 0x0058 (0x0040 - 0x0098)
class UAnimNotify_Trails : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                    // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               SampledSkeletalMesh;                           // 0x0044 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst | CPF_EditorOnly)
	uint32_t                                           bIsExtremeContent : 1;                         // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPreview : 1;                                  // 0x0048 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit | CPF_EditorOnly)
	uint32_t                                           bPreviewForceExplicit : 1;                     // 0x0048 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit | CPF_EditorOnly)
	uint32_t                                           bSkipIfOwnerIsHidden : 1;                      // 0x0048 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bResampleRequired : 1;                         // 0x0048 (0x0004) [0x0000000000000000] [0x00000010] 
	class FName                                        FirstEdgeSocketName;                           // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ControlPointSocketName;                        // 0x0054 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SecondEdgeSocketName;                          // 0x005C (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              LastStartTime;                                 // 0x0064 (0x0004) [0x0000000000000000]               
	float                                              EndTime;                                       // 0x0068 (0x0004) [0x0000000000000000]               
	float                                              SampleTimeStep;                                // 0x006C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	class TArray<struct FTrailSamplePoint>             TrailSampleData;                               // 0x0070 (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated)
	float                                              SamplesPerSecond;                              // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FTrailSample>                  TrailSampledData;                              // 0x0080 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              CurrentTime;                                   // 0x008C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TimeStep;                                      // 0x0090 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UAnimNodeSequence*                           AnimNodeSeq;                                   // 0x0094 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_Trails");
		}

		return uClassPointer;
	};

	int32_t GetNumSteps(int32_t InLastTrailIndex);
};

// Class Engine.AnimObject
// 0x0024 (0x003C - 0x0060)
class UAnimObject : public UObject
{
public:
	int32_t                                            DrawWidth;                                     // 0x003C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            DrawHeight;                                    // 0x0040 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            NodePosX;                                      // 0x0044 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            NodePosY;                                      // 0x0048 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            OutDrawY;                                      // 0x004C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class FString                                      CategoryDesc;                                  // 0x0050 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class USkeletalMeshComponent*                      SkelComponent;                                 // 0x005C (0x0004) [0x000000000428200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimObject");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNode
// 0x00B0 (0x0060 - 0x0110)
class UAnimNode : public UAnimObject
{
public:
	uint32_t                                           bRelevant : 1;                                 // 0x0060 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           bJustBecameRelevant : 1;                       // 0x0060 (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bTickDuringPausedAnims : 1;                    // 0x0060 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bEditorOnly : 1;                               // 0x0060 (0x0004) [0x0000000000000002] [0x00000008] (CPF_Const)
	uint32_t                                           bDisableCaching : 1;                           // 0x0060 (0x0004) [0x0000000000002002] [0x00000010] (CPF_Const | CPF_Transient)
	uint32_t                                           bCallScriptEventOnInit : 1;                    // 0x0060 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bCallScriptEventOnBecomeRelevant : 1;          // 0x0060 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bCallScriptEventOnCeaseRelevant : 1;           // 0x0060 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	int32_t                                            NodeTickTag;                                   // 0x0064 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            NodeInitTag;                                   // 0x0068 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            NodeEndEventTick;                              // 0x006C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            TickArrayIndex;                                // 0x0070 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            NodeCachedAtomsTag;                            // 0x0074 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              NodeTotalWeight;                               // 0x0078 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class UAnimNodeBlendBase*>            ParentNodes;                                   // 0x007C (0x000C) [0x0000000000600000] (CPF_NeedCtorLink)
	class FName                                        NodeName;                                      // 0x0088 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FBoneAtom>                     CachedBoneAtoms;                               // 0x0090 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint8_t                                            CachedNumDesiredBones;                         // 0x009C (0x0001) [0x0000000000002000] (CPF_Transient)
	struct FBoneAtom                                   CachedRootMotionDelta;                         // 0x00A0 (0x0050) [0x0000000000002000] (CPF_Transient)
	int32_t                                            bCachedHasRootMotion;                          // 0x00F0 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FCurveKey>                     CachedCurveKeys;                               // 0x00F4 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            SearchTag;                                     // 0x0100 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FCurveKey>                     LastUpdatedAnimMorphKeys;                      // 0x0104 (0x000C) [0x0000000000422001] (CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNode");
		}

		return uClassPointer;
	};

	void ReplayAnim();
	void StopAnim();
	void PlayAnim(bool optionalBLoop, float optionalRate, float optionalStartTime);
	class UAnimNode* FindAnimNode(const class FName& InNodeName);
	void eventOnCeaseRelevant();
	void eventOnBecomeRelevant();
	void eventOnInit();
};

// Class Engine.AnimNodeBlendBase
// 0x0011 (0x0110 - 0x0121)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	class TArray<struct FAnimBlendChild>               Children;                                      // 0x0110 (0x000C) [0x0000000004400048] (CPF_ExportObject | CPF_EditFixedSize | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bFixNumChildren : 1;                           // 0x011C (0x0004) [0x0000000000000000] [0x00000001] 
	EAlphaBlendType                                    BlendType;                                     // 0x0120 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendBase");
		}

		return uClassPointer;
	};

	void ReplayAnim();
	void StopAnim();
	void PlayAnim(bool optionalBLoop, float optionalRate, float optionalStartTime);
};

// Class Engine.AnimNode_MultiBlendPerBone
// 0x0014 (0x0121 - 0x0135)
class UAnimNode_MultiBlendPerBone : public UAnimNodeBlendBase
{
public:
	class APawn*                                       PawnOwner;                                     // 0x0124 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class TArray<struct FPerBoneMaskInfo>              MaskList;                                      // 0x0128 (0x000C) [0x0000000004400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink | CPF_EditInline)
	EBlendType                                         RotationBlendType;                             // 0x0134 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNode_MultiBlendPerBone");
		}

		return uClassPointer;
	};

	void SetMaskWeight(int32_t MaskIndex, float DesiredWeight, float BlendTime);
};

// Class Engine.AnimNodeAimOffset
// 0x004B (0x0121 - 0x016C)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	struct FVector2D                                   Aim;                                           // 0x0124 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   AngleOffset;                                   // 0x012C (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bForceAimDir : 1;                              // 0x0134 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bBakeFromAnimations : 1;                       // 0x0134 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPassThroughWhenNotRendered : 1;               // 0x0134 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSynchronizeNodesInEditor : 1;                 // 0x0134 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	int32_t                                            PassThroughAtOrAboveLOD;                       // 0x0138 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EAnimAimDir                                        ForcedAimDir;                                  // 0x013C (0x0001) [0x0000000000000001] (CPF_Edit)    
	class TArray<uint8_t>                              RequiredBones;                                 // 0x0140 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<uint8_t>                              AimCpntIndexLUT;                               // 0x014C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UAnimNodeAimOffset*                          TemplateNode;                                  // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FAimOffsetProfile>             Profiles;                                      // 0x015C (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)
	int32_t                                            CurrentProfileIndex;                           // 0x0168 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeAimOffset");
		}

		return uClassPointer;
	};

	void SetActiveProfileByIndex(int32_t ProfileIndex);
	void SetActiveProfileByName(const class FName& ProfileName);
};

// Class Engine.AnimNodeBlend
// 0x0013 (0x0121 - 0x0134)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	float                                              Child2Weight;                                  // 0x0124 (0x0004) [0x0000000000000000]               
	float                                              Child2WeightTarget;                            // 0x0128 (0x0004) [0x0000000000000000]               
	float                                              BlendTimeToGo;                                 // 0x012C (0x0004) [0x0000000000000000]               
	uint32_t                                           bSkipBlendWhenNotRendered : 1;                 // 0x0130 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlend");
		}

		return uClassPointer;
	};

	void SetBlendTarget(float BlendTarget, float BlendTime);
};

// Class Engine.AnimNodeAdditiveBlending
// 0x0004 (0x0134 - 0x0138)
class UAnimNodeAdditiveBlending : public UAnimNodeBlend
{
public:
	uint32_t                                           bPassThroughWhenNotRendered : 1;               // 0x0134 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeAdditiveBlending");
		}

		return uClassPointer;
	};

	void SetBlendTarget(float BlendTarget, float BlendTime);
};

// Class Engine.AnimNodeBlendPerBone
// 0x0028 (0x0134 - 0x015C)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	uint32_t                                           bForceLocalSpaceBlend : 1;                     // 0x0134 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class TArray<class FName>                          BranchStartBoneName;                           // 0x0138 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<float>                                Child2PerBoneWeight;                           // 0x0144 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<uint8_t>                              LocalToCompReqBones;                           // 0x0150 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendPerBone");
		}

		return uClassPointer;
	};

	void SetBlendTarget(float BlendTarget, float BlendTime);
};

// Class Engine.AnimNodeCrossfader
// 0x0010 (0x0134 - 0x0144)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	class FName                                        DefaultAnimSeqName;                            // 0x0134 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDontBlendOutOneShot : 1;                      // 0x013C (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	float                                              PendingBlendOutTimeOneShot;                    // 0x0140 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeCrossfader");
		}

		return uClassPointer;
	};

	class UAnimNodeSequence* GetActiveChild();
	class FName GetAnimName();
	void BlendToLoopingAnim(const class FName& AnimSeqName, float optionalBlendInTime, float optionalRate);
	void PlayOneShotAnim(const class FName& AnimSeqName, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBDontBlendOut, float optionalRate);
};

// Class Engine.AnimNodePlayCustomAnim
// 0x0008 (0x0134 - 0x013C)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	uint32_t                                           bIsPlayingCustomAnim : 1;                      // 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CustomPendingBlendOutTime;                     // 0x0138 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodePlayCustomAnim");
		}

		return uClassPointer;
	};

	void SetRootBoneAxisOption(ERootBoneAxis optionalAxisX, ERootBoneAxis optionalAxisY, ERootBoneAxis optionalAxisZ);
	class UAnimNodeSequence* GetCustomAnimNodeSeq();
	void SetActorAnimEndNotification(bool bNewStatus);
	void SetCustomAnim(const class FName& AnimName);
	void StopCustomAnim(float BlendOutTime);
	void PlayCustomAnimByDuration(const class FName& AnimName, float Duration, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBLooping, bool optionalBOverride);
	float PlayCustomAnim(const class FName& AnimName, float Rate, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBLooping, bool optionalBOverride);
};

// Class Engine.AnimNodeBlendDirectional
// 0x001F (0x0121 - 0x0140)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                           // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DirAngle;                                      // 0x0128 (0x0004) [0x0000000000000000]               
	int32_t                                            SingleAnimAtOrAboveLOD;                        // 0x012C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    RotationOffset;                                // 0x0130 (0x000C) [0x0000000000000000]               
	uint32_t                                           bUseAcceleration : 1;                          // 0x013C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendDirectional");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeBlendList
// 0x0023 (0x0121 - 0x0144)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	class TArray<float>                                TargetWeight;                                  // 0x0124 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              BlendTimeToGo;                                 // 0x0130 (0x0004) [0x0000000000000000]               
	int32_t                                            ActiveChildIndex;                              // 0x0134 (0x0004) [0x0000000000000000]               
	uint32_t                                           bPlayActiveChild : 1;                          // 0x0138 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForceChildFullWeightWhenBecomingRelevant : 1; // 0x0138 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSkipBlendWhenNotRendered : 1;                 // 0x0138 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              SliderPosition;                                // 0x013C (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            EditorActiveChildIndex;                        // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendList");
		}

		return uClassPointer;
	};

	void SetActiveChild(int32_t ChildIndex, float BlendTime);
};

// Class Engine.AnimNodeBlendByBase
// 0x0018 (0x0144 - 0x015C)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	EBaseBlendType                                     Type;                                          // 0x0144 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ActorTag;                                      // 0x0148 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      ActorClass;                                    // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendTime;                                     // 0x0154 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      CachedBase;                                    // 0x0158 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendByBase");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeBlendByPhysics
// 0x0000 (0x0144 - 0x0144)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendByPhysics");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeBlendByPosture
// 0x0000 (0x0144 - 0x0144)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendByPosture");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeBlendByProperty
// 0x0038 (0x0144 - 0x017C)
class UAnimNodeBlendByProperty : public UAnimNodeBlendList
{
public:
	class FName                                        PropertyName;                                  // 0x0144 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseOwnersBase : 1;                            // 0x014C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForceUpdate : 1;                              // 0x014C (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bUseSpecificBlendTimes : 1;                    // 0x014C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSynchronizeNodesInEditor : 1;                 // 0x014C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	class FName                                        CachedPropertyName;                            // 0x0150 (0x0008) [0x0000000000002000] (CPF_Transient)
	struct FPointer                                    CachedFloatProperty;                           // 0x0158 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    CachedBoolProperty;                            // 0x015C (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    CachedByteProperty;                            // 0x0160 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class AActor*                                      CachedOwner;                                   // 0x0164 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              BlendTime;                                     // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatPropMin;                                  // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatPropMax;                                  // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendToChild1Time;                             // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendToChild2Time;                             // 0x0178 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendByProperty");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeBlendBySpeed
// 0x0030 (0x0144 - 0x0174)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                         // 0x0144 (0x0004) [0x0000000000000000]               
	int32_t                                            LastChannel;                                   // 0x0148 (0x0004) [0x0000000000000000]               
	float                                              BlendUpTime;                                   // 0x014C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendDownTime;                                 // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendDownPerc;                                 // 0x0154 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<float>                                Constraints;                                   // 0x0158 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bUseAcceleration : 1;                          // 0x0164 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              BlendUpDelay;                                  // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendDownDelay;                                // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendDelayRemaining;                           // 0x0170 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendBySpeed");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeRandom
// 0x0018 (0x0144 - 0x015C)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	class TArray<struct FRandomAnimInfo>               RandomInfo;                                    // 0x0144 (0x000C) [0x0000000004400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink | CPF_EditInline)
	class UAnimNodeSequence*                           PlayingSeqNode;                                // 0x0150 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            PendingChildIndex;                             // 0x0154 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bPickedPendingChildIndex : 1;                  // 0x0158 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeRandom");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeBlendMultiBone
// 0x001B (0x0121 - 0x013C)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	class TArray<struct FChildBoneBlendInfo>           BlendTargetList;                               // 0x0124 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<uint8_t>                              SourceRequiredBones;                           // 0x0130 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendMultiBone");
		}

		return uClassPointer;
	};

	void SetTargetStartBone(int32_t TargetIdx, const class FName& StartBoneName, float optionalPerBoneIncrease);
};

// Class Engine.AnimNodeMirror
// 0x0007 (0x0121 - 0x0128)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bEnableMirroring : 1;                          // 0x0124 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeMirror");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeScalePlayRate
// 0x0007 (0x0121 - 0x0128)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	float                                              ScaleByValue;                                  // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeScalePlayRate");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeScaleRateBySpeed
// 0x0004 (0x0128 - 0x012C)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                     // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeScaleRateBySpeed");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeSlot
// 0x0023 (0x0121 - 0x0144)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	uint32_t                                           bIsPlayingCustomAnim : 1;                      // 0x0124 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bEarlyAnimEndNotify : 1;                       // 0x0124 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSkipBlendWhenNotRendered : 1;                 // 0x0124 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAdditiveAnimationsOverrideSource : 1;         // 0x0124 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bIsBeingUsedByInterpGroup : 1;                 // 0x0124 (0x0004) [0x0000000000002002] [0x00000010] (CPF_Const | CPF_Transient)
	uint32_t                                           bDontAddToAlwaysTickArray : 1;                 // 0x0124 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	float                                              PendingBlendOutTime;                           // 0x0128 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            CustomChildIndex;                              // 0x012C (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            TargetChildIndex;                              // 0x0130 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<float>                                TargetWeight;                                  // 0x0134 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              BlendTimeToGo;                                 // 0x0140 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeSlot");
		}

		return uClassPointer;
	};

	void TickChildWeights(float DeltaSeconds);
	void SetRootBoneRotationOption(ERootRotationOption optionalAxisX, ERootRotationOption optionalAxisY, ERootRotationOption optionalAxisZ);
	void SetRootBoneAxisOption(ERootBoneAxis optionalAxisX, ERootBoneAxis optionalAxisY, ERootBoneAxis optionalAxisZ);
	class UAnimNodeSequence* GetCustomAnimNodeSeq();
	void SetActorAnimEndNotification(bool bNewStatus);
	void SetCustomAnim(const class FName& AnimName);
	void SetAllowPauseAnims(bool bSet);
	void StopCustomAnim(float BlendOutTime);
	class FName GetPlayedAnimation();
	bool PlayCustomAnimByDuration(const class FName& AnimName, float Duration, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBLooping, bool optionalBOverride);
	float PlayCustomAnim(const class FName& AnimName, float Rate, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBLooping, bool optionalBOverride, float optionalStartTime, float optionalEndTime);
};

// Class Engine.AnimNodeSynch
// 0x000F (0x0121 - 0x0130)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	class TArray<struct FSynchGroup>                   Groups;                                        // 0x0124 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeSynch");
		}

		return uClassPointer;
	};

	void SetGroupRateScale(const class FName& GroupName, float NewRateScale);
	float GetRelativePosition(const class FName& GroupName);
	void ForceRelativePosition(const class FName& GroupName, float RelativePosition);
	class UAnimNodeSequence* GetMasterNodeOfGroup(const class FName& GroupName);
	void RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode, const class FName& GroupName);
	void AddNodeToGroup(class UAnimNodeSequence* SeqNode, const class FName& GroupName);
};

// Class Engine.AnimTree
// 0x0107 (0x0121 - 0x0228)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	class UAnimTree*                                   AnimTreeTemplate;                              // 0x0124 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnablePooling : 1;                            // 0x0128 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseSavedPose : 1;                             // 0x0128 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bBeingEdited : 1;                              // 0x0128 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bParentNodeArrayBuilt : 1;                     // 0x0128 (0x0004) [0x0000000000200000] [0x00000008] 
	uint32_t                                           bRebuildAnimTickArray : 1;                     // 0x0128 (0x0004) [0x0000000000000000] [0x00000010] 
	class TArray<struct FAnimGroup>                    AnimGroups;                                    // 0x012C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FName>                          PrioritizedSkelBranches;                       // 0x0138 (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<class FName>                          ComposePrePassBoneNames;                       // 0x0144 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FName>                          ComposePostPassBoneNames;                      // 0x0150 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UMorphNodeBase*>                RootMorphNodes;                                // 0x015C (0x000C) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FSkelControlListHead>          SkelControlLists;                              // 0x0168 (0x000C) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FBoneAtom>                     SavedPose;                                     // 0x0174 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            MorphConnDrawY;                                // 0x0180 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	float                                              PreviewPlayRate;                               // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class USkeletalMesh*                               PreviewSkelMesh;                               // 0x0188 (0x0004) [0x0000000020000000]  CPF_Deprecated | CPF_EditorOnly)
	class USkeletalMesh*                               SocketSkelMesh;                                // 0x018C (0x0004) [0x0000000020000000]  CPF_Deprecated | CPF_EditorOnly)
	class UStaticMesh*                                 SocketStaticMesh;                              // 0x0190 (0x0004) [0x0000000020000000]  CPF_Deprecated | CPF_EditorOnly)
	class FName                                        SocketName;                                    // 0x0194 (0x0008) [0x0000000020000000]  CPF_Deprecated | CPF_EditorOnly)
	class TArray<class UAnimSet*>                      PreviewAnimSets;                               // 0x019C (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated | CPF_EditorOnly)
	class TArray<class UMorphTargetSet*>               PreviewMorphSets;                              // 0x01A8 (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated | CPF_EditorOnly)
	class TArray<struct FPreviewSkelMeshStruct>        PreviewMeshList;                               // 0x01B4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            PreviewMeshIndex;                              // 0x01C0 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<struct FPreviewSocketStruct>          PreviewSocketList;                             // 0x01C4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            PreviewSocketIndex;                            // 0x01D0 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<struct FPreviewAnimSetsStruct>        PreviewAnimSetList;                            // 0x01D4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            PreviewAnimSetListIndex;                       // 0x01E0 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            PreviewAnimSetIndex;                           // 0x01E4 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	struct FVector                                     PreviewCamPos;                                 // 0x01E8 (0x000C) [0x0000000000000000] (CPF_EditorOnly)
	struct FRotator                                    PreviewCamRot;                                 // 0x01F4 (0x000C) [0x0000000000000000] (CPF_EditorOnly)
	struct FVector                                     PreviewFloorPos;                               // 0x0200 (0x000C) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            PreviewFloorYaw;                               // 0x020C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<class UAnimNodeFrame*>                AnimNodeFrames;                                // 0x0210 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<class UAnimNode*>                     AnimTickArray;                                 // 0x021C (0x000C) [0x0000000000600000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimTree");
		}

		return uClassPointer;
	};

	int32_t GetGroupIndex(const class FName& GroupName);
	float GetGroupRateScale(const class FName& GroupName);
	void SetGroupRateScale(const class FName& GroupName, float NewRateScale);
	float GetGroupRelativePosition(const class FName& GroupName);
	void ForceGroupRelativePosition(const class FName& GroupName, float RelativePosition);
	class UAnimNodeSequence* GetGroupNotifyMaster(const class FName& GroupName);
	class UAnimNodeSequence* GetGroupSynchMaster(const class FName& GroupName);
	bool SetAnimGroupForNode(class UAnimNodeSequence* SeqNode, const class FName& GroupName, bool optionalBCreateIfNotFound);
	void SetUseSavedPose(bool bUseSaved);
	class UMorphNodeBase* FindMorphNode(const class FName& InNodeName);
	class USkelControlBase* FindSkelControl(const class FName& InControlName);
};

// Class Engine.AnimNodeSequence
// 0x0060 (0x0110 - 0x0170)
class UAnimNodeSequence : public UAnimNode
{
public:
	class FName                                        AnimSeqName;                                   // 0x0110 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Rate;                                          // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPlaying : 1;                                  // 0x011C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLooping : 1;                                  // 0x011C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCauseActorAnimEnd : 1;                        // 0x011C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bCauseActorAnimPlay : 1;                       // 0x011C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bZeroRootRotation : 1;                         // 0x011C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bZeroRootTranslation : 1;                      // 0x011C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bDisableWarningWhenAnimNotFound : 1;           // 0x011C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bNoNotifies : 1;                               // 0x011C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bForceRefposeWhenNotPlaying : 1;               // 0x011C (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bIsIssuingNotifies : 1;                        // 0x011C (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bForceAlwaysSlave : 1;                         // 0x011C (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bSynchronize : 1;                              // 0x011C (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bReverseSync : 1;                              // 0x011C (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bShowTimeLineSlider : 1;                       // 0x011C (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bLoopCameraAnim : 1;                           // 0x011C (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bRandomizeCameraAnimLoopStartTime : 1;         // 0x011C (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bEditorOnlyAddRefPoseToAdditiveAnimation : 1;  // 0x011C (0x0004) [0x0000000000000002] [0x00010000] (CPF_Const)
	uint32_t                                           bCheckForFinishAnimEarly : 1;                  // 0x011C (0x0004) [0x0000000000002000] [0x00020000] (CPF_Transient)
	uint32_t                                           bBlendingOut : 1;                              // 0x011C (0x0004) [0x0000000000002000] [0x00040000] (CPF_Transient)
	uint32_t                                           bSkipSkelControlTick : 1;                      // 0x011C (0x0004) [0x0000000000002000] [0x00080000] (CPF_Transient)
	float                                              CurrentTime;                                   // 0x0120 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              PreviousTime;                                  // 0x0124 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              EndTime;                                       // 0x0128 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UAnimSequence*                               AnimSeq;                                       // 0x012C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            AnimLinkupIndex;                               // 0x0130 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              NotifyWeightThreshold;                         // 0x0134 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SynchGroupName;                                // 0x0138 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SynchPosOffset;                                // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UCameraAnim*                                 CameraAnim;                                    // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                      // 0x0148 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CameraAnimScale;                               // 0x014C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraAnimPlayRate;                            // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraAnimBlendInTime;                         // 0x0154 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraAnimBlendOutTime;                        // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ERootBoneAxis                                      RootBoneOption[3];                             // 0x015C (0x0003) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ERootRotationOption                                RootRotationOption[3];                         // 0x015F (0x0003) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class USkelControlBase*>              MetaDataSkelControlList;                       // 0x0164 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeSequence");
		}

		return uClassPointer;
	};

	void SetRootBoneRotationOption(ERootRotationOption optionalAxisX, ERootRotationOption optionalAxisY, ERootRotationOption optionalAxisZ);
	void SetRootBoneAxisOption(ERootBoneAxis optionalAxisX, ERootBoneAxis optionalAxisY, ERootBoneAxis optionalAxisZ);
	float GetTimeLeft();
	float GetAnimPlaybackLength();
	float GetGlobalPlayRate();
	float GetGroupRelativePosition();
	float FindGroupPosition(float GroupRelativePosition);
	float FindGroupRelativePosition(float GroupRelativePosition);
	float GetNormalizedPosition();
	void SetPosition(float NewTime, bool bFireNotifies);
	void ReplayAnim();
	void StopAnim();
	void PlayAnim(bool optionalBLoop, float optionalInRate, float optionalStartTime);
	void SetAnim(const class FName& Sequence);
};

// Class Engine.AnimNodeSequenceBlendBase
// 0x000C (0x0170 - 0x017C)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	class TArray<struct FAnimBlendInfo>                Anims;                                         // 0x0170 (0x000C) [0x0000000004400049] (CPF_Edit | CPF_ExportObject | CPF_EditFixedSize | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeSequenceBlendBase");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNodeSequenceBlendByAim
// 0x0070 (0x017C - 0x01EC)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                           // 0x017C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   PreviousAim;                                   // 0x0184 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector2D                                   HorizontalRange;                               // 0x018C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   VerticalRange;                                 // 0x0194 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   AngleOffset;                                   // 0x019C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_LU;                                   // 0x01A4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_LC;                                   // 0x01AC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_LD;                                   // 0x01B4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_CU;                                   // 0x01BC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_CC;                                   // 0x01C4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_CD;                                   // 0x01CC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_RU;                                   // 0x01D4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_RC;                                   // 0x01DC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AnimName_RD;                                   // 0x01E4 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeSequenceBlendByAim");
		}

		return uClassPointer;
	};

	void CheckAnimsUpToDate();
};

// Class Engine.AnimNodeFrame
// 0x002C (0x0060 - 0x008C)
class UAnimNodeFrame : public UAnimObject
{
public:
	int32_t                                            SizeX;                                         // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SizeY;                                         // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            BorderWidth;                                   // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDrawBox : 1;                                  // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFilled : 1;                                   // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bTileFill : 1;                                 // 0x006C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FColor                                      BorderColor;                                   // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      FillColor;                                     // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  FillTexture;                                   // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class UMaterial*                                   FillMaterial;                                  // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class FString                                      ObjComment;                                    // 0x0080 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNodeFrame");
		}

		return uClassPointer;
	};

};

// Class Engine.MorphNodeBase
// 0x000C (0x0060 - 0x006C)
class UMorphNodeBase : public UAnimObject
{
public:
	class FName                                        NodeName;                                      // 0x0060 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDrawSlider : 1;                               // 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphNodeBase");
		}

		return uClassPointer;
	};

};

// Class Engine.MorphNodeMultiPose
// 0x0024 (0x006C - 0x0090)
class UMorphNodeMultiPose : public UMorphNodeBase
{
public:
	class TArray<class UMorphTarget*>                  Targets;                                       // 0x006C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class FName>                          MorphNames;                                    // 0x0078 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<float>                                Weights;                                       // 0x0084 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphNodeMultiPose");
		}

		return uClassPointer;
	};

	bool UpdateMorphTarget(class UMorphTarget* Target, float InWeight);
	void RemoveMorphTarget(const class FName& MorphTargetName);
	bool AddMorphTarget(const class FName& MorphTargetName, float optionalInWeight);
};

// Class Engine.MorphNodePose
// 0x0010 (0x006C - 0x007C)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                        // 0x006C (0x0004) [0x0000000000002000] (CPF_Transient)
	class FName                                        MorphName;                                     // 0x0070 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              Weight;                                        // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphNodePose");
		}

		return uClassPointer;
	};

	void SetMorphTarget(const class FName& MorphTargetName);
};

// Class Engine.MorphNodeWeightBase
// 0x000C (0x006C - 0x0078)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	class TArray<struct FMorphNodeConn>                NodeConns;                                     // 0x006C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphNodeWeightBase");
		}

		return uClassPointer;
	};

};

// Class Engine.MorphNodeWeight
// 0x0004 (0x0078 - 0x007C)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                    // 0x0078 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphNodeWeight");
		}

		return uClassPointer;
	};

	void SetNodeWeight(float NewWeight);
};

// Class Engine.MorphNodeWeightByBoneAngle
// 0x003C (0x0078 - 0x00B4)
class UMorphNodeWeightByBoneAngle : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                         // 0x0078 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              NodeWeight;                                    // 0x007C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class FName                                        BaseBoneName;                                  // 0x0080 (0x0008) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              BaseBoneAxis;                                  // 0x0088 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              AngleBoneAxis;                                 // 0x0089 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertBaseBoneAxis : 1;                       // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInvertAngleBoneAxis : 1;                      // 0x008C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bControlMaterialParameter : 1;                 // 0x008C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class FName                                        AngleBoneName;                                 // 0x0090 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaterialSlotId;                                // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ScalarParameterName;                           // 0x009C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                      // 0x00A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FBoneAngleMorph>               WeightArray;                                   // 0x00A8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphNodeWeightByBoneAngle");
		}

		return uClassPointer;
	};

};

// Class Engine.MorphNodeWeightByBoneRotation
// 0x0034 (0x0078 - 0x00AC)
class UMorphNodeWeightByBoneRotation : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                         // 0x0078 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              NodeWeight;                                    // 0x007C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class FName                                        BoneName;                                      // 0x0080 (0x0008) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              BoneAxis;                                      // 0x0088 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertBoneAxis : 1;                           // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bControlMaterialParameter : 1;                 // 0x008C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class TArray<struct FBoneAngleMorph>               WeightArray;                                   // 0x0090 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            MaterialSlotId;                                // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ScalarParameterName;                           // 0x00A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                      // 0x00A8 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphNodeWeightByBoneRotation");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControlBase
// 0x005C (0x0060 - 0x00BC)
class USkelControlBase : public UAnimObject
{
public:
	class FName                                        ControlName;                                   // 0x0060 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              ControlStrength;                               // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendInTime;                                   // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutTime;                                  // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EAlphaBlendType                                    BlendType;                                     // 0x0074 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPostPhysicsController : 1;                    // 0x0078 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSetStrengthFromAnimNode : 1;                  // 0x0078 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInitializedCachedNodeList : 1;                // 0x0078 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bControlledByAnimMetada : 1;                   // 0x0078 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bInvertMetadataWeight : 1;                     // 0x0078 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bPropagateSetActive : 1;                       // 0x0078 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bIgnoreWhenNotRendered : 1;                    // 0x0078 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bShouldTickInScript : 1;                       // 0x0078 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bShouldTickOwner : 1;                          // 0x0078 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bEnableEaseInOut : 1;                          // 0x0078 (0x0004) [0x0000000020020001] [0x00000200] (CPF_Edit | CPF_EditConst | CPF_Deprecated)
	float                                              StrengthTarget;                                // 0x007C (0x0004) [0x0000000000000000]               
	float                                              BlendTimeToGo;                                 // 0x0080 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class FName>                          StrengthAnimNodeNameList;                      // 0x0084 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UAnimNode*>                     CachedNodeList;                                // 0x0090 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              AnimMetadataWeight;                            // 0x009C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            AnimMetaDataUpdateTag;                         // 0x00A0 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              BoneScale;                                     // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ControlTickTag;                                // 0x00A8 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            IgnoreAtOrAboveLOD;                            // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USkelControlBase*                            NextControl;                                   // 0x00B0 (0x0004) [0x0000000000000000]               
	int32_t                                            ControlPosX;                                   // 0x00B4 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	int32_t                                            ControlPosY;                                   // 0x00B8 (0x0004) [0x0000000020000000]  CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlBase");
		}

		return uClassPointer;
	};

	float GetControlMetadataWeight();
	void eventTickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp);
	void SetSkelControlStrength(float NewStrength, float InBlendTime);
	void SetSkelControlActive(bool bInActive);
};

// Class Engine.SkelControl_CCD_IK
// 0x0048 (0x00BC - 0x0104)
class USkelControl_CCD_IK : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                              // 0x00BC (0x000C) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  EffectorLocationSpace;                         // 0x00C8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        EffectorSpaceBoneName;                         // 0x00CC (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     EffectorTranslationFromBone;                   // 0x00D4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NumBones;                                      // 0x00E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxPerBoneIterations;                          // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            IterationsCount;                               // 0x00E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              Precision;                                     // 0x00EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStartFromTail : 1;                            // 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoTurnOptimization : 1;                       // 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class TArray<float>                                AngleConstraint;                               // 0x00F4 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              MaxAngleSteps;                                 // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControl_CCD_IK");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControl_Multiply
// 0x0004 (0x00BC - 0x00C0)
class USkelControl_Multiply : public USkelControlBase
{
public:
	float                                              Multiplier;                                    // 0x00BC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControl_Multiply");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControl_Scale3D
// 0x000C (0x00BC - 0x00C8)
class USkelControl_Scale3D : public USkelControlBase
{
public:
	struct FVector                                     Scale;                                         // 0x00BC (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControl_Scale3D");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControl_TwistBone
// 0x000C (0x00BC - 0x00C8)
class USkelControl_TwistBone : public USkelControlBase
{
public:
	class FName                                        SourceBoneName;                                // 0x00BC (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              TwistAngleScale;                               // 0x00C4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControl_TwistBone");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControlLimb
// 0x0058 (0x00BC - 0x0114)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                              // 0x00BC (0x000C) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  EffectorLocationSpace;                         // 0x00C8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  JointTargetLocationSpace;                      // 0x00C9 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  JointOffsetSpace;                              // 0x00CA (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              BoneAxis;                                      // 0x00CB (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              JointAxis;                                     // 0x00CC (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        EffectorSpaceBoneName;                         // 0x00D0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     JointTargetLocation;                           // 0x00D8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class FName                                        JointTargetSpaceBoneName;                      // 0x00E4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     JointOffset;                                   // 0x00EC (0x000C) [0x0000000000000001] (CPF_Edit)    
	class FName                                        JointOffsetBoneName;                           // 0x00F8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertBoneAxis : 1;                           // 0x0100 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInvertJointAxis : 1;                          // 0x0100 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRotateJoint : 1;                              // 0x0100 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bMaintainEffectorRelRot : 1;                   // 0x0100 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bTakeRotationFromEffectorSpace : 1;            // 0x0100 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAllowStretching : 1;                          // 0x0100 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	struct FVector2D                                   StretchLimits;                                 // 0x0104 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        StretchRollBoneName;                           // 0x010C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlLimb");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControlFootPlacement
// 0x0024 (0x0114 - 0x0138)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                    // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              FootUpAxis;                                    // 0x0118 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    FootRotOffset;                                 // 0x011C (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertFootUpAxis : 1;                         // 0x0128 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOrientFootToGround : 1;                       // 0x0128 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bOnlyEnableForUpAdjustment : 1;                // 0x0128 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              MaxUpAdjustment;                               // 0x012C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDownAdjustment;                             // 0x0130 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxFootOrientAdjust;                           // 0x0134 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlFootPlacement");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControlLookAt
// 0x009C (0x00BC - 0x0158)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                // 0x00BC (0x000C) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  TargetLocationSpace;                           // 0x00C8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              LookAtAxis;                                    // 0x00C9 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              UpAxis;                                        // 0x00CA (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  AllowRotationSpace;                            // 0x00CB (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        TargetSpaceBoneName;                           // 0x00CC (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertLookAtAxis : 1;                         // 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDefineUpAxis : 1;                             // 0x00D4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInvertUpAxis : 1;                             // 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bEnableLimit : 1;                              // 0x00D4 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bLimitBasedOnRefPose : 1;                      // 0x00D4 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bDisableBeyondLimit : 1;                       // 0x00D4 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bNotifyBeyondLimit : 1;                        // 0x00D4 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bShowLimit : 1;                                // 0x00D4 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bAllowRotationX : 1;                           // 0x00D4 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bAllowRotationY : 1;                           // 0x00D4 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bAllowRotationZ : 1;                           // 0x00D4 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	float                                              TargetLocationInterpSpeed;                     // 0x00D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     DesiredTargetLocation;                         // 0x00DC (0x000C) [0x0000000000000000]               
	struct FVector                                     ActorSpaceLookAtTarget;                        // 0x00E8 (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              MaxAngle;                                      // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OuterMaxAngle;                                 // 0x00F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DeadZoneAngle;                                 // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   RotationAngleRangeX;                           // 0x0100 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   RotationAngleRangeY;                           // 0x0108 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   RotationAngleRangeZ;                           // 0x0110 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        AllowRotationOtherBoneName;                    // 0x0118 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              LookAtAlpha;                                   // 0x0120 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              LookAtAlphaTarget;                             // 0x0124 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              LookAtAlphaBlendTimeToGo;                      // 0x0128 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector                                     LimitLookDir;                                  // 0x012C (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector                                     BaseLookDir;                                   // 0x0138 (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector                                     BaseBonePos;                                   // 0x0144 (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              LastCalcTime;                                  // 0x0150 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            ControlBoneIndex;                              // 0x0154 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlLookAt");
		}

		return uClassPointer;
	};

	bool CanLookAtPoint(const struct FVector& PointLoc, bool optionalBDrawDebugInfo, bool optionalBDebugUsePersistentLines, bool optionalBDebugFlushLinesFirst);
	void SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime);
	void InterpolateTargetLocation(float DeltaTime);
	void SetTargetLocation(const struct FVector& NewTargetLocation);
};

// Class Engine.SkelControlSingleBone
// 0x0030 (0x00BC - 0x00EC)
class USkelControlSingleBone : public USkelControlBase
{
public:
	uint32_t                                           bApplyTranslation : 1;                         // 0x00BC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bApplyRotation : 1;                            // 0x00BC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAddTranslation : 1;                           // 0x00BC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAddRotation : 1;                              // 0x00BC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bRemoveMeshRotation : 1;                       // 0x00BC (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	struct FVector                                     BoneTranslation;                               // 0x00C0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  BoneTranslationSpace;                          // 0x00CC (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBoneControlSpace                                  BoneRotationSpace;                             // 0x00CD (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        TranslationSpaceBoneName;                      // 0x00D0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    BoneRotation;                                  // 0x00D8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class FName                                        RotationSpaceBoneName;                         // 0x00E4 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlSingleBone");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControlHandlebars
// 0x0014 (0x00EC - 0x0100)
class USkelControlHandlebars : public USkelControlSingleBone
{
public:
	EAxis                                              WheelRollAxis;                                 // 0x00EC (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              HandlebarRotateAxis;                           // 0x00ED (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        WheelBoneName;                                 // 0x00F0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertRotation : 1;                           // 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            SteerWheelBoneIndex;                           // 0x00FC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlHandlebars");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControlWheel
// 0x0018 (0x00EC - 0x0104)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                             // 0x00EC (0x0004) [0x0000000000002001] (CPF_Edit | CPF_Transient)
	float                                              WheelMaxRenderDisplacement;                    // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelRoll;                                     // 0x00F4 (0x0004) [0x0000000000002001] (CPF_Edit | CPF_Transient)
	EAxis                                              WheelRollAxis;                                 // 0x00F8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              WheelSteeringAxis;                             // 0x00F9 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelSteering;                                 // 0x00FC (0x0004) [0x0000000000002001] (CPF_Edit | CPF_Transient)
	uint32_t                                           bInvertWheelRoll : 1;                          // 0x0100 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInvertWheelSteering : 1;                      // 0x0100 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlWheel");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControlSpline
// 0x0014 (0x00BC - 0x00D0)
class USkelControlSpline : public USkelControlBase
{
public:
	int32_t                                            SplineLength;                                  // 0x00BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              SplineBoneAxis;                                // 0x00C0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESplineControlRotMode                              BoneRotMode;                                   // 0x00C1 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertSplineBoneAxis : 1;                     // 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              EndSplineTension;                              // 0x00C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartSplineTension;                            // 0x00CC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlSpline");
		}

		return uClassPointer;
	};

};

// Class Engine.SkelControlTrail
// 0x0074 (0x00BC - 0x0130)
class USkelControlTrail : public USkelControlBase
{
public:
	int32_t                                            ChainLength;                                   // 0x00BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              ChainBoneAxis;                                 // 0x00C0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertChainBoneAxis : 1;                      // 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLimitStretch : 1;                             // 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bActorSpaceFakeVel : 1;                        // 0x00C4 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bHadValidStrength : 1;                         // 0x00C4 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              TrailRelaxation;                               // 0x00C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StretchLimit;                                  // 0x00CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FakeVelocity;                                  // 0x00D0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              ThisTimstep;                                   // 0x00DC (0x0004) [0x0000000000000000]               
	class TArray<struct FVector>                       TrailBoneLocations;                            // 0x00E0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x4];                              // 0x00EC (0x0004) MISSED OFFSET
	struct FMatrix                                     OldLocalToWorld;                               // 0x00F0 (0x0040) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkelControlTrail");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimSequence
// 0x0104 (0x003C - 0x0140)
class UAnimSequence : public UObject
{
public:
	class FName                                        SequenceName;                                  // 0x003C (0x0008) [0x0000000000000000]               
	class TArray<struct FAnimNotifyEvent>              Notifies;                                      // 0x0044 (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UAnimMetaData*>                 MetaData;                                      // 0x0050 (0x000C) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FSkelControlModifier>          BoneControlModifiers;                          // 0x005C (0x000C) [0x0000000024400000] (CPF_NeedCtorLink | CPF_EditInline | CPF_Deprecated)
	float                                              SequenceLength;                                // 0x0068 (0x0004) [0x0000000000000000]               
	int32_t                                            NumFrames;                                     // 0x006C (0x0004) [0x0000000000000000]               
	float                                              RateScale;                                     // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoLoopingInterpolation : 1;                   // 0x0074 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsAdditive : 1;                               // 0x0074 (0x0004) [0x0000000000000002] [0x00000002] (CPF_Const)
	uint32_t                                           bAdditiveBuiltLooping : 1;                     // 0x0074 (0x0004) [0x0000000000000000] [0x00000004] (CPF_EditorOnly)
	uint32_t                                           bDoNotOverrideCompression : 1;                 // 0x0074 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const | CPF_EditorOnly)
	uint32_t                                           bHasBeenUsed : 1;                              // 0x0074 (0x0004) [0x0000000000002002] [0x00000010] (CPF_Const | CPF_Transient)
	uint32_t                                           bWasCompressedWithoutTranslations : 1;         // 0x0074 (0x0004) [0x0000000000000000] [0x00000020] (CPF_EditorOnly)
	uint32_t                                           bCutSceneAnimSeq : 1;                          // 0x0074 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bREDAnimCompressed : 1;                        // 0x0074 (0x0004) [0x0000000000000000] [0x00000080] (CPF_EditorOnly)
	class TArray<struct FRawAnimSequenceTrack>         RawAnimData;                                   // 0x0078 (0x000C) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FRawAnimSequenceTrack>         RawAnimationData;                              // 0x0084 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FTranslationTrack>             TranslationData;                               // 0x0090 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FRotationTrack>                RotationData;                                  // 0x009C (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FCurveTrack>                   CurveData;                                     // 0x00A8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class UAnimationCompressionAlgorithm*              CompressionScheme;                             // 0x00B4 (0x0004) [0x0000000004020001] (CPF_Edit | CPF_EditConst | CPF_EditInline | CPF_EditorOnly)
	EAnimationCompressionFormat                        TranslationCompressionFormat;                  // 0x00B8 (0x0001) [0x0000000000000002] (CPF_Const)   
	EAnimationCompressionFormat                        RotationCompressionFormat;                     // 0x00B9 (0x0001) [0x0000000000000002] (CPF_Const)   
	EAnimationKeyFormat                                KeyEncodingFormat;                             // 0x00BA (0x0001) [0x0000000000000002] (CPF_Const)   
	class TArray<int32_t>                              CompressedTrackOffsets;                        // 0x00BC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<uint8_t>                              CompressedByteStream;                          // 0x00C8 (0x000C) [0x0000000000001000] (CPF_Native)  
	struct FPointer                                    TranslationCodec;                              // 0x00D4 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	struct FPointer                                    RotationCodec;                                 // 0x00D8 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class TArray<struct FBoneAtom>                     AdditiveRefPose;                               // 0x00DC (0x000C) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FRawAnimSequenceTrack>         AdditiveBasePose;                              // 0x00E8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FName                                        AdditiveRefName;                               // 0x00F4 (0x0008) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)
	class TArray<class UAnimSequence*>                 AdditiveBasePoseAnimSeq;                       // 0x00FC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<class UAnimSequence*>                 AdditiveTargetPoseAnimSeq;                     // 0x0108 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<class UAnimSequence*>                 RelatedAdditiveAnimSeqs;                       // 0x0114 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            EncodingPkgVersion;                            // 0x0120 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            CompressCommandletVersion;                     // 0x0124 (0x0004) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)
	float                                              UseScore;                                      // 0x0128 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            FPS;                                           // 0x012C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              OriginalSequenceLength;                        // 0x0130 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class FString                                      ImportTime;                                    // 0x0134 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimSequence");
		}

		return uClassPointer;
	};

	float GetNotifyTimeByClass(class UClass* NotifyClass, float optionalPlayRate, float optionalStartPosition, class UAnimNotify*& outOut_Notify, float& outOut_Duration);
};

// Class Engine.AnimSet
// 0x00E0 (0x003C - 0x011C)
class UAnimSet : public UObject
{
public:
	uint32_t                                           bAnimRotationOnly : 1;                         // 0x003C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<class FName>                          TrackBoneNames;                                // 0x0040 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UAnimSequence*>                 Sequences;                                     // 0x004C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0058 (0x003C) MISSED OFFSET
	class TArray<struct FAnimSetMeshLinkup>            LinkupCache;                                   // 0x0094 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint8_t                                            UnknownData01[0x3C];                            // 0x00A0 (0x003C) MISSED OFFSET
	class TArray<uint8_t>                              BoneUseAnimTranslation;                        // 0x00DC (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<uint8_t>                              ForceUseMeshTranslation;                       // 0x00E8 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class FName>                          UseTranslationBoneNames;                       // 0x00F4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FName>                          ForceMeshTranslationBoneNames;                 // 0x0100 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FName                                        PreviewSkelMeshName;                           // 0x010C (0x0008) [0x0000000000000000]               
	class FName                                        BestRatioSkelMeshName;                         // 0x0114 (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimSet");
		}

		return uClassPointer;
	};

};

// Class Engine.MorphTarget
// 0x0018 (0x003C - 0x0054)
class UMorphTarget : public UObject
{
public:
	class TArray<int32_t>                              MorphLODModels;                                // 0x003C (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            MaterialSlotId;                                // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ScalarParameterName;                           // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphTarget");
		}

		return uClassPointer;
	};

};

// Class Engine.MorphTargetSet
// 0x001C (0x003C - 0x0058)
class UMorphTargetSet : public UObject
{
public:
	class TArray<class UMorphTarget*>                  Targets;                                       // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class USkeletalMesh*                               BaseSkelMesh;                                  // 0x0048 (0x0004) [0x0000000000000000]               
	struct FArray_Mirror                               RawWedgePointIndices;                          // 0x004C (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphTargetSet");
		}

		return uClassPointer;
	};

	class UMorphTarget* FindMorphTarget(const class FName& MorphTargetName);
};

// Class Engine.MorphWeightSequence
// 0x0000 (0x003C - 0x003C)
class UMorphWeightSequence : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MorphWeightSequence");
		}

		return uClassPointer;
	};

};

// Class Engine.DecalActorBase
// 0x0008 (0x01C8 - 0x01D0)
class ADecalActorBase : public AActor
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;         // 0x01C8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class UDecalComponent*                             Decal;                                         // 0x01CC (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DecalActorBase");
		}

		return uClassPointer;
	};

};

// Class Engine.DecalActor
// 0x0000 (0x01D0 - 0x01D0)
class ADecalActor : public ADecalActorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DecalActor");
		}

		return uClassPointer;
	};

};

// Class Engine.DecalActorMovable
// 0x0000 (0x01D0 - 0x01D0)
class ADecalActorMovable : public ADecalActorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DecalActorMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.DecalManager
// 0x0034 (0x01C8 - 0x01FC)
class ADecalManager : public AActor
{
public:
	class UDecalComponent*                             DecalTemplate;                                 // 0x01C8 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class TArray<class UDecalComponent*>               PoolDecals;                                    // 0x01CC (0x000C) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	int32_t                                            MaxActiveDecals;                               // 0x01D8 (0x0004) [0x0000000000000000]               
	float                                              DecalLifeSpan;                                 // 0x01DC (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              DecalDepthBias;                                // 0x01E0 (0x0004) [0x0000000000000000]               
	float                                              OrbisDecalDepthBias;                           // 0x01E4 (0x0004) [0x0000000000000000]               
	struct FVector2D                                   DecalBlendRange;                               // 0x01E8 (0x0008) [0x0000000000000000]               
	class TArray<struct FActiveDecalInfo>              ActiveDecals;                                  // 0x01F0 (0x000C) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DecalManager");
		}

		return uClassPointer;
	};

	class UDecalComponent* SpawnDecal(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float optionalDecalRotation, class UPrimitiveComponent* optionalHitComponent, bool optionalBProjectOnTerrain, bool optionalBProjectOnSkeletalMeshes, const class FName& optionalHitBone, int32_t optionalHitNodeIndex, int32_t optionalHitLevelIndex, float optionalInDecalLifeSpan, int32_t optionalInFracturedStaticMeshComponentIndex, float optionalInDepthBias, float optionalInOrbisDepthBias, const struct FVector2D& optionalInBlendRange);
	class UDecalComponent* GetPooledComponent();
	static void SetDecalParameters(class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const class FName& HitBone, int32_t HitNodeIndex, int32_t HitLevelIndex, int32_t InFracturedStaticMeshComponentIndex, float DepthBias, float OrbisDepthBias, const struct FVector2D& BlendRange);
	bool CanSpawnDecals();
	void eventDecalFinished(class UDecalComponent* Decal);
	static bool AreDynamicDecalsEnabled();
};

// Class Engine.DecalComponent
// 0x0168 (0x01D8 - 0x0340)
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                 // 0x01D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Width;                                         // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Height;                                        // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TileX;                                         // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TileY;                                         // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OffsetX;                                       // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OffsetY;                                       // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DecalRotation;                                 // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FieldOfView;                                   // 0x01F8 (0x0004) [0x0000000000000000]               
	float                                              NearPlane;                                     // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FarPlane;                                      // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Location;                                      // 0x0204 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    Orientation;                                   // 0x0210 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     HitLocation;                                   // 0x021C (0x000C) [0x0000000000000000]               
	struct FVector                                     HitNormal;                                     // 0x0228 (0x000C) [0x0000000000000000]               
	struct FVector                                     HitTangent;                                    // 0x0234 (0x000C) [0x0000000000000000]               
	struct FVector                                     HitBinormal;                                   // 0x0240 (0x000C) [0x0000000000000000]               
	uint32_t                                           bNoClip : 1;                                   // 0x024C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bStaticDecal : 1;                              // 0x024C (0x0004) [0x0000000000000002] [0x00000002] (CPF_Const)
	uint32_t                                           bProjectOnBackfaces : 1;                       // 0x024C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bProjectOnHidden : 1;                          // 0x024C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bProjectOnBSP : 1;                             // 0x024C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bProjectOnStaticMeshes : 1;                    // 0x024C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bProjectOnSkeletalMeshes : 1;                  // 0x024C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bProjectOnTerrain : 1;                         // 0x024C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bFlipBackfaceDirection : 1;                    // 0x024C (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bMovableDecal : 1;                             // 0x024C (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bHasBeenAttached : 1;                          // 0x024C (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bDecalMaterialSetAtRunTime : 1;                // 0x024C (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	class UPrimitiveComponent*                         HitComponent;                                  // 0x0250 (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class FName                                        HitBone;                                       // 0x0254 (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            HitNodeIndex;                                  // 0x025C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            HitLevelIndex;                                 // 0x0260 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            FracturedStaticMeshComponentIndex;             // 0x0264 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<int32_t>                              HitNodeIndices;                                // 0x0268 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FDecalReceiver>                DecalReceivers;                                // 0x0274 (0x000C) [0x0000000001680002] (CPF_Const | CPF_Component | CPF_NeedCtorLink)
	class TArray<struct FPointer>                      StaticReceivers;                               // 0x0280 (0x000C) [0x0000000001203002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    ReleaseResourcesFence;                         // 0x028C (0x0004) [0x0000000000203002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPlane>                        Planes;                                        // 0x0290 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              DepthBias;                                     // 0x029C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SlopeScaleDepthBias;                           // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OrbisDepthBias;                                // 0x02A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OrbisSlopeScaleDepthBias;                      // 0x02A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SortOrder;                                     // 0x02AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BackfaceAngle;                                 // 0x02B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   BlendRange;                                    // 0x02B4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              StreamingDistanceMultiplier;                   // 0x02BC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EDecalTransform                                    DecalTransform;                                // 0x02C0 (0x0001) [0x0000000000000002] (CPF_Const)   
	EFilterMode                                        FilterMode;                                    // 0x02C1 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class TArray<class AActor*>                        Filter;                                        // 0x02C4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UPrimitiveComponent*>           ReceiverImages;                                // 0x02D0 (0x000C) [0x0000000004480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	struct FVector                                     ParentRelativeLocation;                        // 0x02DC (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    ParentRelativeOrientation;                     // 0x02E8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            UnknownData00[0xC];                              // 0x02F4 (0x000C) MISSED OFFSET
	struct FMatrix                                     ParentRelLocRotMatrix;                         // 0x0300 (0x0040) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DecalComponent");
		}

		return uClassPointer;
	};

	bool IsWaitingForResetToDefaultsToComplete();
	class UMaterialInterface* GetDecalMaterial();
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	void ResetToDefaults();
};

// Class Engine.ActorFactoryDecal
// 0x0004 (0x0068 - 0x006C)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                 // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryDecal");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryDecalMovable
// 0x0000 (0x006C - 0x006C)
class UActorFactoryDecalMovable : public UActorFactoryDecal
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryDecalMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.Material
// 0x06D0 (0x01E8 - 0x08B8)
class UMaterial : public UMaterialInterface
{
public:
	uint32_t                                           bPreviewPS3 : 1;                               // 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit | CPF_EditorOnly)
	uint32_t                                           EnableSubsurfaceScattering : 1;                // 0x01E8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           EnableSeparateTranslucency : 1;                // 0x01E8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bEnableMaskedAntialiasing : 1;                 // 0x01E8 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           TwoSided : 1;                                  // 0x01E8 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bIsUsedBGFade : 1;                             // 0x01E8 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bScreenAlignedModel : 1;                       // 0x01E8 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bScreenAlignedModelVersion2 : 1;               // 0x01E8 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bReplaceSpecularToShadowColor : 1;             // 0x01E8 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bIgnoreHDRForPS3 : 1;                          // 0x01E8 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bCalcNormalForBGPS3 : 1;                       // 0x01E8 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bUseScreenPositionClipVertex : 1;              // 0x01E8 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bUseScreenPositionClipPixel : 1;               // 0x01E8 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           TwoSidedSeparatePass : 1;                      // 0x01E8 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bDisableDepthTest : 1;                         // 0x01E8 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bSceneTextureRenderBehindTranslucency : 1;     // 0x01E8 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bAllowFog : 1;                                 // 0x01E8 (0x0004) [0x0000000000000001] [0x00010000] (CPF_Edit)
	uint32_t                                           bTranslucencyReceiveDominantShadowsFromStatic : 1;// 0x01E8 (0x0004) [0x0000000000000001] [0x00020000] (CPF_Edit)
	uint32_t                                           bTranslucencyInheritDominantShadowsFromOpaque : 1;// 0x01E8 (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           bAllowTranslucencyDoF : 1;                     // 0x01E8 (0x0004) [0x0000000000000001] [0x00080000] (CPF_Edit)
	uint32_t                                           bUseOneLayerDistortion : 1;                    // 0x01E8 (0x0004) [0x0000000000000001] [0x00100000] (CPF_Edit)
	uint32_t                                           bUseLitTranslucencyDepthPass : 1;              // 0x01E8 (0x0004) [0x0000000000000001] [0x00200000] (CPF_Edit)
	uint32_t                                           bUseLitTranslucencyPostRenderDepthPass : 1;    // 0x01E8 (0x0004) [0x0000000000000001] [0x00400000] (CPF_Edit)
	uint32_t                                           bCastLitTranslucencyShadowAsMasked : 1;        // 0x01E8 (0x0004) [0x0000000000000001] [0x00800000] (CPF_Edit)
	uint32_t                                           bUsedAsLightFunction : 1;                      // 0x01E8 (0x0004) [0x0000000000000003] [0x01000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithFogVolumes : 1;                       // 0x01E8 (0x0004) [0x0000000000000003] [0x02000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedAsSpecialEngineMaterial : 1;              // 0x01E8 (0x0004) [0x0000000000200002] [0x04000000] (CPF_Const)
	uint32_t                                           bUsedWithSkeletalMesh : 1;                     // 0x01E8 (0x0004) [0x0000000000000003] [0x08000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithTerrain : 1;                          // 0x01E8 (0x0004) [0x0000000000000003] [0x10000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithLandscape : 1;                        // 0x01E8 (0x0004) [0x0000000000000003] [0x20000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithFracturedMeshes : 1;                  // 0x01E8 (0x0004) [0x0000000000000003] [0x40000000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithParticleSystem : 1;                   // 0x01E8 (0x0004) [0x0000000000000002] [0x80000000] (CPF_Const)
	uint32_t                                           bUsedWithParticleSprites : 1;                  // 0x01EC (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithBeamTrails : 1;                       // 0x01EC (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithParticleSubUV : 1;                    // 0x01EC (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithSpeedTree : 1;                        // 0x01EC (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithStaticLighting : 1;                   // 0x01EC (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithLensFlare : 1;                        // 0x01EC (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithGammaCorrection : 1;                  // 0x01EC (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithInstancedMeshParticles : 1;           // 0x01EC (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithFluidSurfaces : 1;                    // 0x01EC (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithDecals : 1;                           // 0x01EC (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithMaterialEffect : 1;                   // 0x01EC (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithMorphTargets : 1;                     // 0x01EC (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithRadialBlur : 1;                       // 0x01EC (0x0004) [0x0000000000000003] [0x00001000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithInstancedMeshes : 1;                  // 0x01EC (0x0004) [0x0000000000000003] [0x00002000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithSplineMeshes : 1;                     // 0x01EC (0x0004) [0x0000000000000003] [0x00004000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithAPEXMeshes : 1;                       // 0x01EC (0x0004) [0x0000000000000003] [0x00008000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUsedWithScreenDoorFade : 1;                   // 0x01EC (0x0004) [0x0000000000000003] [0x00010000] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableCrackFreeDisplacement : 1;              // 0x01EC (0x0004) [0x0000000000000003] [0x00020000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseImageBasedReflections : 1;                 // 0x01EC (0x0004) [0x0000000000000001] [0x00040000] (CPF_Edit)
	uint32_t                                           Wireframe : 1;                                 // 0x01EC (0x0004) [0x0000000000000001] [0x00080000] (CPF_Edit)
	uint32_t                                           bPerPixelCameraVector : 1;                     // 0x01EC (0x0004) [0x0000000000000001] [0x00100000] (CPF_Edit)
	uint32_t                                           bAllowLightmapSpecular : 1;                    // 0x01EC (0x0004) [0x0000000000000001] [0x00200000] (CPF_Edit)
	uint32_t                                           bIsFallbackMaterial : 1;                       // 0x01EC (0x0004) [0x0000000020000000] [0x00400000]  CPF_Deprecated)
	uint32_t                                           bUsesDistortion : 1;                           // 0x01EC (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bIsMasked : 1;                                 // 0x01EC (0x0004) [0x0000000000000000] [0x01000000] 
	uint32_t                                           bIsPreviewMaterial : 1;                        // 0x01EC (0x0004) [0x0000000000202000] [0x02000000] (CPF_Transient)
	class UPhysicalMaterial*                           PhysMaterial;                                  // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      PhysicalMaterial;                              // 0x01F4 (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  PhysMaterialMask;                              // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            PhysMaterialMaskUVChannel;                     // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                         // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                         // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColorMaterialInput                         DiffuseColor;                                  // 0x0208 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        DiffusePower;                                  // 0x023C (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FColorMaterialInput                         SpecularColor;                                 // 0x0270 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        SpecularPower;                                 // 0x02A4 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        Normal;                                        // 0x02D8 (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FColorMaterialInput                         EmissiveColor;                                 // 0x0314 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        Opacity;                                       // 0x0348 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        OpacityMask;                                   // 0x037C (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              OpacityMaskClipValue;                          // 0x03B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ShadowDepthBias;                               // 0x03B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector2MaterialInput                       Distortion;                                    // 0x03B8 (0x0038) [0x0000000000400000] (CPF_NeedCtorLink)
	EBlendMode                                         BlendMode;                                     // 0x03F0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMaterialLightingModel                             LightingModel;                                 // 0x03F1 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMaterialTessellationMode                          D3D11TessellationMode;                         // 0x03F2 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FColorMaterialInput                         CustomLighting;                                // 0x03F4 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FColorMaterialInput                         CustomSkylightDiffuse;                         // 0x0428 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        AnisotropicDirection;                          // 0x045C (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        TwoSidedLightingMask;                          // 0x0498 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FColorMaterialInput                         TwoSidedLightingColor;                         // 0x04CC (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        WorldPositionOffset;                           // 0x0500 (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        WorldDisplacement;                             // 0x053C (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        TessellationMultiplier;                        // 0x0578 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FColorMaterialInput                         SubsurfaceInscatteringColor;                   // 0x05AC (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FColorMaterialInput                         SubsurfaceAbsorptionColor;                     // 0x05E0 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        SubsurfaceScatteringRadius;                    // 0x0614 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        OrthoPositionBlend;                            // 0x0648 (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScalarMaterialInput                        ScreenSpaceZOffset;                            // 0x067C (0x0034) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        ScreenAligned2Offset;                          // 0x06B0 (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        ScreenAligned2Scale;                           // 0x06EC (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        ScreenClipLeftTopVS;                           // 0x0728 (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        ScreenClipRightBottomVS;                       // 0x0764 (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        ScreenClipLeftTopPS;                           // 0x07A0 (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FVectorMaterialInput                        ScreenClipRightBottomPS;                       // 0x07DC (0x003C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              ImageReflectionNormalDampening;                // 0x0818 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    MaterialResources[2];                          // 0x081C (0x0008) [0x0000000000201002] (CPF_Const | CPF_Native)
	struct FPointer                                    DefaultMaterialInstances[3];                   // 0x0824 (0x000C) [0x0000000000201002] (CPF_Const | CPF_Native)
	int32_t                                            EditorX;                                       // 0x0830 (0x0004) [0x0000000000000000]               
	int32_t                                            EditorY;                                       // 0x0834 (0x0004) [0x0000000000000000]               
	int32_t                                            EditorPitch;                                   // 0x0838 (0x0004) [0x0000000000000000]               
	int32_t                                            EditorYaw;                                     // 0x083C (0x0004) [0x0000000000000000]               
	class TArray<class UMaterialExpression*>           Expressions;                                   // 0x0840 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UMaterialExpressionComment*>    EditorComments;                                // 0x084C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FMaterialFunctionInfo>         MaterialFunctionInfos;                         // 0x0858 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0864 (0x003C) MISSED OFFSET
	class TArray<class UTexture*>                      ReferencedTextures;                            // 0x08A0 (0x000C) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FGuid>                         ReferencedTextureGuids;                        // 0x08AC (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Material");
		}

		return uClassPointer;
	};

};

// Class Engine.DecalMaterial
// 0x0000 (0x08B8 - 0x08B8)
class UDecalMaterial : public UMaterial
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DecalMaterial");
		}

		return uClassPointer;
	};

};

// Class Engine.FogVolumeDensityInfo
// 0x000C (0x01C8 - 0x01D4)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                              // 0x01C8 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        AutomaticMeshComponent;                        // 0x01CC (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint32_t                                           bEnabled : 1;                                  // 0x01D0 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeDensityInfo");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
	void OnToggle(class USeqAct_Toggle* Action);
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
};

// Class Engine.FogVolumeConeDensityInfo
// 0x0000 (0x01D4 - 0x01D4)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeConeDensityInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.FogVolumeConstantDensityInfo
// 0x0000 (0x01D4 - 0x01D4)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeConstantDensityInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.FogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x01D4 - 0x01D4)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.FogVolumeSphericalDensityInfo
// 0x0000 (0x01D4 - 0x01D4)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeSphericalDensityInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.ExponentialHeightFogComponent
// 0x002F (0x0055 - 0x0084)
class UExponentialHeightFogComponent : public UActorComponent
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0058 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              FogHeight;                                     // 0x005C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              FogDensity;                                    // 0x0060 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              FogHeightFalloff;                              // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              FogMaxOpacity;                                 // 0x0068 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              StartDistance;                                 // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              LightTerminatorAngle;                          // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              OppositeLightBrightness;                       // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	struct FColor                                      OppositeLightColor;                            // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	float                                              LightInscatteringBrightness;                   // 0x007C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	struct FColor                                      LightInscatteringColor;                        // 0x0080 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ExponentialHeightFogComponent");
		}

		return uClassPointer;
	};

	void SetEnabled(bool bSetEnabled);
};

// Class Engine.FogVolumeDensityComponent
// 0x0043 (0x0055 - 0x0098)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          FogMaterial;                                   // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                      // 0x005C (0x0004) [0x0000000000000000]               
	uint32_t                                           bEnabled : 1;                                  // 0x0060 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bAffectsTranslucency : 1;                      // 0x0060 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bOnlyAffectsTranslucency : 1;                  // 0x0060 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FLinearColor                                SimpleLightColor;                              // 0x0064 (0x0010) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FLinearColor                                ApproxFogLightColor;                           // 0x0074 (0x0010) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              StartDistance;                                 // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              MaxDistance;                                   // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class AActor*>                        FogVolumeActors;                               // 0x008C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeDensityComponent");
		}

		return uClassPointer;
	};

	void SetEnabled(bool bSetEnabled);
};

// Class Engine.FogVolumeConeDensityComponent
// 0x0028 (0x0098 - 0x00C0)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                    // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FVector                                     ConeVertex;                                    // 0x009C (0x000C) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ConeRadius;                                    // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FVector                                     ConeAxis;                                      // 0x00AC (0x000C) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ConeMaxAngle;                                  // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	class UDrawLightConeComponent*                     PreviewCone;                                   // 0x00BC (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeConeDensityComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.FogVolumeConstantDensityComponent
// 0x0004 (0x0098 - 0x009C)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                       // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeConstantDensityComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.FogVolumeLinearHalfspaceDensityComponent
// 0x0018 (0x0098 - 0x00B0)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                           // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint8_t                                            UnknownData00[0x4];                              // 0x009C (0x0004) MISSED OFFSET
	struct FPlane                                      HalfspacePlane;                                // 0x00A0 (0x0010) [0x0000000000000001] (CPF_Edit | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.FogVolumeSphericalDensityComponent
// 0x0018 (0x0098 - 0x00B0)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                    // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FVector                                     SphereCenter;                                  // 0x009C (0x000C) [0x0000000000000000]               
	float                                              SphereRadius;                                  // 0x00A8 (0x0004) [0x0000000000000000]               
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                           // 0x00AC (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FogVolumeSphericalDensityComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryFogVolumeConstantDensityInfo
// 0x0008 (0x0068 - 0x0070)
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                              // 0x0068 (0x0004) [0x0000000000000000]               
	uint32_t                                           bNothingSelected : 1;                          // 0x006C (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryFogVolumeConstantDensityInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0070 - 0x0070)
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryFogVolumeSphericalDensityInfo
// 0x0000 (0x0070 - 0x0070)
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryFogVolumeSphericalDensityInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexDestructibleActor
// 0x0040 (0x01C8 - 0x0208)
class AApexDestructibleActor : public AActor
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                              // 0x01C8 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint32_t                                           bFractureMaterialOverride : 1;                 // 0x01CC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<class UFractureMaterial*>             FractureMaterials;                             // 0x01D0 (0x000C) [0x0000000000400043] (CPF_Edit | CPF_Const | CPF_EditFixedSize | CPF_NeedCtorLink)
	class UApexStaticDestructibleComponent*            StaticDestructibleComponent;                   // 0x01DC (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	int32_t                                            LOD;                                           // 0x01E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<uint8_t>                              VisibilityFactors;                             // 0x01E4 (0x000C) [0x0000000000500000] (CPF_NeedCtorLink)
	class TArray<class USoundCue*>                     FractureSounds;                                // 0x01F0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UParticleSystem*>               FractureParticleEffects;                       // 0x01FC (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexDestructibleActor");
		}

		return uClassPointer;
	};

	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float optionalDamageFalloffExponent);
	void TakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	void eventPostBeginPlay();
	void CacheFractureEffects();
	void eventSpawnFractureEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FVector& SpawnDirection);
};

// Class Engine.FracturedStaticMeshActor
// 0x0068 (0x01C8 - 0x0230)
class AFracturedStaticMeshActor : public AActor
{
public:
	int32_t                                            MaxPartsToSpawnAtOnce;                         // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UFracturedStaticMeshComponent*               FracturedStaticMeshComponent;                  // 0x01CC (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                              // 0x01D0 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class TArray<int32_t>                              ChunkHealth;                                   // 0x01D4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bHasShownMissingSoundWarning : 1;              // 0x01E0 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bBreakChunksOnActorTouch : 1;                  // 0x01E0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bShouldSaveForCheckpoint : 1;                  // 0x01E0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class TArray<class UClass*>                        FracturedByDamageType;                         // 0x01E4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              ChunkHealthScale;                              // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UParticleSystem*>               OverrideFragmentDestroyEffects;                // 0x01F4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              FractureCullMinDistance;                       // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FractureCullMaxDistance;                       // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FDeferredPartToSpawn>          DeferredPartsToSpawn;                          // 0x0208 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FPhysEffectInfo                             PartImpactEffect;                              // 0x0214 (0x0010) [0x0000000000000000]               
	class USoundCue*                                   ExplosionFractureSound;                        // 0x0224 (0x0004) [0x0000000000000000]               
	class USoundCue*                                   SingleChunkFractureSound;                      // 0x0228 (0x0004) [0x0000000000000000]               
	class UMaterialInterface*                          MI_LoseChunkPreviousMaterial;                  // 0x022C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FracturedStaticMeshActor");
		}

		return uClassPointer;
	};

	void NotifyHitByExplosion(class AController* InstigatorController, float DamageAmount, class UClass* dmgType);
	void eventSetLoseChunkReplacementMaterial();
	void eventHideFragmentsToMaximizeMemoryUsage();
	void eventHideOneFragment();
	void eventResetVisibility();
	void eventBreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles);
	void eventExplode();
	void eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	void RemoveDecals(int32_t IndexToRemoveDecalsFrom);
	bool FractureEffectIsRelevant(bool bForceDedicated, class APawn* EffectInstigator, uint8_t& outBWantPhysChunksAndParticles);
	bool IsFracturedByDamageType(class UClass* dmgType);
	bool eventSpawnDeferredParts();
	void eventBreakOffIsolatedIslands(const class TArray<int32_t>& IgnoreFrags, const struct FVector& ChunkDir, const class TArray<class AFracturedStaticMeshPart*>& DisableCollWithPart, bool bWantPhysChunks, class TArray<uint8_t>& outFragmentVis);
	void ApplyCheckpointRecord(struct AFracturedStaticMeshActor_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct AFracturedStaticMeshActor_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
	void ResetHealth();
	void eventPostBeginPlay();
	class AFracturedStaticMeshPart* SpawnPartMulti(const class TArray<int32_t>& ChunkIndices, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion);
	class AFracturedStaticMeshPart* SpawnPart(int32_t ChunkIndex, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion);
};

// Class Engine.FracturedStaticMeshPart
// 0x0030 (0x0230 - 0x0260)
class AFracturedStaticMeshPart : public AFracturedStaticMeshActor
{
public:
	float                                              DestroyPartRadiusFactor;                       // 0x0230 (0x0004) [0x0000000000000000]               
	class AFracturedStaticMeshActor*                   BaseFracturedMeshActor;                        // 0x0234 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bHasBeenRecycled : 1;                          // 0x0238 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bChangeRBChannelWhenAsleep : 1;                // 0x0238 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bCompositeThatExplodesOnImpact : 1;            // 0x0238 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              LastSpawnTime;                                 // 0x023C (0x0004) [0x0000000000000000]               
	int32_t                                            PartPoolIndex;                                 // 0x0240 (0x0004) [0x0000000000000000]               
	float                                              FracPartGravScale;                             // 0x0244 (0x0004) [0x0000000000000000]               
	ERBCollisionChannel                                AsleepRBChannel;                               // 0x0248 (0x0001) [0x0000000000000000]               
	struct FVector                                     OldVelocity;                                   // 0x024C (0x000C) [0x0000000000000000]               
	float                                              CurrentVibrationLevel;                         // 0x0258 (0x0004) [0x0000000000000000]               
	float                                              LastImpactSoundTime;                           // 0x025C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FracturedStaticMeshPart");
		}

		return uClassPointer;
	};

	void eventBreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles);
	void eventExplode();
	void eventFellOutOfWorld(class UClass* dmgType);
	void TryToCleanUp();
	void eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	void RecyclePart(bool bAddToFreePool);
	void Initialize();
};

// Class Engine.FractureManager
// 0x0038 (0x01C8 - 0x0200)
class AFractureManager : public AActor
{
public:
	int32_t                                            FSMPartPoolSize;                               // 0x01C8 (0x0004) [0x0000000000000000]               
	uint32_t                                           bEnableAntiVibration : 1;                      // 0x01CC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnableSpawnChunkEffectForRadialDamage : 1;    // 0x01CC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              DestroyVibrationLevel;                         // 0x01D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DestroyMinAngVel;                              // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExplosionVelScale;                             // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class AFracturedStaticMeshPart*>      PartPool;                                      // 0x01DC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<int32_t>                              FreeParts;                                     // 0x01E8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class AFracturedStaticMeshActor*>     ActorsWithDeferredPartsToSpawn;                // 0x01F4 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FractureManager");
		}

		return uClassPointer;
	};

	void Tick(float DeltaTime);
	void eventReturnPartActor(class AFracturedStaticMeshPart* Part);
	class AFracturedStaticMeshPart* eventSpawnPartActor(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	class AFracturedStaticMeshPart* GetFSMPart(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void ResetPoolVisibility();
	void CreateFSMParts();
	void CleanUpFSMParts();
	void eventDestroyed();
	void eventPreBeginPlay();
	float GetFSMFractureCullDistanceScale();
	float GetFSMRadialSpawnChanceScale();
	float GetFSMDirectSpawnChanceScale();
	float GetNumFSMPartsScale();
	void eventSpawnChunkDestroyEffect(class UParticleSystem* Effect, const struct FBox& ChunkBox, const struct FVector& ChunkDir, float Scale);
};

// Class Engine.ImageReflection
// 0x000C (0x01C8 - 0x01D4)
class AImageReflection : public AActor
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x01C8 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)
	class UImageReflectionComponent*                   ReflectionComponent;                           // 0x01CC (0x0004) [0x0000000024080008] (CPF_ExportObject | CPF_Component | CPF_EditInline | CPF_Deprecated)
	class UImageBasedReflectionComponent*              ImageReflectionComponent;                      // 0x01D0 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ImageReflection");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
};

// Class Engine.ImageReflectionSceneCapture
// 0x0008 (0x01D4 - 0x01DC)
class AImageReflectionSceneCapture : public AImageReflection
{
public:
	float                                              DepthRange;                                    // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ColorRange;                                    // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ImageReflectionSceneCapture");
		}

		return uClassPointer;
	};

};

// Class Engine.ImageReflectionShadowPlane
// 0x0008 (0x01C8 - 0x01D0)
class AImageReflectionShadowPlane : public AActor
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x01C8 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)
	class UImageReflectionShadowPlaneComponent*        ReflectionShadowComponent;                     // 0x01CC (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ImageReflectionShadowPlane");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
};

// Class Engine.ImageReflectionComponent
// 0x0007 (0x0055 - 0x005C)
class UImageReflectionComponent : public UActorComponent
{
public:
	class UTexture2D*                                  ReflectionTexture;                             // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ImageReflectionComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ImageReflectionShadowPlaneComponent
// 0x0018 (0x01D8 - 0x01F0)
class UImageReflectionShadowPlaneComponent : public UPrimitiveComponent
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x01D8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint8_t                                            UnknownData00[0x4];                              // 0x01DC (0x0004) MISSED OFFSET
	struct FPlane                                      ReflectionPlane;                               // 0x01E0 (0x0010) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ImageReflectionShadowPlaneComponent");
		}

		return uClassPointer;
	};

	void SetEnabled(bool bSetEnabled);
};

// Class Engine.ApexComponentBase
// 0x0014 (0x01E4 - 0x01F8)
class UApexComponentBase : public UMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                        // 0x01E4 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                         // 0x01E8 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class UApexAsset*                                  Asset;                                         // 0x01EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FColor                                      WireframeColor;                                // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAssetChanged : 1;                             // 0x01F4 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexComponentBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexDynamicComponent
// 0x0004 (0x01F8 - 0x01FC)
class UApexDynamicComponent : public UApexComponentBase
{
public:
	struct FPointer                                    ComponentDynamicResources;                     // 0x01F8 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexDynamicComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexStaticComponent
// 0x0000 (0x01F8 - 0x01F8)
class UApexStaticComponent : public UApexComponentBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexStaticComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexStaticDestructibleComponent
// 0x0014 (0x01F8 - 0x020C)
class UApexStaticDestructibleComponent : public UApexStaticComponent
{
public:
	float                                              SleepEnergyThreshold;                          // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SleepDamping;                                  // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    ApexDestructibleActor;                         // 0x0200 (0x0004) [0x0000000000201000] (CPF_Native)  
	struct FPointer                                    ApexDestructiblePreview;                       // 0x0204 (0x0004) [0x0000000000201000] (CPF_Native)  
	uint32_t                                           bIsThumbnailComponent : 1;                     // 0x0208 (0x0004) [0x0000000000001000] [0x00000001] (CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexStaticDestructibleComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.FracturedBaseComponent
// 0x0020 (0x0254 - 0x0274)
class UFracturedBaseComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                        // 0x0254 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                         // 0x0258 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<uint8_t>                              VisibleFragments;                              // 0x025C (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bVisibilityHasChanged : 1;                     // 0x0268 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bVisibilityReset : 1;                          // 0x0268 (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bInitialVisibilityValue : 1;                   // 0x0268 (0x0004) [0x0000000000000002] [0x00000004] (CPF_Const)
	uint32_t                                           bUseDynamicIndexBuffer : 1;                    // 0x0268 (0x0004) [0x0000000000000002] [0x00000008] (CPF_Const)
	uint32_t                                           bUseDynamicIBWithHiddenFragments : 1;          // 0x0268 (0x0004) [0x0000000000000002] [0x00000010] (CPF_Const)
	int32_t                                            NumResourceIndices;                            // 0x026C (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            bResetStaticMesh;                              // 0x0270 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FracturedBaseComponent");
		}

		return uClassPointer;
	};

	int32_t GetNumVisibleFragments();
	int32_t GetNumFragments();
	bool IsFragmentVisible(int32_t FragmentIndex);
	class TArray<uint8_t> GetVisibleFragments();
	bool SetStaticMesh(class UStaticMesh* NewMesh, bool optionalBForce);
};

// Class Engine.FracturedSkinnedMeshComponent
// 0x0020 (0x0274 - 0x0294)
class UFracturedSkinnedMeshComponent : public UFracturedBaseComponent
{
public:
	struct FPointer                                    ComponentSkinResources;                        // 0x0274 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FMatrix>                       FragmentTransforms;                            // 0x0278 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UFracturedStaticMeshComponent*> DependentComponents;                           // 0x0284 (0x000C) [0x000000000448200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bBecameVisible : 1;                            // 0x0290 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           bFragmentTransformsChanged : 1;                // 0x0290 (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FracturedSkinnedMeshComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.FracturedStaticMeshComponent
// 0x0040 (0x0274 - 0x02B4)
class UFracturedStaticMeshComponent : public UFracturedBaseComponent
{
public:
	class TArray<uint8_t>                              FragmentNeighborsVisible;                      // 0x0274 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FBox                                        VisibleBox;                                    // 0x0280 (0x001C) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bUseSkinnedRendering : 1;                      // 0x029C (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bUseVisibleVertsForBounds : 1;                 // 0x029C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bTopFragmentsRootNonDestroyable : 1;           // 0x029C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bBottomFragmentsRootNonDestroyable : 1;        // 0x029C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	float                                              TopBottomFragmentDistThreshold;                // 0x02A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          LoseChunkOutsideMaterialOverride;              // 0x02A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FragmentBoundsMaxZ;                            // 0x02A8 (0x0004) [0x0000000000000000]               
	float                                              FragmentBoundsMinZ;                            // 0x02AC (0x0004) [0x0000000000000000]               
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                              // 0x02B0 (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FracturedStaticMeshComponent");
		}

		return uClassPointer;
	};

	class UPhysicalMaterial* GetFracturedMeshPhysMaterial();
	void RecreatePhysState();
	class TArray<int32_t> GetBoundaryHiddenFragments(const class TArray<int32_t>& AdditionalVisibleFragments);
	class TArray<struct FFragmentGroup> GetFragmentGroups(const class TArray<int32_t>& IgnoreFragments, float MinConnectionArea);
	int32_t GetCoreFragmentIndex();
	struct FVector GetFragmentAverageExteriorNormal(int32_t FragmentIndex);
	struct FBox GetFragmentBox(int32_t FragmentIndex);
	bool IsNoPhysFragment(int32_t FragmentIndex);
	bool IsRootFragment(int32_t FragmentIndex);
	bool IsFragmentDestroyable(int32_t FragmentIndex);
	void SetVisibleFragments(const class TArray<uint8_t>& VisibilityFactors);
};

// Class Engine.ImageBasedReflectionComponent
// 0x0018 (0x0254 - 0x026C)
class UImageBasedReflectionComponent : public UStaticMeshComponent
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0254 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTwoSided : 1;                                 // 0x0254 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class UTexture2D*                                  ReflectionTexture;                             // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                ReflectionColor;                               // 0x025C (0x0010) [0x0000000000000001] (CPF_Edit | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ImageBasedReflectionComponent");
		}

		return uClassPointer;
	};

	void OnUpdatePropertyReflectionColor();
	void UpdateImageReflectionParameters();
	void SetEnabled(bool bSetEnabled);
};

// Class Engine.InstancedStaticMeshComponent
// 0x0058 (0x0254 - 0x02AC)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	class TArray<struct FInstancedStaticMeshInstanceData> PerInstanceData;                               // 0x0254 (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData;                             // 0x0260 (0x000C) [0x0000000000001000] (CPF_Native)  
	int32_t                                            NumPendingLightmaps;                           // 0x026C (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            ComponentJoinKey;                              // 0x0270 (0x0004) [0x0000000000000000]               
	class TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings;                                // 0x0274 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            InstancingRandomSeed;                          // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            InstanceStartCullDistance;                     // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            InstanceEndCullDistance;                       // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FBitArray_Mirror                            SelectedInstances;                             // 0x028C (0x001C) [0x0000000000001002] (CPF_Const | CPF_Native | CPF_EditorOnly)
	uint32_t                                           bDontResolveInstancedLightmaps : 1;            // 0x02A8 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.SplineMeshComponent
// 0x0068 (0x0254 - 0x02BC)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                           SplineParams;                                  // 0x0254 (0x0058) [0x0000000000000000]               
	struct FVector                                     SplineXDir;                                    // 0x02AC (0x000C) [0x0000000000000000]               
	uint32_t                                           bSmoothInterpRollScale : 1;                    // 0x02B8 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SplineMeshComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexAsset
// 0x003C (0x003C - 0x0078)
class UApexAsset : public UObject
{
public:
	class FString                                      OriginalApexName;                              // 0x003C (0x000C) [0x0000000004400002] (CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UApexComponentBase*>            ApexComponents;                                // 0x0048 (0x000C) [0x000000000408300A] (CPF_Const | CPF_ExportObject | CPF_Native | CPF_Transient | CPF_Component | CPF_EditInline)
	class TArray<class UApexAsset*>                    NamedReferences;                               // 0x0054 (0x000C) [0x0000000014400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse | CPF_EditInlineUse | CPF_EditorOnly)
	class FString                                      SourceFilePath;                                // 0x0060 (0x000C) [0x0000000000420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)
	class FString                                      SourceFileTimestamp;                           // 0x006C (0x000C) [0x0000000000420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexAsset");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexClothingAsset
// 0x005C (0x0078 - 0x00D4)
class UApexClothingAsset : public UApexAsset
{
public:
	class TArray<struct FClothingLodInfo>              LodMaterialInfo;                               // 0x0078 (0x000C) [0x0000000000400043] (CPF_Edit | CPF_Const | CPF_EditFixedSize | CPF_NeedCtorLink)
	struct FPointer                                    MApexAsset;                                    // 0x0084 (0x0004) [0x0000000000001000] (CPF_Native)  
	class TArray<class UMaterialInterface*>            Materials;                                     // 0x0088 (0x000C) [0x0000000000400043] (CPF_Edit | CPF_Const | CPF_EditFixedSize | CPF_NeedCtorLink)
	class UApexGenericAsset*                           ApexClothingLibrary;                           // 0x0094 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	uint32_t                                           bUseHardwareCloth : 1;                         // 0x0098 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bFallbackSkinning : 1;                         // 0x0098 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bSlowStart : 1;                                // 0x0098 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bRecomputeNormals : 1;                         // 0x0098 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowAdaptiveTargetFrequency : 1;             // 0x0098 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bResetAfterTeleport : 1;                       // 0x0098 (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bHasUniqueAssetMaterialNames : 1;              // 0x0098 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           IgnoreInitialTrigger : 1;                      // 0x0098 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	int32_t                                            UVChannelForTangentUpdate;                     // 0x009C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              MaxDistanceBlendTime;                          // 0x00A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ContinuousRotationThreshold;                   // 0x00A4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ContinuousDistanceThreshold;                   // 0x00A8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LodWeightsMaxDistance;                         // 0x00AC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LodWeightsDistanceWeight;                      // 0x00B0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LodWeightsBias;                                // 0x00B4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LodWeightsBenefitsBias;                        // 0x00B8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LODDecayTime;                                  // 0x00BC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class USoundCue*                                   SoundOnMove;                                   // 0x00C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   SoundOnRest;                                   // 0x00C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   SoundWhileMoving;                              // 0x00C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeedThresholdOnMove;                          // 0x00CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeedThresholdOnRest;                          // 0x00D0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexClothingAsset");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexDestructibleAsset
// 0x012C (0x0078 - 0x01A4)
class UApexDestructibleAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                    // 0x0078 (0x0004) [0x0000000000001000] (CPF_Native)  
	class TArray<class UMaterialInterface*>            Materials;                                     // 0x007C (0x000C) [0x0000000000400043] (CPF_Edit | CPF_Const | CPF_EditFixedSize | CPF_NeedCtorLink)
	class TArray<class UFractureMaterial*>             FractureMaterials;                             // 0x0088 (0x000C) [0x0000000000400043] (CPF_Edit | CPF_Const | CPF_EditFixedSize | CPF_NeedCtorLink)
	uint32_t                                           bPlaySingleFractureMaterialEffect : 1;         // 0x0094 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bHasUniqueAssetMaterialNames : 1;              // 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bDynamic : 1;                                  // 0x0094 (0x0004) [0x0000000020000000] [0x00000004]  CPF_Deprecated)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                           // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    MDestructibleThumbnailComponent;               // 0x009C (0x0004) [0x0000000000001000] (CPF_Native)  
	class FString                                      CrumbleEmitterName;                            // 0x00A0 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      DustEmitterName;                               // 0x00AC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FNxDestructibleParameters                   DestructibleParameters;                        // 0x00B8 (0x00EC) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexDestructibleAsset");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexGenericAsset
// 0x0010 (0x0078 - 0x0088)
class UApexGenericAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                    // 0x0078 (0x0004) [0x0000000000001000] (CPF_Native)  
	class TArray<class UMaterialInterface*>            Materials;                                     // 0x007C (0x000C) [0x0000000000400043] (CPF_Edit | CPF_Const | CPF_EditFixedSize | CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexGenericAsset");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpFilter
// 0x000C (0x003C - 0x0048)
class UInterpFilter : public UObject
{
public:
	class FString                                      Caption;                                       // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpFilter");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpFilter_Classes
// 0x0010 (0x0048 - 0x0058)
class UInterpFilter_Classes : public UInterpFilter
{
public:
	class UClass*                                      ClassToFilterBy;                               // 0x0048 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<class UClass*>                        TrackClasses;                                  // 0x004C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpFilter_Classes");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpFilter_Custom
// 0x000C (0x0048 - 0x0054)
class UInterpFilter_Custom : public UInterpFilter
{
public:
	class TArray<class UInterpGroup*>                  GroupsToInclude;                               // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpFilter_Custom");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpGroup
// 0x002C (0x003C - 0x0068)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;               // 0x003C (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	class TArray<class UInterpTrack*>                  InterpTracks;                                  // 0x0040 (0x000C) [0x0000000000400008] (CPF_ExportObject | CPF_NeedCtorLink)
	class FName                                        GroupName;                                     // 0x004C (0x0008) [0x0000000000000000]               
	struct FColor                                      GroupColor;                                    // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UAnimSet*>                      GroupAnimSets;                                 // 0x0058 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bCollapsed : 1;                                // 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bVisible : 1;                                  // 0x0064 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bIsFolder : 1;                                 // 0x0064 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bIsParented : 1;                               // 0x0064 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bIsSelected : 1;                               // 0x0064 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpGroup");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpGroupAI
// 0x0010 (0x0068 - 0x0078)
class UInterpGroupAI : public UInterpGroup
{
public:
	class UClass*                                      PreviewPawnClass;                              // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class FName                                        StageMarkGroup;                                // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           SnapToRootBoneLocationWhenFinished : 1;        // 0x0074 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNoEncroachmentCheck : 1;                      // 0x0074 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDisableWorldCollision : 1;                    // 0x0074 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bIgnoreLegacyHeightAdjust : 1;                 // 0x0074 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bRecreatePreviewPawn : 1;                      // 0x0074 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bRefreshStageMarkGroup : 1;                    // 0x0074 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpGroupAI");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpGroupCamera
// 0x003C (0x0068 - 0x00A4)
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                // 0x0068 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FCameraPreviewInfo                          Target;                                        // 0x006C (0x0034) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	float                                              CompressTolerance;                             // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpGroupCamera");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpGroupDirector
// 0x0000 (0x0068 - 0x0068)
class UInterpGroupDirector : public UInterpGroup
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpGroupDirector");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpGroupInst
// 0x0018 (0x003C - 0x0054)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                         // 0x003C (0x0004) [0x0000000000000000]               
	class AActor*                                      GroupActor;                                    // 0x0040 (0x0004) [0x0000000000000000]               
	class TArray<class UInterpTrackInst*>              TrackInst;                                     // 0x0044 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FPointer                                    CachedCamOverridePostProcess;                  // 0x0050 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpGroupInst");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpGroupInstAI
// 0x0014 (0x0054 - 0x0068)
class UInterpGroupInstAI : public UInterpGroupInst
{
public:
	class UInterpGroupAI*                              AIGroup;                                       // 0x0054 (0x0004) [0x0000000000002000] (CPF_Transient)
	EPhysics                                           SavedPhysics;                                  // 0x0058 (0x0001) [0x0000000000000000]               
	uint32_t                                           bSavedNoEncroachCheck : 1;                     // 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bSavedCollideActors : 1;                       // 0x005C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bSavedBlockActors : 1;                         // 0x005C (0x0004) [0x0000000000000000] [0x00000004] 
	class APawn*                                       PreviewPawn;                                   // 0x0060 (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	class AActor*                                      StageMarkActor;                                // 0x0064 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpGroupInstAI");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0054 - 0x0054)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpGroupInstCamera");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0054 - 0x0054)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackBoolProp
// 0x0014 (0x0080 - 0x0094)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	class TArray<struct FBoolTrackKey>                 BoolTrack;                                     // 0x0080 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FName                                        PropertyName;                                  // 0x008C (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackBoolProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackDirector
// 0x0010 (0x0080 - 0x0090)
class UInterpTrackDirector : public UInterpTrack
{
public:
	class TArray<struct FDirectorTrackCut>             CutTrack;                                      // 0x0080 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bSimulateCameraCutsOnClients : 1;              // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackDirector");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackEvent
// 0x0010 (0x0080 - 0x0090)
class UInterpTrackEvent : public UInterpTrack
{
public:
	class TArray<struct FEventTrackKey>                EventTrack;                                    // 0x0080 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bFireEventsWhenForwards : 1;                   // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFireEventsWhenBackwards : 1;                  // 0x008C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bFireEventsWhenJumpingForwards : 1;            // 0x008C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackEvent");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackFaceFX
// 0x0028 (0x0080 - 0x00A8)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	class TArray<class UFaceFXAnimSet*>                FaceFXAnimSets;                                // 0x0080 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FFaceFXTrackKey>               FaceFXSeqs;                                    // 0x008C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UFaceFXAsset*                                CachedActorFXAsset;                            // 0x0098 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FFaceFXSoundCueKey>            FaceFXSoundCueKeys;                            // 0x009C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackFaceFX");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackFloatBase
// 0x0014 (0x0080 - 0x0094)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                    // 0x0080 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              CurveTension;                                  // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackAnimControl
// 0x0024 (0x0094 - 0x00B8)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	class TArray<class UAnimSet*>                      AnimSets;                                      // 0x0094 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FName                                        SlotName;                                      // 0x00A0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FAnimControlTrackKey>          AnimSeqs;                                      // 0x00A8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bEnableRootMotion : 1;                         // 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSkipAnimNotifiers : 1;                        // 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackFade
// 0x0004 (0x0094 - 0x0098)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	uint32_t                                           bPersistFade : 1;                              // 0x0094 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackFade");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackFloatMaterialParam
// 0x001C (0x0094 - 0x00B0)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	class TArray<struct FMaterialReferenceList>        Materials;                                     // 0x0094 (0x000C) [0x0000000000480003] (CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink)
	class UMaterialInterface*                          Material;                                      // 0x00A0 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class FName                                        ParamName;                                     // 0x00A4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNeedsMaterialRefsUpdate : 1;                  // 0x00AC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0094 - 0x009C)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	class FName                                        ParamName;                                     // 0x0094 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0094 - 0x009C)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	class FName                                        PropertyName;                                  // 0x0094 (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackMorphWeight
// 0x0008 (0x0094 - 0x009C)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	class FName                                        MorphNodeName;                                 // 0x0094 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackMorphWeight");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackMoveAxis
// 0x0010 (0x0094 - 0x00A4)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	EInterpMoveAxis                                    MoveAxis;                                      // 0x0094 (0x0001) [0x0000000000000000]               
	struct FInterpLookupTrack                          LookupTrack;                                   // 0x0098 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackMoveAxis");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackSkelControlScale
// 0x0008 (0x0094 - 0x009C)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	class FName                                        SkelControlName;                               // 0x0094 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackSkelControlScale");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackSkelControlStrength
// 0x0008 (0x0094 - 0x009C)
class UInterpTrackSkelControlStrength : public UInterpTrackFloatBase
{
public:
	class FName                                        SkelControlName;                               // 0x0094 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackSkelControlStrength");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackSlomo
// 0x0000 (0x0094 - 0x0094)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackSlomo");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackHeadTracking
// 0x0044 (0x0080 - 0x00C4)
class UInterpTrackHeadTracking : public UInterpTrack
{
public:
	class TArray<struct FHeadTrackingKey>              HeadTrackingTrack;                             // 0x0080 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FName>                          TrackControllerName;                           // 0x008C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              LookAtActorRadius;                             // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDisableBeyondLimit : 1;                       // 0x009C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLookAtPawns : 1;                              // 0x009C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              MaxLookAtTime;                                 // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinLookAtTime;                                 // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxInterestTime;                               // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UClass*>                        ActorClassesToLookAt;                          // 0x00AC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FName>                          TargetBoneNames;                               // 0x00B8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackHeadTracking");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackLinearColorBase
// 0x0014 (0x0080 - 0x0094)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                              // 0x0080 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              CurveTension;                                  // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x0094 - 0x009C)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	class FName                                        PropertyName;                                  // 0x0094 (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackMove
// 0x0042 (0x0080 - 0x00C2)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                      // 0x0080 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FInterpCurveVector                          EulerTrack;                                    // 0x0090 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FInterpLookupTrack                          LookupTrack;                                   // 0x00A0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FName                                        LookAtGroupName;                               // 0x00AC (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              LinCurveTension;                               // 0x00B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngCurveTension;                               // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseQuatInterpolation : 1;                     // 0x00BC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bShowArrowAtKeys : 1;                          // 0x00BC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDisableMovement : 1;                          // 0x00BC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bShowTranslationOnCurveEd : 1;                 // 0x00BC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bShowRotationOnCurveEd : 1;                    // 0x00BC (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bHide3DTrack : 1;                              // 0x00BC (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	EInterpTrackMoveFrame                              MoveFrame;                                     // 0x00C0 (0x0001) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	EInterpTrackMoveRotMode                            RotMode;                                       // 0x00C1 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackMove");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackNotify
// 0x0020 (0x0080 - 0x00A0)
class UInterpTrackNotify : public UInterpTrack
{
public:
	class UAnimNodeSequence*                           Node;                                          // 0x0080 (0x0004) [0x0000000000000000]               
	class FName                                        ParentNodeName;                                // 0x0084 (0x0008) [0x0000000000000000]               
	class UAnimSequence*                               OuterSequence;                                 // 0x008C (0x0004) [0x0000000000000000]               
	class UAnimSet*                                    OuterSet;                                      // 0x0090 (0x0004) [0x0000000000000000]               
	class TArray<struct FNotifyTrackKey>               NotifyTrack;                                   // 0x0094 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackNotify");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackParticleReplay
// 0x0014 (0x0080 - 0x0094)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	class TArray<struct FParticleReplayTrackKey>       TrackKeys;                                     // 0x0080 (0x000C) [0x0000000004400000] (CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bIsCapturingReplay : 1;                        // 0x008C (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient | CPF_EditorOnly)
	float                                              FixedTimeStep;                                 // 0x0090 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackToggle
// 0x0010 (0x0080 - 0x0090)
class UInterpTrackToggle : public UInterpTrack
{
public:
	class TArray<struct FToggleTrackKey>               ToggleTrack;                                   // 0x0080 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bActivateSystemEachUpdate : 1;                 // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bActivateWithJustAttachedFlag : 1;             // 0x008C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bFireEventsWhenForwards : 1;                   // 0x008C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bFireEventsWhenBackwards : 1;                  // 0x008C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bFireEventsWhenJumpingForwards : 1;            // 0x008C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackToggle");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackVectorBase
// 0x0014 (0x0080 - 0x0094)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                   // 0x0080 (0x0010) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              CurveTension;                                  // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0094 - 0x0094)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackColorProp
// 0x0008 (0x0094 - 0x009C)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	class FName                                        PropertyName;                                  // 0x0094 (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackColorProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackColorScale
// 0x0000 (0x0094 - 0x0094)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackColorScale");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackSound
// 0x0010 (0x0094 - 0x00A4)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	class TArray<struct FSoundTrackKey>                Sounds;                                        // 0x0094 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bPlayOnReverse : 1;                            // 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bContinueSoundOnMatineeEnd : 1;                // 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSuppressSubtitles : 1;                        // 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bTreatAsDialogue : 1;                          // 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackSound");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackVectorMaterialParam
// 0x001C (0x0094 - 0x00B0)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	class TArray<struct FMaterialReferenceList>        Materials;                                     // 0x0094 (0x000C) [0x0000000000480003] (CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink)
	class UMaterialInterface*                          Material;                                      // 0x00A0 (0x0004) [0x0000000020000002] (CPF_Const | CPF_Deprecated)
	class FName                                        ParamName;                                     // 0x00A4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNeedsMaterialRefsUpdate : 1;                  // 0x00AC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0094 - 0x009C)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	class FName                                        PropertyName;                                  // 0x0094 (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackVisibility
// 0x0010 (0x0080 - 0x0090)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	class TArray<struct FVisibilityTrackKey>           VisibilityTrack;                               // 0x0080 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bFireEventsWhenForwards : 1;                   // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFireEventsWhenBackwards : 1;                  // 0x008C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bFireEventsWhenJumpingForwards : 1;            // 0x008C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackVisibility");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInst
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInst : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInst");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstAnimControl
// 0x001C (0x003C - 0x0058)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                            // 0x003C (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     InitPosition;                                  // 0x0040 (0x000C) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	struct FRotator                                    InitRotation;                                  // 0x004C (0x000C) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstDirector
// 0x0008 (0x003C - 0x0044)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                 // 0x003C (0x0004) [0x0000000000000000]               
	struct FRenderingPerformanceOverrides              OldRenderingOverrides;                         // 0x0040 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstEvent
// 0x0004 (0x003C - 0x0040)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                            // 0x003C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstFaceFX
// 0x0008 (0x003C - 0x0044)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	uint32_t                                           bFirstUpdate : 1;                              // 0x003C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	float                                              LastUpdatePosition;                            // 0x0040 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFaceFX");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstFade
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFade");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0010 (0x003C - 0x004C)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	class TArray<struct FFloatMaterialParamMICData>    MICInfos;                                      // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                // 0x0048 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x003C - 0x0040)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                    // 0x003C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstHeadTracking
// 0x0054 (0x003C - 0x0090)
class UInterpTrackInstHeadTracking : public UInterpTrackInst
{
public:
	EHeadTrackingAction                                Action;                                        // 0x003C (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            UnknownData00[0x3F];                            // 0x003D (0x003F) MISSED OFFSET
	class USkeletalMeshComponent*                      Mesh;                                          // 0x007C (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class TArray<class USkelControlLookAt*>            TrackControls;                                 // 0x0080 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              LastUpdatePosition;                            // 0x008C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstHeadTracking");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstMorphWeight
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstMorphWeight");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstMove
// 0x0074 (0x003C - 0x00B0)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                 // 0x003C (0x000C) [0x0000000000000000]               
	struct FRotator                                    ResetRotation;                                 // 0x0048 (0x000C) [0x0000000000000000]               
	uint8_t                                            UnknownData00[0xC];                              // 0x0054 (0x000C) MISSED OFFSET
	struct FMatrix                                     InitialTM;                                     // 0x0060 (0x0040) [0x0000000000000000]               
	struct FQuat                                       InitialQuat;                                   // 0x00A0 (0x0010) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstMove");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstNotify
// 0x0004 (0x003C - 0x0040)
class UInterpTrackInstNotify : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                            // 0x003C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstNotify");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstParticleReplay
// 0x0004 (0x003C - 0x0040)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                            // 0x003C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstProperty
// 0x0008 (0x003C - 0x0044)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                        // 0x003C (0x0004) [0x0000000000000000]               
	class UObject*                                     PropertyOuterObjectInst;                       // 0x0040 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstBoolProp
// 0x000C (0x0044 - 0x0050)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    BoolProp;                                      // 0x0044 (0x0004) [0x0000000000000000]               
	int32_t                                            BitMask;                                       // 0x0048 (0x0004) [0x0000000000000000]               
	uint32_t                                           ResetBool : 1;                                 // 0x004C (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstBoolProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstColorProp
// 0x0008 (0x0044 - 0x004C)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                     // 0x0044 (0x0004) [0x0000000000000000]               
	struct FColor                                      ResetColor;                                    // 0x0048 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstFloatProp
// 0x000C (0x0044 - 0x0050)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                     // 0x0044 (0x0004) [0x0000000000000000]               
	float                                              ResetFloat;                                    // 0x0048 (0x0004) [0x0000000000000000]               
	struct FPointer                                    DistributionProp;                              // 0x004C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstLinearColorProp
// 0x0014 (0x0044 - 0x0058)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                     // 0x0044 (0x0004) [0x0000000000000000]               
	struct FLinearColor                                ResetColor;                                    // 0x0048 (0x0010) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstVectorProp
// 0x0010 (0x0044 - 0x0054)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                    // 0x0044 (0x0004) [0x0000000000000000]               
	struct FVector                                     ResetVector;                                   // 0x0048 (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstSkelControlScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstSkelControlScale");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstSkelControlStrength
// 0x0004 (0x003C - 0x0040)
class UInterpTrackInstSkelControlStrength : public UInterpTrackInst
{
public:
	uint32_t                                           bSavedControlledByAnimMetaData : 1;            // 0x003C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstSkelControlStrength");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x003C - 0x0040)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                               // 0x003C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstSound
// 0x0008 (0x003C - 0x0044)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                            // 0x003C (0x0004) [0x0000000000000000]               
	class UAudioComponent*                             PlayAudioComp;                                 // 0x0040 (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstSound");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstToggle
// 0x000C (0x003C - 0x0048)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	ETrackToggleAction                                 Action;                                        // 0x003C (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              LastUpdatePosition;                            // 0x0040 (0x0004) [0x0000000000000000]               
	uint32_t                                           bSavedActiveState : 1;                         // 0x0044 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0010 (0x003C - 0x004C)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	class TArray<struct FVectorMaterialParamMICData>   MICInfos;                                      // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                // 0x0048 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x003C - 0x0044)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	EVisibilityTrackAction                             Action;                                        // 0x003C (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              LastUpdatePosition;                            // 0x0040 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpression
// 0x0044 (0x003C - 0x0080)
class UMaterialExpression : public UObject
{
public:
	int32_t                                            EditorX;                                       // 0x003C (0x0004) [0x0000000020000000]  CPF_Deprecated)
	int32_t                                            EditorY;                                       // 0x0040 (0x0004) [0x0000000020000000]  CPF_Deprecated)
	int32_t                                            MaterialExpressionEditorX;                     // 0x0044 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            MaterialExpressionEditorY;                     // 0x0048 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	uint32_t                                           bRealtimePreview : 1;                          // 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bNeedToUpdatePreview : 1;                      // 0x004C (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bIsParameterExpression : 1;                    // 0x004C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bShowOutputNameOnPin : 1;                      // 0x004C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bHidePreviewWindow : 1;                        // 0x004C (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bShowInputs : 1;                               // 0x004C (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bShowOutputs : 1;                              // 0x004C (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bUsedByStaticParameterSet : 1;                 // 0x004C (0x0004) [0x0000000000000000] [0x00000080] 
	class UMaterial*                                   Material;                                      // 0x0050 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UMaterialFunction*                           Function;                                      // 0x0054 (0x0004) [0x0000000000000002] (CPF_Const)   
	class FString                                      Desc;                                          // 0x0058 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FColor                                      BorderColor;                                   // 0x0064 (0x0004) [0x0000000000000000]               
	class TArray<class FName>                          MenuCategories;                                // 0x0068 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FExpressionOutput>             Outputs;                                       // 0x0074 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpression");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionAbs
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionActorWorldPosition
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionActorWorldPosition : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionActorWorldPosition");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionAdd
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionAppendVector
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionBumpOffset
// 0x008C (0x0080 - 0x010C)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                    // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Height;                                        // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            HeightRatioInput;                              // 0x00D8 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              HeightRatio;                                   // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ReferencePlane;                                // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionCameraVector
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCameraVector");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionCameraWorldPosition
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCameraWorldPosition");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionCeil
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionClamp
// 0x0084 (0x0080 - 0x0104)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Min;                                           // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Max;                                           // 0x00D8 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionComment
// 0x001C (0x0080 - 0x009C)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int32_t                                            PosX;                                          // 0x0080 (0x0004) [0x0000000000000000]               
	int32_t                                            PosY;                                          // 0x0084 (0x0004) [0x0000000000000000]               
	int32_t                                            SizeX;                                         // 0x0088 (0x0004) [0x0000000000000000]               
	int32_t                                            SizeY;                                         // 0x008C (0x0004) [0x0000000000000000]               
	class FString                                      Text;                                          // 0x0090 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionComment");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionComponentMask
// 0x0030 (0x0080 - 0x00B0)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           R : 1;                                         // 0x00AC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           G : 1;                                         // 0x00AC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           B : 1;                                         // 0x00AC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           A : 1;                                         // 0x00AC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionConstant
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                             // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0080 - 0x0088)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                             // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              G;                                             // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionConstant3Vector
// 0x000C (0x0080 - 0x008C)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                             // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              G;                                             // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              B;                                             // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0080 - 0x0090)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                             // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              G;                                             // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              B;                                             // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              A;                                             // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0034 (0x0080 - 0x00B4)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              Bias;                                          // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Scale;                                         // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionConstantClamp
// 0x0034 (0x0080 - 0x00B4)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              Min;                                           // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Max;                                           // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstantClamp");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionCosine
// 0x0030 (0x0080 - 0x00B0)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              Period;                                        // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionCrossProduct
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionCustom
// 0x0028 (0x0080 - 0x00A8)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	class FString                                      Code;                                          // 0x0080 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditTextBox)
	ECustomMaterialOutputType                          OutputType;                                    // 0x008C (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FString                                      Description;                                   // 0x0090 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FCustomInput>                  Inputs;                                        // 0x009C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCustom");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionCustomTexture
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionCustomTexture : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                       // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCustomTexture");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDepthBiasedAlpha
// 0x0060 (0x0080 - 0x00E0)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	uint32_t                                           bNormalize : 1;                                // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              BiasScale;                                     // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FExpressionInput                            Alpha;                                         // 0x0088 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Bias;                                          // 0x00B4 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedAlpha");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDepthBiasedBlend
// 0x008C (0x0080 - 0x010C)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	uint32_t                                           bNormalize : 1;                                // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              BiasScale;                                     // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FExpressionInput                            RGB;                                           // 0x0088 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Alpha;                                         // 0x00B4 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Bias;                                          // 0x00E0 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedBlend");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0030 (0x0080 - 0x00B0)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	EDepthOfFieldFunctionValue                         FunctionValue;                                 // 0x0080 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FExpressionInput                            Depth;                                         // 0x0084 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDepthOfFieldFunction");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                          // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDesaturation
// 0x0068 (0x0080 - 0x00E8)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Percent;                                       // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FLinearColor                                LuminanceFactors;                              // 0x00D8 (0x0010) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDestColor
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDestColor");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDestDepth
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	uint32_t                                           bNormalize : 1;                                // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDestDepth");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDistance
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDistance");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDivide
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDotProduct
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDynamicParameter
// 0x000C (0x0080 - 0x008C)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	class TArray<class FString>                        ParamNames;                                    // 0x0080 (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionMeshEmitterDynamicParameter
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionMeshEmitterDynamicParameter : public UMaterialExpressionDynamicParameter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMeshEmitterDynamicParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFloor
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFluidNormal
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                   // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFluidNormal");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFmod
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFmod");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFoliageImpulseDirection
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionFoliageImpulseDirection : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFoliageImpulseDirection");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionFoliageNormalizedRotationAxisAndAngle : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFontSample
// 0x0008 (0x0080 - 0x0088)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                          // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            FontTexturePage;                               // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (0x0088 - 0x00A8)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	class FName                                        ParameterName;                                 // 0x0088 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FGuid                                       ExpressionGUID;                                // 0x0090 (0x0010) [0x0000000000000002] (CPF_Const)   
	class FName                                        Group;                                         // 0x00A0 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFrac
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFresnel
// 0x0030 (0x0080 - 0x00B0)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                      // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FExpressionInput                            Normal;                                        // 0x0084 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFunctionInput
// 0x0078 (0x0080 - 0x00F8)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                       // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      InputName;                                     // 0x00AC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      Description;                                   // 0x00B8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FGuid                                       Id;                                            // 0x00C4 (0x0010) [0x0000000000000002] (CPF_Const)   
	EFunctionInputType                                 InputType;                                     // 0x00D4 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            UnknownData00[0xB];                              // 0x00D5 (0x000B) MISSED OFFSET
	struct FVector4                                    PreviewValue;                                  // 0x00E0 (0x0010) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUsePreviewValueAsDefault : 1;                 // 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCompilingFunctionPreview : 1;                 // 0x00F0 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	int32_t                                            SortPriority;                                  // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFunctionInput");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFunctionOutput
// 0x005C (0x0080 - 0x00DC)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	class FString                                      OutputName;                                    // 0x0080 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      Description;                                   // 0x008C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            SortPriority;                                  // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FExpressionInput                            A;                                             // 0x009C (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bLastPreviewed : 1;                            // 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FGuid                                       Id;                                            // 0x00CC (0x0010) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFunctionOutput");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionIf
// 0x00DC (0x0080 - 0x015C)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            AGreaterThanB;                                 // 0x00D8 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            AEqualsB;                                      // 0x0104 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            ALessThanB;                                    // 0x0130 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionIf");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLandscapeLayerBlend
// 0x001C (0x0080 - 0x009C)
class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
{
public:
	class TArray<struct FLayerBlendInput>              Layers;                                        // 0x0080 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FGuid                                       ExpressionGUID;                                // 0x008C (0x0010) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLandscapeLayerBlend");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLensFlareIntensity
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareIntensity");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLensFlareOcclusion
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareOcclusion");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLensFlareRadialDistance
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRadialDistance");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLensFlareRayDistance
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRayDistance");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLensFlareSourceDistance
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareSourceDistance");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLightmassReplace
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                      // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Lightmass;                                     // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionLinearInterpolate
// 0x0084 (0x0080 - 0x0104)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Alpha;                                         // 0x00D8 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x001C (0x0080 - 0x009C)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                           MaterialFunction;                              // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FFunctionExpressionInput>      FunctionInputs;                                // 0x0084 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FFunctionExpressionOutput>     FunctionOutputs;                               // 0x0090 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMaterialFunctionCall");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionMeshEmitterVertexColor
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMeshEmitterVertexColor");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionMultiply
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionNormalize
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                   // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionObjectWorldPosition
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionObjectWorldPosition : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionObjectWorldPosition");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionOcclusionPercentage
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionOcclusionPercentage : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionOcclusionPercentage");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionOneMinus
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionPanner
// 0x0060 (0x0080 - 0x00E0)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                    // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Time;                                          // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              SpeedX;                                        // 0x00D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpeedY;                                        // 0x00DC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionParameter
// 0x0020 (0x0080 - 0x00A0)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	class FName                                        ParameterName;                                 // 0x0080 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FGuid                                       ExpressionGUID;                                // 0x0088 (0x0010) [0x0000000000000002] (CPF_Const)   
	class FName                                        Group;                                         // 0x0098 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionScalarParameter
// 0x0004 (0x00A0 - 0x00A4)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                  // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x00A0 - 0x00A8)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	uint32_t                                           DefaultValue : 1;                              // 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           ExtendedCaptionDisplay : 1;                    // 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FPointer                                    InstanceOverride;                              // 0x00A4 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionStaticBoolParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0058 (0x00A8 - 0x0100)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                             // 0x00A8 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00D4 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0034 (0x00A0 - 0x00D4)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                         // 0x00A0 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           DefaultR : 1;                                  // 0x00CC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           DefaultG : 1;                                  // 0x00CC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           DefaultB : 1;                                  // 0x00CC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           DefaultA : 1;                                  // 0x00CC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	struct FPointer                                    InstanceOverride;                              // 0x00D0 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x00A0 - 0x00B0)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                  // 0x00A0 (0x0010) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:
	uint32_t                                           bUseViewSpace : 1;                             // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionPixelDepth
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	uint32_t                                           bNormalize : 1;                                // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionPower
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                          // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Exponent;                                      // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionPower");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionQualitySwitch
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            High;                                          // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Low;                                           // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionQualitySwitch");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionQualitySwitchPS3
// 0x005C (0x0080 - 0x00DC)
class UMaterialExpressionQualitySwitchPS3 : public UMaterialExpression
{
public:
	uint32_t                                           bIgnorePreview : 1;                            // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FExpressionInput                            PCNode;                                        // 0x0084 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            PS3Node;                                       // 0x00B0 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionQualitySwitchPS3");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionREDWorldNormal
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionREDWorldNormal : public UMaterialExpression
{
public:
	uint32_t                                           bExplicit : 1;                                 // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionREDWorldNormal");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionReflectionVector
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionReflectionVector");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0084 (0x0080 - 0x0104)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxisAndAngle;                // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            PositionOnAxis;                                // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Position;                                      // 0x00D8 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionRotator
// 0x0064 (0x0080 - 0x00E4)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                    // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Time;                                          // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              CenterX;                                       // 0x00D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CenterY;                                       // 0x00DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Speed;                                         // 0x00E0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionSceneDepth
// 0x0030 (0x0080 - 0x00B0)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                   // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bNormalize : 1;                                // 0x00AC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionSceneTexture
// 0x0034 (0x0080 - 0x00B4)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                   // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	ESceneTextureType                                  SceneTextureType;                              // 0x00AC (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           ScreenAlign : 1;                               // 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionScreenPosition
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	uint32_t                                           ScreenAlign : 1;                               // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionScreenSize
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionScreenSize : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionScreenSize");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionSine
// 0x0030 (0x0080 - 0x00B0)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              Period;                                        // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSine");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionSphereMask
// 0x00B8 (0x0080 - 0x0138)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Radius;                                        // 0x00D8 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Hardness;                                      // 0x0104 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              AttenuationRadius;                             // 0x0130 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HardnessPercent;                               // 0x0134 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionSquareRoot
// 0x002C (0x0080 - 0x00AC)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionStaticBool
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	uint32_t                                           Value : 1;                                     // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionStaticBool");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionStaticSwitch
// 0x0088 (0x0080 - 0x0108)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	uint32_t                                           DefaultValue : 1;                              // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           ExtendedCaptionDisplay : 1;                    // 0x0080 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FExpressionInput                            A;                                             // 0x0084 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00B0 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Value;                                         // 0x00DC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitch");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionSubtract
// 0x0058 (0x0080 - 0x00D8)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                             // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            B;                                             // 0x00AC (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTerrainLayerCoords
// 0x0014 (0x0080 - 0x0094)
class UMaterialExpressionTerrainLayerCoords : public UMaterialExpression
{
public:
	ETerrainCoordMappingType                           MappingType;                                   // 0x0080 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              MappingScale;                                  // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MappingRotation;                               // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MappingPanU;                                   // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MappingPanV;                                   // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTerrainLayerCoords");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTerrainLayerSwitch
// 0x0078 (0x0080 - 0x00F8)
class UMaterialExpressionTerrainLayerSwitch : public UMaterialExpression
{
public:
	struct FPointer                                    InstanceOverride;                              // 0x0080 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FExpressionInput                            LayerUsed;                                     // 0x0084 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            LayerNotUsed;                                  // 0x00B0 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FName                                        ParameterName;                                 // 0x00DC (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           PreviewUsed : 1;                               // 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FGuid                                       ExpressionGUID;                                // 0x00E8 (0x0010) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTerrainLayerSwitch");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTerrainLayerWeight
// 0x0078 (0x0080 - 0x00F8)
class UMaterialExpressionTerrainLayerWeight : public UMaterialExpression
{
public:
	struct FPointer                                    InstanceOverride;                              // 0x0080 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FExpressionInput                            Base;                                          // 0x0084 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            Layer;                                         // 0x00B0 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FName                                        ParameterName;                                 // 0x00DC (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              PreviewWeight;                                 // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FGuid                                       ExpressionGUID;                                // 0x00E8 (0x0010) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTerrainLayerWeight");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTexelSize
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTexelSize : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTexelSize");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0080 - 0x0090)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int32_t                                            CoordinateIndex;                               // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              UTiling;                                       // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VTiling;                                       // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           UnMirrorU : 1;                                 // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           UnMirrorV : 1;                                 // 0x008C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureObject
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionTextureObject : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                       // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureObject");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSample
// 0x005C (0x0080 - 0x00DC)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                       // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FExpressionInput                            Coordinates;                                   // 0x0084 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FExpressionInput                            TextureObject;                                 // 0x00B0 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionDepthBiasBlend
// 0x0034 (0x00DC - 0x0110)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	uint32_t                                           bNormalize : 1;                                // 0x00DC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              BiasScale;                                     // 0x00E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FExpressionInput                            Bias;                                          // 0x00E4 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasBlend");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionFlipBookSample
// 0x0000 (0x00DC - 0x00DC)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFlipBookSample");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionMeshSubUV
// 0x0000 (0x00DC - 0x00DC)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMeshSubUV");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionMeshSubUVBlend
// 0x0000 (0x00DC - 0x00DC)
class UMaterialExpressionMeshSubUVBlend : public UMaterialExpressionMeshSubUV
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMeshSubUVBlend");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionParticleSubUV
// 0x0000 (0x00DC - 0x00DC)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (0x00DC - 0x00FC)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	class FName                                        ParameterName;                                 // 0x00DC (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FGuid                                       ExpressionGUID;                                // 0x00E4 (0x0010) [0x0000000000000002] (CPF_Const)   
	class FName                                        Group;                                         // 0x00F4 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureObjectParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0005 (0x00FC - 0x0101)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                     // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	ETextureColorChannel                               Channel;                                       // 0x0100 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameterFlipbook
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterFlipbook : public UMaterialExpressionTextureSampleParameter2D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterFlipbook");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterMeshSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterMeshSubUVBlend : public UMaterialExpressionTextureSampleParameterMeshSubUV
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameterMovie
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMovie");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTextureSampleParameterNormal
// 0x0004 (0x00FC - 0x0100)
class UMaterialExpressionTextureSampleParameterNormal : public UMaterialExpressionTextureSampleParameter
{
public:
	struct FPointer                                    InstanceOverride;                              // 0x00FC (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterNormal");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTime
// 0x0004 (0x0080 - 0x0084)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	uint32_t                                           bIgnorePause : 1;                              // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTime");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTransform
// 0x002E (0x0080 - 0x00AE)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	EMaterialVectorCoordTransformSource                TransformSourceType;                           // 0x00AC (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EMaterialVectorCoordTransform                      TransformType;                                 // 0x00AD (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTransformPosition
// 0x002E (0x0080 - 0x00AE)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                         // 0x0080 (0x002C) [0x0000000000400000] (CPF_NeedCtorLink)
	EMaterialPositionTransformSource                   TransformSourceType;                           // 0x00AC (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EMaterialPositionTransform                         TransformType;                                 // 0x00AD (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionWindDirectionAndSpeed
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionWindDirectionAndSpeed : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionWindDirectionAndSpeed");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionWorldNormal
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionWorldNormal : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionWorldNormal");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialExpressionWorldPosition
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialFunction
// 0x0048 (0x003C - 0x0084)
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                       StateId;                                       // 0x003C (0x0010) [0x0000000000200000]               
	class UMaterialFunction*                           ParentFunction;                                // 0x004C (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	class FString                                      Description;                                   // 0x0050 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bExposeToLibrary : 1;                          // 0x005C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bReentrantFlag : 1;                            // 0x005C (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	class TArray<class FString>                        LibraryCategories;                             // 0x0060 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UMaterialExpression*>           FunctionExpressions;                           // 0x006C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UMaterialExpressionComment*>    FunctionEditorComments;                        // 0x0078 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialFunction");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialInstance
// 0x0060 (0x01E8 - 0x0248)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                  // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          Parent;                                        // 0x01EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTexture2D*                                  PhysMaterialMask;                              // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            PhysMaterialMaskUVChannel;                     // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                         // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                         // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bHasStaticPermutationResource : 1;             // 0x0200 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bStaticPermutationDirty : 1;                   // 0x0200 (0x0004) [0x0000000000003000] [0x00000002] (CPF_Native | CPF_Transient)
	uint32_t                                           ReentrantFlag : 1;                             // 0x0200 (0x0004) [0x0000000000001002] [0x00000004] (CPF_Const | CPF_Native)
	uint32_t                                           bNeedsMaterialFlattening : 1;                  // 0x0200 (0x0004) [0x0000000000002002] [0x00000008] (CPF_Const | CPF_Transient)
	struct FPointer                                    StaticParameters[2];                           // 0x0204 (0x0008) [0x0000000000201002] (CPF_Const | CPF_Native)
	struct FPointer                                    StaticPermutationResources[2];                 // 0x020C (0x0008) [0x0000000000201002] (CPF_Const | CPF_Native)
	struct FPointer                                    Resources[3];                                  // 0x0214 (0x000C) [0x0000000000201002] (CPF_Const | CPF_Native)
	class TArray<class UTexture*>                      ReferencedTextures;                            // 0x0220 (0x000C) [0x0000000020400002] (CPF_Const | CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FGuid>                         ReferencedTextureGuids;                        // 0x022C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink | CPF_EditorOnly)
	struct FGuid                                       ParentLightingGuid;                            // 0x0238 (0x0010) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialInstance");
		}

		return uClassPointer;
	};

	bool IsInMapOrTransientPackage();
	void ClearParameterValues();
	void SetFontParameterValue(const class FName& ParameterName, class UFont* FontValue, int32_t FontPage);
	bool GetTextureParameterValue(const class FName& ParameterName, class UTexture*& outValue);
	void SetTextureParameterValue(const class FName& ParameterName, class UTexture* Value);
	void SetScalarCurveParameterValue(const class FName& ParameterName, struct FInterpCurveFloat& outValue);
	void SetScalarParameterValue(const class FName& ParameterName, float Value);
	void SetVectorParameterValue(const class FName& ParameterName, struct FLinearColor& outValue);
	void SetParent(class UMaterialInterface* NewParent);
};

// Class Engine.MaterialInstanceConstant
// 0x0030 (0x0248 - 0x0278)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	class TArray<struct FFontParameterValue>           FontParameterValues;                           // 0x0248 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FScalarParameterValue>         ScalarParameterValues;                         // 0x0254 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FTextureParameterValue>        TextureParameterValues;                        // 0x0260 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FVectorParameterValue>         VectorParameterValues;                         // 0x026C (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		}

		return uClassPointer;
	};

	void ClearParameterValues();
	bool GetMobileVectorParameterValue(const class FName& ParameterName, struct FLinearColor& outOutValue);
	bool GetMobileTextureParameterValue(const class FName& ParameterName, class UTexture*& outOutValue);
	bool GetMobileScalarParameterValue(const class FName& ParameterName, float& outOutValue);
	void SetFontParameterValue(const class FName& ParameterName, class UFont* FontValue, int32_t FontPage);
	void SetVectorParameterValue(const class FName& ParameterName, struct FLinearColor& outValue);
	void SetTextureParameterValue(const class FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValue(const class FName& ParameterName, float Value);
	void SetParent(class UMaterialInterface* NewParent);
};

// Class Engine.LandscapeMaterialInstanceConstant
// 0x000C (0x0278 - 0x0284)
class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
{
public:
	uint32_t                                           bIsLayerThumbnail : 1;                         // 0x0278 (0x0004) [0x0000000000000000] [0x00000001] 
	int32_t                                            DataWeightmapIndex;                            // 0x027C (0x0004) [0x0000000000000000]               
	int32_t                                            DataWeightmapSize;                             // 0x0280 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeMaterialInstanceConstant");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialInstanceTimeVarying
// 0x0044 (0x0248 - 0x028C)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	uint32_t                                           bAutoActivateAll : 1;                          // 0x0248 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              Duration;                                      // 0x024C (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FFontParameterValueOverTime>   FontParameterValues;                           // 0x0250 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FScalarParameterValueOverTime> ScalarParameterValues;                         // 0x025C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FTextureParameterValueOverTime> TextureParameterValues;                        // 0x0268 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FVectorParameterValueOverTime> VectorParameterValues;                         // 0x0274 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FLinearColorParameterValueOverTime> LinearColorParameterValues;                    // 0x0280 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialInstanceTimeVarying");
		}

		return uClassPointer;
	};

	bool CheckForVectorParameterConflicts(const class FName& ParameterName);
	float GetMaxDurationFromAllParameters();
	void ClearParameterValues();
	void SetFontParameterValue(const class FName& ParameterName, class UFont* FontValue, int32_t FontPage);
	void SetVectorStartTime(const class FName& ParameterName, float Value);
	void SetLinearColorCurveParameterValue(const class FName& ParameterName, struct FInterpCurveLinearColor& outValue);
	void SetLinearColorParameterValue(const class FName& ParameterName, struct FLinearColor& outValue);
	void SetVectorCurveParameterValue(const class FName& ParameterName, struct FInterpCurveVector& outValue);
	void SetVectorParameterValue(const class FName& ParameterName, struct FLinearColor& outValue);
	void SetTextureParameterValue(const class FName& ParameterName, class UTexture* Value);
	void SetDuration(float Value);
	void SetScalarStartTime(const class FName& ParameterName, float Value);
	void SetScalarCurveParameterValue(const class FName& ParameterName, struct FInterpCurveFloat& outValue);
	void SetScalarParameterValue(const class FName& ParameterName, float Value);
	void SetParent(class UMaterialInterface* NewParent);
};

// Class Engine.EmitterCameraLensEffectBase
// 0x0024 (0x01D4 - 0x01F8)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                               // 0x01D4 (0x0004) [0x0000000000000000]               
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;              // 0x01D8 (0x0004) [0x0000000000000000]               
	float                                              BaseFOV;                                       // 0x01DC (0x0004) [0x0000000000000000]               
	float                                              DistFromCamera;                                // 0x01E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowMultipleInstances : 1;                   // 0x01E4 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const | CPF_ProtectedWrite)
	class TArray<class UClass*>                        EmittersToTreatAsSame;                         // 0x01E8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class ACamera*                                     BaseCamera;                                    // 0x01F4 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		}

		return uClassPointer;
	};

	void UpdateLocation(float CamFOVDeg, struct FVector& outCamLoc, struct FRotator& outCamRot);
	void ActivateLensEffect();
	void PostBeginPlay();
	void NotifyRetriggered();
	void RegisterCamera(class ACamera* C);
	void Destroyed();
};

// Class Engine.ParticleEventManager
// 0x0000 (0x01C8 - 0x01C8)
class AParticleEventManager : public AActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleEventManager");
		}

		return uClassPointer;
	};

	void eventHandleParticleModuleEventSendToGame(class UParticleModuleEventSendToGame* InEvent, struct FVector& outInCollideDirection, struct FVector& outInHitLocation, struct FVector& outInHitNormal, class FName& outInBoneName);
};

// Class Engine.ParticleSystemComponent
// 0x012C (0x01D8 - 0x0304)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                      // 0x01D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      LightEnvironmentClass;                         // 0x01DC (0x0004) [0x0000000000000000]               
	class AActor*                                      LightEnvironmentSharedInstigator;              // 0x01E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            MaxLightEnvironmentPooledReuses;               // 0x01E4 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FPointer>                      EmitterInstances;                              // 0x01E8 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class UStaticMeshComponent*>          SMComponents;                                  // 0x01F4 (0x000C) [0x000000000468200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UMaterialInterface*>            SMMaterialInterfaces;                          // 0x0200 (0x000C) [0x0000000000602002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class USkeletalMeshComponent*>        SkelMeshComponents;                            // 0x020C (0x000C) [0x000000000468200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FViewParticleEmitterInstanceMotionBlurInfo> ViewMBInfoArray;                               // 0x0218 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	uint32_t                                           bAutoActivate : 1;                             // 0x0224 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bWasCompleted : 1;                             // 0x0224 (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           bSuppressSpawning : 1;                         // 0x0224 (0x0004) [0x0000000000002002] [0x00000004] (CPF_Const | CPF_Transient)
	uint32_t                                           bWasDeactivated : 1;                           // 0x0224 (0x0004) [0x0000000000002002] [0x00000008] (CPF_Const | CPF_Transient)
	uint32_t                                           bResetOnDetach : 1;                            // 0x0224 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bUpdateOnDedicatedServer : 1;                  // 0x0224 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bJustAttached : 1;                             // 0x0224 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bIsActive : 1;                                 // 0x0224 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bHasBeenActivated : 1;                         // 0x0224 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient)
	uint32_t                                           bWarmingUp : 1;                                // 0x0224 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bIsCachedInPool : 1;                           // 0x0224 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bOverrideLODMethod : 1;                        // 0x0224 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bSkipUpdateDynamicDataDuringTick : 1;          // 0x0224 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bSkipBoundsUpdate : 1;                         // 0x0224 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bUpdateComponentInTick : 1;                    // 0x0224 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bDeferredBeamUpdate : 1;                       // 0x0224 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bForcedInActive : 1;                           // 0x0224 (0x0004) [0x0000000000002000] [0x00010000] (CPF_Transient)
	uint32_t                                           bIsWarmingUp : 1;                              // 0x0224 (0x0004) [0x0000000000002000] [0x00020000] (CPF_Transient)
	uint32_t                                           bIsViewRelevanceDirty : 1;                     // 0x0224 (0x0004) [0x0000000000002000] [0x00040000] (CPF_Transient)
	uint32_t                                           bRecacheViewRelevance : 1;                     // 0x0224 (0x0004) [0x0000000000002000] [0x00080000] (CPF_Transient)
	uint32_t                                           bLODUpdatePending : 1;                         // 0x0224 (0x0004) [0x0000000000002000] [0x00100000] (CPF_Transient)
	uint32_t                                           bSkipSpawnCountCheck : 1;                      // 0x0224 (0x0004) [0x0000000000002000] [0x00200000] (CPF_Transient)
	uint32_t                                           bPause : 1;                                    // 0x0224 (0x0004) [0x0000000000002000] [0x00400000] (CPF_Transient)
	uint32_t                                           bUseHugeBounds : 1;                            // 0x0224 (0x0004) [0x0000000000002000] [0x00800000] (CPF_Transient)
	class TArray<struct FParticleSysParam>             InstanceParameters;                            // 0x0228 (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)
	struct FVector                                     OldPosition;                                   // 0x0234 (0x000C) [0x0000000000000000]               
	struct FVector                                     PartSysVelocity;                               // 0x0240 (0x000C) [0x0000000000000000]               
	float                                              WarmupTime;                                    // 0x024C (0x0004) [0x0000000000000000]               
	float                                              WarmupTickRate;                                // 0x0250 (0x0004) [0x0000000000000000]               
	int32_t                                            LODLevel;                                      // 0x0254 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SecondsBeforeInactive;                         // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TimeSinceLastForceUpdateTransform;             // 0x025C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MaxTimeBeforeForceUpdateTransform;             // 0x0260 (0x0004) [0x0000000000000000]               
	int32_t                                            EditorLODLevel;                                // 0x0264 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            EditorDetailMode;                              // 0x0268 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	float                                              AccumTickTime;                                 // 0x026C (0x0004) [0x0000000000002000] (CPF_Transient)
	EParticleSystemLODMethod                           LODMethod;                                     // 0x0270 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EParticleReplayState                               ReplayState;                                   // 0x0271 (0x0001) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint8_t                                            ColorID;                                       // 0x0272 (0x0001) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FMaterialViewRelevance>        CachedViewRelevanceFlags;                      // 0x0274 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UParticleSystemReplay*>         ReplayClips;                                   // 0x0280 (0x000C) [0x0000000004400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline)
	int32_t                                            ReplayClipIDNumber;                            // 0x028C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            ReplayFrameIndex;                              // 0x0290 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              AccumLODDistanceCheckTime;                     // 0x0294 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FParticleEventSpawnData>       SpawnEvents;                                   // 0x0298 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FParticleEventDeathData>       DeathEvents;                                   // 0x02A4 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FParticleEventCollideData>     CollisionEvents;                               // 0x02B0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FParticleEventKismetData>      KismetEvents;                                  // 0x02BC (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FParticleEventAttractorCollideData> AttractorCollisionEvents;                      // 0x02C8 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FPointer                                    ReleaseResourcesFence;                         // 0x02D4 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	float                                              CustomTimeDilation;                            // 0x02D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EmitterDelay;                                  // 0x02DC (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FPointer                                    LinkObjPtr;                                    // 0x02E0 (0x0004) [0x0000000000001000] (CPF_Native)  
	class UObject*                                     REDMaterialInfo;                               // 0x02E4 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FPointer                                    REDMaterialPool;                               // 0x02E8 (0x0004) [0x0000000000001000] (CPF_Native)  
	class FName                                        REDMaterialPatternName;                        // 0x02EC (0x0008) [0x0000000000002000] (CPF_Transient)
	int32_t                                            PointLightID;                                  // 0x02F4 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                  // 0x02F8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleSystemComponent");
		}

		return uClassPointer;
	};

	void SetStopSpawning(int32_t InEmitterIndex, bool bInStopSpawning);
	void ResetToDefaults();
	void SetActive(bool bNowActive, bool optionalBFlagAsJustAttached);
	void ClearParameter(const class FName& ParameterName, EParticleSysParamType optionalParameterType);
	bool GetMaterialParameter(const class FName& InName, class UMaterialInterface*& outOutMaterial);
	bool GetActorParameter(const class FName& InName, class AActor*& outOutActor);
	bool GetColorParameter(const class FName& InName, struct FColor& outOutColor);
	bool GetVectorParameter(const class FName& InName, struct FVector& outOutVector);
	bool GetFloatParameter(const class FName& InName, float& outOutFloat);
	void SetMaterialParameter(const class FName& ParameterName, class UMaterialInterface* Param);
	void SetActorParameter(const class FName& ParameterName, class AActor* Param);
	void SetColorParameter(const class FName& ParameterName, const struct FColor& Param);
	void SetVectorRandParameter(const class FName& ParameterName, struct FVector& outParam, struct FVector& outParamLow);
	void SetVectorParameter(const class FName& ParameterName, const struct FVector& Param);
	void SetFloatRandParameter(const class FName& ParameterName, float Param, float ParamLow);
	void SetFloatParameter(const class FName& ParameterName, float Param);
	int32_t GetEditorLODLevel();
	int32_t GetLODLevel();
	void SetEditorLODLevel(int32_t InLODLevel);
	void SetLODLevel(int32_t InLODLevel);
	bool SystemHasCompleted();
	float GetMaxLifespan();
	int32_t DetermineLODLevelForLocation(struct FVector& outEffectLocation);
	void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex);
	void SetBeamTargetTangent(int32_t EmitterIndex, const struct FVector& NewTangentPoint, int32_t TargetIndex);
	void SetBeamTargetPoint(int32_t EmitterIndex, const struct FVector& NewTargetPoint, int32_t TargetIndex);
	void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex);
	void SetBeamSourceTangent(int32_t EmitterIndex, const struct FVector& NewTangentPoint, int32_t SourceIndex);
	void SetBeamSourcePoint(int32_t EmitterIndex, const struct FVector& NewSourcePoint, int32_t SourceIndex);
	void SetBeamDistance(int32_t EmitterIndex, float Distance);
	void SetBeamEndPoint(int32_t EmitterIndex, const struct FVector& NewEndPoint);
	void SetBeamTessellationFactor(int32_t EmitterIndex, float NewFactor);
	void SetBeamType(int32_t EmitterIndex, int32_t NewMethod);
	void RewindEmitterInstances();
	void RewindEmitterInstance(int32_t EmitterIndex);
	void SetKillOnCompleted(int32_t EmitterIndex, bool bKill);
	void SetKillOnDeactivate(int32_t EmitterIndex, bool bKill);
	bool GetSkipBoundsUpdate();
	void SetSkipBoundsUpdate(bool bInSkipBoundsUpdate);
	bool GetSkipUpdateDynamicDataDuringTick();
	void SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick);
	void KillParticlesInEmitter(const class FName& InEmitterName);
	void KillParticlesForced();
	void DeactivateSystem();
	void ActivateSystem(bool optionalBFlagAsJustAttached);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void OnSystemFinished(class UParticleSystemComponent* PSystem);
};

// Class Engine.DistributionFloatParticleParameter
// 0x0003 (0x006D - 0x0070)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionVectorParticleParameter
// 0x0001 (0x009F - 0x00A0)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleEmitter
// 0x0030 (0x003C - 0x006C)
class UParticleEmitter : public UObject
{
public:
	class FName                                        EmitterName;                                   // 0x003C (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SubUVDataOffset;                               // 0x0044 (0x0004) [0x0000000000002000] (CPF_Transient)
	EEmitterRenderMode                                 EmitterRenderMode;                             // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      EmitterEditorColor;                            // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class TArray<class UParticleLODLevel*>             LODLevels;                                     // 0x0050 (0x000C) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           ConvertedModules : 1;                          // 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bCollapsed : 1;                                // 0x005C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit | CPF_EditorOnly)
	uint32_t                                           bIsSoloing : 1;                                // 0x005C (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bCookedOut : 1;                                // 0x005C (0x0004) [0x0000000000000000] [0x00000008] 
	int32_t                                            PeakActiveParticles;                           // 0x0060 (0x0004) [0x0000000000000000]               
	int32_t                                            InitialAllocationCount;                        // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MediumDetailSpawnRateScale;                    // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleEmitter");
		}

		return uClassPointer;
	};

	float GetMaxLifespan(float InComponentDelay);
};

// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x006C - 0x006C)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleLODLevel
// 0x0064 (0x003C - 0x00A0)
class UParticleLODLevel : public UObject
{
public:
	int32_t                                            Level;                                         // 0x003C (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bEnabled : 1;                                  // 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           ConvertedModules : 1;                          // 0x0040 (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleModuleRequired*                     RequiredModule;                                // 0x0044 (0x0004) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UParticleModule*>               Modules;                                       // 0x0048 (0x000C) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UParticleModule*                             TypeDataModule;                                // 0x0054 (0x0004) [0x0000000000000008] (CPF_ExportObject)
	class UParticleModuleSpawn*                        SpawnModule;                                   // 0x0058 (0x0004) [0x0000000000000008] (CPF_ExportObject)
	class UParticleModuleEventGenerator*               EventGenerator;                                // 0x005C (0x0004) [0x0000000000000008] (CPF_ExportObject)
	class TArray<class UParticleModuleSpawnBase*>      SpawningModules;                               // 0x0060 (0x000C) [0x0000000000001000] (CPF_Native)  
	class TArray<class UParticleModule*>               SpawnModules;                                  // 0x006C (0x000C) [0x0000000000001000] (CPF_Native)  
	class TArray<class UParticleModule*>               UpdateModules;                                 // 0x0078 (0x000C) [0x0000000000001000] (CPF_Native)  
	class TArray<class UParticleModuleOrbit*>          OrbitModules;                                  // 0x0084 (0x000C) [0x0000000000001000] (CPF_Native)  
	class TArray<class UParticleModuleEventReceiverBase*> EventReceiverModules;                          // 0x0090 (0x000C) [0x0000000000001000] (CPF_Native)  
	int32_t                                            PeakActiveParticles;                           // 0x009C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleLODLevel");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModule
// 0x000C (0x003C - 0x0048)
class UParticleModule : public UObject
{
public:
	uint32_t                                           bSpawnModule : 1;                              // 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bUpdateModule : 1;                             // 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bFinalUpdateModule : 1;                        // 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bCurvesAsColor : 1;                            // 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           b3DDrawMode : 1;                               // 0x003C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bSupported3DDrawMode : 1;                      // 0x003C (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bEnabled : 1;                                  // 0x003C (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bEditable : 1;                                 // 0x003C (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           LODDuplicate : 1;                              // 0x003C (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bSupportsRandomSeed : 1;                       // 0x003C (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bRequiresLoopingNotification : 1;              // 0x003C (0x0004) [0x0000000000000000] [0x00000400] 
	uint8_t                                            LODValidity;                                   // 0x0040 (0x0001) [0x0000000000000002] (CPF_Const)   
	struct FColor                                      ModuleEditorColor;                             // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModule");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAccelerationBase
// 0x0004 (0x0048 - 0x004C)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	uint32_t                                           bAlwaysInWorldSpace : 1;                       // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAcceleration
// 0x0020 (0x004C - 0x006C)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                  // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bApplyOwnerScale : 1;                          // 0x0068 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x001C (0x004C - 0x0068)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                 // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAttractorBoneSocket
// 0x00D4 (0x0048 - 0x011C)
class UParticleModuleAttractorBoneSocket : public UParticleModuleAttractorBase
{
public:
	EBoneSocketAttractorFalloffType                    FalloffType;                                   // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ELocationBoneSocketDestination                     DestinationType;                               // 0x0049 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ELocationBoneSocketDestSelectionMethod             SelectionMethod;                               // 0x004A (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bParticleLifeRelative : 1;                     // 0x004C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAttractAlongLengthOfBone : 1;                 // 0x004C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FRawDistributionFloat                       FalloffExponent;                               // 0x0050 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       Range;                                         // 0x006C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       Strength;                                      // 0x0088 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       CollisionRadius;                               // 0x00A4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       DragCoefficient;                               // 0x00C0 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       DragRadius;                                    // 0x00DC (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FVector                                     UniversalOffset;                               // 0x00F8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FAttractLocationBoneSocketInfo> SourceLocations;                               // 0x0104 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FName                                        SkelMeshActorParamName;                        // 0x0110 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               EditorSkelMesh;                                // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorBoneSocket");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAttractorLine
// 0x0050 (0x0048 - 0x0098)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                     // 0x0048 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     EndPoint1;                                     // 0x0054 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       Range;                                         // 0x0060 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                      // 0x007C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAttractorParticle
// 0x004C (0x0048 - 0x0094)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	class FName                                        EmitterName;                                   // 0x0048 (0x0008) [0x0000000002000009] (CPF_Edit | CPF_ExportObject | CPF_NoClear)
	struct FRawDistributionFloat                       Range;                                         // 0x0050 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bStrengthByDistance : 1;                       // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAffectBaseVelocity : 1;                       // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRenewSource : 1;                              // 0x006C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bInheritSourceVel : 1;                         // 0x006C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	struct FRawDistributionFloat                       Strength;                                      // 0x0070 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	EAttractorParticleSelectionMethod                  SelectionMethod;                               // 0x008C (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LastSelIndex;                                  // 0x0090 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAttractorPoint
// 0x0058 (0x0048 - 0x00A0)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                      // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       Range;                                         // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                      // 0x0080 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           StrengthByDistance : 1;                        // 0x009C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAffectBaseVelocity : 1;                       // 0x009C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bOverrideVelocity : 1;                         // 0x009C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseWorldSpacePosition : 1;                    // 0x009C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleAttractorSkelVertSurface
// 0x00F4 (0x0048 - 0x013C)
class UParticleModuleAttractorSkelVertSurface : public UParticleModuleAttractorBase
{
public:
	EVertSurfaceAttractorFalloffType                   FalloffType;                                   // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAttractorSkelVertSurfaceDestination               DestinationType;                               // 0x0049 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bParticleLifeRelative : 1;                     // 0x004C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnforceNormalCheck : 1;                       // 0x004C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FRawDistributionFloat                       FalloffExponent;                               // 0x0050 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       Range;                                         // 0x006C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       Strength;                                      // 0x0088 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       CollisionRadius;                               // 0x00A4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       DragCoefficient;                               // 0x00C0 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FRawDistributionFloat                       DragRadius;                                    // 0x00DC (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FVector                                     UniversalOffset;                               // 0x00F8 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SkelMeshActorParamName;                        // 0x0104 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               EditorSkelMesh;                                // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class TArray<class FName>                          ValidAssociatedBones;                          // 0x0110 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FVector                                     NormalToCompare;                               // 0x011C (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalCheckToleranceDegrees;                   // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalCheckTolerance;                          // 0x012C (0x0004) [0x0000000000000000]               
	class TArray<int32_t>                              ValidMaterialIndices;                          // 0x0130 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorSkelVertSurface");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleBeamBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleBeamModifier
// 0x0068 (0x0048 - 0x00B0)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	EBeamModifierType                                  ModifierType;                                  // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FBeamModifierOptions                        PositionOptions;                               // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionVector                      Position;                                      // 0x0050 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FBeamModifierOptions                        TangentOptions;                                // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionVector                      Tangent;                                       // 0x0070 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bAbsoluteTangent : 1;                          // 0x008C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FBeamModifierOptions                        StrengthOptions;                               // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       Strength;                                      // 0x0094 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleBeamNoise
// 0x00AC (0x0048 - 0x00F4)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	uint32_t                                           bLowFreq_Enabled : 1;                          // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bNRScaleEmitterTime : 1;                       // 0x0048 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSmooth : 1;                                   // 0x0048 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bNoiseLock : 1;                                // 0x0048 (0x0004) [0x0000000000000002] [0x00000008] (CPF_Const)
	uint32_t                                           bOscillate : 1;                                // 0x0048 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bUseNoiseTangents : 1;                         // 0x0048 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bTargetNoise : 1;                              // 0x0048 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bApplyNoiseScale : 1;                          // 0x0048 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	int32_t                                            Frequency;                                     // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Frequency_LowRange;                            // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionVector                      NoiseRange;                                    // 0x0054 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       NoiseRangeScale;                               // 0x0070 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      NoiseSpeed;                                    // 0x008C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	float                                              NoiseLockRadius;                               // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NoiseLockTime;                                 // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NoiseTension;                                  // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       NoiseTangentStrength;                          // 0x00B4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	int32_t                                            NoiseTessellation;                             // 0x00D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrequencyDistance;                             // 0x00D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       NoiseScale;                                    // 0x00D8 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleBeamSource
// 0x0064 (0x0048 - 0x00AC)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	EBeam2SourceTargetMethod                           SourceMethod;                                  // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBeam2SourceTargetTangentMethod                    SourceTangentMethod;                           // 0x0049 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SourceName;                                    // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSourceAbsolute : 1;                           // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLockSource : 1;                               // 0x0054 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bLockSourceTangent : 1;                        // 0x0054 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bLockSourceStength : 1;                        // 0x0054 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	struct FRawDistributionVector                      Source;                                        // 0x0058 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      SourceTangent;                                 // 0x0074 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       SourceStrength;                                // 0x0090 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleBeamTarget
// 0x0068 (0x0048 - 0x00B0)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	EBeam2SourceTargetMethod                           TargetMethod;                                  // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBeam2SourceTargetTangentMethod                    TargetTangentMethod;                           // 0x0049 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        TargetName;                                    // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionVector                      Target;                                        // 0x0054 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bTargetAbsolute : 1;                           // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLockTarget : 1;                               // 0x0070 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bLockTargetTangent : 1;                        // 0x0070 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bLockTargetStength : 1;                        // 0x0070 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	struct FRawDistributionVector                      TargetTangent;                                 // 0x0074 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       TargetStrength;                                // 0x0090 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	float                                              LockRadius;                                    // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleCameraBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleCameraBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleCameraOffset
// 0x0021 (0x0048 - 0x0069)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                  // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bSpawnTimeOnly : 1;                            // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	EParticleCameraOffsetUpdateMethod                  UpdateMethod;                                  // 0x0068 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleCameraOffset");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleCollision
// 0x00AC (0x0048 - 0x00F4)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                 // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      DampingFactorRotation;                         // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       MaxCollisions;                                 // 0x0080 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	EParticleCollisionComplete                         CollisionCompletionOption;                     // 0x009C (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bApplyPhysics : 1;                             // 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPawnsDoNotDecrementCount : 1;                 // 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bOnlyVerticalNormalsDecrementCount : 1;        // 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDropDetail : 1;                               // 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCollideOnlyIfVisible : 1;                     // 0x00A0 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bCollideWithWorld : 1;                         // 0x00A0 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bCollideWithWorldAttractors : 1;               // 0x00A0 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	struct FRawDistributionFloat                       ParticleMass;                                  // 0x00A4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	float                                              DirScalar;                                     // 0x00C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VerticalFudgeFactor;                           // 0x00C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       DelayAmount;                                   // 0x00C8 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	float                                              MaxCollisionDistance;                          // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FParticleAttractorCollisionAction> ParticleAttractorCollisionActions;             // 0x00E8 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleCollision");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleCollisionActor
// 0x0010 (0x00F4 - 0x0104)
class UParticleModuleCollisionActor : public UParticleModuleCollision
{
public:
	class TArray<class FName>                          ActorsToCollideWith;                           // 0x00F4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bCheckPawnCollisions : 1;                      // 0x0100 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleCollisionActor");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleColorBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleColor
// 0x003C (0x0048 - 0x0084)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                    // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       StartAlpha;                                    // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bClampAlpha : 1;                               // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleColor");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleColor_Seeded
// 0x0018 (0x0084 - 0x009C)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x0084 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleColor_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleColorByParameter
// 0x000C (0x0048 - 0x0054)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	class FName                                        ColorParam;                                    // 0x0048 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      DefaultColor;                                  // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorByParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleColorOverLife
// 0x006C (0x0048 - 0x00B4)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                 // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                 // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bClampAlpha : 1;                               // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           PointLightBG : 1;                              // 0x0080 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              PointLightColorScale;                          // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PointLightAmplitude;                           // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PointLightFreq;                                // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PointLightEndTime;                             // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PointLightAmplify;                             // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PointLightAttenuation;                         // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PointLightRange;                               // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PointLightCutOff;                              // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PointLightOffset;                              // 0x00A4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              PointLightDistanceCheckMultiplier;             // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleColorScaleOverDensity
// 0x0038 (0x0048 - 0x0080)
class UParticleModuleColorScaleOverDensity : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverDensity;                         // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       AlphaScaleOverDensity;                         // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverDensity");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleColorScaleOverLife
// 0x003C (0x0048 - 0x0084)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                            // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                            // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bEmitterTime : 1;                              // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleEventBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleEventGenerator
// 0x000C (0x0048 - 0x0054)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	class TArray<struct FParticleEvent_GenerateInfo>   Events;                                        // 0x0048 (0x000C) [0x0000000002400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleEventReceiverBase
// 0x000C (0x0048 - 0x0054)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	EParticleEventType                                 EventGeneratorType;                            // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        EventName;                                     // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0004 (0x0054 - 0x0058)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	uint32_t                                           bStopSpawning : 1;                             // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x003C (0x0054 - 0x0090)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                    // 0x0054 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bUseParticleTime : 1;                          // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUsePSysLocation : 1;                          // 0x0070 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInheritVelocity : 1;                          // 0x0070 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FRawDistributionVector                      InheritVelocityScale;                          // 0x0074 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleKillBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleKillBox
// 0x003C (0x0048 - 0x0084)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                               // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      UpperRightCorner;                              // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bAbsolute : 1;                                 // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bKillInside : 1;                               // 0x0080 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAxisAlignedAndFixedSize : 1;                  // 0x0080 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleKillHeight
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                        // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bAbsolute : 1;                                 // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFloor : 1;                                    // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bApplyPSysScale : 1;                           // 0x0064 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLifetime
// 0x001C (0x0048 - 0x0064)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                      // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLifetime_Seeded
// 0x0018 (0x0064 - 0x007C)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x0064 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLifetime_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleLocationBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocation
// 0x0024 (0x0048 - 0x006C)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                 // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	float                                              DistributeOverNPoints;                         // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DistributeThreshold;                           // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocation");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocation_Seeded
// 0x0018 (0x006C - 0x0084)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x006C (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocation_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x006C - 0x006C)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0018 (0x006C - 0x0084)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x006C (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationBoneSocket
// 0x0030 (0x0048 - 0x0078)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	ELocationBoneSocketSource                          SourceType;                                    // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ELocationBoneSocketSelectionMethod                 SelectionMethod;                               // 0x0049 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     UniversalOffset;                               // 0x004C (0x000C) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FLocationBoneSocketInfo>       SourceLocations;                               // 0x0058 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bUpdatePositionEachFrame : 1;                  // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOrientMeshEmitters : 1;                       // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bInheritVelocityAtSpawn : 1;                   // 0x0064 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class FName                                        SkelMeshActorParamName;                        // 0x0068 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               EditorSkelMesh;                                // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	float                                              LastUpdateTime;                                // 0x0074 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationBoneSocket");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationDirect
// 0x0070 (0x0048 - 0x00B8)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                      // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      LocationOffset;                                // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      ScaleFactor;                                   // 0x0080 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      Direction;                                     // 0x009C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationEmitter
// 0x0018 (0x0048 - 0x0060)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	class FName                                        EmitterName;                                   // 0x0048 (0x0008) [0x0000000002000009] (CPF_Edit | CPF_ExportObject | CPF_NoClear)
	ELocationEmitterSelectionMethod                    SelectionMethod;                               // 0x0050 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           InheritSourceVelocity : 1;                     // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInheritSourceRotation : 1;                    // 0x0054 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              InheritSourceVelocityScale;                    // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InheritSourceRotationScale;                    // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0048 - 0x0050)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	class FName                                        EmitterName;                                   // 0x0048 (0x0008) [0x0000000002000009] (CPF_Edit | CPF_ExportObject | CPF_NoClear)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x003C (0x0048 - 0x0084)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	uint32_t                                           Positive_X : 1;                                // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           Positive_Y : 1;                                // 0x0048 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           Positive_Z : 1;                                // 0x0048 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           Negative_X : 1;                                // 0x0048 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           Negative_Y : 1;                                // 0x0048 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           Negative_Z : 1;                                // 0x0048 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           SurfaceOnly : 1;                               // 0x0048 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           Velocity : 1;                                  // 0x0048 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	struct FRawDistributionFloat                       VelocityScale;                                 // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      StartLocation;                                 // 0x0068 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x003D (0x0084 - 0x00C1)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	uint32_t                                           RadialVelocity : 1;                            // 0x0084 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAdjustForWorldSpace : 1;                      // 0x0084 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FRawDistributionFloat                       StartRadius;                                   // 0x0088 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       StartHeight;                                   // 0x00A4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	ECylinderHeightAxis                                HeightAxis;                                    // 0x00C0 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x001B (0x00C1 - 0x00DC)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x00C4 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x001C (0x0084 - 0x00A0)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                   // 0x0084 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0018 (0x00A0 - 0x00B8)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x00A0 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x004C (0x0048 - 0x0094)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	ELocationSkelVertSurfaceSource                     SourceType;                                    // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     UniversalOffset;                               // 0x004C (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUpdatePositionEachFrame : 1;                  // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOrientMeshEmitters : 1;                       // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEnforceNormalCheck : 1;                       // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class FName                                        SkelMeshActorParamName;                        // 0x005C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               EditorSkelMesh;                                // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class TArray<class FName>                          ValidAssociatedBones;                          // 0x0068 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FVector                                     NormalToCompare;                               // 0x0074 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalCheckToleranceDegrees;                   // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalCheckTolerance;                          // 0x0084 (0x0004) [0x0000000000000000]               
	class TArray<int32_t>                              ValidMaterialIndices;                          // 0x0088 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationSkelVertSurface");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleLocationStaticVertSurface
// 0x0040 (0x0048 - 0x0088)
class UParticleModuleLocationStaticVertSurface : public UParticleModuleLocationBase
{
public:
	ELocationStaticVertSurfaceSource                   SourceType;                                    // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     UniversalOffset;                               // 0x004C (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUpdatePositionEachFrame : 1;                  // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bOrientMeshEmitters : 1;                       // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEnforceNormalCheck : 1;                       // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class FName                                        StaticMeshActorParamName;                      // 0x005C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 EditorStaticMesh;                              // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	struct FVector                                     NormalToCompare;                               // 0x0068 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalCheckToleranceDegrees;                   // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalCheckTolerance;                          // 0x0078 (0x0004) [0x0000000000000000]               
	class TArray<int32_t>                              ValidMaterialIndices;                          // 0x007C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationStaticVertSurface");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSourceMovement
// 0x001C (0x0048 - 0x0064)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                           // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMaterialByParameter
// 0x0018 (0x0048 - 0x0060)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	class TArray<class FName>                          MaterialParameters;                            // 0x0048 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UMaterialInterface*>            DefaultMaterials;                              // 0x0054 (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMaterialByParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMeshMaterial
// 0x000C (0x0048 - 0x0054)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	class TArray<class UMaterialInterface*>            MeshMaterials;                                 // 0x0048 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleOrbitBase
// 0x0004 (0x0048 - 0x004C)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	uint32_t                                           bUseEmitterTime : 1;                           // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleOrbit
// 0x0064 (0x004C - 0x00B0)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	EOrbitChainMode                                    ChainMode;                                     // 0x004C (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionVector                      OffsetAmount;                                  // 0x0050 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FOrbitOptions                               OffsetOptions;                                 // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionVector                      RotationAmount;                                // 0x0070 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FOrbitOptions                               RotationOptions;                               // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionVector                      RotationRateAmount;                            // 0x0090 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FOrbitOptions                               RotationRateOptions;                           // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0001 (0x0048 - 0x0049)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	EParticleAxisLock                                  LockAxisFlags;                                 // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleParameterBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleParameterDynamic
// 0x0014 (0x0048 - 0x005C)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	class TArray<struct FEmitterDynamicParameter>      DynamicParams;                                 // 0x0048 (0x000C) [0x0000000000480041] (CPF_Edit | CPF_EditFixedSize | CPF_Component | CPF_NeedCtorLink)
	int32_t                                            UpdateFlags;                                   // 0x0054 (0x0004) [0x0000000000000000]               
	uint32_t                                           bUsesVelocity : 1;                             // 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0018 (0x005C - 0x0074)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x005C (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRequired
// 0x008C (0x0048 - 0x00D4)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                      // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EParticleScreenAlignment                           ScreenAlignment;                               // 0x004C (0x0001) [0x0000000000000001] (CPF_Edit)    
	EParticleSortMode                                  SortMode;                                      // 0x004D (0x0001) [0x0000000000000001] (CPF_Edit)    
	EParticleBurstMethod                               ParticleBurstMethod;                           // 0x004E (0x0001) [0x0000000000000000]               
	EParticleSubUVInterpMethod                         InterpolationMethod;                           // 0x004F (0x0001) [0x0000000000000001] (CPF_Edit)    
	EEmitterNormalsMode                                EmitterNormalsMode;                            // 0x0050 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAllowImageFlipping : 1;                       // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSquareImageFlipping : 1;                      // 0x0054 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseLocalSpace : 1;                            // 0x0054 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bKillOnDeactivate : 1;                         // 0x0054 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bKillOnCompleted : 1;                          // 0x0054 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bRequiresSorting : 1;                          // 0x0054 (0x0004) [0x0000000020000000] [0x00000020]  CPF_Deprecated)
	uint32_t                                           bUseLegacyEmitterTime : 1;                     // 0x0054 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bEmitterDurationUseRange : 1;                  // 0x0054 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bDurationRecalcEachLoop : 1;                   // 0x0054 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bEmitterDelayUseRange : 1;                     // 0x0054 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bDelayFirstLoopOnly : 1;                       // 0x0054 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bScaleUV : 1;                                  // 0x0054 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bDirectUV : 1;                                 // 0x0054 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bOverrideSystemMacroUV : 1;                    // 0x0054 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bUseMaxDrawCount : 1;                          // 0x0054 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bOrbitModuleAffectsVelocityAlignment : 1;      // 0x0054 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	float                                              EmitterDuration;                               // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EmitterDurationLow;                            // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            EmitterLoops;                                  // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       SpawnRate;                                     // 0x0064 (0x001C) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)
	class TArray<struct FParticleBurst>                BurstList;                                     // 0x0080 (0x000C) [0x0000000002400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear)
	float                                              EmitterDelay;                                  // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EmitterDelayLow;                               // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SubImages_Horizontal;                          // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SubImages_Vertical;                            // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RandomImageTime;                               // 0x009C (0x0004) [0x0000000000000000]               
	int32_t                                            RandomImageChanges;                            // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MacroUVPosition;                               // 0x00A4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              MacroUVRadius;                                 // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxDrawCount;                                  // 0x00B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DownsampleThresholdScreenFraction;             // 0x00B8 (0x0004) [0x0000000000000000]               
	struct FVector                                     NormalsSphereCenter;                           // 0x00BC (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     NormalsCylinderDirection;                      // 0x00C8 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRequired");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleRotationBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMeshRotation
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                 // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bInheritParent : 1;                            // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0018 (0x0068 - 0x0080)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x0068 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotation_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRotation
// 0x001C (0x0048 - 0x0064)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                 // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotation");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRotation_Seeded
// 0x0018 (0x0064 - 0x007C)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x0064 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotation_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                              // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           Scale : 1;                                     // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMeshRotationRate
// 0x001C (0x0048 - 0x0064)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                             // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0018 (0x0064 - 0x007C)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x0064 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x001C (0x0048 - 0x0064)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                       // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bScaleRotRate : 1;                             // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateOverLife");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRotationRate
// 0x001C (0x0048 - 0x0064)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                             // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0018 (0x0064 - 0x007C)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x0064 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationRate_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x001C (0x0048 - 0x0064)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleSizeBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSize
// 0x001C (0x0048 - 0x0064)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                     // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSize");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSize_Seeded
// 0x0018 (0x0064 - 0x007C)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x0064 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSize_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           MultiplyX : 1;                                 // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           MultiplyY : 1;                                 // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           MultiplyZ : 1;                                 // 0x0064 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSizeMultiplyVelocity
// 0x0038 (0x0048 - 0x0080)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                            // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           MultiplyX : 1;                                 // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           MultiplyY : 1;                                 // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           MultiplyZ : 1;                                 // 0x0064 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FVector                                     CapMaxSize;                                    // 0x0068 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     CapMinSize;                                    // 0x0074 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyVelocity");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSizeScale
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                     // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           EnableX : 1;                                   // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           EnableY : 1;                                   // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           EnableZ : 1;                                   // 0x0064 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSizeScaleByTime
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleSizeScaleByTime : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleByTime;                               // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bEnableX : 1;                                  // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnableY : 1;                                  // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEnableZ : 1;                                  // 0x0064 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeScaleByTime");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSizeScaleOverDensity
// 0x001C (0x0048 - 0x0064)
class UParticleModuleSizeScaleOverDensity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleOverDensity;                          // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeScaleOverDensity");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSpawnBase
// 0x0004 (0x0048 - 0x004C)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	uint32_t                                           bProcessSpawnRate : 1;                         // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bProcessBurstList : 1;                         // 0x0048 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSpawn
// 0x0048 (0x004C - 0x0094)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                          // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       RateScale;                                     // 0x0068 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	EParticleBurstMethod                               ParticleBurstMethod;                           // 0x0084 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FParticleBurst>                BurstList;                                     // 0x0088 (0x000C) [0x0000000002400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0030 (0x004C - 0x007C)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                    // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       SpawnPerUnit;                                  // 0x0050 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bIgnoreSpawnRateWhenMoving : 1;                // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIgnoreMovementAlongX : 1;                     // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bIgnoreMovementAlongY : 1;                     // 0x006C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bIgnoreMovementAlongZ : 1;                     // 0x006C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	float                                              MovementTolerance;                             // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxFrameDistance;                              // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinFrameDistance;                              // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleStoreSpawnTimeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleStoreSpawnTimeBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleStoreSpawnTimeBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleStoreSpawnTime
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleStoreSpawnTime : public UParticleModuleStoreSpawnTimeBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleStoreSpawnTime");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSubUV
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                 // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bUseRealTime : 1;                              // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSubUVMovie
// 0x0024 (0x0068 - 0x008C)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	uint32_t                                           bUseEmitterTime : 1;                           // 0x0068 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FRawDistributionFloat                       FrameRate;                                     // 0x006C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	int32_t                                            StartingFrame;                                 // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSubUVDirect
// 0x0038 (0x0048 - 0x0080)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                 // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      SubUVSize;                                     // 0x0064 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUVDirect");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleSubUVSelect
// 0x001C (0x0048 - 0x0064)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUVSelect");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleTrailBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTrailSource
// 0x003C (0x0048 - 0x0084)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	ETrail2SourceMethod                                SourceMethod;                                  // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EParticleSourceSelectionMethod                     SelectionMethod;                               // 0x0049 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SourceName;                                    // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       SourceStrength;                                // 0x0054 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bLockSourceStength : 1;                        // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bInheritRotation : 1;                          // 0x0070 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	int32_t                                            SourceOffsetCount;                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FVector>                       SourceOffsetDefaults;                          // 0x0078 (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTrailSpawn
// 0x0008 (0x0048 - 0x0050)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                              // 0x0048 (0x0004) [0x0000000006080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline)
	float                                              MinSpawnVelocity;                              // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTrailSpawn");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTrailTaper
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	ETrailTaperMethod                                  TaperMethod;                                   // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       TaperFactor;                                   // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTrailTaper");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x001C (0x0048 - 0x0064)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	class FName                                        ControlEdgeName;                               // 0x0048 (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SheetsPerTrail;                                // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDeadTrailsOnDeactivate : 1;                   // 0x0054 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bClipSourceSegement : 1;                       // 0x0054 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEnablePreviousTangentRecalculation : 1;       // 0x0054 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bTangentRecalculationEveryFrame : 1;           // 0x0054 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bRenderGeometry : 1;                           // 0x0054 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bRenderSpawnPoints : 1;                        // 0x0054 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRenderTangents : 1;                           // 0x0054 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bRenderTessellation : 1;                       // 0x0054 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	float                                              TilingDistance;                                // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DistanceTessellationStepSize;                  // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TangentTessellationScalar;                     // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataApex
// 0x0008 (0x0048 - 0x0050)
class UParticleModuleTypeDataApex : public UParticleModuleTypeDataBase
{
public:
	class UApexGenericAsset*                           ApexIOFX;                                      // 0x0048 (0x0004) [0x0000000000000000]               
	class UApexGenericAsset*                           ApexEmitter;                                   // 0x004C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataApex");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataBeam
// 0x009C (0x0048 - 0x00E4)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	EBeamMethod                                        BeamMethod;                                    // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBeamEndPointMethod                                EndPointMethod;                                // 0x0049 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       Distance;                                      // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      EndPoint;                                      // 0x0068 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	int32_t                                            TessellationFactor;                            // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       EmitterStrength;                               // 0x0088 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       TargetStrength;                                // 0x00A4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      EndPointDirection;                             // 0x00C0 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	int32_t                                            TextureTile;                                   // 0x00DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           RenderGeometry : 1;                            // 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           RenderDirectLine : 1;                          // 0x00E0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           RenderLines : 1;                               // 0x00E0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           RenderTessellation : 1;                        // 0x00E0 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataBeam2
// 0x0080 (0x0048 - 0x00C8)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	EBeam2Method                                       BeamMethod;                                    // 0x0048 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EBeamTaperMethod                                   TaperMethod;                                   // 0x0049 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TextureTile;                                   // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TextureTileDistance;                           // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Sheets;                                        // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxBeamCount;                                  // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Speed;                                         // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            InterpolationPoints;                           // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bAlwaysOn : 1;                                 // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           RenderGeometry : 1;                            // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           RenderDirectLine : 1;                          // 0x0064 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           RenderLines : 1;                               // 0x0064 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           RenderTessellation : 1;                        // 0x0064 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	int32_t                                            UpVectorStepSize;                              // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        BranchParentName;                              // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       Distance;                                      // 0x0074 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       TaperFactor;                                   // 0x0090 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       TaperScale;                                    // 0x00AC (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataMesh
// 0x0018 (0x0048 - 0x0060)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                          // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           CastShadows : 1;                               // 0x004C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           DoCollisions : 1;                              // 0x004C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bAllowMotionBlur : 1;                          // 0x004C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bOverrideMaterial : 1;                         // 0x004C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCameraFacing : 1;                             // 0x004C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bApplyParticleRotationAsSpin : 1;              // 0x004C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	EMeshScreenAlignment                               MeshAlignment;                                 // 0x0050 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EParticleAxisLock                                  AxisLockOption;                                // 0x0051 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMeshCameraFacingUpAxis                            CameraFacingUpAxisOption;                      // 0x0052 (0x0001) [0x0000000020000000]  CPF_Deprecated)
	EMeshCameraFacingOptions                           CameraFacingOption;                            // 0x0053 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              Pitch;                                         // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Roll;                                          // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Yaw;                                           // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataMeshPhysX
// 0x0020 (0x0060 - 0x0080)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                   // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EPhysXMeshRotationMethod                           PhysXRotationMethod;                           // 0x0064 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              FluidRotationCoefficient;                      // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                   // 0x006C (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              ZOffset;                                       // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataMeshPhysX");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataPhysX
// 0x0014 (0x0048 - 0x005C)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                   // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                   // 0x004C (0x0010) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataPhysX");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0028 (0x0048 - 0x0070)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int32_t                                            MaxTessellationBetweenParticles;               // 0x0048 (0x0004) [0x0000000000000000]               
	int32_t                                            SheetsPerTrail;                                // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxTrailCount;                                 // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxParticleInTrailCount;                       // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDeadTrailsOnDeactivate : 1;                   // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDeadTrailsOnSourceLoss : 1;                   // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bClipSourceSegement : 1;                       // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bEnablePreviousTangentRecalculation : 1;       // 0x0058 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bTangentRecalculationEveryFrame : 1;           // 0x0058 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bSpawnInitialParticle : 1;                     // 0x0058 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRenderGeometry : 1;                           // 0x0058 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bRenderSpawnPoints : 1;                        // 0x0058 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bRenderTangents : 1;                           // 0x0058 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bRenderTessellation : 1;                       // 0x0058 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bEnableTangentDiffInterpScale : 1;             // 0x0058 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	ETrailsRenderAxisOption                            RenderAxis;                                    // 0x005C (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              TangentSpawningScalar;                         // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TilingDistance;                                // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DistanceTessellationStepSize;                  // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TangentTessellationScalar;                     // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataTrail
// 0x0030 (0x0048 - 0x0078)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	uint32_t                                           RenderGeometry : 1;                            // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           RenderLines : 1;                               // 0x0048 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           RenderTessellation : 1;                        // 0x0048 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           Tapered : 1;                                   // 0x0048 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           SpawnByDistance : 1;                           // 0x0048 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	int32_t                                            TessellationFactor;                            // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       Tension;                                       // 0x0050 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FVector                                     SpawnDistance;                                 // 0x006C (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleTypeDataTrail2
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int32_t                                            TessellationFactor;                            // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TessellationFactorDistance;                    // 0x004C (0x0004) [0x0000000000000000]               
	float                                              TessellationStrength;                          // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            TextureTile;                                   // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Sheets;                                        // 0x0058 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxTrailCount;                                 // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxParticleInTrailCount;                       // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bClipSourceSegement : 1;                       // 0x0064 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bClearTangents : 1;                            // 0x0064 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           RenderGeometry : 1;                            // 0x0064 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           RenderDirectLine : 1;                          // 0x0064 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           RenderLines : 1;                               // 0x0064 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           RenderTessellation : 1;                        // 0x0064 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail2");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleUberBase
// 0x000C (0x0048 - 0x0054)
class UParticleModuleUberBase : public UParticleModule
{
public:
	class TArray<class FName>                          RequiredModules;                               // 0x0048 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleUberLTISIVCL
// 0x00A8 (0x0054 - 0x00FC)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                      // 0x0054 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      StartSize;                                     // 0x0070 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      StartVelocity;                                 // 0x008C (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                           // 0x00A8 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                 // 0x00C4 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                 // 0x00E0 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCL");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleUberLTISIVCLIL
// 0x00C4 (0x0054 - 0x0118)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                      // 0x0054 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      StartSize;                                     // 0x0070 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      StartVelocity;                                 // 0x008C (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                           // 0x00A8 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                 // 0x00C4 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                 // 0x00E0 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      StartLocation;                                 // 0x00FC (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLIL");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR
// 0x011C (0x0054 - 0x0170)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                      // 0x0054 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      StartSize;                                     // 0x0070 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      StartVelocity;                                 // 0x008C (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                           // 0x00A8 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                 // 0x00C4 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                 // 0x00E0 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      StartLocation;                                 // 0x00FC (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionFloat                       StartRotation;                                 // 0x0118 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	struct FRawDistributionVector                      SizeLifeMultiplier;                            // 0x0134 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)
	uint32_t                                           SizeMultiplyX : 1;                             // 0x0150 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           SizeMultiplyY : 1;                             // 0x0150 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           SizeMultiplyZ : 1;                             // 0x0150 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FRawDistributionFloat                       StartRotationRate;                             // 0x0154 (0x001C) [0x0000000002480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleUberRainDrops
// 0x0088 (0x0054 - 0x00DC)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                   // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LifetimeMax;                                   // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StartSizeMin;                                  // 0x005C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StartSizeMax;                                  // 0x0068 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StartVelocityMin;                              // 0x0074 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StartVelocityMax;                              // 0x0080 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              StartVelocityRadialMin;                        // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StartVelocityRadialMax;                        // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ColorOverLife;                                 // 0x0094 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              AlphaOverLife;                                 // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIsUsingCylinder : 1;                          // 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPositive_X : 1;                               // 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bPositive_Y : 1;                               // 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bPositive_Z : 1;                               // 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bNegative_X : 1;                               // 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bNegative_Y : 1;                               // 0x00A4 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bNegative_Z : 1;                               // 0x00A4 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bSurfaceOnly : 1;                              // 0x00A4 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bVelocity : 1;                                 // 0x00A4 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bRadialVelocity : 1;                           // 0x00A4 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	float                                              PC_VelocityScale;                              // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PC_StartLocation;                              // 0x00AC (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              PC_StartRadius;                                // 0x00B8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PC_StartHeight;                                // 0x00BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	ECylinderHeightAxis                                PC_HeightAxis;                                 // 0x00C0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StartLocationMin;                              // 0x00C4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StartLocationMax;                              // 0x00D0 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberRainDrops");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleUberRainImpacts
// 0x0120 (0x0054 - 0x0174)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                      // 0x0054 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                     // 0x0070 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      StartRotation;                                 // 0x008C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bInheritParent : 1;                            // 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           MultiplyX : 1;                                 // 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           MultiplyY : 1;                                 // 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           MultiplyZ : 1;                                 // 0x00A8 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bIsUsingCylinder : 1;                          // 0x00A8 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bPositive_X : 1;                               // 0x00A8 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bPositive_Y : 1;                               // 0x00A8 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bPositive_Z : 1;                               // 0x00A8 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bNegative_X : 1;                               // 0x00A8 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bNegative_Y : 1;                               // 0x00A8 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bNegative_Z : 1;                               // 0x00A8 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bSurfaceOnly : 1;                              // 0x00A8 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bVelocity : 1;                                 // 0x00A8 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bRadialVelocity : 1;                           // 0x00A8 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	struct FRawDistributionVector                      LifeMultiplier;                                // 0x00AC (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       PC_VelocityScale;                              // 0x00C8 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      PC_StartLocation;                              // 0x00E4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       PC_StartRadius;                                // 0x0100 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       PC_StartHeight;                                // 0x011C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	ECylinderHeightAxis                                PC_HeightAxis;                                 // 0x0138 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionVector                      ColorOverLife;                                 // 0x013C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                 // 0x0158 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberRainImpacts");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleUberRainSplashA
// 0x00AC (0x0054 - 0x0100)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                      // 0x0054 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                     // 0x0070 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      StartRotation;                                 // 0x008C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bInheritParent : 1;                            // 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           MultiplyX : 1;                                 // 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           MultiplyY : 1;                                 // 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           MultiplyZ : 1;                                 // 0x00A8 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	struct FRawDistributionVector                      LifeMultiplier;                                // 0x00AC (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      ColorOverLife;                                 // 0x00C8 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                 // 0x00E4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashA");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleUberRainSplashB
// 0x00AC (0x0054 - 0x0100)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                      // 0x0054 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                     // 0x0070 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      ColorOverLife;                                 // 0x008C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                 // 0x00A8 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionVector                      LifeMultiplier;                                // 0x00C4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           MultiplyX : 1;                                 // 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           MultiplyY : 1;                                 // 0x00E0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           MultiplyZ : 1;                                 // 0x00E0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FRawDistributionFloat                       StartRotationRate;                             // 0x00E4 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashB");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleVelocityBase
// 0x0004 (0x0048 - 0x004C)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	uint32_t                                           bInWorldSpace : 1;                             // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bApplyOwnerScale : 1;                          // 0x0048 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleVelocity
// 0x0038 (0x004C - 0x0084)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                 // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       StartVelocityRadial;                           // 0x0068 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleVelocity_Seeded
// 0x0018 (0x0084 - 0x009C)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                // 0x0084 (0x0018) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocity_Seeded");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleVelocityCone
// 0x0044 (0x004C - 0x0090)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                         // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       Velocity;                                      // 0x0068 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FVector                                     Direction;                                     // 0x0084 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocityCone");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleVelocityInheritParent
// 0x001C (0x004C - 0x0068)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                         // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0020 (0x004C - 0x006C)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                   // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           Absolute : 1;                                  // 0x0068 (0x0004) [0x0000000000000009] [0x00000001] (CPF_Edit | CPF_ExportObject)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleWorldForcesBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleWorldForcesBase : public UParticleModule
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleWorldForcesBase");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModulePhysicsVolumes
// 0x001D (0x0048 - 0x0065)
class UParticleModulePhysicsVolumes : public UParticleModuleWorldForcesBase
{
public:
	struct FRawDistributionFloat                       GlobalInfluence;                               // 0x0048 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	EParticleLevelInfluenceType                        LevelInfluenceType;                            // 0x0064 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModulePhysicsVolumes");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleWorldAttractor
// 0x0020 (0x0048 - 0x0068)
class UParticleModuleWorldAttractor : public UParticleModuleWorldForcesBase
{
public:
	uint32_t                                           bParticleLifeRelative : 1;                     // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FRawDistributionFloat                       AttractorInfluence;                            // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleWorldAttractor");
		}

		return uClassPointer;
	};

};

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x003C - 0x003C)
class UParticleModuleEventSendToGame : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		}

		return uClassPointer;
	};

	void DoEvent(struct FVector& outInCollideDirection, struct FVector& outInHitLocation, struct FVector& outInHitNormal, class FName& outInBoneName);
};

// Class Engine.ParticleSystemReplay
// 0x0010 (0x003C - 0x004C)
class UParticleSystemReplay : public UObject
{
public:
	int32_t                                            ClipIDNumber;                                  // 0x003C (0x0004) [0x0000000000001001] (CPF_Edit | CPF_Native)
	class TArray<struct FParticleSystemReplayFrame>    Frames;                                        // 0x0040 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleSystemReplay");
		}

		return uClassPointer;
	};

};

// Class Engine.PhysXParticleSystem
// 0x0064 (0x003C - 0x00A0)
class UPhysXParticleSystem : public UObject
{
public:
	int32_t                                            MaxParticles;                                  // 0x003C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ParticleSpawnReserve;                          // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ERBCollisionChannel                                RBChannel;                                     // 0x0044 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ESimulationMethod                                  SimulationMethod;                              // 0x0045 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPacketSizeMultiplier                              PacketSizeMultiplier;                          // 0x0046 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                         // 0x0048 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CollisionDistance;                             // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RestitutionWithStaticShapes;                   // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RestitutionWithDynamicShapes;                  // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrictionWithStaticShapes;                      // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrictionWithDynamicShapes;                     // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StaticFrictionWithStaticShapes;                // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StaticFrictionWithDynamicShapes;               // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDynamicCollision : 1;                         // 0x0068 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDisableGravity : 1;                           // 0x0068 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bStaticCollision : 1;                          // 0x0068 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bTwoWayCollision : 1;                          // 0x0068 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bDestroy : 1;                                  // 0x0068 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bSyncFailed : 1;                               // 0x0068 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bIsInGame : 1;                                 // 0x0068 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	float                                              MaxMotionDistance;                             // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Damping;                                       // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ExternalAcceleration;                          // 0x0074 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              RestParticleDistance;                          // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RestDensity;                                   // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              KernelRadiusMultiplier;                        // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Stiffness;                                     // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Viscosity;                                     // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CollisionResponseCoefficient;                  // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    CascadeScene;                                  // 0x0098 (0x0004) [0x0000000000001000] (CPF_Native)  
	struct FPointer                                    PSys;                                          // 0x009C (0x0004) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PhysXParticleSystem");
		}

		return uClassPointer;
	};

};

// Class Engine.KActor
// 0x00B4 (0x0204 - 0x02B8)
class AKActor : public ADynamicSMActor
{
public:
	uint32_t                                           bDamageAppliesImpulse : 1;                     // 0x0204 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bWakeOnLevelStart : 1;                         // 0x0204 (0x0004) [0x0000000000000021] [0x00000002] (CPF_Edit | CPF_Net | CPF_RepNotify)
	uint32_t                                           bCurrentSlide : 1;                             // 0x0204 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bSlideActive : 1;                              // 0x0204 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bEnableStayUprightSpring : 1;                  // 0x0204 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bLimitMaxPhysicsVelocity : 1;                  // 0x0204 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bNeedsRBStateReplication : 1;                  // 0x0204 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bDisableClientSidePawnInteractions : 1;        // 0x0204 (0x0004) [0x0000000000000000] [0x00000080] 
	class UParticleSystemComponent*                    ImpactEffectComponent;                         // 0x0208 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UAudioComponent*                             ImpactSoundComponent;                          // 0x020C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UAudioComponent*                             ImpactSoundComponent2;                         // 0x0210 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              LastImpactTime;                                // 0x0214 (0x0004) [0x0000000000000000]               
	struct FPhysEffectInfo                             ImpactEffectInfo;                              // 0x0218 (0x0010) [0x0000000000000000]               
	class UParticleSystemComponent*                    SlideEffectComponent;                          // 0x0228 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UAudioComponent*                             SlideSoundComponent;                           // 0x022C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              LastSlideTime;                                 // 0x0230 (0x0004) [0x0000000000000000]               
	struct FPhysEffectInfo                             SlideEffectInfo;                               // 0x0234 (0x0010) [0x0000000000000000]               
	float                                              StayUprightTorqueFactor;                       // 0x0244 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StayUprightMaxTorque;                          // 0x0248 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxPhysicsVelocity;                            // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRigidBodyState                             RBState;                                       // 0x0250 (0x0040) [0x0000000000001022] (CPF_Const | CPF_Net | CPF_Native)
	float                                              AngErrorAccumulator;                           // 0x0290 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FVector                                     ReplicatedDrawScale3D;                         // 0x0294 (0x000C) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	struct FVector                                     InitialLocation;                               // 0x02A0 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    InitialRotation;                               // 0x02AC (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.KActor");
		}

		return uClassPointer;
	};

	void Reset();
	void OnTeleport(class USeqAct_Teleport* inAction);
	void OnToggle(class USeqAct_Toggle* Action);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float optionalDamageFalloffExponent);
	void eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	void eventApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& optionalHitInfo, class UClass* optionalDamageType);
	void eventReplicatedEvent(const class FName& VarName);
	void eventSpawnedByKismet();
	void SetPhysicalCollisionProperties();
	void eventDestroyed();
	void eventFellOutOfWorld(class UClass* dmgType);
	void eventPostBeginPlay();
	void ResolveRBState();
	class UPhysicalMaterial* GetKActorPhysMaterial();
};

// Class Engine.KActorFromStatic
// 0x0008 (0x02B8 - 0x02C0)
class AKActorFromStatic : public AKActor
{
public:
	class AActor*                                      MyStaticMeshActor;                             // 0x02B8 (0x0004) [0x0000000000000000]               
	float                                              MaxImpulseSpeed;                               // 0x02BC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.KActorFromStatic");
		}

		return uClassPointer;
	};

	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float optionalDamageFalloffExponent);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventBump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void ReceiveImpulse(class APawn* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& optionalHitInfo, class UClass* optionalDamageType);
	static class AKActorFromStatic* MakeDynamic(class UStaticMeshComponent* MovableMesh);
	static void MakeStatic();
	void BecomeStatic();
	void eventOnWakeRBPhysics();
	void eventOnSleepRBPhysics();
	void DisablePrecomputedLighting();
};

// Class Engine.KActorSpawnable
// 0x0004 (0x02B8 - 0x02BC)
class AKActorSpawnable : public AKActor
{
public:
	uint32_t                                           bRecycleScaleToZero : 1;                       // 0x02B8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bScalingToZero : 1;                            // 0x02B8 (0x0004) [0x0000000000000000] [0x00000002] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.KActorSpawnable");
		}

		return uClassPointer;
	};

	void ResetComponents();
	void eventRecycleInternal();
	void Recycle();
	void Initialize();
};

// Class Engine.KAsset
// 0x0010 (0x01C8 - 0x01D8)
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                         // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bDamageAppliesImpulse : 1;                     // 0x01CC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bWakeOnLevelStart : 1;                         // 0x01CC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bBlockPawns : 1;                               // 0x01CC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class USkeletalMesh*                               ReplicatedMesh;                                // 0x01D0 (0x0004) [0x0000000000002020] (CPF_Net | CPF_Transient | CPF_RepNotify)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                           // 0x01D4 (0x0004) [0x0000000000002020] (CPF_Net | CPF_Transient | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.KAsset");
		}

		return uClassPointer;
	};

	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void OnTeleport(class USeqAct_Teleport* inAction);
	void OnToggle(class USeqAct_Toggle* Action);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float optionalDamageFalloffExponent);
	void eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	void eventReplicatedEvent(const class FName& VarName);
	void SetMeshAndPhysAsset(class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset);
	void eventPostBeginPlay();
};

// Class Engine.Pawn
// 0x0288 (0x01C8 - 0x0450)
class APawn : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_Speaker;                    // 0x01C8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	float                                              MaxStepHeight;                                 // 0x01CC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              MaxJumpHeight;                                 // 0x01D0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              WalkableFloorZ;                                // 0x01D4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LedgeCheckThreshold;                           // 0x01D8 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     PartialLedgeMoveDir;                           // 0x01DC (0x000C) [0x0000000000000002] (CPF_Const)   
	class AController*                                 Controller;                                    // 0x01E8 (0x0004) [0x0000000004000020] (CPF_Net | CPF_EditInline | CPF_RepNotify)
	class APawn*                                       NextPawn;                                      // 0x01EC (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              NetRelevancyTime;                              // 0x01F0 (0x0004) [0x0000000000000000]               
	class APlayerController*                           LastRealViewer;                                // 0x01F4 (0x0004) [0x0000000000000000]               
	class AActor*                                      LastViewer;                                    // 0x01F8 (0x0004) [0x0000000000000000]               
	uint32_t                                           bScriptTickSpecial : 1;                        // 0x01FC (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bUpAndOut : 1;                                 // 0x01FC (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bIsWalking : 1;                                // 0x01FC (0x0004) [0x0000000000000020] [0x00000004] (CPF_Net)
	uint32_t                                           bWantsToCrouch : 1;                            // 0x01FC (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bIsCrouched : 1;                               // 0x01FC (0x0004) [0x0000000000000022] [0x00000010] (CPF_Const | CPF_Net)
	uint32_t                                           bTryToUncrouch : 1;                            // 0x01FC (0x0004) [0x0000000000000002] [0x00000020] (CPF_Const)
	uint32_t                                           bCanCrouch : 1;                                // 0x01FC (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bCrawler : 1;                                  // 0x01FC (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bReducedSpeed : 1;                             // 0x01FC (0x0004) [0x0000000000000002] [0x00000100] (CPF_Const)
	uint32_t                                           bJumpCapable : 1;                              // 0x01FC (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bCanJump : 1;                                  // 0x01FC (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bCanWalk : 1;                                  // 0x01FC (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bCanSwim : 1;                                  // 0x01FC (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bCanFly : 1;                                   // 0x01FC (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bCanClimbLadders : 1;                          // 0x01FC (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bCanStrafe : 1;                                // 0x01FC (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bAvoidLedges : 1;                              // 0x01FC (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bStopAtLedges : 1;                             // 0x01FC (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bAllowLedgeOverhang : 1;                       // 0x01FC (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bPartiallyOverLedge : 1;                       // 0x01FC (0x0004) [0x0000000000000002] [0x00080000] (CPF_Const)
	uint32_t                                           bSimulateGravity : 1;                          // 0x01FC (0x0004) [0x0000000000000022] [0x00100000] (CPF_Const | CPF_Net)
	uint32_t                                           bIgnoreForces : 1;                             // 0x01FC (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bCanWalkOffLedges : 1;                         // 0x01FC (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bCanBeBaseForPawns : 1;                        // 0x01FC (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bSimGravityDisabled : 1;                       // 0x01FC (0x0004) [0x0000000000000002] [0x01000000] (CPF_Const)
	uint32_t                                           bDirectHitWall : 1;                            // 0x01FC (0x0004) [0x0000000000000000] [0x02000000] 
	uint32_t                                           bPushesRigidBodies : 1;                        // 0x01FC (0x0004) [0x0000000000000002] [0x04000000] (CPF_Const)
	uint32_t                                           bForceFloorCheck : 1;                          // 0x01FC (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bForceKeepAnchor : 1;                          // 0x01FC (0x0004) [0x0000000000000000] [0x10000000] 
	uint32_t                                           bCanMantle : 1;                                // 0x01FC (0x0004) [0x0000000000004000] [0x20000000] (CPF_Config)
	uint32_t                                           bCanClimbUp : 1;                               // 0x01FC (0x0004) [0x0000000000004000] [0x40000000] (CPF_Config)
	uint32_t                                           bCanClimbCeilings : 1;                         // 0x01FC (0x0004) [0x0000000000000000] [0x80000000] 
	uint32_t                                           bCanSwatTurn : 1;                              // 0x0200 (0x0004) [0x0000000000004020] [0x00000001] (CPF_Net | CPF_Config)
	uint32_t                                           bCanLeap : 1;                                  // 0x0200 (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	uint32_t                                           bCanCoverSlip : 1;                             // 0x0200 (0x0004) [0x0000000000004000] [0x00000004] (CPF_Config)
	uint32_t                                           bDisplayPathErrors : 1;                        // 0x0200 (0x0004) [0x0000000000044000] [0x00000008] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bCanPickupInventory : 1;                       // 0x0200 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bAmbientCreature : 1;                          // 0x0200 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bLOSHearing : 1;                               // 0x0200 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bMuffledHearing : 1;                           // 0x0200 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bDontPossess : 1;                              // 0x0200 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bRollToDesired : 1;                            // 0x0200 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bStationary : 1;                               // 0x0200 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bCachedRelevant : 1;                           // 0x0200 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bNoWeaponFiring : 1;                           // 0x0200 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bModifyReachSpecCost : 1;                      // 0x0200 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bModifyNavPointDest : 1;                       // 0x0200 (0x0004) [0x0000000000000000] [0x00004000] 
	uint32_t                                           bPathfindsAsVehicle : 1;                       // 0x0200 (0x0004) [0x0000000000000000] [0x00008000] 
	uint32_t                                           bPrevBypassSimulatedClientPhysics : 1;         // 0x0200 (0x0004) [0x0000000000000000] [0x00010000] 
	uint32_t                                           bRunPhysicsWithNoController : 1;               // 0x0200 (0x0004) [0x0000000000000000] [0x00020000] 
	uint32_t                                           bForceMaxAccel : 1;                            // 0x0200 (0x0004) [0x0000000000000000] [0x00040000] 
	uint32_t                                           bLimitFallAccel : 1;                           // 0x0200 (0x0004) [0x0000000000000000] [0x00080000] 
	uint32_t                                           bReplicateHealthToAll : 1;                     // 0x0200 (0x0004) [0x0000000000000000] [0x00100000] 
	uint32_t                                           bForceRMVelocity : 1;                          // 0x0200 (0x0004) [0x0000000000000000] [0x00200000] 
	uint32_t                                           bForceRegularVelocity : 1;                     // 0x0200 (0x0004) [0x0000000000000000] [0x00400000] 
	uint32_t                                           bPlayedDeath : 1;                              // 0x0200 (0x0004) [0x0000000000000000] [0x00800000] 
	uint32_t                                           bDesiredRotationSet : 1;                       // 0x0200 (0x0004) [0x0000000000000002] [0x01000000] (CPF_Const)
	uint32_t                                           bLockDesiredRotation : 1;                      // 0x0200 (0x0004) [0x0000000000000002] [0x02000000] (CPF_Const)
	uint32_t                                           bUnlockWhenReached : 1;                        // 0x0200 (0x0004) [0x0000000000000002] [0x04000000] (CPF_Const)
	uint32_t                                           bNeedsBaseTickedFirst : 1;                     // 0x0200 (0x0004) [0x0000000000000000] [0x08000000] 
	uint32_t                                           bUsedByMatinee : 1;                            // 0x0200 (0x0004) [0x0000000000002020] [0x10000000] (CPF_Net | CPF_Transient | CPF_RepNotify)
	uint32_t                                           bRootMotionFromInterpCurve : 1;                // 0x0200 (0x0004) [0x0000000000000020] [0x20000000] (CPF_Net)
	uint32_t                                           bDebugShowCameraLocation : 1;                  // 0x0200 (0x0004) [0x0000000000000001] [0x40000000] (CPF_Edit)
	uint32_t                                           bFastAttachedMove : 1;                         // 0x0200 (0x0004) [0x0000000000000021] [0x80000000] (CPF_Edit | CPF_Net)
	EPhysics                                           WalkingPhysics;                                // 0x0204 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EPathSearchType                                    PathSearchType;                                // 0x0205 (0x0001) [0x0000000000000000]               
	uint8_t                                            RemoteViewPitch;                               // 0x0206 (0x0001) [0x0000000000000022] (CPF_Const | CPF_Net)
	uint8_t                                            FlashCount;                                    // 0x0207 (0x0001) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	uint8_t                                            FiringMode;                                    // 0x0208 (0x0001) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	float                                              UncrouchTime;                                  // 0x020C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              CrouchHeight;                                  // 0x0210 (0x0004) [0x0000000000000000]               
	float                                              CrouchRadius;                                  // 0x0214 (0x0004) [0x0000000000000000]               
	int32_t                                            FullHeight;                                    // 0x0218 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              NonPreferredVehiclePathMultiplier;             // 0x021C (0x0004) [0x0000000000000000]               
	class UPathConstraint*                             PathConstraintList;                            // 0x0220 (0x0004) [0x0000000000000000]               
	class UPathGoalEvaluator*                          PathGoalList;                                  // 0x0224 (0x0004) [0x0000000000000000]               
	float                                              DesiredSpeed;                                  // 0x0228 (0x0004) [0x0000000000000000]               
	float                                              MaxDesiredSpeed;                               // 0x022C (0x0004) [0x0000000000000000]               
	float                                              HearingThreshold;                              // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Alertness;                                     // 0x0234 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SightRadius;                                   // 0x0238 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PeripheralVision;                              // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AvgPhysicsTime;                                // 0x0240 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              Mass;                                          // 0x0244 (0x0004) [0x0000000000000000]               
	float                                              Buoyancy;                                      // 0x0248 (0x0004) [0x0000000000000000]               
	float                                              MeleeRange;                                    // 0x024C (0x0004) [0x0000000000000000]               
	class ANavigationPoint*                            Anchor;                                        // 0x0250 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            AnchorItem;                                    // 0x0254 (0x0004) [0x0000000000000002] (CPF_Const)   
	class ANavigationPoint*                            LastAnchor;                                    // 0x0258 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              FindAnchorFailedTime;                          // 0x025C (0x0004) [0x0000000000000000]               
	float                                              LastValidAnchorTime;                           // 0x0260 (0x0004) [0x0000000000000000]               
	float                                              DestinationOffset;                             // 0x0264 (0x0004) [0x0000000000000000]               
	float                                              NextPathRadius;                                // 0x0268 (0x0004) [0x0000000000000000]               
	struct FVector                                     SerpentineDir;                                 // 0x026C (0x000C) [0x0000000000000000]               
	float                                              SerpentineDist;                                // 0x0278 (0x0004) [0x0000000000000000]               
	float                                              SerpentineTime;                                // 0x027C (0x0004) [0x0000000000000000]               
	float                                              SpawnTime;                                     // 0x0280 (0x0004) [0x0000000000000000]               
	int32_t                                            MaxPitchLimit;                                 // 0x0284 (0x0004) [0x0000000000000000]               
	float                                              GroundSpeed;                                   // 0x0288 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              WaterSpeed;                                    // 0x028C (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              AirSpeed;                                      // 0x0290 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              LadderSpeed;                                   // 0x0294 (0x0004) [0x0000000000000000]               
	float                                              AccelRate;                                     // 0x0298 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              JumpZ;                                         // 0x029C (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              OutofWaterZ;                                   // 0x02A0 (0x0004) [0x0000000000000000]               
	float                                              MaxOutOfWaterStepHeight;                       // 0x02A4 (0x0004) [0x0000000000000000]               
	float                                              AirControl;                                    // 0x02A8 (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              WalkingPct;                                    // 0x02AC (0x0004) [0x0000000000000000]               
	float                                              MovementSpeedModifier;                         // 0x02B0 (0x0004) [0x0000000000000000]               
	float                                              CrouchedPct;                                   // 0x02B4 (0x0004) [0x0000000000000000]               
	float                                              MaxFallSpeed;                                  // 0x02B8 (0x0004) [0x0000000000000000]               
	float                                              AIMaxFallSpeedFactor;                          // 0x02BC (0x0004) [0x0000000000000000]               
	float                                              BaseEyeHeight;                                 // 0x02C0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EyeHeight;                                     // 0x02C4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Floor;                                         // 0x02C8 (0x000C) [0x0000000000000000]               
	float                                              SplashTime;                                    // 0x02D4 (0x0004) [0x0000000000000000]               
	class APhysicsVolume*                              HeadVolume;                                    // 0x02D8 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            Health;                                        // 0x02DC (0x0004) [0x0000000000000021] (CPF_Edit | CPF_Net)
	int32_t                                            HealthMax;                                     // 0x02E0 (0x0004) [0x0000000000000021] (CPF_Edit | CPF_Net)
	float                                              BreathTime;                                    // 0x02E4 (0x0004) [0x0000000000000000]               
	float                                              UnderWaterTime;                                // 0x02E8 (0x0004) [0x0000000000000000]               
	float                                              LastPainTime;                                  // 0x02EC (0x0004) [0x0000000000000000]               
	float                                              KismetDeathDelayTime;                          // 0x02F0 (0x0004) [0x0000000000000000]               
	struct FVector                                     RMVelocity;                                    // 0x02F4 (0x000C) [0x0000000000000000]               
	struct FVector                                     noise1spot;                                    // 0x0300 (0x000C) [0x0000000000000002] (CPF_Const)   
	float                                              noise1time;                                    // 0x030C (0x0004) [0x0000000000000002] (CPF_Const)   
	class APawn*                                       noise1other;                                   // 0x0310 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              noise1loudness;                                // 0x0314 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     noise2spot;                                    // 0x0318 (0x000C) [0x0000000000000002] (CPF_Const)   
	float                                              noise2time;                                    // 0x0324 (0x0004) [0x0000000000000002] (CPF_Const)   
	class APawn*                                       noise2other;                                   // 0x0328 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              noise2loudness;                                // 0x032C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SoundDampening;                                // 0x0330 (0x0004) [0x0000000000000000]               
	float                                              DamageScaling;                                 // 0x0334 (0x0004) [0x0000000000000000]               
	class FString                                      MenuName;                                      // 0x0338 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UClass*                                      ControllerClass;                               // 0x0344 (0x0004) [0x0000000000000000]               
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                         // 0x0348 (0x0004) [0x0000000004000020] (CPF_Net | CPF_EditInline | CPF_RepNotify)
	class ALadderVolume*                               OnLadder;                                      // 0x034C (0x0004) [0x0000000000000000]               
	class FName                                        LandMovementState;                             // 0x0350 (0x0008) [0x0000000000000000]               
	class FName                                        WaterMovementState;                            // 0x0358 (0x0008) [0x0000000000000000]               
	class APlayerStart*                                LastStartSpot;                                 // 0x0360 (0x0004) [0x0000000000000000]               
	float                                              LastStartTime;                                 // 0x0364 (0x0004) [0x0000000000000000]               
	struct FVector                                     TakeHitLocation;                               // 0x0368 (0x000C) [0x0000000000000020] (CPF_Net)     
	class UClass*                                      HitDamageType;                                 // 0x0374 (0x0004) [0x0000000000000020] (CPF_Net)     
	struct FVector                                     TearOffMomentum;                               // 0x0378 (0x000C) [0x0000000000000020] (CPF_Net)     
	class USkeletalMeshComponent*                      Mesh;                                          // 0x0384 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UCylinderComponent*                          CylinderComponent;                             // 0x0388 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              RBPushRadius;                                  // 0x038C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RBPushStrength;                                // 0x0390 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AVehicle*                                    DrivenVehicle;                                 // 0x0394 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	float                                              AlwaysRelevantDistanceSquared;                 // 0x0398 (0x0004) [0x0000000000000000]               
	float                                              VehicleCheckRadius;                            // 0x039C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AController*                                 LastHitBy;                                     // 0x03A0 (0x0004) [0x0000000000000000]               
	float                                              ViewPitchMin;                                  // 0x03A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ViewPitchMax;                                  // 0x03A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            AllowedYawError;                               // 0x03AC (0x0004) [0x0000000000000000]               
	struct FRotator                                    DesiredRotation;                               // 0x03B0 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UClass*                                      InventoryManagerClass;                         // 0x03BC (0x0004) [0x0000000000000000]               
	class AInventoryManager*                           InvManager;                                    // 0x03C0 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	class AWeapon*                                     Weapon;                                        // 0x03C4 (0x0004) [0x0000000000000000]               
	struct FVector                                     FlashLocation;                                 // 0x03C8 (0x000C) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	struct FVector                                     LastFiringFlashLocation;                       // 0x03D4 (0x000C) [0x0000000000000000]               
	int32_t                                            ShotCount;                                     // 0x03E0 (0x0004) [0x0000000000000000]               
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                  // 0x03E4 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class URB_BodyInstance*                            PhysicsPushBody;                               // 0x03E8 (0x0004) [0x0000000000000000]               
	int32_t                                            FailedLandingCount;                            // 0x03EC (0x0004) [0x0000000000000000]               
	class TArray<class UAnimNodeSlot*>                 SlotNodes;                                     // 0x03F0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UInterpGroup*>                  InterpGroupList;                               // 0x03FC (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UAudioComponent*                             FacialAudioComp;                               // 0x0408 (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class UMaterialInstanceConstant*                   MIC_PawnMat;                                   // 0x040C (0x0004) [0x0000000000002000] (CPF_Transient)
	class UMaterialInstanceConstant*                   MIC_PawnHair;                                  // 0x0410 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FScalarParameterInterpStruct>  ScalarParameterInterpArray;                    // 0x0414 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FRootMotionCurve                            RootMotionInterpCurve;                         // 0x0420 (0x001C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              RootMotionInterpRate;                          // 0x043C (0x0004) [0x0000000000000020] (CPF_Net)     
	float                                              RootMotionInterpCurrentTime;                   // 0x0440 (0x0004) [0x0000000000000020] (CPF_Net)     
	struct FVector                                     RootMotionInterpCurveLastValue;                // 0x0444 (0x000C) [0x0000000000000020] (CPF_Net)     

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Pawn");
		}

		return uClassPointer;
	};

	void OnSetVelocity(class USeqAct_SetVelocity* Action);
	void eventSpeak(class USoundCue* Cue);
	void SetScalarParameterInterp(struct FScalarParameterInterpStruct& outScalarParameterInterp);
	void SetRootMotionInterpCurrentTime(float inTime, float optionalDeltaTime, bool optionalBUpdateSkelPose);
	void SetCinematicMode(bool bInCinematicMode);
	void ZeroMovementVariables();
	void ClearPathStep();
	void DrawPathStep(class UCanvas* C);
	void IncrementPathChild(int32_t Cnt, class UCanvas* C);
	void IncrementPathStep(int32_t Cnt, class UCanvas* C);
	class UPathGoalEvaluator* CreatePathGoalEvaluator(class UClass* GoalEvalClass);
	class UPathConstraint* CreatePathConstraint(class UClass* ConstraintClass);
	void AddGoalEvaluator(class UPathGoalEvaluator* Evaluator);
	void AddPathConstraint(class UPathConstraint* Constraint);
	void ClearConstraints();
	void eventSoakPause();
	void eventBecomeViewTarget(class APlayerController* PC);
	void eventMessagePlayer(const class FString& msg);
	bool HandleTeleport(const class TArray<class UObject*>& DestList, bool bUpdateRotation, bool bCheckOverlap, float optionalTeleportDistance, const class TArray<class AVolume*>& optionalTeleportVolumes, int32_t optionalPreferredDestIndex);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	float GetDamageScaling();
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void eventSpawnedByKismet();
	bool IsStationary();
	struct FVector GetCollisionExtent();
	float GetCollisionHeight();
	float GetCollisionRadius();
	bool CheatFly();
	bool CheatGhost();
	bool CheatWalk();
	void PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void SetActiveWeapon(class AWeapon* NewWeapon);
	void TossInventory(class AInventory* Inv, const struct FVector& optionalForceVelocity);
	void ThrowActiveWeapon(bool optionalBDestroyWeap);
	void DrawHUD(class AHUD* H);
	class AInventory* FindInventoryType(class UClass* DesiredClass, bool optionalBAllowSubclass);
	class AInventory* eventCreateInventory(class UClass* NewInvClass, bool optionalBDoNotActivate);
	void AddDefaultInventory();
	void eventStopDriving(class AVehicle* V);
	void eventStartDriving(class AVehicle* V);
	bool CanThrowWeapon();
	void Suicide();
	class AVehicle* GetVehicleBase();
	void PlayLanded(float ImpactVel);
	bool CannotJumpNow();
	void eventPlayFootStepSound(int32_t FootDown);
	void eventTornOff();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void SetDyingPhysics();
	void TurnOff();
	void PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo);
	void PlayDyingSound();
	bool DoJump(bool bUpdating);
	bool CheckWaterJump(struct FVector& outWallNormal);
	void TakeDrowningDamage();
	void eventBreathTimer();
	bool TouchingWaterVolume();
	void eventHeadVolumeChange(class APhysicsVolume* newHeadVolume);
	void eventTickSpecial(float DeltaTime);
	void eventLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	void eventFalling();
	void DelayTriggerDeath();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void ThrowWeaponOnDeath();
	bool eventIsSameTeam(class APawn* Other);
	class ATeamInfo* GetTeam();
	uint8_t GetTeamNum();
	void eventTakeDamage(int32_t Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	class AController* SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int32_t Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	bool eventTakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, const class TArray<class FName>& Bones);
	void PruneDamagedBoneList(class TArray<class FName>& outBones);
	bool eventHealDamage(int32_t Amount, class AController* Healer, class UClass* DamageType);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, int32_t& outInDamage, struct FVector& outMomentum);
	void SetMovementPhysics();
	void Gasp();
	void OnGiveInventory(class USeqAct_GiveInventory* inAction);
	void OnAssignController(class USeqAct_AssignController* inAction);
	void eventReceivedNewEvent(class USequenceEvent* Evt);
	void SpawnDefaultController();
	void eventPostBeginPlay();
	void eventPreBeginPlay();
	void eventDestroyed();
	void DetachFromController(bool optionalBDestroyController);
	void CrushedBy(class APawn* OtherPawn);
	bool CanBeBaseForPawn(class APawn* aPawn);
	void eventBaseChange();
	void eventStuckOnPawn(class APawn* OtherPawn);
	void JumpOffPawn();
	void gibbedBy(class AActor* Other);
	void eventEncroachedBy(class AActor* Other);
	bool eventEncroachingOn(class AActor* Other);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	void eventUpdatePawnRotation(const struct FRotator& NewRotation);
	void ClientSetRotation(const struct FRotator& NewRotation);
	void ClientRestart();
	void Restart();
	void TakeFallingDamage();
	void KilledBy(class APawn* EventInstigator);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo);
	void HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo);
	void eventStartCrouch(float HeightAdjust);
	void eventEndCrouch(float HeightAdjust);
	void ShouldCrouch(bool bCrouch);
	void UnCrouch();
	void eventOutsideWorldBounds();
	void eventFellOutOfWorld(class UClass* dmgType);
	void eventClientMessage(const class FString& S, const class FName& optionalType);
	void HandlePickup(class AInventory* Inv);
	bool LineOfSightTo(class AActor* Other);
	void SetMoveTarget(class AActor* NewTarget);
	bool InGodMode();
	void SetViewRotation(const struct FRotator& NewRotation);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	bool eventInFreeCam();
	struct FRotator eventGetBaseAimRotation();
	struct FVector eventGetWeaponStartTraceLocation(class AWeapon* optionalCurrentWeapon);
	struct FVector eventGetPawnViewLocation();
	struct FRotator eventGetViewRotation();
	void eventGetActorEyesViewPoint(struct FVector& outOut_Location, struct FRotator& outOut_Rotation);
	void ProcessViewRotation(float DeltaTime, struct FRotator& outOut_ViewRotation, struct FRotator& outOut_DeltaRot);
	bool IsFirstPerson();
	bool IsPlayerPawn();
	bool IsLocallyControlled();
	bool IsHumanControlled(class AController* optionalPawnController);
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void ClimbLadder(class ALadderVolume* L);
	void EndClimbLadder(class ALadderVolume* OldLadder);
	bool CanSplash();
	void eventSetWalking(bool bNewIsWalking);
	float RangedAttackTime();
	bool RecommendLongRangedAttack();
	bool CanGrabLadder();
	void DropToGround();
	class FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	void UnPossessed();
	void UpdateControllerOnPossess(bool bVehicleTransition);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void NotifyTeamChanged();
	void PlayTeleportEffect(bool bOut, bool bSound);
	class FString GetHumanReadableName();
	bool NeedToTurn(const struct FVector& targ);
	bool IsFiring();
	bool HasRangedAttack();
	bool FireOnRelease();
	bool TooCloseToAttack(class AActor* Other);
	bool CanAttack(class AActor* Other);
	bool BotFire(bool bFinished);
	void WeaponStoppedFiring(class AWeapon* InWeapon, bool bViaReplication);
	void WeaponFired(class AWeapon* InWeapon, bool bViaReplication, const struct FVector& optionalHitLocation);
	void FlashLocationUpdated(class AWeapon* InWeapon, const struct FVector& InFlashLocation, bool bViaReplication);
	void ClearFlashLocation(class AWeapon* InWeapon);
	void SetFlashLocation(class AWeapon* InWeapon, uint8_t InFiringMode, const struct FVector& NewLoc);
	void ClearFlashCount(class AWeapon* InWeapon);
	void FlashCountUpdated(class AWeapon* InWeapon, uint8_t InFlashCount, bool bViaReplication);
	void IncrementFlashCount(class AWeapon* InWeapon, uint8_t InFiringMode);
	void FiringModeUpdated(class AWeapon* InWeapon, uint8_t InFiringMode, bool bViaReplication);
	void SetFiringMode(class AWeapon* InWeapon, uint8_t InFiringMode);
	uint8_t GetWeaponFiringMode(class AWeapon* InWeapon);
	void StopFire(uint8_t FireModeNum);
	void StartFire(uint8_t FireModeNum);
	bool StopFiring();
	void Reset();
	void PlayerChangedTeam();
	void SetBaseEyeheight();
	bool eventSpecialMoveThruEdge(ENavMeshEdgeType EdgeType, int32_t Dir, const struct FVector& MoveStart, const struct FVector& MoveDest, class AActor* optionalRelActor, int32_t optionalRelItem, class UNavigationHandle* optionalNavHandle);
	bool SpecialMoveTo(class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next);
	bool TermRagdoll();
	bool InitRagdoll();
	void GetBoundingCylinder(float& outCollisionRadius, float& outCollisionHeight);
	bool ReachedDesiredRotation();
	void SetPushesRigidBodies(bool NewPush);
	void ForceCrouch();
	bool ReachedPoint(const struct FVector& Point, class AActor* NewAnchor);
	bool ReachedDestination(class AActor* Goal);
	class ANavigationPoint* GetBestAnchor(class AActor* TestActor, const struct FVector& TestLocation, bool bStartPoint, bool bOnlyCheckVisible, float& outOut_Dist);
	void SetAnchor(class ANavigationPoint* NewAnchor);
	void SetRemoteViewPitch(int32_t NewRemoteViewPitch);
	bool IsInvisible();
	bool IsValidEnemyTargetFor(class APlayerReplicationInfo* PRI, bool bNoPRIisEnemy);
	float GetFallDuration();
	bool SuggestJumpVelocity(const struct FVector& Destination, const struct FVector& Start, bool optionalBRequireFallLanding, struct FVector& outJumpVelocity);
	bool ValidAnchor();
	struct FVector AdjustDestination(class AActor* GoalActor, const struct FVector& optionalDest);
	bool IsAliveAndWell();
	void eventReplicatedEvent(const class FName& VarName);
	void eventSetSkelControlScale(const class FName& SkelControlName, float Scale);
	void eventSetMorphWeight(const class FName& MorphNodeName, float MorphWeight);
	class UFaceFXAsset* eventGetActorFaceFXAsset();
	void FaceFXAudioFinished(class UAudioComponent* AC);
	void OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction);
	bool CanActorPlayFaceFXAnim();
	bool IsActorPlayingFaceFXAnim();
	class UAudioComponent* eventGetFaceFXAudioComponent();
	void eventStopActorFaceFXAnim();
	bool eventPlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const class FString& GroupName, const class FString& SeqName, class USoundCue* SoundCueToPlay);
	void eventMAT_FinishAIGroup();
	void eventMAT_BeginAIGroup(const struct FVector& StartLoc, const struct FRotator& StartRot);
	void FinishAIGroup();
	void BeginAIGroup();
	void eventInterpolationFinished(class USeqAct_Interp* InterpAction);
	void eventInterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void MAT_SetSkelControlStrength(const class FName& SkelControlName, float ControlStrength);
	void MAT_SetSkelControlScale(const class FName& SkelControlName, float Scale);
	void MAT_SetMorphWeight(const class FName& MorphNodeName, float MorphWeight);
	void MAT_SetAnimWeights(const class TArray<struct FAnimSlotInfo>& SlotInfos);
	void MAT_SetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void eventSetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void MAT_FinishAnimControl(class UInterpGroup* InInterpGroup);
	void eventFinishAnimControl(class UInterpGroup* InInterpGroup);
	void MAT_BeginAnimControl(class UInterpGroup* InInterpGroup);
	void eventBeginAnimControl(class UInterpGroup* InInterpGroup);
	bool eventRestoreAnimSetsToDefault();
	void eventAnimSetListUpdated();
	void AddAnimSets(class TArray<class UAnimSet*>& outCustomAnimSets);
	void eventBuildScriptAnimSetList();
	void UpdateAnimSetList();
	void ClearAnimNodes();
	void eventCacheAnimNodes();
	void eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	bool IsDesiredRotationLocked();
	bool IsDesiredRotationInUse();
	void CheckDesiredRotation();
	void ResetDesiredRotation();
	void LockDesiredRotation(bool Lock, bool optionalInUnlockWhenReached);
	bool SetDesiredRotation(const struct FRotator& TargetDesiredRotation, bool optionalInLockDesiredRotation, bool optionalInUnlockWhenReached, float optionalInterpolationTime, bool optionalBResetRotationRate);
	bool PickWallAdjust(const struct FVector& WallHitNormal, class AActor* HitActor);
};

// Class Engine.Vehicle
// 0x0074 (0x0450 - 0x04C4)
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                        // 0x0450 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bDriving : 1;                                  // 0x0454 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bDriverIsVisible : 1;                          // 0x0454 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bAttachDriver : 1;                             // 0x0454 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bTurnInPlace : 1;                              // 0x0454 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bSeparateTurretFocus : 1;                      // 0x0454 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bFollowLookDir : 1;                            // 0x0454 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bHasHandbrake : 1;                             // 0x0454 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bScriptedRise : 1;                             // 0x0454 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bDuckObstacles : 1;                            // 0x0454 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bAvoidReversing : 1;                           // 0x0454 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bRetryPathfindingWithDriver : 1;               // 0x0454 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bIgnoreStallZ : 1;                             // 0x0454 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bDoExtraNetRelevancyTraces : 1;                // 0x0454 (0x0004) [0x0000000000000000] [0x00001000] 
	class TArray<struct FVector>                       ExitPositions;                                 // 0x0458 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              ExitRadius;                                    // 0x0464 (0x0004) [0x0000000000000000]               
	struct FVector                                     ExitOffset;                                    // 0x0468 (0x000C) [0x0000000000000000]               
	float                                              Steering;                                      // 0x0474 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Throttle;                                      // 0x0478 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Rise;                                          // 0x047C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     TargetLocationAdjustment;                      // 0x0480 (0x000C) [0x0000000000000000]               
	float                                              DriverDamageMult;                              // 0x048C (0x0004) [0x0000000000000000]               
	float                                              MomentumMult;                                  // 0x0490 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      CrushedDamageType;                             // 0x0494 (0x0004) [0x0000000000000000]               
	float                                              MinCrushSpeed;                                 // 0x0498 (0x0004) [0x0000000000000000]               
	float                                              ForceCrushPenetration;                         // 0x049C (0x0004) [0x0000000000000000]               
	uint8_t                                            StuckCount;                                    // 0x04A0 (0x0001) [0x0000000000000000]               
	float                                              ThrottleTime;                                  // 0x04A4 (0x0004) [0x0000000000000000]               
	float                                              StuckTime;                                     // 0x04A8 (0x0004) [0x0000000000000000]               
	float                                              OldSteering;                                   // 0x04AC (0x0004) [0x0000000000000000]               
	float                                              OnlySteeringStartTime;                         // 0x04B0 (0x0004) [0x0000000000000000]               
	float                                              OldThrottle;                                   // 0x04B4 (0x0004) [0x0000000000000000]               
	float                                              AIMoveCheckTime;                               // 0x04B8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              VehicleMovingTime;                             // 0x04BC (0x0004) [0x0000000000000000]               
	float                                              TurnTime;                                      // 0x04C0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Vehicle");
		}

		return uClassPointer;
	};

	void ZeroMovementVariables();
	void NotifyDriverTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int32_t Damage, class UClass* DamageType, const struct FVector& Momentum);
	void eventReplicatedEvent(const class FName& VarName);
	void DrivingStatusChanged();
	void SetDriving(bool B);
	struct FVector eventGetEntryLocation();
	void CrushedBy(class APawn* OtherPawn);
	void PancakeOther(class APawn* Other);
	bool eventEncroachingOn(class AActor* Other);
	class AController* GetCollisionDamageInstigator();
	void eventEncroachedBy(class AActor* Other);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	class FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void DriverDied(class UClass* DamageType);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void ThrowActiveWeapon(bool optionalBDestroyWeap);
	void AdjustDriverDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int32_t& outDamage, struct FVector& outMomentum);
	void eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
	class AController* SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType);
	void UnPossessed();
	bool TryExitPos(class APawn* ExitingDriver, const struct FVector& ExitPos, bool bMustFindGround);
	bool FindAutoExit(class APawn* ExitingDriver);
	bool PlaceExitingDriver(class APawn* optionalExitingDriver);
	void DriverLeft();
	void SetInputs(float InForward, float InStrafe, float InUp);
	bool eventDriverLeave(bool bForceLeave);
	struct FRotator GetExitRotation(class AController* C);
	bool eventContinueOnFoot();
	void DetachDriver(class APawn* P);
	void AttachDriver(class APawn* P);
	void EntryAnnouncement(class AController* C);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	bool DriverEnter(class APawn* P);
	bool TryToDrive(class APawn* P);
	bool AnySeatAvailable();
	bool CanEnterVehicle(class APawn* P);
	void Destroyed_HandleDriver();
	void eventDestroyed();
	bool CheatFly();
	bool CheatGhost();
	bool CheatWalk();
	void eventPostBeginPlay();
	void SetBaseEyeheight();
	void PlayerChangedTeam();
	void DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation, class AActor* DamageCauser, float optionalDamageFalloffExponent);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float optionalDamageFalloffExponent);
	struct FVector GetTargetLocation(class AActor* optionalRequestedBy, bool optionalBRequestAlternateLoc);
	float GetMaxRiseForce();
	void Suicide();
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void NotifyTeamChanged();
};

// Class Engine.SVehicle
// 0x0124 (0x04C4 - 0x05E8)
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                        // 0x04C4 (0x0004) [0x000000000608000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline)
	class TArray<class USVehicleWheel*>                Wheels;                                        // 0x04C8 (0x000C) [0x0000000004480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	struct FVector                                     COMOffset;                                     // 0x04D4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     InertiaTensorMultiplier;                       // 0x04E0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStayUpright : 1;                              // 0x04EC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseSuspensionAxis : 1;                        // 0x04EC (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bUpdateWheelShapes : 1;                        // 0x04EC (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bVehicleOnGround : 1;                          // 0x04EC (0x0004) [0x0000000000000002] [0x00000008] (CPF_Const)
	uint32_t                                           bVehicleOnWater : 1;                           // 0x04EC (0x0004) [0x0000000000000002] [0x00000010] (CPF_Const)
	uint32_t                                           bIsInverted : 1;                               // 0x04EC (0x0004) [0x0000000000000002] [0x00000020] (CPF_Const)
	uint32_t                                           bChassisTouchingGround : 1;                    // 0x04EC (0x0004) [0x0000000000000002] [0x00000040] (CPF_Const)
	uint32_t                                           bWasChassisTouchingGroundLastTick : 1;         // 0x04EC (0x0004) [0x0000000000000002] [0x00000080] (CPF_Const)
	uint32_t                                           bCanFlip : 1;                                  // 0x04EC (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bFlipRight : 1;                                // 0x04EC (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bIsUprighting : 1;                             // 0x04EC (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bOutputHandbrake : 1;                          // 0x04EC (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bHoldingDownHandbrake : 1;                     // 0x04EC (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              StayUprightRollResistAngle;                    // 0x04F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StayUprightPitchResistAngle;                   // 0x04F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StayUprightStiffness;                          // 0x04F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StayUprightDamping;                            // 0x04FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                    // 0x0500 (0x0004) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                 // 0x0504 (0x0004) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	float                                              HeavySuspensionShiftPercent;                   // 0x0508 (0x0004) [0x0000000000000000]               
	float                                              MaxSpeed;                                      // 0x050C (0x0004) [0x0000000000000021] (CPF_Edit | CPF_Net)
	float                                              MaxAngularVelocity;                            // 0x0510 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TimeOffGround;                                 // 0x0514 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              UprightLiftStrength;                           // 0x0518 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              UprightTorqueStrength;                         // 0x051C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              UprightTime;                                   // 0x0520 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              UprightStartTime;                              // 0x0524 (0x0004) [0x0000000000000000]               
	class UAudioComponent*                             EngineSound;                                   // 0x0528 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class UAudioComponent*                             SquealSound;                                   // 0x052C (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class USoundCue*                                   CollisionSound;                                // 0x0530 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   EnterVehicleSound;                             // 0x0534 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   ExitVehicleSound;                              // 0x0538 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CollisionIntervalSecs;                         // 0x053C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SquealThreshold;                               // 0x0540 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SquealLatThreshold;                            // 0x0544 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LatAngleVolumeMult;                            // 0x0548 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              EngineStartOffsetSecs;                         // 0x054C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              EngineStopOffsetSecs;                          // 0x0550 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LastCollisionSoundTime;                        // 0x0554 (0x0004) [0x0000000000000000]               
	float                                              OutputBrake;                                   // 0x0558 (0x0004) [0x0000000000000000]               
	float                                              OutputGas;                                     // 0x055C (0x0004) [0x0000000000000000]               
	float                                              OutputSteering;                                // 0x0560 (0x0004) [0x0000000000000000]               
	float                                              OutputRise;                                    // 0x0564 (0x0004) [0x0000000000000000]               
	float                                              ForwardVel;                                    // 0x0568 (0x0004) [0x0000000000000000]               
	int32_t                                            NumPoweredWheels;                              // 0x056C (0x0004) [0x0000000000000000]               
	struct FVector                                     BaseOffset;                                    // 0x0570 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              CamDist;                                       // 0x057C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            DriverViewPitch;                               // 0x0580 (0x0004) [0x0000000000000000]               
	int32_t                                            DriverViewYaw;                                 // 0x0584 (0x0004) [0x0000000000000000]               
	uint8_t                                            UnknownData00[0x8];                              // 0x0588 (0x0008) MISSED OFFSET
	struct FVehicleState                               VState;                                        // 0x0590 (0x0050) [0x0000000000001022] (CPF_Const | CPF_Net | CPF_Native)
	float                                              AngErrorAccumulator;                           // 0x05E0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              RadialImpulseScaling;                          // 0x05E4 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SVehicle");
		}

		return uClassPointer;
	};

	void GetSVehicleDebug(class TArray<class FString>& outDebugInfo);
	float HermiteEval(float Slip);
	void DisplayWheelsDebug(class AHUD* HUD, float YL);
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void PostTeleport(class ATeleporter* OutTeleporter);
	void eventSuspensionHeavyShift(float Delta);
	void eventRigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int32_t ContactIndex, struct FCollisionImpactData& outRigidCollisionData);
	void DrivingStatusChanged();
	void VehiclePlayExitSound();
	void VehiclePlayEnterSound();
	void StopEngineSoundTimed();
	void StopEngineSound();
	void StartEngineSoundTimed();
	void StartEngineSound();
	bool HasWheelsOnGround();
	bool TryToDrive(class APawn* P);
	class FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	bool CalcCamera(float fDeltaTime, struct FVector& outOut_CamLoc, struct FRotator& outOut_CamRot, float& outOut_FOV);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo);
	void InitVehicleRagdoll(class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, const struct FVector& ActorMove, bool bClearAnimTree);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float optionalDamageFalloffExponent);
	void StopVehicleSounds();
	void TurnOff();
	void eventDestroyed();
	void eventPostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void eventPostBeginPlay();
	void SetWheelCollision(int32_t WheelNum, bool bCollision);
	bool IsSleeping();
	void AddTorque(const struct FVector& Torque);
	void AddImpulse(const struct FVector& Impulse);
	void AddForce(const struct FVector& Force);
};

// Class Engine.RB_ConstraintActor
// 0x001C (0x01C8 - 0x01E4)
class ARB_ConstraintActor : public ARigidBodyBase
{
public:
	class AActor*                                      ConstraintActor1;                              // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      ConstraintActor2;                              // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class URB_ConstraintSetup*                         ConstraintSetup;                               // 0x01D0 (0x0004) [0x0000000006400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline)
	class URB_ConstraintInstance*                      ConstraintInstance;                            // 0x01D4 (0x0004) [0x0000000006400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline)
	uint32_t                                           bDisableCollision : 1;                         // 0x01D8 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bUpdateActor1RefFrame : 1;                     // 0x01D8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUpdateActor2RefFrame : 1;                     // 0x01D8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class AActor*                                      PulleyPivotActor1;                             // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      PulleyPivotActor2;                             // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_ConstraintActor");
		}

		return uClassPointer;
	};

	void OnToggleConstraintDrive(class USeqAct_ToggleConstraintDrive* Action);
	void OnToggle(class USeqAct_Toggle* Action);
	void OnDestroy(class USeqAct_Destroy* Action);
	void TermConstraint();
	void InitConstraint(class AActor* Actor1, class AActor* Actor2, const class FName& optionalActor1Bone, const class FName& optionalActor2Bone, float optionalBreakThreshold);
	void SetDisableCollision(bool NewDisableCollision);
};

// Class Engine.RB_LineImpulseActor
// 0x0011 (0x01C8 - 0x01D9)
class ARB_LineImpulseActor : public ARigidBodyBase
{
public:
	float                                              ImpulseStrength;                               // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ImpulseRange;                                  // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bVelChange : 1;                                // 0x01D0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bStopAtFirstHit : 1;                           // 0x01D0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCauseFracture : 1;                            // 0x01D0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class UArrowComponent*                             Arrow;                                         // 0x01D4 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint8_t                                            ImpulseCount;                                  // 0x01D8 (0x0001) [0x0000000000000020] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_LineImpulseActor");
		}

		return uClassPointer;
	};

	void eventReplicatedEvent(const class FName& VarName);
	void OnToggle(class USeqAct_Toggle* inAction);
	void FireLineImpulse();
};

// Class Engine.RB_RadialImpulseActor
// 0x0009 (0x01C8 - 0x01D1)
class ARB_RadialImpulseActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                               // 0x01C8 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class URB_RadialImpulseComponent*                  ImpulseComponent;                              // 0x01CC (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint8_t                                            ImpulseCount;                                  // 0x01D0 (0x0001) [0x0000000000000020] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_RadialImpulseActor");
		}

		return uClassPointer;
	};

	void eventReplicatedEvent(const class FName& VarName);
	void OnToggle(class USeqAct_Toggle* inAction);
};

// Class Engine.RB_Thruster
// 0x0008 (0x01C8 - 0x01D0)
class ARB_Thruster : public ARigidBodyBase
{
public:
	uint32_t                                           bThrustEnabled : 1;                            // 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              ThrustStrength;                                // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_Thruster");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class Engine.WorldAttractor
// 0x00C8 (0x01C8 - 0x0290)
class AWorldAttractor : public AActor
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              LoopDuration;                                  // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CurrentTime;                                   // 0x01D0 (0x0004) [0x0000000000000000]               
	EWorldAttractorFalloffType                         FalloffType;                                   // 0x01D4 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FMatineeRawDistributionFloat                FalloffExponent;                               // 0x01D8 (0x0024) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FMatineeRawDistributionFloat                Range;                                         // 0x01FC (0x0024) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FMatineeRawDistributionFloat                Strength;                                      // 0x0220 (0x0024) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	float                                              CollisionRadius;                               // 0x0244 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FMatineeRawDistributionFloat                DragCoefficient;                               // 0x0248 (0x0024) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)
	struct FMatineeRawDistributionFloat                DragRadius;                                    // 0x026C (0x0024) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WorldAttractor");
		}

		return uClassPointer;
	};

	void OnSetWorldAttractorParam(class USeqAct_SetWorldAttractorParam* Action);
};

// Class Engine.RB_ConstraintDrawComponent
// 0x0004 (0x01D8 - 0x01DC)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                 // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_ConstraintDrawComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_RadialImpulseComponent
// 0x0014 (0x01D8 - 0x01EC)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	ERadialImpulseFalloff                              ImpulseFalloff;                                // 0x01D8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              ImpulseStrength;                               // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ImpulseRadius;                                 // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bVelChange : 1;                                // 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCauseFracture : 1;                            // 0x01E4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class UDrawSphereComponent*                        PreviewSphere;                                 // 0x01E8 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_RadialImpulseComponent");
		}

		return uClassPointer;
	};

	void FireImpulse(const struct FVector& Origin);
};

// Class Engine.RB_Handle
// 0x006B (0x0055 - 0x00C0)
class URB_Handle : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                              // 0x0058 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class FName                                        GrabbedBoneName;                               // 0x005C (0x0008) [0x0000000000000000]               
	int32_t                                            SceneIndex;                                    // 0x0064 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	uint32_t                                           bInHardware : 1;                               // 0x0068 (0x0004) [0x0000000000003002] [0x00000001] (CPF_Const | CPF_Native | CPF_Transient)
	uint32_t                                           bRotationConstrained : 1;                      // 0x0068 (0x0004) [0x0000000000003002] [0x00000002] (CPF_Const | CPF_Native | CPF_Transient)
	uint32_t                                           bInterpolating : 1;                            // 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FPointer                                    HandleData;                                    // 0x006C (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    KinActorData;                                  // 0x0070 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	float                                              LinearDamping;                                 // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LinearStiffness;                               // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     LinearStiffnessScale3D;                        // 0x007C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     LinearDampingScale3D;                          // 0x0088 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              AngularDamping;                                // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngularStiffness;                              // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Destination;                                   // 0x009C (0x000C) [0x0000000000000000]               
	struct FVector                                     StepSize;                                      // 0x00A8 (0x000C) [0x0000000000000000]               
	struct FVector                                     Location;                                      // 0x00B4 (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_Handle");
		}

		return uClassPointer;
	};

	struct FQuat GetOrientation();
	void SetOrientation(struct FQuat& outNewOrientation);
	void UpdateSmoothLocation(struct FVector& outNewLocation);
	void SetSmoothLocation(const struct FVector& NewLocation, float MoveTime);
	void SetLocation(const struct FVector& NewLocation);
	void ReleaseComponent();
	void GrabComponent(class UPrimitiveComponent* Component, const class FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
};

// Class Engine.RB_Spring
// 0x0053 (0x0055 - 0x00A8)
class URB_Spring : public UActorComponent
{
public:
	class UPrimitiveComponent*                         Component1;                                    // 0x0058 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class FName                                        BoneName1;                                     // 0x005C (0x0008) [0x0000000000000002] (CPF_Const)   
	class UPrimitiveComponent*                         Component2;                                    // 0x0064 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class FName                                        BoneName2;                                     // 0x0068 (0x0008) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SceneIndex;                                    // 0x0070 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint32_t                                           bInHardware : 1;                               // 0x0074 (0x0004) [0x0000000000001002] [0x00000001] (CPF_Const | CPF_Native)
	uint32_t                                           bEnableForceMassRatio : 1;                     // 0x0074 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FPointer                                    SpringData;                                    // 0x0078 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              TimeSinceActivation;                           // 0x007C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              MinBodyMass;                                   // 0x0080 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              SpringSaturateDist;                            // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpringMaxForce;                                // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxForceMassRatio;                             // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                       // 0x0090 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              DampSaturateVel;                               // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DampMaxForce;                                  // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_Spring");
		}

		return uClassPointer;
	};

	void Clear();
	void SetComponents(class UPrimitiveComponent* InComponent1, const class FName& InBoneName1, const struct FVector& Position1, class UPrimitiveComponent* InComponent2, const class FName& InBoneName2, const struct FVector& Position2);
};

// Class Engine.SVehicleSimBase
// 0x003B (0x0055 - 0x0090)
class USVehicleSimBase : public UActorComponent
{
public:
	float                                              WheelSuspensionStiffness;                      // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelSuspensionDamping;                        // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelSuspensionBias;                           // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelLongExtremumSlip;                         // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelLongExtremumValue;                        // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelLongAsymptoteSlip;                        // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelLongAsymptoteValue;                       // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelLatExtremumSlip;                          // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelLatExtremumValue;                         // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelLatAsymptoteSlip;                         // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelLatAsymptoteValue;                        // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelInertia;                                  // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bWheelSpeedOverride : 1;                       // 0x0088 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bClampedFrictionModel : 1;                     // 0x0088 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAutoDrive : 1;                                // 0x0088 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              AutoDriveSteer;                                // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SVehicleSimBase");
		}

		return uClassPointer;
	};

};

// Class Engine.SVehicleSimCar
// 0x0034 (0x0090 - 0x00C4)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                            // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                            // 0x0094 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              SteerSpeed;                                    // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ReverseThrottle;                               // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EngineBrakeFactor;                             // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxBrakeTorque;                                // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StopThreshold;                                 // 0x00B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIsDriving : 1;                                // 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              ActualSteering;                                // 0x00BC (0x0004) [0x0000000000000000]               
	float                                              TimeSinceThrottle;                             // 0x00C0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SVehicleSimCar");
		}

		return uClassPointer;
	};

};

// Class Engine.SVehicleSimTank
// 0x0030 (0x00C4 - 0x00F4)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                  // 0x00C4 (0x0004) [0x0000000000000000]               
	float                                              RightTrackVel;                                 // 0x00C8 (0x0004) [0x0000000000000000]               
	float                                              LeftTrackTorque;                               // 0x00CC (0x0004) [0x0000000000000000]               
	float                                              RightTrackTorque;                              // 0x00D0 (0x0004) [0x0000000000000000]               
	float                                              MaxEngineTorque;                               // 0x00D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              EngineDamping;                                 // 0x00D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InsideTrackTorqueFactor;                       // 0x00DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SteeringLatStiffnessFactor;                    // 0x00E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TurnInPlaceThrottle;                           // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TurnMaxGripReduction;                          // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TurnGripScaleRate;                             // 0x00EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bTurnInPlaceOnSteer : 1;                       // 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SVehicleSimTank");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryApexClothing
// 0x0014 (0x0078 - 0x008C)
class UActorFactoryApexClothing : public UActorFactorySkeletalMesh
{
public:
	class TArray<class UApexClothingAsset*>            ClothingAssets;                                // 0x0078 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	ERBCollisionChannel                                ClothingRBChannel;                             // 0x0084 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRBCollisionChannelContainer                ClothingRBCollideWithChannels;                 // 0x0088 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryApexClothing");
		}

		return uClassPointer;
	};

};

// Class Engine.ApexDestructibleDamageParameters
// 0x000C (0x003C - 0x0048)
class UApexDestructibleDamageParameters : public UObject
{
public:
	class TArray<struct FDamagePair>                   DamageMap;                                     // 0x003C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexDestructibleDamageParameters");
		}

		return uClassPointer;
	};

};

// Class Engine.FractureMaterial
// 0x0008 (0x003C - 0x0044)
class UFractureMaterial : public UObject
{
public:
	class UParticleSystem*                             FractureEffect;                                // 0x003C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   FractureSound;                                 // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FractureMaterial");
		}

		return uClassPointer;
	};

};

// Class Engine.PhysicalMaterial
// 0x0064 (0x003C - 0x00A0)
class UPhysicalMaterial : public UObject
{
public:
	int32_t                                            MaterialIndex;                                 // 0x003C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Friction;                                      // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Restitution;                                   // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bForceConeFriction : 1;                        // 0x0048 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnableAnisotropicFriction : 1;                // 0x0048 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FVector                                     AnisoFrictionDir;                              // 0x004C (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              FrictionV;                                     // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Density;                                       // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngularDamping;                                // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LinearDamping;                                 // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MagneticResponse;                              // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindResponse;                                  // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ImpactThreshold;                               // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ImpactReFireDelay;                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UParticleSystem*                             ImpactEffect;                                  // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   ImpactSound;                                   // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SlideThreshold;                                // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SlideReFireDelay;                              // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UParticleSystem*                             SlideEffect;                                   // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   SlideSound;                                    // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   FractureSoundExplosion;                        // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   FractureSoundSingle;                           // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           Parent;                                        // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                      // 0x009C (0x0004) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PhysicalMaterial");
		}

		return uClassPointer;
	};

	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty(class UClass* DesiredClass);
	void FindFractureSounds(class USoundCue*& outOutSoundExplosion, class USoundCue*& outOutSoundSingle);
	struct FPhysEffectInfo FindPhysEffectInfo(EPhysEffectType Type);
};

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x003C - 0x003C)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		}

		return uClassPointer;
	};

};

// Class Engine.PhysicsAsset
// 0x0068 (0x003C - 0x00A4)
class UPhysicsAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                               // 0x003C (0x0004) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)
	class TArray<class URB_BodySetup*>                 BodySetup;                                     // 0x0040 (0x000C) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	struct FMap_Mirror                                 BodySetupIndexMap;                             // 0x004C (0x003C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<int32_t>                              BoundsBodies;                                  // 0x0088 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class URB_ConstraintSetup*>           ConstraintSetup;                               // 0x0094 (0x000C) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class UPhysicsAssetInstance*                       DefaultInstance;                               // 0x00A0 (0x0004) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PhysicsAsset");
		}

		return uClassPointer;
	};

	int32_t FindBodyIndex(const class FName& BodyName);
};

// Class Engine.PhysicsAssetInstance
// 0x0078 (0x003C - 0x00B4)
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                         // 0x003C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            RootBodyIndex;                                 // 0x0040 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class TArray<class URB_BodyInstance*>              Bodies;                                        // 0x0044 (0x000C) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class URB_ConstraintInstance*>        Constraints;                                   // 0x0050 (0x000C) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	struct FMap_Mirror                                 CollisionDisableTable;                         // 0x005C (0x003C) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              LinearSpringScale;                             // 0x0098 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LinearDampingScale;                            // 0x009C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              LinearForceLimitScale;                         // 0x00A0 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AngularSpringScale;                            // 0x00A4 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AngularDampingScale;                           // 0x00A8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              AngularForceLimitScale;                        // 0x00AC (0x0004) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bInitBodies : 1;                               // 0x00B0 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PhysicsAssetInstance");
		}

		return uClassPointer;
	};

	class URB_ConstraintInstance* FindConstraintInstance(const class FName& ConName, class UPhysicsAsset* InAsset);
	class URB_BodyInstance* FindBodyInstance(const class FName& BodyName, class UPhysicsAsset* InAsset);
	void SetFullAnimWeightBonesFixed(bool bNewFixed, class USkeletalMeshComponent* SkelMesh);
	void SetFullAnimWeightBlockRigidBody(bool bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh);
	void SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody, const class TArray<class FName>& BoneNames, class USkeletalMeshComponent* SkelMesh);
	void SetNamedRBBoneSprings(bool bEnable, const class TArray<class FName>& BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp);
	void SetNamedMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, const class TArray<class FName>& BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool optionalBSetOtherBodiesToComplement);
	void SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, const class TArray<class FName>& BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool optionalBSetOtherBodiesToComplement);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* optionalSkelMesh, bool optionalBSkipFullAnimWeightBodies);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, bool optionalBSkipFullAnimWeightBodies);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* optionalSkelMesh, bool optionalBSkipFullAnimWeightBodies);
	void ForceAllBodiesBelowUnfixed(class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, bool InbInstanceAlwaysFullAnimWeight, class FName& outInBoneName);
	void SetNamedBodiesFixed(bool bNewFixed, const class TArray<class FName>& BoneNames, class USkeletalMeshComponent* SkelMesh, bool optionalBSetOtherBodiesToComplement, bool optionalBSkipFullAnimWeightBodies);
	void SetAllBodiesFixed(bool bNewFixed);
	float GetTotalMassBelowBone(const class FName& InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh);
	void SetAngularDriveScale(float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale);
	void SetLinearDriveScale(float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale);
};

// Class Engine.PhysicsLODVerticalEmitter
// 0x0004 (0x003C - 0x0040)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int32_t                                            ParticlePercentage;                            // 0x003C (0x0004) [0x0000000000005000] (CPF_Native | CPF_Config)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PhysicsLODVerticalEmitter");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_BodyInstance
// 0x0060 (0x003C - 0x009C)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                // 0x003C (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	int32_t                                            BodyIndex;                                     // 0x0040 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     Velocity;                                      // 0x0044 (0x000C) [0x0000000000000000]               
	struct FVector                                     PreviousVelocity;                              // 0x0050 (0x000C) [0x0000000000000000]               
	int32_t                                            SceneIndex;                                    // 0x005C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    BodyData;                                      // 0x0060 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    BoneSpring;                                    // 0x0064 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    BoneSpringKinActor;                            // 0x0068 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint32_t                                           bEnableBoneSpringLinear : 1;                   // 0x006C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnableBoneSpringAngular : 1;                  // 0x006C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDisableOnOverextension : 1;                   // 0x006C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bNotifyOwnerOnOverextension : 1;               // 0x006C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bTeleportOnOverextension : 1;                  // 0x006C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bUseKinActorForBoneSpring : 1;                 // 0x006C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bMakeSpringToBaseCollisionComponent : 1;       // 0x006C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bOnlyCollideWithPawns : 1;                     // 0x006C (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableCollisionResponse : 1;                  // 0x006C (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bPushBody : 1;                                 // 0x006C (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bForceUnfixed : 1;                             // 0x006C (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient)
	uint32_t                                           bInstanceAlwaysFullAnimWeight : 1;             // 0x006C (0x0004) [0x0000000000002000] [0x00000800] (CPF_Transient)
	float                                              BoneLinearSpring;                              // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BoneLinearDamping;                             // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BoneAngularSpring;                             // 0x0078 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              BoneAngularDamping;                            // 0x007C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              OverextensionThreshold;                        // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CustomGravityFactor;                           // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LastEffectPlayedTime;                          // 0x0088 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UPhysicalMaterial*                           PhysMaterialOverride;                          // 0x008C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ContactReportForceThreshold;                   // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InstanceMassScale;                             // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InstanceDampingScale;                          // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_BodyInstance");
		}

		return uClassPointer;
	};

	void UpdateDampingProperties();
	void UpdateMassProperties(class URB_BodySetup* Setup);
	void SetContactReportForceThreshold(float Threshold);
	void EnableCollisionResponse(bool bEnableResponse);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetBlockRigidBody(bool bNewBlockRigidBody);
	void SetBoneSpringTarget(bool bTeleport, struct FMatrix& outInBoneTarget);
	void SetBoneSpringParams(float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping);
	void EnableBoneSpring(bool bInEnableLinear, bool bInEnableAngular, struct FMatrix& outInBoneTarget);
	struct FVector GetUnrealWorldVelocityAtPoint(const struct FVector& Point);
	struct FVector GetUnrealWorldAngularVelocity();
	struct FVector GetUnrealWorldVelocity();
	struct FMatrix GetUnrealWorldTM();
	class UPhysicsAssetInstance* GetPhysicsAssetInstance();
	bool IsValidBodyInstance();
	bool IsFixed();
	void SetFixed(bool bNewFixed);
	float GetBodyMass();
};

// Class Engine.RB_ConstraintInstance
// 0x0070 (0x003C - 0x00AC)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                         // 0x003C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UPrimitiveComponent*                         OwnerComponent;                                // 0x0040 (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	int32_t                                            ConstraintIndex;                               // 0x0044 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SceneIndex;                                    // 0x0048 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint32_t                                           bInHardware : 1;                               // 0x004C (0x0004) [0x0000000000001002] [0x00000001] (CPF_Const | CPF_Native)
	uint32_t                                           bLinearXPositionDrive : 1;                     // 0x004C (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bLinearXVelocityDrive : 1;                     // 0x004C (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bLinearYPositionDrive : 1;                     // 0x004C (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bLinearYVelocityDrive : 1;                     // 0x004C (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bLinearZPositionDrive : 1;                     // 0x004C (0x0004) [0x0000000000000003] [0x00000020] (CPF_Edit | CPF_Const)
	uint32_t                                           bLinearZVelocityDrive : 1;                     // 0x004C (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bSwingPositionDrive : 1;                       // 0x004C (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bSwingVelocityDrive : 1;                       // 0x004C (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bTwistPositionDrive : 1;                       // 0x004C (0x0004) [0x0000000000000003] [0x00000200] (CPF_Edit | CPF_Const)
	uint32_t                                           bTwistVelocityDrive : 1;                       // 0x004C (0x0004) [0x0000000000000003] [0x00000400] (CPF_Edit | CPF_Const)
	uint32_t                                           bAngularSlerpDrive : 1;                        // 0x004C (0x0004) [0x0000000000000003] [0x00000800] (CPF_Edit | CPF_Const)
	uint32_t                                           bTerminated : 1;                               // 0x004C (0x0004) [0x0000000000000000] [0x00001000] 
	struct FPointer                                    ConstraintData;                                // 0x0050 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FVector                                     LinearPositionTarget;                          // 0x0054 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     LinearVelocityTarget;                          // 0x0060 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LinearDriveSpring;                             // 0x006C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LinearDriveDamping;                            // 0x0070 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              LinearDriveForceLimit;                         // 0x0074 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                            UnknownData00[0x8];                              // 0x0078 (0x0008) MISSED OFFSET
	struct FQuat                                       AngularPositionTarget;                         // 0x0080 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     AngularVelocityTarget;                         // 0x0090 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AngularDriveSpring;                            // 0x009C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AngularDriveDamping;                           // 0x00A0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              AngularDriveForceLimit;                        // 0x00A4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FPointer                                    DummyKinActor;                                 // 0x00A8 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_ConstraintInstance");
		}

		return uClassPointer;
	};

	void MoveKinActorTransform(struct FMatrix& outNewTM);
	void SetLinearLimitSize(float NewLimitSize);
	void SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup);
	void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularPositionTarget(struct FQuat& outInPosTarget);
	void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive);
	void SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive);
	struct FVector GetConstraintLocation();
	class UPhysicsAssetInstance* GetPhysicsAssetInstance();
	void TermConstraint();
	void InitConstraint(class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, bool bMakeKinForBody1);
};

// Class Engine.RB_ConstraintSetup
// 0x00C4 (0x003C - 0x0100)
class URB_ConstraintSetup : public UObject
{
public:
	class FName                                        JointName;                                     // 0x003C (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FName                                        ConstraintBone1;                               // 0x0044 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ConstraintBone2;                               // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Pos1;                                          // 0x0054 (0x000C) [0x0000000000000000]               
	struct FVector                                     PriAxis1;                                      // 0x0060 (0x000C) [0x0000000000000000]               
	struct FVector                                     SecAxis1;                                      // 0x006C (0x000C) [0x0000000000000000]               
	struct FVector                                     Pos2;                                          // 0x0078 (0x000C) [0x0000000000000000]               
	struct FVector                                     PriAxis2;                                      // 0x0084 (0x000C) [0x0000000000000000]               
	struct FVector                                     SecAxis2;                                      // 0x0090 (0x000C) [0x0000000000000000]               
	struct FVector                                     PulleyPivot1;                                  // 0x009C (0x000C) [0x0000000000000000]               
	struct FVector                                     PulleyPivot2;                                  // 0x00A8 (0x000C) [0x0000000000000000]               
	uint32_t                                           bEnableProjection : 1;                         // 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLinearLimitSoft : 1;                          // 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bLinearBreakable : 1;                          // 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSwingLimited : 1;                             // 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bTwistLimited : 1;                             // 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bSwingLimitSoft : 1;                           // 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bTwistLimitSoft : 1;                           // 0x00B4 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bAngularBreakable : 1;                         // 0x00B4 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bIsPulley : 1;                                 // 0x00B4 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bMaintainMinDistance : 1;                      // 0x00B4 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	struct FLinearDOFSetup                             LinearXSetup;                                  // 0x00B8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FLinearDOFSetup                             LinearYSetup;                                  // 0x00C0 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FLinearDOFSetup                             LinearZSetup;                                  // 0x00C8 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              LinearLimitStiffness;                          // 0x00D0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LinearLimitDamping;                            // 0x00D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LinearBreakThreshold;                          // 0x00D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Swing1LimitAngle;                              // 0x00DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Swing2LimitAngle;                              // 0x00E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TwistLimitAngle;                               // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SwingLimitStiffness;                           // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SwingLimitDamping;                             // 0x00EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TwistLimitStiffness;                           // 0x00F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TwistLimitDamping;                             // 0x00F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AngularBreakThreshold;                         // 0x00F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PulleyRatio;                                   // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_ConstraintSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_BSJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_BSJointSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_DistanceJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_DistanceJointSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_HingeSetup
// 0x0000 (0x0100 - 0x0100)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_HingeSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_PrismaticSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_PrismaticSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_PulleyJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_PulleyJointSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_SkelJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_SkelJointSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_StayUprightSetup
// 0x0000 (0x0100 - 0x0100)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_StayUprightSetup");
		}

		return uClassPointer;
	};

};

// Class Engine.SVehicleWheel
// 0x00CC (0x0048 - 0x0114)
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                         // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MotorTorque;                                   // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BrakeTorque;                                   // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ChassisTorque;                                 // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPoweredWheel : 1;                             // 0x0058 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bHoverWheel : 1;                               // 0x0058 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCollidesVehicles : 1;                         // 0x0058 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bCollidesPawns : 1;                            // 0x0058 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bIsSquealing : 1;                              // 0x0058 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bWheelOnGround : 1;                            // 0x0058 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              SteerFactor;                                   // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SkelControlName;                               // 0x0060 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class USkelControlWheel*                           WheelControl;                                  // 0x0068 (0x0004) [0x0000000000000000]               
	class FName                                        BoneName;                                      // 0x006C (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     BoneOffset;                                    // 0x0074 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              WheelRadius;                                   // 0x0080 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SuspensionTravel;                              // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SuspensionSpeed;                               // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UParticleSystem*                             WheelParticleSystem;                           // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	EWheelSide                                         Side;                                          // 0x0090 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              LongSlipFactor;                                // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LatSlipFactor;                                 // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HandbrakeLongSlipFactor;                       // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              HandbrakeLatSlipFactor;                        // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ParkedSlipFactor;                              // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     WheelPosition;                                 // 0x00A8 (0x000C) [0x0000000000000000]               
	float                                              SpinVel;                                       // 0x00B4 (0x0004) [0x0000000000000000]               
	float                                              LongSlipRatio;                                 // 0x00B8 (0x0004) [0x0000000000000000]               
	float                                              LatSlipAngle;                                  // 0x00BC (0x0004) [0x0000000000000000]               
	struct FVector                                     ContactNormal;                                 // 0x00C0 (0x000C) [0x0000000000000000]               
	struct FVector                                     LongDirection;                                 // 0x00CC (0x000C) [0x0000000000000000]               
	struct FVector                                     LatDirection;                                  // 0x00D8 (0x000C) [0x0000000000000000]               
	float                                              ContactForce;                                  // 0x00E4 (0x0004) [0x0000000000000000]               
	float                                              LongImpulse;                                   // 0x00E8 (0x0004) [0x0000000000000000]               
	float                                              LatImpulse;                                    // 0x00EC (0x0004) [0x0000000000000000]               
	float                                              DesiredSuspensionPosition;                     // 0x00F0 (0x0004) [0x0000000000000000]               
	float                                              SuspensionPosition;                            // 0x00F4 (0x0004) [0x0000000000000000]               
	float                                              CurrentRotation;                               // 0x00F8 (0x0004) [0x0000000000000000]               
	struct FPointer                                    WheelShape;                                    // 0x00FC (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            WheelMaterialIndex;                            // 0x0100 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UClass*                                      WheelPSCClass;                                 // 0x0104 (0x0004) [0x0000000000000000]               
	class UParticleSystemComponent*                    WheelParticleComp;                             // 0x0108 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class FName                                        SlipParticleParamName;                         // 0x010C (0x0008) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SVehicleWheel");
		}

		return uClassPointer;
	};

};

// Class Engine.NxGenericForceFieldBrush
// 0x00CC (0x01F4 - 0x02C0)
class ANxGenericForceFieldBrush : public AVolume
{
public:
	int32_t                                            ExcludeChannel;                                // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRBCollisionChannelContainer                CollideWithChannels;                           // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ERBCollisionChannel                                RBChannel;                                     // 0x01FC (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EFFB_ForceFieldCoordinates                         Coordinates;                                   // 0x01FD (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Constant;                                      // 0x0200 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierX;                           // 0x020C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierY;                           // 0x0218 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierZ;                           // 0x0224 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionTarget;                                // 0x0230 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierX;                           // 0x023C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierY;                           // 0x0248 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierZ;                           // 0x0254 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityTarget;                                // 0x0260 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Noise;                                         // 0x026C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FalloffLinear;                                 // 0x0278 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FalloffQuadratic;                              // 0x0284 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              TorusRadius;                                   // 0x0290 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    ForceField;                                    // 0x0294 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ConvexMeshes;                                  // 0x0298 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ExclusionShapes;                               // 0x02A4 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ExclusionShapePoses;                           // 0x02B0 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    LinearKernel;                                  // 0x02BC (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxGenericForceFieldBrush");
		}

		return uClassPointer;
	};

	bool StopsProjectile(class AProjectile* P);
	void eventPostBeginPlay();
};

// Class Engine.RB_ForceFieldExcludeVolume
// 0x0008 (0x01F4 - 0x01FC)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int32_t                                            ForceFieldChannel;                             // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SceneIndex;                                    // 0x01F8 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_ForceFieldExcludeVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.NxForceField
// 0x0040 (0x01C8 - 0x0208)
class ANxForceField : public AActor
{
public:
	int32_t                                            ExcludeChannel;                                // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bForceActive : 1;                              // 0x01CC (0x0004) [0x0000000000000021] [0x00000001] (CPF_Edit | CPF_Net)
	struct FRBCollisionChannelContainer                CollideWithChannels;                           // 0x01D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ERBCollisionChannel                                RBChannel;                                     // 0x01D4 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FPointer                                    ForceField;                                    // 0x01D8 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ConvexMeshes;                                  // 0x01DC (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ExclusionShapes;                               // 0x01E8 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ExclusionShapePoses;                           // 0x01F4 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    U2NRotation;                                   // 0x0200 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            SceneIndex;                                    // 0x0204 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceField");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* inAction);
	void DoInitRBPhys();
};

// Class Engine.NxCylindricalForceField
// 0x002C (0x0208 - 0x0234)
class ANxCylindricalForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RotationalStrength;                            // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftStrength;                                  // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceTopRadius;                                // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftFalloffHeight;                             // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              EscapeVelocity;                                // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceHeight;                                   // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              HeightOffset;                                  // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           UseSpecialRadialForce : 1;                     // 0x022C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FPointer                                    Kernel;                                        // 0x0230 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxCylindricalForceField");
		}

		return uClassPointer;
	};

};

// Class Engine.NxCylindricalForceFieldCapsule
// 0x0004 (0x0234 - 0x0238)
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                               // 0x0234 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxCylindricalForceFieldCapsule");
		}

		return uClassPointer;
	};

	void DoInitRBPhys();
};

// Class Engine.NxForceFieldGeneric
// 0x00B0 (0x0208 - 0x02B8)
class ANxForceFieldGeneric : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                         // 0x0208 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class UActorComponent*                             DrawComponent;                                 // 0x020C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              RoughExtentX;                                  // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RoughExtentY;                                  // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RoughExtentZ;                                  // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EFFG_ForceFieldCoordinates                         Coordinates;                                   // 0x021C (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Constant;                                      // 0x0220 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierX;                           // 0x022C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierY;                           // 0x0238 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierZ;                           // 0x0244 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionTarget;                                // 0x0250 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierX;                           // 0x025C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierY;                           // 0x0268 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierZ;                           // 0x0274 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityTarget;                                // 0x0280 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Noise;                                         // 0x028C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FalloffLinear;                                 // 0x0298 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FalloffQuadratic;                              // 0x02A4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              TorusRadius;                                   // 0x02B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    LinearKernel;                                  // 0x02B4 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldGeneric");
		}

		return uClassPointer;
	};

	void DoInitRBPhys();
};

// Class Engine.NxForceFieldRadial
// 0x001C (0x0208 - 0x0224)
class ANxForceFieldRadial : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                         // 0x0208 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class UActorComponent*                             DrawComponent;                                 // 0x020C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              ForceStrength;                                 // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              SelfRotationStrength;                          // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	ERadialImpulseFalloff                              ForceFalloff;                                  // 0x021C (0x0001) [0x0000000000080009] (CPF_Edit | CPF_ExportObject | CPF_Component)
	struct FPointer                                    Kernel;                                        // 0x0220 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldRadial");
		}

		return uClassPointer;
	};

	void DoInitRBPhys();
};

// Class Engine.NxForceFieldTornado
// 0x0038 (0x0208 - 0x0240)
class ANxForceFieldTornado : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                         // 0x0208 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class UActorComponent*                             DrawComponent;                                 // 0x020C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              RadialStrength;                                // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RotationalStrength;                            // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftStrength;                                  // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceTopRadius;                                // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftFalloffHeight;                             // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              EscapeVelocity;                                // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceHeight;                                   // 0x022C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              HeightOffset;                                  // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           BSpecialRadialForceMode : 1;                   // 0x0234 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              SelfRotationStrength;                          // 0x0238 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FPointer                                    Kernel;                                        // 0x023C (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldTornado");
		}

		return uClassPointer;
	};

	void DoInitRBPhys();
};

// Class Engine.NxGenericForceField
// 0x009C (0x0208 - 0x02A4)
class ANxGenericForceField : public ANxForceField
{
public:
	EFFG_ForceFieldCoordinates                         Coordinates;                                   // 0x0208 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Constant;                                      // 0x020C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierX;                           // 0x0218 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierY;                           // 0x0224 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierZ;                           // 0x0230 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionTarget;                                // 0x023C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierX;                           // 0x0248 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierY;                           // 0x0254 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierZ;                           // 0x0260 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityTarget;                                // 0x026C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Noise;                                         // 0x0278 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FalloffLinear;                                 // 0x0284 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FalloffQuadratic;                              // 0x0290 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              TorusRadius;                                   // 0x029C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    LinearKernel;                                  // 0x02A0 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxGenericForceField");
		}

		return uClassPointer;
	};

};

// Class Engine.NxGenericForceFieldBox
// 0x0010 (0x02A4 - 0x02B4)
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	class UDrawBoxComponent*                           RenderComponent;                               // 0x02A4 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FVector                                     BoxExtent;                                     // 0x02A8 (0x000C) [0x0000000000000001] (CPF_Edit | CPF_Interp)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxGenericForceFieldBox");
		}

		return uClassPointer;
	};

	void DoInitRBPhys();
};

// Class Engine.NxGenericForceFieldCapsule
// 0x000C (0x02A4 - 0x02B0)
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                               // 0x02A4 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              CapsuleHeight;                                 // 0x02A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CapsuleRadius;                                 // 0x02AC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxGenericForceFieldCapsule");
		}

		return uClassPointer;
	};

};

// Class Engine.NxRadialForceField
// 0x0014 (0x0208 - 0x021C)
class ANxRadialForceField : public ANxForceField
{
public:
	class UDrawSphereComponent*                        RenderComponent;                               // 0x0208 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              ForceStrength;                                 // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	ERadialImpulseFalloff                              ForceFalloff;                                  // 0x0214 (0x0001) [0x0000000000080009] (CPF_Edit | CPF_ExportObject | CPF_Component)
	struct FPointer                                    LinearKernel;                                  // 0x0218 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxRadialForceField");
		}

		return uClassPointer;
	};

};

// Class Engine.NxRadialCustomForceField
// 0x0008 (0x021C - 0x0224)
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	float                                              SelfRotationStrength;                          // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FPointer                                    Kernel;                                        // 0x0220 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxRadialCustomForceField");
		}

		return uClassPointer;
	};

};

// Class Engine.NxTornadoAngularForceField
// 0x0030 (0x0208 - 0x0238)
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RotationalStrength;                            // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftStrength;                                  // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceTopRadius;                                // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftFalloffHeight;                             // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              EscapeVelocity;                                // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceHeight;                                   // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              HeightOffset;                                  // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           BSpecialRadialForceMode : 1;                   // 0x022C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              SelfRotationStrength;                          // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FPointer                                    Kernel;                                        // 0x0234 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxTornadoAngularForceField");
		}

		return uClassPointer;
	};

};

// Class Engine.NxTornadoAngularForceFieldCapsule
// 0x0004 (0x0238 - 0x023C)
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                               // 0x0238 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxTornadoAngularForceFieldCapsule");
		}

		return uClassPointer;
	};

};

// Class Engine.NxTornadoForceField
// 0x002C (0x0208 - 0x0234)
class ANxTornadoForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RotationalStrength;                            // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftStrength;                                  // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceTopRadius;                                // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftFalloffHeight;                             // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              EscapeVelocity;                                // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceHeight;                                   // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              HeightOffset;                                  // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           BSpecialRadialForceMode : 1;                   // 0x022C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FPointer                                    Kernel;                                        // 0x0230 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxTornadoForceField");
		}

		return uClassPointer;
	};

};

// Class Engine.NxTornadoForceFieldCapsule
// 0x0004 (0x0234 - 0x0238)
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                               // 0x0234 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxTornadoForceFieldCapsule");
		}

		return uClassPointer;
	};

};

// Class Engine.NxForceFieldSpawnable
// 0x0004 (0x01C8 - 0x01CC)
class ANxForceFieldSpawnable : public AActor
{
public:
	class UNxForceFieldComponent*                      ForceFieldComponent;                           // 0x01C8 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldSpawnable");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* inAction);
};

// Class Engine.RB_CylindricalForceActor
// 0x0030 (0x01C8 - 0x01F8)
class ARB_CylindricalForceActor : public ARigidBodyBase
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                               // 0x01C8 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              RadialStrength;                                // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RotationalStrength;                            // 0x01D0 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftStrength;                                  // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftFalloffHeight;                             // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              EscapeVelocity;                                // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceTopRadius;                                // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceHeight;                                   // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              HeightOffset;                                  // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           bForceActive : 1;                              // 0x01F0 (0x0004) [0x0000000000000021] [0x00000001] (CPF_Edit | CPF_Net)
	uint32_t                                           bForceApplyToCloth : 1;                        // 0x01F0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bForceApplyToFluid : 1;                        // 0x01F0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bForceApplyToRigidBodies : 1;                  // 0x01F0 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bForceApplyToProjectiles : 1;                  // 0x01F0 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                           // 0x01F4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_CylindricalForceActor");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* inAction);
};

// Class Engine.RB_RadialForceActor
// 0x0020 (0x01C8 - 0x01E8)
class ARB_RadialForceActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                               // 0x01C8 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	float                                              ForceStrength;                                 // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x01D0 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              SwirlStrength;                                 // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              SpinTorque;                                    // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	ERadialImpulseFalloff                              ForceFalloff;                                  // 0x01DC (0x0001) [0x0000000000080009] (CPF_Edit | CPF_ExportObject | CPF_Component)
	ERadialForceType                                   RadialForceMode;                               // 0x01DD (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bForceActive : 1;                              // 0x01E0 (0x0004) [0x0000000000000021] [0x00000001] (CPF_Edit | CPF_Net)
	uint32_t                                           bForceApplyToCloth : 1;                        // 0x01E0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bForceApplyToFluid : 1;                        // 0x01E0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bForceApplyToRigidBodies : 1;                  // 0x01E0 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bForceApplyToProjectiles : 1;                  // 0x01E0 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                           // 0x01E4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_RadialForceActor");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* inAction);
};

// Class Engine.NxForceFieldComponent
// 0x0050 (0x01D8 - 0x0228)
class UNxForceFieldComponent : public UPrimitiveComponent
{
public:
	class UForceFieldShape*                            Shape;                                         // 0x01D8 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class UActorComponent*                             DrawComponent;                                 // 0x01DC (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	int32_t                                            ExcludeChannel;                                // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bForceActive : 1;                              // 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDestroyWhenInactive : 1;                      // 0x01E4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                           // 0x01E8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              Duration;                                      // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    ForceField;                                    // 0x01F0 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ConvexMeshes;                                  // 0x01F4 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ExclusionShapes;                               // 0x0200 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FPointer>                      ExclusionShapePoses;                           // 0x020C (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            SceneIndex;                                    // 0x0218 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              ElapsedTime;                                   // 0x021C (0x0004) [0x0000000000000000]               
	class UPrimitiveComponent*                         RenderComponent;                               // 0x0220 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FPointer                                    RBPhysScene;                                   // 0x0224 (0x0004) [0x0000000000001000] (CPF_Native)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldComponent");
		}

		return uClassPointer;
	};

	void DoInitRBPhys();
};

// Class Engine.NxForceFieldCylindricalComponent
// 0x002C (0x0228 - 0x0254)
class UNxForceFieldCylindricalComponent : public UNxForceFieldComponent
{
public:
	float                                              RadialStrength;                                // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RotationalStrength;                            // 0x022C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftStrength;                                  // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x0234 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceTopRadius;                                // 0x0238 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftFalloffHeight;                             // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              EscapeVelocity;                                // 0x0240 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceHeight;                                   // 0x0244 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              HeightOffset;                                  // 0x0248 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           UseSpecialRadialForce : 1;                     // 0x024C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FPointer                                    Kernel;                                        // 0x0250 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldCylindricalComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.NxForceFieldGenericComponent
// 0x00A8 (0x0228 - 0x02D0)
class UNxForceFieldGenericComponent : public UNxForceFieldComponent
{
public:
	float                                              RoughExtentX;                                  // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RoughExtentY;                                  // 0x022C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RoughExtentZ;                                  // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EFFG_ForceFieldCoordinates                         Coordinates;                                   // 0x0234 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Constant;                                      // 0x0238 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierX;                           // 0x0244 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierY;                           // 0x0250 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionMultiplierZ;                           // 0x025C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     PositionTarget;                                // 0x0268 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierX;                           // 0x0274 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierY;                           // 0x0280 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityMultiplierZ;                           // 0x028C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     VelocityTarget;                                // 0x0298 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     Noise;                                         // 0x02A4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FalloffLinear;                                 // 0x02B0 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FalloffQuadratic;                              // 0x02BC (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              TorusRadius;                                   // 0x02C8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    Kernel;                                        // 0x02CC (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldGenericComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.NxForceFieldRadialComponent
// 0x0014 (0x0228 - 0x023C)
class UNxForceFieldRadialComponent : public UNxForceFieldComponent
{
public:
	float                                              ForceStrength;                                 // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x022C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              SelfRotationStrength;                          // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	ERadialImpulseFalloff                              ForceFalloff;                                  // 0x0234 (0x0001) [0x0000000000080009] (CPF_Edit | CPF_ExportObject | CPF_Component)
	struct FPointer                                    Kernel;                                        // 0x0238 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldRadialComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.NxForceFieldTornadoComponent
// 0x0030 (0x0228 - 0x0258)
class UNxForceFieldTornadoComponent : public UNxForceFieldComponent
{
public:
	float                                              RadialStrength;                                // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RotationalStrength;                            // 0x022C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftStrength;                                  // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceRadius;                                   // 0x0234 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceTopRadius;                                // 0x0238 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              LiftFalloffHeight;                             // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              EscapeVelocity;                                // 0x0240 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ForceHeight;                                   // 0x0244 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              HeightOffset;                                  // 0x0248 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           BSpecialRadialForceMode : 1;                   // 0x024C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              SelfRotationStrength;                          // 0x0250 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FPointer                                    Kernel;                                        // 0x0254 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NxForceFieldTornadoComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ForceFieldShape
// 0x0000 (0x003C - 0x003C)
class UForceFieldShape : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ForceFieldShape");
		}

		return uClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent();
	void eventFillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset);
	void eventFillByCapsule(float Height, float Radius);
	void eventFillByBox(const struct FVector& Dimension);
	void eventFillBySphere(float Radius);
};

// Class Engine.ForceFieldShapeBox
// 0x0004 (0x003C - 0x0040)
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                         // 0x003C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ForceFieldShapeBox");
		}

		return uClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent();
	void eventFillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset);
	void eventFillByCapsule(float Height, float Radius);
	void eventFillByBox(const struct FVector& Extent);
	void eventFillBySphere(float Radius);
	struct FVector eventGetRadii();
};

// Class Engine.ForceFieldShapeCapsule
// 0x0004 (0x003C - 0x0040)
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                         // 0x003C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ForceFieldShapeCapsule");
		}

		return uClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent();
	void eventFillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset);
	void eventFillByCapsule(float Height, float Radius);
	void eventFillByBox(const struct FVector& Extent);
	void eventFillBySphere(float Radius);
	float eventGetRadius();
	float eventGetHeight();
};

// Class Engine.ForceFieldShapeSphere
// 0x0004 (0x003C - 0x0040)
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                         // 0x003C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ForceFieldShapeSphere");
		}

		return uClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent();
	void eventFillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset);
	void eventFillByCapsule(float Height, float Radius);
	void eventFillByBox(const struct FVector& Extent);
	void eventFillBySphere(float Radius);
	float eventGetRadius();
};

// Class Engine.PrefabInstance
// 0x00BC (0x01C8 - 0x0284)
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                // 0x01C8 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            TemplateVersion;                               // 0x01CC (0x0004) [0x0000000000000002] (CPF_Const)   
	uint8_t                                            UnknownData00[0x3C];                            // 0x01D0 (0x003C) MISSED OFFSET
	class UPrefabSequence*                             SequenceInstance;                              // 0x020C (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            PI_PackageVersion;                             // 0x0210 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            PI_LicenseePackageVersion;                     // 0x0214 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<uint8_t>                              PI_Bytes;                                      // 0x0218 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class UObject*>                       PI_CompleteObjects;                            // 0x0224 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class UObject*>                       PI_ReferencedObjects;                          // 0x0230 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class FString>                        PI_SavedNames;                                 // 0x023C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	uint8_t                                            UnknownData01[0x3C];                            // 0x0248 (0x003C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PrefabInstance");
		}

		return uClassPointer;
	};

};

// Class Engine.Prefab
// 0x0024 (0x003C - 0x0060)
class UPrefab : public UObject
{
public:
	int32_t                                            PrefabVersion;                                 // 0x003C (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class UObject*>                       PrefabArchetypes;                              // 0x0040 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class UObject*>                       RemovedArchetypes;                             // 0x004C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class UPrefabSequence*                             PrefabSequence;                                // 0x0058 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UTexture2D*                                  PrefabPreview;                                 // 0x005C (0x0004) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Prefab");
		}

		return uClassPointer;
	};

};

// Class Engine.SequenceObject
// 0x0054 (0x003C - 0x0090)
class USequenceObject : public UObject
{
public:
	int32_t                                            ObjInstanceVersion;                            // 0x003C (0x0004) [0x0000000000000002] (CPF_Const)   
	class USequence*                                   ParentSequence;                                // 0x0040 (0x0004) [0x0000000001000002] (CPF_Const)   
	int32_t                                            ObjPosX;                                       // 0x0044 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            ObjPosY;                                       // 0x0048 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class FString                                      ObjName;                                       // 0x004C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      ObjCategory;                                   // 0x0058 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<class FString>                        ObjRemoveInProject;                            // 0x0064 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	struct FColor                                      ObjColor;                                      // 0x0070 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class FString                                      ObjComment;                                    // 0x0074 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bDeletable : 1;                                // 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bDrawFirst : 1;                                // 0x0080 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bDrawLast : 1;                                 // 0x0080 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bOutputObjCommentToScreen : 1;                 // 0x0080 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bSuppressAutoComment : 1;                      // 0x0080 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	int32_t                                            DrawWidth;                                     // 0x0084 (0x0004) [0x0000000000000000]               
	int32_t                                            DrawHeight;                                    // 0x0088 (0x0004) [0x0000000000000000]               
	class USequenceObject*                             PIESequenceObject;                             // 0x008C (0x0004) [0x0000000000002000] (CPF_Transient | CPF_NonTransactional | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SequenceObject");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
	bool eventIsPastingIntoLevelSequenceAllowed();
	bool eventIsValidLevelSequenceObject();
	class AWorldInfo* GetWorldInfo();
	void ScriptLog(const class FString& LogText, bool optionalBWarning);
};

// Class Engine.SequenceFrame
// 0x0020 (0x0090 - 0x00B0)
class USequenceFrame : public USequenceObject
{
public:
	int32_t                                            SizeX;                                         // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SizeY;                                         // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            BorderWidth;                                   // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDrawBox : 1;                                  // 0x009C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFilled : 1;                                   // 0x009C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bTileFill : 1;                                 // 0x009C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	struct FColor                                      BorderColor;                                   // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      FillColor;                                     // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  FillTexture;                                   // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class UMaterial*                                   FillMaterial;                                  // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SequenceFrame");
		}

		return uClassPointer;
	};

};

// Class Engine.SequenceFrameWrapped
// 0x0000 (0x00B0 - 0x00B0)
class USequenceFrameWrapped : public USequenceFrame
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SequenceFrameWrapped");
		}

		return uClassPointer;
	};

};

// Class Engine.SequenceOp
// 0x0054 (0x0090 - 0x00E4)
class USequenceOp : public USequenceObject
{
public:
	uint32_t                                           bIsActivated : 1;                              // 0x0090 (0x0004) [0x0000000001202000] [0x00000001] (CPF_Transient | CPF_NonTransactional | CPF_EditorOnly)
	uint32_t                                           bIsCurrentDebuggerOp : 1;                      // 0x0090 (0x0004) [0x0000000001202000] [0x00000002] (CPF_Transient | CPF_NonTransactional | CPF_EditorOnly)
	uint32_t                                           bActive : 1;                                   // 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bLatentExecution : 1;                          // 0x0090 (0x0004) [0x0000000000000002] [0x00000008] (CPF_Const)
	uint32_t                                           bAutoActivateOutputLinks : 1;                  // 0x0090 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bHaveMovingVarConnector : 1;                   // 0x0090 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bHaveMovingInputConnector : 1;                 // 0x0090 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bHaveMovingOutputConnector : 1;                // 0x0090 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bPendingVarConnectorRecalc : 1;                // 0x0090 (0x0004) [0x0000000000002000] [0x00000100] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bPendingInputConnectorRecalc : 1;              // 0x0090 (0x0004) [0x0000000000002000] [0x00000200] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bPendingOutputConnectorRecalc : 1;             // 0x0090 (0x0004) [0x0000000000002000] [0x00000400] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bIsBreakpointSet : 1;                          // 0x0090 (0x0004) [0x0000000000000000] [0x00000800] (CPF_EditorOnly)
	uint32_t                                           bIsHiddenBreakpointSet : 1;                    // 0x0090 (0x0004) [0x0000000001202000] [0x00001000] (CPF_Transient | CPF_NonTransactional | CPF_EditorOnly)
	float                                              PIEActivationTime;                             // 0x0094 (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	class USequenceOp*                                 ActivatorSeqOp;                                // 0x0098 (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	int32_t                                            LastActivatedInputLink;                        // 0x009C (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	int32_t                                            LastActivatedOutputLink;                       // 0x00A0 (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	class TArray<struct FSeqOpInputLink>               InputLinks;                                    // 0x00A4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FSeqOpOutputLink>              OutputLinks;                                   // 0x00B0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FSeqVarLink>                   VariableLinks;                                 // 0x00BC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FSeqEventLink>                 EventLinks;                                    // 0x00C8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            PlayerIndex;                                   // 0x00D4 (0x0004) [0x0000000001002000] (CPF_Transient)
	uint8_t                                            GamepadID;                                     // 0x00D8 (0x0001) [0x0000000001002000] (CPF_Transient)
	int32_t                                            ActivateCount;                                 // 0x00DC (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            SearchTag;                                     // 0x00E0 (0x0004) [0x0000000000202002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SequenceOp");
		}

		return uClassPointer;
	};

	void ForceActivateOutput(int32_t OutputIdx);
	void ForceActivateInput(int32_t InputIdx);
	class AController* GetController(class AActor* TheActor);
	class APawn* GetPawn(class AActor* TheActor);
	void Reset();
	void PublishLinkedVariableValues();
	void PopulateLinkedVariableValues();
	void eventVersionUpdated(int32_t OldVersion, int32_t NewVersion);
	void eventDeactivated();
	void eventActivated();
	bool ActivateNamedOutputLink(const class FString& LinkDesc);
	bool ActivateOutputLink(int32_t OutputIdx);
	void LinkedVariables(class UClass* VarClass, const class FString& optionalInDesc, class USequenceVariable*& outOutVariable);
	void GetBoolVars(const class FString& optionalInDesc, class TArray<uint8_t>& outBoolVars);
	void GetInterpDataVars(const class FString& optionalInDesc, class TArray<class UInterpData*>& outOutIData);
	void GetObjectVarsW(const class FString& optionalInDesc, class TArray<class UObject*>& outObjVars);
	void GetLinkedObjects(class UClass* optionalObjectType, bool optionalBRecurse, class TArray<class USequenceObject*>& outOut_Objects);
	bool HasLinkedOps(bool optionalBConsiderInputLinks);
};

// Class Engine.Sequence
// 0x0068 (0x00E4 - 0x014C)
class USequence : public USequenceOp
{
public:
	struct FPointer                                    LogFile;                                       // 0x00E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class USequenceObject*>               SequenceObjects;                               // 0x00E8 (0x000C) [0x000000000040000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink)
	class TArray<class USequenceOp*>                   ActiveSequenceOps;                             // 0x00F4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class USequence*>                     NestedSequences;                               // 0x0100 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class USequenceEvent*>                UnregisteredEvents;                            // 0x010C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FActivateOp>                   DelayedActivatedOps;                           // 0x0118 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class USequenceOp*>                   DelayedLatentOps;                              // 0x0124 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           bEnabled : 1;                                  // 0x0130 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<struct FQueuedActivationInfo>         QueuedActivations;                             // 0x0134 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            DefaultViewX;                                  // 0x0140 (0x0004) [0x0000000000000000]               
	int32_t                                            DefaultViewY;                                  // 0x0144 (0x0004) [0x0000000000000000]               
	float                                              DefaultViewZoom;                               // 0x0148 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Sequence");
		}

		return uClassPointer;
	};

	void SetEnabled(bool bInEnabled);
	void Reset();
	void FindSeqObjectsByName(const class FString& SeqObjName, bool bCheckComment, bool optionalBRecursive, bool optionalBUseFullLevelName, class TArray<class USequenceObject*>& outOutputObjects);
	void FindSeqObjectsByClass(class UClass* DesiredClass, bool bRecursive, class TArray<class USequenceObject*>& outOutputObjects);
};

// Class Engine.PrefabSequence
// 0x0004 (0x014C - 0x0150)
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                   // 0x014C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PrefabSequence");
		}

		return uClassPointer;
	};

	class APrefabInstance* GetOwnerPrefab();
	void SetOwnerPrefab(class APrefabInstance* InOwner);
};

// Class Engine.PrefabSequenceContainer
// 0x0000 (0x014C - 0x014C)
class UPrefabSequenceContainer : public USequence
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PrefabSequenceContainer");
		}

		return uClassPointer;
	};

};

// Class Engine.SequenceAction
// 0x0018 (0x00E4 - 0x00FC)
class USequenceAction : public USequenceOp
{
public:
	class FName                                        HandlerName;                                   // 0x00E4 (0x0008) [0x0000000000000000]               
	uint32_t                                           bCallHandler : 1;                              // 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 
	class TArray<class UObject*>                       Targets;                                       // 0x00F0 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SequenceAction");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ActivateRemoteEvent
// 0x0010 (0x00FC - 0x010C)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                    // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        EventName;                                     // 0x0100 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x0108 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ActivateRemoteEvent");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_AndGate
// 0x001C (0x00FC - 0x0118)
class USeqAct_AndGate : public USequenceAction
{
public:
	uint32_t                                           bOpen : 1;                                     // 0x00FC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class TArray<uint32_t>                             LinkedOutputFiredStatus;                       // 0x0100 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FPointer>                      LinkedOutputs;                                 // 0x010C (0x000C) [0x0000000000003000] (CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AndGate");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ApplySoundNode
// 0x0008 (0x00FC - 0x0104)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                     // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundNode*                                  ApplyNode;                                     // 0x0100 (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ApplySoundNode");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_AttachToEvent
// 0x0004 (0x00FC - 0x0100)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	uint32_t                                           bPreferController : 1;                         // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AttachToEvent");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_CameraFade
// 0x0028 (0x00FC - 0x0124)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct FColor                                      FadeColor;                                     // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   FadeAlpha;                                     // 0x0100 (0x0008) [0x0000000020000000]  CPF_Deprecated)
	float                                              FadeOpacity;                                   // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeTime;                                      // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bPersistFade : 1;                              // 0x0110 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bFadeAudio : 1;                                // 0x0110 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              FadeTimeRemaining;                             // 0x0114 (0x0004) [0x0000000000000000]               
	class TArray<class APlayerController*>             CachedPCs;                                     // 0x0118 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_CameraFade");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_CameraLookAt
// 0x0034 (0x00FC - 0x0130)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	uint32_t                                           bAffectCamera : 1;                             // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAlwaysFocus : 1;                              // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAdjustCamera : 1;                             // 0x00FC (0x0004) [0x0000000020000000] [0x00000004]  CPF_Deprecated)
	uint32_t                                           bTurnInPlace : 1;                              // 0x00FC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bIgnoreTrace : 1;                              // 0x00FC (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAffectHead : 1;                               // 0x00FC (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRotatePlayerWithCamera : 1;                   // 0x00FC (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bToggleGodMode : 1;                            // 0x00FC (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bLeaveCameraRotation : 1;                      // 0x00FC (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bDisableInput : 1;                             // 0x00FC (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bUsedTimer : 1;                                // 0x00FC (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bCheckLineOfSight : 1;                         // 0x00FC (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	struct FVector2D                                   InterpSpeedRange;                              // 0x0100 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   InFocusFOV;                                    // 0x0108 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        FocusBoneName;                                 // 0x0110 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FString                                      TextDisplay;                                   // 0x0118 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              TotalTime;                                     // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CameraFOV;                                     // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RemainingTime;                                 // 0x012C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_CameraLookAt");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_CameraShake
// 0x0020 (0x00FC - 0x011C)
class USeqAct_CameraShake : public USequenceAction
{
public:
	class UCameraShake*                                Shake;                                         // 0x00FC (0x0004) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_ProtectedWrite)
	float                                              ShakeScale;                                    // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_ProtectedWrite)
	uint32_t                                           bDoControllerVibration : 1;                    // 0x0104 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit | CPF_ProtectedWrite)
	uint32_t                                           bRadialShake : 1;                              // 0x0104 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit | CPF_ProtectedWrite)
	uint32_t                                           bOrientTowardRadialEpicenter : 1;              // 0x0104 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit | CPF_ProtectedWrite)
	float                                              RadialShake_InnerRadius;                       // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_ProtectedWrite)
	float                                              RadialShake_OuterRadius;                       // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_ProtectedWrite)
	float                                              RadialShake_Falloff;                           // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_ProtectedWrite)
	ECameraAnimPlaySpace                               PlaySpace;                                     // 0x0114 (0x0001) [0x0000000000000001] (CPF_Edit | CPF_ProtectedWrite)
	class AActor*                                      LocationActor;                                 // 0x0118 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_CameraShake");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_ChangeCollision
// 0x0005 (0x00FC - 0x0101)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	uint32_t                                           bCollideActors : 1;                            // 0x00FC (0x0004) [0x0000000000020003] [0x00000001] (CPF_Edit | CPF_Const | CPF_EditConst)
	uint32_t                                           bBlockActors : 1;                              // 0x00FC (0x0004) [0x0000000000020003] [0x00000002] (CPF_Edit | CPF_Const | CPF_EditConst)
	uint32_t                                           bIgnoreEncroachers : 1;                        // 0x00FC (0x0004) [0x0000000000020003] [0x00000004] (CPF_Edit | CPF_Const | CPF_EditConst)
	ECollisionType                                     CollisionType;                                 // 0x0100 (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ChangeCollision");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_CommitMapChange
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_CommitMapChange");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ConvertToString
// 0x0014 (0x00FC - 0x0110)
class USeqAct_ConvertToString : public USequenceAction
{
public:
	uint32_t                                           bIncludeVarComment : 1;                        // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class FString                                      VarSeparator;                                  // 0x0100 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            NumberOfInputs;                                // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ConvertToString");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_DrawText
// 0x003C (0x00FC - 0x0138)
class USeqAct_DrawText : public USequenceAction
{
public:
	float                                              DisplayTimeSeconds;                            // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDisplayOnObject : 1;                          // 0x0100 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FKismetDrawTextInfo                         DrawTextInfo;                                  // 0x0104 (0x0034) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_DrawText");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_FinishSequence
// 0x000C (0x00FC - 0x0108)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	class FString                                      OutputLabel;                                   // 0x00FC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_FinishSequence");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_Gate
// 0x000C (0x00FC - 0x0108)
class USeqAct_Gate : public USequenceAction
{
public:
	uint32_t                                           bOpen : 1;                                     // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            AutoCloseCount;                                // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CurrentCloseCount;                             // 0x0104 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Gate");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_GetDistance
// 0x0004 (0x00FC - 0x0100)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                      // 0x00FC (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_GetDistance");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_GetLocationAndRotation
// 0x002C (0x00FC - 0x0128)
class USeqAct_GetLocationAndRotation : public USequenceAction
{
public:
	struct FVector                                     Location;                                      // 0x00FC (0x000C) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	struct FVector                                     RotationVector;                                // 0x0108 (0x000C) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	struct FVector                                     Rotation;                                      // 0x0114 (0x000C) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	class FName                                        SocketOrBoneName;                              // 0x0120 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_GetLocationAndRotation");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_GetProperty
// 0x0008 (0x00FC - 0x0104)
class USeqAct_GetProperty : public USequenceAction
{
public:
	class FName                                        PropertyName;                                  // 0x00FC (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_GetProperty");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_GetVectorComponents
// 0x0018 (0x00FC - 0x0114)
class USeqAct_GetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     InVector;                                      // 0x00FC (0x000C) [0x0000000000000000]               
	float                                              X;                                             // 0x0108 (0x0004) [0x0000000000000000]               
	float                                              Y;                                             // 0x010C (0x0004) [0x0000000000000000]               
	float                                              Z;                                             // 0x0110 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_GetVectorComponents");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_GetVelocity
// 0x0010 (0x00FC - 0x010C)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              VelocityMag;                                   // 0x00FC (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	struct FVector                                     VelocityVect;                                  // 0x0100 (0x000C) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_GetVelocity");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_HeadTrackingControl
// 0x0080 (0x00FC - 0x017C)
class USeqAct_HeadTrackingControl : public USequenceAction
{
public:
	class TArray<class FName>                          TrackControllerName;                           // 0x00FC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              LookAtActorRadius;                             // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDisableBeyondLimit : 1;                       // 0x010C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLookAtPawns : 1;                              // 0x010C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              MaxLookAtTime;                                 // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinLookAtTime;                                 // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxInterestTime;                               // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UClass*>                        ActorClassesToLookAt;                          // 0x011C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FName>                          TargetBoneNames;                               // 0x0128 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UObject*>                       LookAtTargets;                                 // 0x0134 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0140 (0x003C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_HeadTrackingControl");
		}

		return uClassPointer;
	};

	void eventActivated();
	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_IsInObjectList
// 0x0004 (0x00FC - 0x0100)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	uint32_t                                           bCheckForAllObjects : 1;                       // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bObjectFound : 1;                              // 0x00FC (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_IsInObjectList");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_Latent
// 0x0014 (0x00FC - 0x0110)
class USeqAct_Latent : public USequenceAction
{
public:
	class TArray<class AActor*>                        LatentActors;                                  // 0x00FC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bAborted : 1;                                  // 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              LatentActivationTime;                          // 0x010C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Latent");
		}

		return uClassPointer;
	};

	bool eventUpdate(float DeltaTime);
	void AbortFor(class AActor* latentActor);
};

// Class Engine.SeqAct_ActorFactory
// 0x0048 (0x0110 - 0x0158)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0110 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsSpawning : 1;                               // 0x0110 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bCheckSpawnCollision : 1;                      // 0x0110 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class UActorFactory*                               Factory;                                       // 0x0114 (0x0004) [0x0000000004400009] (CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	EPointSelection                                    PointSelection;                                // 0x0118 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class TArray<class AActor*>                        SpawnPoints;                                   // 0x011C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FVector>                       SpawnLocations;                                // 0x0128 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FVector>                       SpawnOrientations;                             // 0x0134 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	int32_t                                            SpawnCount;                                    // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SpawnDelay;                                    // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LastSpawnIdx;                                  // 0x0148 (0x0004) [0x0000000000000000]               
	int32_t                                            CurrentSpawnIdx;                               // 0x014C (0x0004) [0x0000000000000000]               
	int32_t                                            SpawnedCount;                                  // 0x0150 (0x0004) [0x0000000000000000]               
	float                                              RemainingDelay;                                // 0x0154 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ActorFactory");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_ActorFactoryEx
// 0x0000 (0x0158 - 0x0158)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ActorFactoryEx");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ProjectileFactory
// 0x0014 (0x0158 - 0x016C)
class USeqAct_ProjectileFactory : public USeqAct_ActorFactory
{
public:
	class UParticleSystem*                             PSTemplate;                                    // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        SocketName;                                    // 0x015C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FName                                        BoneName;                                      // 0x0164 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ProjectileFactory");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_AIMoveToActor
// 0x001C (0x0110 - 0x012C)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	uint32_t                                           bInterruptable : 1;                            // 0x0110 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPickClosest : 1;                              // 0x0110 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class TArray<class AActor*>                        Destination;                                   // 0x0114 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              MovementSpeedModifier;                         // 0x0120 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      LookAt;                                        // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LastDestinationChoice;                         // 0x0128 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AIMoveToActor");
		}

		return uClassPointer;
	};

	class AActor* PickDestination(class AActor* Requestor);
	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_Delay
// 0x0014 (0x0110 - 0x0124)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	uint32_t                                           bDelayActive : 1;                              // 0x0110 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bStartWillRestart : 1;                         // 0x0110 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           IgnoreBGPause : 1;                             // 0x0110 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              DefaultDuration;                               // 0x0114 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              Duration;                                      // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LastUpdateTime;                                // 0x011C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              RemainingTime;                                 // 0x0120 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Delay");
		}

		return uClassPointer;
	};

	void ResetDelayActive();
	void Reset();
};

// Class Engine.SeqAct_DelaySwitch
// 0x0010 (0x0110 - 0x0120)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int32_t                                            LinkCount;                                     // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CurrentIdx;                                    // 0x0114 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              SwitchDelay;                                   // 0x0118 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              NextLinkTime;                                  // 0x011C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_DelaySwitch");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ForceGarbageCollection
// 0x0000 (0x0110 - 0x0110)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ForceGarbageCollection");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_Interp
// 0x00CC (0x0110 - 0x01DC)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	uint8_t                                            UnknownData00[0x78];                            // 0x0110 (0x0078) MISSED OFFSET
	float                                              PlayRate;                                      // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Position;                                      // 0x018C (0x0004) [0x0000000000000000]               
	float                                              ForceStartPosition;                            // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIsPlaying : 1;                                // 0x0194 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bPaused : 1;                                   // 0x0194 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bIsBeingEdited : 1;                            // 0x0194 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bLooping : 1;                                  // 0x0194 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bRewindOnPlay : 1;                             // 0x0194 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bNoResetOnRewind : 1;                          // 0x0194 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRewindIfAlreadyPlaying : 1;                   // 0x0194 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bReversePlayback : 1;                          // 0x0194 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bInterpForPathBuilding : 1;                    // 0x0194 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bForceStartPos : 1;                            // 0x0194 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bDisableRadioFilter : 1;                       // 0x0194 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bClientSideOnly : 1;                           // 0x0194 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bSkipUpdateIfNotVisible : 1;                   // 0x0194 (0x0004) [0x0000000000000001] [0x00001000] (CPF_Edit)
	uint32_t                                           bIsSkippable : 1;                              // 0x0194 (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bShouldShowGore : 1;                           // 0x0194 (0x0004) [0x0000000000002000] [0x00004000] (CPF_Transient)
	uint32_t                                           bMirrorX : 1;                                  // 0x0194 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	class TArray<class ACoverLink*>                    LinkedCover;                                   // 0x0198 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UInterpData*                                 InterpData;                                    // 0x01A4 (0x0004) [0x0000000000000008] (CPF_ExportObject)
	class TArray<class UInterpGroupInst*>              GroupInst;                                     // 0x01A8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UClass*                                      ReplicatedActorClass;                          // 0x01B4 (0x0004) [0x0000000000000002] (CPF_Const)   
	class AMatineeActor*                               ReplicatedActor;                               // 0x01B8 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            PreferredSplitScreenNum;                       // 0x01BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FCameraCutInfo>                CameraCuts;                                    // 0x01C0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              TerminationTime;                               // 0x01CC (0x0004) [0x0000000000000000]               
	struct FRenderingPerformanceOverrides              RenderingOverrides;                            // 0x01D0 (0x0004) [0x0000000000044001] (CPF_Edit | CPF_Config | CPF_GlobalConfig)
	uint8_t                                            ConstantCameraAnim;                            // 0x01D4 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              ConstantCameraAnimRate;                        // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Interp");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
	void Reset();
	void AddPlayerToDirectorTracks(class APlayerController* PC);
	void Stop();
	void SetPosition(float NewPosition, bool optionalBJump);
};

// Class Engine.SeqAct_LevelStreamingBase
// 0x0004 (0x0110 - 0x0114)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	uint32_t                                           bMakeVisibleAfterLoad : 1;                     // 0x0110 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bShouldBlockOnLoad : 1;                        // 0x0110 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_LevelStreamingBase");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_LevelStreaming
// 0x0010 (0x0114 - 0x0124)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                         // 0x0114 (0x0004) [0x0000000000000002] (CPF_Const)   
	class FName                                        LevelName;                                     // 0x0118 (0x0008) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bStatusIsOk : 1;                               // 0x0120 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_LevelStreaming");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_MultiLevelStreaming
// 0x0010 (0x0114 - 0x0124)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class TArray<struct FLevelStreamingNameCombo>      Levels;                                        // 0x0114 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bUnloadAllOtherLevels : 1;                     // 0x0120 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bStatusIsOk : 1;                               // 0x0120 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_MultiLevelStreaming");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_LevelVisibility
// 0x0010 (0x0110 - 0x0120)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                         // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        LevelName;                                     // 0x0114 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x011C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_LevelVisibility");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_PlaySound
// 0x0024 (0x0110 - 0x0134)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                     // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExtraDelay;                                    // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDelayReached : 1;                             // 0x0118 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bSuppressSubtitles : 1;                        // 0x0118 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bStopped : 1;                                  // 0x0118 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              SoundDuration;                                 // 0x011C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              FadeInTime;                                    // 0x0120 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeOutTime;                                   // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VolumeMultiplier;                              // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMultiplier;                               // 0x012C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BeforeEndTime;                                 // 0x0130 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_PlaySound");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_PrepareMapChange
// 0x0018 (0x0110 - 0x0128)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	class FName                                        MainLevelName;                                 // 0x0110 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<class FName>                          InitiallyLoadedSecondaryLevelNames;            // 0x0118 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bIsHighPriority : 1;                           // 0x0124 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bStatusIsOk : 1;                               // 0x0124 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_PrepareMapChange");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetDOFParams
// 0x0058 (0x0110 - 0x0168)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                               // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlurKernelSize;                                // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxNearBlurAmount;                             // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinBlurAmount;                                 // 0x011C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxFarBlurAmount;                              // 0x0120 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FocusInnerRadius;                              // 0x0124 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FocusDistance;                                 // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     FocusPosition;                                 // 0x012C (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              InterpolateSeconds;                            // 0x0138 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InterpolateElapsed;                            // 0x013C (0x0004) [0x0000000000000000]               
	float                                              OldFalloffExponent;                            // 0x0140 (0x0004) [0x0000000000000000]               
	float                                              OldBlurKernelSize;                             // 0x0144 (0x0004) [0x0000000000000000]               
	float                                              OldMaxNearBlurAmount;                          // 0x0148 (0x0004) [0x0000000000000000]               
	float                                              OldMinBlurAmount;                              // 0x014C (0x0004) [0x0000000000000000]               
	float                                              OldMaxFarBlurAmount;                           // 0x0150 (0x0004) [0x0000000000000000]               
	float                                              OldFocusInnerRadius;                           // 0x0154 (0x0004) [0x0000000000000000]               
	float                                              OldFocusDistance;                              // 0x0158 (0x0004) [0x0000000000000000]               
	struct FVector                                     OldFocusPosition;                              // 0x015C (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetDOFParams");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetMotionBlurParams
// 0x0010 (0x0110 - 0x0120)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                              // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InterpolateSeconds;                            // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InterpolateElapsed;                            // 0x0118 (0x0004) [0x0000000000000000]               
	float                                              OldMotionBlurAmount;                           // 0x011C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMotionBlurParams");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_StreamInTextures
// 0x0034 (0x0110 - 0x0144)
class USeqAct_StreamInTextures : public USeqAct_Latent
{
public:
	uint32_t                                           bLocationBased : 1;                            // 0x0110 (0x0004) [0x0000000020000000] [0x00000001]  CPF_Deprecated)
	uint32_t                                           bStreamingActive : 1;                          // 0x0110 (0x0004) [0x0000000000000002] [0x00000002] (CPF_Const)
	uint32_t                                           bHasTriggeredAllLoaded : 1;                    // 0x0110 (0x0004) [0x0000000000000002] [0x00000004] (CPF_Const)
	float                                              Seconds;                                       // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StreamingDistanceMultiplier;                   // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NumWantingResourcesID;                         // 0x011C (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              StopTimestamp;                                 // 0x0120 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<class UObject*>                       LocationActors;                                // 0x0124 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UMaterialInterface*>            ForceMaterials;                                // 0x0130 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	struct FTextureGroupContainer                      CinematicTextureGroups;                        // 0x013C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            SelectedCinematicTextureGroups;                // 0x0140 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_StreamInTextures");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_WaitForLevelsVisible
// 0x0010 (0x0110 - 0x0120)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	class TArray<class FName>                          LevelNames;                                    // 0x0110 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bShouldBlockOnLoad : 1;                        // 0x011C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_WaitForLevelsVisible");
		}

		return uClassPointer;
	};

	void eventActivated();
	bool CheckLevelsVisible();
};

// Class Engine.SeqAct_Log
// 0x0020 (0x00FC - 0x011C)
class USeqAct_Log : public USequenceAction
{
public:
	uint32_t                                           bOutputToScreen : 1;                           // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIncludeObjComment : 1;                        // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              TargetDuration;                                // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     TargetOffset;                                  // 0x0104 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class FString                                      LogMessage;                                    // 0x0110 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Log");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_FeatureTest
// 0x0020 (0x011C - 0x013C)
class USeqAct_FeatureTest : public USeqAct_Log
{
public:
	class FString                                      FreezeAtParameters;                            // 0x011C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              ScreenShotDelay;                               // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      ScreenShotName;                                // 0x012C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              RemainingScreenShotDelay;                      // 0x0138 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_FeatureTest");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ModifyCover
// 0x0014 (0x00FC - 0x0110)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	class TArray<int32_t>                              Slots;                                         // 0x00FC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	ECoverType                                         ManualCoverType;                               // 0x0108 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bManualAdjustPlayersOnly : 1;                  // 0x010C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ModifyCover");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ModifyHealth
// 0x0018 (0x00FC - 0x0114)
class USeqAct_ModifyHealth : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                    // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Momentum;                                      // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Amount;                                        // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Radius;                                        // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bHeal : 1;                                     // 0x010C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRadial : 1;                                   // 0x010C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bFalloff : 1;                                  // 0x010C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class AActor*                                      Instigator;                                    // 0x0110 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ModifyHealth");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_ParticleEventGenerator
// 0x0048 (0x00FC - 0x0144)
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseEmitterLocation : 1;                       // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class AActor*                                      Instigator;                                    // 0x0100 (0x0004) [0x0000000000000000]               
	class TArray<class FString>                        EventNames;                                    // 0x0104 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              EventTime;                                     // 0x0110 (0x0004) [0x0000000000000000]               
	struct FVector                                     EventLocation;                                 // 0x0114 (0x000C) [0x0000000000000000]               
	struct FVector                                     EventDirection;                                // 0x0120 (0x000C) [0x0000000000000000]               
	struct FVector                                     EventVelocity;                                 // 0x012C (0x000C) [0x0000000000000000]               
	struct FVector                                     EventNormal;                                   // 0x0138 (0x000C) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ParticleEventGenerator");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_PlayCameraAnim
// 0x0020 (0x00FC - 0x011C)
class USeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 CameraAnim;                                    // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLoop : 1;                                     // 0x0100 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRandomStartTime : 1;                          // 0x0100 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              BlendInTime;                                   // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendOutTime;                                  // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Rate;                                          // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              IntensityScale;                                // 0x0110 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ECameraAnimPlaySpace                               PlaySpace;                                     // 0x0114 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      UserDefinedSpaceActor;                         // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_PlayCameraAnim");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_PlayFaceFXAnim
// 0x0020 (0x00FC - 0x011C)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                              // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      FaceFXGroupName;                               // 0x0100 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      FaceFXAnimName;                                // 0x010C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class USoundCue*                                   SoundCueToPlay;                                // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_PlayFaceFXAnim");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_PlayMusicTrack
// 0x0024 (0x00FC - 0x0120)
class USeqAct_PlayMusicTrack : public USequenceAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                    // 0x00FC (0x0024) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_PlayMusicTrack");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_Possess
// 0x0008 (0x00FC - 0x0104)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                 // 0x00FC (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bKillOldPawn : 1;                              // 0x0100 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTryToLeaveVehicle : 1;                        // 0x0100 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Possess");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_RangeSwitch
// 0x000C (0x00FC - 0x0108)
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	class TArray<struct FSwitchRange>                  Ranges;                                        // 0x00FC (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_RangeSwitch");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetActiveAnimChild
// 0x0010 (0x00FC - 0x010C)
class USeqAct_SetActiveAnimChild : public USequenceAction
{
public:
	class FName                                        NodeName;                                      // 0x00FC (0x0008) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ChildIndex;                                    // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BlendTime;                                     // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetActiveAnimChild");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetApexClothingParam
// 0x0004 (0x00FC - 0x0100)
class USeqAct_SetApexClothingParam : public USequenceAction
{
public:
	uint32_t                                           bEnableApexClothingSimulation : 1;             // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetApexClothingParam");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetBlockRigidBody
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetBlockRigidBody");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetCameraTarget
// 0x0014 (0x00FC - 0x0110)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                  // 0x00FC (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FViewTargetTransitionParams                 TransitionParams;                              // 0x0100 (0x0010) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetCameraTarget");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_SetMaterial
// 0x0008 (0x00FC - 0x0104)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                   // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaterialIndex;                                 // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMaterial");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetMatInstScalarParam
// 0x0010 (0x00FC - 0x010C)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                       // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ParamName;                                     // 0x0100 (0x0008) [0x0000000000000001] (CPF_Edit)    
	float                                              ScalarValue;                                   // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMatInstScalarParam");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetMesh
// 0x0010 (0x00FC - 0x010C)
class USeqAct_SetMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                               // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UStaticMesh*                                 NewStaticMesh;                                 // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EMeshType                                          MeshType;                                      // 0x0104 (0x0001) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIsAllowedToMove : 1;                          // 0x0108 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAllowDecalsToReattach : 1;                    // 0x0108 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetPhysics
// 0x0001 (0x00FC - 0x00FD)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	EPhysics                                           newPhysics;                                    // 0x00FC (0x0001) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetPhysics");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetRigidBodyIgnoreVehicles");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetSequenceVariable
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetSequenceVariable");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_AccessObjectList
// 0x0008 (0x00FC - 0x0104)
class USeqAct_AccessObjectList : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     OutputObject;                                  // 0x00FC (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	int32_t                                            ObjectIndex;                                   // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AccessObjectList");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_AddFloat
// 0x0010 (0x00FC - 0x010C)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                        // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueB;                                        // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatResult;                                   // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AddFloat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_AddInt
// 0x0010 (0x00FC - 0x010C)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int32_t                                            ValueA;                                        // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueB;                                        // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatResult;                                   // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AddInt");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_CastToFloat
// 0x0008 (0x00FC - 0x0104)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int32_t                                            Value;                                         // 0x00FC (0x0004) [0x0000000000000000]               
	float                                              FloatResult;                                   // 0x0100 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_CastToFloat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_CastToInt
// 0x000C (0x00FC - 0x0108)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	uint32_t                                           bTruncate : 1;                                 // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              Value;                                         // 0x0100 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0104 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_CastToInt");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_DivideFloat
// 0x0010 (0x00FC - 0x010C)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                        // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueB;                                        // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatResult;                                   // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_DivideFloat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_DivideInt
// 0x0010 (0x00FC - 0x010C)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int32_t                                            ValueA;                                        // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueB;                                        // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatResult;                                   // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_DivideInt");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ModifyObjectList
// 0x0004 (0x00FC - 0x0100)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int32_t                                            ListEntriesCount;                              // 0x00FC (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ModifyObjectList");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_MultiplyFloat
// 0x0010 (0x00FC - 0x010C)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                        // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueB;                                        // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatResult;                                   // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_MultiplyFloat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_MultiplyInt
// 0x0010 (0x00FC - 0x010C)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int32_t                                            ValueA;                                        // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueB;                                        // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatResult;                                   // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_MultiplyInt");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetBool
// 0x0004 (0x00FC - 0x0100)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	uint32_t                                           DefaultValue : 1;                              // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetBool");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetFloat
// 0x0010 (0x00FC - 0x010C)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                        // 0x00FC (0x0004) [0x0000000000000000]               
	class TArray<float>                                Value;                                         // 0x0100 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetFloat");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_SetInt
// 0x0010 (0x00FC - 0x010C)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int32_t                                            Target;                                        // 0x00FC (0x0004) [0x0000000000000000]               
	class TArray<int32_t>                              Value;                                         // 0x0100 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetInt");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_SetLocation
// 0x0020 (0x00FC - 0x011C)
class USeqAct_SetLocation : public USeqAct_SetSequenceVariable
{
public:
	uint32_t                                           bSetLocation : 1;                              // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSetRotation : 1;                              // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FVector                                     LocationValue;                                 // 0x0100 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    RotationValue;                                 // 0x010C (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UObject*                                     Target;                                        // 0x0118 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetLocation");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_SetObject
// 0x0008 (0x00FC - 0x0104)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                  // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UObject*                                     Value;                                         // 0x0100 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetObject");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_SetString
// 0x0018 (0x00FC - 0x0114)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	class FString                                      Target;                                        // 0x00FC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      Value;                                         // 0x0108 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetString");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_SubtractFloat
// 0x0010 (0x00FC - 0x010C)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                        // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueB;                                        // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatResult;                                   // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SubtractFloat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SubtractInt
// 0x0010 (0x00FC - 0x010C)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int32_t                                            ValueA;                                        // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueB;                                        // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloatResult;                                   // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            IntResult;                                     // 0x0108 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SubtractInt");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetVectorComponents
// 0x0018 (0x00FC - 0x0114)
class USeqAct_SetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     OutVector;                                     // 0x00FC (0x000C) [0x0000000000000000]               
	float                                              X;                                             // 0x0108 (0x0004) [0x0000000000000000]               
	float                                              Y;                                             // 0x010C (0x0004) [0x0000000000000000]               
	float                                              Z;                                             // 0x0110 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetVectorComponents");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetWorldAttractorParam
// 0x0068 (0x00FC - 0x0164)
class USeqAct_SetWorldAttractorParam : public USequenceAction
{
public:
	class TArray<class AWorldAttractor*>               Attractor;                                     // 0x00FC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bEnabledField : 1;                             // 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bFalloffTypeField : 1;                         // 0x0108 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bFalloffExponentField : 1;                     // 0x0108 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bRangeField : 1;                               // 0x0108 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bStrengthField : 1;                            // 0x0108 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bEnabled : 1;                                  // 0x0108 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	EWorldAttractorFalloffType                         FalloffType;                                   // 0x010C (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       FalloffExponent;                               // 0x0110 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       Range;                                         // 0x012C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                      // 0x0148 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetWorldAttractorParam");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_Switch
// 0x0018 (0x00FC - 0x0114)
class USeqAct_Switch : public USequenceAction
{
public:
	int32_t                                            LinkCount;                                     // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            IncrementAmount;                               // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLooping : 1;                                  // 0x0104 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAutoDisableLinks : 1;                         // 0x0104 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class TArray<int32_t>                              Indices;                                       // 0x0108 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Switch");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_RandomSwitch
// 0x000C (0x0114 - 0x0120)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	class TArray<int32_t>                              AutoDisabledIndices;                           // 0x0114 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_RandomSwitch");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_Timer
// 0x0008 (0x00FC - 0x0104)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                // 0x00FC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Time;                                          // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Timer");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_Toggle
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_Toggle : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Toggle");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_Trace
// 0x003C (0x00FC - 0x0138)
class USeqAct_Trace : public USequenceAction
{
public:
	uint32_t                                           bTraceActors : 1;                              // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bTraceWorld : 1;                               // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FVector                                     TraceExtent;                                   // 0x0100 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     StartOffset;                                   // 0x010C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     EndOffset;                                     // 0x0118 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UObject*                                     HitObject;                                     // 0x0124 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	float                                              Distance;                                      // 0x0128 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	struct FVector                                     HitLocation;                                   // 0x012C (0x000C) [0x0000000000020001] (CPF_Edit | CPF_EditConst)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Trace");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SequenceCondition
// 0x0000 (0x00E4 - 0x00E4)
class USequenceCondition : public USequenceOp
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SequenceCondition");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_CompareBool
// 0x0004 (0x00E4 - 0x00E8)
class USeqCond_CompareBool : public USequenceCondition
{
public:
	uint32_t                                           bResult : 1;                                   // 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_CompareBool");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqCond_CompareFloat
// 0x0008 (0x00E4 - 0x00EC)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                        // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueB;                                        // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_CompareFloat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_CompareInt
// 0x0008 (0x00E4 - 0x00EC)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int32_t                                            ValueA;                                        // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueB;                                        // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_CompareInt");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_CompareObject
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_CompareObject : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_CompareObject");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_GetServerType
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_GetServerType : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_GetServerType");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqCond_Increment
// 0x000C (0x00E4 - 0x00F0)
class USeqCond_Increment : public USequenceCondition
{
public:
	int32_t                                            IncrementAmount;                               // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueA;                                        // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ValueB;                                        // 0x00EC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_Increment");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_IncrementFloat
// 0x000C (0x00E4 - 0x00F0)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                               // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueA;                                        // 0x00E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ValueB;                                        // 0x00EC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_IncrementFloat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_IsAlive
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsAlive : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_IsAlive");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_IsBenchmarking
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsBenchmarking : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_IsBenchmarking");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqCond_IsConsole
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsConsole : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_IsConsole");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_IsInCombat
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_IsInCombat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_IsLoggedIn
// 0x0004 (0x00E4 - 0x00E8)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int32_t                                            NumNeededLoggedIn;                             // 0x00E4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_IsLoggedIn");
		}

		return uClassPointer;
	};

	bool eventCheckLogins();
};

// Class Engine.SeqCond_IsPIE
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsPIE : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_IsPIE");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqCond_IsSameTeam
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_IsSameTeam");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_MatureLanguage
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_MatureLanguage : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_MatureLanguage");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_ShowGore
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_ShowGore : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_ShowGore");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqCond_SwitchBase
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_SwitchBase");
		}

		return uClassPointer;
	};

	void eventRemoveValueEntry(int32_t RemoveIndex);
	void eventInsertValueEntry(int32_t InsertIndex);
	bool eventIsFallThruEnabled(int32_t ValueIndex);
	void eventVerifyDefaultCaseValue();
};

// Class Engine.SeqCond_SwitchClass
// 0x000C (0x00E4 - 0x00F0)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	class TArray<struct FSwitchClassInfo>              ClassArray;                                    // 0x00E4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_SwitchClass");
		}

		return uClassPointer;
	};

	void eventRemoveValueEntry(int32_t RemoveIndex);
	void eventInsertValueEntry(int32_t InsertIndex);
	bool eventIsFallThruEnabled(int32_t ValueIndex);
	void eventVerifyDefaultCaseValue();
};

// Class Engine.SeqCond_SwitchObject
// 0x000C (0x00E4 - 0x00F0)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	class TArray<struct FSwitchObjectCase>             SupportedValues;                               // 0x00E4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_SwitchObject");
		}

		return uClassPointer;
	};

	void eventRemoveValueEntry(int32_t RemoveIndex);
	void eventInsertValueEntry(int32_t InsertIndex);
	bool eventIsFallThruEnabled(int32_t ValueIndex);
	void eventVerifyDefaultCaseValue();
};

// Class Engine.SeqCond_SwitchPlatform
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_SwitchPlatform : public USequenceCondition
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqCond_SwitchPlatform");
		}

		return uClassPointer;
	};

};

// Class Engine.SequenceEvent
// 0x0030 (0x00E4 - 0x0114)
class USequenceEvent : public USequenceOp
{
public:
	class TArray<class USequenceEvent*>                DuplicateEvts;                                 // 0x00E4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class AActor*                                      Originator;                                    // 0x00F0 (0x0004) [0x0000000000000000]               
	class AActor*                                      Instigator;                                    // 0x00F4 (0x0004) [0x0000000000000000]               
	float                                              ActivationTime;                                // 0x00F8 (0x0004) [0x0000000000000000]               
	int32_t                                            TriggerCount;                                  // 0x00FC (0x0004) [0x0000000000000000]               
	int32_t                                            MaxTriggerCount;                               // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ReTriggerDelay;                                // 0x0104 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bEnabled : 1;                                  // 0x0108 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bPlayerOnly : 1;                               // 0x0108 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRegistered : 1;                               // 0x0108 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bClientSideOnly : 1;                           // 0x0108 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint8_t                                            Priority;                                      // 0x010C (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxWidth;                                      // 0x0110 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SequenceEvent");
		}

		return uClassPointer;
	};

	void eventToggled();
	void Reset();
	bool CheckActivate(class AActor* InOriginator, class AActor* InInstigator, bool optionalBTest, bool optionalBPushTop, class TArray<int32_t>& outActivateIndices);
	void eventRegisterEvent();
};

// Class Engine.SeqEvent_AISeeEnemy
// 0x0004 (0x0114 - 0x0118)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                              // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_AISeeEnemy");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_AnalogInput
// 0x0014 (0x0114 - 0x0128)
class USeqEvent_AnalogInput : public USequenceEvent
{
public:
	uint32_t                                           bTrapInput : 1;                                // 0x0114 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            AllowedPlayerIndex;                            // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class FName>                          InputNames;                                    // 0x011C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_AnalogInput");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_AnimNotify
// 0x0008 (0x0114 - 0x011C)
class USeqEvent_AnimNotify : public USequenceEvent
{
public:
	class FName                                        NotifyName;                                    // 0x0114 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_AnimNotify");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_Console
// 0x0014 (0x0114 - 0x0128)
class USeqEvent_Console : public USequenceEvent
{
public:
	class FName                                        ConsoleEventName;                              // 0x0114 (0x0008) [0x0000000000000001] (CPF_Edit)    
	class FString                                      EventDesc;                                     // 0x011C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_Console");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_ConstraintBroken
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_ConstraintBroken");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_Destroyed
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_Destroyed");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_GetInventory
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_GetInventory : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_GetInventory");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_Input
// 0x0014 (0x0114 - 0x0128)
class USeqEvent_Input : public USequenceEvent
{
public:
	uint32_t                                           bTrapInput : 1;                                // 0x0114 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            AllowedPlayerIndex;                            // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class FName>                          InputNames;                                    // 0x011C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_Input");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_LevelBeginning
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_LevelBeginning");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_LevelLoaded
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_LevelLoaded");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqEvent_LevelStartup
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_LevelStartup");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_Mover
// 0x0004 (0x0114 - 0x0118)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                  // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_Mover");
		}

		return uClassPointer;
	};

	void NotifyFinishedOpen();
	void NotifyDetached(class AActor* Other);
	void NotifyAttached(class AActor* Other);
	void NotifyEncroachingOn(class AActor* Hit);
	void eventRegisterEvent();
};

// Class Engine.SeqEvent_ParticleEvent
// 0x0034 (0x0114 - 0x0148)
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	EParticleEventOutputType                           EventType;                                     // 0x0114 (0x0001) [0x0000000000000000]               
	struct FVector                                     EventPosition;                                 // 0x0118 (0x000C) [0x0000000000000000]               
	float                                              EventEmitterTime;                              // 0x0124 (0x0004) [0x0000000000000000]               
	struct FVector                                     EventVelocity;                                 // 0x0128 (0x000C) [0x0000000000000000]               
	float                                              EventParticleTime;                             // 0x0134 (0x0004) [0x0000000000000000]               
	struct FVector                                     EventNormal;                                   // 0x0138 (0x000C) [0x0000000000000000]               
	uint32_t                                           UseRelfectedImpactVector : 1;                  // 0x0144 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_ParticleEvent");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqEvent_ProjectileLanded
// 0x0004 (0x0114 - 0x0118)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                   // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_ProjectileLanded");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_RemoteEvent
// 0x000C (0x0114 - 0x0120)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	class FName                                        EventName;                                     // 0x0114 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x011C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_RemoteEvent");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqEvent_RigidBodyCollision
// 0x0004 (0x0114 - 0x0118)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                          // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_RigidBodyCollision");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_SeeDeath
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_SeeDeath");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_SequenceActivated
// 0x000C (0x0114 - 0x0120)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	class FString                                      InputLabel;                                    // 0x0114 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_SequenceActivated");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_TakeDamage
// 0x0028 (0x0114 - 0x013C)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                               // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DamageThreshold;                               // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UClass*>                        DamageTypes;                                   // 0x011C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UClass*>                        IgnoreDamageTypes;                             // 0x0128 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              CurrentDamage;                                 // 0x0134 (0x0004) [0x0000000000000000]               
	uint32_t                                           bResetDamageOnToggle : 1;                      // 0x0138 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_TakeDamage");
		}

		return uClassPointer;
	};

	void eventToggled();
	static int32_t eventGetObjClassVersion();
	void Reset();
	void HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int32_t inAmount);
	bool IsValidDamageType(class UClass* inDamageType);
};

// Class Engine.SeqEvent_Touch
// 0x0028 (0x0114 - 0x013C)
class USeqEvent_Touch : public USequenceEvent
{
public:
	class TArray<class UClass*>                        ClassProximityTypes;                           // 0x0114 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UClass*>                        IgnoredClassProximityTypes;                    // 0x0120 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bForceOverlapping : 1;                         // 0x012C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseInstigator : 1;                            // 0x012C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAllowDeadPawns : 1;                           // 0x012C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	class TArray<class AActor*>                        TouchedList;                                   // 0x0130 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_Touch");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
	void NotifyTouchingPawnDied(class APawn* P);
	void eventToggled();
	bool CheckUnTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool optionalBTest);
	bool CheckTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool optionalBTest);
};

// Class Engine.SeqEvent_TouchInput
// 0x0010 (0x0114 - 0x0124)
class USeqEvent_TouchInput : public USequenceEvent
{
public:
	uint32_t                                           bTrapInput : 1;                                // 0x0114 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            AllowedPlayerIndex;                            // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            AllowedTouchIndex;                             // 0x011C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            AllowedTouchpadIndex;                          // 0x0120 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_TouchInput");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_Used
// 0x0030 (0x0114 - 0x0144)
class USeqEvent_Used : public USequenceEvent
{
public:
	uint32_t                                           bAimToInteract : 1;                            // 0x0114 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              InteractDistance;                              // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      InteractText;                                  // 0x011C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class UTexture2D*                                  InteractIcon;                                  // 0x0128 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UClass*>                        ClassProximityTypes;                           // 0x012C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UClass*>                        IgnoredClassProximityTypes;                    // 0x0138 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_Used");
		}

		return uClassPointer;
	};

};

// Class Engine.SequenceVariable
// 0x0008 (0x0090 - 0x0098)
class USequenceVariable : public USequenceObject
{
public:
	class FName                                        VarName;                                       // 0x0090 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SequenceVariable");
		}

		return uClassPointer;
	};

};

// Class Engine.InterpData
// 0x0050 (0x0098 - 0x00E8)
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                  // 0x0098 (0x0004) [0x0000000000000000]               
	float                                              PathBuildTime;                                 // 0x009C (0x0004) [0x0000000000000000]               
	class TArray<class UInterpGroup*>                  InterpGroups;                                  // 0x00A0 (0x000C) [0x0000000000400008] (CPF_ExportObject | CPF_NeedCtorLink)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                  // 0x00AC (0x0004) [0x0000000000000008] (CPF_ExportObject)
	class TArray<class UInterpFilter*>                 InterpFilters;                                 // 0x00B0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class UInterpFilter*                               SelectedFilter;                                // 0x00BC (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<class UInterpFilter*>                 DefaultFilters;                                // 0x00C0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink | CPF_EditorOnly)
	float                                              EdSectionStart;                                // 0x00CC (0x0004) [0x0000000000000000]               
	float                                              EdSectionEnd;                                  // 0x00D0 (0x0004) [0x0000000000000000]               
	uint32_t                                           bShouldBakeAndPrune : 1;                       // 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<struct FAnimSetBakeAndPruneStatus>    BakeAndPruneStatus;                            // 0x00D8 (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)
	class UInterpGroupDirector*                        CachedDirectorGroup;                           // 0x00E4 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpData");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Bool
// 0x0004 (0x0098 - 0x009C)
class USeqVar_Bool : public USequenceVariable
{
public:
	int32_t                                            bValue;                                        // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Bool");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_External
// 0x0010 (0x0098 - 0x00A8)
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                  // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      VariableLabel;                                 // 0x009C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_External");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Float
// 0x0004 (0x0098 - 0x009C)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                    // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Float");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_RandomFloat
// 0x0008 (0x009C - 0x00A4)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                           // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Max;                                           // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_RandomFloat");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Int
// 0x0004 (0x0098 - 0x009C)
class USeqVar_Int : public USequenceVariable
{
public:
	int32_t                                            IntValue;                                      // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Int");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_RandomInt
// 0x0008 (0x009C - 0x00A4)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int32_t                                            Min;                                           // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            Max;                                           // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_RandomInt");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Named
// 0x0010 (0x0098 - 0x00A8)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                  // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        FindVarName;                                   // 0x009C (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bStatusIsOk : 1;                               // 0x00A4 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Named");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Object
// 0x001C (0x0098 - 0x00B4)
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                      // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ActorLocation;                                 // 0x009C (0x000C) [0x0000000000002000] (CPF_Transient)
	class TArray<class UClass*>                        SupportedClasses;                              // 0x00A8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Object");
		}

		return uClassPointer;
	};

	void SetObjectValue(class UObject* NewValue);
	class UObject* GetObjectValueW();
};

// Class Engine.SeqVar_Character
// 0x0004 (0x00B4 - 0x00B8)
class USeqVar_Character : public USeqVar_Object
{
public:
	class UClass*                                      PawnClass;                                     // 0x00B4 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Character");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Group
// 0x0018 (0x00B4 - 0x00CC)
class USeqVar_Group : public USeqVar_Object
{
public:
	class FName                                        GroupName;                                     // 0x00B4 (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bCachedList : 1;                               // 0x00BC (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	class TArray<class UObject*>                       Actors;                                        // 0x00C0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Group");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_ObjectList
// 0x000C (0x00B4 - 0x00C0)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	class TArray<class UObject*>                       ObjList;                                       // 0x00B4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_ObjectList");
		}

		return uClassPointer;
	};

	void SetObjectValue(class UObject* NewValue);
	class UObject* GetObjectValueW();
};

// Class Engine.SeqVar_ObjectVolume
// 0x0020 (0x00B4 - 0x00D4)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	float                                              LastUpdateTime;                                // 0x00B4 (0x0004) [0x0000000000000000]               
	class TArray<class UObject*>                       ContainedObjects;                              // 0x00B8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UClass*>                        ExcludeClassList;                              // 0x00C4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bCollidingOnly : 1;                            // 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_ObjectVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Player
// 0x0014 (0x00B4 - 0x00C8)
class USeqVar_Player : public USeqVar_Object
{
public:
	class TArray<class UObject*>                       Players;                                       // 0x00B4 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint32_t                                           bAllPlayers : 1;                               // 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            PlayerIdx;                                     // 0x00C4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Player");
		}

		return uClassPointer;
	};

	class UObject* GetObjectValueW();
	void UpdatePlayersList();
};

// Class Engine.SeqVar_String
// 0x000C (0x0098 - 0x00A4)
class USeqVar_String : public USequenceVariable
{
public:
	class FString                                      StrValue;                                      // 0x0098 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_String");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Vector
// 0x000C (0x0098 - 0x00A4)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                     // 0x0098 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Vector");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSound
// 0x0008 (0x01CC - 0x01D4)
class AAmbientSound : public AKeypoint
{
public:
	uint32_t                                           bAutoPlay : 1;                                 // 0x01CC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsPlaying : 1;                                // 0x01CC (0x0004) [0x0000000000000000] [0x00000002] 
	class UAudioComponent*                             AudioComponent;                                // 0x01D0 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSound");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSoundMovable
// 0x0000 (0x01D4 - 0x01D4)
class AAmbientSoundMovable : public AAmbientSound
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSoundSimple
// 0x000C (0x01D4 - 0x01E0)
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                             // 0x01D4 (0x0004) [0x0000000004020001] (CPF_Edit | CPF_EditConst | CPF_EditInline)
	class USoundCue*                                   SoundCueInstance;                              // 0x01D8 (0x0004) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class USoundNodeAmbient*                           SoundNodeInstance;                             // 0x01DC (0x0004) [0x000000000440000A] (CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundSimple");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSoundNonLoop
// 0x0000 (0x01E0 - 0x01E0)
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundNonLoop");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSoundSimpleToggleable
// 0x0014 (0x01E0 - 0x01F4)
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	uint32_t                                           bCurrentlyPlaying : 1;                         // 0x01E0 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bFadeOnToggle : 1;                             // 0x01E0 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bIgnoreAutoPlay : 1;                           // 0x01E0 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	float                                              FadeInDuration;                                // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeInVolumeLevel;                             // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeOutDuration;                               // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeOutVolumeLevel;                            // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundSimpleToggleable");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord& outRecord);
	void OnToggle(class USeqAct_Toggle* Action);
	void StopPlaying();
	void StartPlaying();
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
};

// Class Engine.AmbientSoundNonLoopingToggleable
// 0x0000 (0x01F4 - 0x01F4)
class AAmbientSoundNonLoopingToggleable : public AAmbientSoundSimpleToggleable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundNonLoopingToggleable");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSoundSpline
// 0x0014 (0x01D4 - 0x01E8)
class AAmbientSoundSpline : public AAmbientSound
{
public:
	float                                              DistanceBetweenPoints;                         // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class USplineComponent*                            SplineComponent;                               // 0x01D8 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline | CPF_EditorOnly)
	struct FVector                                     TestPoint;                                     // 0x01DC (0x000C) [0x0000000000000000] (CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundSpline");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSoundSimpleSpline
// 0x0004 (0x01E8 - 0x01EC)
class AAmbientSoundSimpleSpline : public AAmbientSoundSpline
{
public:
	int32_t                                            EditedSlot;                                    // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundSimpleSpline");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSoundSplineMultiCue
// 0x0004 (0x01E8 - 0x01EC)
class AAmbientSoundSplineMultiCue : public AAmbientSoundSpline
{
public:
	int32_t                                            EditedSlot;                                    // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundSplineMultiCue");
		}

		return uClassPointer;
	};

};

// Class Engine.DistributionFloatSoundParameter
// 0x0003 (0x006D - 0x0070)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DistributionFloatSoundParameter");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNode
// 0x0010 (0x003C - 0x004C)
class USoundNode : public UObject
{
public:
	int32_t                                            NodeUpdateHint;                                // 0x003C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<class USoundNode*>                    ChildNodes;                                    // 0x0040 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNode");
		}

		return uClassPointer;
	};

};

// Class Engine.ForcedLoopSoundNode
// 0x0000 (0x004C - 0x004C)
class UForcedLoopSoundNode : public USoundNode
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ForcedLoopSoundNode");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeAmbient
// 0x0038 (0x004C - 0x0084)
class USoundNodeAmbient : public USoundNode
{
public:
	uint32_t                                           bAttenuate : 1;                                // 0x004C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSpatialize : 1;                               // 0x004C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAttenuateWithLPF : 1;                         // 0x004C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              dBAttenuationAtMax;                            // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ESoundDistanceModel                                DistanceModel;                                 // 0x0054 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusMin;                                     // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusMax;                                     // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFRadiusMin;                                  // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFRadiusMax;                                  // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMin;                                      // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMax;                                      // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VolumeMin;                                     // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VolumeMax;                                     // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FAmbientSoundSlot>             SoundSlots;                                    // 0x0078 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeAmbient");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeAmbientNonLoop
// 0x0024 (0x0084 - 0x00A8)
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	float                                              DelayMin;                                      // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DelayMax;                                      // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       DelayTime;                                     // 0x008C (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoop");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeAmbientNonLoopToggle
// 0x0000 (0x00A8 - 0x00A8)
class USoundNodeAmbientNonLoopToggle : public USoundNodeAmbientNonLoop
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoopToggle");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeAttenuation
// 0x0020 (0x004C - 0x006C)
class USoundNodeAttenuation : public USoundNode
{
public:
	uint32_t                                           bAttenuate : 1;                                // 0x004C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSpatialize : 1;                               // 0x004C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAttenuateWithLPF : 1;                         // 0x004C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              dBAttenuationAtMax;                            // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OmniRadius;                                    // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ESoundDistanceModel                                DistanceAlgorithm;                             // 0x0058 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESoundDistanceCalc                                 DistanceType;                                  // 0x0059 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusMin;                                     // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusMax;                                     // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFRadiusMin;                                  // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFRadiusMax;                                  // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeAttenuationAndGain
// 0x0030 (0x004C - 0x007C)
class USoundNodeAttenuationAndGain : public USoundNode
{
public:
	uint32_t                                           bAttenuate : 1;                                // 0x004C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bSpatialize : 1;                               // 0x004C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bAttenuateWithLPF : 1;                         // 0x004C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              dBAttenuationAtMax;                            // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OmniRadius;                                    // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ESoundDistanceModel                                GainDistanceAlgorithm;                         // 0x0058 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESoundDistanceModel                                AttenuateDistanceAlgorithm;                    // 0x0059 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ESoundDistanceCalc                                 DistanceType;                                  // 0x005A (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              MinimalVolume;                                 // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusMin;                                     // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusPeak;                                    // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RadiusMax;                                     // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFMinimal;                                    // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFRadiusMin;                                  // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFRadiusPeak;                                 // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LPFRadiusMax;                                  // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeAttenuationAndGain");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeConcatenator
// 0x000C (0x004C - 0x0058)
class USoundNodeConcatenator : public USoundNode
{
public:
	class TArray<float>                                InputVolume;                                   // 0x004C (0x000C) [0x0000000000400049] (CPF_Edit | CPF_ExportObject | CPF_EditFixedSize | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeConcatenatorRadio
// 0x0000 (0x004C - 0x004C)
class USoundNodeConcatenatorRadio : public USoundNode
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeConcatenatorRadio");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeDelay
// 0x0024 (0x004C - 0x0070)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                      // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DelayMax;                                      // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       DelayDuration;                                 // 0x0054 (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeDelay");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeDistanceCrossFade
// 0x000C (0x004C - 0x0058)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	class TArray<struct FDistanceDatum>                CrossFadeInput;                                // 0x004C (0x000C) [0x0000000000480049] (CPF_Edit | CPF_ExportObject | CPF_EditFixedSize | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeDoppler
// 0x0004 (0x004C - 0x0050)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                              // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeDoppler");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeEnveloper
// 0x001C (0x004C - 0x0068)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                     // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LoopEnd;                                       // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DurationAfterLoop;                             // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LoopCount;                                     // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLoopIndefinitely : 1;                         // 0x005C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLoop : 1;                                     // 0x005C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                             // 0x0060 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                              // 0x0064 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeEnveloper");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeLooping
// 0x0028 (0x004C - 0x0074)
class USoundNodeLooping : public USoundNode
{
public:
	uint32_t                                           bLoopIndefinitely : 1;                         // 0x004C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              LoopCountMin;                                  // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LoopCountMax;                                  // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       LoopCount;                                     // 0x0058 (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeLooping");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeMature
// 0x0000 (0x004C - 0x004C)
class USoundNodeMature : public USoundNode
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeMature");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeMixer
// 0x000C (0x004C - 0x0058)
class USoundNodeMixer : public USoundNode
{
public:
	class TArray<float>                                InputVolume;                                   // 0x004C (0x000C) [0x0000000000400049] (CPF_Edit | CPF_ExportObject | CPF_EditFixedSize | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeMixer");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeModulator
// 0x0048 (0x004C - 0x0094)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                      // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              PitchMax;                                      // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VolumeMin;                                     // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VolumeMax;                                     // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       PitchModulation;                               // 0x005C (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)
	struct FRawDistributionFloat                       VolumeModulation;                              // 0x0078 (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeModulator");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeModulatorContinuous
// 0x0038 (0x004C - 0x0084)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       PitchModulation;                               // 0x004C (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FRawDistributionFloat                       VolumeModulation;                              // 0x0068 (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeOscillator
// 0x0094 (0x004C - 0x00E0)
class USoundNodeOscillator : public USoundNode
{
public:
	uint32_t                                           bModulateVolume : 1;                           // 0x004C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bModulatePitch : 1;                            // 0x004C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              AmplitudeMin;                                  // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AmplitudeMax;                                  // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrequencyMin;                                  // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrequencyMax;                                  // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OffsetMin;                                     // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OffsetMax;                                     // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CenterMin;                                     // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CenterMax;                                     // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       Amplitude;                                     // 0x0070 (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)
	struct FRawDistributionFloat                       Frequency;                                     // 0x008C (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)
	struct FRawDistributionFloat                       offset;                                        // 0x00A8 (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)
	struct FRawDistributionFloat                       Center;                                        // 0x00C4 (0x001C) [0x0000000020480000] (CPF_Component | CPF_NeedCtorLink | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeOscillator");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeRandom
// 0x0024 (0x004C - 0x0070)
class USoundNodeRandom : public USoundNode
{
public:
	class TArray<float>                                Weights;                                       // 0x004C (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)
	int32_t                                            PreselectAtLevelLoad;                          // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRandomizeWithoutReplacement : 1;              // 0x005C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<uint32_t>                             HasBeenUsed;                                   // 0x0060 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            NumRandomUsed;                                 // 0x006C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeRandom");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundNodeWave
// 0x023C (0x004C - 0x0288)
class USoundNodeWave : public USoundNode
{
public:
	int32_t                                            CompressionQuality;                            // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bForceRealTimeDecompression : 1;               // 0x0050 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLoopingSound : 1;                             // 0x0050 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bDynamicResource : 1;                          // 0x0050 (0x0004) [0x0000000000002002] [0x00000004] (CPF_Const | CPF_Transient)
	uint32_t                                           bUseTTS : 1;                                   // 0x0050 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bProcedural : 1;                               // 0x0050 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bMature : 1;                                   // 0x0050 (0x0004) [0x0000000000008003] [0x00000020] (CPF_Edit | CPF_Const | CPF_Localized)
	uint32_t                                           bManualWordWrap : 1;                           // 0x0050 (0x0004) [0x0000000000008003] [0x00000040] (CPF_Edit | CPF_Const | CPF_Localized)
	uint32_t                                           bSingleLine : 1;                               // 0x0050 (0x0004) [0x0000000000008003] [0x00000080] (CPF_Edit | CPF_Const | CPF_Localized)
	ETTSSpeaker                                        TTSSpeaker;                                    // 0x0054 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EDecompressionType                                 DecompressionType;                             // 0x0055 (0x0001) [0x0000000000002002] (CPF_Const | CPF_Transient)
	EDetailMode                                        MobileDetailMode;                              // 0x0056 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class FString                                      SpokenText;                                    // 0x0058 (0x000C) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	float                                              Volume;                                        // 0x0064 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	float                                              Pitch;                                         // 0x0068 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	float                                              Duration;                                      // 0x006C (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	int32_t                                            NumChannels;                                   // 0x0070 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	int32_t                                            SampleRate;                                    // 0x0074 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	class TArray<int32_t>                              ChannelOffsets;                                // 0x0078 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<int32_t>                              ChannelSizes;                                  // 0x0084 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink | CPF_EditorOnly)
	struct FUntypedBulkData_Mirror                     RawData;                                       // 0x0090 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    VorbisDecompressor;                            // 0x00C4 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    RawPCMData;                                    // 0x00C8 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            RawPCMDataSize;                                // 0x00CC (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FUntypedBulkData_Mirror                     CompressedPCData;                              // 0x00D0 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                         // 0x0104 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                             // 0x0138 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FUntypedBulkData_Mirror                     CompressedWiiUData;                            // 0x016C (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FUntypedBulkData_Mirror                     CompressedIPhoneData;                          // 0x01A0 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FUntypedBulkData_Mirror                     CompressedFlashData;                           // 0x01D4 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FUntypedBulkData_Mirror                     CompressedOrbisData;                           // 0x0208 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            ResourceID;                                    // 0x023C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            ResourceSize;                                  // 0x0240 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FPointer                                    ResourceData;                                  // 0x0244 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FSubtitleCue>                  Subtitles;                                     // 0x0248 (0x000C) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Comment;                                       // 0x0254 (0x000C) [0x0000000000408003] (CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FLocalizedSubtitle>            LocalizedSubtitles;                            // 0x0260 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      SourceFilePath;                                // 0x026C (0x000C) [0x0000000000420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)
	class FString                                      SourceFileTimestamp;                           // 0x0278 (0x000C) [0x0000000000420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            LoopStartSamplePosition;                       // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeWave");
		}

		return uClassPointer;
	};

	void eventGeneratePCMData(int32_t SamplesNeeded, class TArray<uint8_t>& outBuffer);
};

// Class Engine.SoundNodeWaveStreaming
// 0x0010 (0x0288 - 0x0298)
class USoundNodeWaveStreaming : public USoundNodeWave
{
public:
	class TArray<uint8_t>                              QueuedAudio;                                   // 0x0288 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              InactiveDuration;                              // 0x0294 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeWaveStreaming");
		}

		return uClassPointer;
	};

	void eventGeneratePCMData(int32_t SamplesNeeded, class TArray<uint8_t>& outBuffer);
	int32_t eventAvailableAudioBytes();
	void eventResetAudio();
	void eventQueueSilence(float Seconds);
	void eventQueueAudio(const class TArray<uint8_t>& Data);
};

// Class Engine.SoundNodeWaveParam
// 0x0008 (0x004C - 0x0054)
class USoundNodeWaveParam : public USoundNode
{
public:
	class FName                                        WaveParameterName;                             // 0x004C (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		}

		return uClassPointer;
	};

};

// Class Engine.LandscapeProxy
// 0x00F4 (0x01C8 - 0x02BC)
class ALandscapeProxy : public AInfo
{
public:
	struct FGuid                                       LandscapeGuid;                                 // 0x01C8 (0x0010) [0x0000000000000002] (CPF_Const)   
	int32_t                                            MaxLODLevel;                                   // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           DefaultPhysMaterial;                           // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StreamingDistanceMultiplier;                   // 0x01E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UMaterialInterface*                          LandscapeMaterial;                             // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LODDistanceFactor;                             // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class ULandscapeComponent*>           LandscapeComponents;                           // 0x01EC (0x000C) [0x000000000448000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class ULandscapeHeightfieldCollisionComponent*> CollisionComponents;                           // 0x01F8 (0x000C) [0x000000000448000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	uint8_t                                            UnknownData00[0x78];                            // 0x0204 (0x0078) MISSED OFFSET
	float                                              StaticLightingResolution;                      // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class ALandscape*                                  LandscapeActor;                                // 0x0280 (0x0004) [0x0000000000002001] (CPF_Edit | CPF_Transient)
	uint32_t                                           bIsProxy : 1;                                  // 0x0284 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bIsSetup : 1;                                  // 0x0284 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bResetup : 1;                                  // 0x0284 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bIsMovingToLevel : 1;                          // 0x0284 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient | CPF_EditorOnly)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                             // 0x0288 (0x001C) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FLandscapeLayerStruct>         LayerInfoObjs;                                 // 0x02A4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ComponentSizeQuads;                            // 0x02B0 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SubsectionSizeQuads;                           // 0x02B4 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            NumSubsections;                                // 0x02B8 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeProxy");
		}

		return uClassPointer;
	};

};

// Class Engine.Landscape
// 0x0018 (0x02BC - 0x02D4)
class ALandscape : public ALandscapeProxy
{
public:
	class TArray<class FName>                          LayerNames;                                    // 0x02BC (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated)
	class TArray<struct FLandscapeLayerInfo>           LayerInfos;                                    // 0x02C8 (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Landscape");
		}

		return uClassPointer;
	};

};

// Class Engine.Terrain
// 0x0100 (0x01C8 - 0x02C8)
class ATerrain : public AInfo
{
public:
	uint8_t                                            UnknownData00[0x18];                            // 0x01C8 (0x0018) MISSED OFFSET
	class TArray<struct FTerrainLayer>                 Layers;                                        // 0x01E0 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            NormalMapLayer;                                // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FTerrainDecoLayer>             DecoLayers;                                    // 0x01F0 (0x000C) [0x0000000000480003] (CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink)
	uint8_t                                            UnknownData01[0xC];                              // 0x01FC (0x000C) MISSED OFFSET
	class TArray<class UTerrainComponent*>             TerrainComponents;                             // 0x0208 (0x000C) [0x000000000448000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline | CPF_NonTransactional)
	int32_t                                            NumSectionsX;                                  // 0x0214 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            NumSectionsY;                                  // 0x0218 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint8_t                                            UnknownData02[0xC];                              // 0x021C (0x000C) MISSED OFFSET
	class TArray<class UTerrainWeightMapTexture*>      WeightedTextureMaps;                           // 0x0228 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            MaxTesselationLevel;                           // 0x0234 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MinTessellationLevel;                          // 0x0238 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TesselationDistanceScale;                      // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TessellationCheckDistance;                     // 0x0240 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CollisionTesselationLevel;                     // 0x0244 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[2];                     // 0x0248 (0x0018) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            NumVerticesX;                                  // 0x0260 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            NumVerticesY;                                  // 0x0264 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            NumPatchesX;                                   // 0x0268 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NumPatchesY;                                   // 0x026C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxComponentSize;                              // 0x0270 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            StaticLightingResolution;                      // 0x0274 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bIsOverridingLightResolution : 1;              // 0x0278 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bBilinearFilterLightmapGeneration : 1;         // 0x0278 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bCastShadow : 1;                               // 0x0278 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bForceDirectLightMap : 1;                      // 0x0278 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bCastDynamicShadow : 1;                        // 0x0278 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableSpecular : 1;                           // 0x0278 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bBlockRigidBody : 1;                           // 0x0278 (0x0004) [0x0000000000000003] [0x00000040] (CPF_Edit | CPF_Const)
	uint32_t                                           bAllowRigidBodyUnderneath : 1;                 // 0x0278 (0x0004) [0x0000000000000003] [0x00000080] (CPF_Edit | CPF_Const)
	uint32_t                                           bAcceptsDynamicLights : 1;                     // 0x0278 (0x0004) [0x0000000000000003] [0x00000100] (CPF_Edit | CPF_Const)
	uint32_t                                           bMorphingEnabled : 1;                          // 0x0278 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bMorphingGradientsEnabled : 1;                 // 0x0278 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bLocked : 1;                                   // 0x0278 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bHeightmapLocked : 1;                          // 0x0278 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bShowingCollision : 1;                         // 0x0278 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bUseWorldOriginTextureUVs : 1;                 // 0x0278 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bShowWireframe : 1;                            // 0x0278 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	class UPhysicalMaterial*                           TerrainPhysMaterialOverride;                   // 0x027C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLightingChannelContainer                   LightingChannels;                              // 0x0280 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                             // 0x0284 (0x001C) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    ReleaseResourcesFence;                         // 0x02A0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            EditorTessellationLevel;                       // 0x02A4 (0x0004) [0x0000000000002001] (CPF_Edit | CPF_Transient)
	class TArray<struct FSelectedTerrainVertex>        SelectedVertices;                              // 0x02A8 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FColor                                      WireframeColor;                                // 0x02B4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FGuid                                       LightingGuid;                                  // 0x02B8 (0x0010) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Terrain");
		}

		return uClassPointer;
	};

	void eventPostBeginPlay();
	void CalcLayerBounds();
};

// Class Engine.LandscapeGizmoActor
// 0x001C (0x01C8 - 0x01E4)
class ALandscapeGizmoActor : public AActor
{
public:
	float                                              Width;                                         // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	float                                              Height;                                        // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	float                                              LengthZ;                                       // 0x01D0 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	float                                              MarginZ;                                       // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	float                                              MinRelativeZ;                                  // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	float                                              RelativeScaleZ;                                // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class ULandscapeInfo*                              TargetLandscapeInfo;                           // 0x01E0 (0x0004) [0x0000000000022001] (CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeGizmoActor");
		}

		return uClassPointer;
	};

};

// Class Engine.LandscapeGizmoActiveActor
// 0x00F4 (0x01E4 - 0x02D8)
class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
{
public:
	ELandscapeGizmoType                                DataType;                                      // 0x01E4 (0x0001) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	uint8_t                                            UnknownData00[0x3F];                            // 0x01E5 (0x003F) MISSED OFFSET
	class UTexture2D*                                  GizmoTexture;                                  // 0x0224 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	struct FVector2D                                   TextureScale;                                  // 0x0228 (0x0008) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<struct FVector>                       SampledHeight;                                 // 0x0230 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FVector>                       SampledNormal;                                 // 0x023C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            SampleSizeX;                                   // 0x0248 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            SampleSizeY;                                   // 0x024C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	float                                              CachedWidth;                                   // 0x0250 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	float                                              CachedHeight;                                  // 0x0254 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	float                                              CachedScaleXY;                                 // 0x0258 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	struct FVector                                     FrustumVerts[8];                               // 0x025C (0x0060) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	class UMaterial*                                   GizmoMaterial;                                 // 0x02BC (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class UMaterialInstance*                           GizmoDataMaterial;                             // 0x02C0 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class UMaterial*                                   GizmoMeshMaterial;                             // 0x02C4 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class UMaterial*                                   GizmoMeshMaterial2;                            // 0x02C8 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<class FName>                          LayerNames;                                    // 0x02CC (0x000C) [0x0000000000420001] (CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeGizmoActiveActor");
		}

		return uClassPointer;
	};

};

// Class Engine.LandscapeComponent
// 0x00FC (0x01D8 - 0x02D4)
class ULandscapeComponent : public UPrimitiveComponent
{
public:
	int32_t                                            SectionBaseX;                                  // 0x01D8 (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	int32_t                                            SectionBaseY;                                  // 0x01DC (0x0004) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	int32_t                                            ComponentSizeQuads;                            // 0x01E0 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SubsectionSizeQuads;                           // 0x01E4 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            NumSubsections;                                // 0x01E8 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UMaterialInterface*                          OverrideMaterial;                              // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInstanceConstant*                   MaterialInstance;                              // 0x01F0 (0x0004) [0x0000000000000000]               
	class TArray<struct FWeightmapLayerAllocationInfo> WeightmapLayerAllocations;                     // 0x01F4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class UTexture2D*>                    WeightmapTextures;                             // 0x0200 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x4];                              // 0x020C (0x0004) MISSED OFFSET
	struct FVector4                                    WeightmapScaleBias;                            // 0x0210 (0x0010) [0x0000000000000000]               
	float                                              WeightmapSubsectionOffset;                     // 0x0220 (0x0004) [0x0000000000000000]               
	uint8_t                                            UnknownData01[0xC];                              // 0x0224 (0x000C) MISSED OFFSET
	struct FVector4                                    HeightmapScaleBias;                            // 0x0230 (0x0010) [0x0000000000000000]               
	class UTexture2D*                                  HeightmapTexture;                              // 0x0240 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                         // 0x0244 (0x001C) [0x0000000000000002] (CPF_Const)   
	struct FBox                                        CachedLocalBox;                                // 0x0260 (0x001C) [0x0000000000000002] (CPF_Const)   
	struct FGuid                                       LightingGuid;                                  // 0x027C (0x0010) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)
	class TArray<class UShadowMap2D*>                  ShadowMaps;                                    // 0x028C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FGuid>                         IrrelevantLights;                              // 0x0298 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FLightMapRef                                LightMap;                                      // 0x02A4 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    EditToolRenderData;                            // 0x02A8 (0x0004) [0x0000000000001000] (CPF_Native)  
	int32_t                                            CollisionMipLevel;                             // 0x02AC (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FPointer                                    PlatformData;                                  // 0x02B0 (0x0004) [0x0000000000001000] (CPF_Native)  
	int32_t                                            PlatformDataSize;                              // 0x02B4 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint32_t                                           bNeedPostUndo : 1;                             // 0x02B8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient | CPF_EditorOnly)
	int32_t                                            ForcedLOD;                                     // 0x02BC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint8_t                                            NeighborLOD[8];                                // 0x02C0 (0x0008) [0x0000000000000000]               
	uint8_t                                            NeighborLODBias[8];                            // 0x02C8 (0x0008) [0x0000000000000000]               
	int32_t                                            LODBias;                                       // 0x02D0 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.LandscapeGizmoRenderComponent
// 0x0000 (0x01D8 - 0x01D8)
class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeGizmoRenderComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.LandscapeHeightfieldCollisionComponent
// 0x00C0 (0x01D8 - 0x0298)
class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
{
public:
	struct FUntypedBulkData_Mirror                     CollisionHeightData;                           // 0x01D8 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<class FName>                          ComponentLayers;                               // 0x020C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FUntypedBulkData_Mirror                     DominantLayerData;                             // 0x0218 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            SectionBaseX;                                  // 0x024C (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SectionBaseY;                                  // 0x0250 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            CollisionSizeQuads;                            // 0x0254 (0x0004) [0x0000000000000000]               
	float                                              CollisionScale;                                // 0x0258 (0x0004) [0x0000000000000000]               
	class TArray<uint8_t>                              CollisionQuadFlags;                            // 0x025C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class UPhysicalMaterial*>             PhysicalMaterials;                             // 0x0268 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FPointer                                    RBHeightfield;                                 // 0x0274 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                         // 0x0278 (0x001C) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bIncludeHoles : 1;                             // 0x0294 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bHeightFieldDataHasHole : 1;                   // 0x0294 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeHeightfieldCollisionComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.TerrainComponent
// 0x0074 (0x01D8 - 0x024C)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	class TArray<class UShadowMap2D*>                  ShadowMaps;                                    // 0x01D8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FGuid>                         IrrelevantLights;                              // 0x01E4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FPointer                                    TerrainObject;                                 // 0x01F0 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            SectionBaseX;                                  // 0x01F4 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SectionBaseY;                                  // 0x01F8 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SectionSizeX;                                  // 0x01FC (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SectionSizeY;                                  // 0x0200 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            TrueSectionSizeX;                              // 0x0204 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            TrueSectionSizeY;                              // 0x0208 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FLightMapRef                                LightMap;                                      // 0x020C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FTerrainPatchBounds>           PatchBounds;                                   // 0x0210 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FTerrainMaterialMask>          BatchMaterials;                                // 0x021C (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            FullBatch;                                     // 0x0228 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FTerrainBVTree                              BVTree;                                        // 0x022C (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FVector>                       CollisionVertices;                             // 0x0238 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FPointer                                    RBHeightfield;                                 // 0x0244 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint32_t                                           bDisplayCollisionLevel : 1;                    // 0x0248 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TerrainComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.LandscapeInfo
// 0x0244 (0x003C - 0x0280)
class ULandscapeInfo : public UObject
{
public:
	struct FGuid                                       LandscapeGuid;                                 // 0x003C (0x0010) [0x0000000000000002] (CPF_Const)   
	uint8_t                                            UnknownData00[0x3C];                            // 0x004C (0x003C) MISSED OFFSET
	struct FPointer                                    DataInterface;                                 // 0x0088 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint8_t                                            UnknownData01[0x78];                            // 0x008C (0x0078) MISSED OFFSET
	class ALandscapeProxy*                             LandscapeProxy;                                // 0x0104 (0x0004) [0x0000000000000002] (CPF_Const)   
	uint8_t                                            UnknownData02[0x3C];                            // 0x0108 (0x003C) MISSED OFFSET
	struct FSet_Mirror                                 Proxies;                                       // 0x0144 (0x003C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FSet_Mirror                                 SelectedComponents;                            // 0x0180 (0x003C) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FSet_Mirror                                 SelectedCollisionComponents;                   // 0x01BC (0x003C) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FSet_Mirror                                 SelectedRegionComponents;                      // 0x01F8 (0x003C) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint8_t                                            UnknownData03[0x3C];                            // 0x0234 (0x003C) MISSED OFFSET
	class FString                                      HeightmapFilePath;                             // 0x0270 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	uint32_t                                           bIsValid : 1;                                  // 0x027C (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.LandscapeLayerInfoObject
// 0x0014 (0x003C - 0x0050)
class ULandscapeLayerInfoObject : public UObject
{
public:
	class FName                                        LayerName;                                     // 0x003C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class UPhysicalMaterial*                           PhysMaterial;                                  // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Hardness;                                      // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoWeightBlend : 1;                            // 0x004C (0x0004) [0x0000000000000000] [0x00000001] (CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LandscapeLayerInfoObject");
		}

		return uClassPointer;
	};

};

// Class Engine.TerrainWeightMapTexture
// 0x0010 (0x01C8 - 0x01D8)
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	class ATerrain*                                    ParentTerrain;                                 // 0x01C8 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<struct FPointer>                      WeightedMaterials;                             // 0x01CC (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TerrainWeightMapTexture");
		}

		return uClassPointer;
	};

};

// Class Engine.TerrainLayerSetup
// 0x000C (0x003C - 0x0048)
class UTerrainLayerSetup : public UObject
{
public:
	class TArray<struct FTerrainFilteredMaterial>      Materials;                                     // 0x003C (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TerrainLayerSetup");
		}

		return uClassPointer;
	};

	void PostBeginPlay();
};

// Class Engine.TerrainMaterial
// 0x0064 (0x003C - 0x00A0)
class UTerrainMaterial : public UObject
{
public:
	uint8_t                                            UnknownData00[0x4];                              // 0x003C (0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToMapping;                                // 0x0040 (0x0040) [0x0000000000000000]               
	ETerrainMappingType                                MappingType;                                   // 0x0080 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              MappingScale;                                  // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MappingRotation;                               // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MappingPanU;                                   // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MappingPanV;                                   // 0x0090 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          Material;                                      // 0x0094 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  DisplacementMap;                               // 0x0098 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DisplacementScale;                             // 0x009C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TerrainMaterial");
		}

		return uClassPointer;
	};

};

// Class Engine.DataStoreClient
// 0x003C (0x0048 - 0x0084)
class UDataStoreClient : public UUIRoot
{
public:
	class TArray<class FString>                        GlobalDataStoreClasses;                        // 0x0048 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<class UUIDataStore*>                  GlobalDataStores;                              // 0x0054 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class FString>                        PlayerDataStoreClassNames;                     // 0x0060 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<class UClass*>                        PlayerDataStoreClasses;                        // 0x006C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FPlayerDataStoreGroup>         PlayerDataStores;                              // 0x0078 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DataStoreClient");
		}

		return uClassPointer;
	};

	void DebugDumpDataStoreInfo(bool bVerbose);
	void eventNotifyGameSessionEnded();
	class UClass* FindDataStoreClass(class UClass* RequiredMetaClass);
	void GetPlayerDataStoreClasses(class TArray<class UClass*>& outOut_DataStoreClasses);
	int32_t FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner);
	bool UnregisterDataStore(class UUIDataStore* DataStore);
	bool RegisterDataStore(class UUIDataStore* DataStore, class ULocalPlayer* optionalPlayerOwner);
	class UUIDataStore* CreateDataStore(class UClass* DataStoreClass);
	class UUIDataStore* FindDataStore(const class FName& DataStoreTag, class ULocalPlayer* optionalPlayerOwner);
};

// Class Engine.Console
// 0x0158 (0x0078 - 0x01D0)
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                           // 0x0078 (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  DefaultTexture_Black;                          // 0x007C (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  DefaultTexture_White;                          // 0x0080 (0x0004) [0x0000000000000000]               
	class FName                                        ConsoleKey;                                    // 0x0084 (0x0008) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class FName                                        TypeKey;                                       // 0x008C (0x0008) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            MaxScrollbackSize;                             // 0x0094 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class TArray<class FString>                        Scrollback;                                    // 0x0098 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            SBHead;                                        // 0x00A4 (0x0004) [0x0000000000000000]               
	int32_t                                            SBPos;                                         // 0x00A8 (0x0004) [0x0000000000000000]               
	int32_t                                            HistoryTop;                                    // 0x00AC (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            HistoryBot;                                    // 0x00B0 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            HistoryCur;                                    // 0x00B4 (0x0004) [0x0000000000004000] (CPF_Config)  
	class FString                                      History[16];                                   // 0x00B8 (0x00C0) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	uint32_t                                           bNavigatingHistory : 1;                        // 0x0178 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bCaptureKeyInput : 1;                          // 0x0178 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bCtrl : 1;                                     // 0x0178 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bEnableUI : 1;                                 // 0x0178 (0x0004) [0x0000000000004000] [0x00000008] (CPF_Config)
	uint32_t                                           bAutoCompleteLocked : 1;                       // 0x0178 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bRequireCtrlToNavigateAutoComplete : 1;        // 0x0178 (0x0004) [0x0000000000004000] [0x00000020] (CPF_Config)
	uint32_t                                           bIsRuntimeAutoCompleteUpToDate : 1;            // 0x0178 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bActiveConsole : 1;                            // 0x0178 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	class FString                                      TypedStr;                                      // 0x017C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            TypedStrPos;                                   // 0x0188 (0x0004) [0x0000000000000000]               
	class TArray<struct FAutoCompleteCommand>          ManualAutoCompleteList;                        // 0x018C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<struct FAutoCompleteCommand>          AutoCompleteList;                              // 0x0198 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            AutoCompleteIndex;                             // 0x01A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FAutoCompleteNode                           AutoCompleteTree;                              // 0x01A8 (0x001C) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class TArray<int32_t>                              AutoCompleteIndices;                           // 0x01C4 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Console");
		}

		return uClassPointer;
	};

	void UpdateCompleteIndices();
	void BuildRuntimeAutoCompleteList(bool optionalBForce);
	void AppendInputText(const class FString& Text);
	bool ProcessControlKey(const class FName& Key, EInputEvent Event);
	void FlushPlayerInput();
	bool InputChar(int32_t ControllerId, const class FString& Unicode);
	bool InputKey(int32_t ControllerId, const class FName& Key, EInputEvent Event, float optionalAmountDepressed, bool optionalBGamepad);
	void PostRender_Console(class UCanvas* Canvas);
	void StartTyping(const class FString& Text);
	void eventOutputText(const class FString& Text);
	void OutputTextLine(const class FString& Text);
	void ClearOutput();
	void ConsoleCommand(const class FString& Command);
	void PurgeCommandFromHistory(const class FString& Command);
	void SetCursorPos(int32_t Position);
	void SetInputText(const class FString& Text);
	void Initialized();
};

// Class Engine.Input
// 0x00A0 (0x0078 - 0x0118)
class UInput : public UInteraction
{
public:
	class TArray<struct FKeyBind>                      Bindings;                                      // 0x0078 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<class FName>                          PressedKeys;                                   // 0x0084 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_ProtectedWrite)
	int32_t                                            CurrentControllerId;                           // 0x0090 (0x0004) [0x0000000000000002] (CPF_Const)   
	EInputEvent                                        CurrentEvent;                                  // 0x0094 (0x0001) [0x0000000000000002] (CPF_Const)   
	float                                              CurrentDelta;                                  // 0x0098 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              CurrentDeltaTime;                              // 0x009C (0x0004) [0x0000000000000002] (CPF_Const)   
	uint8_t                                            UnknownData00[0x3C];                            // 0x00A0 (0x003C) MISSED OFFSET
	class TArray<struct FPointer>                      AxisArray;                                     // 0x00DC (0x000C) [0x0000000000101002] (CPF_Const | CPF_Native)
	class TArray<class USeqEvent_Input*>               CachedInputEvents;                             // 0x00E8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class USeqEvent_AnalogInput*>         CachedAnalogInputEvents;                       // 0x00F4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class USeqEvent_TouchInput*>          CachedTouchInputEvents;                        // 0x0100 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FTouchTracker>                 CurrentTouches;                                // 0x010C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Input");
		}

		return uClassPointer;
	};

	void SetBind(const class FString& Command, class FName& outBindName);
	class FString GetBind(class FName& outKey);
	void ResetInput();
};

// Class Engine.PlayerInput
// 0x0148 (0x0118 - 0x0260)
class UPlayerInput : public UInput
{
public:
	uint32_t                                           bUsingGamepad : 1;                             // 0x0118 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bInvertMouse : 1;                              // 0x0118 (0x0004) [0x0000000000044000] [0x00000002] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bInvertTurn : 1;                               // 0x0118 (0x0004) [0x0000000000044000] [0x00000004] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bWasForward : 1;                               // 0x0118 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bWasBack : 1;                                  // 0x0118 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bWasLeft : 1;                                  // 0x0118 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bWasRight : 1;                                 // 0x0118 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bEdgeForward : 1;                              // 0x0118 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bEdgeBack : 1;                                 // 0x0118 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bEdgeLeft : 1;                                 // 0x0118 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bEdgeRight : 1;                                // 0x0118 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bEnableMouseSmoothing : 1;                     // 0x0118 (0x0004) [0x0000000000044000] [0x00000800] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bEnableFOVScaling : 1;                         // 0x0118 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bLockTurnUntilRelease : 1;                     // 0x0118 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	class FName                                        LastAxisKeyName;                               // 0x011C (0x0008) [0x0000000000000002] (CPF_Const)   
	float                                              DoubleClickTimer;                              // 0x0124 (0x0004) [0x0000000000000000]               
	float                                              DoubleClickTime;                               // 0x0128 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              MouseSensitivity;                              // 0x012C (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	float                                              aBaseX;                                        // 0x0130 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aBaseY;                                        // 0x0134 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aBaseZ;                                        // 0x0138 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aMouseX;                                       // 0x013C (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aMouseY;                                       // 0x0140 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aForward;                                      // 0x0144 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aTurn;                                         // 0x0148 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aStrafe;                                       // 0x014C (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aUp;                                           // 0x0150 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aLookUp;                                       // 0x0154 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aRightAnalogTrigger;                           // 0x0158 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aLeftAnalogTrigger;                            // 0x015C (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aPS3AccelX;                                    // 0x0160 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aPS3AccelY;                                    // 0x0164 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aPS3AccelZ;                                    // 0x0168 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aPS3Gyro;                                      // 0x016C (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aWiiUPointerX;                                 // 0x0170 (0x0004) [0x0000000000000004] (CPF_Input)   
	float                                              aWiiUPointerY;                                 // 0x0174 (0x0004) [0x0000000000000004] (CPF_Input)   
	struct FVector                                     aTilt;                                         // 0x0178 (0x000C) [0x0000000000000004] (CPF_Input)   
	struct FVector                                     aRotationRate;                                 // 0x0184 (0x000C) [0x0000000000000004] (CPF_Input)   
	struct FVector                                     aGravity;                                      // 0x0190 (0x000C) [0x0000000000000004] (CPF_Input)   
	struct FVector                                     aAcceleration;                                 // 0x019C (0x000C) [0x0000000000000004] (CPF_Input)   
	struct FVector                                     aTouch[5];                                     // 0x01A8 (0x003C) [0x0000000000000004] (CPF_Input)   
	struct FVector                                     aBackTouch[5];                                 // 0x01E4 (0x003C) [0x0000000000000004] (CPF_Input)   
	float                                              RawJoyUp;                                      // 0x0220 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RawJoyRight;                                   // 0x0224 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RawJoyLookRight;                               // 0x0228 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              RawJoyLookUp;                                  // 0x022C (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MoveForwardSpeed;                              // 0x0230 (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	float                                              MoveStrafeSpeed;                               // 0x0234 (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	float                                              LookRightScale;                                // 0x0238 (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	float                                              LookUpScale;                                   // 0x023C (0x0004) [0x0000000000004001] (CPF_Edit | CPF_Config)
	uint8_t                                            bStrafe;                                       // 0x0240 (0x0001) [0x0000000000000004] (CPF_Input)   
	uint8_t                                            bXAxis;                                        // 0x0241 (0x0001) [0x0000000000000004] (CPF_Input)   
	uint8_t                                            bYAxis;                                        // 0x0242 (0x0001) [0x0000000000000004] (CPF_Input)   
	float                                              ZeroTime[2];                                   // 0x0244 (0x0008) [0x0000000000000000]               
	float                                              SmoothedMouse[2];                              // 0x024C (0x0008) [0x0000000000000000]               
	int32_t                                            MouseSamples;                                  // 0x0254 (0x0004) [0x0000000000000000]               
	float                                              MouseSamplingTotal;                            // 0x0258 (0x0004) [0x0000000000000000]               
	float                                              AutoUnlockTurnTime;                            // 0x025C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PlayerInput");
		}

		return uClassPointer;
	};

	void PreClientTravel(const class FString& PendingURL, ETravelType TravelType, bool bIsSeamlessTravel);
	void ClientInitInputSystem();
	void InitInputSystem();
	float SmoothMouse(float aMouse, float DeltaTime, int32_t Index, uint8_t& outSampleCount);
	void ClearSmoothing();
	void SmartJump();
	void Jump();
	void ProcessInputMatching(float DeltaTime);
	EDoubleClickDir CheckForDoubleClickMove(float DeltaTime);
	void CatchDoubleClickInput();
	void eventPlayerInput(float DeltaTime);
	void AdjustMouseSensitivity(float FOVScale);
	void PostProcessInput(float DeltaTime);
	void PreProcessInput(float DeltaTime);
	void DrawHUD(class AHUD* H);
	void SetSensitivity(float F);
	bool InvertTurn();
	bool InvertMouse();
	void CancelMobileInput();
};

// Class Engine.PlayerManagerInteraction
// 0x0000 (0x0078 - 0x0078)
class UPlayerManagerInteraction : public UInteraction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PlayerManagerInteraction");
		}

		return uClassPointer;
	};

};

// Class Engine.UISceneClient
// 0x00A0 (0x0048 - 0x00E8)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                 // 0x0048 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	struct FPointer                                    RenderViewport;                                // 0x004C (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FIntPoint                                   MousePosition;                                 // 0x0050 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UDataStoreClient*                            DataStoreManager;                              // 0x0058 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint8_t                                            UnknownData00[0x4];                              // 0x005C (0x0004) MISSED OFFSET
	struct FMatrix                                     CanvasToScreen;                                // 0x0060 (0x0040) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FMatrix                                     InvCanvasToScreen;                             // 0x00A0 (0x0040) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UPostProcessChain*                           UIScenePostProcess;                            // 0x00E0 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bEnablePostProcess : 1;                        // 0x00E4 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UISceneClient");
		}

		return uClassPointer;
	};

	void eventInitializeSceneClient();
	struct FMatrix GetInverseCanvasToScreen();
	struct FMatrix GetCanvasToScreen();
	bool IsUIActive(int32_t optionalFlags);
};

// Class Engine.UISoundTheme
// 0x000C (0x003C - 0x0048)
class UUISoundTheme : public UObject
{
public:
	class TArray<struct FSoundEventMapping>            SoundEventBindings;                            // 0x003C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UISoundTheme");
		}

		return uClassPointer;
	};

	void eventProcessSoundEvent(const class FName& SoundEventName, class APlayerController* optionalSoundOwner);
};

// Class Engine.UIDataStoreSubscriber
// 0x0000 (0x003C - 0x003C)
class UUIDataStoreSubscriber : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStoreSubscriber");
		}

		return uClassPointer;
	};

	void ClearBoundDataStores();
	void GetBoundDataStores(class TArray<class UUIDataStore*>& outOut_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const class FName& PropertyTag, class UUIDataProvider* SourceProvider, int32_t ArrayIndex);
	bool RefreshSubscriberValue(int32_t optionalBindingIndex);
	class FString GetDataStoreBinding(int32_t optionalBindingIndex);
	void SetDataStoreBinding(const class FString& MarkupText, int32_t optionalBindingIndex);
};

// Class Engine.UIDataStorePublisher
// 0x0000 (0x003C - 0x003C)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStorePublisher");
		}

		return uClassPointer;
	};

	bool SaveSubscriberValue(int32_t optionalBindingIndex, class TArray<class UUIDataStore*>& outOut_BoundDataStores);
};

// Class Engine.UIDataProvider
// 0x0000 (0x0048 - 0x0048)
class UUIDataProvider : public UUIRoot
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider");
		}

		return uClassPointer;
	};

};

// Class Engine.UIDataProvider_OnlinePlayerDataBase
// 0x0004 (0x0048 - 0x004C)
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	int32_t                                            PlayerControllerId;                            // 0x0048 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerDataBase");
		}

		return uClassPointer;
	};

	void eventOnUnregister();
	void eventOnRegister(class ULocalPlayer* InPlayer);
};

// Class Engine.UIDataProvider_OnlineFriendMessages
// 0x0054 (0x004C - 0x00A0)
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class TArray<struct FOnlineFriendMessage>          Messages;                                      // 0x004C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      SendingPlayerNameCol;                          // 0x0058 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bIsFriendInviteCol;                            // 0x0064 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bWasAcceptedCol;                               // 0x0070 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bWasDeniedCol;                                 // 0x007C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MessageCol;                                    // 0x0088 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      LastInviteFrom;                                // 0x0094 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriendMessages");
		}

		return uClassPointer;
	};

	void OnGameInviteReceived(uint8_t LocalUserNum, const class FString& InviterName);
	void OnLoginChange(uint8_t LocalUserNum);
	void OnFriendMessageReceived(uint8_t LocalUserNum, const struct FUniqueNetId& SendingPlayer, const class FString& SendingNick, const class FString& Message);
	void OnFriendInviteReceived(uint8_t LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const class FString& RequestingNick, const class FString& Message);
	void ReadMessages();
	void eventOnUnregister();
	void eventOnRegister(class ULocalPlayer* InPlayer);
};

// Class Engine.UIDataProvider_OnlineFriends
// 0x00B4 (0x004C - 0x0100)
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class TArray<struct FOnlineFriend>                 FriendsList;                                   // 0x004C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      NickNameCol;                                   // 0x0058 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      PresenceInfoCol;                               // 0x0064 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      FriendStateCol;                                // 0x0070 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bIsOnlineCol;                                  // 0x007C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bIsPlayingCol;                                 // 0x0088 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bIsPlayingThisGameCol;                         // 0x0094 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bIsJoinableCol;                                // 0x00A0 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bHasVoiceSupportCol;                           // 0x00AC (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bHaveInvitedCol;                               // 0x00B8 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      bHasInvitedYouCol;                             // 0x00C4 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      OfflineText;                                   // 0x00D0 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      OnlineText;                                    // 0x00DC (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      AwayText;                                      // 0x00E8 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      BusyText;                                      // 0x00F4 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriends");
		}

		return uClassPointer;
	};

	void eventRefreshFriendsList();
	void OnLoginChange(uint8_t LocalUserNum);
	void OnFriendsReadComplete(bool bWasSuccessful);
	void eventOnUnregister();
	void eventOnRegister(class ULocalPlayer* InPlayer);
};

// Class Engine.UIDataProvider_OnlinePartyChatList
// 0x006C (0x004C - 0x00B8)
class UUIDataProvider_OnlinePartyChatList : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class TArray<struct FOnlinePartyMember>            PartyMembersList;                              // 0x004C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        NatTypes;                                      // 0x0058 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NickNameCol;                                   // 0x0064 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NatTypeCol;                                    // 0x0070 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      IsLocalCol;                                    // 0x007C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      IsInPartyVoiceCol;                             // 0x0088 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      IsTalkingCol;                                  // 0x0094 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      IsInGameSessionCol;                            // 0x00A0 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      IsPlayingThisGameCol;                          // 0x00AC (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlinePartyChatList");
		}

		return uClassPointer;
	};

	void eventRefreshMembersList();
	void OnLoginChange(uint8_t LocalUserNum);
	void eventOnUnregister();
	void eventOnRegister(class ULocalPlayer* InPlayer);
};

// Class Engine.UIDataProvider_OnlinePlayerStorage
// 0x0020 (0x004C - 0x006C)
class UUIDataProvider_OnlinePlayerStorage : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class UOnlinePlayerStorage*                        Profile;                                       // 0x004C (0x0004) [0x0000000000000000]               
	class FName                                        ProviderName;                                  // 0x0050 (0x0008) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bWasErrorLastRead : 1;                         // 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bIsExternalUIOpen : 1;                         // 0x0058 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bNeedsDeferredRefresh : 1;                     // 0x0058 (0x0004) [0x0000000000000000] [0x00000004] 
	class TArray<struct FPlayerStorageArrayProvider>   PlayerStorageArrayProviders;                   // 0x005C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            DeviceStorageSizeNeeded;                       // 0x0068 (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerStorage");
		}

		return uClassPointer;
	};

	void OnExternalUIChange(bool bIsOpening);
	void OnStorageDeviceChange();
	void OnDeviceSelectionComplete(bool bWasSuccessful);
	void ShowDeviceSelection();
	void RefreshStorageData();
	void OnLoginChange(uint8_t LocalUserNum);
	void OnReadStorageComplete(uint8_t LocalUserNum, bool bWasSuccessful);
	void eventOnUnregister();
	void eventOnRegister(class ULocalPlayer* InPlayer);
	void ClearReadCompleteDelegate(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum);
	void AddReadCompleteDelegate(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum);
	bool GetData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum);
	bool WriteData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, int32_t DeviceID, class UOnlinePlayerStorage* PlayerStorage);
	bool ReadData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, int32_t DeviceID, class UOnlinePlayerStorage* PlayerStorage);
};

// Class Engine.UIDataProvider_OnlineProfileSettings
// 0x0000 (0x006C - 0x006C)
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerStorage
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlineProfileSettings");
		}

		return uClassPointer;
	};

	void OnStorageDeviceChange();
	void RefreshStorageData();
	void ClearReadCompleteDelegate(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum);
	void AddReadCompleteDelegate(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum);
	bool GetData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum);
	bool WriteData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, int32_t DeviceID, class UOnlinePlayerStorage* PlayerStorage);
	bool ReadData(class UOnlinePlayerInterface* PlayerInterface, uint8_t LocalUserNum, int32_t DeviceID, class UOnlinePlayerStorage* PlayerStorage);
};

// Class Engine.UIDataProvider_PlayerAchievements
// 0x000C (0x004C - 0x0058)
class UUIDataProvider_PlayerAchievements : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class TArray<struct FAchievementDetails>           Achievements;                                  // 0x004C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_PlayerAchievements");
		}

		return uClassPointer;
	};

	void UpdateAchievements();
	void OnLoginChange(uint8_t LocalUserNum);
	void eventOnUnregister();
	void eventOnRegister(class ULocalPlayer* InPlayer);
	void OnPlayerAchievementUnlocked(bool bWasSuccessful);
	void OnPlayerAchievementsChanged(int32_t TitleId);
	void GetAchievementDetails(int32_t AchievementId, struct FAchievementDetails& outOutAchievementDetails);
	class FString GetAchievementIconPathName(int32_t AchievementId, bool optionalBReturnLockedIcon);
	void PopulateAchievementIcons();
	int32_t GetMaxTotalGamerScore();
	int32_t GetTotalGamerScore();
};

// Class Engine.UIDataProvider_OnlinePlayerStorageArray
// 0x0020 (0x0048 - 0x0068)
class UUIDataProvider_OnlinePlayerStorageArray : public UUIDataProvider
{
public:
	class UOnlinePlayerStorage*                        PlayerStorage;                                 // 0x0048 (0x0004) [0x0000000000000000]               
	int32_t                                            PlayerStorageId;                               // 0x004C (0x0004) [0x0000000000000000]               
	class FString                                      ColumnHeaderText;                              // 0x0050 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class FName>                          Values;                                        // 0x005C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerStorageArray");
		}

		return uClassPointer;
	};

};

// Class Engine.UIDataProvider_SettingsArray
// 0x0028 (0x0048 - 0x0070)
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	class USettings*                                   Settings;                                      // 0x0048 (0x0004) [0x0000000000000000]               
	int32_t                                            SettingsId;                                    // 0x004C (0x0004) [0x0000000000000000]               
	class FName                                        SettingsName;                                  // 0x0050 (0x0008) [0x0000000000000000]               
	class FString                                      ColumnHeaderText;                              // 0x0058 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FIdToStringMapping>            Values;                                        // 0x0064 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_SettingsArray");
		}

		return uClassPointer;
	};

};

// Class Engine.UIDataStore
// 0x0020 (0x0048 - 0x0068)
class UUIDataStore : public UUIDataProvider
{
public:
	class FName                                        Tag;                                           // 0x0048 (0x0008) [0x0000000000000000]               
	class TArray<struct FScriptDelegate>               RefreshSubscriberNotifies;                     // 0x0050 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;           // 0x005C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore");
		}

		return uClassPointer;
	};

	class UDataStoreClient* GetDataStoreClient();
	void eventRefreshSubscribers(const class FName& optionalPropertyTag, bool optionalBInvalidateValues, class UUIDataProvider* optionalSourceProvider, int32_t optionalArrayIndex);
	bool NotifyGameSessionEnded();
	void eventSubscriberDetached(class UUIDataStoreSubscriber* Subscriber);
	void eventSubscriberAttached(class UUIDataStoreSubscriber* Subscriber);
	void eventUnregistered(class ULocalPlayer* PlayerOwner);
	void eventRegistered(class ULocalPlayer* PlayerOwner);
	void OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const class FName& PropertyTag, class UUIDataProvider* SourceProvider, int32_t ArrayIndex);
};

// Class Engine.UIDataStore_DynamicResource
// 0x0050 (0x0068 - 0x00B8)
class UUIDataStore_DynamicResource : public UUIDataStore
{
public:
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                               // 0x0068 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UUIDataStore_GameResource*                   GameResourceDataStore;                         // 0x006C (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<struct FDynamicResourceProviderDefinition> ResourceProviderDefinitions;                   // 0x0070 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FMultiMap_Mirror                            ResourceProviders;                             // 0x007C (0x003C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_DynamicResource");
		}

		return uClassPointer;
	};

	void eventUnregistered(class ULocalPlayer* PlayerOwner);
	void eventRegistered(class ULocalPlayer* PlayerOwner);
	void OnLoginChange(uint8_t LocalUserNum);
	bool GetResourceProviders(const class FName& ProviderTag, class TArray<class UUIResourceCombinationProvider*>& outOut_Providers);
	int32_t FindProviderTypeIndex(const class FName& ProviderTag);
};

// Class Engine.UIDataStore_Fonts
// 0x0000 (0x0068 - 0x0068)
class UUIDataStore_Fonts : public UUIDataStore
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_Fonts");
		}

		return uClassPointer;
	};

};

// Class Engine.UIDataStore_GameResource
// 0x0048 (0x0068 - 0x00B0)
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	class TArray<struct FGameResourceDataProvider>     ElementProviderTypes;                          // 0x0068 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FMultiMap_Mirror                            ListElementProviders;                          // 0x0074 (0x003C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_GameResource");
		}

		return uClassPointer;
	};

	bool GetResourceProviders(const class FName& ProviderTag, class TArray<class UUIResourceDataProvider*>& outOut_Providers);
	int32_t FindProviderTypeIndex(const class FName& ProviderTag);
};

// Class Engine.UIDataStore_MenuItems
// 0x0050 (0x00B0 - 0x0100)
class UUIDataStore_MenuItems : public UUIDataStore_GameResource
{
public:
	class FName                                        CurrentGameSettingsTag;                        // 0x00B0 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FMultiMap_Mirror                            OptionProviders;                               // 0x00B8 (0x003C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class UUIDataProvider_MenuItem*>      DynamicProviders;                              // 0x00F4 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_MenuItems");
		}

		return uClassPointer;
	};

	void eventUnregistered(class ULocalPlayer* PlayerOwner);
	void eventRegistered(class ULocalPlayer* PlayerOwner);
	void OnGameSettingsChanged(class UUIDataProvider* SourceProvider, const class FName& optionalPropTag);
};

// Class Engine.UIDataStore_GameState
// 0x000C (0x0068 - 0x0074)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;           // 0x0068 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_GameState");
		}

		return uClassPointer;
	};

	bool NotifyGameSessionEnded();
	void OnRefreshDataFieldValue();
};

// Class Engine.UIDataStore_Registry
// 0x000C (0x0068 - 0x0074)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	class TArray<struct FRegistryKeyValuePair>         RegistryData;                                  // 0x0068 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_Registry");
		}

		return uClassPointer;
	};

	void eventSetData(const class FString& Key, const class FString& Value);
	bool eventGetData(const class FString& Key, class FString& outOut_Data);
};

// Class Engine.UIDataStore_Remote
// 0x0000 (0x0068 - 0x0068)
class UUIDataStore_Remote : public UUIDataStore
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_Remote");
		}

		return uClassPointer;
	};

};

// Class Engine.UIDataStore_OnlineGameSearch
// 0x0028 (0x0068 - 0x0090)
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	class FName                                        SearchResultsName;                             // 0x0068 (0x0008) [0x0000000000000002] (CPF_Const)   
	class UOnlineSubsystem*                            OnlineSub;                                     // 0x0070 (0x0004) [0x0000000000000000]               
	class UOnlineGameInterface*                        GameInterface_Object;                          // 0x0074 (0x0004) [0x0000000000000000] 
	class UOnlineGameInterface*                        GameInterface_Interface;                       // 0x0078 (0x0004) [0x0000000000000000]               
	class TArray<struct FGameSearchCfg>                GameSearchCfgList;                             // 0x007C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	int32_t                                            SelectedIndex;                                 // 0x0088 (0x0004) [0x0000000000000000]               
	int32_t                                            ActiveSearchIndex;                             // 0x008C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSearch");
		}

		return uClassPointer;
	};

	void ClearAllSearchResults();
	void eventMoveToPrevious(bool optionalBInvalidateExistingSearchResults);
	void eventMoveToNext(bool optionalBInvalidateExistingSearchResults);
	void eventSetCurrentByName(const class FName& SearchName, bool optionalBInvalidateExistingSearchResults);
	void eventSetCurrentByIndex(int32_t NewIndex, bool optionalBInvalidateExistingSearchResults);
	int32_t FindSearchConfigurationIndex(const class FName& SearchTag);
	class UOnlineGameSearch* eventGetActiveGameSearch();
	class UOnlineGameSearch* eventGetCurrentGameSearch();
	bool eventShowHostGamercard(uint8_t ControllerIndex, int32_t ListIndex);
	bool eventGetSearchResultFromIndex(int32_t ListIndex, struct FOnlineGameSearchResult& outResult);
	void OnSearchComplete(bool bWasSuccessful);
	bool OverrideQuerySubmission(uint8_t ControllerId, class UOnlineGameSearch* Search);
	bool eventSubmitGameSearch(uint8_t ControllerIndex, bool optionalBInvalidateExistingSearchResults);
	bool InvalidateCurrentSearchResults();
	void eventInit();
};

// Class Engine.UIDataStore_OnlinePlayerData
// 0x00A8 (0x0068 - 0x0110)
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                               // 0x0068 (0x0004) [0x0000000000000000]               
	int32_t                                            PlayerControllerId;                            // 0x006C (0x0004) [0x0000000000000000]               
	class FString                                      PlayerNick;                                    // 0x0070 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      ProfileSettingsClassName;                      // 0x007C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      ProfileSettingsClass;                          // 0x0088 (0x0004) [0x0000000000000000]               
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                               // 0x008C (0x0004) [0x0000000000000000]               
	class FString                                      ProfileProviderClassName;                      // 0x0090 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      ProfileProviderClass;                          // 0x009C (0x0004) [0x0000000000000000]               
	class FString                                      PlayerStorageClassName;                        // 0x00A0 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      PlayerStorageClass;                            // 0x00AC (0x0004) [0x0000000000000000]               
	class UUIDataProvider_OnlinePlayerStorage*         StorageProvider;                               // 0x00B0 (0x0004) [0x0000000000000000]               
	class FString                                      StorageProviderClassName;                      // 0x00B4 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      StorageProviderClass;                          // 0x00C0 (0x0004) [0x0000000000000000]               
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                        // 0x00C4 (0x0004) [0x0000000000000000]               
	class UUIDataProvider_PlayerAchievements*          AchievementsProvider;                          // 0x00C8 (0x0004) [0x0000000000000000]               
	class FString                                      FriendsProviderClassName;                      // 0x00CC (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      FriendsProviderClass;                          // 0x00D8 (0x0004) [0x0000000000000000]               
	class FString                                      FriendMessagesProviderClassName;               // 0x00DC (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      FriendMessagesProviderClass;                   // 0x00E8 (0x0004) [0x0000000000000000]               
	class FString                                      AchievementsProviderClassName;                 // 0x00EC (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      AchievementsProviderClass;                     // 0x00F8 (0x0004) [0x0000000000000000]               
	class FString                                      PartyChatProviderClassName;                    // 0x00FC (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class UClass*                                      PartyChatProviderClass;                        // 0x0108 (0x0004) [0x0000000000000000]               
	class UUIDataProvider_OnlinePartyChatList*         PartyChatProvider;                             // 0x010C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_OnlinePlayerData");
		}

		return uClassPointer;
	};

	class UOnlinePlayerStorage* eventGetCachedPlayerStorage(int32_t ControllerId);
	class UOnlineProfileSettings* eventGetCachedPlayerProfile(int32_t ControllerId);
	void ClearDelegates();
	void RegisterDelegates();
	void OnPlayerDataChange();
	void OnLoginChange(uint8_t LocalUserNum);
	void eventOnUnregister();
	void eventOnRegister(class ULocalPlayer* InPlayer);
};

// Class Engine.UIDataStore_OnlineStats
// 0x0068 (0x0068 - 0x00D0)
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	class TArray<class UClass*>                        StatsReadClasses;                              // 0x0068 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FName                                        StatsReadName;                                 // 0x0074 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FPlayerNickMetaData                         PlayerNickData;                                // 0x007C (0x0014) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FRankMetaData                               RankNameMetaData;                              // 0x0090 (0x0014) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class FName                                        TotalRowsName;                                 // 0x00A4 (0x0008) [0x0000000000000002] (CPF_Const)   
	class TArray<class UOnlineStatsRead*>              StatsReadObjects;                              // 0x00AC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class UOnlineStatsRead*                            StatsRead;                                     // 0x00B8 (0x0004) [0x0000000000000000]               
	EStatsFetchType                                    CurrentReadType;                               // 0x00BC (0x0001) [0x0000000000000000]               
	class UOnlineStatsInterface*                       StatsInterface_Object;                         // 0x00C0 (0x0004) [0x0000000000000000] 
	class UOnlineStatsInterface*                       StatsInterface_Interface;                      // 0x00C4 (0x0004) [0x0000000000000000]               
	class UOnlinePlayerInterface*                      PlayerInterface_Object;                        // 0x00C8 (0x0004) [0x0000000000000000] 
	class UOnlinePlayerInterface*                      PlayerInterface_Interface;                     // 0x00CC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_OnlineStats");
		}

		return uClassPointer;
	};

	static void SortResultsByRank(class UOnlineStatsRead* StatsToSort);
	void OnReadComplete(bool bWasSuccessful);
	bool eventShowGamercard(uint8_t ConrollerIndex, int32_t ListIndex);
	bool eventRefreshStats(uint8_t ControllerIndex);
	void SetStatsReadInfo();
	void eventInit();
};

// Class Engine.UIDataStore_Settings
// 0x0000 (0x0068 - 0x0068)
class UUIDataStore_Settings : public UUIDataStore
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_Settings");
		}

		return uClassPointer;
	};

};

// Class Engine.UIDataStore_OnlineGameSettings
// 0x0014 (0x0068 - 0x007C)
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	class TArray<struct FGameSettingsCfg>              GameSettingsCfgList;                           // 0x0068 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class UClass*                                      SettingsProviderClass;                         // 0x0074 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SelectedIndex;                                 // 0x0078 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSettings");
		}

		return uClassPointer;
	};

	void eventUnregistered(class ULocalPlayer* PlayerOwner);
	void eventRegistered(class ULocalPlayer* PlayerOwner);
	void eventMoveToPrevious();
	void eventMoveToNext();
	void eventSetCurrentByName(const class FName& SettingsName);
	void eventSetCurrentByIndex(int32_t NewIndex);
	class UUIDataProvider_Settings* eventGetCurrentProvider();
	class UOnlineGameSettings* eventGetCurrentGameSettings();
	bool eventCreateGame(uint8_t ControllerIndex);
};

// Class Engine.UIDataStore_StringBase
// 0x0000 (0x0068 - 0x0068)
class UUIDataStore_StringBase : public UUIDataStore
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_StringBase");
		}

		return uClassPointer;
	};

};

// Class Engine.UIDataStore_InputAlias
// 0x0048 (0x0068 - 0x00B0)
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	class TArray<struct FUIDataStoreInputAlias>        InputAliases;                                  // 0x0068 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0074 (0x003C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_InputAlias");
		}

		return uClassPointer;
	};

	bool HasAliasMappingForPlatform(const class FName& DesiredAlias, EInputPlatformType DesiredPlatform);
	int32_t FindInputAliasIndex(const class FName& DesiredAlias);
	bool GetAliasInputKeyDataByIndex(int32_t AliasIndex, EInputPlatformType optionalOverridePlatform, struct FRawInputKeyEventData& outOut_InputKeyData);
	bool GetAliasInputKeyData(const class FName& DesiredAlias, EInputPlatformType optionalOverridePlatform, struct FRawInputKeyEventData& outOut_InputKeyData);
	class FName GetAliasInputKeyNameByIndex(int32_t AliasIndex, EInputPlatformType optionalOverridePlatform);
	class FName GetAliasInputKeyName(const class FName& DesiredAlias, EInputPlatformType optionalOverridePlatform);
	class FString GetAliasFontMarkupByIndex(int32_t AliasIndex, EInputPlatformType optionalOverridePlatform);
	class FString GetAliasFontMarkup(const class FName& DesiredAlias, EInputPlatformType optionalOverridePlatform);
};

// Class Engine.UIDataStore_StringAliasMap
// 0x004C (0x0068 - 0x00B4)
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	class TArray<struct FUIMenuInputMap>               MenuInputMapArray;                             // 0x0068 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	struct FMap_Mirror                                 MenuInputSets;                                 // 0x0074 (0x003C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            PlayerIndex;                                   // 0x00B0 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataStore_StringAliasMap");
		}

		return uClassPointer;
	};

	int32_t GetStringWithFieldName(const class FString& FieldName, class FString& outMappedString);
	int32_t FindMappingWithFieldName(const class FString& optionalFieldName, const class FString& optionalSetName);
	class ULocalPlayer* GetPlayerOwner();
};

// Class Engine.UIPropertyDataProvider
// 0x0018 (0x0048 - 0x0060)
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	class TArray<class UClass*>                        ComplexPropertyTypes;                          // 0x0048 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FScriptDelegate                             __CanSupportComplexPropertyType__Delegate;     // 0x0054 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIPropertyDataProvider");
		}

		return uClassPointer;
	};

	bool CanSupportComplexPropertyType(class UProperty* UnsupportedProperty);
};

// Class Engine.UIDataProvider_Settings
// 0x0008 (0x0060 - 0x0068)
class UUIDataProvider_Settings : public UUIPropertyDataProvider
{
public:
	class USettings*                                   Settings;                                      // 0x0060 (0x0004) [0x0000000000000000]               
	uint32_t                                           bIsAListRow : 1;                               // 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_Settings");
		}

		return uClassPointer;
	};

};

// Class Engine.UIResourceDataProvider
// 0x0004 (0x0060 - 0x0064)
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	uint32_t                                           bSkipDuringEnumeration : 1;                    // 0x0060 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIResourceDataProvider");
		}

		return uClassPointer;
	};

	void eventInitializeProvider(bool bIsEditor);
};

// Class Engine.UIDataProvider_MenuItem
// 0x0088 (0x0064 - 0x00EC)
class UUIDataProvider_MenuItem : public UUIResourceDataProvider
{
public:
	EMenuOptionType                                    OptionType;                                    // 0x0064 (0x0001) [0x0000000000004000] (CPF_Config)  
	class TArray<class FName>                          OptionSet;                                     // 0x0068 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      DataStoreMarkup;                               // 0x0074 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      DescriptionMarkup;                             // 0x0080 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FName                                        RequiredGameMode;                              // 0x008C (0x0008) [0x0000000000004000] (CPF_Config)  
	class FString                                      FriendlyName;                                  // 0x0094 (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      CustomFriendlyName;                            // 0x00A0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      Description;                                   // 0x00AC (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bEditableCombo : 1;                            // 0x00B8 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bNumericCombo : 1;                             // 0x00B8 (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	uint32_t                                           bKeyboardOrMouseOption : 1;                    // 0x00B8 (0x0004) [0x0000000000004000] [0x00000004] (CPF_Config)
	uint32_t                                           bOnlineOnly : 1;                               // 0x00B8 (0x0004) [0x0000000000004000] [0x00000008] (CPF_Config)
	uint32_t                                           bOfflineOnly : 1;                              // 0x00B8 (0x0004) [0x0000000000004000] [0x00000010] (CPF_Config)
	uint32_t                                           bSearchAllInis : 1;                            // 0x00B8 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bRemoveOn360 : 1;                              // 0x00B8 (0x0004) [0x0000000000004000] [0x00000040] (CPF_Config)
	uint32_t                                           bRemoveOnPC : 1;                               // 0x00B8 (0x0004) [0x0000000000004000] [0x00000080] (CPF_Config)
	uint32_t                                           bRemoveOnPS3 : 1;                              // 0x00B8 (0x0004) [0x0000000000004000] [0x00000100] (CPF_Config)
	int32_t                                            EditBoxMaxLength;                              // 0x00BC (0x0004) [0x0000000000004000] (CPF_Config)  
	struct FUIRangeData                                RangeData;                                     // 0x00C0 (0x0014) [0x0000000000004000] (CPF_Config)  
	class TArray<class FName>                          SchemaCellFields;                              // 0x00D4 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      IniName;                                       // 0x00E0 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIDataProvider_MenuItem");
		}

		return uClassPointer;
	};

};

// Class Engine.UIResourceCombinationProvider
// 0x0008 (0x0048 - 0x0050)
class UUIResourceCombinationProvider : public UUIDataProvider
{
public:
	class UUIResourceDataProvider*                     StaticDataProvider;                            // 0x0048 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                               // 0x004C (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIResourceCombinationProvider");
		}

		return uClassPointer;
	};

	void ClearProviderReferences();
	void eventInitializeProvider(bool bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider);
};

// Class Engine.GameUISceneClient
// 0x006C (0x00E8 - 0x0154)
class UGameUISceneClient : public UUISceneClient
{
public:
	float                                              LatestDeltaTime;                               // 0x00E8 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FDouble                                     DoubleClickStartTime;                          // 0x00EC (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FIntPoint                                   DoubleClickStartPosition;                      // 0x00F4 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FMap_Mirror                                 InitialPressedKeys;                            // 0x00FC (0x003C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	uint32_t                                           bUpdateInputProcessingStatus : 1;              // 0x0138 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           bUpdateSceneViewportSizes : 1;                 // 0x0138 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bEnableDebugInput : 1;                         // 0x0138 (0x0004) [0x0000000000004000] [0x00000004] (CPF_Config)
	uint32_t                                           bRenderDebugInfo : 1;                          // 0x0138 (0x0004) [0x0000000000004000] [0x00000008] (CPF_Config)
	uint32_t                                           bCaptureUnprocessedInput : 1;                  // 0x0138 (0x0004) [0x0000000000004002] [0x00000010] (CPF_Const | CPF_Config)
	class TArray<class FName>                          NavAliases;                                    // 0x013C (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class FName>                          AxisInputKeys;                                 // 0x0148 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameUISceneClient");
		}

		return uClassPointer;
	};

	int32_t FindLocalPlayerIndex(class UPlayer* P);
	void NotifyPlayerRemoved(int32_t PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int32_t PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyGameSessionEnded();
	void NotifyClientTravel(class APlayerController* TravellingPlayer, const class FString& TravelURL, ETravelType TravelType, bool bIsSeamlessTravel);
	void eventPauseGame(bool bDesiredPauseState, int32_t optionalPlayerIndex);
	bool CanUnpauseInternalUI();
	void RequestInputProcessingUpdate();
	static ENetMode GetCurrentNetMode();
};

// Class Engine.Scene
// 0x0000 (0x003C - 0x003C)
class UScene : public UObject
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Scene");
		}

		return uClassPointer;
	};

};

// Class Engine.InstancedFoliageActor
// 0x004C (0x01C8 - 0x0214)
class AInstancedFoliageActor : public AActor
{
public:
	struct FMap_Mirror                                 FoliageMeshes;                                 // 0x01C8 (0x003C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class UStaticMesh*                                 SelectedMesh;                                  // 0x0204 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class TArray<class UInstancedStaticMeshComponent*> InstancedStaticMeshComponents;                 // 0x0208 (0x000C) [0x000000000448200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InstancedFoliageActor");
		}

		return uClassPointer;
	};

};

// Class Engine.InteractiveFoliageActor
// 0x005B (0x01D1 - 0x022C)
class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                             // 0x01D4 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FVector                                     TouchingActorEntryPosition;                    // 0x01D8 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     FoliageVelocity;                               // 0x01E4 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     FoliageForce;                                  // 0x01F0 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     FoliagePosition;                               // 0x01FC (0x000C) [0x0000000000002000] (CPF_Transient)
	float                                              FoliageDamageImpulseScale;                     // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FoliageTouchImpulseScale;                      // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FoliageStiffness;                              // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FoliageStiffnessQuadratic;                     // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FoliageDamping;                                // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDamageImpulse;                              // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxTouchImpulse;                               // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxForce;                                      // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Mass;                                          // 0x0228 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InteractiveFoliageActor");
		}

		return uClassPointer;
	};

	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
};

// Class Engine.InteractiveFoliageComponent
// 0x0004 (0x0254 - 0x0258)
class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    FoliageSceneProxy;                             // 0x0254 (0x0004) [0x0000000000201002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InteractiveFoliageComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactoryInteractiveFoliage
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryInteractiveFoliage : public UActorFactoryStaticMesh
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactoryInteractiveFoliage");
		}

		return uClassPointer;
	};

};

// Class Engine.FluidInfluenceActor
// 0x0010 (0x01C8 - 0x01D8)
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                 // 0x01C8 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class USpriteComponent*                            Sprite;                                        // 0x01CC (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UFluidInfluenceComponent*                    InfluenceComponent;                            // 0x01D0 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bActive : 1;                                   // 0x01D4 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bToggled : 1;                                  // 0x01D4 (0x0004) [0x0000000000000020] [0x00000002] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FluidInfluenceActor");
		}

		return uClassPointer;
	};

	void eventReplicatedEvent(const class FName& VarName);
	void OnToggle(class USeqAct_Toggle* inAction);
};

// Class Engine.FluidSurfaceActor
// 0x0008 (0x01C8 - 0x01D0)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	class UParticleSystem*                             ProjectileEntryEffect;                         // 0x01CC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FluidSurfaceActor");
		}

		return uClassPointer;
	};

	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void eventTakeDamage(int32_t Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& optionalHitInfo, class AActor* optionalDamageCauser);
};

// Class Engine.FluidSurfaceActorMovable
// 0x0000 (0x01D0 - 0x01D0)
class AFluidSurfaceActorMovable : public AFluidSurfaceActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FluidSurfaceActorMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.FluidInfluenceComponent
// 0x0060 (0x01D8 - 0x0238)
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	uint32_t                                           bActive : 1;                                   // 0x01D8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           RaindropFillEntireFluid : 1;                   // 0x01D8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit | CPF_Interp)
	uint32_t                                           bIsToggleTriggered : 1;                        // 0x01D8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	class AFluidSurfaceActor*                          FluidActor;                                    // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	EInfluenceType                                     InfluenceType;                                 // 0x01E0 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDistance;                                   // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WaveStrength;                                  // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              WaveFrequency;                                 // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              WavePhase;                                     // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              WaveRadius;                                    // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RaindropAreaRadius;                            // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RaindropRadius;                                // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RaindropStrength;                              // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RaindropRate;                                  // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              FlowSpeed;                                     // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	int32_t                                            FlowNumRipples;                                // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              FlowSideMotionRadius;                          // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              FlowWaveRadius;                                // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              FlowStrength;                                  // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              FlowFrequency;                                 // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              SphereOuterRadius;                             // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              SphereInnerRadius;                             // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              SphereStrength;                                // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              CurrentAngle;                                  // 0x022C (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	float                                              CurrentTimer;                                  // 0x0230 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class AFluidSurfaceActor*                          CurrentFluidActor;                             // 0x0234 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FluidInfluenceComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.FluidSurfaceComponent
// 0x00E0 (0x01D8 - 0x02B8)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                 // 0x01D8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LightMapResolution;                            // 0x01DC (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLightmassPrimitiveSettings                 LightmassSettings;                             // 0x01E0 (0x001C) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           EnableSimulation : 1;                          // 0x01FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           EnableDetail : 1;                              // 0x01FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bTiling : 1;                                   // 0x01FC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bPause : 1;                                    // 0x01FC (0x0004) [0x0000000000002001] [0x00000008] (CPF_Edit | CPF_Transient)
	uint32_t                                           bShowSimulationNormals : 1;                    // 0x01FC (0x0004) [0x0000000000002001] [0x00000010] (CPF_Edit | CPF_Transient)
	uint32_t                                           bShowSimulationPosition : 1;                   // 0x01FC (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bShowDetailNormals : 1;                        // 0x01FC (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bShowDetailPosition : 1;                       // 0x01FC (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bShowFluidSimulation : 1;                      // 0x01FC (0x0004) [0x0000000000002001] [0x00000100] (CPF_Edit | CPF_Transient)
	uint32_t                                           bShowFluidDetail : 1;                          // 0x01FC (0x0004) [0x0000000000002001] [0x00000200] (CPF_Edit | CPF_Transient)
	uint32_t                                           bTestRipple : 1;                               // 0x01FC (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bTestRippleCenterOnDetail : 1;                 // 0x01FC (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	int32_t                                            SimulationQuadsX;                              // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SimulationQuadsY;                              // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GridSpacing;                                   // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GridSpacingLowRes;                             // 0x020C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      TargetSimulation;                              // 0x0210 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              GPUTessellationFactor;                         // 0x0214 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FluidDamping;                                  // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FluidTravelSpeed;                              // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FluidHeightScale;                              // 0x0220 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FluidUpdateRate;                               // 0x0224 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ForceImpact;                                   // 0x0228 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ForceContinuous;                               // 0x022C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LightingContrast;                              // 0x0230 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class AActor*                                      TargetDetail;                                  // 0x0234 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DeactivationDistance;                          // 0x0238 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            DetailResolution;                              // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DetailSize;                                    // 0x0240 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DetailDamping;                                 // 0x0244 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DetailTravelSpeed;                             // 0x0248 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DetailTransfer;                                // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DetailHeightScale;                             // 0x0250 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              DetailUpdateRate;                              // 0x0254 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NormalLength;                                  // 0x0258 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TestRippleSpeed;                               // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TestRippleFrequency;                           // 0x0260 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TestRippleRadius;                              // 0x0264 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FluidWidth;                                    // 0x0268 (0x0004) [0x0000000000000000]               
	float                                              FluidHeight;                                   // 0x026C (0x0004) [0x0000000000000000]               
	float                                              TestRippleTime;                                // 0x0270 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	float                                              TestRippleAngle;                               // 0x0274 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	float                                              DeactivationTimer;                             // 0x0278 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	float                                              ViewDistance;                                  // 0x027C (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	struct FVector                                     SimulationPosition;                            // 0x0280 (0x000C) [0x0000000000003000] (CPF_Native | CPF_Transient)
	struct FVector                                     DetailPosition;                                // 0x028C (0x000C) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class TArray<uint8_t>                              ClampMap;                                      // 0x0298 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class UShadowMap2D*>                  ShadowMaps;                                    // 0x02A4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FLightMapRef                                LightMap;                                      // 0x02B0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    FluidSimulation;                               // 0x02B4 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FluidSurfaceComponent");
		}

		return uClassPointer;
	};

	void SetSimulationPosition(const struct FVector& WorldPos);
	void SetDetailPosition(const struct FVector& WorldPos);
	void ApplyForce(const struct FVector& WorldPos, float Strength, float Radius, bool optionalBImpulse);
};

// Class Engine.SpeedTreeActor
// 0x0004 (0x01C8 - 0x01CC)
class ASpeedTreeActor : public AActor
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                            // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpeedTreeActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SpeedTreeComponent
// 0x00B4 (0x01D8 - 0x028C)
class USpeedTreeComponent : public UPrimitiveComponent
{
public:
	class USpeedTree*                                  SpeedTree;                                     // 0x01D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseLeafCards : 1;                             // 0x01DC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseLeafMeshes : 1;                            // 0x01DC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseBranches : 1;                              // 0x01DC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseFronds : 1;                                // 0x01DC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bUseBillboards : 1;                            // 0x01DC (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	float                                              Lod3DStart;                                    // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Lod3DEnd;                                      // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LodBillboardStart;                             // 0x01E8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LodBillboardEnd;                               // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LodLevelOverride;                              // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          Branch1Material;                               // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          Branch2Material;                               // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          FrondMaterial;                                 // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          LeafCardMaterial;                              // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          LeafMeshMaterial;                              // 0x0204 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          BillboardMaterial;                             // 0x0208 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture2D*                                  SpeedTreeIcon;                                 // 0x020C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	class TArray<struct FSpeedTreeStaticLight>         StaticLights;                                  // 0x0210 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FLightMapRef                                BranchLightMap;                                // 0x021C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FLightMapRef                                FrondLightMap;                                 // 0x0220 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FLightMapRef                                LeafMeshLightMap;                              // 0x0224 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FLightMapRef                                LeafCardLightMap;                              // 0x0228 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FLightMapRef                                BillboardLightMap;                             // 0x022C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FMatrix                                     RotationOnlyMatrix;                            // 0x0230 (0x0040) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                             // 0x0270 (0x001C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpeedTreeComponent");
		}

		return uClassPointer;
	};

	void SetMaterial(ESpeedTreeMeshType MeshType, class UMaterialInterface* Material);
	class UMaterialInterface* GetMaterial(ESpeedTreeMeshType MeshType);
};

// Class Engine.SpeedTreeActorFactory
// 0x0004 (0x0068 - 0x006C)
class USpeedTreeActorFactory : public UActorFactory
{
public:
	class USpeedTree*                                  SpeedTree;                                     // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpeedTreeActorFactory");
		}

		return uClassPointer;
	};

};

// Class Engine.SpeedTreeComponentFactory
// 0x0004 (0x0040 - 0x0044)
class USpeedTreeComponentFactory : public UPrimitiveComponentFactory
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                            // 0x0040 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpeedTreeComponentFactory");
		}

		return uClassPointer;
	};

};

// Class Engine.SpeedTree
// 0x0044 (0x003C - 0x0080)
class USpeedTree : public UObject
{
public:
	uint32_t                                           bLegacySpeedTree : 1;                          // 0x003C (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	struct FPointer                                    SRH;                                           // 0x0040 (0x0004) [0x0000000000201002] (CPF_Const | CPF_Native)
	float                                              LeafStaticShadowOpacity;                       // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          Branch1Material;                               // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          Branch2Material;                               // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          FrondMaterial;                                 // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          LeafCardMaterial;                              // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          LeafMeshMaterial;                              // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          BillboardMaterial;                             // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindStrength;                                  // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     WindDirection;                                 // 0x0064 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FGuid                                       LightingGuid;                                  // 0x0070 (0x0010) [0x0000000000000002] (CPF_Const | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpeedTree");
		}

		return uClassPointer;
	};

};

// Class Engine.LensFlareSource
// 0x0008 (0x01C8 - 0x01D0)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                 // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bCurrentlyActive : 1;                          // 0x01CC (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LensFlareSource");
		}

		return uClassPointer;
	};

	void SetActorParameter(const class FName& ParameterName, class AActor* Param);
	void SetExtColorParameter(const class FName& ParameterName, float Red, float Green, float Blue, float Alpha);
	void SetColorParameter(const class FName& ParameterName, const struct FLinearColor& Param);
	void SetVectorParameter(const class FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const class FName& ParameterName, float Param);
	void eventReplicatedEvent(const class FName& VarName);
	void OnToggle(class USeqAct_Toggle* Action);
	void eventPostBeginPlay();
	void SetTemplate(class ULensFlare* NewTemplate);
};

// Class Engine.LensFlareComponent
// 0x004C (0x01D8 - 0x0224)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                      // 0x01D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UDrawLightConeComponent*                     PreviewInnerCone;                              // 0x01DC (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDrawLightConeComponent*                     PreviewOuterCone;                              // 0x01E0 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDrawLightRadiusComponent*                   PreviewRadius;                                 // 0x01E4 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	uint32_t                                           bAutoActivate : 1;                             // 0x01E8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bIsActive : 1;                                 // 0x01E8 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bHasTranslucency : 1;                          // 0x01E8 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bHasUnlitTranslucency : 1;                     // 0x01E8 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bHasUnlitDistortion : 1;                       // 0x01E8 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bUsesSceneColor : 1;                           // 0x01E8 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bHasSeparateTranslucency : 1;                  // 0x01E8 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bUseTrueConeCalculation : 1;                   // 0x01E8 (0x0004) [0x0000000000002000] [0x00000080] (CPF_Transient)
	uint32_t                                           bVisibleForMobile : 1;                         // 0x01E8 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              OuterCone;                                     // 0x01EC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              InnerCone;                                     // 0x01F0 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              ConeFudgeFactor;                               // 0x01F4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              Radius;                                        // 0x01F8 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MinStrength;                                   // 0x01FC (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FLinearColor                                SourceColor;                                   // 0x0200 (0x0010) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FLensFlareElementMaterials>    Materials;                                     // 0x0210 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	struct FPointer                                    ReleaseResourcesFence;                         // 0x021C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              NextTraceTime;                                 // 0x0220 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LensFlareComponent");
		}

		return uClassPointer;
	};

	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant(int32_t ElementIndex);
	void SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material);
	class UMaterialInterface* GetMaterial(int32_t ElementIndex);
	void SetIsActive(bool bInIsActive);
	void SetSourceColor(const struct FLinearColor& InSourceColor);
	void SetTemplate(class ULensFlare* NewTemplate, bool optionalBForceSet);
};

// Class Engine.LensFlare
// 0x01C4 (0x003C - 0x0200)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                 // 0x003C (0x0144) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class UStaticMesh*                                 SourceMesh;                                    // 0x0180 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ESceneDepthPriorityGroup                           SourceDPG;                                     // 0x0184 (0x0001) [0x0000000000000002] (CPF_Const)   
	ESceneDepthPriorityGroup                           ReflectionsDPG;                                // 0x0185 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<struct FLensFlareElement>             Reflections;                                   // 0x0188 (0x000C) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	float                                              OuterCone;                                     // 0x0194 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              InnerCone;                                     // 0x0198 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ConeFudgeFactor;                               // 0x019C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Radius;                                        // 0x01A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseTrueConeCalculation : 1;                   // 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseFixedRelativeBoundingBox : 1;              // 0x01A4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRenderDebugLines : 1;                         // 0x01A4 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           ThumbnailImageOutOfDate : 1;                   // 0x01A4 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              MinStrength;                                   // 0x01A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FRawDistributionFloat                       ScreenPercentageMap;                           // 0x01AC (0x001C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FBox                                        FixedRelativeBoundingBox;                      // 0x01C8 (0x001C) [0x0000000000000001] (CPF_Edit)    
	class UInterpCurveEdSetup*                         CurveEdSetup;                                  // 0x01E4 (0x0004) [0x0000000000000008] (CPF_ExportObject)
	int32_t                                            ReflectionCount;                               // 0x01E8 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    ThumbnailAngle;                                // 0x01EC (0x000C) [0x0000000000000000]               
	float                                              ThumbnailDistance;                             // 0x01F8 (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  ThumbnailImage;                                // 0x01FC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LensFlare");
		}

		return uClassPointer;
	};

};

// Class Engine.TextureFlipBook
// 0x0040 (0x01C8 - 0x0208)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                       // 0x01C8 (0x0004) [0x0000000000801002] (CPF_Const | CPF_Native | CPF_NoExport)
	float                                              TimeIntoMovie;                                 // 0x01CC (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              TimeSinceLastFrame;                            // 0x01D0 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              HorizontalScale;                               // 0x01D4 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              VerticalScale;                                 // 0x01D8 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint32_t                                           bPaused : 1;                                   // 0x01DC (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)
	uint32_t                                           bStopped : 1;                                  // 0x01DC (0x0004) [0x0000000000000002] [0x00000002] (CPF_Const)
	uint32_t                                           bLooping : 1;                                  // 0x01DC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bAutoPlay : 1;                                 // 0x01DC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	int32_t                                            HorizontalImages;                              // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            VerticalImages;                                // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	ETextureFlipBookMethod                             FBMethod;                                      // 0x01E8 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              FrameRate;                                     // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FrameTime;                                     // 0x01F0 (0x0004) [0x0000000000000000]               
	int32_t                                            CurrentRow;                                    // 0x01F4 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            CurrentColumn;                                 // 0x01F8 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              RenderOffsetU;                                 // 0x01FC (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              RenderOffsetV;                                 // 0x0200 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FPointer                                    ReleaseResourcesFence;                         // 0x0204 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TextureFlipBook");
		}

		return uClassPointer;
	};

	void SetCurrentFrame(int32_t Row, int32_t Col);
	void Stop();
	void Pause();
	void Play();
};

// Class Engine.Texture2DComposite
// 0x0018 (0x00F8 - 0x0110)
class UTexture2DComposite : public UTexture
{
public:
	class TArray<struct FSourceTexture2DRegion>        SourceRegions;                                 // 0x00F8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            MaxTextureSize;                                // 0x0104 (0x0004) [0x0000000000000000]               
	int32_t                                            DestSizeX;                                     // 0x0108 (0x0004) [0x0000000000000000]               
	int32_t                                            DestSizeY;                                     // 0x010C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Texture2DComposite");
		}

		return uClassPointer;
	};

	void ResetSourceRegions();
	void UpdateCompositeTexture(int32_t NumMipsToGenerate);
	bool SourceTexturesFullyStreamedIn();
};

// Class Engine.Texture2DDynamic
// 0x0014 (0x00F8 - 0x010C)
class UTexture2DDynamic : public UTexture
{
public:
	int32_t                                            SizeX;                                         // 0x00F8 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	int32_t                                            SizeY;                                         // 0x00FC (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	EPixelFormat                                       Format;                                        // 0x0100 (0x0001) [0x0000000000003000] (CPF_Native | CPF_Transient)
	int32_t                                            NumMips;                                       // 0x0104 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	uint32_t                                           bIsResolveTarget : 1;                          // 0x0108 (0x0004) [0x0000000000003000] [0x00000001] (CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Texture2DDynamic");
		}

		return uClassPointer;
	};

	static class UTexture2DDynamic* Create(int32_t InSizeX, int32_t InSizeY, EPixelFormat optionalInFormat, bool optionalInIsResolveTarget);
	void UpdateMipFromPNG(int32_t MipIdx, class TArray<uint8_t>& outMipData);
	void UpdateMipFromJPEG(int32_t MipIdx, class TArray<uint8_t>& outMipData);
	void UpdateMip(int32_t MipIdx, class TArray<uint8_t>& outMipData);
	void Init(int32_t InSizeX, int32_t InSizeY, EPixelFormat optionalInFormat, bool optionalInIsResolveTarget);
};

// Class Engine.TextureCube
// 0x002C (0x00F8 - 0x0124)
class UTextureCube : public UTexture
{
public:
	int32_t                                            SizeX;                                         // 0x00F8 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            SizeY;                                         // 0x00FC (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	EPixelFormat                                       Format;                                        // 0x0100 (0x0001) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            NumMips;                                       // 0x0104 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint32_t                                           bIsCubemapValid : 1;                           // 0x0108 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	class UTexture2D*                                  FacePosX;                                      // 0x010C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTexture2D*                                  FaceNegX;                                      // 0x0110 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTexture2D*                                  FacePosY;                                      // 0x0114 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTexture2D*                                  FaceNegY;                                      // 0x0118 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTexture2D*                                  FacePosZ;                                      // 0x011C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UTexture2D*                                  FaceNegZ;                                      // 0x0120 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TextureCube");
		}

		return uClassPointer;
	};

};

// Class Engine.TextureMovie
// 0x0050 (0x00F8 - 0x0148)
class UTextureMovie : public UTexture
{
public:
	int32_t                                            SizeX;                                         // 0x00F8 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            SizeY;                                         // 0x00FC (0x0004) [0x0000000000000002] (CPF_Const)   
	EPixelFormat                                       Format;                                        // 0x0100 (0x0001) [0x0000000000000002] (CPF_Const)   
	ETextureAddress                                    AddressX;                                      // 0x0101 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ETextureAddress                                    AddressY;                                      // 0x0102 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EMovieStreamSource                                 MovieStreamSource;                             // 0x0103 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      DecoderClass;                                  // 0x0104 (0x0004) [0x0000000000000002] (CPF_Const)   
	class UCodecMovie*                                 Decoder;                                       // 0x0108 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint32_t                                           Paused : 1;                                    // 0x010C (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           Stopped : 1;                                   // 0x010C (0x0004) [0x0000000000002002] [0x00000002] (CPF_Const | CPF_Transient)
	uint32_t                                           Looping : 1;                                   // 0x010C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           ResetOnLastFrame : 1;                          // 0x010C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           AutoPlay : 1;                                  // 0x010C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	struct FUntypedBulkData_Mirror                     Data;                                          // 0x0110 (0x0034) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    ReleaseCodecFence;                             // 0x0144 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TextureMovie");
		}

		return uClassPointer;
	};

	void Stop();
	void Pause();
	void Play();
};

// Class Engine.TextureRenderTarget
// 0x0008 (0x00F8 - 0x0100)
class UTextureRenderTarget : public UTexture
{
public:
	uint32_t                                           bUpdateImmediate : 1;                          // 0x00F8 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bNeedsTwoCopies : 1;                           // 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bRenderOnce : 1;                               // 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	float                                              TargetGamma;                                   // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TextureRenderTarget");
		}

		return uClassPointer;
	};

};

// Class Engine.TextureRenderTarget2D
// 0x0020 (0x0100 - 0x0120)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int32_t                                            SizeX;                                         // 0x0100 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            SizeY;                                         // 0x0104 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	EPixelFormat                                       Format;                                        // 0x0108 (0x0001) [0x0000000000000002] (CPF_Const)   
	ETextureAddress                                    AddressX;                                      // 0x0109 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ETextureAddress                                    AddressY;                                      // 0x010A (0x0001) [0x0000000000000001] (CPF_Edit)    
	ETextureFilter                                     TextureFilterForPS3;                           // 0x010B (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                ClearColor;                                    // 0x010C (0x0010) [0x0000000000000002] (CPF_Const)   
	uint32_t                                           bForceLinearGamma : 1;                         // 0x011C (0x0004) [0x0000000000002003] [0x00000001] (CPF_Edit | CPF_Const | CPF_Transient)
	uint32_t                                           bFullHDTexture : 1;                            // 0x011C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		}

		return uClassPointer;
	};

	static class UTextureRenderTarget2D* Create(int32_t InSizeX, int32_t InSizeY, EPixelFormat optionalInFormat, const struct FLinearColor& optionalInClearColor, bool optionalBOnlyRenderOnce);
};

// Class Engine.ScriptedTexture
// 0x0010 (0x0120 - 0x0130)
class UScriptedTexture : public UTextureRenderTarget2D
{
public:
	uint32_t                                           bNeedsUpdate : 1;                              // 0x0120 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bSkipNextClear : 1;                            // 0x0120 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	struct FScriptDelegate                             __Render__Delegate;                            // 0x0124 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ScriptedTexture");
		}

		return uClassPointer;
	};

	void Render(class UCanvas* C);
};

// Class Engine.TextureRenderTargetCube
// 0x0005 (0x0100 - 0x0105)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int32_t                                            SizeX;                                         // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	EPixelFormat                                       Format;                                        // 0x0104 (0x0001) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		}

		return uClassPointer;
	};

};

// Class Engine.AudioDevice
// 0x0284 (0x0040 - 0x02C4)
class UAudioDevice : public USubsystem
{
public:
	int32_t                                            MaxChannels;                                   // 0x0040 (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	int32_t                                            CommonAudioPoolSize;                           // 0x0044 (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	float                                              LowPassFilterResonance;                        // 0x0048 (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	float                                              MinCompressedDurationEditor;                   // 0x004C (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	float                                              MinCompressedDurationGame;                     // 0x0050 (0x0004) [0x0000000000004002] (CPF_Const | CPF_Config)
	class FString                                      ChirpInSoundNodeWaveName;                      // 0x0054 (0x000C) [0x0000000000404002] (CPF_Const | CPF_Config | CPF_NeedCtorLink)
	class USoundNodeWave*                              ChirpInSoundNodeWave;                          // 0x0060 (0x0004) [0x0000000000000002] (CPF_Const)   
	class FString                                      ChirpOutSoundNodeWaveName;                     // 0x0064 (0x000C) [0x0000000000404002] (CPF_Const | CPF_Config | CPF_NeedCtorLink)
	class USoundNodeWave*                              ChirpOutSoundNodeWave;                         // 0x0070 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FPointer                                    CommonAudioPool;                               // 0x0074 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            CommonAudioPoolFreeBytes;                      // 0x0078 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<class UAudioComponent*>               AudioComponents;                               // 0x007C (0x000C) [0x000000000448200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FPointer>                      Sources;                                       // 0x0088 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FPointer>                      FreeSources;                                   // 0x0094 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint8_t                                            UnknownData00[0x3C];                            // 0x00A0 (0x003C) MISSED OFFSET
	uint32_t                                           bGameWasTicking : 1;                           // 0x00DC (0x0004) [0x0000000000001002] [0x00000001] (CPF_Const | CPF_Native)
	uint32_t                                           bSoundSpawningEnabled : 1;                     // 0x00DC (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	class TArray<struct FListener>                     Listeners;                                     // 0x00E0 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FQWord                                      CurrentTick;                                   // 0x00EC (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint8_t                                            UnknownData01[0x12C];                          // 0x00F4 (0x012C) MISSED OFFSET
	struct FPointer                                    Effects;                                       // 0x0220 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class FName                                        BaseSoundModeName;                             // 0x0224 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	class USoundMode*                                  CurrentMode;                                   // 0x022C (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     SoundModeStartTime;                            // 0x0230 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     SoundModeFadeInStartTime;                      // 0x0238 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     SoundModeFadeInEndTime;                        // 0x0240 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     SoundModeEndTime;                              // 0x0248 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            ListenerVolumeIndex;                           // 0x0250 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FInteriorSettings                           ListenerInteriorSettings;                      // 0x0254 (0x0024) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     InteriorStartTime;                             // 0x0278 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     InteriorEndTime;                               // 0x0280 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     ExteriorEndTime;                               // 0x0288 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     InteriorLPFEndTime;                            // 0x0290 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FDouble                                     ExteriorLPFEndTime;                            // 0x0298 (0x0008) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              InteriorVolumeInterp;                          // 0x02A0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              InteriorLPFInterp;                             // 0x02A4 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              ExteriorVolumeInterp;                          // 0x02A8 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              ExteriorLPFInterp;                             // 0x02AC (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class UAudioComponent*                             TestAudioComponent;                            // 0x02B0 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FPointer                                    TextToSpeech;                                  // 0x02B4 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	EDebugState                                        DebugState;                                    // 0x02B8 (0x0001) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              TransientMasterVolume;                         // 0x02BC (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              LastUpdateTime;                                // 0x02C0 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AudioDevice");
		}

		return uClassPointer;
	};

	class USoundClass* FindSoundClass(const class FName& SoundClassName);
	bool SetSoundMode(const class FName& NewMode);
};

// Class Engine.SoundClass
// 0x0070 (0x003C - 0x00AC)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                    // 0x003C (0x0020) [0x0000000000000001] (CPF_Edit)    
	class TArray<class FName>                          ChildClassNames;                               // 0x005C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bIsChild : 1;                                  // 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	int32_t                                            MenuID;                                        // 0x006C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	uint8_t                                            UnknownData00[0x3C];                            // 0x0070 (0x003C) MISSED OFFSET

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundClass");
		}

		return uClassPointer;
	};

};

// Class Engine.SoundMode
// 0x0044 (0x003C - 0x0080)
class USoundMode : public UObject
{
public:
	uint32_t                                           bApplyEQ : 1;                                  // 0x003C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FAudioEQEffect                              EQSettings;                                    // 0x0040 (0x0024) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FSoundClassAdjuster>           SoundClassEffects;                             // 0x0064 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              InitialDelay;                                  // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeInTime;                                    // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              Duration;                                      // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FadeOutTime;                                   // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SoundMode");
		}

		return uClassPointer;
	};

};

// Class Engine.MatineePawn
// 0x0004 (0x0450 - 0x0454)
class AMatineePawn : public APawn
{
public:
	class USkeletalMesh*                               PreviewMesh;                                   // 0x0450 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MatineePawn");
		}

		return uClassPointer;
	};

};

// Class Engine.Scout
// 0x008C (0x0450 - 0x04DC)
class AScout : public APawn
{
public:
	class TArray<struct FPathSizeInfo>                 PathSizes;                                     // 0x0450 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              TestJumpZ;                                     // 0x045C (0x0004) [0x0000000000000000]               
	float                                              TestGroundSpeed;                               // 0x0460 (0x0004) [0x0000000000000000]               
	float                                              TestMaxFallSpeed;                              // 0x0464 (0x0004) [0x0000000000000000]               
	float                                              TestFallSpeed;                                 // 0x0468 (0x0004) [0x0000000000000000]               
	float                                              MaxLandingVelocity;                            // 0x046C (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            MinNumPlayerStarts;                            // 0x0470 (0x0004) [0x0000000000000000]               
	class UClass*                                      DefaultReachSpecClass;                         // 0x0474 (0x0004) [0x0000000000000000]               
	class TArray<struct FColor>                        EdgePathColors;                                // 0x0478 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              NavMeshGen_StepSize;                           // 0x0484 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_EntityHalfHeight;                   // 0x0488 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_StartingHeightOffset;               // 0x048C (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MaxDropHeight;                      // 0x0490 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MaxStepHeight;                      // 0x0494 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_VertZDeltaSnapThresh;               // 0x0498 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MinPolyArea;                        // 0x049C (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_BorderBackfill_CheckDist;           // 0x04A0 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MinMergeDotAreaThreshold;           // 0x04A4 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MinMergeDotSmallArea;               // 0x04A8 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MinMergeDotLargeArea;               // 0x04AC (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MaxPolyHeight;                      // 0x04B0 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_HeightMergeThreshold;               // 0x04B4 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_EdgeMaxDelta;                       // 0x04B8 (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MaxGroundCheckSize;                 // 0x04BC (0x0004) [0x0000000000000000]               
	float                                              NavMeshGen_MinEdgeLength;                      // 0x04C0 (0x0004) [0x0000000000000000]               
	uint32_t                                           NavMeshGen_ExpansionDoObstacleMeshSimplification : 1;// 0x04C4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bHightlightOneWayReachSpecs : 1;               // 0x04C4 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              MinMantleFallDist;                             // 0x04C8 (0x0004) [0x0000000000000000]               
	float                                              MaxMantleFallDist;                             // 0x04CC (0x0004) [0x0000000000000000]               
	float                                              MinMantleLateralDist;                          // 0x04D0 (0x0004) [0x0000000000000000]               
	float                                              MaxMantleLateralDist;                          // 0x04D4 (0x0004) [0x0000000000000000]               
	float                                              MaxMantleFallTime;                             // 0x04D8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Scout");
		}

		return uClassPointer;
	};

	void eventPreBeginPlay();
};

// Class Engine.Light
// 0x0008 (0x01C8 - 0x01D0)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bEnabled : 1;                                  // 0x01CC (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Light");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void eventReplicatedEvent(const class FName& VarName);
};

// Class Engine.DirectionalLight
// 0x0000 (0x01D0 - 0x01D0)
class ADirectionalLight : public ALight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DirectionalLight");
		}

		return uClassPointer;
	};

};

// Class Engine.DirectionalLightToggleable
// 0x0000 (0x01D0 - 0x01D0)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DirectionalLightToggleable");
		}

		return uClassPointer;
	};

};

// Class Engine.DominantDirectionalLight
// 0x0000 (0x01D0 - 0x01D0)
class ADominantDirectionalLight : public ADirectionalLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DominantDirectionalLight");
		}

		return uClassPointer;
	};

};

// Class Engine.DominantDirectionalLightMovable
// 0x0000 (0x01D0 - 0x01D0)
class ADominantDirectionalLightMovable : public ADominantDirectionalLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DominantDirectionalLightMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.PointLight
// 0x0000 (0x01D0 - 0x01D0)
class APointLight : public ALight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PointLight");
		}

		return uClassPointer;
	};

};

// Class Engine.DominantPointLight
// 0x0000 (0x01D0 - 0x01D0)
class ADominantPointLight : public APointLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DominantPointLight");
		}

		return uClassPointer;
	};

};

// Class Engine.PointLightMovable
// 0x0000 (0x01D0 - 0x01D0)
class APointLightMovable : public APointLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PointLightMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.PointLightToggleable
// 0x0000 (0x01D0 - 0x01D0)
class APointLightToggleable : public APointLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PointLightToggleable");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct APointLightToggleable_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct APointLightToggleable_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
};

// Class Engine.SkyLight
// 0x0000 (0x01D0 - 0x01D0)
class ASkyLight : public ALight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkyLight");
		}

		return uClassPointer;
	};

};

// Class Engine.SkyLightToggleable
// 0x0000 (0x01D0 - 0x01D0)
class ASkyLightToggleable : public ASkyLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkyLightToggleable");
		}

		return uClassPointer;
	};

};

// Class Engine.SpotLight
// 0x0000 (0x01D0 - 0x01D0)
class ASpotLight : public ALight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpotLight");
		}

		return uClassPointer;
	};

};

// Class Engine.DominantSpotLight
// 0x0000 (0x01D0 - 0x01D0)
class ADominantSpotLight : public ASpotLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DominantSpotLight");
		}

		return uClassPointer;
	};

};

// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x01D0 - 0x01D0)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GeneratedMeshAreaLight");
		}

		return uClassPointer;
	};

};

// Class Engine.SpotLightMovable
// 0x0000 (0x01D0 - 0x01D0)
class ASpotLightMovable : public ASpotLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpotLightMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.SpotLightToggleable
// 0x0000 (0x01D0 - 0x01D0)
class ASpotLightToggleable : public ASpotLight
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpotLightToggleable");
		}

		return uClassPointer;
	};

	void ApplyCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord& outRecord);
	void CreateCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord& outRecord);
	bool ShouldSaveForCheckpoint();
};

// Class Engine.StaticLightCollectionActor
// 0x0010 (0x01D0 - 0x01E0)
class AStaticLightCollectionActor : public ALight
{
public:
	class TArray<class ULightComponent*>               LightComponents;                               // 0x01D0 (0x000C) [0x000000000448000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	int32_t                                            MaxLightComponents;                            // 0x01DC (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.StaticLightCollectionActor");
		}

		return uClassPointer;
	};

};

// Class Engine.LightComponent
// 0x0113 (0x0055 - 0x0168)
class ULightComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                     // 0x0058 (0x0004) [0x0000000001003002] (CPF_Const | CPF_Native | CPF_Transient)
	uint8_t                                            UnknownData00[0x4];                              // 0x005C (0x0004) MISSED OFFSET
	struct FMatrix                                     WorldToLight;                                  // 0x0060 (0x0040) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FMatrix                                     LightToWorld;                                  // 0x00A0 (0x0040) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FGuid                                       LightGuid;                                     // 0x00E0 (0x0010) [0x0000000000200002] (CPF_Const)   
	struct FGuid                                       LightmapGuid;                                  // 0x00F0 (0x0010) [0x0000000000200002] (CPF_Const)   
	float                                              Brightness;                                    // 0x0100 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	struct FColor                                      LightColor;                                    // 0x0104 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const | CPF_Interp)
	class ULightFunction*                              Function;                                      // 0x0108 (0x0004) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bEnabled : 1;                                  // 0x010C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           CastShadows : 1;                               // 0x010C (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           CastStaticShadows : 1;                         // 0x010C (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           CastDynamicShadows : 1;                        // 0x010C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bCastCompositeShadow : 1;                      // 0x010C (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bAffectCompositeShadowDirection : 1;           // 0x010C (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bNonModulatedSelfShadowing : 1;                // 0x010C (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bSelfShadowOnly : 1;                           // 0x010C (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit | CPF_Interp)
	uint32_t                                           bAllowPreShadow : 1;                           // 0x010C (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bForceDynamicLight : 1;                        // 0x010C (0x0004) [0x0000000000000002] [0x00000200] (CPF_Const)
	uint32_t                                           UseDirectLightMap : 1;                         // 0x010C (0x0004) [0x0000000000000002] [0x00000400] (CPF_Const)
	uint32_t                                           bHasLightEverBeenBuiltIntoLightMap : 1;        // 0x010C (0x0004) [0x0000000000000002] [0x00000800] (CPF_Const)
	uint32_t                                           bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;// 0x010C (0x0004) [0x0000000000000002] [0x00001000] (CPF_Const)
	uint32_t                                           bRenderLightShafts : 1;                        // 0x010C (0x0004) [0x0000000000000001] [0x00002000] (CPF_Edit)
	uint32_t                                           bUseImageReflectionSpecular : 1;               // 0x010C (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bPrecomputedLightingIsValid : 1;               // 0x010C (0x0004) [0x0000000000000002] [0x00008000] (CPF_Const)
	uint32_t                                           bExplicitlyAssignedLight : 1;                  // 0x010C (0x0004) [0x0000000000000002] [0x00010000] (CPF_Const)
	uint32_t                                           bAllowCompositingIntoDLE : 1;                  // 0x010C (0x0004) [0x0000000000000000] [0x00020000] 
	class ULightEnvironmentComponent*                  LightEnvironment;                              // 0x0110 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FLightingChannelContainer                   LightingChannels;                              // 0x0114 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ELightAffectsClassification                        LightAffectsClassification;                    // 0x0118 (0x0001) [0x0000000000020003] (CPF_Edit | CPF_Const | CPF_EditConst)
	ELightShadowMode                                   LightShadowMode;                               // 0x0119 (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                ModShadowColor;                                // 0x011C (0x0010) [0x0000000000000001] (CPF_Edit)    
	float                                              ModShadowFadeoutTime;                          // 0x012C (0x0004) [0x0000000000000000]               
	float                                              ModShadowFadeoutExponent;                      // 0x0130 (0x0004) [0x0000000000000000]               
	int32_t                                            LightListIndex;                                // 0x0134 (0x0004) [0x0000000000201002] (CPF_Const | CPF_Native)
	EShadowProjectionTechnique                         ShadowProjectionTechnique;                     // 0x0138 (0x0001) [0x0000000000000000]               
	EShadowFilterQuality                               ShadowFilterQuality;                           // 0x0139 (0x0001) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MinShadowResolution;                           // 0x013C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxShadowResolution;                           // 0x0140 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            ShadowFadeResolution;                          // 0x0144 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionDepthRange;                           // 0x0148 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomScale;                                    // 0x014C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              BloomThreshold;                                // 0x0150 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BloomScreenBlendThreshold;                     // 0x0154 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      BloomTint;                                     // 0x0158 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              RadialBlurPercent;                             // 0x015C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OcclusionMaskDarkness;                         // 0x0160 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ReflectionSpecularBrightness;                  // 0x0164 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightComponent");
		}

		return uClassPointer;
	};

	void OnUpdatePropertyLightColor();
	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyOcclusionMaskDarkness();
	void OnUpdatePropertyBloomTint();
	void OnUpdatePropertyBloomScale();
	void UpdateLightShaftParameters();
	void UpdateColorAndBrightness();
	struct FVector GetDirection();
	struct FVector GetOrigin();
	void SetLightProperties(float optionalNewBrightness, const struct FColor& optionalNewLightColor, class ULightFunction* optionalNewLightFunction);
	void SetEnabled(bool bSetEnabled);
};

// Class Engine.DirectionalLightComponent
// 0x0020 (0x0168 - 0x0188)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                 // 0x0168 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WholeSceneDynamicShadowRadius;                 // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	int32_t                                            NumWholeSceneDynamicShadowCascades;            // 0x0170 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              CascadeDistributionExponent;                   // 0x0174 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                             // 0x0178 (0x0010) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DirectionalLightComponent");
		}

		return uClassPointer;
	};

	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyLightColor();
};

// Class Engine.DominantDirectionalLightComponent
// 0x00C4 (0x0188 - 0x024C)
class UDominantDirectionalLightComponent : public UDirectionalLightComponent
{
public:
	uint8_t                                            UnknownData00[0x8];                              // 0x0188 (0x0008) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                       // 0x0190 (0x00B0) [0x0000000000000002] (CPF_Const)   
	struct FArray_Mirror                               DominantLightShadowMap;                        // 0x0240 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DominantDirectionalLightComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.PointLightComponent
// 0x0090 (0x0168 - 0x01F8)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                        // 0x0168 (0x0004) [0x0000000000000000]               
	float                                              Radius;                                        // 0x016C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              FalloffExponent;                               // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ShadowFalloffExponent;                         // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinShadowFalloffRadius;                        // 0x0178 (0x0004) [0x0000000000000000]               
	uint8_t                                            UnknownData00[0x4];                              // 0x017C (0x0004) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                           // 0x0180 (0x0040) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     Translation;                                   // 0x01C0 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint8_t                                            UnknownData01[0x4];                              // 0x01CC (0x0004) MISSED OFFSET
	struct FPlane                                      ShadowPlane;                                   // 0x01D0 (0x0010) [0x0000000000000002] (CPF_Const)   
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                            // 0x01E0 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FLightmassPointLightSettings                LightmassSettings;                             // 0x01E4 (0x0010) [0x0000000000000001] (CPF_Edit)    
	class UDrawLightRadiusComponent*                   PreviewLightSourceRadius;                      // 0x01F4 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PointLightComponent");
		}

		return uClassPointer;
	};

	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyLightColor();
	void SetTranslation(const struct FVector& NewTranslation);
};

// Class Engine.DominantPointLightComponent
// 0x0000 (0x01F8 - 0x01F8)
class UDominantPointLightComponent : public UPointLightComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DominantPointLightComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.SpotLightComponent
// 0x0020 (0x01F8 - 0x0218)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                // 0x01F8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OuterConeAngle;                                // 0x01FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LightShaftConeAngle;                           // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UDrawLightConeComponent*                     PreviewInnerCone;                              // 0x0204 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDrawLightConeComponent*                     PreviewOuterCone;                              // 0x0208 (0x0004) [0x000000000408000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	struct FRotator                                    Rotation;                                      // 0x020C (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SpotLightComponent");
		}

		return uClassPointer;
	};

	void SetRotation(const struct FRotator& NewRotation);
};

// Class Engine.DominantSpotLightComponent
// 0x00C4 (0x0218 - 0x02DC)
class UDominantSpotLightComponent : public USpotLightComponent
{
public:
	uint8_t                                            UnknownData00[0x8];                              // 0x0218 (0x0008) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                       // 0x0220 (0x00B0) [0x0000000000000002] (CPF_Const)   
	struct FArray_Mirror                               DominantLightShadowMap;                        // 0x02D0 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DominantSpotLightComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.SkyLightComponent
// 0x0008 (0x0168 - 0x0170)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                               // 0x0168 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FColor                                      LowerColor;                                    // 0x016C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkyLightComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.SphericalHarmonicLightComponent
// 0x009C (0x0168 - 0x0204)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	uint8_t                                            UnknownData00[0x8];                              // 0x0168 (0x0008) MISSED OFFSET
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                    // 0x0170 (0x0090) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bRenderBeforeModShadows : 1;                   // 0x0200 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SphericalHarmonicLightComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.LightEnvironmentComponent
// 0x001B (0x0055 - 0x0070)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0058 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bForceNonCompositeDynamicLights : 1;           // 0x0058 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bAllowDynamicShadowsOnTranslucency : 1;        // 0x0058 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bAllowPreShadow : 1;                           // 0x0058 (0x0004) [0x0000000000002002] [0x00000008] (CPF_Const | CPF_Transient)
	uint32_t                                           bTranslucencyShadowed : 1;                     // 0x0058 (0x0004) [0x0000000000002002] [0x00000010] (CPF_Const | CPF_Transient)
	float                                              DominantShadowFactor;                          // 0x005C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class ULightComponent*                             AffectingDominantLight;                        // 0x0060 (0x0004) [0x000000000408200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class TArray<class UPrimitiveComponent*>           AffectedComponents;                            // 0x0064 (0x000C) [0x000000000448200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightEnvironmentComponent");
		}

		return uClassPointer;
	};

	bool IsEnabled();
	void SetEnabled(bool bNewEnabled);
};

// Class Engine.DynamicLightEnvironmentComponent
// 0x00A8 (0x0070 - 0x0118)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct FPointer                                    State;                                         // 0x0070 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	float                                              InvisibleUpdateTime;                           // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MinTimeBetweenFullUpdates;                     // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              VelocityUpdateTimeScale;                       // 0x007C (0x0004) [0x0000000000000000]               
	float                                              ShadowInterpolationSpeed;                      // 0x0080 (0x0004) [0x0000000000000000]               
	int32_t                                            NumVolumeVisibilitySamples;                    // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LightingBoundsScale;                           // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                AmbientShadowColor;                            // 0x008C (0x0010) [0x0000000000000000]               
	struct FVector                                     AmbientShadowSourceDirection;                  // 0x009C (0x000C) [0x0000000000000000]               
	struct FLinearColor                                AmbientGlow;                                   // 0x00A8 (0x0010) [0x0000000000000000]               
	float                                              LightDistance;                                 // 0x00B8 (0x0004) [0x0000000000000000]               
	float                                              ShadowDistance;                                // 0x00BC (0x0004) [0x0000000000000000]               
	uint32_t                                           bCastShadows : 1;                              // 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCompositeShadowsFromDynamicLights : 1;        // 0x00C0 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bForceCompositeAllLights : 1;                  // 0x00C0 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bAffectedBySmallDynamicLights : 1;             // 0x00C0 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bUseBooleanEnvironmentShadowing : 1;           // 0x00C0 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bShadowFromEnvironment : 1;                    // 0x00C0 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bDynamic : 1;                                  // 0x00C0 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bSynthesizeDirectionalLight : 1;               // 0x00C0 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bSynthesizeSHLight : 1;                        // 0x00C0 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bRequiresNonLatentUpdates : 1;                 // 0x00C0 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bTraceFromClosestBoundsPoint : 1;              // 0x00C0 (0x0004) [0x0000000000000000] [0x00000400] 
	uint32_t                                           bIsCharacterLightEnvironment : 1;              // 0x00C0 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bOverrideOwnerLightingChannels : 1;            // 0x00C0 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bAlwaysInfluencedByDominantDirectionalLight : 1;// 0x00C0 (0x0004) [0x0000000000000000] [0x00002000] 
	float                                              ModShadowFadeoutTime;                          // 0x00C4 (0x0004) [0x0000000000000000]               
	float                                              ModShadowFadeoutExponent;                      // 0x00C8 (0x0004) [0x0000000000000000]               
	struct FLinearColor                                MaxModulatedShadowColor;                       // 0x00CC (0x0010) [0x0000000000000000]               
	float                                              DominantShadowTransitionStartDistance;         // 0x00DC (0x0004) [0x0000000000000000]               
	float                                              DominantShadowTransitionEndDistance;           // 0x00E0 (0x0004) [0x0000000000000000]               
	float                                              MinShadowAngle;                                // 0x00E4 (0x0004) [0x0000000000000000]               
	EDynamicLightEnvironmentBoundsMethod               BoundsMethod;                                  // 0x00E8 (0x0001) [0x0000000000000000]               
	struct FBoxSphereBounds                            OverriddenBounds;                              // 0x00EC (0x001C) [0x0000000000000000]               
	struct FLightingChannelContainer                   OverriddenLightingChannels;                    // 0x0108 (0x0004) [0x0000000000000000]               
	class TArray<class ULightComponent*>               OverriddenLightComponents;                     // 0x010C (0x000C) [0x000000000448000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicLightEnvironmentComponent");
		}

		return uClassPointer;
	};

	void ResetEnvironment();
};

// Class Engine.ParticleLightEnvironmentComponent
// 0x0014 (0x0118 - 0x012C)
class UParticleLightEnvironmentComponent : public UDynamicLightEnvironmentComponent
{
public:
	int32_t                                            ReferenceCount;                                // 0x0118 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            NumPooledReuses;                               // 0x011C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class AActor*                                      SharedInstigator;                              // 0x0120 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	class UParticleSystem*                             SharedParticleSystem;                          // 0x0124 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint32_t                                           bAllowDLESharing : 1;                          // 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ParticleLightEnvironmentComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawLightConeComponent
// 0x0000 (0x01E8 - 0x01E8)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawLightConeComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.DrawLightRadiusComponent
// 0x0000 (0x01EC - 0x01EC)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DrawLightRadiusComponent");
		}

		return uClassPointer;
	};

};

// Class Engine.LightFunction
// 0x0014 (0x003C - 0x0050)
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                // 0x003C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     Scale;                                         // 0x0040 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              DisabledBrightness;                            // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LightFunction");
		}

		return uClassPointer;
	};

};

// Class Engine.SkeletalMeshComponent
// 0x0530 (0x01E4 - 0x0714)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                  // 0x01E4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                       // 0x01E8 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UAnimTree*                                   AnimTreeTemplate;                              // 0x01EC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UAnimNode*                                   Animations;                                    // 0x01F0 (0x0004) [0x000000000440000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<class UAnimNode*>                     AnimTickArray;                                 // 0x01F4 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class UAnimNode*>                     AnimAlwaysTickArray;                           // 0x0200 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<int32_t>                              AnimTickRelevancyArray;                        // 0x020C (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<float>                                AnimTickWeightsArray;                          // 0x0218 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<class USkelControlBase*>              SkelControlTickArray;                          // 0x0224 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class UPhysicsAsset*                               PhysicsAsset;                                  // 0x0230 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                          // 0x0234 (0x0004) [0x000000000440200A] (CPF_Const | CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline)
	struct FPointer                                    ApexClothing;                                  // 0x0238 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	float                                              PhysicsWeight;                                 // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              GlobalAnimRateScale;                           // 0x0240 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              StreamingDistanceMultiplier;                   // 0x0244 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    MeshObject;                                    // 0x0248 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FColor                                      WireframeColor;                                // 0x024C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FBoneAtom>                     SpaceBases;                                    // 0x0250 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FBoneAtom>                     LocalAtoms;                                    // 0x025C (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FBoneAtom>                     CachedLocalAtoms;                              // 0x0268 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FBoneAtom>                     CachedSpaceBases;                              // 0x0274 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            LowUpdateFrameRate;                            // 0x0280 (0x0004) [0x0000000000044002] (CPF_Const | CPF_Config | CPF_GlobalConfig)
	class TArray<uint8_t>                              RequiredBones;                                 // 0x0284 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<uint8_t>                              ComposeOrderedRequiredBones;                   // 0x0290 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class USkeletalMeshComponent*                      ParentAnimComponent;                           // 0x029C (0x0004) [0x000000000408000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class TArray<int32_t>                              ParentBoneMap;                                 // 0x02A0 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class UAnimSet*>                      AnimSets;                                      // 0x02AC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UAnimSet*>                      TemporarySavedAnimSets;                        // 0x02B8 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class UMorphTargetSet*>               MorphSets;                                     // 0x02C4 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FActiveMorph>                  ActiveMorphs;                                  // 0x02D0 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class TArray<struct FActiveMorph>                  ActiveCurveMorphs;                             // 0x02DC (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	uint8_t                                            UnknownData00[0x3C];                            // 0x02E8 (0x003C) MISSED OFFSET
	class TArray<struct FAttachment>                   Attachments;                                   // 0x0324 (0x000C) [0x0000000000680002] (CPF_Const | CPF_Component | CPF_NeedCtorLink)
	class TArray<uint8_t>                              SkelControlIndex;                              // 0x0330 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	class TArray<uint8_t>                              PostPhysSkelControlIndex;                      // 0x033C (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            ForcedLodModel;                                // 0x0348 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MinLodModel;                                   // 0x034C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            PredictedLODLevel;                             // 0x0350 (0x0004) [0x0000000000000000]               
	int32_t                                            OldPredictedLODLevel;                          // 0x0354 (0x0004) [0x0000000000000000]               
	float                                              AnimationLODDistanceFactor;                    // 0x0358 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            AnimationLODFrameRate;                         // 0x035C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MaxDistanceFactor;                             // 0x0360 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            ChunkIndexPreview;                             // 0x0364 (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	int32_t                                            SectionIndexPreview;                           // 0x0368 (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	int32_t                                            bForceWireframe;                               // 0x036C (0x0004) [0x0000000000000000]               
	int32_t                                            bForceRefpose;                                 // 0x0370 (0x0004) [0x0000000000000000]               
	int32_t                                            bOldForceRefPose;                              // 0x0374 (0x0004) [0x0000000000000000]               
	uint32_t                                           bNoSkeletonUpdate : 1;                         // 0x0378 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	int32_t                                            bDisplayBones;                                 // 0x037C (0x0004) [0x0000000000000000]               
	int32_t                                            bShowPrePhysBones;                             // 0x0380 (0x0004) [0x0000000000000000]               
	int32_t                                            bHideSkin;                                     // 0x0384 (0x0004) [0x0000000000000000]               
	int32_t                                            bForceRawOffset;                               // 0x0388 (0x0004) [0x0000000000000000]               
	int32_t                                            bIgnoreControllers;                            // 0x038C (0x0004) [0x0000000000000000]               
	int32_t                                            bTransformFromAnimParent;                      // 0x0390 (0x0004) [0x0000000000000000]               
	int32_t                                            TickTag;                                       // 0x0394 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            InitTag;                                       // 0x0398 (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            CachedAtomsTag;                                // 0x039C (0x0004) [0x0000000000002002] (CPF_Const | CPF_Transient)
	int32_t                                            bUseSingleBodyPhysics;                         // 0x03A0 (0x0004) [0x0000000000000002] (CPF_Const)   
	int32_t                                            bRequiredBonesUpToDate;                        // 0x03A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              MinDistFactorForKinematicUpdate;               // 0x03A8 (0x0004) [0x0000000000000000]               
	int32_t                                            FramesPhysicsAsleep;                           // 0x03AC (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bHasValidBodies : 1;                           // 0x03B0 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	uint32_t                                           bSkipAllUpdateWhenPhysicsAsleep : 1;           // 0x03B0 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bComponentUseFixedSkelBounds : 1;              // 0x03B0 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseBoundsFromParentAnimComponent : 1;         // 0x03B0 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bConsiderAllBodiesForBounds : 1;               // 0x03B0 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bUpdateSkelWhenNotRendered : 1;                // 0x03B0 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bIgnoreControllersWhenNotRendered : 1;         // 0x03B0 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bTickAnimNodesWhenNotRendered : 1;             // 0x03B0 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bNotUpdatingKinematicDueToDistance : 1;        // 0x03B0 (0x0004) [0x0000000000000002] [0x00000100] (CPF_Const)
	uint32_t                                           bForceDiscardRootMotion : 1;                   // 0x03B0 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	uint32_t                                           bNotifyRootMotionProcessed : 1;                // 0x03B0 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bRootMotionModeChangeNotify : 1;               // 0x03B0 (0x0004) [0x0000000000000000] [0x00000800] 
	uint32_t                                           bRootMotionExtractedNotify : 1;                // 0x03B0 (0x0004) [0x0000000000000000] [0x00001000] 
	uint32_t                                           bProcessingRootMotion : 1;                     // 0x03B0 (0x0004) [0x0000000000002000] [0x00002000] (CPF_Transient)
	uint32_t                                           bDisableFaceFXMaterialInstanceCreation : 1;    // 0x03B0 (0x0004) [0x0000000000000001] [0x00004000] (CPF_Edit)
	uint32_t                                           bDisableFaceFX : 1;                            // 0x03B0 (0x0004) [0x0000000000000001] [0x00008000] (CPF_Edit)
	uint32_t                                           bAnimTreeInitialised : 1;                      // 0x03B0 (0x0004) [0x0000000000002002] [0x00010000] (CPF_Const | CPF_Transient)
	uint32_t                                           bForceMeshObjectUpdate : 1;                    // 0x03B0 (0x0004) [0x0000000000002000] [0x00020000] (CPF_Transient)
	uint32_t                                           bHasPhysicsAssetInstance : 1;                  // 0x03B0 (0x0004) [0x0000000000000003] [0x00040000] (CPF_Edit | CPF_Const)
	uint32_t                                           bUpdateKinematicBonesFromAnimation : 1;        // 0x03B0 (0x0004) [0x0000000000000001] [0x00080000] (CPF_Edit)
	uint32_t                                           bUpdateJointsFromAnimation : 1;                // 0x03B0 (0x0004) [0x0000000000000001] [0x00100000] (CPF_Edit)
	uint32_t                                           bSkelCompFixed : 1;                            // 0x03B0 (0x0004) [0x0000000000000002] [0x00200000] (CPF_Const)
	uint32_t                                           bHasHadPhysicsBlendedIn : 1;                   // 0x03B0 (0x0004) [0x0000000000000002] [0x00400000] (CPF_Const)
	uint32_t                                           bForceUpdateAttachmentsInTick : 1;             // 0x03B0 (0x0004) [0x0000000000000001] [0x00800000] (CPF_Edit)
	uint32_t                                           bEnableFullAnimWeightBodies : 1;               // 0x03B0 (0x0004) [0x0000000000002000] [0x01000000] (CPF_Transient)
	uint32_t                                           bPerBoneVolumeEffects : 1;                     // 0x03B0 (0x0004) [0x0000000000000001] [0x02000000] (CPF_Edit)
	uint32_t                                           bPerBoneMotionBlur : 1;                        // 0x03B0 (0x0004) [0x0000000000000001] [0x04000000] (CPF_Edit)
	uint32_t                                           bSyncActorLocationToRootRigidBody : 1;         // 0x03B0 (0x0004) [0x0000000000000001] [0x08000000] (CPF_Edit)
	uint32_t                                           bUseRawData : 1;                               // 0x03B0 (0x0004) [0x0000000000000002] [0x10000000] (CPF_Const)
	uint32_t                                           bDisableWarningWhenAnimNotFound : 1;           // 0x03B0 (0x0004) [0x0000000000000000] [0x20000000] 
	uint32_t                                           bOverrideAttachmentOwnerVisibility : 1;        // 0x03B0 (0x0004) [0x0000000000000000] [0x40000000] 
	uint32_t                                           bNeedsToDeleteHitMask : 1;                     // 0x03B0 (0x0004) [0x0000000000002002] [0x80000000] (CPF_Const | CPF_Transient)
	uint32_t                                           bPauseAnims : 1;                               // 0x03B4 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bChartDistanceFactor : 1;                      // 0x03B4 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bEnableLineCheckWithBounds : 1;                // 0x03B4 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bCanHighlightSelectedSections : 1;             // 0x03B4 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bUpdateMorphWhenParentAnimComponentExists : 1; // 0x03B4 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	struct FVector                                     LineCheckBoundsScale;                          // 0x03B8 (0x000C) [0x0000000000000000]               
	uint32_t                                           bEnableClothSimulation : 1;                    // 0x03C4 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bDisableClothCollision : 1;                    // 0x03C4 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bClothFrozen : 1;                              // 0x03C4 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bAutoFreezeClothWhenNotRendered : 1;           // 0x03C4 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bClothAwakeOnStartup : 1;                      // 0x03C4 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bClothBaseVelClamp : 1;                        // 0x03C4 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bClothBaseVelInterp : 1;                       // 0x03C4 (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)
	uint32_t                                           bAttachClothVertsToBaseBody : 1;               // 0x03C4 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bIsClothOnStaticObject : 1;                    // 0x03C4 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bUpdatedFixedClothVerts : 1;                   // 0x03C4 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bClothPositionalDampening : 1;                 // 0x03C4 (0x0004) [0x0000000000000001] [0x00000400] (CPF_Edit)
	uint32_t                                           bClothWindRelativeToOwner : 1;                 // 0x03C4 (0x0004) [0x0000000000000001] [0x00000800] (CPF_Edit)
	uint32_t                                           bRecentlyRendered : 1;                         // 0x03C4 (0x0004) [0x0000000000002000] [0x00001000] (CPF_Transient)
	uint32_t                                           bCacheAnimSequenceNodes : 1;                   // 0x03C4 (0x0004) [0x0000000000000000] [0x00002000] 
	uint32_t                                           bNeedsInstanceWeightUpdate : 1;                // 0x03C4 (0x0004) [0x0000000000002002] [0x00004000] (CPF_Const | CPF_Transient)
	uint32_t                                           bAlwaysUseInstanceWeights : 1;                 // 0x03C4 (0x0004) [0x0000000000002002] [0x00008000] (CPF_Const | CPF_Transient)
	uint32_t                                           bUpdateComposeSkeletonPasses : 1;              // 0x03C4 (0x0004) [0x0000000000002002] [0x00010000] (CPF_Const | CPF_Transient)
	uint32_t                                           bValidTemporarySavedAnimSets : 1;              // 0x03C4 (0x0004) [0x0000000000003002] [0x00020000] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FBonePair>                     InstanceVertexWeightBones;                     // 0x03C8 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FSkelMeshComponentLODInfo>     LODInfo;                                       // 0x03D4 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	struct FVector                                     FrozenLocalToWorldPos;                         // 0x03E0 (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FRotator                                    FrozenLocalToWorldRot;                         // 0x03EC (0x000C) [0x0000000000000002] (CPF_Const)   
	struct FVector                                     ClothExternalForce;                            // 0x03F8 (0x000C) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     ClothWind;                                     // 0x0404 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ClothBaseVelClampRange;                        // 0x0410 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              ClothBlendWeight;                              // 0x041C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ClothDynamicBlendWeight;                       // 0x0420 (0x0004) [0x0000000000000000]               
	float                                              ClothBlendMinDistanceFactor;                   // 0x0424 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ClothBlendMaxDistanceFactor;                   // 0x0428 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MinPosDampRange;                               // 0x042C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MaxPosDampRange;                               // 0x0438 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MinPosDampScale;                               // 0x0444 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     MaxPosDampScale;                               // 0x0450 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    ClothSim;                                      // 0x045C (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            SceneIndex;                                    // 0x0460 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FVector>                       ClothMeshPosData;                              // 0x0464 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FVector>                       ClothMeshNormalData;                           // 0x0470 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<int32_t>                              ClothMeshIndexData;                            // 0x047C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	int32_t                                            NumClothMeshVerts;                             // 0x0488 (0x0004) [0x0000000000000000]               
	int32_t                                            NumClothMeshIndices;                           // 0x048C (0x0004) [0x0000000000000000]               
	class TArray<int32_t>                              ClothMeshParentData;                           // 0x0490 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	int32_t                                            NumClothMeshParentIndices;                     // 0x049C (0x0004) [0x0000000000000000]               
	class TArray<struct FVector>                       ClothMeshWeldedPosData;                        // 0x04A0 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<struct FVector>                       ClothMeshWeldedNormalData;                     // 0x04AC (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<int32_t>                              ClothMeshWeldedIndexData;                      // 0x04B8 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            ClothDirtyBufferFlag;                          // 0x04C4 (0x0004) [0x0000000000000000]               
	ERBCollisionChannel                                ClothRBChannel;                                // 0x04C8 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRBCollisionChannelContainer                ClothRBCollideWithChannels;                    // 0x04CC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothForceScale;                               // 0x04D0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothImpulseScale;                             // 0x04D4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ClothAttachmentTearFactor;                     // 0x04D8 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bClothUseCompartment : 1;                      // 0x04DC (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              MinDistanceForClothReset;                      // 0x04E0 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FVector                                     LastClothLocation;                             // 0x04E4 (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	ERBCollisionChannel                                ApexClothingRBChannel;                         // 0x04F0 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRBCollisionChannelContainer                ApexClothingRBCollideWithChannels;             // 0x04F4 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	ERBCollisionChannel                                ApexClothingCollisionRBChannel;                // 0x04F8 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bAutoFreezeApexClothingWhenNotRendered : 1;    // 0x04FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bLocalSpaceWind : 1;                           // 0x04FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	struct FVector                                     WindVelocity;                                  // 0x0500 (0x000C) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              WindVelocityBlendTime;                         // 0x050C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	uint32_t                                           bSkipInitClothing : 1;                         // 0x0510 (0x0004) [0x0000000000002002] [0x00000001] (CPF_Const | CPF_Transient)
	struct FPointer                                    SoftBodySim;                                   // 0x0514 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	int32_t                                            SoftBodySceneIndex;                            // 0x0518 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	uint32_t                                           bEnableSoftBodySimulation : 1;                 // 0x051C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	class TArray<struct FVector>                       SoftBodyTetraPosData;                          // 0x0520 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<int32_t>                              SoftBodyTetraIndexData;                        // 0x052C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	int32_t                                            NumSoftBodyTetraVerts;                         // 0x0538 (0x0004) [0x0000000000000000]               
	int32_t                                            NumSoftBodyTetraIndices;                       // 0x053C (0x0004) [0x0000000000000000]               
	float                                              SoftBodyImpulseScale;                          // 0x0540 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSoftBodyFrozen : 1;                           // 0x0544 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bAutoFreezeSoftBodyWhenNotRendered : 1;        // 0x0544 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bSoftBodyAwakeOnStartup : 1;                   // 0x0544 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bSoftBodyUseCompartment : 1;                   // 0x0544 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	ERBCollisionChannel                                SoftBodyRBChannel;                             // 0x0548 (0x0001) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FRBCollisionChannelContainer                SoftBodyRBCollideWithChannels;                 // 0x054C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	struct FPointer                                    SoftBodyASVPlane;                              // 0x0550 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class UMaterial*                                   LimitMaterial;                                 // 0x0554 (0x0004) [0x0000000000000000]               
	uint8_t                                            UnknownData01[0x8];                              // 0x0558 (0x0008) MISSED OFFSET
	struct FBoneAtom                                   RootMotionDelta;                               // 0x0560 (0x0050) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     RootMotionVelocity;                            // 0x05B0 (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     RootBoneTranslation;                           // 0x05BC (0x000C) [0x0000000000002002] (CPF_Const | CPF_Transient)
	struct FVector                                     RootMotionAccelScale;                          // 0x05C8 (0x000C) [0x0000000000000000]               
	ERootMotionMode                                    RootMotionMode;                                // 0x05D4 (0x0001) [0x0000000000000001] (CPF_Edit)    
	ERootMotionMode                                    PreviousRMM;                                   // 0x05D5 (0x0001) [0x0000000000000002] (CPF_Const)   
	ERootMotionMode                                    PendingRMM;                                    // 0x05D6 (0x0001) [0x0000000000000000]               
	ERootMotionMode                                    OldPendingRMM;                                 // 0x05D7 (0x0001) [0x0000000000000000]               
	int32_t                                            bRMMOneFrameDelay;                             // 0x05D8 (0x0004) [0x0000000000000002] (CPF_Const)   
	ERootMotionRotationMode                            RootMotionRotationMode;                        // 0x05DC (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAnimRotationOnly                                  AnimRotationOnly;                              // 0x05DD (0x0001) [0x0000000000000001] (CPF_Edit)    
	EFaceFXBlendMode                                   FaceFXBlendMode;                               // 0x05DE (0x0001) [0x0000000000000001] (CPF_Edit)    
	struct FPointer                                    FaceFXActorInstance;                           // 0x05E0 (0x0004) [0x0000000000003000] (CPF_Native | CPF_Transient)
	class UAudioComponent*                             CachedFaceFXAudioComp;                         // 0x05E4 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class TArray<uint8_t>                              BoneVisibilityStates;                          // 0x05E8 (0x000C) [0x0000000000402002] (CPF_Const | CPF_Transient | CPF_NeedCtorLink)
	uint8_t                                            UnknownData02[0xC];                              // 0x05F4 (0x000C) MISSED OFFSET
	struct FBoneAtom                                   LocalToWorldBoneAtom;                          // 0x0600 (0x0050) [0x0000000000002002] (CPF_Const | CPF_Transient)
	float                                              ProgressiveDrawingFraction;                    // 0x0650 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint8_t                                            CustomSortAlternateIndexMode;                  // 0x0654 (0x0001) [0x0000000000002000] (CPF_Transient)
	class TArray<class FName>                          MorphTargetsQueried;                           // 0x0658 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	int32_t                                            SPURSEndFlagData;                              // 0x0664 (0x0004) [0x0000000000000000]               
	uint32_t                                           bIgnoreFrameSkip : 1;                          // 0x0668 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint8_t                                            DamageLevel;                                   // 0x066C (0x0001) [0x0000000000002001] (CPF_Edit | CPF_Transient)
	uint32_t                                           HasDamagedMesh : 1;                            // 0x0670 (0x0004) [0x0000000000002001] [0x00000001] (CPF_Edit | CPF_Transient)
	uint32_t                                           bNoSkeletonUpdateOnNotCellChange : 1;          // 0x0670 (0x0004) [0x0000000000002001] [0x00000002] (CPF_Edit | CPF_Transient)
	int32_t                                            AnimOddEvenSwitch;                             // 0x0674 (0x0004) [0x0000000000002001] (CPF_Edit | CPF_Transient)
	struct FSkelMeshComponentScarfSystem               ScarfSystem;                                   // 0x0678 (0x009C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		}

		return uClassPointer;
	};

	void SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material);
	struct FRotator GetRotation();
	struct FVector GetPosition();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const class FName& InBoneName, bool optionalBVelChange);
	void SkelMeshCompOnParticleSystemFinished(class UParticleSystemComponent* PSC);
	bool eventPlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	bool eventCreateForceField(class UAnimNotify_ForceField* AnimNotifyData);
	void StopAnim();
	void PlayAnim(const class FName& AnimName, float optionalDuration, bool optionalBLoop, bool optionalBRestartIfAlreadyPlaying, float optionalStartTime, bool optionalBPlayBackwards);
	void ShowMaterialSection(int32_t MaterialID, bool bShow, int32_t LODIndex);
	void UpdateMeshForBrokenConstraints();
	void UnHideBoneByName(const class FName& BoneName);
	void HideBoneByName(const class FName& BoneName, EPhysBodyOp PhysBodyOption);
	bool IsBoneHidden(int32_t BoneIndex);
	void UnHideBone(int32_t BoneIndex);
	void HideBone(int32_t BoneIndex, EPhysBodyOp PhysBodyOption);
	void SetFaceFXRegisterEx(const class FString& RegName, EFaceFXRegOp RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration);
	void SetFaceFXRegister(const class FString& RegName, float RegVal, EFaceFXRegOp RegOp, float optionalInterpDuration);
	float GetFaceFXRegister(const class FString& RegName);
	void DeclareFaceFXRegister(const class FString& RegName);
	bool IsPlayingFaceFXAnim();
	void StopFaceFXAnim();
	bool PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef, const class FString& AnimName, const class FString& GroupName, class USoundCue* SoundCueToPlay);
	void ToggleInstanceVertexWeights(bool bEnable, int32_t LODIdx);
	void UpdateInstanceVertexWeightBones(const class TArray<struct FBonePair>& BonePairs);
	int32_t FindInstanceVertexweightBonePair(const struct FBonePair& Bones);
	void RemoveInstanceVertexWeightBoneParented(const class FName& BoneName);
	void AddInstanceVertexWeightBoneParented(const class FName& BoneName, bool optionalBPairWithParent);
	bool GetBonesWithinRadius(const struct FVector& Origin, float Radius, int32_t TraceFlags, class TArray<class FName>& outOut_Bones);
	void UpdateAnimations();
	void ForceSkelUpdate();
	void UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport);
	void SetHasPhysicsAssetInstance(bool bHasInstance, bool optionalBUseCurrentPosition);
	class URB_BodyInstance* FindBodyInstanceNamed(const class FName& BoneName);
	class FName FindConstraintBoneName(int32_t ConstraintIndex);
	int32_t FindConstraintIndex(const class FName& ConstraintName);
	void InitMorphTargets();
	void InitSkelControls();
	void UpdateParentBoneMap();
	void SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp);
	void SetAnimTreeTemplate(class UAnimTree* NewTemplate);
	struct FVector GetClosestCollidingBoneLocation(const struct FVector& TestLocation, bool bCheckZeroExtent, bool bCheckNonZeroExtent);
	class FName FindClosestBone(const struct FVector& TestLocation, float optionalIgnoreScale, struct FVector& outBoneLocation);
	void TransformFromBoneSpace(const class FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector& outOutPosition, struct FRotator& outOutRotation);
	void TransformToBoneSpace(const class FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector& outOutPosition, struct FRotator& outOutRotation);
	struct FVector GetBoneAxis(const class FName& BoneName, EAxis Axis);
	struct FVector GetRefPosePosition(int32_t BoneIndex);
	bool BoneIsChildOf(const class FName& BoneName, const class FName& ParentBoneName);
	void GetBoneNames(class TArray<class FName>& outBoneNames);
	class FName GetParentBone(const class FName& BoneName);
	struct FMatrix GetBoneMatrix(int32_t BoneIndex);
	class FName GetBoneName(int32_t BoneIndex);
	int32_t MatchRefBone(const class FName& BoneName);
	struct FVector GetBoneLocation(const class FName& BoneName, int32_t optionalSpace);
	struct FQuat GetBoneQuaternion(const class FName& BoneName, int32_t optionalSpace);
	class UMorphNodeBase* FindMorphNode(const class FName& InNodeName);
	class USkelControlBase* FindSkelControl(const class FName& InControlName);
	void AllAnimNodes(class UClass* BaseClass, class UAnimNode*& outNode);
	class UAnimNode* FindAnimNode(const class FName& InNodeName);
	class UMorphTarget* FindMorphTarget(const class FName& MorphTargetName);
	float GetAnimLength(const class FName& AnimSeqName);
	float GetAnimRateByDuration(const class FName& AnimSeqName, float Duration);
	void RestoreSavedAnimSets();
	void SaveAnimSets();
	class UAnimSequence* FindAnimSequence(const class FName& AnimSeqName);
	void WakeSoftBody();
	void SetSoftBodyFrozen(bool bNewFrozen);
	void UpdateSoftBodyParams();
	void SetClothValidBounds(const struct FVector& ClothValidBoundsMin, const struct FVector& ClothValidBoundsMax);
	void EnableClothValidBounds(bool IfEnableClothValidBounds);
	void AttachClothToCollidingShapes(bool AttatchTwoWay, bool AttachTearable);
	void SetClothVelocity(const struct FVector& VelocityOffSet);
	void SetClothPosition(const struct FVector& ClothOffSet);
	void SetClothSleep(bool IfClothSleep);
	void SetClothThickness(float ClothThickness);
	void SetClothTearFactor(float ClothTearFactor);
	void SetClothStretchingStiffness(float ClothStretchingStiffness);
	void SetClothSolverIterations(int32_t ClothSolverIterations);
	void SetClothSleepLinearVelocity(float ClothSleepLinearVelocity);
	void SetClothPressure(float ClothPressure);
	void SetClothFriction(float ClothFriction);
	void SetClothFlags(int32_t ClothFlags);
	void SetClothDampingCoefficient(float ClothDampingCoefficient);
	void SetClothCollisionResponseCoefficient(float ClothCollisionResponseCoefficient);
	void SetClothBendingStiffness(float ClothBendingStiffness);
	void SetClothAttachmentTearFactor(float ClothAttachTearFactor);
	void SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient);
	float GetClothThickness();
	float GetClothTearFactor();
	float GetClothStretchingStiffness();
	int32_t GetClothSolverIterations();
	float GetClothSleepLinearVelocity();
	float GetClothPressure();
	float GetClothFriction();
	int32_t GetClothFlags();
	float GetClothDampingCoefficient();
	float GetClothCollisionResponseCoefficient();
	float GetClothBendingStiffness();
	float GetClothAttachmentTearFactor();
	float GetClothAttachmentResponseCoefficient();
	void ForceApexClothingTeleport();
	void ForceApexClothingTeleportAndReset();
	void ResetClothVertsToRefPose();
	void SetAttachClothVertsToBaseBody(bool bAttachVerts);
	void SetClothExternalForce(const struct FVector& InForce);
	void UpdateClothParams();
	void SetEnableClothingSimulation(bool bInEnable);
	void SetClothFrozen(bool bNewFrozen);
	void SetEnableClothSimulation(bool bInEnable);
	void SetForceRefPose(bool bNewForceRefPose);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool optionalBForceReInit);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool optionalBKeepSpaceBases);
	struct FMatrix GetTransformMatrix();
	void AttachedComponents(class UClass* BaseClass, class UActorComponent*& outOutComponent);
	bool IsComponentAttached(class UActorComponent* Component, const class FName& optionalBoneName);
	class UActorComponent* FindComponentAttachedToBone(const class FName& InBoneName);
	class FName GetSocketBoneName(const class FName& InSocketName);
	class USkeletalMeshSocket* GetSocketByName(const class FName& InSocketName);
	bool GetSocketWorldLocationAndRotation(const class FName& InSocketName, int32_t optionalSpace, struct FVector& outOutLocation, struct FRotator& outOutRotation);
	void AttachComponentToSocket(class UActorComponent* Component, const class FName& SocketName);
	void DetachComponent(class UActorComponent* Component);
	void AttachComponent(class UActorComponent* Component, const class FName& BoneName, const struct FVector& optionalRelativeLocation, const struct FRotator& optionalRelativeRotation, const struct FVector& optionalRelativeScale);
};

// Class Engine.SkeletalMesh
// 0x0394 (0x003C - 0x03D0)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                        // 0x003C (0x001C) [0x0000000000001003] (CPF_Edit | CPF_Const | CPF_Native)
	class TArray<class UMaterialInterface*>            Materials;                                     // 0x0058 (0x000C) [0x0000000000001003] (CPF_Edit | CPF_Const | CPF_Native)
	class TArray<class UApexClothingAsset*>            ClothingAssets;                                // 0x0064 (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)
	class TArray<struct FApexClothingAssetInfo>        ClothingLodMap;                                // 0x0070 (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)
	struct FVector                                     Origin;                                        // 0x007C (0x000C) [0x0000000000001003] (CPF_Edit | CPF_Const | CPF_Native)
	struct FRotator                                    RotOrigin;                                     // 0x0088 (0x000C) [0x0000000000001003] (CPF_Edit | CPF_Const | CPF_Native)
	class TArray<int32_t>                              RefSkeleton;                                   // 0x0094 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	int32_t                                            SkeletalDepth;                                 // 0x00A0 (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint8_t                                            UnknownData00[0x3C];                            // 0x00A4 (0x003C) MISSED OFFSET
	struct FIndirectArray_Mirror                       LODModels;                                     // 0x00E0 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	struct FPointer                                    SourceData;                                    // 0x00EC (0x0004) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FBoneAtom>                     RefBasesInvMatrix;                             // 0x00F0 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<struct FBoneMirrorInfo>               SkelMirrorTable;                               // 0x00FC (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)
	EAxis                                              SkelMirrorAxis;                                // 0x0108 (0x0001) [0x0000000000000001] (CPF_Edit)    
	EAxis                                              SkelMirrorFlipAxis;                            // 0x0109 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class TArray<class USkeletalMeshSocket*>           Sockets;                                       // 0x010C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        BoneBreakNames;                                // 0x0118 (0x000C) [0x0000000000021003] (CPF_Edit | CPF_Const | CPF_Native | CPF_EditConst)
	class TArray<EBoneBreakOption>                     BoneBreakOptions;                              // 0x0124 (0x000C) [0x0000000000001003] (CPF_Edit | CPF_Const | CPF_Native)
	class TArray<struct FSkeletalMeshLODInfo>          LODInfo;                                       // 0x0130 (0x000C) [0x0000000000400041] (CPF_Edit | CPF_EditFixedSize | CPF_NeedCtorLink)
	class TArray<struct FSkeletalMeshOptimizationSettings> OptimizationSettings;                          // 0x013C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FName>                          PerPolyCollisionBones;                         // 0x0148 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class FName>                          AddToParentPerPolyCollisionBone;               // 0x0154 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<int32_t>                              PerPolyBoneKDOPs;                              // 0x0160 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	uint32_t                                           bPerPolyUseSoftWeighting : 1;                  // 0x016C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseSimpleLineCollision : 1;                   // 0x016C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseSimpleBoxCollision : 1;                    // 0x016C (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bForceCPUSkinning : 1;                         // 0x016C (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseFullPrecisionUVs : 1;                      // 0x016C (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	uint32_t                                           bHasBeenSimplified : 1;                        // 0x016C (0x0004) [0x0000000000000000] [0x00000020] 
	class UFaceFXAsset*                                FaceFXAsset;                                   // 0x0170 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UPhysicsAsset*                               BoundsPreviewAsset;                            // 0x0174 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class TArray<class UMorphTargetSet*>               PreviewMorphSets;                              // 0x0178 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            LODBiasPC;                                     // 0x0184 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LODBiasPS3;                                    // 0x0188 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LODBiasXbox360;                                // 0x018C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            LODBiasOrbis;                                  // 0x0190 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      SourceFilePath;                                // 0x0194 (0x000C) [0x0000000000420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)
	class FString                                      SourceFileTimestamp;                           // 0x01A0 (0x000C) [0x0000000000420003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FPointer>                      ClothMesh;                                     // 0x01AC (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<float>                                ClothMeshScale;                                // 0x01B8 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<int32_t>                              ClothToGraphicsVertMap;                        // 0x01C4 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<float>                                ClothMovementScale;                            // 0x01D0 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	EClothMovementScaleGen                             ClothMovementScaleGenMode;                     // 0x01DC (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              ClothToAnimMeshMaxDist;                        // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bLimitClothToAnimMesh : 1;                     // 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<int32_t>                              ClothWeldingMap;                               // 0x01E8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	int32_t                                            ClothWeldingDomain;                            // 0x01F4 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<int32_t>                              ClothWeldedIndices;                            // 0x01F8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           bForceNoWelding : 1;                           // 0x0204 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	int32_t                                            NumFreeClothVerts;                             // 0x0208 (0x0004) [0x0000000000000002] (CPF_Const)   
	class TArray<int32_t>                              ClothIndexBuffer;                              // 0x020C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<class FName>                          ClothBones;                                    // 0x0218 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	int32_t                                            ClothHierarchyLevels;                          // 0x0224 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableClothBendConstraints : 1;               // 0x0228 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableClothDamping : 1;                       // 0x0228 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseClothCOMDamping : 1;                       // 0x0228 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	float                                              ClothStretchStiffness;                         // 0x022C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothBendStiffness;                            // 0x0230 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothDensity;                                  // 0x0234 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothThickness;                                // 0x0238 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothDamping;                                  // 0x023C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ClothIterations;                               // 0x0240 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ClothHierarchicalIterations;                   // 0x0244 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothFriction;                                 // 0x0248 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothRelativeGridSpacing;                      // 0x024C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothPressure;                                 // 0x0250 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothCollisionResponseCoefficient;             // 0x0254 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothAttachmentResponseCoefficient;            // 0x0258 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothAttachmentTearFactor;                     // 0x025C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothSleepLinearVelocity;                      // 0x0260 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              HardStretchLimitFactor;                        // 0x0264 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bHardStretchLimit : 1;                         // 0x0268 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableClothOrthoBendConstraints : 1;          // 0x0268 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableClothSelfCollision : 1;                 // 0x0268 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableClothPressure : 1;                      // 0x0268 (0x0004) [0x0000000000000003] [0x00000008] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableClothTwoWayCollision : 1;               // 0x0268 (0x0004) [0x0000000000000003] [0x00000010] (CPF_Edit | CPF_Const)
	class TArray<struct FClothSpecialBoneInfo>         ClothSpecialBones;                             // 0x026C (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	uint32_t                                           bEnableClothLineChecks : 1;                    // 0x0278 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bClothMetal : 1;                               // 0x0278 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	float                                              ClothMetalImpulseThreshold;                    // 0x027C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothMetalPenetrationDepth;                    // 0x0280 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              ClothMetalMaxDeformationDistance;              // 0x0284 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableClothTearing : 1;                       // 0x0288 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              ClothTearFactor;                               // 0x028C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ClothTearReserve;                              // 0x0290 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableValidBounds : 1;                        // 0x0294 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FVector                                     ValidBoundsMin;                                // 0x0298 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     ValidBoundsMax;                                // 0x02A4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FMap_Mirror                                 ClothTornTriMap;                               // 0x02B0 (0x003C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<int32_t>                              SoftBodySurfaceToGraphicsVertMap;              // 0x02EC (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<int32_t>                              SoftBodySurfaceIndices;                        // 0x02F8 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FVector>                       SoftBodyTetraVertsUnscaled;                    // 0x0304 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<int32_t>                              SoftBodyTetraIndices;                          // 0x0310 (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FSoftBodyTetraLink>            SoftBodyTetraLinks;                            // 0x031C (0x000C) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FPointer>                      CachedSoftBodyMeshes;                          // 0x0328 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<float>                                CachedSoftBodyMeshScales;                      // 0x0334 (0x000C) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	class TArray<class FName>                          SoftBodyBones;                                 // 0x0340 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	class TArray<struct FSoftBodySpecialBoneInfo>      SoftBodySpecialBones;                          // 0x034C (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              SoftBodyVolumeStiffness;                       // 0x0358 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodyStretchingStiffness;                   // 0x035C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodyDensity;                               // 0x0360 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodyParticleRadius;                        // 0x0364 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodyDamping;                               // 0x0368 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            SoftBodySolverIterations;                      // 0x036C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodyFriction;                              // 0x0370 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodyRelativeGridSpacing;                   // 0x0374 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodySleepLinearVelocity;                   // 0x0378 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableSoftBodySelfCollision : 1;              // 0x037C (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              SoftBodyAttachmentResponse;                    // 0x0380 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodyCollisionResponse;                     // 0x0384 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	float                                              SoftBodyDetailLevel;                           // 0x0388 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            SoftBodySubdivisionLevel;                      // 0x038C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bSoftBodyIsoSurface : 1;                       // 0x0390 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableSoftBodyDamping : 1;                    // 0x0390 (0x0004) [0x0000000000000003] [0x00000002] (CPF_Edit | CPF_Const)
	uint32_t                                           bUseSoftBodyCOMDamping : 1;                    // 0x0390 (0x0004) [0x0000000000000003] [0x00000004] (CPF_Edit | CPF_Const)
	float                                              SoftBodyAttachmentThreshold;                   // 0x0394 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableSoftBodyTwoWayCollision : 1;            // 0x0398 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	float                                              SoftBodyAttachmentTearFactor;                  // 0x039C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	uint32_t                                           bEnableSoftBodyLineChecks : 1;                 // 0x03A0 (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bHasVertexColors : 1;                          // 0x03A0 (0x0004) [0x0000000000000000] [0x00000002] 
	class TArray<uint32_t>                             GraphicsIndexIsCloth;                          // 0x03A4 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	class TArray<float>                                CachedStreamingTextureFactors;                 // 0x03B0 (0x000C) [0x0000000000001002] (CPF_Const | CPF_Native)
	float                                              StreamingDistanceMultiplier;                   // 0x03BC (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	int32_t                                            ReleaseResourcesFence;                         // 0x03C0 (0x0004) [0x0000000000003002] (CPF_Const | CPF_Native | CPF_Transient)
	struct FQWord                                      SkelMeshRUID;                                  // 0x03C4 (0x0008) [0x0000000000002002] (CPF_Const | CPF_Transient)
	uint32_t                                           bUseClothingAssetMaterial : 1;                 // 0x03CC (0x0004) [0x0000000000000003] [0x00000001] (CPF_Edit | CPF_Const)
	uint32_t                                           bExplicitNormal : 1;                           // 0x03CC (0x0004) [0x0000000000020003] [0x00000002] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_EditorOnly)
	uint32_t                                           bTangentToNormal : 1;                          // 0x03CC (0x0004) [0x0000000000020003] [0x00000004] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.SkeletalMeshSocket
// 0x0044 (0x003C - 0x0080)
class USkeletalMeshSocket : public UObject
{
public:
	class FName                                        SocketName;                                    // 0x003C (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	class FName                                        BoneName;                                      // 0x0044 (0x0008) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	struct FVector                                     RelativeLocation;                              // 0x004C (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    RelativeRotation;                              // 0x0058 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     RelativeScale;                                 // 0x0064 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class USkeletalMesh*                               PreviewSkelMesh;                               // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class USkeletalMeshComponent*                      PreviewSkelComp;                               // 0x0074 (0x0004) [0x00000000040A200B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline)
	class UStaticMesh*                                 PreviewStaticMesh;                             // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class UParticleSystem*                             PreviewParticleSystem;                         // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		}

		return uClassPointer;
	};

};

// Class Engine.SplineActor
// 0x0050 (0x01C8 - 0x0218)
class ASplineActor : public AActor
{
public:
	class TArray<struct FSplineConnection>             Connections;                                   // 0x01C8 (0x000C) [0x0000000000480000] (CPF_Component | CPF_NeedCtorLink)
	struct FVector                                     SplineActorTangent;                            // 0x01D4 (0x000C) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FColor                                      SplineColor;                                   // 0x01E0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDisableDestination : 1;                       // 0x01E4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAlreadyVisited : 1;                           // 0x01E4 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	class TArray<class ASplineActor*>                  LinksFrom;                                     // 0x01E8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class ASplineActor*                                nextOrdered;                                   // 0x01F4 (0x0004) [0x0000000000002000] (CPF_Transient)
	class ASplineActor*                                prevOrdered;                                   // 0x01F8 (0x0004) [0x0000000000002000] (CPF_Transient)
	class ASplineActor*                                previousPath;                                  // 0x01FC (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            bestPathWeight;                                // 0x0200 (0x0004) [0x0000000000002000] (CPF_Transient)
	int32_t                                            visitedWeight;                                 // 0x0204 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FInterpCurveFloat                           SplineVelocityOverTime;                        // 0x0208 (0x0010) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SplineActor");
		}

		return uClassPointer;
	};

	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void OnToggle(class USeqAct_Toggle* inAction);
	void GetAllConnectedSplineActors(class TArray<class ASplineActor*>& outOutSet);
	bool FindSplinePathTo(class ASplineActor* Goal, class TArray<class ASplineActor*>& outOutRoute);
	class ASplineActor* GetBestConnectionInDirection(const struct FVector& DesiredDir, bool optionalBUseLinksFrom);
	class ASplineActor* GetRandomConnection(bool optionalBUseLinksFrom);
	void BreakAllConnectionsFrom();
	void BreakAllConnections();
	void BreakConnectionTo(class ASplineActor* NextActor);
	class ASplineActor* FindTargetForComponent(class USplineComponent* SplineComp);
	class USplineComponent* FindSplineComponentTo(class ASplineActor* NextActor);
	bool IsConnectedTo(class ASplineActor* NextActor, bool bCheckForDisableDestination);
	void AddConnectionTo(class ASplineActor* NextActor);
	void UpdateConnectedSplineComponents(bool bFinish);
	void UpdateSplineComponents();
	struct FVector GetWorldSpaceTangent();
};

// Class Engine.SplineLoftActor
// 0x0048 (0x0218 - 0x0260)
class ASplineLoftActor : public ASplineActor
{
public:
	float                                              ScaleX;                                        // 0x0218 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	float                                              ScaleY;                                        // 0x021C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	class TArray<class USplineMeshComponent*>          SplineMeshComps;                               // 0x0220 (0x000C) [0x0000000004480008] (CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class UStaticMesh*                                 DeformMesh;                                    // 0x022C (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)
	class TArray<class UMaterialInterface*>            DeformMeshMaterials;                           // 0x0230 (0x000C) [0x0000000000400003] (CPF_Edit | CPF_Const | CPF_NeedCtorLink)
	float                                              Roll;                                          // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FVector                                     WorldXDir;                                     // 0x0240 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FVector2D                                   offset;                                        // 0x024C (0x0008) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSmoothInterpRollAndScale : 1;                 // 0x0254 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bAcceptsLights : 1;                            // 0x0254 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	class UDynamicLightEnvironmentComponent*           MeshLightEnvironment;                          // 0x0258 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	float                                              MeshMaxDrawDistance;                           // 0x025C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SplineLoftActor");
		}

		return uClassPointer;
	};

	void UpdateSplineParams();
	void ClearLoftMesh();
};

// Class Engine.SplineLoftActorMovable
// 0x0000 (0x0260 - 0x0260)
class ASplineLoftActorMovable : public ASplineLoftActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SplineLoftActorMovable");
		}

		return uClassPointer;
	};

};

// Class Engine.SplineComponent
// 0x0034 (0x01D8 - 0x020C)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                    // 0x01D8 (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              SplineCurviness;                               // 0x01E8 (0x0004) [0x0000000000020001] (CPF_Edit | CPF_EditConst)
	struct FColor                                      SplineColor;                                   // 0x01EC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SplineDrawRes;                                 // 0x01F0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              SplineArrowSize;                               // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bSplineDisabled : 1;                           // 0x01F8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FInterpCurveFloat                           SplineReparamTable;                            // 0x01FC (0x0010) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SplineComponent");
		}

		return uClassPointer;
	};

	struct FVector GetTangentAtDistanceAlongSpline(float Distance);
	struct FVector GetLocationAtDistanceAlongSpline(float Distance);
	float GetSplineLength();
	void UpdateSplineReparamTable();
	void UpdateSplineCurviness();
};

// Class Engine.ProcBuilding
// 0x00D4 (0x01F4 - 0x02C8)
class AProcBuilding : public AVolume
{
public:
	class UProcBuildingRuleset*                        Ruleset;                                       // 0x01F4 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class TArray<struct FPBMeshCompInfo>               BuildingMeshCompInfos;                         // 0x01F8 (0x000C) [0x00000000004A0003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_Component | CPF_NeedCtorLink)
	class TArray<struct FPBFracMeshCompInfo>           BuildingFracMeshCompInfos;                     // 0x0204 (0x000C) [0x00000000004A0003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_Component | CPF_NeedCtorLink)
	class UStaticMeshComponent*                        SimpleMeshComp;                                // 0x0210 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bGenerateRoofMesh : 1;                         // 0x0214 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bGenerateFloorMesh : 1;                        // 0x0214 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bApplyRulesToRoof : 1;                         // 0x0214 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bApplyRulesToFloor : 1;                        // 0x0214 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bSplitWallsAtRoofLevels : 1;                   // 0x0214 (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bSplitWallsAtWallEdges : 1;                    // 0x0214 (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bQuickEdited : 1;                              // 0x0214 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	uint32_t                                           bBuildingBrushCollision : 1;                   // 0x0214 (0x0004) [0x0000000000000001] [0x00000080] (CPF_Edit)
	uint32_t                                           bDebugDrawEdgeInfo : 1;                        // 0x0214 (0x0004) [0x0000000000000001] [0x00000100] (CPF_Edit)
	uint32_t                                           bDebugDrawScopes : 1;                          // 0x0214 (0x0004) [0x0000000000000001] [0x00000200] (CPF_Edit)
	class TArray<class UStaticMeshComponent*>          LODMeshComps;                                  // 0x0218 (0x000C) [0x000000000448000A] (CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	class TArray<struct FPBFaceUVInfo>                 LODMeshUVInfos;                                // 0x0224 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FPBScope2D>                    TopLevelScopes;                                // 0x0230 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            NumMeshedTopLevelScopes;                       // 0x023C (0x0004) [0x0000000000000000]               
	class TArray<struct FPBFaceUVInfo>                 TopLevelScopeUVInfos;                          // 0x0240 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FPBScopeProcessInfo>           TopLevelScopeInfos;                            // 0x024C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class TArray<struct FPBEdgeInfo>                   EdgeInfos;                                     // 0x0258 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	float                                              MaxFacadeZ;                                    // 0x0264 (0x0004) [0x0000000000000000]               
	float                                              MinFacadeZ;                                    // 0x0268 (0x0004) [0x0000000000000000]               
	class TArray<class AProcBuilding*>                 OverlappingBuildings;                          // 0x026C (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              SimpleMeshMassiveLODDistance;                  // 0x0278 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RenderToTexturePullBackAmount;                 // 0x027C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            RoofLightmapRes;                               // 0x0280 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            NonRectWallLightmapRes;                        // 0x0284 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              LODRenderToTextureScale;                       // 0x0288 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_EditorOnly)
	class FName                                        ParamSwatchName;                               // 0x028C (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FPBMaterialParam>              BuildingMaterialParams;                        // 0x0294 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UMaterialInstanceConstant*>     BuildingMatParamMICs;                          // 0x02A0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	class AStaticMeshActor*                            LowLODPersistentActor;                         // 0x02AC (0x0004) [0x0000000000220003] (CPF_Edit | CPF_Const | CPF_EditConst | CPF_CrossLevelPassive)
	class UStaticMeshComponent*                        CurrentSimpleMeshComp;                         // 0x02B0 (0x0004) [0x0000000004082008] (CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline)
	class AActor*                                      CurrentSimpleMeshActor;                        // 0x02B4 (0x0004) [0x0000000000002000] (CPF_Transient)
	class TArray<class AProcBuilding*>                 AttachedBuildings;                             // 0x02B8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            BuildingInstanceVersion;                       // 0x02C4 (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ProcBuilding");
		}

		return uClassPointer;
	};

	int32_t FindEdgeForTopLevelScope(int32_t TopLevelScopeIndex, EScopeEdge Edge);
	void BreakFractureComponent(class UFracturedStaticMeshComponent* Comp, const struct FVector& BoxMin, const struct FVector& BoxMax);
	void GetAllGroupedProcBuildings(class TArray<class AProcBuilding*>& outOutSet);
	class AProcBuilding* GetBaseMostBuilding();
	class TArray<class UStaticMeshComponent*> FindComponentsForTopLevelScope(int32_t TopLevelScopeIndex);
	void ClearBuildingMeshes();
};

// Class Engine.ProcBuilding_SimpleLODActor
// 0x0003 (0x01D1 - 0x01D4)
class AProcBuilding_SimpleLODActor : public AStaticMeshActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ProcBuilding_SimpleLODActor");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeBase
// 0x002C (0x003C - 0x0068)
class UPBRuleNodeBase : public UObject
{
public:
	class TArray<struct FPBRuleLink>                   NextRules;                                     // 0x003C (0x000C) [0x0000000000400040] (CPF_EditFixedSize | CPF_NeedCtorLink)
	class FString                                      Comment;                                       // 0x0048 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditorOnly)
	int32_t                                            RulePosX;                                      // 0x0054 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            RulePosY;                                      // 0x0058 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            InDrawY;                                       // 0x005C (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            DrawWidth;                                     // 0x0060 (0x0004) [0x0000000000000000] (CPF_EditorOnly)
	int32_t                                            DrawHeight;                                    // 0x0064 (0x0004) [0x0000000000000000] (CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeBase");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeAlternate
// 0x0010 (0x0068 - 0x0078)
class UPBRuleNodeAlternate : public UPBRuleNodeBase
{
public:
	EProcBuildingAxis                                  RepeatAxis;                                    // 0x0068 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              ASize;                                         // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BMaxSize;                                      // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bInvertPatternOrder : 1;                       // 0x0074 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEqualSizeAB : 1;                              // 0x0074 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeAlternate");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeComment
// 0x0018 (0x0068 - 0x0080)
class UPBRuleNodeComment : public UPBRuleNodeBase
{
public:
	int32_t                                            SizeX;                                         // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            SizeY;                                         // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            BorderWidth;                                   // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FColor                                      BorderColor;                                   // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bFilled : 1;                                   // 0x0078 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	struct FColor                                      FillColor;                                     // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeComment");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeCorner
// 0x0028 (0x0068 - 0x0090)
class UPBRuleNodeCorner : public UPBRuleNodeBase
{
public:
	float                                              CornerSize;                                    // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FRBCornerAngleInfo>            Angles;                                        // 0x006C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	float                                              FlatThreshold;                                 // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bNoMeshForConcaveCorners : 1;                  // 0x007C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bUseAdjacentRulesetForRightGap : 1;            // 0x007C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	EPBCornerType                                      CornerType;                                    // 0x0080 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              CornerShapeOffset;                             // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            RoundTesselation;                              // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RoundCurvature;                                // 0x008C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeCorner");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeCycle
// 0x0010 (0x0068 - 0x0078)
class UPBRuleNodeCycle : public UPBRuleNodeBase
{
public:
	EProcBuildingAxis                                  RepeatAxis;                                    // 0x0068 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              RepeatSize;                                    // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            CycleSize;                                     // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bFixRepeatSize : 1;                            // 0x0074 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeCycle");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeEdgeAngle
// 0x0010 (0x0068 - 0x0078)
class UPBRuleNodeEdgeAngle : public UPBRuleNodeBase
{
public:
	EProcBuildingEdge                                  Edge;                                          // 0x0068 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FRBEdgeAngleInfo>              Angles;                                        // 0x006C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeEdgeAngle");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeEdgeMesh
// 0x0008 (0x0068 - 0x0070)
class UPBRuleNodeEdgeMesh : public UPBRuleNodeBase
{
public:
	float                                              FlatThreshold;                                 // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              MainXPullIn;                                   // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeEdgeMesh");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeExtractTopBottom
// 0x0010 (0x0068 - 0x0078)
class UPBRuleNodeExtractTopBottom : public UPBRuleNodeBase
{
public:
	float                                              ExtractTopZ;                                   // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExtractNotTopZ;                                // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExtractBottomZ;                                // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              ExtractNotBottomZ;                             // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeExtractTopBottom");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeLODQuad
// 0x0004 (0x0068 - 0x006C)
class UPBRuleNodeLODQuad : public UPBRuleNodeBase
{
public:
	float                                              MassiveLODDistanceScale;                       // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeLODQuad");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeMesh
// 0x0048 (0x0068 - 0x00B0)
class UPBRuleNodeMesh : public UPBRuleNodeBase
{
public:
	class TArray<struct FBuildingMeshInfo>             BuildingMeshes;                                // 0x0068 (0x000C) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	struct FBuildingMeshInfo                           PartialOccludedBuildingMesh;                   // 0x0074 (0x0038) [0x0000000000480001] (CPF_Edit | CPF_Component | CPF_NeedCtorLink)
	uint32_t                                           bDoOcclusionTest : 1;                          // 0x00AC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bBlockAll : 1;                                 // 0x00AC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeMesh");
		}

		return uClassPointer;
	};

	int32_t PickRandomBuildingMesh();
};

// Class Engine.PBRuleNodeOcclusion
// 0x0000 (0x0068 - 0x0068)
class UPBRuleNodeOcclusion : public UPBRuleNodeBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeOcclusion");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeQuad
// 0x0018 (0x0068 - 0x0080)
class UPBRuleNodeQuad : public UPBRuleNodeBase
{
public:
	class UMaterialInterface*                          Material;                                      // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RepeatMaxSizeX;                                // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RepeatMaxSizeZ;                                // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            QuadLightmapRes;                               // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              YOffset;                                       // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bDisableMaterialRepeat : 1;                    // 0x007C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeQuad");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeRandom
// 0x000C (0x0068 - 0x0074)
class UPBRuleNodeRandom : public UPBRuleNodeBase
{
public:
	int32_t                                            NumOutputs;                                    // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MinNumExecuted;                                // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	int32_t                                            MaxNumExecuted;                                // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeRandom");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeRepeat
// 0x0008 (0x0068 - 0x0070)
class UPBRuleNodeRepeat : public UPBRuleNodeBase
{
public:
	EProcBuildingAxis                                  RepeatAxis;                                    // 0x0068 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              RepeatMaxSize;                                 // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeRepeat");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeSize
// 0x000C (0x0068 - 0x0074)
class UPBRuleNodeSize : public UPBRuleNodeBase
{
public:
	EProcBuildingAxis                                  SizeAxis;                                      // 0x0068 (0x0001) [0x0000000000000001] (CPF_Edit)    
	float                                              DecisionSize;                                  // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bUseTopLevelScopeSize : 1;                     // 0x0070 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeSize");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeSplit
// 0x0010 (0x0068 - 0x0078)
class UPBRuleNodeSplit : public UPBRuleNodeBase
{
public:
	EProcBuildingAxis                                  SplitAxis;                                     // 0x0068 (0x0001) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FRBSplitInfo>                  SplitSetup;                                    // 0x006C (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeSplit");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeSubRuleset
// 0x0004 (0x0068 - 0x006C)
class UPBRuleNodeSubRuleset : public UPBRuleNodeBase
{
public:
	class UProcBuildingRuleset*                        SubRuleset;                                    // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeSubRuleset");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeTransform
// 0x000C (0x0068 - 0x0074)
class UPBRuleNodeTransform : public UPBRuleNodeBase
{
public:
	class UDistributionVector*                         Translation;                                   // 0x0068 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDistributionVector*                         Rotation;                                      // 0x006C (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UDistributionVector*                         Scale;                                         // 0x0070 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeTransform");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeVariation
// 0x0004 (0x0068 - 0x006C)
class UPBRuleNodeVariation : public UPBRuleNodeBase
{
public:
	uint32_t                                           bVariationOfScopeOnLeft : 1;                   // 0x0068 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeVariation");
		}

		return uClassPointer;
	};

};

// Class Engine.PBRuleNodeWindowWall
// 0x0024 (0x0068 - 0x008C)
class UPBRuleNodeWindowWall : public UPBRuleNodeBase
{
public:
	float                                              CellMaxSizeX;                                  // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              CellMaxSizeZ;                                  // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindowSizeX;                                   // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindowSizeZ;                                   // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindowPosX;                                    // 0x0078 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              WindowPosZ;                                    // 0x007C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bScaleWindowWithCell : 1;                      // 0x0080 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              YOffset;                                       // 0x0084 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          Material;                                      // 0x0088 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PBRuleNodeWindowWall");
		}

		return uClassPointer;
	};

};

// Class Engine.ProcBuildingRuleset
// 0x0060 (0x003C - 0x009C)
class UProcBuildingRuleset : public UObject
{
public:
	class UPBRuleNodeBase*                             RootRule;                                      // 0x003C (0x0004) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bBeingEdited : 1;                              // 0x0040 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient | CPF_EditorOnly)
	uint32_t                                           bEnableInteriorTexture : 1;                    // 0x0040 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bLODOnlyRoof : 1;                              // 0x0040 (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bPickRandomSwatch : 1;                         // 0x0040 (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	class UMaterialInterface*                          DefaultRoofMaterial;                           // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          DefaultFloorMaterial;                          // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UMaterialInterface*                          DefaultNonRectWallMaterial;                    // 0x004C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RoofZOffset;                                   // 0x0050 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NotRoofZOffset;                                // 0x0054 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloorZOffset;                                  // 0x0058 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              NotFloorZOffset;                               // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RoofPolyInset;                                 // 0x0060 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              FloorPolyInset;                                // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              BuildingLODSpecular;                           // 0x0068 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RoofEdgeScopeRaise;                            // 0x006C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    LODCubemap;                                    // 0x0070 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    InteriorTexture;                               // 0x0074 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<struct FPBVariationInfo>              Variations;                                    // 0x0078 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<struct FPBParamSwatch>                ParamSwatches;                                 // 0x0084 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class TArray<class UPBRuleNodeComment*>            Comments;                                      // 0x0090 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink | CPF_EditorOnly)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ProcBuildingRuleset");
		}

		return uClassPointer;
	};

};

// Class Engine.ReplicationInfo
// 0x0000 (0x01C8 - 0x01C8)
class AReplicationInfo : public AInfo
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ReplicationInfo");
		}

		return uClassPointer;
	};

};

// Class Engine.GameReplicationInfo
// 0x0050 (0x01C8 - 0x0218)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	class UClass*                                      GameClass;                                     // 0x01C8 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bStopCountDown : 1;                            // 0x01CC (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net)
	uint32_t                                           bMatchHasBegun : 1;                            // 0x01CC (0x0004) [0x0000000000000020] [0x00000002] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bMatchIsOver : 1;                              // 0x01CC (0x0004) [0x0000000000000020] [0x00000004] (CPF_Net | CPF_RepNotify)
	int32_t                                            RemainingTime;                                 // 0x01D0 (0x0004) [0x0000000000000020] (CPF_Net)     
	int32_t                                            ElapsedTime;                                   // 0x01D4 (0x0004) [0x0000000000000020] (CPF_Net)     
	int32_t                                            RemainingMinute;                               // 0x01D8 (0x0004) [0x0000000000000020] (CPF_Net)     
	int32_t                                            GoalScore;                                     // 0x01DC (0x0004) [0x0000000000000020] (CPF_Net)     
	int32_t                                            TimeLimit;                                     // 0x01E0 (0x0004) [0x0000000000000020] (CPF_Net)     
	class TArray<class ATeamInfo*>                     Teams;                                         // 0x01E4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      ServerName;                                    // 0x01F0 (0x000C) [0x0000000000444021] (CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class AActor*                                      Winner;                                        // 0x01FC (0x0004) [0x0000000000000020] (CPF_Net)     
	class TArray<class APlayerReplicationInfo*>        PRIArray;                                      // 0x0200 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class APlayerReplicationInfo*>        InactivePRIArray;                              // 0x020C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameReplicationInfo");
		}

		return uClassPointer;
	};

	bool eventShouldShowGore();
	bool IsCoopMultiplayerGame();
	bool IsMultiplayerGame();
	void EndGame();
	void StartMatch();
	void SetTeam(int32_t Index, class ATeamInfo* TI);
	void RemovePRI(class APlayerReplicationInfo* PRI);
	void AddPRI(class APlayerReplicationInfo* PRI);
	bool OnSameTeam(class AActor* A, class AActor* B);
	void eventTimer();
	void Reset();
	void ReceivedGameClass();
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
};

// Class Engine.PlayerReplicationInfo
// 0x00B0 (0x01C8 - 0x0278)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                         // 0x01C8 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	int32_t                                            Deaths;                                        // 0x01CC (0x0004) [0x0000000000000020] (CPF_Net)     
	uint8_t                                            Ping;                                          // 0x01D0 (0x0001) [0x0000000000000020] (CPF_Net)     
	ETTSSpeaker                                        TTSSpeaker;                                    // 0x01D1 (0x0001) [0x0000000000002000] (CPF_Transient)
	int32_t                                            NumLives;                                      // 0x01D4 (0x0004) [0x0000000000000000]               
	class FString                                      PlayerName;                                    // 0x01D8 (0x000C) [0x0000000000400020] (CPF_Net | CPF_NeedCtorLink | CPF_RepNotify)
	class FString                                      OldName;                                       // 0x01E4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            PlayerID;                                      // 0x01F0 (0x0004) [0x0000000000000020] (CPF_Net)     
	class ATeamInfo*                                   Team;                                          // 0x01F4 (0x0004) [0x0000000004000020] (CPF_Net | CPF_EditInline | CPF_RepNotify)
	uint32_t                                           bAdmin : 1;                                    // 0x01F8 (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net)
	uint32_t                                           bIsSpectator : 1;                              // 0x01F8 (0x0004) [0x0000000000000020] [0x00000002] (CPF_Net)
	uint32_t                                           bOnlySpectator : 1;                            // 0x01F8 (0x0004) [0x0000000000000020] [0x00000004] (CPF_Net)
	uint32_t                                           bWaitingPlayer : 1;                            // 0x01F8 (0x0004) [0x0000000000000020] [0x00000008] (CPF_Net)
	uint32_t                                           bReadyToPlay : 1;                              // 0x01F8 (0x0004) [0x0000000000000020] [0x00000010] (CPF_Net)
	uint32_t                                           bOutOfLives : 1;                               // 0x01F8 (0x0004) [0x0000000000000020] [0x00000020] (CPF_Net)
	uint32_t                                           bBot : 1;                                      // 0x01F8 (0x0004) [0x0000000000000020] [0x00000040] (CPF_Net)
	uint32_t                                           bHasBeenWelcomed : 1;                          // 0x01F8 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bIsInactive : 1;                               // 0x01F8 (0x0004) [0x0000000000000020] [0x00000100] (CPF_Net | CPF_RepNotify)
	uint32_t                                           bFromPreviousLevel : 1;                        // 0x01F8 (0x0004) [0x0000000000000020] [0x00000200] (CPF_Net)
	int32_t                                            StartTime;                                     // 0x01FC (0x0004) [0x0000000000000020] (CPF_Net)     
	class FString                                      StringSpectating;                              // 0x0200 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      StringUnknown;                                 // 0x020C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            Kills;                                         // 0x0218 (0x0004) [0x0000000000000000]               
	class UClass*                                      GameMessageClass;                              // 0x021C (0x0004) [0x0000000000000000]               
	float                                              ExactPing;                                     // 0x0220 (0x0004) [0x0000000000000000]               
	class FString                                      SavedNetworkAddress;                           // 0x0224 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FUniqueNetId                                UniqueId;                                      // 0x0230 (0x0008) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	class FName                                        SessionName;                                   // 0x0238 (0x0008) [0x0000000000000002] (CPF_Const)   
	struct FAutomatedTestingDatum                      AutomatedTestingData;                          // 0x0240 (0x0008) [0x0000000000000000]               
	int32_t                                            StatConnectionCounts;                          // 0x0248 (0x0004) [0x0000000000000000]               
	int32_t                                            StatPingTotals;                                // 0x024C (0x0004) [0x0000000000000000]               
	int32_t                                            StatPingMin;                                   // 0x0250 (0x0004) [0x0000000000000000]               
	int32_t                                            StatPingMax;                                   // 0x0254 (0x0004) [0x0000000000000000]               
	int32_t                                            StatPKLTotal;                                  // 0x0258 (0x0004) [0x0000000000000000]               
	int32_t                                            StatPKLMin;                                    // 0x025C (0x0004) [0x0000000000000000]               
	int32_t                                            StatPKLMax;                                    // 0x0260 (0x0004) [0x0000000000000000]               
	int32_t                                            StatMaxInBPS;                                  // 0x0264 (0x0004) [0x0000000000000000]               
	int32_t                                            StatAvgInBPS;                                  // 0x0268 (0x0004) [0x0000000000000000]               
	int32_t                                            StatMaxOutBPS;                                 // 0x026C (0x0004) [0x0000000000000000]               
	int32_t                                            StatAvgOutBPS;                                 // 0x0270 (0x0004) [0x0000000000000000]               
	class UTexture2D*                                  Avatar;                                        // 0x0274 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PlayerReplicationInfo");
		}

		return uClassPointer;
	};

	bool IsPrimaryPlayer();
	void UnregisterPlayerFromSession();
	void RegisterPlayerWithSession();
	bool IsInvalidName();
	uint8_t GetTeamNum();
	void SetUniqueId(const struct FUniqueNetId& PlayerUniqueId);
	void SeamlessTravelTo(class APlayerReplicationInfo* NewPRI);
	void IncrementDeaths(int32_t optionalAmt);
	void CopyProperties(class APlayerReplicationInfo* PRI);
	void OverrideWith(class APlayerReplicationInfo* PRI);
	class APlayerReplicationInfo* Duplicate();
	void SetWaitingPlayer(bool B);
	void eventSetPlayerName(const class FString& S);
	void DisplayDebug(class AHUD* HUD, float& outYL, float& outYPos);
	class FString GetHumanReadableName();
	void Reset();
	void eventDestroyed();
	bool ShouldBroadCastWelcomeMessage(bool optionalBExiting);
	void UpdatePing(float TimeStamp);
	void eventReplicatedEvent(const class FName& VarName);
	void SetPlayerTeam(class ATeamInfo* NewTeam);
	void ClientInitialize(class AController* C);
	void eventPostBeginPlay();
};

// Class Engine.TeamInfo
// 0x001C (0x01C8 - 0x01E4)
class ATeamInfo : public AReplicationInfo
{
public:
	class FString                                      TeamName;                                      // 0x01C8 (0x000C) [0x0000000000408022] (CPF_Const | CPF_Net | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            Size;                                          // 0x01D4 (0x0004) [0x0000000000000000]               
	float                                              Score;                                         // 0x01D8 (0x0004) [0x0000000000000020] (CPF_Net)     
	int32_t                                            TeamIndex;                                     // 0x01DC (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)
	struct FColor                                      TeamColor;                                     // 0x01E0 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TeamInfo");
		}

		return uClassPointer;
	};

	uint8_t GetTeamNum();
	class FString GetHumanReadableName();
	void RemoveFromTeam(class AController* Other);
	bool AddToTeam(class AController* Other);
	void eventDestroyed();
	void eventReplicatedEvent(const class FName& VarName);
};

// Class Engine.Camera
// 0x02E4 (0x01C8 - 0x04AC)
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                       // 0x01C8 (0x0004) [0x0000000000000000]               
	class FName                                        CameraStyle;                                   // 0x01CC (0x0008) [0x0000000000000000]               
	float                                              DefaultFOV;                                    // 0x01D4 (0x0004) [0x0000000000000000]               
	uint32_t                                           bLockedFOV : 1;                                // 0x01D8 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bConstrainAspectRatio : 1;                     // 0x01D8 (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bEnableFading : 1;                             // 0x01D8 (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bFadeAudio : 1;                                // 0x01D8 (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bForceDisableTemporalAA : 1;                   // 0x01D8 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           bEnableColorScaling : 1;                       // 0x01D8 (0x0004) [0x0000000000000000] [0x00000020] 
	uint32_t                                           bEnableColorScaleInterp : 1;                   // 0x01D8 (0x0004) [0x0000000000000000] [0x00000040] 
	uint32_t                                           bUseClientSideCameraUpdates : 1;               // 0x01D8 (0x0004) [0x0000000000000000] [0x00000080] 
	uint32_t                                           bDebugClientSideCamera : 1;                    // 0x01D8 (0x0004) [0x0000000000000000] [0x00000100] 
	uint32_t                                           bShouldSendClientSideCameraUpdate : 1;         // 0x01D8 (0x0004) [0x0000000000000000] [0x00000200] 
	uint32_t                                           bOrthoBlendTransversal : 1;                    // 0x01D8 (0x0004) [0x0000000000000000] [0x00000400] 
	float                                              LockedFOV;                                     // 0x01DC (0x0004) [0x0000000000000000]               
	float                                              ConstrainedAspectRatio;                        // 0x01E0 (0x0004) [0x0000000000000000]               
	float                                              DefaultAspectRatio;                            // 0x01E4 (0x0004) [0x0000000000000000]               
	float                                              OffAxisYawAngle;                               // 0x01E8 (0x0004) [0x0000000000000000]               
	float                                              OffAxisPitchAngle;                             // 0x01EC (0x0004) [0x0000000000000000]               
	struct FColor                                      FadeColor;                                     // 0x01F0 (0x0004) [0x0000000000000000]               
	float                                              FadeAmount;                                    // 0x01F4 (0x0004) [0x0000000000000000]               
	float                                              CamOverridePostProcessAlpha;                   // 0x01F8 (0x0004) [0x0000000000000000]               
	struct FPostProcessSettings                        CamPostProcessSettings;                        // 0x01FC (0x0154) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FRenderingPerformanceOverrides              RenderingOverrides;                            // 0x0350 (0x0004) [0x0000000000000000]               
	struct FVector                                     ColorScale;                                    // 0x0354 (0x000C) [0x0000000000000000]               
	struct FVector                                     DesiredColorScale;                             // 0x0360 (0x000C) [0x0000000000000000]               
	struct FVector                                     OriginalColorScale;                            // 0x036C (0x000C) [0x0000000000000000]               
	float                                              ColorScaleInterpDuration;                      // 0x0378 (0x0004) [0x0000000000000000]               
	float                                              ColorScaleInterpStartTime;                     // 0x037C (0x0004) [0x0000000000000000]               
	struct FTCameraCache                               CameraCache;                                   // 0x0380 (0x0020) [0x0000000000000000]               
	struct FTCameraCache                               LastFrameCameraCache;                          // 0x03A0 (0x0020) [0x0000000000000000]               
	struct FTViewTarget                                ViewTarget;                                    // 0x03C0 (0x002C) [0x0000000000000000]               
	struct FTViewTarget                                PendingViewTarget;                             // 0x03EC (0x002C) [0x0000000000000000]               
	float                                              BlendTimeToGo;                                 // 0x0418 (0x0004) [0x0000000000000000]               
	struct FViewTargetTransitionParams                 BlendParams;                                   // 0x041C (0x0010) [0x0000000000000000]               
	class TArray<class UCameraModifier*>               ModifierList;                                  // 0x042C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              FreeCamDistance;                               // 0x0438 (0x0004) [0x0000000000000000]               
	struct FVector                                     FreeCamOffset;                                 // 0x043C (0x000C) [0x0000000000000000]               
	struct FVector2D                                   FadeAlpha;                                     // 0x0448 (0x0008) [0x0000000000000000]               
	float                                              FadeTime;                                      // 0x0450 (0x0004) [0x0000000000000000]               
	float                                              FadeTimeRemaining;                             // 0x0454 (0x0004) [0x0000000000000000]               
	class TArray<class AEmitterCameraLensEffectBase*>  CameraLensEffects;                             // 0x0458 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	class UCameraModifier_CameraShake*                 CameraShakeCamMod;                             // 0x0464 (0x0004) [0x0000000004002001] (CPF_Edit | CPF_Transient | CPF_EditInline)
	class UClass*                                      CameraShakeCamModClass;                        // 0x0468 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UCameraAnimInst*                             AnimInstPool[8];                               // 0x046C (0x0020) [0x0000000000000000]               
	class TArray<class UCameraAnimInst*>               ActiveAnims;                                   // 0x048C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class UCameraAnimInst*>               FreeAnims;                                     // 0x0498 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class ADynamicCameraActor*                         AnimCameraActor;                               // 0x04A4 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              OrthoBlend;                                    // 0x04A8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Camera");
		}

		return uClassPointer;
	};

	void StopCameraAnim(class UCameraAnimInst* AnimInst, bool optionalBImmediate);
	void StopAllCameraAnimsByType(class UCameraAnim* Anim, bool optionalBImmediate);
	void StopAllCameraAnims(bool optionalBImmediate);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float optionalRate, float optionalScale, float optionalBlendInTime, float optionalBlendOutTime, bool optionalBLoop, bool optionalBRandomStartTime, float optionalDuration, bool optionalBSingleInstance);
	void ClearAllCameraShakes();
	static void PlayWorldCameraShake(class UCameraShake* Shake, class AActor* ShakeInstigator, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bTryForceFeedback, bool optionalBOrientShakeTowardsEpicenter);
	static float CalcRadialShakeScale(class ACamera* Cam, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff);
	void StopCameraShake(class UCameraShake* Shake);
	void PlayCameraShake(class UCameraShake* Shake, float Scale, ECameraAnimPlaySpace optionalPlaySpace, const struct FRotator& optionalUserPlaySpaceRot);
	void ClearCameraLensEffects();
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	void AddCameraLensEffect(class UClass* LensEffectEmitterClass);
	class AEmitterCameraLensEffectBase* FindCameraLensEffect(class UClass* LensEffectEmitterClass);
	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void ProcessViewRotation(float DeltaTime, struct FRotator& outOutViewRotation, struct FRotator& outOutDeltaRot);
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& optionalTransitionParams);
	void UpdateViewTarget(float DeltaTime, struct FTViewTarget& outOutVT);
	void CheckViewTarget(struct FTViewTarget& outVT);
	void FillCameraCache(struct FTPOV& outNewPOV);
	struct FTPOV BlendViewTargets(float Alpha, struct FTViewTarget& outA, struct FTViewTarget& outB);
	void ApplyAudioFade();
	void DoUpdateCamera(float DeltaTime);
	void eventUpdateCamera_Func(float DeltaTime);
	void eventUpdateCamera(float DeltaTime);
	void UpdateCamera_Internal(float DeltaTime);
	void SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime);
	struct FRotator GetCameraRotation();
	void GetCameraViewPoint(struct FVector& outOutCamLoc, struct FRotator& outOutCamRot);
	void SetFOV(float NewFOV);
	float GetFOVAngle();
	void InitializeFor(class APlayerController* PC);
	void ApplyCameraModifiers(float DeltaTime, struct FTPOV& outOutPOV);
	void eventDestroyed();
	void PostBeginPlay();
	bool IsOnlineRollback();
	class UCameraModifier* CreateCameraModifier(class UClass* ModifierClass);
};

// Class Engine.CameraActor
// 0x016C (0x01C8 - 0x0334)
class ACameraActor : public AActor
{
public:
	uint32_t                                           bConstrainAspectRatio : 1;                     // 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCamOverridePostProcess : 1;                   // 0x01C8 (0x0004) [0x0000000020000000] [0x00000002]  CPF_Deprecated)
	float                                              AspectRatio;                                   // 0x01CC (0x0004) [0x0000000000000021] (CPF_Edit | CPF_Net | CPF_Interp)
	float                                              FOVAngle;                                      // 0x01D0 (0x0004) [0x0000000000000021] (CPF_Edit | CPF_Net | CPF_Interp)
	float                                              CamOverridePostProcessAlpha;                   // 0x01D4 (0x0004) [0x0000000000000001] (CPF_Edit | CPF_Interp)
	struct FPostProcessSettings                        CamOverridePostProcess;                        // 0x01D8 (0x0154) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink | CPF_Interp)
	class UDrawFrustumComponent*                       DrawFrustum;                                   // 0x032C (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)
	class UStaticMeshComponent*                        MeshComp;                                      // 0x0330 (0x0004) [0x0000000004080008] (CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CameraActor");
		}

		return uClassPointer;
	};

	void DisplayDebug(class AHUD* HUD, float& outOut_YL, float& outOut_YPos);
	void GetCameraView(float DeltaTime, struct FTPOV& outOutPOV);
};

// Class Engine.DynamicCameraActor
// 0x0000 (0x0334 - 0x0334)
class ADynamicCameraActor : public ACameraActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicCameraActor");
		}

		return uClassPointer;
	};

};

// Class Engine.CameraAnim
// 0x0184 (0x003C - 0x01C0)
class UCameraAnim : public UObject
{
public:
	class UInterpGroupCamera*                          CameraInterpGroup;                             // 0x003C (0x0004) [0x0000000000000000]               
	class UInterpGroup*                                PreviewInterpGroup;                            // 0x0040 (0x0004) [0x0000000000002000] (CPF_Transient | CPF_EditorOnly)
	float                                              AnimLength;                                    // 0x0044 (0x0004) [0x0000000000000002] (CPF_Const)   
	struct FBox                                        BoundingBox;                                   // 0x0048 (0x001C) [0x0000000000000002] (CPF_Const)   
	struct FPostProcessSettings                        BasePPSettings;                                // 0x0064 (0x0154) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	float                                              BasePPSettingsAlpha;                           // 0x01B8 (0x0004) [0x0000000000000002] (CPF_Const)   
	float                                              BaseFOV;                                       // 0x01BC (0x0004) [0x0000000000000002] (CPF_Const)   

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CameraAnim");
		}

		return uClassPointer;
	};

};

// Class Engine.CameraAnimInst
// 0x0208 (0x003C - 0x0244)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                       // 0x003C (0x0004) [0x0000000000000000]               
	class UInterpGroupInst*                            InterpGroupInst;                               // 0x0040 (0x0004) [0x0000000004400008] (CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline)
	float                                              CurTime;                                       // 0x0044 (0x0004) [0x0000000000002000] (CPF_Transient)
	uint32_t                                           bLooping : 1;                                  // 0x0048 (0x0004) [0x0000000000002000] [0x00000001] (CPF_Transient)
	uint32_t                                           bFinished : 1;                                 // 0x0048 (0x0004) [0x0000000000002000] [0x00000002] (CPF_Transient)
	uint32_t                                           bAutoReleaseWhenFinished : 1;                  // 0x0048 (0x0004) [0x0000000000002000] [0x00000004] (CPF_Transient)
	uint32_t                                           bBlendingIn : 1;                               // 0x0048 (0x0004) [0x0000000000002000] [0x00000008] (CPF_Transient)
	uint32_t                                           bBlendingOut : 1;                              // 0x0048 (0x0004) [0x0000000000002000] [0x00000010] (CPF_Transient)
	uint32_t                                           MirrorX : 1;                                   // 0x0048 (0x0004) [0x0000000000002000] [0x00000020] (CPF_Transient)
	uint32_t                                           bPauseUpdateWhenFinished : 1;                  // 0x0048 (0x0004) [0x0000000000002000] [0x00000040] (CPF_Transient)
	float                                              BlendInTime;                                   // 0x004C (0x0004) [0x0000000000000000]               
	float                                              BlendOutTime;                                  // 0x0050 (0x0004) [0x0000000000000000]               
	float                                              CurBlendInTime;                                // 0x0054 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              CurBlendOutTime;                               // 0x0058 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              PlayRate;                                      // 0x005C (0x0004) [0x0000000000000000]               
	float                                              BasePlayScale;                                 // 0x0060 (0x0004) [0x0000000000000000]               
	float                                              TransientScaleModifier;                        // 0x0064 (0x0004) [0x0000000000000000]               
	float                                              CurrentBlendWeight;                            // 0x0068 (0x0004) [0x0000000000000000]               
	float                                              RemainingTime;                                 // 0x006C (0x0004) [0x0000000000002000] (CPF_Transient)
	class UInterpTrackMove*                            MoveTrack;                                     // 0x0070 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UInterpTrackInstMove*                        MoveInst;                                      // 0x0074 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UAnimNodeSequence*                           SourceAnimNode;                                // 0x0078 (0x0004) [0x0000000000002000] (CPF_Transient)
	ECameraAnimPlaySpace                               PlaySpace;                                     // 0x007C (0x0001) [0x0000000000000000] (CPF_ProtectedWrite)
	struct FMatrix                                     UserPlaySpaceMatrix;                           // 0x0080 (0x0040) [0x0000000000002000] (CPF_Transient)
	struct FPostProcessSettings                        LastPPSettings;                                // 0x00C0 (0x0154) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)
	float                                              LastPPSettingsAlpha;                           // 0x0214 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LastCameraLoc;                                 // 0x0218 (0x000C) [0x0000000000002000] (CPF_Transient)
	class UInterpTrackMove*                            LightMoveTrack;                                // 0x0224 (0x0004) [0x0000000000002000] (CPF_Transient)
	class UInterpTrackInstMove*                        LightMoveInst;                                 // 0x0228 (0x0004) [0x0000000000002000] (CPF_Transient)
	struct FVector                                     LightAnimPos;                                  // 0x022C (0x000C) [0x0000000000002000] (CPF_Transient)
	struct FRotator                                    LightAnimRot;                                  // 0x0238 (0x000C) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CameraAnimInst");
		}

		return uClassPointer;
	};

	void SetPlaySpace(ECameraAnimPlaySpace NewSpace, const struct FRotator& optionalUserPlaySpace);
	void ApplyTransientScaling(float Scalar);
	void Stop(bool optionalBImmediate);
	void AdvanceAnim(float DeltaTime, bool bJump);
	void Update(float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float optionalNewDuration);
	void Play(class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, bool bInLoop, bool bRandomStartTime, float optionalDuration);
};

// Class Engine.CameraModifier
// 0x001C (0x003C - 0x0058)
class UCameraModifier : public UObject
{
public:
	uint32_t                                           bDisabled : 1;                                 // 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bPendingDisable : 1;                           // 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bExclusive : 1;                                // 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bDebug : 1;                                    // 0x003C (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	class ACamera*                                     CameraOwner;                                   // 0x0040 (0x0004) [0x0000000000000000]               
	uint8_t                                            Priority;                                      // 0x0044 (0x0001) [0x0000000000000000]               
	float                                              AlphaInTime;                                   // 0x0048 (0x0004) [0x0000000000000000]               
	float                                              AlphaOutTime;                                  // 0x004C (0x0004) [0x0000000000000000]               
	float                                              Alpha;                                         // 0x0050 (0x0004) [0x0000000000002000] (CPF_Transient)
	float                                              TargetAlpha;                                   // 0x0054 (0x0004) [0x0000000000002000] (CPF_Transient)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CameraModifier");
		}

		return uClassPointer;
	};

	void UpdateAlpha(class ACamera* Camera, float DeltaTime);
	bool ProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator& outOut_ViewRotation, struct FRotator& outOut_DeltaRot);
	void ToggleModifier();
	void EnableModifier();
	void eventDisableModifier(bool optionalBImmediate);
	bool RemoveCameraModifier(class ACamera* Camera);
	bool AddCameraModifier(class ACamera* Camera);
	bool IsDisabled();
	bool ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV& outOutPOV);
	void Init();
};

// Class Engine.CameraModifier_CameraShake
// 0x0010 (0x0058 - 0x0068)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	class TArray<struct FCameraShakeInstance>          ActiveShakes;                                  // 0x0058 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	float                                              SplitScreenShakeScale;                         // 0x0064 (0x0004) [0x0000000000000003] (CPF_Edit | CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		}

		return uClassPointer;
	};

	bool ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV& outOutPOV);
	void UpdateCameraShake(float DeltaTime, struct FCameraShakeInstance& outShake, struct FTPOV& outOutPOV);
	void RemoveAllCameraShakes();
	void RemoveCameraShake(class UCameraShake* Shake);
	void AddCameraShake(class UCameraShake* NewShake, float Scale, ECameraAnimPlaySpace optionalPlaySpace, const struct FRotator& optionalUserPlaySpaceRot);
	struct FCameraShakeInstance InitializeShake(class UCameraShake* NewShake, float Scale, ECameraAnimPlaySpace PlaySpace, const struct FRotator& optionalUserPlaySpaceRot);
	void ReinitShake(int32_t ActiveShakeIdx, float Scale);
	static float InitializeOffset(struct FFOscillator& outParam);
};

// Class Engine.CameraShake
// 0x007C (0x003C - 0x00B8)
class UCameraShake : public UObject
{
public:
	uint32_t                                           bSingleInstance : 1;                           // 0x003C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bRandomAnimSegment : 1;                        // 0x003C (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              OscillationDuration;                           // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OscillationBlendInTime;                        // 0x0044 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              OscillationBlendOutTime;                       // 0x0048 (0x0004) [0x0000000000000001] (CPF_Edit)    
	struct FROscillator                                RotOscillation;                                // 0x004C (0x0024) [0x0000000000000001] (CPF_Edit)    
	struct FVOscillator                                LocOscillation;                                // 0x0070 (0x0024) [0x0000000000000001] (CPF_Edit)    
	struct FFOscillator                                FOVOscillation;                                // 0x0094 (0x000C) [0x0000000000000001] (CPF_Edit)    
	class UCameraAnim*                                 Anim;                                          // 0x00A0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimPlayRate;                                  // 0x00A4 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimScale;                                     // 0x00A8 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimBlendInTime;                               // 0x00AC (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              AnimBlendOutTime;                              // 0x00B0 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              RandomAnimSegmentDuration;                     // 0x00B4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CameraShake");
		}

		return uClassPointer;
	};

	float GetLocOscillationMagnitude();
	float GetRotOscillationMagnitude();
};

// Class Engine.CloudStorageUpgradeHelper
// 0x0000 (0x003C - 0x003C)
class UCloudStorageUpgradeHelper : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CloudStorageUpgradeHelper");
		}

		return uClassPointer;
	};

	void eventGetCloudUpgradeKeys(class TArray<class FString>& outCloudKeys);
	void eventHandleLocalKeyValue(class FString& outCloudKeyName, struct FPlatformInterfaceData& outCloudValue, int32_t& outBShouldMoveToCloud, int32_t& outBShouldDeleteLocalKey);
	void eventHandleLocalDocument(class FString& outDocName, int32_t& outBShouldMoveToCloud, int32_t& outBShouldDeleteLocalFile);
};

// Class Engine.PlatformInterfaceBase
// 0x0018 (0x003C - 0x0054)
class UPlatformInterfaceBase : public UObject
{
public:
	class TArray<struct FDelegateArray>                AllDelegates;                                  // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __PlatformInterfaceDelegate__Delegate;         // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PlatformInterfaceBase");
		}

		return uClassPointer;
	};

	void ClearDelegate(int32_t DelegateType, const struct FScriptDelegate& InDelegate);
	void AddDelegate(int32_t DelegateType, const struct FScriptDelegate& InDelegate);
	static class UInAppMessageBase* GetInAppMessageInterface();
	static class UAppNotificationsBase* GetAppNotificationsInterface();
	static class UTwitterIntegrationBase* GetTwitterIntegration();
	static class UAnalyticEventsBase* GetAnalyticEventsInterface();
	static class UMicroTransactionBase* GetMicroTransactionInterface();
	static class UInGameAdManager* GetInGameAdManager();
	static class UFacebookIntegration* GetFacebookIntegration();
	static class UCloudStorageBase* GetLocalStorageInterface();
	static class UCloudStorageBase* GetCloudStorageInterface();
	void CallDelegates(int32_t DelegateType, struct FPlatformInterfaceDelegateResult& outDelegateResult);
	void PlatformInterfaceDelegate(struct FPlatformInterfaceDelegateResult& outResult);
};

// Class Engine.AnalyticEventsBase
// 0x0004 (0x0054 - 0x0058)
class UAnalyticEventsBase : public UPlatformInterfaceBase
{
public:
	uint32_t                                           bSessionInProgress : 1;                        // 0x0054 (0x0004) [0x0000000000000002] [0x00000001] (CPF_Const)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnalyticEventsBase");
		}

		return uClassPointer;
	};

	void eventLogErrorMessage(const class FString& ErrorName, const class FString& ErrorMessage);
	void eventEndStringEventParamArray(const class FString& EventName, const class TArray<struct FEventStringParam>& ParamArray);
	void eventLogStringEventParamArray(const class FString& EventName, const class TArray<struct FEventStringParam>& ParamArray, bool bTimed);
	void eventEndStringEventParam(const class FString& EventName, const class FString& ParamName, const class FString& ParamValue);
	void eventLogStringEventParam(const class FString& EventName, const class FString& ParamName, const class FString& ParamValue, bool bTimed);
	void eventEndStringEvent(const class FString& EventName);
	void eventLogStringEvent(const class FString& EventName, bool bTimed);
	void eventEndSession();
	void eventStartSession();
	void eventInit();
	bool IsSessionInProgress();
};

// Class Engine.MultiProviderAnalytics
// 0x0018 (0x0058 - 0x0070)
class UMultiProviderAnalytics : public UAnalyticEventsBase
{
public:
	class TArray<class FString>                        AnalyticsProviderClassNames;                   // 0x0058 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<class UAnalyticEventsBase*>           AnalyticsProviders;                            // 0x0064 (0x000C) [0x0000000000402000] (CPF_Transient | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MultiProviderAnalytics");
		}

		return uClassPointer;
	};

	void eventLogErrorMessage(const class FString& ErrorName, const class FString& ErrorMessage);
	void eventEndStringEventParamArray(const class FString& EventName, const class TArray<struct FEventStringParam>& ParamArray);
	void eventLogStringEventParamArray(const class FString& EventName, const class TArray<struct FEventStringParam>& ParamArray, bool bTimed);
	void eventEndStringEventParam(const class FString& EventName, const class FString& ParamName, const class FString& ParamValue);
	void eventLogStringEventParam(const class FString& EventName, const class FString& ParamName, const class FString& ParamValue, bool bTimed);
	void eventEndStringEvent(const class FString& EventName);
	void eventLogStringEvent(const class FString& EventName, bool bTimed);
	void eventEndSession();
	void eventStartSession();
	void Init();
};

// Class Engine.AppNotificationsBase
// 0x003C (0x0054 - 0x0090)
class UAppNotificationsBase : public UPlatformInterfaceBase
{
public:
	struct FLaunchNotificationInfo                     AppLaunchNotification;                         // 0x0054 (0x0024) [0x0000000000400002] (CPF_Const | CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedLocalNotification__Delegate;       // 0x0078 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedRemoteNotification__Delegate;      // 0x0084 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AppNotificationsBase");
		}

		return uClassPointer;
	};

	void DebugLogNotification(struct FNotificationInfo& outNotification);
	void OnReceivedRemoteNotification(bool bWasAppActive, struct FNotificationInfo& outNotification);
	void OnReceivedLocalNotification(bool bWasAppActive, struct FNotificationInfo& outNotification);
	void CancelAllScheduledLocalNotifications();
	void ScheduleLocalNotification(int32_t StartOffsetSeconds, struct FNotificationInfo& outNotification);
	bool WasLaunchedViaNotification();
	void eventInit();
};

// Class Engine.CloudStorageBase
// 0x0010 (0x0054 - 0x0064)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	class TArray<class FString>                        LocalCloudFiles;                               // 0x0054 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	uint32_t                                           bSuppressDelegateCalls : 1;                    // 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CloudStorageBase");
		}

		return uClassPointer;
	};

	bool eventUpgradeLocalStorageToCloud(class UCloudStorageUpgradeHelper* UpgradeHelper, bool optionalBForceSearchAgain);
	bool eventResolveConflictWithVersionIndex(int32_t Index);
	bool eventResolveConflictWithNewestDocument();
	bool eventWaitForWritesToFinish(float optionalMaxTimeSeconds);
	bool eventIsStillWritingFiles();
	bool eventSaveDocumentWithObject(int32_t Index, class UObject* ObjectData, int32_t SaveVersion);
	bool eventSaveDocumentWithBytes(int32_t Index, const class TArray<uint8_t>& ByteData);
	bool eventSaveDocumentWithString(int32_t Index, const class FString& StringData);
	bool eventWriteCloudDocument(int32_t Index);
	class UObject* eventParseDocumentAsObject(int32_t Index, class UClass* ObjectClass, int32_t ExpectedVersion, bool optionalBIsForConflict);
	void eventParseDocumentAsBytes(int32_t Index, bool optionalBIsForConflict, class TArray<uint8_t>& outByteData);
	class FString eventParseDocumentAsString(int32_t Index, bool optionalBIsForConflict);
	bool eventReadCloudDocument(int32_t Index, bool optionalBIsForConflict);
	int32_t eventCreateCloudDocument(const class FString& Filename);
	class FString eventGetCloudDocumentName(int32_t Index);
	int32_t eventGetNumCloudDocuments(bool optionalBIsForConflict);
	bool eventQueryForCloudDocuments();
	bool eventWriteKeyValue(const class FString& KeyName, struct FPlatformInterfaceData& outValue);
	bool eventReadKeyValue(const class FString& KeyName, EPlatformInterfaceDataType Type, struct FPlatformInterfaceDelegateResult& outValue);
	bool IsUsingLocalStorage();
	void eventInit();
};

// Class Engine.FacebookIntegration
// 0x0048 (0x0054 - 0x009C)
class UFacebookIntegration : public UPlatformInterfaceBase
{
public:
	class FString                                      AppID;                                         // 0x0054 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class TArray<class FString>                        Permissions;                                   // 0x0060 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      UserName;                                      // 0x006C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      UserId;                                        // 0x0078 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      AccessToken;                                   // 0x0084 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FFacebookFriend>               FriendsList;                                   // 0x0090 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FacebookIntegration");
		}

		return uClassPointer;
	};

	void eventDisconnect();
	void eventFacebookDialog(const class FString& Action, const class TArray<class FString>& ParamKeysAndValues);
	void eventFacebookRequest(const class FString& GraphRequest);
	bool eventIsAuthorized();
	bool eventAuthorize();
	bool eventInit();
};

// Class Engine.InAppMessageBase
// 0x0000 (0x0054 - 0x0054)
class UInAppMessageBase : public UPlatformInterfaceBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InAppMessageBase");
		}

		return uClassPointer;
	};

	bool eventShowInAppEmailUI(const class FString& optionalInitialSubject, const class FString& optionalInitialMessage);
	bool eventShowInAppSMSUI(const class FString& optionalInitialMessage);
	void eventInit();
};

// Class Engine.InGameAdManager
// 0x0004 (0x0054 - 0x0058)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	uint32_t                                           bShouldPauseWhileAdOpen : 1;                   // 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InGameAdManager");
		}

		return uClassPointer;
	};

	void SetPauseWhileAdOpen(bool bShouldPause);
	void ForceCloseAd();
	void HideBanner();
	void ShowBanner(bool bShowBottomOfScreen);
	void eventInit();
};

// Class Engine.MicroTransactionBase
// 0x0024 (0x0054 - 0x0078)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	class TArray<struct FPurchaseInfo>                 AvailableProducts;                             // 0x0054 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      LastError;                                     // 0x0060 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class FString                                      LastErrorSolution;                             // 0x006C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MicroTransactionBase");
		}

		return uClassPointer;
	};

	int32_t eventGetProductIndex(const class FString& Identifier);
	bool eventBeginPurchase(int32_t Index);
	bool eventIsAllowedToMakePurchases();
	bool eventQueryForAvailablePurchases();
	void eventInit();
};

// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0054 - 0x0054)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TwitterIntegrationBase");
		}

		return uClassPointer;
	};

	bool eventTwitterRequest(const class FString& URL, const class TArray<class FString>& ParamKeysAndValues, ETwitterRequestMethod RequestMethod, int32_t AccountIndex);
	class FString eventGetAccountId(int32_t AccountIndex);
	class FString eventGetAccountName(int32_t AccountIndex);
	int32_t eventGetNumAccounts();
	bool eventAuthorizeAccounts();
	bool eventShowTweetUI(const class FString& optionalInitialMessage, const class FString& optionalURL, const class FString& optionalPicture);
	bool eventCanShowTweetUI();
	void eventInit();
};

// Class Engine.PlatformInterfaceWebResponse
// 0x0068 (0x003C - 0x00A4)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	class FString                                      OriginalURL;                                   // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ResponseCode;                                  // 0x0048 (0x0004) [0x0000000000000000]               
	int32_t                                            Tag;                                           // 0x004C (0x0004) [0x0000000000000000]               
	struct FMap_Mirror                                 Headers;                                       // 0x0050 (0x003C) [0x0000000000001000] (CPF_Native)  
	class FString                                      StringResponse;                                // 0x008C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<uint8_t>                              BinaryResponse;                                // 0x0098 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		}

		return uClassPointer;
	};

	class FString GetHeaderValue(const class FString& HeaderName);
	void GetHeader(int32_t HeaderIndex, class FString& outHeader, class FString& outValue);
	int32_t GetNumHeaders();
};

// Class Engine.SeqEvent_HitWall
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_HitWall : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_HitWall");
		}

		return uClassPointer;
	};

};

// Class Engine.LocalMessage
// 0x0014 (0x003C - 0x0050)
class ULocalMessage : public UObject
{
public:
	uint32_t                                           bIsSpecial : 1;                                // 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bIsUnique : 1;                                 // 0x003C (0x0004) [0x0000000000000000] [0x00000002] 
	uint32_t                                           bIsPartiallyUnique : 1;                        // 0x003C (0x0004) [0x0000000000000000] [0x00000004] 
	uint32_t                                           bIsConsoleMessage : 1;                         // 0x003C (0x0004) [0x0000000000000000] [0x00000008] 
	uint32_t                                           bBeep : 1;                                     // 0x003C (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bCountInstances : 1;                           // 0x003C (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              Lifetime;                                      // 0x0040 (0x0004) [0x0000000000000000]               
	struct FColor                                      DrawColor;                                     // 0x0044 (0x0004) [0x0000000000000000]               
	float                                              PosY;                                          // 0x0048 (0x0004) [0x0000000000000000]               
	int32_t                                            FontSize;                                      // 0x004C (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.LocalMessage");
		}

		return uClassPointer;
	};

	static bool PartiallyDuplicates(int32_t Switch1, int32_t Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2);
	static bool IsConsoleMessage(int32_t Switch);
	static float GetLifeTime(int32_t Switch);
	static int32_t GetFontSize(int32_t Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer);
	static float GetPos(int32_t Switch, class AHUD* myHUD);
	static struct FColor GetColor(int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	static struct FColor GetConsoleColor(class APlayerReplicationInfo* RelatedPRI);
	static class FString GetString(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	static void ClientReceive(class APlayerController* P, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
};

// Class Engine.SeqAct_Destroy
// 0x0010 (0x00FC - 0x010C)
class USeqAct_Destroy : public USequenceAction
{
public:
	uint32_t                                           bDestroyBasedActors : 1;                       // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<class UClass*>                        IgnoreBasedClasses;                            // 0x0100 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Destroy");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_Teleport
// 0x0014 (0x00FC - 0x0110)
class USeqAct_Teleport : public USequenceAction
{
public:
	uint32_t                                           bUpdateRotation : 1;                           // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bCheckOverlap : 1;                             // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	float                                              TeleportDistance;                              // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class TArray<class AVolume*>                       TeleportVolumes;                               // 0x0104 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_Teleport");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
	static bool ShouldTeleport(class AActor* TestActor, const struct FVector& TeleportLocation, float optionalTeleportDist, const class TArray<class AVolume*>& optionalVolumes);
};

// Class Engine.SeqAct_SetVelocity
// 0x0014 (0x00FC - 0x0110)
class USeqAct_SetVelocity : public USequenceAction
{
public:
	struct FVector                                     VelocityDir;                                   // 0x00FC (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              VelocityMag;                                   // 0x0108 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bVelocityRelativeToActorRotation : 1;          // 0x010C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetVelocity");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_ToggleHidden
// 0x0010 (0x00FC - 0x010C)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:
	uint32_t                                           bToggleBasedActors : 1;                        // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class TArray<class UClass*>                        IgnoreBasedClasses;                            // 0x0100 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleHidden");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_AttachToActor
// 0x0024 (0x00FC - 0x0120)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	uint32_t                                           bDetach : 1;                                   // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bHardAttach : 1;                               // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bUseRelativeOffset : 1;                        // 0x00FC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bUseRelativeRotation : 1;                      // 0x00FC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	class FName                                        BoneName;                                      // 0x0100 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FVector                                     RelativeOffset;                                // 0x0108 (0x000C) [0x0000000000000001] (CPF_Edit)    
	struct FRotator                                    RelativeRotation;                              // 0x0114 (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AttachToActor");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqEvent_MobileTouch
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_MobileTouch : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_MobileTouch");
		}

		return uClassPointer;
	};

};

// Class Engine.OnlinePlayerInterface
// 0x0000 (0x003C - 0x003C)
class UOnlinePlayerInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlinePlayerInterface");
		}

		return uClassPointer;
	};

	EOnlineEnumerationReadState GetAchievements(uint8_t LocalUserNum, int32_t optionalTitleId, class TArray<struct FAchievementDetails>& outAchievements);
	void ClearReadAchievementsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate);
	void AddReadAchievementsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate);
	void OnReadAchievementsComplete(int32_t TitleId);
	bool ReadAchievements(uint8_t LocalUserNum, int32_t optionalTitleId, bool optionalBShouldReadText, bool optionalBShouldReadImages);
	void ClearUnlockAchievementCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate);
	void AddUnlockAchievementCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate);
	void OnUnlockAchievementComplete(bool bWasSuccessful);
	bool UnlockAchievement(uint8_t LocalUserNum, int32_t AchievementId, float optionalPercentComplete);
	bool DeleteMessage(uint8_t LocalUserNum, int32_t MessageIndex);
	void ClearFriendMessageReceivedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& MessageDelegate);
	void AddFriendMessageReceivedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& MessageDelegate);
	void OnFriendMessageReceived(uint8_t LocalUserNum, const struct FUniqueNetId& SendingPlayer, const class FString& SendingNick, const class FString& Message);
	void GetFriendMessages(uint8_t LocalUserNum, class TArray<struct FOnlineFriendMessage>& outFriendMessages);
	void ClearJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate);
	void AddJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate);
	void OnJoinFriendGameComplete(bool bWasSuccessful);
	bool JoinFriendGame(uint8_t LocalUserNum, const struct FUniqueNetId& Friend);
	void ClearReceivedGameInviteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate);
	void AddReceivedGameInviteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate);
	void OnReceivedGameInvite(uint8_t LocalUserNum, const class FString& InviterName);
	bool SendGameInviteToFriends(uint8_t LocalUserNum, const class TArray<struct FUniqueNetId>& Friends, const class FString& optionalText);
	bool SendGameInviteToFriend(uint8_t LocalUserNum, const struct FUniqueNetId& Friend, const class FString& optionalText);
	bool SendMessageToFriendW(uint8_t LocalUserNum, const struct FUniqueNetId& Friend, const class FString& Message);
	void ClearFriendInviteReceivedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& InviteDelegate);
	void AddFriendInviteReceivedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& InviteDelegate);
	void OnFriendInviteReceived(uint8_t LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const class FString& RequestingNick, const class FString& Message);
	bool RemoveFriend(uint8_t LocalUserNum, const struct FUniqueNetId& FormerFriend);
	bool DenyFriendInvite(uint8_t LocalUserNum, const struct FUniqueNetId& RequestingPlayer);
	bool AcceptFriendInvite(uint8_t LocalUserNum, const struct FUniqueNetId& RequestingPlayer);
	void ClearAddFriendByNameCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& FriendDelegate);
	void AddAddFriendByNameCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& FriendDelegate);
	void OnAddFriendByNameComplete(bool bWasSuccessful);
	bool AddFriendByName(uint8_t LocalUserNum, const class FString& FriendName, const class FString& optionalMessage);
	bool AddFriend(uint8_t LocalUserNum, const struct FUniqueNetId& NewFriend, const class FString& optionalMessage);
	class FString GetKeyboardInputResults(uint8_t& outBWasCanceled);
	void ClearKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate);
	void AddKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate);
	void OnKeyboardInputComplete(bool bWasSuccessful);
	bool ShowKeyboardUI(uint8_t LocalUserNum, const class FString& TitleText, const class FString& DescriptionText, bool optionalBIsPassword, bool optionalBShouldValidate, const class FString& optionalDefaultText, int32_t optionalMaxResultLength);
	void SetOnlineStatus(uint8_t LocalUserNum, int32_t StatusId, class TArray<struct FLocalizedStringSetting>& outLocalizedStringSettings, class TArray<struct FSettingsProperty>& outProperties);
	EOnlineEnumerationReadState GetFriendsList(uint8_t LocalUserNum, int32_t optionalCount, int32_t optionalStartingAt, class TArray<struct FOnlineFriend>& outFriends);
	void ClearReadFriendsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate);
	void AddReadFriendsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate);
	void OnReadFriendsComplete(bool bWasSuccessful);
	bool ReadFriendsList(uint8_t LocalUserNum, int32_t optionalCount, int32_t optionalStartingAt);
	void ClearWritePlayerStorageCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate);
	void AddWritePlayerStorageCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate);
	void OnWritePlayerStorageComplete(uint8_t LocalUserNum, bool bWasSuccessful);
	bool WritePlayerStorage(uint8_t LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int32_t optionalDeviceID);
	class UOnlinePlayerStorage* GetPlayerStorage(uint8_t LocalUserNum);
	void ClearReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate);
	void AddReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate);
	void OnReadPlayerStorageForNetIdComplete(const struct FUniqueNetId& NetId, bool bWasSuccessful);
	bool ReadPlayerStorageForNetId(uint8_t LocalUserNum, const struct FUniqueNetId& NetId, class UOnlinePlayerStorage* PlayerStorage);
	void ClearReadPlayerStorageCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate);
	void AddReadPlayerStorageCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate);
	void OnReadPlayerStorageComplete(uint8_t LocalUserNum, bool bWasSuccessful);
	bool ReadPlayerStorage(uint8_t LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int32_t optionalDeviceID);
	void ClearWriteProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate);
	void AddWriteProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate);
	void OnWriteProfileSettingsComplete(uint8_t LocalUserNum, bool bWasSuccessful);
	bool WriteProfileSettings(uint8_t LocalUserNum, class UOnlineProfileSettings* ProfileSettings);
	class UOnlineProfileSettings* GetProfileSettings(uint8_t LocalUserNum);
	void ClearReadProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void AddReadProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void OnReadProfileSettingsComplete(uint8_t LocalUserNum, bool bWasSuccessful);
	bool ReadProfileSettings(uint8_t LocalUserNum, class UOnlineProfileSettings* ProfileSettings);
	void ClearFriendsChangeDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& FriendsDelegate);
	void AddFriendsChangeDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& FriendsDelegate);
	void ClearMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate);
	void AddMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate);
	void ClearLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate);
	void AddLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate);
	void ClearLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, uint8_t LocalUserNum);
	void AddLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, uint8_t LocalUserNum);
	void OnLoginStatusChange(ELoginStatus NewStatus, const struct FUniqueNetId& NewId);
	void ClearLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate);
	void AddLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate);
	bool ShowFriendsUI(uint8_t LocalUserNum);
	bool IsMuted(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID);
	bool AreAnyFriends(uint8_t LocalUserNum, class TArray<struct FFriendsQuery>& outQuery);
	bool IsFriend(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID);
	EFeaturePrivilegeLevel CanShowPresenceInformation(uint8_t LocalUserNum);
	EFeaturePrivilegeLevel CanViewPlayerProfiles(uint8_t LocalUserNum);
	EFeaturePrivilegeLevel CanPurchaseContent(uint8_t LocalUserNum);
	EFeaturePrivilegeLevel CanDownloadUserContent(uint8_t LocalUserNum);
	EFeaturePrivilegeLevel CanCommunicate(uint8_t LocalUserNum);
	EFeaturePrivilegeLevel CanPlayOnline(uint8_t LocalUserNum);
	bool IsLocalLogin(uint8_t LocalUserNum);
	bool IsGuestLogin(uint8_t LocalUserNum);
	class FString GetPlayerNickname(uint8_t LocalUserNum);
	bool GetUniquePlayerId(uint8_t LocalUserNum, struct FUniqueNetId& outPlayerID);
	ELoginStatus GetLoginStatus(uint8_t LocalUserNum);
	void ClearLogoutCompletedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& LogoutDelegate);
	void AddLogoutCompletedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& LogoutDelegate);
	void OnLogoutCompleted(bool bWasSuccessful);
	bool Logout(uint8_t LocalUserNum);
	void ClearLoginFailedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& LoginDelegate);
	void AddLoginFailedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& LoginDelegate);
	void OnLoginFailed(uint8_t LocalUserNum, EOnlineServerConnectionStatus ErrorCode);
	bool AutoLogin();
	bool Login(uint8_t LocalUserNum, const class FString& LoginName, const class FString& Password, bool optionalBWantsLocalOnly);
	bool ShowLoginUI(bool optionalBShowOnlineOnly);
	void OnFriendsChange();
	void OnMutingChange();
	void OnLoginCancelled();
	void OnLoginChange(uint8_t LocalUserNum);
};

// Class Engine.SharedCloudFileInterface
// 0x0000 (0x003C - 0x003C)
class USharedCloudFileInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SharedCloudFileInterface");
		}

		return uClassPointer;
	};

	void ClearWriteSharedFileCompleteDelegate(const struct FScriptDelegate& WriteSharedFileCompleteDelegate);
	void AddWriteSharedFileCompleteDelegate(const struct FScriptDelegate& WriteSharedFileCompleteDelegate);
	bool WriteSharedFile(const class FString& UserId, const class FString& Filename, class TArray<uint8_t>& outContents);
	void OnWriteSharedFileComplete(bool bWasSuccessful, const class FString& UserId, const class FString& Filename, const class FString& SharedHandle);
	void ClearReadSharedFileCompleteDelegate(const struct FScriptDelegate& ReadSharedFileCompleteDelegate);
	void AddReadSharedFileCompleteDelegate(const struct FScriptDelegate& ReadSharedFileCompleteDelegate);
	bool ReadSharedFile(const class FString& SharedHandle);
	void OnReadSharedFileComplete(bool bWasSuccessful, const class FString& SharedHandle);
	bool ClearSharedFile(const class FString& SharedHandle);
	bool ClearSharedFiles();
	bool GetSharedFileContents(const class FString& SharedHandle, class TArray<uint8_t>& outFileContents);
};

// Class Engine.UserCloudFileInterface
// 0x0000 (0x003C - 0x003C)
class UUserCloudFileInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UserCloudFileInterface");
		}

		return uClassPointer;
	};

	void ClearAllDelegates();
	void ClearDeleteUserFileCompleteDelegate(const struct FScriptDelegate& DeleteUserFileCompleteDelegate);
	void AddDeleteUserFileCompleteDelegate(const struct FScriptDelegate& DeleteUserFileCompleteDelegate);
	bool DeleteUserFile(const class FString& UserId, const class FString& Filename, bool bShouldCloudDelete, bool bShouldLocallyDelete);
	void OnDeleteUserFileComplete(bool bWasSuccessful, const class FString& UserId, const class FString& Filename);
	void ClearWriteUserFileCompleteDelegate(const struct FScriptDelegate& WriteUserFileCompleteDelegate);
	void AddWriteUserFileCompleteDelegate(const struct FScriptDelegate& WriteUserFileCompleteDelegate);
	bool WriteUserFile(const class FString& UserId, const class FString& Filename, class TArray<uint8_t>& outFileContents);
	void OnWriteUserFileComplete(bool bWasSuccessful, const class FString& UserId, const class FString& Filename);
	void ClearReadUserFileCompleteDelegate(const struct FScriptDelegate& ReadUserFileCompleteDelegate);
	void AddReadUserFileCompleteDelegate(const struct FScriptDelegate& ReadUserFileCompleteDelegate);
	bool ReadUserFile(const class FString& UserId, const class FString& Filename);
	void OnReadUserFileComplete(bool bWasSuccessful, const class FString& UserId, const class FString& Filename);
	void GetUserFileList(const class FString& UserId, class TArray<struct FEmsFile>& outUserFiles);
	void ClearEnumerateUserFileCompleteDelegate(const struct FScriptDelegate& EnumerateUserFileCompleteDelegate);
	void AddEnumerateUserFileCompleteDelegate(const struct FScriptDelegate& EnumerateUserFileCompleteDelegate);
	void EnumerateUserFiles(const class FString& UserId);
	void OnEnumerateUserFilesComplete(bool bWasSuccessful, const class FString& UserId);
	bool ClearFile(const class FString& UserId, const class FString& Filename);
	bool ClearFiles(const class FString& UserId);
	bool GetFileContents(const class FString& UserId, const class FString& Filename, class TArray<uint8_t>& outFileContents);
};

// Class Engine.OnlineSocialInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineSocialInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineSocialInterface");
		}

		return uClassPointer;
	};

	void ClearPostLinkCompleted(uint8_t LocalUserNum, const struct FScriptDelegate& PostLinkDelegate);
	void AddPostLinkCompleted(uint8_t LocalUserNum, const struct FScriptDelegate& PostLinkDelegate);
	void OnPostLinkCompleted(uint8_t LocalUserNum, bool bWasSuccessful);
	bool PostLink(uint8_t LocalUserNum, struct FSocialPostLinkInfo& outPostLinkInfo);
	void ClearPostImageCompleted(uint8_t LocalUserNum, const struct FScriptDelegate& PostImageDelegate);
	void AddPostImageCompleted(uint8_t LocalUserNum, const struct FScriptDelegate& PostImageDelegate);
	void OnPostImageCompleted(uint8_t LocalUserNum, bool bWasSuccessful);
	bool PostImage(uint8_t LocalUserNum, const class TArray<uint8_t>& FullImage, struct FSocialPostImageInfo& outPostImageInfo);
	void ClearQuerySocialPostPrivilegesCompleted(const struct FScriptDelegate& PostPrivilegesDelegate);
	void AddQuerySocialPostPrivilegesCompleted(const struct FScriptDelegate& PostPrivilegesDelegate);
	void OnQuerySocialPostPrivilegesCompleted(bool bWasSuccessful, const struct FSocialPostPrivileges& PostPrivileges);
	bool QuerySocialPostPrivileges();
};

// Class Engine.OnlineTitleFileCacheInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineTitleFileCacheInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineTitleFileCacheInterface");
		}

		return uClassPointer;
	};

	bool DeleteTitleFile(const class FString& Filename);
	bool DeleteTitleFiles(float MaxAgeSeconds);
	bool ClearCachedFile(const class FString& Filename);
	bool ClearCachedFiles();
	class FString GetTitleFileLogicalName(const class FString& Filename);
	class FString GetTitleFileHash(const class FString& Filename);
	EOnlineEnumerationReadState GetTitleFileState(const class FString& Filename);
	bool GetTitleFileContents(const class FString& Filename, class TArray<uint8_t>& outFileContents);
	void ClearSaveTitleFileCompleteDelegate(const struct FScriptDelegate& SaveCompleteDelegate);
	void AddSaveTitleFileCompleteDelegate(const struct FScriptDelegate& SaveCompleteDelegate);
	void OnSaveTitleFileComplete(bool bWasSuccessful, const class FString& Filename);
	bool SaveTitleFile(const class FString& Filename, const class FString& LogicalName, const class TArray<uint8_t>& FileContents);
	void ClearLoadTitleFileCompleteDelegate(const struct FScriptDelegate& LoadCompleteDelegate);
	void AddLoadTitleFileCompleteDelegate(const struct FScriptDelegate& LoadCompleteDelegate);
	void OnLoadTitleFileComplete(bool bWasSuccessful, const class FString& Filename);
	bool LoadTitleFile(const class FString& Filename);
};

// Class Engine.OnlineTitleFileInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineTitleFileInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineTitleFileInterface");
		}

		return uClassPointer;
	};

	void ClearRequestTitleFileListCompleteDelegate(const struct FScriptDelegate& RequestTitleFileListDelegate);
	void AddRequestTitleFileListCompleteDelegate(const struct FScriptDelegate& RequestTitleFileListDelegate);
	void OnRequestTitleFileListComplete(bool bWasSuccessful, const class FString& ResultStr);
	void RequestTitleFileList();
	bool ClearDownloadedFile(const class FString& Filename);
	bool ClearDownloadedFiles();
	EOnlineEnumerationReadState GetTitleFileState(const class FString& Filename);
	bool GetTitleFileContents(const class FString& Filename, class TArray<uint8_t>& outFileContents);
	void ClearReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate);
	void AddReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate);
	bool ReadTitleFile(const class FString& FileToRead);
	void OnReadTitleFileComplete(bool bWasSuccessful, const class FString& Filename);
};

// Class Engine.OnlinePartyChatInterface
// 0x0000 (0x003C - 0x003C)
class UOnlinePartyChatInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlinePartyChatInterface");
		}

		return uClassPointer;
	};

	bool IsInPartyChat(uint8_t LocalUserNum);
	bool ShowCommunitySessionsUI(uint8_t LocalUserNum);
	bool ShowVoiceChannelUI(uint8_t LocalUserNum);
	bool ShowPartyUI(uint8_t LocalUserNum);
	int32_t GetPartyBandwidth();
	bool SetPartyMemberCustomData(uint8_t LocalUserNum, int32_t Data1, int32_t Data2, int32_t Data3, int32_t Data4);
	void ClearPartyMembersInfoChangedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate);
	void AddPartyMembersInfoChangedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate);
	void OnPartyMembersInfoChanged(const class FString& PlayerName, const struct FUniqueNetId& PlayerID, int32_t CustomData1, int32_t CustomData2, int32_t CustomData3, int32_t CustomData4);
	void ClearPartyMemberListChangedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate);
	void AddPartyMemberListChangedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate);
	void OnPartyMemberListChanged(bool bJoinedOrLeft, const class FString& PlayerName, const struct FUniqueNetId& PlayerID);
	bool GetPartyMemberInformation(const struct FUniqueNetId& MemberId, struct FOnlinePartyMember& outPartyMember);
	bool GetPartyMembersInformation(class TArray<struct FOnlinePartyMember>& outPartyMembers);
	void ClearSendPartyGameInvitesCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate);
	void AddSendPartyGameInvitesCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate);
	void OnSendPartyGameInvitesComplete(bool bWasSuccessful);
	bool SendPartyGameInvites(uint8_t LocalUserNum);
};

// Class Engine.OnlineNewsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineNewsInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineNewsInterface");
		}

		return uClassPointer;
	};

	class FString GetNews(uint8_t LocalUserNum, EOnlineNewsType NewsType);
	void ClearReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate);
	void AddReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate);
	void OnReadNewsCompleted(bool bWasSuccessful, EOnlineNewsType NewsType);
	bool ReadNews(uint8_t LocalUserNum, EOnlineNewsType NewsType);
};

// Class Engine.OnlineStatsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineStatsInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineStatsInterface");
		}

		return uClassPointer;
	};

	void CalcAggregateSkill(const class TArray<struct FDouble>& Mus, const class TArray<struct FDouble>& Sigmas, struct FDouble& outOutAggregateMu, struct FDouble& outOutAggregateSigma);
	bool RegisterStatGuid(const struct FUniqueNetId& PlayerID, class FString& outClientStatGuid);
	class FString GetClientStatGuid();
	void ClearRegisterHostStatGuidCompleteDelegateDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate);
	void AddRegisterHostStatGuidCompleteDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate);
	void OnRegisterHostStatGuidComplete(bool bWasSuccessful);
	bool RegisterHostStatGuid(class FString& outHostStatGuid);
	class FString GetHostStatGuid();
	bool WriteOnlinePlayerScores(const class FName& SessionName, int32_t LeaderboardId, class TArray<struct FOnlinePlayerScore>& outPlayerScores);
	void ClearFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate);
	void AddFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate);
	void OnFlushOnlineStatsComplete(const class FName& SessionName, bool bWasSuccessful);
	bool FlushOnlineStats(const class FName& SessionName);
	bool WriteOnlineStats(const class FName& SessionName, const struct FUniqueNetId& Player, class UOnlineStatsWrite* StatsWrite);
	void FreeStats(class UOnlineStatsRead* StatsRead);
	void ClearReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate);
	void AddReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate);
	void OnReadOnlineStatsComplete(bool bWasSuccessful);
	bool ReadOnlineStatsByRankAroundPlayer(uint8_t LocalUserNum, class UOnlineStatsRead* StatsRead, int32_t optionalNumRows);
	bool ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead, int32_t optionalStartIndex, int32_t optionalNumToRead);
	bool ReadOnlineStatsForFriends(uint8_t LocalUserNum, class UOnlineStatsRead* StatsRead);
	bool ReadOnlineStats(class UOnlineStatsRead* StatsRead, class TArray<struct FUniqueNetId>& outPlayers);
};

// Class Engine.OnlineVoiceInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineVoiceInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineVoiceInterface");
		}

		return uClassPointer;
	};

	bool UnmuteAll(uint8_t LocalUserNum);
	bool MuteAll(uint8_t LocalUserNum, bool bAllowFriends);
	bool SetSpeechRecognitionObject(uint8_t LocalUserNum, class USpeechRecognition* SpeechRecogObj);
	bool SelectVocabulary(uint8_t LocalUserNum, int32_t VocabularyId);
	void ClearRecognitionCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& RecognitionDelegate);
	void AddRecognitionCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& RecognitionDelegate);
	void OnRecognitionComplete();
	bool GetRecognitionResults(uint8_t LocalUserNum, class TArray<struct FSpeechRecognizedWord>& outWords);
	bool StopSpeechRecognition(uint8_t LocalUserNum);
	bool StartSpeechRecognition(uint8_t LocalUserNum);
	void StopNetworkedVoice(uint8_t LocalUserNum);
	void StartNetworkedVoice(uint8_t LocalUserNum);
	void ClearPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate);
	void AddPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate);
	void OnPlayerTalkingStateChange(const struct FUniqueNetId& Player, bool bIsTalking);
	bool UnmuteRemoteTalker(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID, bool optionalBIsSystemWide);
	bool MuteRemoteTalker(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID, bool optionalBIsSystemWide);
	bool SetRemoteTalkerPriority(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID, int32_t Priority);
	bool IsHeadsetPresent(uint8_t LocalUserNum);
	bool IsRemotePlayerTalking(const struct FUniqueNetId& PlayerID);
	bool IsLocalPlayerTalking(uint8_t LocalUserNum);
	bool UnregisterRemoteTalker(const struct FUniqueNetId& PlayerID);
	bool RegisterRemoteTalker(const struct FUniqueNetId& PlayerID);
	bool UnregisterLocalTalker(uint8_t LocalUserNum);
	bool RegisterLocalTalker(uint8_t LocalUserNum);
};

// Class Engine.OnlineContentInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineContentInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineContentInterface");
		}

		return uClassPointer;
	};

	bool ClearSaveGames(uint8_t LocalUserNum);
	bool DeleteSaveGame(uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename);
	void ClearWriteSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate);
	void AddWriteSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate);
	void OnWriteSaveGameDataComplete(bool bWasSuccessful, uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName);
	bool WriteSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName, class TArray<uint8_t>& outSaveGameData);
	void ClearReadSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate);
	void AddReadSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate);
	void OnReadSaveGameDataComplete(bool bWasSuccessful, uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName);
	bool GetSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName, uint8_t& outBIsValid, class TArray<uint8_t>& outSaveGameData);
	bool ReadSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName);
	void GetAvailableDownloadCounts(uint8_t LocalUserNum, int32_t& outNewDownloads, int32_t& outTotalDownloads);
	void ClearQueryAvailableDownloadsComplete(uint8_t LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate);
	void AddQueryAvailableDownloadsComplete(uint8_t LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate);
	void OnQueryAvailableDownloadsComplete(bool bWasSuccessful);
	bool QueryAvailableDownloads(uint8_t LocalUserNum, int32_t optionalCategoryMask);
	bool ClearCrossTitleSaveGames(uint8_t LocalUserNum);
	void ClearReadCrossTitleSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate);
	void AddReadCrossTitleSaveGameDataComplete(uint8_t LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate);
	void OnReadCrossTitleSaveGameDataComplete(bool bWasSuccessful, uint8_t LocalUserNum, int32_t DeviceID, int32_t TitleId, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName);
	bool GetCrossTitleSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, int32_t TitleId, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName, uint8_t& outBIsValid, class TArray<uint8_t>& outSaveGameData);
	bool ReadCrossTitleSaveGameData(uint8_t LocalUserNum, int32_t DeviceID, int32_t TitleId, const class FString& FriendlyName, const class FString& Filename, const class FString& SaveFileName);
	void ClearReadCrossTitleContentCompleteDelegate(uint8_t LocalUserNum, EOnlineContentType ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void AddReadCrossTitleContentCompleteDelegate(uint8_t LocalUserNum, EOnlineContentType ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void OnReadCrossTitleContentComplete(bool bWasSuccessful);
	EOnlineEnumerationReadState GetCrossTitleContentList(uint8_t LocalUserNum, EOnlineContentType ContentType, class TArray<struct FOnlineCrossTitleContent>& outContentList);
	void ClearCrossTitleContentList(uint8_t LocalUserNum, EOnlineContentType ContentType);
	bool ReadCrossTitleContentList(uint8_t LocalUserNum, EOnlineContentType ContentType, int32_t optionalTitleId, int32_t optionalDeviceID);
	EOnlineEnumerationReadState GetContentList(uint8_t LocalUserNum, EOnlineContentType ContentType, class TArray<struct FOnlineContent>& outContentList);
	void ClearContentList(uint8_t LocalUserNum, EOnlineContentType ContentType);
	bool ReadContentList(uint8_t LocalUserNum, EOnlineContentType ContentType, int32_t optionalDeviceID);
	void ClearReadContentComplete(uint8_t LocalUserNum, EOnlineContentType ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void AddReadContentComplete(uint8_t LocalUserNum, EOnlineContentType ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void OnReadContentComplete(bool bWasSuccessful);
	void ClearContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, uint8_t optionalLocalUserNum);
	void AddContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, uint8_t optionalLocalUserNum);
	void OnContentChange();
};

// Class Engine.OnlineGameInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineGameInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineGameInterface");
		}

		return uClassPointer;
	};

	void RunBandwidthTest();
	bool IsAllowedToNetworkHost();
	void ClearGetRoomIdFromTitleServiceDelegate(const struct FScriptDelegate& InDelegate);
	void AddGetRoomIdFromTitleServiceDelegate(const struct FScriptDelegate& InDelegate);
	void GetRoomIdFromSessionId(const class FString& SessionId);
	void GetRoomIdFromTitleService(const struct FQWord& DataId);
	void OnGetRoomIdFromTitleService(const struct FQWord& RoomId);
	class FString GetRoomId();
	void ClearGetNumberOfCurrentPlayersCompleteDelegate(const struct FScriptDelegate& GetNumberOfCurrentPlayersCompleteDelegate);
	void AddGetNumberOfCurrentPlayersCompleteDelegate(const struct FScriptDelegate& GetNumberOfCurrentPlayersCompleteDelegate);
	void OnGetNumberOfCurrentPlayersComplete(int32_t TotalPlayers);
	int32_t GetNumberOfCurrentPlayersCached();
	bool SendPlayerList(const class TArray<class APlayerReplicationInfo*>& Players);
	void RetrieveGameSettingsForIP(const class FString& IPAddress);
	void ClearOnRetrieveGameSettingsForIPDelegate(const struct FScriptDelegate& RetrieveIPDelegate);
	void AddOnRetrieveGameSettingsForIPDelegate(const struct FScriptDelegate& NewRetrieveIPDelegate);
	void OnRetrievedGameSettingsForIP(bool bSuccessful, struct FOnlineGameSearchResult& outConnectResult);
	bool GetNumberOfCurrentPlayers();
	void ClearJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate);
	void AddJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate);
	void OnJoinMigratedOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	bool JoinMigratedOnlineGame(uint8_t PlayerNum, const class FName& SessionName, struct FOnlineGameSearchResult& outDesiredGame);
	void ClearMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate);
	void AddMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate);
	void OnMigrateOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	bool MigrateOnlineGame(uint8_t HostingPlayerNum, const class FName& SessionName);
	void ClearRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingGameCompleteDelegate);
	void AddRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingCompleteDelegate);
	void OnRecalculateSkillRatingComplete(const class FName& SessionName, bool bWasSuccessful);
	bool RecalculateSkillRating(const class FName& SessionName, class TArray<struct FUniqueNetId>& outPlayers);
	bool AcceptGameInvite(uint8_t LocalUserNum, const class FName& SessionName);
	void ClearGameInviteAcceptedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate);
	void AddGameInviteAcceptedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate);
	void OnGameInviteAccepted(struct FOnlineGameSearchResult& outInviteResult);
	class TArray<struct FOnlineArbitrationRegistrant> GetArbitratedPlayers(const class FName& SessionName);
	void ClearArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate);
	void AddArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate);
	void OnArbitrationRegistrationComplete(const class FName& SessionName, bool bWasSuccessful);
	bool RegisterForArbitration(const class FName& SessionName);
	void ClearEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate);
	void AddEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate);
	void OnEndOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	bool EndOnlineGame(const class FName& SessionName);
	void ClearStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate);
	void AddStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate);
	void OnStartOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	bool StartOnlineGame(const class FName& SessionName);
	void ClearUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate);
	void AddUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate);
	void OnUnregisterPlayerComplete(const class FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	bool UnregisterPlayers(const class FName& SessionName, class TArray<struct FUniqueNetId>& outPlayers);
	bool UnregisterPlayer(const class FName& SessionName, const struct FUniqueNetId& PlayerID);
	void ClearRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate);
	void AddRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate);
	void OnRegisterPlayerComplete(const class FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	bool RegisterPlayers(const class FName& SessionName, class TArray<struct FUniqueNetId>& outPlayers);
	bool RegisterPlayer(const class FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasInvited);
	bool GetResolvedConnectString(const class FName& SessionName, class FString& outConnectInfo);
	void ClearJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate);
	void AddJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate);
	void OnJoinOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	bool IsCurrentRoomOwner();
	bool SetRankedReadyStatus(bool bReady);
	bool IsJoinOperationInProgress();
	bool JoinOnlineGameByMatchingParams(const struct FQWord& RoomId, class UOnlineGameSettings*& outJoinedGameSettings);
	bool JoinOnlineGame(uint8_t PlayerNum, const class FName& SessionName, struct FOnlineGameSearchResult& outDesiredGame);
	bool QueryNonAdvertisedData(int32_t StartAt, int32_t NumberToQuery);
	bool FreeSearchResults(class UOnlineGameSearch* optionalSearch);
	class UOnlineGameSearch* GetGameSearch();
	bool BindPlatformSpecificSessionToSearch(uint8_t SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, uint8_t PlatformSpecificInfo[80]);
	bool ReadPlatformSpecificSessionInfoBySessionName(const class FName& SessionName, uint8_t& outPlatformSpecificInfo);
	bool ReadPlatformSpecificSessionInfo(struct FOnlineGameSearchResult& outDesiredGame, uint8_t& outPlatformSpecificInfo);
	void ClearQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate);
	void AddQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate);
	void OnQosStatusChanged(int32_t NumComplete, int32_t NumTotal);
	void ClearCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate);
	void AddCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate);
	void OnCancelFindOnlineGamesComplete(bool bWasSuccessful);
	bool CancelFindOnlineGames();
	void ClearFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate);
	void AddFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate);
	void OnFindOnlineGamesComplete(bool bWasSuccessful);
	bool FindOnlineGames(uint8_t SearchingPlayerNum, class UOnlineGameSearch* SearchSettings);
	void ClearDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate);
	void AddDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate);
	void OnDestroyOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	bool DestroyOnlineGame(const class FName& SessionName);
	class UOnlineGameSettings* GetGameSettings(const class FName& SessionName);
	void ClearUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate);
	void AddUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate);
	void OnUpdateOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	bool UpdateOnlineGame(const class FName& SessionName, class UOnlineGameSettings* UpdatedGameSettings, bool optionalBShouldRefreshOnlineData);
	void ClearCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate);
	void AddCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate);
	void OnCreateOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	bool CreateOnlineGame(uint8_t HostingPlayerNum, const class FName& SessionName, class UOnlineGameSettings* NewGameSettings);
};

// Class Engine.OnlineSystemInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineSystemInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineSystemInterface");
		}

		return uClassPointer;
	};

	int32_t GetLocale();
	void ClearStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate);
	void AddStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate);
	void OnStorageDeviceChange();
	ENATType GetNATType();
	void ClearConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate);
	void AddConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate);
	void OnConnectionStatusChange(EOnlineServerConnectionStatus ConnectionStatus);
	bool IsControllerConnected(int32_t ControllerId);
	void ClearControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate);
	void AddControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate);
	void OnControllerChange(int32_t ControllerId, bool bIsConnected);
	void SetNetworkNotificationPosition(ENetworkNotificationPosition NewPos);
	ENetworkNotificationPosition GetNetworkNotificationPosition();
	void ClearExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate);
	void AddExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate);
	void OnExternalUIChange(bool bIsOpening);
	void ClearLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate);
	void AddLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate);
	void OnLinkStatusChange(bool bIsConnected);
	bool HasLinkConnection();
};

// Class Engine.OnlinePlayerInterfaceEx
// 0x0000 (0x003C - 0x003C)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlinePlayerInterfaceEx");
		}

		return uClassPointer;
	};

	bool ShowCustomMessageUI(uint8_t LocalUserNum, const class FString& MessageTitle, const class FString& NonEditableMessage, const class FString& optionalEditableMessage, class TArray<struct FUniqueNetId>& outRecipients);
	void ClearCrossTitleProfileSettings(uint8_t LocalUserNum, int32_t TitleId);
	class UOnlineProfileSettings* GetCrossTitleProfileSettings(uint8_t LocalUserNum, int32_t TitleId);
	void ClearReadCrossTitleProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void AddReadCrossTitleProfileSettingsCompleteDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void OnReadCrossTitleProfileSettingsComplete(uint8_t LocalUserNum, int32_t TitleId, bool bWasSuccessful);
	bool ReadCrossTitleProfileSettings(uint8_t LocalUserNum, int32_t TitleId, class UOnlineProfileSettings* ProfileSettings);
	bool UnlockAvatarAward(uint8_t LocalUserNum, int32_t AvatarItemId);
	bool AddInGamePost(int32_t InPostID, const class FString& optionalInPostParam);
	bool RecordPlayersRecentlyMet(uint8_t LocalUserNum, const class FString& GameDescription, class TArray<struct FUniqueNetId>& outPlayers);
	bool ShowCustomPlayersUI(uint8_t LocalUserNum, const class FString& Title, const class FString& Description, class TArray<struct FUniqueNetId>& outPlayers);
	bool ShowPlayersUI(uint8_t LocalUserNum);
	bool ShowFriendsInviteUI(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID);
	void ClearProfileDataChangedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate);
	void AddProfileDataChangedDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate);
	void OnProfileDataChanged();
	bool UnlockGamerPicture(uint8_t LocalUserNum, int32_t PictureId);
	bool IsDeviceValid(int32_t DeviceID, int32_t optionalSizeNeeded);
	int32_t GetDeviceSelectionResults(uint8_t LocalUserNum, class FString& outDeviceName);
	void ClearDeviceSelectionDoneDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& DeviceDelegate);
	void AddDeviceSelectionDoneDelegate(uint8_t LocalUserNum, const struct FScriptDelegate& DeviceDelegate);
	void OnDeviceSelectionComplete(bool bWasSuccessful);
	bool ShowDeviceSelectionUI(uint8_t LocalUserNum, int32_t SizeNeeded, bool optionalBManageStorage);
	bool ShowMembershipMarketplaceUI(uint8_t LocalUserNum);
	bool ShowContentMarketplaceUI(uint8_t LocalUserNum, int32_t optionalCategoryMask, int32_t optionalOfferId);
	bool ShowInviteUI(uint8_t LocalUserNum, const class FString& optionalInviteText);
	bool ShowAchievementsUI(uint8_t LocalUserNum);
	bool ShowMessagesUI(uint8_t LocalUserNum);
	bool ShowGamerCardUIByUsername(uint8_t LocalUserNum, const class FString& UserName);
	bool ShowGamerCardUI(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID);
	bool ShowFeedbackUI(uint8_t LocalUserNum, const struct FUniqueNetId& PlayerID);
};

// Class Engine.OnlineAccountInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineAccountInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineAccountInterface");
		}

		return uClassPointer;
	};

	bool GetLocalAccountNames(class TArray<class FString>& outAccounts);
	bool DeleteLocalAccount(const class FString& UserName, const class FString& optionalPassword);
	bool RenameLocalAccount(const class FString& NewUserName, const class FString& OldUserName, const class FString& optionalPassword);
	bool CreateLocalAccount(const class FString& UserName, const class FString& optionalPassword);
	void ClearCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate);
	void AddCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate);
	void OnCreateOnlineAccountCompleted(EOnlineAccountCreateStatus ErrorStatus);
	bool CreateOnlineAccount(const class FString& UserName, const class FString& Password, const class FString& EmailAddress, const class FString& optionalProductKey);
};

// Class Engine.AccessControl
// 0x0108 (0x01C8 - 0x02D0)
class AAccessControl : public AInfo
{
public:
	class TArray<class FString>                        IPPolicies;                                    // 0x01C8 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class TArray<struct FUniqueNetId>                  BannedIDs;                                     // 0x01D4 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class FString                                      IPBanned;                                      // 0x01E0 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      WrongPassword;                                 // 0x01EC (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NeedPassword;                                  // 0x01F8 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SessionBanned;                                 // 0x0204 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      KickedMsg;                                     // 0x0210 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      DefaultKickReason;                             // 0x021C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      IdleKickReason;                                // 0x0228 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class UClass*                                      AdminClass;                                    // 0x0234 (0x0004) [0x0000000000000000]               
	class FString                                      AdminPassword;                                 // 0x0238 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class FString                                      GamePassword;                                  // 0x0244 (0x000C) [0x0000000000444000] (CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink)
	class FString                                      ACDisplayText[3];                              // 0x0250 (0x0024) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ACDescText[3];                                 // 0x0274 (0x0024) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bDontAddDefaultAdmin : 1;                      // 0x0298 (0x0004) [0x0000000000000000] [0x00000001] 
	uint32_t                                           bAuthenticateClients : 1;                      // 0x0298 (0x0004) [0x0000000000044000] [0x00000002] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bAuthenticateServer : 1;                       // 0x0298 (0x0004) [0x0000000000044000] [0x00000004] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bAuthenticateListenHost : 1;                   // 0x0298 (0x0004) [0x0000000000044000] [0x00000008] (CPF_Config | CPF_GlobalConfig)
	uint32_t                                           bAuthDelegatesRegistered : 1;                  // 0x0298 (0x0004) [0x0000000000000000] [0x00000010] 
	uint32_t                                           bPendingListenAuth : 1;                        // 0x0298 (0x0004) [0x0000000000000000] [0x00000020] 
	int32_t                                            MaxAuthRetryCount;                             // 0x029C (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	int32_t                                            AuthRetryDelay;                                // 0x02A0 (0x0004) [0x0000000000044000] (CPF_Config | CPF_GlobalConfig)
	class UOnlineSubsystem*                            OnlineSub;                                     // 0x02A4 (0x0004) [0x0000000000000000]               
	class UOnlineAuthInterface*                        CachedAuthInt_Object;                          // 0x02A8 (0x0004) [0x0000000000000000] 
	class UOnlineAuthInterface*                        CachedAuthInt_Interface;                       // 0x02AC (0x0004) [0x0000000000000000]               
	class TArray<struct FPendingClientAuth>            ClientsPendingAuth;                            // 0x02B0 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FServerAuthRetry>              ServerAuthRetries;                             // 0x02BC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            ListenAuthTicketUID;                           // 0x02C8 (0x0004) [0x0000000000000000]               
	int32_t                                            ListenAuthRetryCount;                          // 0x02CC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AccessControl");
		}

		return uClassPointer;
	};

	bool IsPendingAuth(const struct FUniqueNetId& PlayerUID);
	void Cleanup(bool optionalBExit);
	void NotifyExit();
	void NotifyGameEnding();
	void NotifyServerTravel(bool bSeamless);
	void OnDestroyOnlineGameComplete(const class FName& SessionName, bool bWasSuccessful);
	static void StaticOnClientConnectionClose(class UPlayer* ClientConnection);
	void OnClientConnectionClose(class UPlayer* ClientConnection);
	void ListenHostAuthTimeout();
	void EndListenHostAuth();
	void ContinueListenHostAuth();
	void BeginListenHostAuth(bool optionalBRetry);
	void NotifyStartOnlineGame();
	void ProcessServerAuthRetryRequest(class UPlayer* ClientConnection);
	void ProcessServerAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID, int32_t ClientIP, int32_t ClientPort);
	void OnClientAuthComplete(bool bSuccess, const struct FUniqueNetId& ClientUID, class UPlayer* ClientConnection, const class FString& ExtraInfo);
	void ProcessClientAuthResponse(const struct FUniqueNetId& ClientUID, int32_t ClientIP, int32_t AuthTicketUID);
	void OnAuthReady();
	void PendingAuthTimer();
	void eventPreLogin(const class FString& Options, const class FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, bool bSpectator, class FString& outOutError);
	void ClearAuthDelegates(bool bExiting);
	void RegisterAuthDelegates();
	void InitAuthHooks();
	bool IsIDBanned(struct FUniqueNetId& outNetId);
	bool CheckIPPolicy(const class FString& Address);
	bool ValidLogin(const class FString& UserName, const class FString& Password);
	bool ParseAdminOptions(const class FString& Options);
	void AdminExited(class APlayerController* P);
	void AdminEntered(class APlayerController* P);
	bool AdminLogout(class APlayerController* P);
	bool AdminLogin(class APlayerController* P, const class FString& Password);
	bool KickPlayer(class APlayerController* C, const class FString& KickReason);
	bool ForceKickPlayer(class APlayerController* C, const class FString& KickReason);
	void KickBan(const class FString& Target);
	void Kick(const class FString& Target);
	class AController* GetControllerFromString(const class FString& Target);
	bool RequiresPassword();
	void SetGamePassword(const class FString& P);
	bool SetAdminPassword(const class FString& P);
	bool IsAdmin(class APlayerController* P);
	void Destroyed();
	void PostBeginPlay();
};

// Class Engine.Admin
// 0x0000 (0x0584 - 0x0584)
class AAdmin : public APlayerController
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Admin");
		}

		return uClassPointer;
	};

	void ServerSwitch(const class FString& URL);
	void Switch(const class FString& URL);
	void ServerRestartMap();
	void RestartMap();
	void PlayerList();
	void ServerKick(const class FString& S);
	void Kick(const class FString& S);
	void ServerKickBan(const class FString& S);
	void KickBan(const class FString& S);
	void ServerAdmin(const class FString& CommandLine);
	void Admin(const class FString& CommandLine);
	void eventPostBeginPlay();
};

// Class Engine.ApexDestructibleActorSpawnable
// 0x0000 (0x0208 - 0x0208)
class AApexDestructibleActorSpawnable : public AApexDestructibleActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ApexDestructibleActorSpawnable");
		}

		return uClassPointer;
	};

};

// Class Engine.EmitterSpawnable
// 0x0004 (0x01D4 - 0x01D8)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                              // 0x01D4 (0x0004) [0x0000000000000020] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.EmitterSpawnable");
		}

		return uClassPointer;
	};

	void eventReplicatedEvent(const class FName& VarName);
	void eventSetTemplate(class UParticleSystem* NewTemplate, bool optionalBDestroyOnFinish);
};

// Class Engine.KAssetSpawnable
// 0x0000 (0x01D8 - 0x01D8)
class AKAssetSpawnable : public AKAsset
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.KAssetSpawnable");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactorySkeletalMeshCinematic
// 0x0000 (0x0078 - 0x0078)
class UActorFactorySkeletalMeshCinematic : public UActorFactorySkeletalMesh
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactorySkeletalMeshCinematic");
		}

		return uClassPointer;
	};

};

// Class Engine.ActorFactorySkeletalMeshMAT
// 0x0000 (0x0078 - 0x0078)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ActorFactorySkeletalMeshMAT");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_Death
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_Death : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_Death");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ToggleGodMode
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleGodMode");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ControlMovieTexture
// 0x0004 (0x00FC - 0x0100)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                  // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ControlMovieTexture");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class Engine.CoverReplicator
// 0x000C (0x01C8 - 0x01D4)
class ACoverReplicator : public AReplicationInfo
{
public:
	class TArray<struct FCoverReplicationInfo>         CoverReplicationData;                          // 0x01C8 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.CoverReplicator");
		}

		return uClassPointer;
	};

	void ClientReceiveLinkDisabledState(int32_t Index, class ACoverLink* Link, bool bLinkDisabled);
	void ServerSendLinkDisabledState(int32_t Index);
	void NotifyLinkDisabledStateChange(class ACoverLink* Link);
	void ClientReceiveManualCoverTypeSlots(int32_t Index, class ACoverLink* Link, uint8_t NumCoverTypesChanged, struct FManualCoverTypeInfo SlotsCoverTypeChanged[8], bool bDone);
	void ServerSendManualCoverTypeSlots(int32_t Index);
	void NotifySetManualCoverTypeForSlots(class ACoverLink* Link, ECoverType NewCoverType, class TArray<int32_t>& outSlotIndices);
	void ClientReceiveAdjustedSlots(int32_t Index, class ACoverLink* Link, uint8_t NumSlotsAdjusted, uint8_t SlotsAdjusted[8], bool bDone);
	void ServerSendAdjustedSlots(int32_t Index);
	void NotifyAutoAdjustSlots(class ACoverLink* Link, class TArray<int32_t>& outSlotIndices);
	void ClientReceiveDisabledSlots(int32_t Index, class ACoverLink* Link, uint8_t NumSlotsDisabled, uint8_t SlotsDisabled[8], bool bDone);
	void ServerSendDisabledSlots(int32_t Index);
	void NotifyDisabledSlots(class ACoverLink* Link, class TArray<int32_t>& outSlotIndices);
	void ClientReceiveEnabledSlots(int32_t Index, class ACoverLink* Link, uint8_t NumSlotsEnabled, uint8_t SlotsEnabled[8], bool bDone);
	void ServerSendEnabledSlots(int32_t Index);
	void NotifyEnabledSlots(class ACoverLink* Link, class TArray<int32_t>& outSlotIndices);
	void ClientReceiveInitialCoverReplicationInfo(int32_t Index, class ACoverLink* Link, bool bLinkDisabled, uint8_t NumSlotsEnabled, uint8_t SlotsEnabled[8], uint8_t NumSlotsDisabled, uint8_t SlotsDisabled[8], uint8_t NumSlotsAdjusted, uint8_t SlotsAdjusted[8], uint8_t NumCoverTypesChanged, struct FManualCoverTypeInfo SlotsCoverTypeChanged[8], bool bDone);
	void ServerSendInitialCoverReplicationInfo(int32_t Index);
	void ClientSetOwner(class APlayerController* PC);
	void ReplicateInitialCoverInfo();
	void PurgeOldEntries();
};

// Class Engine.GameMessage
// 0x0114 (0x0050 - 0x0164)
class UGameMessage : public ULocalMessage
{
public:
	class FString                                      SwitchLevelMessage;                            // 0x0050 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      LeftMessage;                                   // 0x005C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      FailedTeamMessage;                             // 0x0068 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      FailedPlaceMessage;                            // 0x0074 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      FailedSpawnMessage;                            // 0x0080 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      EnteredMessage;                                // 0x008C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MaxedOutMessage;                               // 0x0098 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      ArbitrationMessage;                            // 0x00A4 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      OvertimeMessage;                               // 0x00B0 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      GlobalNameChange;                              // 0x00BC (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NewTeamMessage;                                // 0x00C8 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NewTeamMessageTrailer;                         // 0x00D4 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NoNameChange;                                  // 0x00E0 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      VoteStarted;                                   // 0x00EC (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      VotePassed;                                    // 0x00F8 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      MustHaveStats;                                 // 0x0104 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      CantBeSpectator;                               // 0x0110 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      CantBePlayer;                                  // 0x011C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      BecameSpectator;                               // 0x0128 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NewPlayerMessage;                              // 0x0134 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      KickWarning;                                   // 0x0140 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      NewSpecMessage;                                // 0x014C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      SpecEnteredMessage;                            // 0x0158 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.GameMessage");
		}

		return uClassPointer;
	};

	static class FString GetString(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
};

// Class Engine.DmgType_Suicided
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Suicided : public UKillZDamageType
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DmgType_Suicided");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ToggleInput
// 0x0004 (0x00FC - 0x0100)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	uint32_t                                           bToggleMovement : 1;                           // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bToggleTurning : 1;                            // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleInput");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ToggleHUD
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ToggleHUD : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleHUD");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_ForceFeedback
// 0x0008 (0x00FC - 0x0104)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                    // 0x00FC (0x0004) [0x0000000004000001] (CPF_Edit | CPF_EditInline)
	class UClass*                                      PredefinedWaveForm;                            // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ForceFeedback");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ToggleCinematicMode
// 0x0004 (0x00FC - 0x0100)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	uint32_t                                           bDisableMovement : 1;                          // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bDisableTurning : 1;                           // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bHidePlayer : 1;                               // 0x00FC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bDisableInput : 1;                             // 0x00FC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)
	uint32_t                                           bHideHUD : 1;                                  // 0x00FC (0x0004) [0x0000000000000001] [0x00000010] (CPF_Edit)
	uint32_t                                           bDeadBodies : 1;                               // 0x00FC (0x0004) [0x0000000000000001] [0x00000020] (CPF_Edit)
	uint32_t                                           bDroppedPickups : 1;                           // 0x00FC (0x0004) [0x0000000000000001] [0x00000040] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleCinematicMode");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class Engine.SeqAct_ConsoleCommand
// 0x0018 (0x00FC - 0x0114)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	class FString                                      Command;                                       // 0x00FC (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<class FString>                        Commands;                                      // 0x0108 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ConsoleCommand");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
	void VersionUpdated(int32_t OldVersion, int32_t NewVersion);
};

// Class Engine.SeqAct_FlyThroughHasEnded
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_FlyThroughHasEnded : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_FlyThroughHasEnded");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetSoundMode
// 0x0008 (0x00FC - 0x0104)
class USeqAct_SetSoundMode : public USequenceAction
{
public:
	class USoundMode*                                  SoundMode;                                     // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bTopPriority : 1;                              // 0x0100 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetSoundMode");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
	void eventActivated();
};

// Class Engine.SplineComponentSimplified
// 0x0000 (0x020C - 0x020C)
class USplineComponentSimplified : public USplineComponent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SplineComponentSimplified");
		}

		return uClassPointer;
	};

};

// Class Engine.AmbientSoundSimpleSplineNonLoop
// 0x0000 (0x01EC - 0x01EC)
class AAmbientSoundSimpleSplineNonLoop : public AAmbientSoundSimpleSpline
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AmbientSoundSimpleSplineNonLoop");
		}

		return uClassPointer;
	};

};

// Class Engine.AnimNotify_PlayFaceFXAnim
// 0x0028 (0x0040 - 0x0068)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                              // 0x0040 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FString                                      GroupName;                                     // 0x0044 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class FString                                      AnimName;                                      // 0x0050 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	class USoundCue*                                   SoundCueToPlay;                                // 0x005C (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bOverridePlayingAnim : 1;                      // 0x0060 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              PlayFrequency;                                 // 0x0064 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.AnimNotify_PlayFaceFXAnim");
		}

		return uClassPointer;
	};

	void eventNotify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};

// Class Engine.BroadcastHandler
// 0x0008 (0x01C8 - 0x01D0)
class ABroadcastHandler : public AInfo
{
public:
	int32_t                                            SentText;                                      // 0x01C8 (0x0004) [0x0000000000000000]               
	uint32_t                                           bMuteSpectators : 1;                           // 0x01CC (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.BroadcastHandler");
		}

		return uClassPointer;
	};

	void eventAllowBroadcastLocalizedTeam(int32_t TeamIndex, class AActor* Sender, class UClass* Message, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	void eventAllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	void BroadcastTeam(class AController* Sender, const class FString& msg, const class FName& optionalType);
	void Broadcast(class AActor* Sender, const class FString& msg, const class FName& optionalType);
	void BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int32_t optionalSwitch, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	void BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const class FString& msg, const class FName& optionalType);
	bool AllowsBroadcast(class AActor* broadcaster, int32_t InLen);
	void UpdateSentText();
};

// Class Engine.HttpFactory
// 0x000C (0x003C - 0x0048)
class UHttpFactory : public UObject
{
public:
	class FString                                      HttpRequestClassName;                          // 0x003C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.HttpFactory");
		}

		return uClassPointer;
	};

	static class UHttpRequestInterface* CreateRequest();
};

// Class Engine.ColorScaleVolume
// 0x0010 (0x01F4 - 0x0204)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                    // 0x01F4 (0x000C) [0x0000000000000001] (CPF_Edit)    
	float                                              InterpTime;                                    // 0x0200 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ColorScaleVolume");
		}

		return uClassPointer;
	};

	void eventUnTouch(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};

// Class Engine.VolumeTimer
// 0x0004 (0x01C8 - 0x01CC)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                             // 0x01C8 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.VolumeTimer");
		}

		return uClassPointer;
	};

	void eventTimer();
	void eventPostBeginPlay();
};

// Class Engine.SeqAct_SetDamageInstigator
// 0x0004 (0x00FC - 0x0100)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                              // 0x00FC (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetDamageInstigator");
		}

		return uClassPointer;
	};

};

// Class Engine.DmgType_Crushed
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Crushed : public UDamageType
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DmgType_Crushed");
		}

		return uClassPointer;
	};

};

// Class Engine.DmgType_Fell
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Fell : public UDamageType
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DmgType_Fell");
		}

		return uClassPointer;
	};

};

// Class Engine.DmgType_Telefragged
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Telefragged : public UDamageType
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DmgType_Telefragged");
		}

		return uClassPointer;
	};

};

// Class Engine.DynamicPhysicsVolume
// 0x0004 (0x0234 - 0x0238)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x0234 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicPhysicsVolume");
		}

		return uClassPointer;
	};

	void eventPostBeginPlay();
};

// Class Engine.DynamicSMActor_Spawnable
// 0x0000 (0x0204 - 0x0204)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicSMActor_Spawnable");
		}

		return uClassPointer;
	};

};

// Class Engine.DynamicTriggerVolume
// 0x0004 (0x01F4 - 0x01F8)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:
	uint32_t                                           bEnabled : 1;                                  // 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.DynamicTriggerVolume");
		}

		return uClassPointer;
	};

	void eventPostBeginPlay();
};

// Class Engine.SeqAct_SetParticleSysParam
// 0x0014 (0x00FC - 0x0110)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	class TArray<struct FParticleSysParam>             InstanceParameters;                            // 0x00FC (0x000C) [0x0000000004480009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline)
	uint32_t                                           bOverrideScalar : 1;                           // 0x0108 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	float                                              ScalarValue;                                   // 0x010C (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetParticleSysParam");
		}

		return uClassPointer;
	};

};

// Class Engine.ExponentialHeightFog
// 0x0008 (0x01C8 - 0x01D0)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                     // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bEnabled : 1;                                  // 0x01CC (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ExponentialHeightFog");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
};

// Class Engine.FailedConnect
// 0x0030 (0x0050 - 0x0080)
class UFailedConnect : public ULocalMessage
{
public:
	class FString                                      FailMessage[4];                                // 0x0050 (0x0030) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FailedConnect");
		}

		return uClassPointer;
	};

	static class FString GetString(int32_t optionalSwitch, bool optionalBPRI1HUD, class APlayerReplicationInfo* optionalRelatedPRI, class APlayerReplicationInfo* optionalRelatedPRI01, class UObject* optionalOptionalObject);
	static int32_t GetFailSwitch(const class FString& FailString);
};

// Class Engine.FracturedSMActorSpawnable
// 0x0000 (0x0230 - 0x0230)
class AFracturedSMActorSpawnable : public AFracturedStaticMeshActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FracturedSMActorSpawnable");
		}

		return uClassPointer;
	};

};

// Class Engine.FracturedStaticMeshActor_Spawnable
// 0x0000 (0x0230 - 0x0230)
class AFracturedStaticMeshActor_Spawnable : public AFracturedStaticMeshActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.FracturedStaticMeshActor_Spawnable");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_PlayerSpawned
// 0x0004 (0x0114 - 0x0118)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                    // 0x0114 (0x0004) [0x0000000000000000]               

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_PlayerSpawned");
		}

		return uClassPointer;
	};

};

// Class Engine.HeightFog
// 0x0008 (0x01C8 - 0x01D0)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                     // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)
	uint32_t                                           bEnabled : 1;                                  // 0x01CC (0x0004) [0x0000000000000020] [0x00000001] (CPF_Net | CPF_RepNotify)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.HeightFog");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
	void eventReplicatedEvent(const class FName& VarName);
	void eventPostBeginPlay();
};

// Class Engine.InterpActor_ForCinematic
// 0x0000 (0x0230 - 0x0230)
class AInterpActor_ForCinematic : public AInterpActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.InterpActor_ForCinematic");
		}

		return uClassPointer;
	};

};

// Class Engine.MaterialInstanceTimeVaryingActor
// 0x0004 (0x01C8 - 0x01CC)
class AMaterialInstanceTimeVaryingActor : public AActor
{
public:
	class UMaterialInstanceTimeVarying*                MatInst;                                       // 0x01C8 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.MaterialInstanceTimeVaryingActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_AssignController
// 0x0004 (0x00FC - 0x0100)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                               // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AssignController");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_GiveInventory
// 0x0010 (0x00FC - 0x010C)
class USeqAct_GiveInventory : public USequenceAction
{
public:
	class TArray<class UClass*>                        InventoryList;                                 // 0x00FC (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)
	uint32_t                                           bClearExisting : 1;                            // 0x0108 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bForceReplace : 1;                             // 0x0108 (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_GiveInventory");
		}

		return uClassPointer;
	};

};

// Class Engine.NavMeshBoundsVolume
// 0x0000 (0x01F4 - 0x01F4)
class ANavMeshBoundsVolume : public AVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.NavMeshBoundsVolume");
		}

		return uClassPointer;
	};

};

// Class Engine.OnlineCommunityContentInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineCommunityContentInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineCommunityContentInterface");
		}

		return uClassPointer;
	};

	void RateContent(uint8_t PlayerNum, int32_t NewRating, struct FCommunityContentFile& outFileToRate);
	void ClearGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate);
	void AddGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate);
	void OnGetContentPayloadComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded, class TArray<uint8_t>& outPayload);
	bool GetContentPayload(uint8_t PlayerNum, struct FCommunityContentFile& outFileDownloaded);
	void ClearDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate);
	void AddDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate);
	void OnDownloadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded);
	bool DownloadContent(uint8_t PlayerNum, struct FCommunityContentFile& outFileToDownload);
	void ClearUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate);
	void AddUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate);
	void OnUploadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& UploadedFile);
	bool UploadContent(uint8_t PlayerNum, class TArray<uint8_t>& outPayload, struct FCommunityContentMetadata& outMetaData);
	bool GetFriendsContentList(uint8_t PlayerNum, struct FOnlineFriend& outFriend, class TArray<struct FCommunityContentFile>& outContentFiles);
	void ClearReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate);
	void AddReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate);
	void OnReadFriendsContentListComplete(bool bWasSuccessful);
	bool ReadFriendsContentList(uint8_t PlayerNum, int32_t optionalStartAt, int32_t optionalNumToRead, class TArray<struct FOnlineFriend>& outFriends);
	bool GetContentList(uint8_t PlayerNum, class TArray<struct FCommunityContentFile>& outContentFiles);
	void ClearReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate);
	void AddReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate);
	void OnReadContentListComplete(bool bWasSuccessful);
	bool ReadContentList(uint8_t PlayerNum, int32_t optionalStartAt, int32_t optionalNumToRead);
	void Exit();
	bool Init();
};

// Class Engine.OnlineEventsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineEventsInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineEventsInterface");
		}

		return uClassPointer;
	};

	bool UpdatePlaylistPopulation(int32_t PlaylistId, int32_t NumPlayers);
	bool UploadGameplayEventsData(const struct FUniqueNetId& UniqueId, class TArray<uint8_t>& outPayload);
	bool UploadPlayerData(const struct FUniqueNetId& UniqueId, const class FString& PlayerNick, class UOnlineProfileSettings* ProfileSettings, class UOnlinePlayerStorage* PlayerStorage);
};

// Class Engine.OnlineGameDownloadInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineGameDownloadInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineGameDownloadInterface");
		}

		return uClassPointer;
	};

	void ClearOnChunkCompleteDelegate(const struct FScriptDelegate& InDelegate);
	void AddOnChunkCompleteDelegate(const struct FScriptDelegate& InDelegate);
	void OnChunkComplete(int32_t ChunkIndex);
	void SetDownloadSpeed(EDownloadSpeed InSpeed);
	void SetChunksHighPriority(const class TArray<int32_t>& ChunkIndices);
	class TArray<int32_t> GetTodoList();
	float GetOverallProgress();
	float GetChunksProgress(const class TArray<int32_t>& ChunkIndices);
	float GetChunkProgress(int32_t InChunkIndex);
	float GetChunksETA(const class TArray<int32_t>& ChunkIndices);
	float GetChunkETA(int32_t InChunkIndex);
	void RefreshGame();
	bool DoesGameNeedRefresh();
	bool AreChunksComplete(const class TArray<int32_t>& ChunkIndices, bool bRequireFastAccess);
	bool IsChunkComplete(int32_t InChunkIndex, bool bRequireFastAccess);
	bool IsGameComplete();
};

// Class Engine.OnlinePlaylistGameTypeProvider
// 0x0024 (0x0064 - 0x0088)
class UOnlinePlaylistGameTypeProvider : public UUIResourceDataProvider
{
public:
	class FName                                        PlaylistGameTypeName;                          // 0x0064 (0x0008) [0x0000000000004000] (CPF_Config)  
	class FString                                      DisplayName;                                   // 0x006C (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Description;                                   // 0x0078 (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	int32_t                                            GameTypeId;                                    // 0x0084 (0x0004) [0x0000000000004000] (CPF_Config)  

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlinePlaylistGameTypeProvider");
		}

		return uClassPointer;
	};

};

// Class Engine.OnlineRecentPlayersList
// 0x0048 (0x003C - 0x0084)
class UOnlineRecentPlayersList : public UObject
{
public:
	class TArray<struct FUniqueNetId>                  RecentPlayers;                                 // 0x003C (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	class TArray<struct FRecentParty>                  RecentParties;                                 // 0x0048 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)
	struct FRecentParty                                LastParty;                                     // 0x0054 (0x0014) [0x0000000000400000] (CPF_NeedCtorLink)
	int32_t                                            MaxRecentPlayers;                              // 0x0068 (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            MaxRecentParties;                              // 0x006C (0x0004) [0x0000000000004000] (CPF_Config)  
	int32_t                                            RecentPlayersAddIndex;                         // 0x0070 (0x0004) [0x0000000000000000]               
	int32_t                                            RecentPartiesAddIndex;                         // 0x0074 (0x0004) [0x0000000000000000]               
	class TArray<struct FCurrentPlayerMet>             CurrentPlayers;                                // 0x0078 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineRecentPlayersList");
		}

		return uClassPointer;
	};

	int32_t GetCurrentPlayersListCount();
	void SetCurrentPlayersList(const class TArray<struct FCurrentPlayerMet>& Players);
	bool ShowCurrentPlayersList(uint8_t LocalUserNum, const class FString& Title, const class FString& Description);
	bool ShowLastPartyPlayerList(uint8_t LocalUserNum, const class FString& Title, const class FString& Description);
	bool ShowRecentPartiesPlayerList(uint8_t LocalUserNum, const class FString& Title, const class FString& Description);
	bool ShowRecentPlayerList(uint8_t LocalUserNum, const class FString& Title, const class FString& Description);
	void SetLastParty(const struct FUniqueNetId& PartyLeader, class TArray<struct FUniqueNetId>& outPartyMembers);
	int32_t GetTeamForCurrentPlayer(const struct FUniqueNetId& Player);
	int32_t GetSkillForCurrentPlayer(const struct FUniqueNetId& Player);
	void GetPlayersFromCurrentPlayers(class TArray<struct FUniqueNetId>& outPlayers);
	void GetPlayersFromRecentParties(class TArray<struct FUniqueNetId>& outPlayers);
	void ClearRecentParties();
	void AddPartyToRecentParties(const struct FUniqueNetId& PartyLeader, class TArray<struct FUniqueNetId>& outPartyMembers);
	void ClearRecentPlayers();
	void AddPlayerToRecentPlayers(const struct FUniqueNetId& NewPlayer);
};

// Class Engine.OnlineSuppliedUIInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineSuppliedUIInterface : public UInterface
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.OnlineSuppliedUIInterface");
		}

		return uClassPointer;
	};

	bool ShowMatchmakingUI(uint8_t SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, class UOnlineGameSettings* GameSettings);
	void ClearShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate);
	void AddShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate);
	bool ShowOnlineStatsUI(class UOnlineStatsRead* StatsRead, class TArray<struct FUniqueNetId>& outPlayers);
	void OnShowOnlineStatsUIComplete();
};

// Class Engine.PathNode_Dynamic
// 0x0000 (0x02A0 - 0x02A0)
class APathNode_Dynamic : public APathNode
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.PathNode_Dynamic");
		}

		return uClassPointer;
	};

	class FString eventGetDebugAbbrev();
};

// Class Engine.SeqEvent_AIReachedRouteActor
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_AIReachedRouteActor : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_AIReachedRouteActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqEvent_PickupStatusChange
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_PickupStatusChange");
		}

		return uClassPointer;
	};

};

// Class Engine.RadialBlurActor
// 0x0004 (0x01C8 - 0x01CC)
class ARadialBlurActor : public AActor
{
public:
	class URadialBlurComponent*                        RadialBlur;                                    // 0x01C8 (0x0004) [0x0000000004080009] (CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RadialBlurActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_ToggleConstraintDrive
// 0x0004 (0x00FC - 0x0100)
class USeqAct_ToggleConstraintDrive : public USequenceAction
{
public:
	uint32_t                                           bEnableAngularPositionDrive : 1;               // 0x00FC (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	uint32_t                                           bEnableAngularVelocityDrive : 1;               // 0x00FC (0x0004) [0x0000000000000001] [0x00000002] (CPF_Edit)
	uint32_t                                           bEnableLinearPositionDrive : 1;                // 0x00FC (0x0004) [0x0000000000000001] [0x00000004] (CPF_Edit)
	uint32_t                                           bEnableLinearvelocityDrive : 1;                // 0x00FC (0x0004) [0x0000000000000001] [0x00000008] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleConstraintDrive");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_BSJointActor
// 0x0000 (0x01E4 - 0x01E4)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_BSJointActor");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_ConstraintActorSpawnable
// 0x0000 (0x01E4 - 0x01E4)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_ConstraintActorSpawnable");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_HingeActor
// 0x0000 (0x01E4 - 0x01E4)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_HingeActor");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_PrismaticActor
// 0x0000 (0x01E4 - 0x01E4)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_PrismaticActor");
		}

		return uClassPointer;
	};

};

// Class Engine.RB_PulleyJointActor
// 0x0000 (0x01E4 - 0x01E4)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.RB_PulleyJointActor");
		}

		return uClassPointer;
	};

};

// Class Engine.ReverbVolumeToggleable
// 0x0000 (0x0234 - 0x0234)
class AReverbVolumeToggleable : public AReverbVolume
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.ReverbVolumeToggleable");
		}

		return uClassPointer;
	};

	void OnToggle(class USeqAct_Toggle* Action);
};

// Class Engine.SeqAct_AddRemoveFaceFXAnimSet
// 0x000C (0x00FC - 0x0108)
class USeqAct_AddRemoveFaceFXAnimSet : public USequenceAction
{
public:
	class TArray<class UFaceFXAnimSet*>                FaceFXAnimSets;                                // 0x00FC (0x000C) [0x0000000020400000] (CPF_NeedCtorLink | CPF_Deprecated)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AddRemoveFaceFXAnimSet");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_AIAbortMoveToActor
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_AIAbortMoveToActor");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_MITV_Activate
// 0x0004 (0x00FC - 0x0100)
class USeqAct_MITV_Activate : public USequenceAction
{
public:
	float                                              DurationOfMITV;                                // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_MITV_Activate");
		}

		return uClassPointer;
	};

	void eventActivated();
	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_SetMatInstTexParam
// 0x0010 (0x00FC - 0x010C)
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                       // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UTexture*                                    NewTexture;                                    // 0x0100 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ParamName;                                     // 0x0104 (0x0008) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMatInstTexParam");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetMatInstVectorParam
// 0x001C (0x00FC - 0x0118)
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                       // 0x00FC (0x0004) [0x0000000000000001] (CPF_Edit)    
	class FName                                        ParamName;                                     // 0x0100 (0x0008) [0x0000000000000001] (CPF_Edit)    
	struct FLinearColor                                VectorValue;                                   // 0x0108 (0x0010) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMatInstVectorParam");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqAct_SetSkelControlTarget
// 0x0014 (0x00FC - 0x0110)
class USeqAct_SetSkelControlTarget : public USequenceAction
{
public:
	class FName                                        SkelControlName;                               // 0x00FC (0x0008) [0x0000000000000001] (CPF_Edit)    
	class TArray<class UObject*>                       TargetActors;                                  // 0x0104 (0x000C) [0x0000000000400001] (CPF_Edit | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetSkelControlTarget");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_SetVector
// 0x000C (0x00FC - 0x0108)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                  // 0x00FC (0x000C) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_SetVector");
		}

		return uClassPointer;
	};

	void eventActivated();
};

// Class Engine.SeqAct_ToggleAffectedByHitEffects
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleAffectedByHitEffects");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqAct_UpdatePhysBonesFromAnim
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_UpdatePhysBonesFromAnim : public USequenceAction
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqAct_UpdatePhysBonesFromAnim");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqEvent_LOS
// 0x000C (0x0114 - 0x0120)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                          // 0x0114 (0x0004) [0x0000000000000001] (CPF_Edit)    
	float                                              TriggerDistance;                               // 0x0118 (0x0004) [0x0000000000000001] (CPF_Edit)    
	uint32_t                                           bCheckForObstructions : 1;                     // 0x011C (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqEvent_LOS");
		}

		return uClassPointer;
	};

	static int32_t eventGetObjClassVersion();
};

// Class Engine.SeqVar_Byte
// 0x0000 (0x0098 - 0x0098)
class USeqVar_Byte : public USequenceVariable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Byte");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Name
// 0x0000 (0x0098 - 0x0098)
class USeqVar_Name : public USequenceVariable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Name");
		}

		return uClassPointer;
	};

};

// Class Engine.SeqVar_Union
// 0x0000 (0x0098 - 0x0098)
class USeqVar_Union : public USequenceVariable
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SeqVar_Union");
		}

		return uClassPointer;
	};

};

// Class Engine.SkeletalMeshActorMATSpawnable
// 0x0000 (0x0214 - 0x0214)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActorMATSpawnable");
		}

		return uClassPointer;
	};

};

// Class Engine.SkeletalMeshActorMATWalkable
// 0x0000 (0x0214 - 0x0214)
class ASkeletalMeshActorMATWalkable : public ASkeletalMeshActorMAT
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActorMATWalkable");
		}

		return uClassPointer;
	};

};

// Class Engine.Trigger_Dynamic
// 0x0000 (0x01D4 - 0x01D4)
class ATrigger_Dynamic : public ATrigger
{
public:

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Trigger_Dynamic");
		}

		return uClassPointer;
	};

};

// Class Engine.Trigger_LOS
// 0x000C (0x01D4 - 0x01E0)
class ATrigger_LOS : public ATrigger
{
public:
	class TArray<class APlayerController*>             PCsWithLOS;                                    // 0x01D4 (0x000C) [0x0000000000400000] (CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.Trigger_LOS");
		}

		return uClassPointer;
	};

	void eventTick(float DeltaTime);
};

// Class Engine.TriggeredPath
// 0x0008 (0x02A0 - 0x02A8)
class ATriggeredPath : public ANavigationPoint
{
public:
	uint32_t                                           bOpen : 1;                                     // 0x02A0 (0x0004) [0x0000000000000001] [0x00000001] (CPF_Edit)
	class AActor*                                      MyTrigger;                                     // 0x02A4 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TriggeredPath");
		}

		return uClassPointer;
	};

	bool eventSuggestMovePreparation(class APawn* Other);
	class AActor* eventSpecialHandling(class APawn* Other);
	void OnToggle(class USeqAct_Toggle* inAction);
};

// Class Engine.TriggerStreamingLevel
// 0x000C (0x01D4 - 0x01E0)
class ATriggerStreamingLevel : public ATrigger
{
public:
	class TArray<struct FLevelStreamingData>           Levels;                                        // 0x01D4 (0x000C) [0x0000000004400001] (CPF_Edit | CPF_NeedCtorLink | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.TriggerStreamingLevel");
		}

		return uClassPointer;
	};

	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};

// Class Engine.UICharacterSummary
// 0x0028 (0x0064 - 0x008C)
class UUICharacterSummary : public UUIResourceDataProvider
{
public:
	class FString                                      ClassPathName;                                 // 0x0064 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      CharacterName;                                 // 0x0070 (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      CharacterBio;                                  // 0x007C (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bIsDisabled : 1;                               // 0x0088 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UICharacterSummary");
		}

		return uClassPointer;
	};

};

// Class Engine.UIGameInfoSummary
// 0x004C (0x0064 - 0x00B0)
class UUIGameInfoSummary : public UUIResourceDataProvider
{
public:
	class FString                                      ClassName;                                     // 0x0064 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      GameAcronym;                                   // 0x0070 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      MapPrefix;                                     // 0x007C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	uint32_t                                           bIsTeamGame : 1;                               // 0x0088 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)
	uint32_t                                           bIsDisabled : 1;                               // 0x0088 (0x0004) [0x0000000000004000] [0x00000002] (CPF_Config)
	class FString                                      GameSettingsClassName;                         // 0x008C (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      GameName;                                      // 0x0098 (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Description;                                   // 0x00A4 (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIGameInfoSummary");
		}

		return uClassPointer;
	};

};

// Class Engine.UIMapSummary
// 0x0030 (0x0064 - 0x0094)
class UUIMapSummary : public UUIResourceDataProvider
{
public:
	class FString                                      MapName;                                       // 0x0064 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      ScreenshotPathName;                            // 0x0070 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      DisplayName;                                   // 0x007C (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      Description;                                   // 0x0088 (0x000C) [0x0000000000408002] (CPF_Const | CPF_Localized | CPF_NeedCtorLink)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIMapSummary");
		}

		return uClassPointer;
	};

};

// Class Engine.UIWeaponSummary
// 0x0028 (0x0064 - 0x008C)
class UUIWeaponSummary : public UUIResourceDataProvider
{
public:
	class FString                                      ClassPathName;                                 // 0x0064 (0x000C) [0x0000000000404000] (CPF_Config | CPF_NeedCtorLink)
	class FString                                      FriendlyName;                                  // 0x0070 (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	class FString                                      WeaponDescription;                             // 0x007C (0x000C) [0x000000000040C002] (CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink)
	uint32_t                                           bIsDisabled : 1;                               // 0x0088 (0x0004) [0x0000000000004000] [0x00000001] (CPF_Config)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.UIWeaponSummary");
		}

		return uClassPointer;
	};

};

// Class Engine.WaterVolume
// 0x0010 (0x0234 - 0x0244)
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                    // 0x0234 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      EntryActor;                                    // 0x0238 (0x0004) [0x0000000000000001] (CPF_Edit)    
	class USoundCue*                                   ExitSound;                                     // 0x023C (0x0004) [0x0000000000000001] (CPF_Edit)    
	class UClass*                                      ExitActor;                                     // 0x0240 (0x0004) [0x0000000000000001] (CPF_Edit)    

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WaterVolume");
		}

		return uClassPointer;
	};

	void PlayExitSplash(class AActor* Other);
	void eventUnTouch(class AActor* Other);
	void PlayEntrySplash(class AActor* Other);
	void eventTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};

// Class Engine.WindDirectionalSource
// 0x0004 (0x01C8 - 0x01CC)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                     // 0x01C8 (0x0004) [0x00000000040A000B] (CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline)

public:
	static UClass* StaticClass()
	{
		static UClass* uClassPointer = nullptr;

		if (!uClassPointer)
		{
			uClassPointer = UObject::FindClass("Class Engine.WindDirectionalSource");
		}

		return uClassPointer;
	};

};

/*
# ========================================================================================= #
#
# ========================================================================================= #
*/

#ifdef _MSC_VER
#pragma pack(pop)
#endif
