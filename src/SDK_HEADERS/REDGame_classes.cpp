/*
#############################################################################################
# Guilty Gear Xrd Rev 2 (GGXRD-R2) SDK 1.0.0.0
# Generated with the CodeRedGenerator v1.1.5
# ========================================================================================= #
# File: REDGame_classes.cpp
# ========================================================================================= #
# Credits: ItsBranK, TheFeckless
# Links: www.github.com/CodeRedModding/CodeRed-Generator
#############################################################################################
*/
#include "rev2-mod/include/SdkHeaders.hpp"

#ifdef _MSC_VER
#pragma pack(push, 0x4)
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function REDGame.REDActor_CheckDOF.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDActor_CheckDOF::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDActor_CheckDOF.Tick");
	}

	AREDActor_CheckDOF_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDActor_CheckDOF.SetDOFInfoPositionNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39736])
// Parameter Info:
// float                          InnerRadius                    (CPF_Parm)
// struct FVector                 Position                       (CPF_Parm)

void AREDActor_CheckDOF::SetDOFInfoPositionNative(float InnerRadius, const struct FVector& Position)
{
	static UFunction* uFnSetDOFInfoPositionNative = nullptr;

	if (!uFnSetDOFInfoPositionNative)
	{
		uFnSetDOFInfoPositionNative = UFunction::FindFunction("Function REDGame.REDActor_CheckDOF.SetDOFInfoPositionNative");
	}

	AREDActor_CheckDOF_execSetDOFInfoPositionNative_Params SetDOFInfoPositionNative_Params;
	memset(&SetDOFInfoPositionNative_Params, 0, sizeof(SetDOFInfoPositionNative_Params));
	memcpy_s(&SetDOFInfoPositionNative_Params.InnerRadius, sizeof(SetDOFInfoPositionNative_Params.InnerRadius), &InnerRadius, sizeof(InnerRadius));
	memcpy_s(&SetDOFInfoPositionNative_Params.Position, sizeof(SetDOFInfoPositionNative_Params.Position), &Position, sizeof(Position));

	this->ProcessEvent(uFnSetDOFInfoPositionNative, &SetDOFInfoPositionNative_Params, nullptr);
};

// Function REDGame.REDActor_CheckDOF.SetDOFInfoDistanceNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39734])
// Parameter Info:
// float                          InnerRadius                    (CPF_Parm)
// float                          Distance                       (CPF_Parm)

void AREDActor_CheckDOF::SetDOFInfoDistanceNative(float InnerRadius, float Distance)
{
	static UFunction* uFnSetDOFInfoDistanceNative = nullptr;

	if (!uFnSetDOFInfoDistanceNative)
	{
		uFnSetDOFInfoDistanceNative = UFunction::FindFunction("Function REDGame.REDActor_CheckDOF.SetDOFInfoDistanceNative");
	}

	AREDActor_CheckDOF_execSetDOFInfoDistanceNative_Params SetDOFInfoDistanceNative_Params;
	memset(&SetDOFInfoDistanceNative_Params, 0, sizeof(SetDOFInfoDistanceNative_Params));
	memcpy_s(&SetDOFInfoDistanceNative_Params.InnerRadius, sizeof(SetDOFInfoDistanceNative_Params.InnerRadius), &InnerRadius, sizeof(InnerRadius));
	memcpy_s(&SetDOFInfoDistanceNative_Params.Distance, sizeof(SetDOFInfoDistanceNative_Params.Distance), &Distance, sizeof(Distance));

	this->ProcessEvent(uFnSetDOFInfoDistanceNative, &SetDOFInfoDistanceNative_Params, nullptr);
};

// Function REDGame.REDActor_CheckDOF.SetDOFInfoFocusTypeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39735])
// Parameter Info:
// EFocusType                     Type                           (CPF_Parm)

void AREDActor_CheckDOF::SetDOFInfoFocusTypeNative(EFocusType Type)
{
	static UFunction* uFnSetDOFInfoFocusTypeNative = nullptr;

	if (!uFnSetDOFInfoFocusTypeNative)
	{
		uFnSetDOFInfoFocusTypeNative = UFunction::FindFunction("Function REDGame.REDActor_CheckDOF.SetDOFInfoFocusTypeNative");
	}

	AREDActor_CheckDOF_execSetDOFInfoFocusTypeNative_Params SetDOFInfoFocusTypeNative_Params;
	memset(&SetDOFInfoFocusTypeNative_Params, 0, sizeof(SetDOFInfoFocusTypeNative_Params));
	memcpy_s(&SetDOFInfoFocusTypeNative_Params.Type, sizeof(SetDOFInfoFocusTypeNative_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnSetDOFInfoFocusTypeNative, &SetDOFInfoFocusTypeNative_Params, nullptr);
};

// Function REDGame.REDActor_CheckDOF.SetDOFInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          InnerRadius                    (CPF_Parm)
// float                          Distance                       (CPF_Parm)

void AREDActor_CheckDOF::SetDOFInfo(float InnerRadius, float Distance)
{
	static UFunction* uFnSetDOFInfo = nullptr;

	if (!uFnSetDOFInfo)
	{
		uFnSetDOFInfo = UFunction::FindFunction("Function REDGame.REDActor_CheckDOF.SetDOFInfo");
	}

	AREDActor_CheckDOF_execSetDOFInfo_Params SetDOFInfo_Params;
	memset(&SetDOFInfo_Params, 0, sizeof(SetDOFInfo_Params));
	memcpy_s(&SetDOFInfo_Params.InnerRadius, sizeof(SetDOFInfo_Params.InnerRadius), &InnerRadius, sizeof(InnerRadius));
	memcpy_s(&SetDOFInfo_Params.Distance, sizeof(SetDOFInfo_Params.Distance), &Distance, sizeof(Distance));

	this->ProcessEvent(uFnSetDOFInfo, &SetDOFInfo_Params, nullptr);
};

// Function REDGame.REDActor_CheckDOF.SetupCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDActor_CheckDOF::SetupCamera()
{
	static UFunction* uFnSetupCamera = nullptr;

	if (!uFnSetupCamera)
	{
		uFnSetupCamera = UFunction::FindFunction("Function REDGame.REDActor_CheckDOF.SetupCamera");
	}

	AREDActor_CheckDOF_execSetupCamera_Params SetupCamera_Params;
	memset(&SetupCamera_Params, 0, sizeof(SetupCamera_Params));

	this->ProcessEvent(uFnSetupCamera, &SetupCamera_Params, nullptr);
};

// Function REDGame.REDActor_CheckDOF.NativeTick
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38513])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDActor_CheckDOF::NativeTick(float DeltaTime)
{
	static UFunction* uFnNativeTick = nullptr;

	if (!uFnNativeTick)
	{
		uFnNativeTick = UFunction::FindFunction("Function REDGame.REDActor_CheckDOF.NativeTick");
	}

	AREDActor_CheckDOF_execNativeTick_Params NativeTick_Params;
	memset(&NativeTick_Params, 0, sizeof(NativeTick_Params));
	memcpy_s(&NativeTick_Params.DeltaTime, sizeof(NativeTick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnNativeTick, &NativeTick_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.Initialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// class AREDSceneColorSettings*  Settings                       (CPF_Parm)

void AREDActor_GlareEffect::Initialize(int32_t Index, class AREDSceneColorSettings* Settings)
{
	static UFunction* uFnInitialize = nullptr;

	if (!uFnInitialize)
	{
		uFnInitialize = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.Initialize");
	}

	AREDActor_GlareEffect_execInitialize_Params Initialize_Params;
	memset(&Initialize_Params, 0, sizeof(Initialize_Params));
	memcpy_s(&Initialize_Params.Index, sizeof(Initialize_Params.Index), &Index, sizeof(Index));
	Initialize_Params.Settings = Settings;

	this->ProcessEvent(uFnInitialize, &Initialize_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.UpdateMaterialParameter
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40776])
// Parameter Info:

void AREDActor_GlareEffect::UpdateMaterialParameter()
{
	static UFunction* uFnUpdateMaterialParameter = nullptr;

	if (!uFnUpdateMaterialParameter)
	{
		uFnUpdateMaterialParameter = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.UpdateMaterialParameter");
	}

	AREDActor_GlareEffect_execUpdateMaterialParameter_Params UpdateMaterialParameter_Params;
	memset(&UpdateMaterialParameter_Params, 0, sizeof(UpdateMaterialParameter_Params));

	this->ProcessEvent(uFnUpdateMaterialParameter, &UpdateMaterialParameter_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.UpdateTransform
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40877])
// Parameter Info:
// struct FTPOV                   POV                            (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDActor_GlareEffect::UpdateTransform(struct FTPOV& POV)
{
	static UFunction* uFnUpdateTransform = nullptr;

	if (!uFnUpdateTransform)
	{
		uFnUpdateTransform = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.UpdateTransform");
	}

	AREDActor_GlareEffect_execUpdateTransform_Params UpdateTransform_Params;
	memset(&UpdateTransform_Params, 0, sizeof(UpdateTransform_Params));
	memcpy_s(&UpdateTransform_Params.POV, sizeof(UpdateTransform_Params.POV), &POV, sizeof(POV));

	this->ProcessEvent(uFnUpdateTransform, &UpdateTransform_Params, nullptr);

	memcpy_s(&POV, sizeof(POV), &UpdateTransform_Params.POV, sizeof(UpdateTransform_Params.POV));
};

// Function REDGame.REDActor_GlareEffect.UpdateParameter
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40800])
// Parameter Info:

void AREDActor_GlareEffect::UpdateParameter()
{
	static UFunction* uFnUpdateParameter = nullptr;

	if (!uFnUpdateParameter)
	{
		uFnUpdateParameter = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.UpdateParameter");
	}

	AREDActor_GlareEffect_execUpdateParameter_Params UpdateParameter_Params;
	memset(&UpdateParameter_Params, 0, sizeof(UpdateParameter_Params));

	this->ProcessEvent(uFnUpdateParameter, &UpdateParameter_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.SetAlphaToF
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39688])
// Parameter Info:
// float                          StartAlpha                     (CPF_Parm)
// float                          EndAlpha                       (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void AREDActor_GlareEffect::SetAlphaToF(float StartAlpha, float EndAlpha, int32_t frame)
{
	static UFunction* uFnSetAlphaToF = nullptr;

	if (!uFnSetAlphaToF)
	{
		uFnSetAlphaToF = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetAlphaToF");
	}

	AREDActor_GlareEffect_execSetAlphaToF_Params SetAlphaToF_Params;
	memset(&SetAlphaToF_Params, 0, sizeof(SetAlphaToF_Params));
	memcpy_s(&SetAlphaToF_Params.StartAlpha, sizeof(SetAlphaToF_Params.StartAlpha), &StartAlpha, sizeof(StartAlpha));
	memcpy_s(&SetAlphaToF_Params.EndAlpha, sizeof(SetAlphaToF_Params.EndAlpha), &EndAlpha, sizeof(EndAlpha));
	memcpy_s(&SetAlphaToF_Params.frame, sizeof(SetAlphaToF_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetAlphaToF, &SetAlphaToF_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.SetAlphaTo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39687])
// Parameter Info:
// int32_t                        StartAlpha                     (CPF_Parm)
// int32_t                        EndAlpha                       (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void AREDActor_GlareEffect::SetAlphaTo(int32_t StartAlpha, int32_t EndAlpha, int32_t frame)
{
	static UFunction* uFnSetAlphaTo = nullptr;

	if (!uFnSetAlphaTo)
	{
		uFnSetAlphaTo = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetAlphaTo");
	}

	AREDActor_GlareEffect_execSetAlphaTo_Params SetAlphaTo_Params;
	memset(&SetAlphaTo_Params, 0, sizeof(SetAlphaTo_Params));
	memcpy_s(&SetAlphaTo_Params.StartAlpha, sizeof(SetAlphaTo_Params.StartAlpha), &StartAlpha, sizeof(StartAlpha));
	memcpy_s(&SetAlphaTo_Params.EndAlpha, sizeof(SetAlphaTo_Params.EndAlpha), &EndAlpha, sizeof(EndAlpha));
	memcpy_s(&SetAlphaTo_Params.frame, sizeof(SetAlphaTo_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetAlphaTo, &SetAlphaTo_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.SetAlpha
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39685])
// Parameter Info:
// int32_t                        inAlpha                        (CPF_Parm)

void AREDActor_GlareEffect::SetAlpha(int32_t inAlpha)
{
	static UFunction* uFnSetAlpha = nullptr;

	if (!uFnSetAlpha)
	{
		uFnSetAlpha = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetAlpha");
	}

	AREDActor_GlareEffect_execSetAlpha_Params SetAlpha_Params;
	memset(&SetAlpha_Params, 0, sizeof(SetAlpha_Params));
	memcpy_s(&SetAlpha_Params.inAlpha, sizeof(SetAlpha_Params.inAlpha), &inAlpha, sizeof(inAlpha));

	this->ProcessEvent(uFnSetAlpha, &SetAlpha_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.SetAlphaF
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39686])
// Parameter Info:
// float                          inAlpha                        (CPF_Parm)

void AREDActor_GlareEffect::SetAlphaF(float inAlpha)
{
	static UFunction* uFnSetAlphaF = nullptr;

	if (!uFnSetAlphaF)
	{
		uFnSetAlphaF = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetAlphaF");
	}

	AREDActor_GlareEffect_execSetAlphaF_Params SetAlphaF_Params;
	memset(&SetAlphaF_Params, 0, sizeof(SetAlphaF_Params));
	memcpy_s(&SetAlphaF_Params.inAlpha, sizeof(SetAlphaF_Params.inAlpha), &inAlpha, sizeof(inAlpha));

	this->ProcessEvent(uFnSetAlphaF, &SetAlphaF_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.SetColor
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39711])
// Parameter Info:
// struct FColor                  InColor                        (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDActor_GlareEffect::SetColor(struct FColor& InColor)
{
	static UFunction* uFnSetColor = nullptr;

	if (!uFnSetColor)
	{
		uFnSetColor = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetColor");
	}

	AREDActor_GlareEffect_execSetColor_Params SetColor_Params;
	memset(&SetColor_Params, 0, sizeof(SetColor_Params));
	memcpy_s(&SetColor_Params.InColor, sizeof(SetColor_Params.InColor), &InColor, sizeof(InColor));

	this->ProcessEvent(uFnSetColor, &SetColor_Params, nullptr);

	memcpy_s(&InColor, sizeof(InColor), &SetColor_Params.InColor, sizeof(SetColor_Params.InColor));
};

// Function REDGame.REDActor_GlareEffect.SetColorF
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39712])
// Parameter Info:
// struct FLinearColor            InColor                        (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDActor_GlareEffect::SetColorF(struct FLinearColor& InColor)
{
	static UFunction* uFnSetColorF = nullptr;

	if (!uFnSetColorF)
	{
		uFnSetColorF = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetColorF");
	}

	AREDActor_GlareEffect_execSetColorF_Params SetColorF_Params;
	memset(&SetColorF_Params, 0, sizeof(SetColorF_Params));
	memcpy_s(&SetColorF_Params.InColor, sizeof(SetColorF_Params.InColor), &InColor, sizeof(InColor));

	this->ProcessEvent(uFnSetColorF, &SetColorF_Params, nullptr);

	memcpy_s(&InColor, sizeof(InColor), &SetColorF_Params.InColor, sizeof(SetColorF_Params.InColor));
};

// Function REDGame.REDActor_GlareEffect.ResetColor
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27181])
// Parameter Info:

void AREDActor_GlareEffect::ResetColor()
{
	static UFunction* uFnResetColor = nullptr;

	if (!uFnResetColor)
	{
		uFnResetColor = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.ResetColor");
	}

	AREDActor_GlareEffect_execResetColor_Params ResetColor_Params;
	memset(&ResetColor_Params, 0, sizeof(ResetColor_Params));

	this->ProcessEvent(uFnResetColor, &ResetColor_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.SetScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[28132])
// Parameter Info:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void AREDActor_GlareEffect::SetScale(float X, float Y)
{
	static UFunction* uFnSetScale = nullptr;

	if (!uFnSetScale)
	{
		uFnSetScale = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetScale");
	}

	AREDActor_GlareEffect_execSetScale_Params SetScale_Params;
	memset(&SetScale_Params, 0, sizeof(SetScale_Params));
	memcpy_s(&SetScale_Params.X, sizeof(SetScale_Params.X), &X, sizeof(X));
	memcpy_s(&SetScale_Params.Y, sizeof(SetScale_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnSetScale, &SetScale_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.SetDisp
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39728])
// Parameter Info:
// uint32_t                       bDispOn                        (CPF_Parm)

void AREDActor_GlareEffect::SetDisp(bool bDispOn)
{
	static UFunction* uFnSetDisp = nullptr;

	if (!uFnSetDisp)
	{
		uFnSetDisp = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetDisp");
	}

	AREDActor_GlareEffect_execSetDisp_Params SetDisp_Params;
	memset(&SetDisp_Params, 0, sizeof(SetDisp_Params));
	SetDisp_Params.bDispOn = bDispOn;

	this->ProcessEvent(uFnSetDisp, &SetDisp_Params, nullptr);
};

// Function REDGame.REDActor_GlareEffect.SetOffset
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39786])
// Parameter Info:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void AREDActor_GlareEffect::SetOffset(float X, float Y)
{
	static UFunction* uFnSetOffset = nullptr;

	if (!uFnSetOffset)
	{
		uFnSetOffset = UFunction::FindFunction("Function REDGame.REDActor_GlareEffect.SetOffset");
	}

	AREDActor_GlareEffect_execSetOffset_Params SetOffset_Params;
	memset(&SetOffset_Params, 0, sizeof(SetOffset_Params));
	memcpy_s(&SetOffset_Params.X, sizeof(SetOffset_Params.X), &X, sizeof(X));
	memcpy_s(&SetOffset_Params.Y, sizeof(SetOffset_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnSetOffset, &SetOffset_Params, nullptr);
};

// Function REDGame.REDActor_PauseMenu.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDActor_PauseMenu::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDActor_PauseMenu.Tick");
	}

	AREDActor_PauseMenu_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDActor_PauseMenu.UnPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDActor_PauseMenu::eventUnPause()
{
	static UFunction* uFnUnPause = nullptr;

	if (!uFnUnPause)
	{
		uFnUnPause = UFunction::FindFunction("Function REDGame.REDActor_PauseMenu.UnPause");
	}

	AREDActor_PauseMenu_eventUnPause_Params UnPause_Params;
	memset(&UnPause_Params, 0, sizeof(UnPause_Params));

	this->ProcessEvent(uFnUnPause, &UnPause_Params, nullptr);
};

// Function REDGame.REDActor_PauseMenu.ActivatePause
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AREDHUD*                 HUD                            (CPF_Parm)

bool AREDActor_PauseMenu::ActivatePause(class AREDHUD* HUD)
{
	static UFunction* uFnActivatePause = nullptr;

	if (!uFnActivatePause)
	{
		uFnActivatePause = UFunction::FindFunction("Function REDGame.REDActor_PauseMenu.ActivatePause");
	}

	AREDActor_PauseMenu_execActivatePause_Params ActivatePause_Params;
	memset(&ActivatePause_Params, 0, sizeof(ActivatePause_Params));
	ActivatePause_Params.HUD = HUD;

	this->ProcessEvent(uFnActivatePause, &ActivatePause_Params, nullptr);

	return ActivatePause_Params.ReturnValue;
};

// Function REDGame.REDActor_PauseMenu.PauseUpdate
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38905])
// Parameter Info:

void AREDActor_PauseMenu::PauseUpdate()
{
	static UFunction* uFnPauseUpdate = nullptr;

	if (!uFnPauseUpdate)
	{
		uFnPauseUpdate = UFunction::FindFunction("Function REDGame.REDActor_PauseMenu.PauseUpdate");
	}

	AREDActor_PauseMenu_execPauseUpdate_Params PauseUpdate_Params;
	memset(&PauseUpdate_Params, 0, sizeof(PauseUpdate_Params));

	this->ProcessEvent(uFnPauseUpdate, &PauseUpdate_Params, nullptr);
};

// Function REDGame.REDActor_PostUpdater.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDActor_PostUpdater::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDActor_PostUpdater.Tick");
	}

	AREDActor_PostUpdater_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDActor_PostUpdater.UpdateMaterialParam
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40774])
// Parameter Info:

void AREDActor_PostUpdater::UpdateMaterialParam()
{
	static UFunction* uFnUpdateMaterialParam = nullptr;

	if (!uFnUpdateMaterialParam)
	{
		uFnUpdateMaterialParam = UFunction::FindFunction("Function REDGame.REDActor_PostUpdater.UpdateMaterialParam");
	}

	AREDActor_PostUpdater_execUpdateMaterialParam_Params UpdateMaterialParam_Params;
	memset(&UpdateMaterialParam_Params, 0, sizeof(UpdateMaterialParam_Params));

	this->ProcessEvent(uFnUpdateMaterialParam, &UpdateMaterialParam_Params, nullptr);
};

// Function REDGame.REDActor_RadialBlur.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDActor_RadialBlur::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDActor_RadialBlur.Tick");
	}

	AREDActor_RadialBlur_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDActor_RadialBlur.PostBeginPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDActor_RadialBlur::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function REDGame.REDActor_RadialBlur.PostBeginPlay");
	}

	AREDActor_RadialBlur_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function REDGame.REDActor_RadialBlur.SetupCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDActor_RadialBlur::SetupCamera()
{
	static UFunction* uFnSetupCamera = nullptr;

	if (!uFnSetupCamera)
	{
		uFnSetupCamera = UFunction::FindFunction("Function REDGame.REDActor_RadialBlur.SetupCamera");
	}

	AREDActor_RadialBlur_execSetupCamera_Params SetupCamera_Params;
	memset(&SetupCamera_Params, 0, sizeof(SetupCamera_Params));

	this->ProcessEvent(uFnSetupCamera, &SetupCamera_Params, nullptr);
};

// Function REDGame.REDActor_RadialBlur.UpdateDraw
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40649])
// Parameter Info:

void AREDActor_RadialBlur::UpdateDraw()
{
	static UFunction* uFnUpdateDraw = nullptr;

	if (!uFnUpdateDraw)
	{
		uFnUpdateDraw = UFunction::FindFunction("Function REDGame.REDActor_RadialBlur.UpdateDraw");
	}

	AREDActor_RadialBlur_execUpdateDraw_Params UpdateDraw_Params;
	memset(&UpdateDraw_Params, 0, sizeof(UpdateDraw_Params));

	this->ProcessEvent(uFnUpdateDraw, &UpdateDraw_Params, nullptr);
};

// Function REDGame.REDActor_RadialBlur.NativeTick
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38513])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDActor_RadialBlur::NativeTick(float DeltaTime)
{
	static UFunction* uFnNativeTick = nullptr;

	if (!uFnNativeTick)
	{
		uFnNativeTick = UFunction::FindFunction("Function REDGame.REDActor_RadialBlur.NativeTick");
	}

	AREDActor_RadialBlur_execNativeTick_Params NativeTick_Params;
	memset(&NativeTick_Params, 0, sizeof(NativeTick_Params));
	memcpy_s(&NativeTick_Params.DeltaTime, sizeof(NativeTick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnNativeTick, &NativeTick_Params, nullptr);
};

// Function REDGame.REDActor_RadialBlur.End
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[20356])
// Parameter Info:
// uint32_t                       immediate                      (CPF_Parm)

void AREDActor_RadialBlur::End(bool immediate)
{
	static UFunction* uFnEnd = nullptr;

	if (!uFnEnd)
	{
		uFnEnd = UFunction::FindFunction("Function REDGame.REDActor_RadialBlur.End");
	}

	AREDActor_RadialBlur_execEnd_Params End_Params;
	memset(&End_Params, 0, sizeof(End_Params));
	End_Params.immediate = immediate;

	this->ProcessEvent(uFnEnd, &End_Params, nullptr);
};

// Function REDGame.REDActor_RadialBlur.Start
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13142])
// Parameter Info:
// struct FVector                 centerLocation                 (CPF_Parm)
// uint32_t                       bRelativeCamera                (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// float                          Opacity                        (CPF_Parm)
// float                          Falloff                        (CPF_Parm)
// int32_t                        inTime                         (CPF_Parm)
// int32_t                        stayTime                       (CPF_Parm)
// int32_t                        outTime                        (CPF_Parm)

void AREDActor_RadialBlur::Start(const struct FVector& centerLocation, bool bRelativeCamera, float Scale, float Opacity, float Falloff, int32_t inTime, int32_t stayTime, int32_t outTime)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDActor_RadialBlur.Start");
	}

	AREDActor_RadialBlur_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	memcpy_s(&Start_Params.centerLocation, sizeof(Start_Params.centerLocation), &centerLocation, sizeof(centerLocation));
	Start_Params.bRelativeCamera = bRelativeCamera;
	memcpy_s(&Start_Params.Scale, sizeof(Start_Params.Scale), &Scale, sizeof(Scale));
	memcpy_s(&Start_Params.Opacity, sizeof(Start_Params.Opacity), &Opacity, sizeof(Opacity));
	memcpy_s(&Start_Params.Falloff, sizeof(Start_Params.Falloff), &Falloff, sizeof(Falloff));
	memcpy_s(&Start_Params.inTime, sizeof(Start_Params.inTime), &inTime, sizeof(inTime));
	memcpy_s(&Start_Params.stayTime, sizeof(Start_Params.stayTime), &stayTime, sizeof(stayTime));
	memcpy_s(&Start_Params.outTime, sizeof(Start_Params.outTime), &outTime, sizeof(outTime));

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);
};

// Function REDGame.REDAdvSceneData.GetSECue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37165])
// Parameter Info:
// class USoundCue*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    cueName                        (CPF_Parm)

class USoundCue* UREDAdvSceneData::GetSECue(const class FName& cueName)
{
	static UFunction* uFnGetSECue = nullptr;

	if (!uFnGetSECue)
	{
		uFnGetSECue = UFunction::FindFunction("Function REDGame.REDAdvSceneData.GetSECue");
	}

	UREDAdvSceneData_execGetSECue_Params GetSECue_Params;
	memset(&GetSECue_Params, 0, sizeof(GetSECue_Params));
	memcpy_s(&GetSECue_Params.cueName, sizeof(GetSECue_Params.cueName), &cueName, sizeof(cueName));

	this->ProcessEvent(uFnGetSECue, &GetSECue_Params, nullptr);

	return GetSECue_Params.ReturnValue;
};

// Function REDGame.REDAnimNodeBlendList.ChangeAnimSeq
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36090])
// Parameter Info:
// class UREDAnimNodeSequence*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    SeqName                        (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)
// float                          StartTime                      (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

class UREDAnimNodeSequence* UREDAnimNodeBlendList::ChangeAnimSeq(const class FName& SeqName, bool isLoop, float StartTime, float BlendTime)
{
	static UFunction* uFnChangeAnimSeq = nullptr;

	if (!uFnChangeAnimSeq)
	{
		uFnChangeAnimSeq = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendList.ChangeAnimSeq");
	}

	UREDAnimNodeBlendList_execChangeAnimSeq_Params ChangeAnimSeq_Params;
	memset(&ChangeAnimSeq_Params, 0, sizeof(ChangeAnimSeq_Params));
	memcpy_s(&ChangeAnimSeq_Params.SeqName, sizeof(ChangeAnimSeq_Params.SeqName), &SeqName, sizeof(SeqName));
	ChangeAnimSeq_Params.isLoop = isLoop;
	memcpy_s(&ChangeAnimSeq_Params.StartTime, sizeof(ChangeAnimSeq_Params.StartTime), &StartTime, sizeof(StartTime));
	memcpy_s(&ChangeAnimSeq_Params.BlendTime, sizeof(ChangeAnimSeq_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	this->ProcessEvent(uFnChangeAnimSeq, &ChangeAnimSeq_Params, nullptr);

	return ChangeAnimSeq_Params.ReturnValue;
};

// Function REDGame.REDAnimNodeBlendAdvFace.UpdateBlendAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40604])
// Parameter Info:

void UREDAnimNodeBlendAdvFace::UpdateBlendAnim()
{
	static UFunction* uFnUpdateBlendAnim = nullptr;

	if (!uFnUpdateBlendAnim)
	{
		uFnUpdateBlendAnim = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendAdvFace.UpdateBlendAnim");
	}

	UREDAnimNodeBlendAdvFace_execUpdateBlendAnim_Params UpdateBlendAnim_Params;
	memset(&UpdateBlendAnim_Params, 0, sizeof(UpdateBlendAnim_Params));

	this->ProcessEvent(uFnUpdateBlendAnim, &UpdateBlendAnim_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendAdvFace.ChangeFace
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36096])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        InFaceType                     (CPF_Parm)
// int32_t                        InBlendCount                   (CPF_Parm)
// int32_t                        InBlendInterval                (CPF_Parm)
// int32_t                        InAcc                          (CPF_Parm)

bool UREDAnimNodeBlendAdvFace::ChangeFace(int32_t InFaceType, int32_t InBlendCount, int32_t InBlendInterval, int32_t InAcc)
{
	static UFunction* uFnChangeFace = nullptr;

	if (!uFnChangeFace)
	{
		uFnChangeFace = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendAdvFace.ChangeFace");
	}

	UREDAnimNodeBlendAdvFace_execChangeFace_Params ChangeFace_Params;
	memset(&ChangeFace_Params, 0, sizeof(ChangeFace_Params));
	memcpy_s(&ChangeFace_Params.InFaceType, sizeof(ChangeFace_Params.InFaceType), &InFaceType, sizeof(InFaceType));
	memcpy_s(&ChangeFace_Params.InBlendCount, sizeof(ChangeFace_Params.InBlendCount), &InBlendCount, sizeof(InBlendCount));
	memcpy_s(&ChangeFace_Params.InBlendInterval, sizeof(ChangeFace_Params.InBlendInterval), &InBlendInterval, sizeof(InBlendInterval));
	memcpy_s(&ChangeFace_Params.InAcc, sizeof(ChangeFace_Params.InAcc), &InAcc, sizeof(InAcc));

	this->ProcessEvent(uFnChangeFace, &ChangeFace_Params, nullptr);

	return ChangeFace_Params.ReturnValue;
};

// Function REDGame.REDAnimNodeBlendAdvHair.UpdateBlendAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40604])
// Parameter Info:

void UREDAnimNodeBlendAdvHair::UpdateBlendAnim()
{
	static UFunction* uFnUpdateBlendAnim = nullptr;

	if (!uFnUpdateBlendAnim)
	{
		uFnUpdateBlendAnim = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendAdvHair.UpdateBlendAnim");
	}

	UREDAnimNodeBlendAdvHair_execUpdateBlendAnim_Params UpdateBlendAnim_Params;
	memset(&UpdateBlendAnim_Params, 0, sizeof(UpdateBlendAnim_Params));

	this->ProcessEvent(uFnUpdateBlendAnim, &UpdateBlendAnim_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendAdvHair.SetHair
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39754])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  AnimName                       (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        InBlendCount                   (CPF_Parm)
// int32_t                        InBlendInterval                (CPF_Parm)
// int32_t                        InAcc                          (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)
// uint32_t                       IsForceSet                     (CPF_Parm)

bool UREDAnimNodeBlendAdvHair::SetHair(const class FString& AnimName, int32_t InBlendCount, int32_t InBlendInterval, int32_t InAcc, bool isLoop, bool IsForceSet)
{
	static UFunction* uFnSetHair = nullptr;

	if (!uFnSetHair)
	{
		uFnSetHair = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendAdvHair.SetHair");
	}

	UREDAnimNodeBlendAdvHair_execSetHair_Params SetHair_Params;
	memset(&SetHair_Params, 0, sizeof(SetHair_Params));
	memcpy_s(&SetHair_Params.AnimName, sizeof(SetHair_Params.AnimName), &AnimName, sizeof(AnimName));
	memcpy_s(&SetHair_Params.InBlendCount, sizeof(SetHair_Params.InBlendCount), &InBlendCount, sizeof(InBlendCount));
	memcpy_s(&SetHair_Params.InBlendInterval, sizeof(SetHair_Params.InBlendInterval), &InBlendInterval, sizeof(InBlendInterval));
	memcpy_s(&SetHair_Params.InAcc, sizeof(SetHair_Params.InAcc), &InAcc, sizeof(InAcc));
	SetHair_Params.isLoop = isLoop;
	SetHair_Params.IsForceSet = IsForceSet;

	this->ProcessEvent(uFnSetHair, &SetHair_Params, nullptr);

	return SetHair_Params.ReturnValue;
};

// Function REDGame.REDAnimNodeBlendEyeBlink.Update
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13049])
// Parameter Info:

void UREDAnimNodeBlendEyeBlink::Update()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendEyeBlink.Update");
	}

	UREDAnimNodeBlendEyeBlink_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendEyeBlink.StopBlink
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40099])
// Parameter Info:

void UREDAnimNodeBlendEyeBlink::StopBlink()
{
	static UFunction* uFnStopBlink = nullptr;

	if (!uFnStopBlink)
	{
		uFnStopBlink = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendEyeBlink.StopBlink");
	}

	UREDAnimNodeBlendEyeBlink_execStopBlink_Params StopBlink_Params;
	memset(&StopBlink_Params, 0, sizeof(StopBlink_Params));

	this->ProcessEvent(uFnStopBlink, &StopBlink_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendEyeBlink.PlayBlink
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[38963])
// Parameter Info:
// uint32_t                       Linear                         (CPF_OptionalParm | CPF_Parm)
// float                          Speed                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        playFrame                      (CPF_OptionalParm | CPF_Parm)

void UREDAnimNodeBlendEyeBlink::PlayBlink(bool Linear, float Speed, int32_t playFrame)
{
	static UFunction* uFnPlayBlink = nullptr;

	if (!uFnPlayBlink)
	{
		uFnPlayBlink = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendEyeBlink.PlayBlink");
	}

	UREDAnimNodeBlendEyeBlink_execPlayBlink_Params PlayBlink_Params;
	memset(&PlayBlink_Params, 0, sizeof(PlayBlink_Params));
	PlayBlink_Params.Linear = Linear;
	memcpy_s(&PlayBlink_Params.Speed, sizeof(PlayBlink_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&PlayBlink_Params.playFrame, sizeof(PlayBlink_Params.playFrame), &playFrame, sizeof(playFrame));

	this->ProcessEvent(uFnPlayBlink, &PlayBlink_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendEyeBlink.SetBlendTarget
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27891])
// Parameter Info:
// float                          BlendTarget                    (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UREDAnimNodeBlendEyeBlink::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static UFunction* uFnSetBlendTarget = nullptr;

	if (!uFnSetBlendTarget)
	{
		uFnSetBlendTarget = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendEyeBlink.SetBlendTarget");
	}

	UREDAnimNodeBlendEyeBlink_execSetBlendTarget_Params SetBlendTarget_Params;
	memset(&SetBlendTarget_Params, 0, sizeof(SetBlendTarget_Params));
	memcpy_s(&SetBlendTarget_Params.BlendTarget, sizeof(SetBlendTarget_Params.BlendTarget), &BlendTarget, sizeof(BlendTarget));
	memcpy_s(&SetBlendTarget_Params.BlendTime, sizeof(SetBlendTarget_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	this->ProcessEvent(uFnSetBlendTarget, &SetBlendTarget_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.Update
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13049])
// Parameter Info:

void UREDAnimNodeBlendLip::Update()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.Update");
	}

	UREDAnimNodeBlendLip_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.ChangeMouthSeqNodeIndex
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36103])
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)

void UREDAnimNodeBlendLip::ChangeMouthSeqNodeIndex(int32_t Index)
{
	static UFunction* uFnChangeMouthSeqNodeIndex = nullptr;

	if (!uFnChangeMouthSeqNodeIndex)
	{
		uFnChangeMouthSeqNodeIndex = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.ChangeMouthSeqNodeIndex");
	}

	UREDAnimNodeBlendLip_execChangeMouthSeqNodeIndex_Params ChangeMouthSeqNodeIndex_Params;
	memset(&ChangeMouthSeqNodeIndex_Params, 0, sizeof(ChangeMouthSeqNodeIndex_Params));
	memcpy_s(&ChangeMouthSeqNodeIndex_Params.Index, sizeof(ChangeMouthSeqNodeIndex_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnChangeMouthSeqNodeIndex, &ChangeMouthSeqNodeIndex_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.ChangeMouthSeqNode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36102])
// Parameter Info:
// class FName                    MouthNodeName                  (CPF_Parm)

void UREDAnimNodeBlendLip::ChangeMouthSeqNode(const class FName& MouthNodeName)
{
	static UFunction* uFnChangeMouthSeqNode = nullptr;

	if (!uFnChangeMouthSeqNode)
	{
		uFnChangeMouthSeqNode = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.ChangeMouthSeqNode");
	}

	UREDAnimNodeBlendLip_execChangeMouthSeqNode_Params ChangeMouthSeqNode_Params;
	memset(&ChangeMouthSeqNode_Params, 0, sizeof(ChangeMouthSeqNode_Params));
	memcpy_s(&ChangeMouthSeqNode_Params.MouthNodeName, sizeof(ChangeMouthSeqNode_Params.MouthNodeName), &MouthNodeName, sizeof(MouthNodeName));

	this->ProcessEvent(uFnChangeMouthSeqNode, &ChangeMouthSeqNode_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.CloseMouth
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13246])
// Parameter Info:

void UREDAnimNodeBlendLip::CloseMouth()
{
	static UFunction* uFnCloseMouth = nullptr;

	if (!uFnCloseMouth)
	{
		uFnCloseMouth = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.CloseMouth");
	}

	UREDAnimNodeBlendLip_execCloseMouth_Params CloseMouth_Params;
	memset(&CloseMouth_Params, 0, sizeof(CloseMouth_Params));

	this->ProcessEvent(uFnCloseMouth, &CloseMouth_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.OpenMouth
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13353])
// Parameter Info:
// int32_t                        Type                           (CPF_OptionalParm | CPF_Parm)

void UREDAnimNodeBlendLip::OpenMouth(int32_t Type)
{
	static UFunction* uFnOpenMouth = nullptr;

	if (!uFnOpenMouth)
	{
		uFnOpenMouth = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.OpenMouth");
	}

	UREDAnimNodeBlendLip_execOpenMouth_Params OpenMouth_Params;
	memset(&OpenMouth_Params, 0, sizeof(OpenMouth_Params));
	memcpy_s(&OpenMouth_Params.Type, sizeof(OpenMouth_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnOpenMouth, &OpenMouth_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.StopLip
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13462])
// Parameter Info:
// uint32_t                       Linear                         (CPF_OptionalParm | CPF_Parm)

void UREDAnimNodeBlendLip::StopLip(bool Linear)
{
	static UFunction* uFnStopLip = nullptr;

	if (!uFnStopLip)
	{
		uFnStopLip = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.StopLip");
	}

	UREDAnimNodeBlendLip_execStopLip_Params StopLip_Params;
	memset(&StopLip_Params, 0, sizeof(StopLip_Params));
	StopLip_Params.Linear = Linear;

	this->ProcessEvent(uFnStopLip, &StopLip_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.PlayLip
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39035])
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)
// uint32_t                       Linear                         (CPF_OptionalParm | CPF_Parm)
// float                          Speed                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        playFrame                      (CPF_OptionalParm | CPF_Parm)

void UREDAnimNodeBlendLip::PlayLip(int32_t Type, bool Linear, float Speed, int32_t playFrame)
{
	static UFunction* uFnPlayLip = nullptr;

	if (!uFnPlayLip)
	{
		uFnPlayLip = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.PlayLip");
	}

	UREDAnimNodeBlendLip_execPlayLip_Params PlayLip_Params;
	memset(&PlayLip_Params, 0, sizeof(PlayLip_Params));
	memcpy_s(&PlayLip_Params.Type, sizeof(PlayLip_Params.Type), &Type, sizeof(Type));
	PlayLip_Params.Linear = Linear;
	memcpy_s(&PlayLip_Params.Speed, sizeof(PlayLip_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&PlayLip_Params.playFrame, sizeof(PlayLip_Params.playFrame), &playFrame, sizeof(playFrame));

	this->ProcessEvent(uFnPlayLip, &PlayLip_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.ChangeMouthType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36104])
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UREDAnimNodeBlendLip::ChangeMouthType(int32_t Type)
{
	static UFunction* uFnChangeMouthType = nullptr;

	if (!uFnChangeMouthType)
	{
		uFnChangeMouthType = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.ChangeMouthType");
	}

	UREDAnimNodeBlendLip_execChangeMouthType_Params ChangeMouthType_Params;
	memset(&ChangeMouthType_Params, 0, sizeof(ChangeMouthType_Params));
	memcpy_s(&ChangeMouthType_Params.Type, sizeof(ChangeMouthType_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnChangeMouthType, &ChangeMouthType_Params, nullptr);
};

// Function REDGame.REDAnimNodeBlendLip.SetBlendTarget
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27891])
// Parameter Info:
// float                          BlendTarget                    (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UREDAnimNodeBlendLip::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static UFunction* uFnSetBlendTarget = nullptr;

	if (!uFnSetBlendTarget)
	{
		uFnSetBlendTarget = UFunction::FindFunction("Function REDGame.REDAnimNodeBlendLip.SetBlendTarget");
	}

	UREDAnimNodeBlendLip_execSetBlendTarget_Params SetBlendTarget_Params;
	memset(&SetBlendTarget_Params, 0, sizeof(SetBlendTarget_Params));
	memcpy_s(&SetBlendTarget_Params.BlendTarget, sizeof(SetBlendTarget_Params.BlendTarget), &BlendTarget, sizeof(BlendTarget));
	memcpy_s(&SetBlendTarget_Params.BlendTime, sizeof(SetBlendTarget_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	this->ProcessEvent(uFnSetBlendTarget, &SetBlendTarget_Params, nullptr);
};

// Function REDGame.REDAnimNodeScarfSystem.UpdateScarfSystem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40840])
// Parameter Info:
// uint32_t                       bStopShrink                    (CPF_Parm)

void UREDAnimNodeScarfSystem::UpdateScarfSystem(bool bStopShrink)
{
	static UFunction* uFnUpdateScarfSystem = nullptr;

	if (!uFnUpdateScarfSystem)
	{
		uFnUpdateScarfSystem = UFunction::FindFunction("Function REDGame.REDAnimNodeScarfSystem.UpdateScarfSystem");
	}

	UREDAnimNodeScarfSystem_execUpdateScarfSystem_Params UpdateScarfSystem_Params;
	memset(&UpdateScarfSystem_Params, 0, sizeof(UpdateScarfSystem_Params));
	UpdateScarfSystem_Params.bStopShrink = bStopShrink;

	this->ProcessEvent(uFnUpdateScarfSystem, &UpdateScarfSystem_Params, nullptr);
};

// Function REDGame.REDAnimNodeScarfSystem.StopScarfSystem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40104])
// Parameter Info:
// int32_t                        BlendFrame                     (CPF_Parm)

void UREDAnimNodeScarfSystem::StopScarfSystem(int32_t BlendFrame)
{
	static UFunction* uFnStopScarfSystem = nullptr;

	if (!uFnStopScarfSystem)
	{
		uFnStopScarfSystem = UFunction::FindFunction("Function REDGame.REDAnimNodeScarfSystem.StopScarfSystem");
	}

	UREDAnimNodeScarfSystem_execStopScarfSystem_Params StopScarfSystem_Params;
	memset(&StopScarfSystem_Params, 0, sizeof(StopScarfSystem_Params));
	memcpy_s(&StopScarfSystem_Params.BlendFrame, sizeof(StopScarfSystem_Params.BlendFrame), &BlendFrame, sizeof(BlendFrame));

	this->ProcessEvent(uFnStopScarfSystem, &StopScarfSystem_Params, nullptr);
};

// Function REDGame.REDAnimNodeScarfSystem.StartScarfSystem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40032])
// Parameter Info:
// int32_t                        BlendFrame                     (CPF_Parm)

void UREDAnimNodeScarfSystem::StartScarfSystem(int32_t BlendFrame)
{
	static UFunction* uFnStartScarfSystem = nullptr;

	if (!uFnStartScarfSystem)
	{
		uFnStartScarfSystem = UFunction::FindFunction("Function REDGame.REDAnimNodeScarfSystem.StartScarfSystem");
	}

	UREDAnimNodeScarfSystem_execStartScarfSystem_Params StartScarfSystem_Params;
	memset(&StartScarfSystem_Params, 0, sizeof(StartScarfSystem_Params));
	memcpy_s(&StartScarfSystem_Params.BlendFrame, sizeof(StartScarfSystem_Params.BlendFrame), &BlendFrame, sizeof(BlendFrame));

	this->ProcessEvent(uFnStartScarfSystem, &StartScarfSystem_Params, nullptr);
};

// Function REDGame.REDAnimNodeSequence.JumpCutSceneAnimeFrame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37949])
// Parameter Info:
// float                          frame                          (CPF_Parm)

void UREDAnimNodeSequence::JumpCutSceneAnimeFrame(float frame)
{
	static UFunction* uFnJumpCutSceneAnimeFrame = nullptr;

	if (!uFnJumpCutSceneAnimeFrame)
	{
		uFnJumpCutSceneAnimeFrame = UFunction::FindFunction("Function REDGame.REDAnimNodeSequence.JumpCutSceneAnimeFrame");
	}

	UREDAnimNodeSequence_execJumpCutSceneAnimeFrame_Params JumpCutSceneAnimeFrame_Params;
	memset(&JumpCutSceneAnimeFrame_Params, 0, sizeof(JumpCutSceneAnimeFrame_Params));
	memcpy_s(&JumpCutSceneAnimeFrame_Params.frame, sizeof(JumpCutSceneAnimeFrame_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnJumpCutSceneAnimeFrame, &JumpCutSceneAnimeFrame_Params, nullptr);
};

// Function REDGame.REDAnimNodeSequence.IsAnimeEnd
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13308])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDAnimNodeSequence::IsAnimeEnd()
{
	static UFunction* uFnIsAnimeEnd = nullptr;

	if (!uFnIsAnimeEnd)
	{
		uFnIsAnimeEnd = UFunction::FindFunction("Function REDGame.REDAnimNodeSequence.IsAnimeEnd");
	}

	UREDAnimNodeSequence_execIsAnimeEnd_Params IsAnimeEnd_Params;
	memset(&IsAnimeEnd_Params, 0, sizeof(IsAnimeEnd_Params));

	this->ProcessEvent(uFnIsAnimeEnd, &IsAnimeEnd_Params, nullptr);

	return IsAnimeEnd_Params.ReturnValue;
};

// Function REDGame.REDAnimNodeSequence.SetAnimeFrame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39690])
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void UREDAnimNodeSequence::SetAnimeFrame(int32_t frame)
{
	static UFunction* uFnSetAnimeFrame = nullptr;

	if (!uFnSetAnimeFrame)
	{
		uFnSetAnimeFrame = UFunction::FindFunction("Function REDGame.REDAnimNodeSequence.SetAnimeFrame");
	}

	UREDAnimNodeSequence_execSetAnimeFrame_Params SetAnimeFrame_Params;
	memset(&SetAnimeFrame_Params, 0, sizeof(SetAnimeFrame_Params));
	memcpy_s(&SetAnimeFrame_Params.frame, sizeof(SetAnimeFrame_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetAnimeFrame, &SetAnimeFrame_Params, nullptr);
};

// Function REDGame.REDAnimNodeSequence.StepAnime
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40090])
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void UREDAnimNodeSequence::StepAnime(int32_t frame)
{
	static UFunction* uFnStepAnime = nullptr;

	if (!uFnStepAnime)
	{
		uFnStepAnime = UFunction::FindFunction("Function REDGame.REDAnimNodeSequence.StepAnime");
	}

	UREDAnimNodeSequence_execStepAnime_Params StepAnime_Params;
	memset(&StepAnime_Params, 0, sizeof(StepAnime_Params));
	memcpy_s(&StepAnime_Params.frame, sizeof(StepAnime_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnStepAnime, &StepAnime_Params, nullptr);
};

// Function REDGame.REDAnimNodeSequence.SetAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[27871])
// Parameter Info:
// class FName                    Sequence                       (CPF_Parm)

void UREDAnimNodeSequence::SetAnim(const class FName& Sequence)
{
	static UFunction* uFnSetAnim = nullptr;

	if (!uFnSetAnim)
	{
		uFnSetAnim = UFunction::FindFunction("Function REDGame.REDAnimNodeSequence.SetAnim");
	}

	UREDAnimNodeSequence_execSetAnim_Params SetAnim_Params;
	memset(&SetAnim_Params, 0, sizeof(SetAnim_Params));
	memcpy_s(&SetAnim_Params.Sequence, sizeof(SetAnim_Params.Sequence), &Sequence, sizeof(Sequence));

	this->ProcessEvent(uFnSetAnim, &SetAnim_Params, nullptr);
};

// Function REDGame.REDAnimTree.ZeroScale
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[41039])
// Parameter Info:

void UREDAnimTree::ZeroScale()
{
	static UFunction* uFnZeroScale = nullptr;

	if (!uFnZeroScale)
	{
		uFnZeroScale = UFunction::FindFunction("Function REDGame.REDAnimTree.ZeroScale");
	}

	UREDAnimTree_execZeroScale_Params ZeroScale_Params;
	memset(&ZeroScale_Params, 0, sizeof(ZeroScale_Params));

	this->ProcessEvent(uFnZeroScale, &ZeroScale_Params, nullptr);
};

// Function REDGame.REDAnimTree.ResetScaleController
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39388])
// Parameter Info:

void UREDAnimTree::ResetScaleController()
{
	static UFunction* uFnResetScaleController = nullptr;

	if (!uFnResetScaleController)
	{
		uFnResetScaleController = UFunction::FindFunction("Function REDGame.REDAnimTree.ResetScaleController");
	}

	UREDAnimTree_execResetScaleController_Params ResetScaleController_Params;
	memset(&ResetScaleController_Params, 0, sizeof(ResetScaleController_Params));

	this->ProcessEvent(uFnResetScaleController, &ResetScaleController_Params, nullptr);
};

// Function REDGame.REDAnywhereDisp.StopNewChallenger
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDAnywhereDisp::eventStopNewChallenger()
{
	static UFunction* uFnStopNewChallenger = nullptr;

	if (!uFnStopNewChallenger)
	{
		uFnStopNewChallenger = UFunction::FindFunction("Function REDGame.REDAnywhereDisp.StopNewChallenger");
	}

	UREDAnywhereDisp_eventStopNewChallenger_Params StopNewChallenger_Params;
	memset(&StopNewChallenger_Params, 0, sizeof(StopNewChallenger_Params));

	this->ProcessEvent(uFnStopNewChallenger, &StopNewChallenger_Params, nullptr);
};

// Function REDGame.REDAnywhereDisp.PlayNewChallenger
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDAnywhereDisp::eventPlayNewChallenger()
{
	static UFunction* uFnPlayNewChallenger = nullptr;

	if (!uFnPlayNewChallenger)
	{
		uFnPlayNewChallenger = UFunction::FindFunction("Function REDGame.REDAnywhereDisp.PlayNewChallenger");
	}

	UREDAnywhereDisp_eventPlayNewChallenger_Params PlayNewChallenger_Params;
	memset(&PlayNewChallenger_Params, 0, sizeof(PlayNewChallenger_Params));

	this->ProcessEvent(uFnPlayNewChallenger, &PlayNewChallenger_Params, nullptr);
};

// Function REDGame.REDAnywhereDisp.Initialize
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDAnywhereDisp::eventInitialize()
{
	static UFunction* uFnInitialize = nullptr;

	if (!uFnInitialize)
	{
		uFnInitialize = UFunction::FindFunction("Function REDGame.REDAnywhereDisp.Initialize");
	}

	UREDAnywhereDisp_eventInitialize_Params Initialize_Params;
	memset(&Initialize_Params, 0, sizeof(Initialize_Params));

	this->ProcessEvent(uFnInitialize, &Initialize_Params, nullptr);
};

// Function REDGame.REDAnywhereDisp.UpdateFreeTrialInfomation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40678])
// Parameter Info:

void UREDAnywhereDisp::UpdateFreeTrialInfomation()
{
	static UFunction* uFnUpdateFreeTrialInfomation = nullptr;

	if (!uFnUpdateFreeTrialInfomation)
	{
		uFnUpdateFreeTrialInfomation = UFunction::FindFunction("Function REDGame.REDAnywhereDisp.UpdateFreeTrialInfomation");
	}

	UREDAnywhereDisp_execUpdateFreeTrialInfomation_Params UpdateFreeTrialInfomation_Params;
	memset(&UpdateFreeTrialInfomation_Params, 0, sizeof(UpdateFreeTrialInfomation_Params));

	this->ProcessEvent(uFnUpdateFreeTrialInfomation, &UpdateFreeTrialInfomation_Params, nullptr);
};

// Function REDGame.REDAnywhereDisp.UpdateNewChallengerDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40794])
// Parameter Info:

void UREDAnywhereDisp::UpdateNewChallengerDraw()
{
	static UFunction* uFnUpdateNewChallengerDraw = nullptr;

	if (!uFnUpdateNewChallengerDraw)
	{
		uFnUpdateNewChallengerDraw = UFunction::FindFunction("Function REDGame.REDAnywhereDisp.UpdateNewChallengerDraw");
	}

	UREDAnywhereDisp_execUpdateNewChallengerDraw_Params UpdateNewChallengerDraw_Params;
	memset(&UpdateNewChallengerDraw_Params, 0, sizeof(UpdateNewChallengerDraw_Params));

	this->ProcessEvent(uFnUpdateNewChallengerDraw, &UpdateNewChallengerDraw_Params, nullptr);
};

// Function REDGame.REDAnywhereDisp.IsNewChallengerDrawEnd
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37746])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDAnywhereDisp::IsNewChallengerDrawEnd()
{
	static UFunction* uFnIsNewChallengerDrawEnd = nullptr;

	if (!uFnIsNewChallengerDrawEnd)
	{
		uFnIsNewChallengerDrawEnd = UFunction::FindFunction("Function REDGame.REDAnywhereDisp.IsNewChallengerDrawEnd");
	}

	UREDAnywhereDisp_execIsNewChallengerDrawEnd_Params IsNewChallengerDrawEnd_Params;
	memset(&IsNewChallengerDrawEnd_Params, 0, sizeof(IsNewChallengerDrawEnd_Params));

	this->ProcessEvent(uFnIsNewChallengerDrawEnd, &IsNewChallengerDrawEnd_Params, nullptr);

	return IsNewChallengerDrawEnd_Params.ReturnValue;
};

// Function REDGame.REDAnywhereDisp.RequestNewChallengerDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39370])
// Parameter Info:

void UREDAnywhereDisp::RequestNewChallengerDraw()
{
	static UFunction* uFnRequestNewChallengerDraw = nullptr;

	if (!uFnRequestNewChallengerDraw)
	{
		uFnRequestNewChallengerDraw = UFunction::FindFunction("Function REDGame.REDAnywhereDisp.RequestNewChallengerDraw");
	}

	UREDAnywhereDisp_execRequestNewChallengerDraw_Params RequestNewChallengerDraw_Params;
	memset(&RequestNewChallengerDraw_Params, 0, sizeof(RequestNewChallengerDraw_Params));

	this->ProcessEvent(uFnRequestNewChallengerDraw, &RequestNewChallengerDraw_Params, nullptr);
};

// Function REDGame.REDAnywhereDisp.Update
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13049])
// Parameter Info:

void UREDAnywhereDisp::Update()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDAnywhereDisp.Update");
	}

	UREDAnywhereDisp_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDArcadeScript.TebureCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       On                             (CPF_Parm)
// float                          Mag                            (CPF_Parm)

void UREDArcadeScript::eventTebureCamera(bool On, float Mag)
{
	static UFunction* uFnTebureCamera = nullptr;

	if (!uFnTebureCamera)
	{
		uFnTebureCamera = UFunction::FindFunction("Function REDGame.REDArcadeScript.TebureCamera");
	}

	UREDArcadeScript_eventTebureCamera_Params TebureCamera_Params;
	memset(&TebureCamera_Params, 0, sizeof(TebureCamera_Params));
	TebureCamera_Params.On = On;
	memcpy_s(&TebureCamera_Params.Mag, sizeof(TebureCamera_Params.Mag), &Mag, sizeof(Mag));

	this->ProcessEvent(uFnTebureCamera, &TebureCamera_Params, nullptr);
};

// Function REDGame.REDArcadeScript.ShakeCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)
// uint32_t                       isFadeout                      (CPF_Parm)

void UREDArcadeScript::eventShakeCamera(float X, float Y, int32_t frame, bool isFadeout)
{
	static UFunction* uFnShakeCamera = nullptr;

	if (!uFnShakeCamera)
	{
		uFnShakeCamera = UFunction::FindFunction("Function REDGame.REDArcadeScript.ShakeCamera");
	}

	UREDArcadeScript_eventShakeCamera_Params ShakeCamera_Params;
	memset(&ShakeCamera_Params, 0, sizeof(ShakeCamera_Params));
	memcpy_s(&ShakeCamera_Params.X, sizeof(ShakeCamera_Params.X), &X, sizeof(X));
	memcpy_s(&ShakeCamera_Params.Y, sizeof(ShakeCamera_Params.Y), &Y, sizeof(Y));
	memcpy_s(&ShakeCamera_Params.frame, sizeof(ShakeCamera_Params.frame), &frame, sizeof(frame));
	ShakeCamera_Params.isFadeout = isFadeout;

	this->ProcessEvent(uFnShakeCamera, &ShakeCamera_Params, nullptr);
};

// Function REDGame.REDArcadeScript.FOVCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Start                          (CPF_Parm)
// float                          End                            (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDArcadeScript::eventFOVCamera(float Start, float End, int32_t frame)
{
	static UFunction* uFnFOVCamera = nullptr;

	if (!uFnFOVCamera)
	{
		uFnFOVCamera = UFunction::FindFunction("Function REDGame.REDArcadeScript.FOVCamera");
	}

	UREDArcadeScript_eventFOVCamera_Params FOVCamera_Params;
	memset(&FOVCamera_Params, 0, sizeof(FOVCamera_Params));
	memcpy_s(&FOVCamera_Params.Start, sizeof(FOVCamera_Params.Start), &Start, sizeof(Start));
	memcpy_s(&FOVCamera_Params.End, sizeof(FOVCamera_Params.End), &End, sizeof(End));
	memcpy_s(&FOVCamera_Params.frame, sizeof(FOVCamera_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnFOVCamera, &FOVCamera_Params, nullptr);
};

// Function REDGame.REDArcadeScript.MoveCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Start                          (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDArcadeScript::eventMoveCamera(const struct FVector& Start, const struct FVector& End, int32_t frame)
{
	static UFunction* uFnMoveCamera = nullptr;

	if (!uFnMoveCamera)
	{
		uFnMoveCamera = UFunction::FindFunction("Function REDGame.REDArcadeScript.MoveCamera");
	}

	UREDArcadeScript_eventMoveCamera_Params MoveCamera_Params;
	memset(&MoveCamera_Params, 0, sizeof(MoveCamera_Params));
	memcpy_s(&MoveCamera_Params.Start, sizeof(MoveCamera_Params.Start), &Start, sizeof(Start));
	memcpy_s(&MoveCamera_Params.End, sizeof(MoveCamera_Params.End), &End, sizeof(End));
	memcpy_s(&MoveCamera_Params.frame, sizeof(MoveCamera_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnMoveCamera, &MoveCamera_Params, nullptr);
};

// Function REDGame.REDArcadeScript.RotateCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                Start                          (CPF_Parm)
// struct FRotator                End                            (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDArcadeScript::eventRotateCamera(const struct FRotator& Start, const struct FRotator& End, int32_t frame)
{
	static UFunction* uFnRotateCamera = nullptr;

	if (!uFnRotateCamera)
	{
		uFnRotateCamera = UFunction::FindFunction("Function REDGame.REDArcadeScript.RotateCamera");
	}

	UREDArcadeScript_eventRotateCamera_Params RotateCamera_Params;
	memset(&RotateCamera_Params, 0, sizeof(RotateCamera_Params));
	memcpy_s(&RotateCamera_Params.Start, sizeof(RotateCamera_Params.Start), &Start, sizeof(Start));
	memcpy_s(&RotateCamera_Params.End, sizeof(RotateCamera_Params.End), &End, sizeof(End));
	memcpy_s(&RotateCamera_Params.frame, sizeof(RotateCamera_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnRotateCamera, &RotateCamera_Params, nullptr);
};

// Function REDGame.REDArcadeScript.PresetCamera
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Type                           (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)
// struct FVector                 Loc                            (CPF_Parm)
// uint32_t                       isReverse                      (CPF_Parm)

void UREDArcadeScript::eventPresetCamera(const class FString& CharaID, int32_t Type, int32_t frame, const struct FVector& Loc, bool isReverse)
{
	static UFunction* uFnPresetCamera = nullptr;

	if (!uFnPresetCamera)
	{
		uFnPresetCamera = UFunction::FindFunction("Function REDGame.REDArcadeScript.PresetCamera");
	}

	UREDArcadeScript_eventPresetCamera_Params PresetCamera_Params;
	memset(&PresetCamera_Params, 0, sizeof(PresetCamera_Params));
	memcpy_s(&PresetCamera_Params.CharaID, sizeof(PresetCamera_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&PresetCamera_Params.Type, sizeof(PresetCamera_Params.Type), &Type, sizeof(Type));
	memcpy_s(&PresetCamera_Params.frame, sizeof(PresetCamera_Params.frame), &frame, sizeof(frame));
	memcpy_s(&PresetCamera_Params.Loc, sizeof(PresetCamera_Params.Loc), &Loc, sizeof(Loc));
	PresetCamera_Params.isReverse = isReverse;

	this->ProcessEvent(uFnPresetCamera, &PresetCamera_Params, nullptr);
};

// Function REDGame.REDArcadeScript.ResetCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDArcadeScript::eventResetCamera()
{
	static UFunction* uFnResetCamera = nullptr;

	if (!uFnResetCamera)
	{
		uFnResetCamera = UFunction::FindFunction("Function REDGame.REDArcadeScript.ResetCamera");
	}

	UREDArcadeScript_eventResetCamera_Params ResetCamera_Params;
	memset(&ResetCamera_Params, 0, sizeof(ResetCamera_Params));

	this->ProcessEvent(uFnResetCamera, &ResetCamera_Params, nullptr);
};

// Function REDGame.REDArcadeScript.Update
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDArcadeScript::eventUpdate()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDArcadeScript.Update");
	}

	UREDArcadeScript_eventUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDArcadeScript.IsSoundPlaying
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class USoundCue*               Cue                            (CPF_Parm)

bool UREDArcadeScript::eventIsSoundPlaying(class USoundCue* Cue)
{
	static UFunction* uFnIsSoundPlaying = nullptr;

	if (!uFnIsSoundPlaying)
	{
		uFnIsSoundPlaying = UFunction::FindFunction("Function REDGame.REDArcadeScript.IsSoundPlaying");
	}

	UREDArcadeScript_eventIsSoundPlaying_Params IsSoundPlaying_Params;
	memset(&IsSoundPlaying_Params, 0, sizeof(IsSoundPlaying_Params));
	IsSoundPlaying_Params.Cue = Cue;

	this->ProcessEvent(uFnIsSoundPlaying, &IsSoundPlaying_Params, nullptr);

	return IsSoundPlaying_Params.ReturnValue;
};

// Function REDGame.REDArcadeScript.StopSound
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDArcadeScript::eventStopSound()
{
	static UFunction* uFnStopSound = nullptr;

	if (!uFnStopSound)
	{
		uFnStopSound = UFunction::FindFunction("Function REDGame.REDArcadeScript.StopSound");
	}

	UREDArcadeScript_eventStopSound_Params StopSound_Params;
	memset(&StopSound_Params, 0, sizeof(StopSound_Params));

	this->ProcessEvent(uFnStopSound, &StopSound_Params, nullptr);
};

// Function REDGame.REDArcadeScript.PlaySound
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USoundCue*               Cue                            (CPF_Parm)

void UREDArcadeScript::eventPlaySound(class USoundCue* Cue)
{
	static UFunction* uFnPlaySound = nullptr;

	if (!uFnPlaySound)
	{
		uFnPlaySound = UFunction::FindFunction("Function REDGame.REDArcadeScript.PlaySound");
	}

	UREDArcadeScript_eventPlaySound_Params PlaySound_Params;
	memset(&PlaySound_Params, 0, sizeof(PlaySound_Params));
	PlaySound_Params.Cue = Cue;

	this->ProcessEvent(uFnPlaySound, &PlaySound_Params, nullptr);
};

// Function REDGame.REDArcadeScript.SetVolumeBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Id                             (CPF_Parm | CPF_NeedCtorLink)
// float                          Time                           (CPF_Parm)
// float                          Vol                            (CPF_Parm)

void UREDArcadeScript::eventSetVolumeBGM(const class FString& Id, float Time, float Vol)
{
	static UFunction* uFnSetVolumeBGM = nullptr;

	if (!uFnSetVolumeBGM)
	{
		uFnSetVolumeBGM = UFunction::FindFunction("Function REDGame.REDArcadeScript.SetVolumeBGM");
	}

	UREDArcadeScript_eventSetVolumeBGM_Params SetVolumeBGM_Params;
	memset(&SetVolumeBGM_Params, 0, sizeof(SetVolumeBGM_Params));
	memcpy_s(&SetVolumeBGM_Params.Id, sizeof(SetVolumeBGM_Params.Id), &Id, sizeof(Id));
	memcpy_s(&SetVolumeBGM_Params.Time, sizeof(SetVolumeBGM_Params.Time), &Time, sizeof(Time));
	memcpy_s(&SetVolumeBGM_Params.Vol, sizeof(SetVolumeBGM_Params.Vol), &Vol, sizeof(Vol));

	this->ProcessEvent(uFnSetVolumeBGM, &SetVolumeBGM_Params, nullptr);
};

// Function REDGame.REDArcadeScript.FadeOutBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Id                             (CPF_Parm | CPF_NeedCtorLink)
// float                          Time                           (CPF_Parm)

void UREDArcadeScript::eventFadeOutBGM(const class FString& Id, float Time)
{
	static UFunction* uFnFadeOutBGM = nullptr;

	if (!uFnFadeOutBGM)
	{
		uFnFadeOutBGM = UFunction::FindFunction("Function REDGame.REDArcadeScript.FadeOutBGM");
	}

	UREDArcadeScript_eventFadeOutBGM_Params FadeOutBGM_Params;
	memset(&FadeOutBGM_Params, 0, sizeof(FadeOutBGM_Params));
	memcpy_s(&FadeOutBGM_Params.Id, sizeof(FadeOutBGM_Params.Id), &Id, sizeof(Id));
	memcpy_s(&FadeOutBGM_Params.Time, sizeof(FadeOutBGM_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnFadeOutBGM, &FadeOutBGM_Params, nullptr);
};

// Function REDGame.REDArcadeScript.FadeInBGM
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  Id                             (CPF_Parm | CPF_NeedCtorLink)
// class USoundCue*               Cue                            (CPF_Parm)
// float                          Time                           (CPF_Parm)

void UREDArcadeScript::eventFadeInBGM(const class FString& Id, class USoundCue* Cue, float Time)
{
	static UFunction* uFnFadeInBGM = nullptr;

	if (!uFnFadeInBGM)
	{
		uFnFadeInBGM = UFunction::FindFunction("Function REDGame.REDArcadeScript.FadeInBGM");
	}

	UREDArcadeScript_eventFadeInBGM_Params FadeInBGM_Params;
	memset(&FadeInBGM_Params, 0, sizeof(FadeInBGM_Params));
	memcpy_s(&FadeInBGM_Params.Id, sizeof(FadeInBGM_Params.Id), &Id, sizeof(Id));
	FadeInBGM_Params.Cue = Cue;
	memcpy_s(&FadeInBGM_Params.Time, sizeof(FadeInBGM_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnFadeInBGM, &FadeInBGM_Params, nullptr);
};

// Function REDGame.REDArcadeScript.GetLipSyncData
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDAssetLipSync*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  VoicePackageName               (CPF_Parm | CPF_NeedCtorLink)
// class FString                  TextID                         (CPF_Parm | CPF_NeedCtorLink)

class UREDAssetLipSync* UREDArcadeScript::eventGetLipSyncData(const class FString& VoicePackageName, const class FString& TextID)
{
	static UFunction* uFnGetLipSyncData = nullptr;

	if (!uFnGetLipSyncData)
	{
		uFnGetLipSyncData = UFunction::FindFunction("Function REDGame.REDArcadeScript.GetLipSyncData");
	}

	UREDArcadeScript_eventGetLipSyncData_Params GetLipSyncData_Params;
	memset(&GetLipSyncData_Params, 0, sizeof(GetLipSyncData_Params));
	memcpy_s(&GetLipSyncData_Params.VoicePackageName, sizeof(GetLipSyncData_Params.VoicePackageName), &VoicePackageName, sizeof(VoicePackageName));
	memcpy_s(&GetLipSyncData_Params.TextID, sizeof(GetLipSyncData_Params.TextID), &TextID, sizeof(TextID));

	this->ProcessEvent(uFnGetLipSyncData, &GetLipSyncData_Params, nullptr);

	return GetLipSyncData_Params.ReturnValue;
};

// Function REDGame.REDArcadeScript.GetCharScriptData
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDAssetEventScript*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

class UREDAssetEventScript* UREDArcadeScript::eventGetCharScriptData(const class FString& CharaID)
{
	static UFunction* uFnGetCharScriptData = nullptr;

	if (!uFnGetCharScriptData)
	{
		uFnGetCharScriptData = UFunction::FindFunction("Function REDGame.REDArcadeScript.GetCharScriptData");
	}

	UREDArcadeScript_eventGetCharScriptData_Params GetCharScriptData_Params;
	memset(&GetCharScriptData_Params, 0, sizeof(GetCharScriptData_Params));
	memcpy_s(&GetCharScriptData_Params.CharaID, sizeof(GetCharScriptData_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetCharScriptData, &GetCharScriptData_Params, nullptr);

	return GetCharScriptData_Params.ReturnValue;
};

// Function REDGame.REDArcadeScript.LoadEventPackage
// [0x00420800] (FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bBlock                         (CPF_Parm)
// class FString                  PackageName                    (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDArcadeScript::eventLoadEventPackage(bool bBlock, class FString& PackageName)
{
	static UFunction* uFnLoadEventPackage = nullptr;

	if (!uFnLoadEventPackage)
	{
		uFnLoadEventPackage = UFunction::FindFunction("Function REDGame.REDArcadeScript.LoadEventPackage");
	}

	UREDArcadeScript_eventLoadEventPackage_Params LoadEventPackage_Params;
	memset(&LoadEventPackage_Params, 0, sizeof(LoadEventPackage_Params));
	LoadEventPackage_Params.bBlock = bBlock;
	memcpy_s(&LoadEventPackage_Params.PackageName, sizeof(LoadEventPackage_Params.PackageName), &PackageName, sizeof(PackageName));

	this->ProcessEvent(uFnLoadEventPackage, &LoadEventPackage_Params, nullptr);

	memcpy_s(&PackageName, sizeof(PackageName), &LoadEventPackage_Params.PackageName, sizeof(LoadEventPackage_Params.PackageName));
};

// Function REDGame.REDArcadeScript.DestroyPawn
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                Pawn                           (CPF_Parm)

void UREDArcadeScript::eventDestroyPawn(class AREDPawn* Pawn)
{
	static UFunction* uFnDestroyPawn = nullptr;

	if (!uFnDestroyPawn)
	{
		uFnDestroyPawn = UFunction::FindFunction("Function REDGame.REDArcadeScript.DestroyPawn");
	}

	UREDArcadeScript_eventDestroyPawn_Params DestroyPawn_Params;
	memset(&DestroyPawn_Params, 0, sizeof(DestroyPawn_Params));
	DestroyPawn_Params.Pawn = Pawn;

	this->ProcessEvent(uFnDestroyPawn, &DestroyPawn_Params, nullptr);
};

// Function REDGame.REDArcadeScript.SpawnPlayer
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

class AREDPawn* UREDArcadeScript::eventSpawnPlayer(const class FString& CharaID)
{
	static UFunction* uFnSpawnPlayer = nullptr;

	if (!uFnSpawnPlayer)
	{
		uFnSpawnPlayer = UFunction::FindFunction("Function REDGame.REDArcadeScript.SpawnPlayer");
	}

	UREDArcadeScript_eventSpawnPlayer_Params SpawnPlayer_Params;
	memset(&SpawnPlayer_Params, 0, sizeof(SpawnPlayer_Params));
	memcpy_s(&SpawnPlayer_Params.CharaID, sizeof(SpawnPlayer_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSpawnPlayer, &SpawnPlayer_Params, nullptr);

	return SpawnPlayer_Params.ReturnValue;
};

// Function REDGame.REDArcadeScript.LoadCharaPackages
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bBlock                         (CPF_Parm)
// class TArray<class FString>    packageNames                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDArcadeScript::LoadCharaPackages(bool bBlock, class TArray<class FString>& packageNames)
{
	static UFunction* uFnLoadCharaPackages = nullptr;

	if (!uFnLoadCharaPackages)
	{
		uFnLoadCharaPackages = UFunction::FindFunction("Function REDGame.REDArcadeScript.LoadCharaPackages");
	}

	UREDArcadeScript_execLoadCharaPackages_Params LoadCharaPackages_Params;
	memset(&LoadCharaPackages_Params, 0, sizeof(LoadCharaPackages_Params));
	LoadCharaPackages_Params.bBlock = bBlock;
	memcpy_s(&LoadCharaPackages_Params.packageNames, sizeof(LoadCharaPackages_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnLoadCharaPackages, &LoadCharaPackages_Params, nullptr);

	memcpy_s(&packageNames, sizeof(packageNames), &LoadCharaPackages_Params.packageNames, sizeof(LoadCharaPackages_Params.packageNames));
};

// Function REDGame.REDArcadeScript.GetCharaPackageNames
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDArcadeScript::GetCharaPackageNames(struct FSpawnPlayerInfo& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetCharaPackageNames = nullptr;

	if (!uFnGetCharaPackageNames)
	{
		uFnGetCharaPackageNames = UFunction::FindFunction("Function REDGame.REDArcadeScript.GetCharaPackageNames");
	}

	UREDArcadeScript_execGetCharaPackageNames_Params GetCharaPackageNames_Params;
	memset(&GetCharaPackageNames_Params, 0, sizeof(GetCharaPackageNames_Params));
	memcpy_s(&GetCharaPackageNames_Params.Info, sizeof(GetCharaPackageNames_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetCharaPackageNames_Params.packageNames, sizeof(GetCharaPackageNames_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnGetCharaPackageNames, &GetCharaPackageNames_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetCharaPackageNames_Params.Info, sizeof(GetCharaPackageNames_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetCharaPackageNames_Params.packageNames, sizeof(GetCharaPackageNames_Params.packageNames));
};

// Function REDGame.REDArcadeScript.LoadChara
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDArcadeScript::eventLoadChara(const class FString& CharaID)
{
	static UFunction* uFnLoadChara = nullptr;

	if (!uFnLoadChara)
	{
		uFnLoadChara = UFunction::FindFunction("Function REDGame.REDArcadeScript.LoadChara");
	}

	UREDArcadeScript_eventLoadChara_Params LoadChara_Params;
	memset(&LoadChara_Params, 0, sizeof(LoadChara_Params));
	memcpy_s(&LoadChara_Params.CharaID, sizeof(LoadChara_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnLoadChara, &LoadChara_Params, nullptr);
};

// Function REDGame.REDAsyncLoadPackageManager.IsLoadComplete
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDAsyncLoadPackageManager::eventIsLoadComplete()
{
	static UFunction* uFnIsLoadComplete = nullptr;

	if (!uFnIsLoadComplete)
	{
		uFnIsLoadComplete = UFunction::FindFunction("Function REDGame.REDAsyncLoadPackageManager.IsLoadComplete");
	}

	UREDAsyncLoadPackageManager_eventIsLoadComplete_Params IsLoadComplete_Params;
	memset(&IsLoadComplete_Params, 0, sizeof(IsLoadComplete_Params));

	this->ProcessEvent(uFnIsLoadComplete, &IsLoadComplete_Params, nullptr);

	return IsLoadComplete_Params.ReturnValue;
};

// Function REDGame.REDAsyncLoadPackageManager.LoadPackage
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isBlock                        (CPF_Parm)
// class FString                  PackageName                    (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDAsyncLoadPackageManager::eventLoadPackage(bool isBlock, class FString& PackageName)
{
	static UFunction* uFnLoadPackage = nullptr;

	if (!uFnLoadPackage)
	{
		uFnLoadPackage = UFunction::FindFunction("Function REDGame.REDAsyncLoadPackageManager.LoadPackage");
	}

	UREDAsyncLoadPackageManager_eventLoadPackage_Params LoadPackage_Params;
	memset(&LoadPackage_Params, 0, sizeof(LoadPackage_Params));
	LoadPackage_Params.isBlock = isBlock;
	memcpy_s(&LoadPackage_Params.PackageName, sizeof(LoadPackage_Params.PackageName), &PackageName, sizeof(PackageName));

	this->ProcessEvent(uFnLoadPackage, &LoadPackage_Params, nullptr);

	memcpy_s(&PackageName, sizeof(PackageName), &LoadPackage_Params.PackageName, sizeof(LoadPackage_Params.PackageName));
};

// Function REDGame.REDAsyncLoadPackageManager.LoadPackages
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isBlock                        (CPF_Parm)
// class TArray<class FString>    packageNames                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDAsyncLoadPackageManager::eventLoadPackages(bool isBlock, class TArray<class FString>& packageNames)
{
	static UFunction* uFnLoadPackages = nullptr;

	if (!uFnLoadPackages)
	{
		uFnLoadPackages = UFunction::FindFunction("Function REDGame.REDAsyncLoadPackageManager.LoadPackages");
	}

	UREDAsyncLoadPackageManager_eventLoadPackages_Params LoadPackages_Params;
	memset(&LoadPackages_Params, 0, sizeof(LoadPackages_Params));
	LoadPackages_Params.isBlock = isBlock;
	memcpy_s(&LoadPackages_Params.packageNames, sizeof(LoadPackages_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnLoadPackages, &LoadPackages_Params, nullptr);

	memcpy_s(&packageNames, sizeof(packageNames), &LoadPackages_Params.packageNames, sizeof(LoadPackages_Params.packageNames));
};

// Function REDGame.REDBGMaterialController.Update
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13049])
// Parameter Info:

void UREDBGMaterialController::Update()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDBGMaterialController.Update");
	}

	UREDBGMaterialController_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDBGMaterialController.SetBrightness
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39701])
// Parameter Info:
// float                          Brightness                     (CPF_Parm)

void UREDBGMaterialController::SetBrightness(float Brightness)
{
	static UFunction* uFnSetBrightness = nullptr;

	if (!uFnSetBrightness)
	{
		uFnSetBrightness = UFunction::FindFunction("Function REDGame.REDBGMaterialController.SetBrightness");
	}

	UREDBGMaterialController_execSetBrightness_Params SetBrightness_Params;
	memset(&SetBrightness_Params, 0, sizeof(SetBrightness_Params));
	memcpy_s(&SetBrightness_Params.Brightness, sizeof(SetBrightness_Params.Brightness), &Brightness, sizeof(Brightness));

	this->ProcessEvent(uFnSetBrightness, &SetBrightness_Params, nullptr);
};

// Function REDGame.REDBGMaterialController.FadeOut
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13267])
// Parameter Info:
// float                          Brightness                     (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDBGMaterialController::FadeOut(float Brightness, int32_t frame)
{
	static UFunction* uFnFadeOut = nullptr;

	if (!uFnFadeOut)
	{
		uFnFadeOut = UFunction::FindFunction("Function REDGame.REDBGMaterialController.FadeOut");
	}

	UREDBGMaterialController_execFadeOut_Params FadeOut_Params;
	memset(&FadeOut_Params, 0, sizeof(FadeOut_Params));
	memcpy_s(&FadeOut_Params.Brightness, sizeof(FadeOut_Params.Brightness), &Brightness, sizeof(Brightness));
	memcpy_s(&FadeOut_Params.frame, sizeof(FadeOut_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnFadeOut, &FadeOut_Params, nullptr);
};

// Function REDGame.REDBGMaterialController.FadeIn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13265])
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void UREDBGMaterialController::FadeIn(int32_t frame)
{
	static UFunction* uFnFadeIn = nullptr;

	if (!uFnFadeIn)
	{
		uFnFadeIn = UFunction::FindFunction("Function REDGame.REDBGMaterialController.FadeIn");
	}

	UREDBGMaterialController_execFadeIn_Params FadeIn_Params;
	memset(&FadeIn_Params, 0, sizeof(FadeIn_Params));
	memcpy_s(&FadeIn_Params.frame, sizeof(FadeIn_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnFadeIn, &FadeIn_Params, nullptr);
};

// Function REDGame.REDBGMaterialController.Initialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13305])
// Parameter Info:

void UREDBGMaterialController::Initialize()
{
	static UFunction* uFnInitialize = nullptr;

	if (!uFnInitialize)
	{
		uFnInitialize = UFunction::FindFunction("Function REDGame.REDBGMaterialController.Initialize");
	}

	UREDBGMaterialController_execInitialize_Params Initialize_Params;
	memset(&Initialize_Params, 0, sizeof(Initialize_Params));

	this->ProcessEvent(uFnInitialize, &Initialize_Params, nullptr);
};

// Function REDGame.REDCamera_Adv.UpdateViewTarget
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Adv::UpdateViewTarget(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateViewTarget = nullptr;

	if (!uFnUpdateViewTarget)
	{
		uFnUpdateViewTarget = UFunction::FindFunction("Function REDGame.REDCamera_Adv.UpdateViewTarget");
	}

	AREDCamera_Adv_execUpdateViewTarget_Params UpdateViewTarget_Params;
	memset(&UpdateViewTarget_Params, 0, sizeof(UpdateViewTarget_Params));
	memcpy_s(&UpdateViewTarget_Params.DeltaTime, sizeof(UpdateViewTarget_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateViewTarget, &UpdateViewTarget_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT));
};

// Function REDGame.REDCamera_Adv.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDCamera_Adv::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDCamera_Adv.DisplayDebug");
	}

	AREDCamera_Adv_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDCamera_Adv.UpdatePawnCameraParam
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40804])
// Parameter Info:
// struct FTPOV                   POV                            (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDCamera_Adv::UpdatePawnCameraParam(struct FTPOV& POV)
{
	static UFunction* uFnUpdatePawnCameraParam = nullptr;

	if (!uFnUpdatePawnCameraParam)
	{
		uFnUpdatePawnCameraParam = UFunction::FindFunction("Function REDGame.REDCamera_Adv.UpdatePawnCameraParam");
	}

	AREDCamera_Adv_execUpdatePawnCameraParam_Params UpdatePawnCameraParam_Params;
	memset(&UpdatePawnCameraParam_Params, 0, sizeof(UpdatePawnCameraParam_Params));
	memcpy_s(&UpdatePawnCameraParam_Params.POV, sizeof(UpdatePawnCameraParam_Params.POV), &POV, sizeof(POV));

	this->ProcessEvent(uFnUpdatePawnCameraParam, &UpdatePawnCameraParam_Params, nullptr);

	memcpy_s(&POV, sizeof(POV), &UpdatePawnCameraParam_Params.POV, sizeof(UpdatePawnCameraParam_Params.POV));
};

// Function REDGame.REDCamera_Adv.UpdatePawnMaterialInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40807])
// Parameter Info:

void AREDCamera_Adv::UpdatePawnMaterialInstance()
{
	static UFunction* uFnUpdatePawnMaterialInstance = nullptr;

	if (!uFnUpdatePawnMaterialInstance)
	{
		uFnUpdatePawnMaterialInstance = UFunction::FindFunction("Function REDGame.REDCamera_Adv.UpdatePawnMaterialInstance");
	}

	AREDCamera_Adv_execUpdatePawnMaterialInstance_Params UpdatePawnMaterialInstance_Params;
	memset(&UpdatePawnMaterialInstance_Params, 0, sizeof(UpdatePawnMaterialInstance_Params));

	this->ProcessEvent(uFnUpdatePawnMaterialInstance, &UpdatePawnMaterialInstance_Params, nullptr);
};

// Function REDGame.REDCamera_Adv.UpdateCameraAnimLight
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40611])
// Parameter Info:

void AREDCamera_Adv::UpdateCameraAnimLight()
{
	static UFunction* uFnUpdateCameraAnimLight = nullptr;

	if (!uFnUpdateCameraAnimLight)
	{
		uFnUpdateCameraAnimLight = UFunction::FindFunction("Function REDGame.REDCamera_Adv.UpdateCameraAnimLight");
	}

	AREDCamera_Adv_execUpdateCameraAnimLight_Params UpdateCameraAnimLight_Params;
	memset(&UpdateCameraAnimLight_Params, 0, sizeof(UpdateCameraAnimLight_Params));

	this->ProcessEvent(uFnUpdateCameraAnimLight, &UpdateCameraAnimLight_Params, nullptr);
};

// Function REDGame.REDCamera_CharaSelect.UpdateViewTarget
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_CharaSelect::UpdateViewTarget(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateViewTarget = nullptr;

	if (!uFnUpdateViewTarget)
	{
		uFnUpdateViewTarget = UFunction::FindFunction("Function REDGame.REDCamera_CharaSelect.UpdateViewTarget");
	}

	AREDCamera_CharaSelect_execUpdateViewTarget_Params UpdateViewTarget_Params;
	memset(&UpdateViewTarget_Params, 0, sizeof(UpdateViewTarget_Params));
	memcpy_s(&UpdateViewTarget_Params.DeltaTime, sizeof(UpdateViewTarget_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateViewTarget, &UpdateViewTarget_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT));
};

// Function REDGame.REDCamera_CharaSelect.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDCamera_CharaSelect::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDCamera_CharaSelect.DisplayDebug");
	}

	AREDCamera_CharaSelect_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDCamera_CharaSelect.UpdatePawnMaterialInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40807])
// Parameter Info:

void AREDCamera_CharaSelect::UpdatePawnMaterialInstance()
{
	static UFunction* uFnUpdatePawnMaterialInstance = nullptr;

	if (!uFnUpdatePawnMaterialInstance)
	{
		uFnUpdatePawnMaterialInstance = UFunction::FindFunction("Function REDGame.REDCamera_CharaSelect.UpdatePawnMaterialInstance");
	}

	AREDCamera_CharaSelect_execUpdatePawnMaterialInstance_Params UpdatePawnMaterialInstance_Params;
	memset(&UpdatePawnMaterialInstance_Params, 0, sizeof(UpdatePawnMaterialInstance_Params));

	this->ProcessEvent(uFnUpdatePawnMaterialInstance, &UpdatePawnMaterialInstance_Params, nullptr);
};

// Function REDGame.REDCamera_CharaSelect.UpdatePawnCameraParam
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40804])
// Parameter Info:
// struct FTPOV                   POV                            (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDCamera_CharaSelect::UpdatePawnCameraParam(struct FTPOV& POV)
{
	static UFunction* uFnUpdatePawnCameraParam = nullptr;

	if (!uFnUpdatePawnCameraParam)
	{
		uFnUpdatePawnCameraParam = UFunction::FindFunction("Function REDGame.REDCamera_CharaSelect.UpdatePawnCameraParam");
	}

	AREDCamera_CharaSelect_execUpdatePawnCameraParam_Params UpdatePawnCameraParam_Params;
	memset(&UpdatePawnCameraParam_Params, 0, sizeof(UpdatePawnCameraParam_Params));
	memcpy_s(&UpdatePawnCameraParam_Params.POV, sizeof(UpdatePawnCameraParam_Params.POV), &POV, sizeof(POV));

	this->ProcessEvent(uFnUpdatePawnCameraParam, &UpdatePawnCameraParam_Params, nullptr);

	memcpy_s(&POV, sizeof(POV), &UpdatePawnCameraParam_Params.POV, sizeof(UpdatePawnCameraParam_Params.POV));
};

// Function REDGame.REDCamera_DigitalFigure.UpdateViewTarget
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_DigitalFigure::UpdateViewTarget(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateViewTarget = nullptr;

	if (!uFnUpdateViewTarget)
	{
		uFnUpdateViewTarget = UFunction::FindFunction("Function REDGame.REDCamera_DigitalFigure.UpdateViewTarget");
	}

	AREDCamera_DigitalFigure_execUpdateViewTarget_Params UpdateViewTarget_Params;
	memset(&UpdateViewTarget_Params, 0, sizeof(UpdateViewTarget_Params));
	memcpy_s(&UpdateViewTarget_Params.DeltaTime, sizeof(UpdateViewTarget_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateViewTarget, &UpdateViewTarget_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT));
};

// Function REDGame.REDCamera_DigitalFigure.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDCamera_DigitalFigure::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDCamera_DigitalFigure.DisplayDebug");
	}

	AREDCamera_DigitalFigure_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDCamera_DigitalFigure.UpdatePawnCameraParam
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40804])
// Parameter Info:
// struct FTPOV                   POV                            (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDCamera_DigitalFigure::UpdatePawnCameraParam(struct FTPOV& POV)
{
	static UFunction* uFnUpdatePawnCameraParam = nullptr;

	if (!uFnUpdatePawnCameraParam)
	{
		uFnUpdatePawnCameraParam = UFunction::FindFunction("Function REDGame.REDCamera_DigitalFigure.UpdatePawnCameraParam");
	}

	AREDCamera_DigitalFigure_execUpdatePawnCameraParam_Params UpdatePawnCameraParam_Params;
	memset(&UpdatePawnCameraParam_Params, 0, sizeof(UpdatePawnCameraParam_Params));
	memcpy_s(&UpdatePawnCameraParam_Params.POV, sizeof(UpdatePawnCameraParam_Params.POV), &POV, sizeof(POV));

	this->ProcessEvent(uFnUpdatePawnCameraParam, &UpdatePawnCameraParam_Params, nullptr);

	memcpy_s(&POV, sizeof(POV), &UpdatePawnCameraParam_Params.POV, sizeof(UpdatePawnCameraParam_Params.POV));
};

// Function REDGame.REDCamera_DigitalFigure.UpdatePawnMaterialInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40807])
// Parameter Info:

void AREDCamera_DigitalFigure::UpdatePawnMaterialInstance()
{
	static UFunction* uFnUpdatePawnMaterialInstance = nullptr;

	if (!uFnUpdatePawnMaterialInstance)
	{
		uFnUpdatePawnMaterialInstance = UFunction::FindFunction("Function REDGame.REDCamera_DigitalFigure.UpdatePawnMaterialInstance");
	}

	AREDCamera_DigitalFigure_execUpdatePawnMaterialInstance_Params UpdatePawnMaterialInstance_Params;
	memset(&UpdatePawnMaterialInstance_Params, 0, sizeof(UpdatePawnMaterialInstance_Params));

	this->ProcessEvent(uFnUpdatePawnMaterialInstance, &UpdatePawnMaterialInstance_Params, nullptr);
};

// Function REDGame.REDCamera_DigitalFigure.UpdateCameraAnimLight
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40611])
// Parameter Info:

void AREDCamera_DigitalFigure::UpdateCameraAnimLight()
{
	static UFunction* uFnUpdateCameraAnimLight = nullptr;

	if (!uFnUpdateCameraAnimLight)
	{
		uFnUpdateCameraAnimLight = UFunction::FindFunction("Function REDGame.REDCamera_DigitalFigure.UpdateCameraAnimLight");
	}

	AREDCamera_DigitalFigure_execUpdateCameraAnimLight_Params UpdateCameraAnimLight_Params;
	memset(&UpdateCameraAnimLight_Params, 0, sizeof(UpdateCameraAnimLight_Params));

	this->ProcessEvent(uFnUpdateCameraAnimLight, &UpdateCameraAnimLight_Params, nullptr);
};

// Function REDGame.REDCameraAnimArray.GetCameraAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCameraAnim*             ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimName                       (CPF_Parm)

class UCameraAnim* UREDCameraAnimArray::GetCameraAnim(const class FName& AnimName)
{
	static UFunction* uFnGetCameraAnim = nullptr;

	if (!uFnGetCameraAnim)
	{
		uFnGetCameraAnim = UFunction::FindFunction("Function REDGame.REDCameraAnimArray.GetCameraAnim");
	}

	UREDCameraAnimArray_execGetCameraAnim_Params GetCameraAnim_Params;
	memset(&GetCameraAnim_Params, 0, sizeof(GetCameraAnim_Params));
	memcpy_s(&GetCameraAnim_Params.AnimName, sizeof(GetCameraAnim_Params.AnimName), &AnimName, sizeof(AnimName));

	this->ProcessEvent(uFnGetCameraAnim, &GetCameraAnim_Params, nullptr);

	return GetCameraAnim_Params.ReturnValue;
};

// Function REDGame.REDCameraOffsetDataArray.AddOffsetData
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 PosOffset                      (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                RotOffset                      (CPF_Const | CPF_Parm | CPF_OutParm)

void UREDCameraOffsetDataArray::AddOffsetData(struct FVector& PosOffset, struct FRotator& RotOffset)
{
	static UFunction* uFnAddOffsetData = nullptr;

	if (!uFnAddOffsetData)
	{
		uFnAddOffsetData = UFunction::FindFunction("Function REDGame.REDCameraOffsetDataArray.AddOffsetData");
	}

	UREDCameraOffsetDataArray_execAddOffsetData_Params AddOffsetData_Params;
	memset(&AddOffsetData_Params, 0, sizeof(AddOffsetData_Params));
	memcpy_s(&AddOffsetData_Params.PosOffset, sizeof(AddOffsetData_Params.PosOffset), &PosOffset, sizeof(PosOffset));
	memcpy_s(&AddOffsetData_Params.RotOffset, sizeof(AddOffsetData_Params.RotOffset), &RotOffset, sizeof(RotOffset));

	this->ProcessEvent(uFnAddOffsetData, &AddOffsetData_Params, nullptr);

	memcpy_s(&PosOffset, sizeof(PosOffset), &AddOffsetData_Params.PosOffset, sizeof(AddOffsetData_Params.PosOffset));
	memcpy_s(&RotOffset, sizeof(RotOffset), &AddOffsetData_Params.RotOffset, sizeof(AddOffsetData_Params.RotOffset));
};

// Function REDGame.REDCharaAssetLoader.CheckExistPackage
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36196])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UREDCharaAssetLoader::CheckExistPackage(struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnCheckExistPackage = nullptr;

	if (!uFnCheckExistPackage)
	{
		uFnCheckExistPackage = UFunction::FindFunction("Function REDGame.REDCharaAssetLoader.CheckExistPackage");
	}

	UREDCharaAssetLoader_execCheckExistPackage_Params CheckExistPackage_Params;
	memset(&CheckExistPackage_Params, 0, sizeof(CheckExistPackage_Params));
	memcpy_s(&CheckExistPackage_Params.Info, sizeof(CheckExistPackage_Params.Info), &Info, sizeof(Info));

	UREDCharaAssetLoader::StaticClass()->ProcessEvent(uFnCheckExistPackage, &CheckExistPackage_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &CheckExistPackage_Params.Info, sizeof(CheckExistPackage_Params.Info));

	return CheckExistPackage_Params.ReturnValue;
};

// Function REDGame.REDCharaAssetLoader.GetPackageNamesForDrama
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37126])
// Parameter Info:
// class FString                  textLang                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  voiceLang                      (CPF_Parm | CPF_NeedCtorLink)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDCharaAssetLoader::GetPackageNamesForDrama(const class FString& textLang, const class FString& voiceLang, struct FSpawnPlayerInfo& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetPackageNamesForDrama = nullptr;

	if (!uFnGetPackageNamesForDrama)
	{
		uFnGetPackageNamesForDrama = UFunction::FindFunction("Function REDGame.REDCharaAssetLoader.GetPackageNamesForDrama");
	}

	UREDCharaAssetLoader_execGetPackageNamesForDrama_Params GetPackageNamesForDrama_Params;
	memset(&GetPackageNamesForDrama_Params, 0, sizeof(GetPackageNamesForDrama_Params));
	memcpy_s(&GetPackageNamesForDrama_Params.textLang, sizeof(GetPackageNamesForDrama_Params.textLang), &textLang, sizeof(textLang));
	memcpy_s(&GetPackageNamesForDrama_Params.voiceLang, sizeof(GetPackageNamesForDrama_Params.voiceLang), &voiceLang, sizeof(voiceLang));
	memcpy_s(&GetPackageNamesForDrama_Params.Info, sizeof(GetPackageNamesForDrama_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetPackageNamesForDrama_Params.packageNames, sizeof(GetPackageNamesForDrama_Params.packageNames), &packageNames, sizeof(packageNames));

	UREDCharaAssetLoader::StaticClass()->ProcessEvent(uFnGetPackageNamesForDrama, &GetPackageNamesForDrama_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetPackageNamesForDrama_Params.Info, sizeof(GetPackageNamesForDrama_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetPackageNamesForDrama_Params.packageNames, sizeof(GetPackageNamesForDrama_Params.packageNames));
};

// Function REDGame.REDCharaAssetLoader.GetPackageNamesForMOM
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37127])
// Parameter Info:
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDCharaAssetLoader::GetPackageNamesForMOM(struct FSpawnPlayerInfo& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetPackageNamesForMOM = nullptr;

	if (!uFnGetPackageNamesForMOM)
	{
		uFnGetPackageNamesForMOM = UFunction::FindFunction("Function REDGame.REDCharaAssetLoader.GetPackageNamesForMOM");
	}

	UREDCharaAssetLoader_execGetPackageNamesForMOM_Params GetPackageNamesForMOM_Params;
	memset(&GetPackageNamesForMOM_Params, 0, sizeof(GetPackageNamesForMOM_Params));
	memcpy_s(&GetPackageNamesForMOM_Params.Info, sizeof(GetPackageNamesForMOM_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetPackageNamesForMOM_Params.packageNames, sizeof(GetPackageNamesForMOM_Params.packageNames), &packageNames, sizeof(packageNames));

	UREDCharaAssetLoader::StaticClass()->ProcessEvent(uFnGetPackageNamesForMOM, &GetPackageNamesForMOM_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetPackageNamesForMOM_Params.Info, sizeof(GetPackageNamesForMOM_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetPackageNamesForMOM_Params.packageNames, sizeof(GetPackageNamesForMOM_Params.packageNames));
};

// Function REDGame.REDCharaAssetLoader.LoadAssets
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[38017])
// Parameter Info:
// class UREDCharaAsset*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UObject*                 outerObject                    (CPF_Parm)
// uint32_t                       bBlocking                      (CPF_Parm)
// class TArray<class FString>    packageNames                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class UREDCharaAsset* UREDCharaAssetLoader::LoadAssets(class UObject* outerObject, bool bBlocking, class TArray<class FString>& packageNames)
{
	static UFunction* uFnLoadAssets = nullptr;

	if (!uFnLoadAssets)
	{
		uFnLoadAssets = UFunction::FindFunction("Function REDGame.REDCharaAssetLoader.LoadAssets");
	}

	UREDCharaAssetLoader_execLoadAssets_Params LoadAssets_Params;
	memset(&LoadAssets_Params, 0, sizeof(LoadAssets_Params));
	LoadAssets_Params.outerObject = outerObject;
	LoadAssets_Params.bBlocking = bBlocking;
	memcpy_s(&LoadAssets_Params.packageNames, sizeof(LoadAssets_Params.packageNames), &packageNames, sizeof(packageNames));

	UREDCharaAssetLoader::StaticClass()->ProcessEvent(uFnLoadAssets, &LoadAssets_Params, nullptr);

	memcpy_s(&packageNames, sizeof(packageNames), &LoadAssets_Params.packageNames, sizeof(LoadAssets_Params.packageNames));

	return LoadAssets_Params.ReturnValue;
};

// Function REDGame.REDCharaAssetLoader.GetPackageNamesSimple
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37129])
// Parameter Info:
// uint32_t                       bColorOnly                     (CPF_Parm)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDCharaAssetLoader::GetPackageNamesSimple(bool bColorOnly, struct FSpawnPlayerInfo& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetPackageNamesSimple = nullptr;

	if (!uFnGetPackageNamesSimple)
	{
		uFnGetPackageNamesSimple = UFunction::FindFunction("Function REDGame.REDCharaAssetLoader.GetPackageNamesSimple");
	}

	UREDCharaAssetLoader_execGetPackageNamesSimple_Params GetPackageNamesSimple_Params;
	memset(&GetPackageNamesSimple_Params, 0, sizeof(GetPackageNamesSimple_Params));
	GetPackageNamesSimple_Params.bColorOnly = bColorOnly;
	memcpy_s(&GetPackageNamesSimple_Params.Info, sizeof(GetPackageNamesSimple_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetPackageNamesSimple_Params.packageNames, sizeof(GetPackageNamesSimple_Params.packageNames), &packageNames, sizeof(packageNames));

	UREDCharaAssetLoader::StaticClass()->ProcessEvent(uFnGetPackageNamesSimple, &GetPackageNamesSimple_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetPackageNamesSimple_Params.Info, sizeof(GetPackageNamesSimple_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetPackageNamesSimple_Params.packageNames, sizeof(GetPackageNamesSimple_Params.packageNames));
};

// Function REDGame.REDCharaAssetLoader.GetPackageNamesForOnlyDrama
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37128])
// Parameter Info:
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDCharaAssetLoader::GetPackageNamesForOnlyDrama(struct FSpawnPlayerInfo& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetPackageNamesForOnlyDrama = nullptr;

	if (!uFnGetPackageNamesForOnlyDrama)
	{
		uFnGetPackageNamesForOnlyDrama = UFunction::FindFunction("Function REDGame.REDCharaAssetLoader.GetPackageNamesForOnlyDrama");
	}

	UREDCharaAssetLoader_execGetPackageNamesForOnlyDrama_Params GetPackageNamesForOnlyDrama_Params;
	memset(&GetPackageNamesForOnlyDrama_Params, 0, sizeof(GetPackageNamesForOnlyDrama_Params));
	memcpy_s(&GetPackageNamesForOnlyDrama_Params.Info, sizeof(GetPackageNamesForOnlyDrama_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetPackageNamesForOnlyDrama_Params.packageNames, sizeof(GetPackageNamesForOnlyDrama_Params.packageNames), &packageNames, sizeof(packageNames));

	UREDCharaAssetLoader::StaticClass()->ProcessEvent(uFnGetPackageNamesForOnlyDrama, &GetPackageNamesForOnlyDrama_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetPackageNamesForOnlyDrama_Params.Info, sizeof(GetPackageNamesForOnlyDrama_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetPackageNamesForOnlyDrama_Params.packageNames, sizeof(GetPackageNamesForOnlyDrama_Params.packageNames));
};

// Function REDGame.REDCharaAssetLoader.GetPackageNames
// [0x00422401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37125])
// Parameter Info:
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDCharaAssetLoader::GetPackageNames(struct FSpawnPlayerInfo& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetPackageNames = nullptr;

	if (!uFnGetPackageNames)
	{
		uFnGetPackageNames = UFunction::FindFunction("Function REDGame.REDCharaAssetLoader.GetPackageNames");
	}

	UREDCharaAssetLoader_execGetPackageNames_Params GetPackageNames_Params;
	memset(&GetPackageNames_Params, 0, sizeof(GetPackageNames_Params));
	memcpy_s(&GetPackageNames_Params.Info, sizeof(GetPackageNames_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetPackageNames_Params.packageNames, sizeof(GetPackageNames_Params.packageNames), &packageNames, sizeof(packageNames));

	UREDCharaAssetLoader::StaticClass()->ProcessEvent(uFnGetPackageNames, &GetPackageNames_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetPackageNames_Params.Info, sizeof(GetPackageNames_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetPackageNames_Params.packageNames, sizeof(GetPackageNames_Params.packageNames));
};

// Function REDGame.REDCheatManager.Twitter
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Exec                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  argv1                          (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// class FString                  argv2                          (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void UREDCheatManager::Twitter(const class FString& Exec, const class FString& argv1, const class FString& argv2)
{
	static UFunction* uFnTwitter = nullptr;

	if (!uFnTwitter)
	{
		uFnTwitter = UFunction::FindFunction("Function REDGame.REDCheatManager.Twitter");
	}

	UREDCheatManager_execTwitter_Params Twitter_Params;
	memset(&Twitter_Params, 0, sizeof(Twitter_Params));
	memcpy_s(&Twitter_Params.Exec, sizeof(Twitter_Params.Exec), &Exec, sizeof(Exec));
	memcpy_s(&Twitter_Params.argv1, sizeof(Twitter_Params.argv1), &argv1, sizeof(argv1));
	memcpy_s(&Twitter_Params.argv2, sizeof(Twitter_Params.argv2), &argv2, sizeof(argv2));

	this->ProcessEvent(uFnTwitter, &Twitter_Params, nullptr);
};

// Function REDGame.REDCheatManager.TwitterControl
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40294])
// Parameter Info:
// class FString                  Exec                           (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  argv1                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  argv2                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDCheatManager::TwitterControl(class FString& Exec, class FString& argv1, class FString& argv2)
{
	static UFunction* uFnTwitterControl = nullptr;

	if (!uFnTwitterControl)
	{
		uFnTwitterControl = UFunction::FindFunction("Function REDGame.REDCheatManager.TwitterControl");
	}

	UREDCheatManager_execTwitterControl_Params TwitterControl_Params;
	memset(&TwitterControl_Params, 0, sizeof(TwitterControl_Params));
	memcpy_s(&TwitterControl_Params.Exec, sizeof(TwitterControl_Params.Exec), &Exec, sizeof(Exec));
	memcpy_s(&TwitterControl_Params.argv1, sizeof(TwitterControl_Params.argv1), &argv1, sizeof(argv1));
	memcpy_s(&TwitterControl_Params.argv2, sizeof(TwitterControl_Params.argv2), &argv2, sizeof(argv2));

	this->ProcessEvent(uFnTwitterControl, &TwitterControl_Params, nullptr);

	memcpy_s(&Exec, sizeof(Exec), &TwitterControl_Params.Exec, sizeof(TwitterControl_Params.Exec));
	memcpy_s(&argv1, sizeof(argv1), &TwitterControl_Params.argv1, sizeof(TwitterControl_Params.argv1));
	memcpy_s(&argv2, sizeof(argv2), &TwitterControl_Params.argv2, sizeof(TwitterControl_Params.argv2));
};

// Function REDGame.REDCheatManager_Battle.DumpActorTrans
// [0x00024200] (FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    actorName                      (CPF_OptionalParm | CPF_Parm)
// class FName                    LayerName                      (CPF_OptionalParm | CPF_Parm)

void UREDCheatManager_Battle::DumpActorTrans(const class FName& actorName, const class FName& LayerName)
{
	static UFunction* uFnDumpActorTrans = nullptr;

	if (!uFnDumpActorTrans)
	{
		uFnDumpActorTrans = UFunction::FindFunction("Function REDGame.REDCheatManager_Battle.DumpActorTrans");
	}

	UREDCheatManager_Battle_execDumpActorTrans_Params DumpActorTrans_Params;
	memset(&DumpActorTrans_Params, 0, sizeof(DumpActorTrans_Params));
	memcpy_s(&DumpActorTrans_Params.actorName, sizeof(DumpActorTrans_Params.actorName), &actorName, sizeof(actorName));
	memcpy_s(&DumpActorTrans_Params.LayerName, sizeof(DumpActorTrans_Params.LayerName), &LayerName, sizeof(LayerName));

	this->ProcessEvent(uFnDumpActorTrans, &DumpActorTrans_Params, nullptr);
};

// Function REDGame.REDCheatManager_Battle.EnableDebugCamera
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bEnableDebugText               (CPF_Parm)

void UREDCheatManager_Battle::EnableDebugCamera(bool bEnableDebugText)
{
	static UFunction* uFnEnableDebugCamera = nullptr;

	if (!uFnEnableDebugCamera)
	{
		uFnEnableDebugCamera = UFunction::FindFunction("Function REDGame.REDCheatManager_Battle.EnableDebugCamera");
	}

	UREDCheatManager_Battle_execEnableDebugCamera_Params EnableDebugCamera_Params;
	memset(&EnableDebugCamera_Params, 0, sizeof(EnableDebugCamera_Params));
	EnableDebugCamera_Params.bEnableDebugText = bEnableDebugText;

	this->ProcessEvent(uFnEnableDebugCamera, &EnableDebugCamera_Params, nullptr);
};

// Function REDGame.REDCheatManager_Battle.ToggleDebugCamera
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bDrawDebugText                 (CPF_OptionalParm | CPF_Parm)

void UREDCheatManager_Battle::ToggleDebugCamera(bool bDrawDebugText)
{
	static UFunction* uFnToggleDebugCamera = nullptr;

	if (!uFnToggleDebugCamera)
	{
		uFnToggleDebugCamera = UFunction::FindFunction("Function REDGame.REDCheatManager_Battle.ToggleDebugCamera");
	}

	UREDCheatManager_Battle_execToggleDebugCamera_Params ToggleDebugCamera_Params;
	memset(&ToggleDebugCamera_Params, 0, sizeof(ToggleDebugCamera_Params));
	ToggleDebugCamera_Params.bDrawDebugText = bDrawDebugText;

	this->ProcessEvent(uFnToggleDebugCamera, &ToggleDebugCamera_Params, nullptr);
};

// Function REDGame.REDControlModule.UpdateRotation
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDControlModule::UpdateRotation(float DeltaTime)
{
	static UFunction* uFnUpdateRotation = nullptr;

	if (!uFnUpdateRotation)
	{
		uFnUpdateRotation = UFunction::FindFunction("Function REDGame.REDControlModule.UpdateRotation");
	}

	UREDControlModule_execUpdateRotation_Params UpdateRotation_Params;
	memset(&UpdateRotation_Params, 0, sizeof(UpdateRotation_Params));
	memcpy_s(&UpdateRotation_Params.DeltaTime, sizeof(UpdateRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateRotation, &UpdateRotation_Params, nullptr);
};

// Function REDGame.REDControlModule.ProcessMove
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void UREDControlModule::ProcessMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* uFnProcessMove = nullptr;

	if (!uFnProcessMove)
	{
		uFnProcessMove = UFunction::FindFunction("Function REDGame.REDControlModule.ProcessMove");
	}

	UREDControlModule_execProcessMove_Params ProcessMove_Params;
	memset(&ProcessMove_Params, 0, sizeof(ProcessMove_Params));
	memcpy_s(&ProcessMove_Params.DeltaTime, sizeof(ProcessMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessMove_Params.newAccel, sizeof(ProcessMove_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&ProcessMove_Params.DoubleClickMove, sizeof(ProcessMove_Params.DoubleClickMove), &DoubleClickMove, sizeof(DoubleClickMove));
	memcpy_s(&ProcessMove_Params.DeltaRot, sizeof(ProcessMove_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnProcessMove, &ProcessMove_Params, nullptr);
};

// Function REDGame.REDControlModule.GetBaseAimRotation
// [0x00020120] (FUNC_Singular | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator UREDControlModule::GetBaseAimRotation()
{
	static UFunction* uFnGetBaseAimRotation = nullptr;

	if (!uFnGetBaseAimRotation)
	{
		uFnGetBaseAimRotation = UFunction::FindFunction("Function REDGame.REDControlModule.GetBaseAimRotation");
	}

	UREDControlModule_execGetBaseAimRotation_Params GetBaseAimRotation_Params;
	memset(&GetBaseAimRotation_Params, 0, sizeof(GetBaseAimRotation_Params));

	this->ProcessEvent(uFnGetBaseAimRotation, &GetBaseAimRotation_Params, nullptr);

	return GetBaseAimRotation_Params.ReturnValue;
};

// Function REDGame.REDControlModule.OnBecomeInActive
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDControlModule*       NewModule                      (CPF_Parm)

void UREDControlModule::OnBecomeInActive(class UREDControlModule* NewModule)
{
	static UFunction* uFnOnBecomeInActive = nullptr;

	if (!uFnOnBecomeInActive)
	{
		uFnOnBecomeInActive = UFunction::FindFunction("Function REDGame.REDControlModule.OnBecomeInActive");
	}

	UREDControlModule_execOnBecomeInActive_Params OnBecomeInActive_Params;
	memset(&OnBecomeInActive_Params, 0, sizeof(OnBecomeInActive_Params));
	OnBecomeInActive_Params.NewModule = NewModule;

	this->ProcessEvent(uFnOnBecomeInActive, &OnBecomeInActive_Params, nullptr);
};

// Function REDGame.REDControlModule.OnBecomeActive
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDControlModule*       OldModule                      (CPF_Parm)

void UREDControlModule::OnBecomeActive(class UREDControlModule* OldModule)
{
	static UFunction* uFnOnBecomeActive = nullptr;

	if (!uFnOnBecomeActive)
	{
		uFnOnBecomeActive = UFunction::FindFunction("Function REDGame.REDControlModule.OnBecomeActive");
	}

	UREDControlModule_execOnBecomeActive_Params OnBecomeActive_Params;
	memset(&OnBecomeActive_Params, 0, sizeof(OnBecomeActive_Params));
	OnBecomeActive_Params.OldModule = OldModule;

	this->ProcessEvent(uFnOnBecomeActive, &OnBecomeActive_Params, nullptr);
};

// Function REDGame.REDControlModule.Init
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDControlModule::Init()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function REDGame.REDControlModule.Init");
	}

	UREDControlModule_execInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
};

// Function REDGame.REDControlModule_Adv.UpdateRotation
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDControlModule_Adv::UpdateRotation(float DeltaTime)
{
	static UFunction* uFnUpdateRotation = nullptr;

	if (!uFnUpdateRotation)
	{
		uFnUpdateRotation = UFunction::FindFunction("Function REDGame.REDControlModule_Adv.UpdateRotation");
	}

	UREDControlModule_Adv_execUpdateRotation_Params UpdateRotation_Params;
	memset(&UpdateRotation_Params, 0, sizeof(UpdateRotation_Params));
	memcpy_s(&UpdateRotation_Params.DeltaTime, sizeof(UpdateRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateRotation, &UpdateRotation_Params, nullptr);
};

// Function REDGame.REDControlModule_Adv.ProcessMove
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void UREDControlModule_Adv::ProcessMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* uFnProcessMove = nullptr;

	if (!uFnProcessMove)
	{
		uFnProcessMove = UFunction::FindFunction("Function REDGame.REDControlModule_Adv.ProcessMove");
	}

	UREDControlModule_Adv_execProcessMove_Params ProcessMove_Params;
	memset(&ProcessMove_Params, 0, sizeof(ProcessMove_Params));
	memcpy_s(&ProcessMove_Params.DeltaTime, sizeof(ProcessMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessMove_Params.newAccel, sizeof(ProcessMove_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&ProcessMove_Params.DoubleClickMove, sizeof(ProcessMove_Params.DoubleClickMove), &DoubleClickMove, sizeof(DoubleClickMove));
	memcpy_s(&ProcessMove_Params.DeltaRot, sizeof(ProcessMove_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnProcessMove, &ProcessMove_Params, nullptr);
};

// Function REDGame.REDControlModule_Adv.GetBaseAimRotation
// [0x00820122] (FUNC_Defined | FUNC_Singular | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator UREDControlModule_Adv::GetBaseAimRotation()
{
	static UFunction* uFnGetBaseAimRotation = nullptr;

	if (!uFnGetBaseAimRotation)
	{
		uFnGetBaseAimRotation = UFunction::FindFunction("Function REDGame.REDControlModule_Adv.GetBaseAimRotation");
	}

	UREDControlModule_Adv_execGetBaseAimRotation_Params GetBaseAimRotation_Params;
	memset(&GetBaseAimRotation_Params, 0, sizeof(GetBaseAimRotation_Params));

	this->ProcessEvent(uFnGetBaseAimRotation, &GetBaseAimRotation_Params, nullptr);

	return GetBaseAimRotation_Params.ReturnValue;
};

// Function REDGame.REDControlModule_Adv.GetInnerCameraFov
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37074])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UREDControlModule_Adv::GetInnerCameraFov()
{
	static UFunction* uFnGetInnerCameraFov = nullptr;

	if (!uFnGetInnerCameraFov)
	{
		uFnGetInnerCameraFov = UFunction::FindFunction("Function REDGame.REDControlModule_Adv.GetInnerCameraFov");
	}

	UREDControlModule_Adv_execGetInnerCameraFov_Params GetInnerCameraFov_Params;
	memset(&GetInnerCameraFov_Params, 0, sizeof(GetInnerCameraFov_Params));

	this->ProcessEvent(uFnGetInnerCameraFov, &GetInnerCameraFov_Params, nullptr);

	return GetInnerCameraFov_Params.ReturnValue;
};

// Function REDGame.REDControlModule_Adv.GetInnerCameraRot
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37076])
// Parameter Info:
// struct FRotator                Rotation                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_Adv::GetInnerCameraRot(struct FRotator& Rotation)
{
	static UFunction* uFnGetInnerCameraRot = nullptr;

	if (!uFnGetInnerCameraRot)
	{
		uFnGetInnerCameraRot = UFunction::FindFunction("Function REDGame.REDControlModule_Adv.GetInnerCameraRot");
	}

	UREDControlModule_Adv_execGetInnerCameraRot_Params GetInnerCameraRot_Params;
	memset(&GetInnerCameraRot_Params, 0, sizeof(GetInnerCameraRot_Params));
	memcpy_s(&GetInnerCameraRot_Params.Rotation, sizeof(GetInnerCameraRot_Params.Rotation), &Rotation, sizeof(Rotation));

	this->ProcessEvent(uFnGetInnerCameraRot, &GetInnerCameraRot_Params, nullptr);

	memcpy_s(&Rotation, sizeof(Rotation), &GetInnerCameraRot_Params.Rotation, sizeof(GetInnerCameraRot_Params.Rotation));
};

// Function REDGame.REDControlModule_Adv.GetInnerCameraPos
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37075])
// Parameter Info:
// struct FVector                 Location                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_Adv::GetInnerCameraPos(struct FVector& Location)
{
	static UFunction* uFnGetInnerCameraPos = nullptr;

	if (!uFnGetInnerCameraPos)
	{
		uFnGetInnerCameraPos = UFunction::FindFunction("Function REDGame.REDControlModule_Adv.GetInnerCameraPos");
	}

	UREDControlModule_Adv_execGetInnerCameraPos_Params GetInnerCameraPos_Params;
	memset(&GetInnerCameraPos_Params, 0, sizeof(GetInnerCameraPos_Params));
	memcpy_s(&GetInnerCameraPos_Params.Location, sizeof(GetInnerCameraPos_Params.Location), &Location, sizeof(Location));

	this->ProcessEvent(uFnGetInnerCameraPos, &GetInnerCameraPos_Params, nullptr);

	memcpy_s(&Location, sizeof(Location), &GetInnerCameraPos_Params.Location, sizeof(GetInnerCameraPos_Params.Location));
};

// Function REDGame.REDControlModule_Battle.UpdateRotation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[29850])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDControlModule_Battle::UpdateRotation(float DeltaTime)
{
	static UFunction* uFnUpdateRotation = nullptr;

	if (!uFnUpdateRotation)
	{
		uFnUpdateRotation = UFunction::FindFunction("Function REDGame.REDControlModule_Battle.UpdateRotation");
	}

	UREDControlModule_Battle_execUpdateRotation_Params UpdateRotation_Params;
	memset(&UpdateRotation_Params, 0, sizeof(UpdateRotation_Params));
	memcpy_s(&UpdateRotation_Params.DeltaTime, sizeof(UpdateRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateRotation, &UpdateRotation_Params, nullptr);
};

// Function REDGame.REDControlModule_Battle.ProcessMove
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26500])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void UREDControlModule_Battle::ProcessMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* uFnProcessMove = nullptr;

	if (!uFnProcessMove)
	{
		uFnProcessMove = UFunction::FindFunction("Function REDGame.REDControlModule_Battle.ProcessMove");
	}

	UREDControlModule_Battle_execProcessMove_Params ProcessMove_Params;
	memset(&ProcessMove_Params, 0, sizeof(ProcessMove_Params));
	memcpy_s(&ProcessMove_Params.DeltaTime, sizeof(ProcessMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessMove_Params.newAccel, sizeof(ProcessMove_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&ProcessMove_Params.DoubleClickMove, sizeof(ProcessMove_Params.DoubleClickMove), &DoubleClickMove, sizeof(DoubleClickMove));
	memcpy_s(&ProcessMove_Params.DeltaRot, sizeof(ProcessMove_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnProcessMove, &ProcessMove_Params, nullptr);
};

// Function REDGame.REDControlModule_Battle.GetBaseAimRotation
// [0x00820122] (FUNC_Defined | FUNC_Singular | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator UREDControlModule_Battle::GetBaseAimRotation()
{
	static UFunction* uFnGetBaseAimRotation = nullptr;

	if (!uFnGetBaseAimRotation)
	{
		uFnGetBaseAimRotation = UFunction::FindFunction("Function REDGame.REDControlModule_Battle.GetBaseAimRotation");
	}

	UREDControlModule_Battle_execGetBaseAimRotation_Params GetBaseAimRotation_Params;
	memset(&GetBaseAimRotation_Params, 0, sizeof(GetBaseAimRotation_Params));

	this->ProcessEvent(uFnGetBaseAimRotation, &GetBaseAimRotation_Params, nullptr);

	return GetBaseAimRotation_Params.ReturnValue;
};

// Function REDGame.REDControlModule_Battle.SetCameraOffset
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39702])
// Parameter Info:
// struct FVector                 InLocationOffset               (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InRotationOffset               (CPF_Const | CPF_Parm | CPF_OutParm)

void UREDControlModule_Battle::SetCameraOffset(struct FVector& InLocationOffset, struct FRotator& InRotationOffset)
{
	static UFunction* uFnSetCameraOffset = nullptr;

	if (!uFnSetCameraOffset)
	{
		uFnSetCameraOffset = UFunction::FindFunction("Function REDGame.REDControlModule_Battle.SetCameraOffset");
	}

	UREDControlModule_Battle_execSetCameraOffset_Params SetCameraOffset_Params;
	memset(&SetCameraOffset_Params, 0, sizeof(SetCameraOffset_Params));
	memcpy_s(&SetCameraOffset_Params.InLocationOffset, sizeof(SetCameraOffset_Params.InLocationOffset), &InLocationOffset, sizeof(InLocationOffset));
	memcpy_s(&SetCameraOffset_Params.InRotationOffset, sizeof(SetCameraOffset_Params.InRotationOffset), &InRotationOffset, sizeof(InRotationOffset));

	this->ProcessEvent(uFnSetCameraOffset, &SetCameraOffset_Params, nullptr);

	memcpy_s(&InLocationOffset, sizeof(InLocationOffset), &SetCameraOffset_Params.InLocationOffset, sizeof(SetCameraOffset_Params.InLocationOffset));
	memcpy_s(&InRotationOffset, sizeof(InRotationOffset), &SetCameraOffset_Params.InRotationOffset, sizeof(SetCameraOffset_Params.InRotationOffset));
};

// Function REDGame.REDControlModule_Battle.GetCameraOffset
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37014])
// Parameter Info:
// struct FVector                 Location                       (CPF_Parm | CPF_OutParm)
// struct FRotator                Rotation                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_Battle::GetCameraOffset(struct FVector& Location, struct FRotator& Rotation)
{
	static UFunction* uFnGetCameraOffset = nullptr;

	if (!uFnGetCameraOffset)
	{
		uFnGetCameraOffset = UFunction::FindFunction("Function REDGame.REDControlModule_Battle.GetCameraOffset");
	}

	UREDControlModule_Battle_execGetCameraOffset_Params GetCameraOffset_Params;
	memset(&GetCameraOffset_Params, 0, sizeof(GetCameraOffset_Params));
	memcpy_s(&GetCameraOffset_Params.Location, sizeof(GetCameraOffset_Params.Location), &Location, sizeof(Location));
	memcpy_s(&GetCameraOffset_Params.Rotation, sizeof(GetCameraOffset_Params.Rotation), &Rotation, sizeof(Rotation));

	this->ProcessEvent(uFnGetCameraOffset, &GetCameraOffset_Params, nullptr);

	memcpy_s(&Location, sizeof(Location), &GetCameraOffset_Params.Location, sizeof(GetCameraOffset_Params.Location));
	memcpy_s(&Rotation, sizeof(Rotation), &GetCameraOffset_Params.Rotation, sizeof(GetCameraOffset_Params.Rotation));
};

// Function REDGame.REDControlModule_Battle.GetInnerCameraRot
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37076])
// Parameter Info:
// struct FRotator                Rotation                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_Battle::GetInnerCameraRot(struct FRotator& Rotation)
{
	static UFunction* uFnGetInnerCameraRot = nullptr;

	if (!uFnGetInnerCameraRot)
	{
		uFnGetInnerCameraRot = UFunction::FindFunction("Function REDGame.REDControlModule_Battle.GetInnerCameraRot");
	}

	UREDControlModule_Battle_execGetInnerCameraRot_Params GetInnerCameraRot_Params;
	memset(&GetInnerCameraRot_Params, 0, sizeof(GetInnerCameraRot_Params));
	memcpy_s(&GetInnerCameraRot_Params.Rotation, sizeof(GetInnerCameraRot_Params.Rotation), &Rotation, sizeof(Rotation));

	this->ProcessEvent(uFnGetInnerCameraRot, &GetInnerCameraRot_Params, nullptr);

	memcpy_s(&Rotation, sizeof(Rotation), &GetInnerCameraRot_Params.Rotation, sizeof(GetInnerCameraRot_Params.Rotation));
};

// Function REDGame.REDControlModule_Battle.GetInnerCameraPos
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37075])
// Parameter Info:
// struct FVector                 Location                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_Battle::GetInnerCameraPos(struct FVector& Location)
{
	static UFunction* uFnGetInnerCameraPos = nullptr;

	if (!uFnGetInnerCameraPos)
	{
		uFnGetInnerCameraPos = UFunction::FindFunction("Function REDGame.REDControlModule_Battle.GetInnerCameraPos");
	}

	UREDControlModule_Battle_execGetInnerCameraPos_Params GetInnerCameraPos_Params;
	memset(&GetInnerCameraPos_Params, 0, sizeof(GetInnerCameraPos_Params));
	memcpy_s(&GetInnerCameraPos_Params.Location, sizeof(GetInnerCameraPos_Params.Location), &Location, sizeof(Location));

	this->ProcessEvent(uFnGetInnerCameraPos, &GetInnerCameraPos_Params, nullptr);

	memcpy_s(&Location, sizeof(Location), &GetInnerCameraPos_Params.Location, sizeof(GetInnerCameraPos_Params.Location));
};

// Function REDGame.REDControlModule_DigitalFigure.UpdateRotation
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDControlModule_DigitalFigure::UpdateRotation(float DeltaTime)
{
	static UFunction* uFnUpdateRotation = nullptr;

	if (!uFnUpdateRotation)
	{
		uFnUpdateRotation = UFunction::FindFunction("Function REDGame.REDControlModule_DigitalFigure.UpdateRotation");
	}

	UREDControlModule_DigitalFigure_execUpdateRotation_Params UpdateRotation_Params;
	memset(&UpdateRotation_Params, 0, sizeof(UpdateRotation_Params));
	memcpy_s(&UpdateRotation_Params.DeltaTime, sizeof(UpdateRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateRotation, &UpdateRotation_Params, nullptr);
};

// Function REDGame.REDControlModule_DigitalFigure.ProcessMove
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void UREDControlModule_DigitalFigure::ProcessMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* uFnProcessMove = nullptr;

	if (!uFnProcessMove)
	{
		uFnProcessMove = UFunction::FindFunction("Function REDGame.REDControlModule_DigitalFigure.ProcessMove");
	}

	UREDControlModule_DigitalFigure_execProcessMove_Params ProcessMove_Params;
	memset(&ProcessMove_Params, 0, sizeof(ProcessMove_Params));
	memcpy_s(&ProcessMove_Params.DeltaTime, sizeof(ProcessMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessMove_Params.newAccel, sizeof(ProcessMove_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&ProcessMove_Params.DoubleClickMove, sizeof(ProcessMove_Params.DoubleClickMove), &DoubleClickMove, sizeof(DoubleClickMove));
	memcpy_s(&ProcessMove_Params.DeltaRot, sizeof(ProcessMove_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnProcessMove, &ProcessMove_Params, nullptr);
};

// Function REDGame.REDControlModule_DigitalFigure.GetBaseAimRotation
// [0x00820122] (FUNC_Defined | FUNC_Singular | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator UREDControlModule_DigitalFigure::GetBaseAimRotation()
{
	static UFunction* uFnGetBaseAimRotation = nullptr;

	if (!uFnGetBaseAimRotation)
	{
		uFnGetBaseAimRotation = UFunction::FindFunction("Function REDGame.REDControlModule_DigitalFigure.GetBaseAimRotation");
	}

	UREDControlModule_DigitalFigure_execGetBaseAimRotation_Params GetBaseAimRotation_Params;
	memset(&GetBaseAimRotation_Params, 0, sizeof(GetBaseAimRotation_Params));

	this->ProcessEvent(uFnGetBaseAimRotation, &GetBaseAimRotation_Params, nullptr);

	return GetBaseAimRotation_Params.ReturnValue;
};

// Function REDGame.REDControlModule_DigitalFigure.GetInnerCameraFov
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37074])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float UREDControlModule_DigitalFigure::GetInnerCameraFov()
{
	static UFunction* uFnGetInnerCameraFov = nullptr;

	if (!uFnGetInnerCameraFov)
	{
		uFnGetInnerCameraFov = UFunction::FindFunction("Function REDGame.REDControlModule_DigitalFigure.GetInnerCameraFov");
	}

	UREDControlModule_DigitalFigure_execGetInnerCameraFov_Params GetInnerCameraFov_Params;
	memset(&GetInnerCameraFov_Params, 0, sizeof(GetInnerCameraFov_Params));

	this->ProcessEvent(uFnGetInnerCameraFov, &GetInnerCameraFov_Params, nullptr);

	return GetInnerCameraFov_Params.ReturnValue;
};

// Function REDGame.REDControlModule_DigitalFigure.GetInnerCameraRot
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37076])
// Parameter Info:
// struct FRotator                Rotation                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_DigitalFigure::GetInnerCameraRot(struct FRotator& Rotation)
{
	static UFunction* uFnGetInnerCameraRot = nullptr;

	if (!uFnGetInnerCameraRot)
	{
		uFnGetInnerCameraRot = UFunction::FindFunction("Function REDGame.REDControlModule_DigitalFigure.GetInnerCameraRot");
	}

	UREDControlModule_DigitalFigure_execGetInnerCameraRot_Params GetInnerCameraRot_Params;
	memset(&GetInnerCameraRot_Params, 0, sizeof(GetInnerCameraRot_Params));
	memcpy_s(&GetInnerCameraRot_Params.Rotation, sizeof(GetInnerCameraRot_Params.Rotation), &Rotation, sizeof(Rotation));

	this->ProcessEvent(uFnGetInnerCameraRot, &GetInnerCameraRot_Params, nullptr);

	memcpy_s(&Rotation, sizeof(Rotation), &GetInnerCameraRot_Params.Rotation, sizeof(GetInnerCameraRot_Params.Rotation));
};

// Function REDGame.REDControlModule_DigitalFigure.GetInnerCameraPos
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37075])
// Parameter Info:
// struct FVector                 Location                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_DigitalFigure::GetInnerCameraPos(struct FVector& Location)
{
	static UFunction* uFnGetInnerCameraPos = nullptr;

	if (!uFnGetInnerCameraPos)
	{
		uFnGetInnerCameraPos = UFunction::FindFunction("Function REDGame.REDControlModule_DigitalFigure.GetInnerCameraPos");
	}

	UREDControlModule_DigitalFigure_execGetInnerCameraPos_Params GetInnerCameraPos_Params;
	memset(&GetInnerCameraPos_Params, 0, sizeof(GetInnerCameraPos_Params));
	memcpy_s(&GetInnerCameraPos_Params.Location, sizeof(GetInnerCameraPos_Params.Location), &Location, sizeof(Location));

	this->ProcessEvent(uFnGetInnerCameraPos, &GetInnerCameraPos_Params, nullptr);

	memcpy_s(&Location, sizeof(Location), &GetInnerCameraPos_Params.Location, sizeof(GetInnerCameraPos_Params.Location));
};

// Function REDGame.REDControlModule_Lobby.UpdateRotation
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDControlModule_Lobby::UpdateRotation(float DeltaTime)
{
	static UFunction* uFnUpdateRotation = nullptr;

	if (!uFnUpdateRotation)
	{
		uFnUpdateRotation = UFunction::FindFunction("Function REDGame.REDControlModule_Lobby.UpdateRotation");
	}

	UREDControlModule_Lobby_execUpdateRotation_Params UpdateRotation_Params;
	memset(&UpdateRotation_Params, 0, sizeof(UpdateRotation_Params));
	memcpy_s(&UpdateRotation_Params.DeltaTime, sizeof(UpdateRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateRotation, &UpdateRotation_Params, nullptr);
};

// Function REDGame.REDControlModule_Lobby.ProcessMove
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void UREDControlModule_Lobby::ProcessMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* uFnProcessMove = nullptr;

	if (!uFnProcessMove)
	{
		uFnProcessMove = UFunction::FindFunction("Function REDGame.REDControlModule_Lobby.ProcessMove");
	}

	UREDControlModule_Lobby_execProcessMove_Params ProcessMove_Params;
	memset(&ProcessMove_Params, 0, sizeof(ProcessMove_Params));
	memcpy_s(&ProcessMove_Params.DeltaTime, sizeof(ProcessMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessMove_Params.newAccel, sizeof(ProcessMove_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&ProcessMove_Params.DoubleClickMove, sizeof(ProcessMove_Params.DoubleClickMove), &DoubleClickMove, sizeof(DoubleClickMove));
	memcpy_s(&ProcessMove_Params.DeltaRot, sizeof(ProcessMove_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnProcessMove, &ProcessMove_Params, nullptr);
};

// Function REDGame.REDControlModule_Lobby.GetInnerCameraRot
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37076])
// Parameter Info:
// struct FRotator                Rotation                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_Lobby::GetInnerCameraRot(struct FRotator& Rotation)
{
	static UFunction* uFnGetInnerCameraRot = nullptr;

	if (!uFnGetInnerCameraRot)
	{
		uFnGetInnerCameraRot = UFunction::FindFunction("Function REDGame.REDControlModule_Lobby.GetInnerCameraRot");
	}

	UREDControlModule_Lobby_execGetInnerCameraRot_Params GetInnerCameraRot_Params;
	memset(&GetInnerCameraRot_Params, 0, sizeof(GetInnerCameraRot_Params));
	memcpy_s(&GetInnerCameraRot_Params.Rotation, sizeof(GetInnerCameraRot_Params.Rotation), &Rotation, sizeof(Rotation));

	this->ProcessEvent(uFnGetInnerCameraRot, &GetInnerCameraRot_Params, nullptr);

	memcpy_s(&Rotation, sizeof(Rotation), &GetInnerCameraRot_Params.Rotation, sizeof(GetInnerCameraRot_Params.Rotation));
};

// Function REDGame.REDControlModule_Lobby.GetInnerCameraPos
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37075])
// Parameter Info:
// struct FVector                 Location                       (CPF_Parm | CPF_OutParm)

void UREDControlModule_Lobby::GetInnerCameraPos(struct FVector& Location)
{
	static UFunction* uFnGetInnerCameraPos = nullptr;

	if (!uFnGetInnerCameraPos)
	{
		uFnGetInnerCameraPos = UFunction::FindFunction("Function REDGame.REDControlModule_Lobby.GetInnerCameraPos");
	}

	UREDControlModule_Lobby_execGetInnerCameraPos_Params GetInnerCameraPos_Params;
	memset(&GetInnerCameraPos_Params, 0, sizeof(GetInnerCameraPos_Params));
	memcpy_s(&GetInnerCameraPos_Params.Location, sizeof(GetInnerCameraPos_Params.Location), &Location, sizeof(Location));

	this->ProcessEvent(uFnGetInnerCameraPos, &GetInnerCameraPos_Params, nullptr);

	memcpy_s(&Location, sizeof(Location), &GetInnerCameraPos_Params.Location, sizeof(GetInnerCameraPos_Params.Location));
};

// Function REDGame.REDDebugCameraController.DebugCameraTransformCopyToClipboard
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDDebugCameraController::DebugCameraTransformCopyToClipboard()
{
	static UFunction* uFnDebugCameraTransformCopyToClipboard = nullptr;

	if (!uFnDebugCameraTransformCopyToClipboard)
	{
		uFnDebugCameraTransformCopyToClipboard = UFunction::FindFunction("Function REDGame.REDDebugCameraController.DebugCameraTransformCopyToClipboard");
	}

	AREDDebugCameraController_execDebugCameraTransformCopyToClipboard_Params DebugCameraTransformCopyToClipboard_Params;
	memset(&DebugCameraTransformCopyToClipboard_Params, 0, sizeof(DebugCameraTransformCopyToClipboard_Params));

	this->ProcessEvent(uFnDebugCameraTransformCopyToClipboard, &DebugCameraTransformCopyToClipboard_Params, nullptr);
};

// Function REDGame.REDDebugCameraController.NativeDebugCameraTransformCopyToClipboard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38511])
// Parameter Info:
// class AREDPawn_Player*         P1                             (CPF_Parm)

void AREDDebugCameraController::NativeDebugCameraTransformCopyToClipboard(class AREDPawn_Player* P1)
{
	static UFunction* uFnNativeDebugCameraTransformCopyToClipboard = nullptr;

	if (!uFnNativeDebugCameraTransformCopyToClipboard)
	{
		uFnNativeDebugCameraTransformCopyToClipboard = UFunction::FindFunction("Function REDGame.REDDebugCameraController.NativeDebugCameraTransformCopyToClipboard");
	}

	AREDDebugCameraController_execNativeDebugCameraTransformCopyToClipboard_Params NativeDebugCameraTransformCopyToClipboard_Params;
	memset(&NativeDebugCameraTransformCopyToClipboard_Params, 0, sizeof(NativeDebugCameraTransformCopyToClipboard_Params));
	NativeDebugCameraTransformCopyToClipboard_Params.P1 = P1;

	this->ProcessEvent(uFnNativeDebugCameraTransformCopyToClipboard, &NativeDebugCameraTransformCopyToClipboard_Params, nullptr);
};

// Function REDGame.REDDebugCameraController.ForceMouseUnlock
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36892])
// Parameter Info:
// uint32_t                       bUnlock                        (CPF_Parm)

void AREDDebugCameraController::ForceMouseUnlock(bool bUnlock)
{
	static UFunction* uFnForceMouseUnlock = nullptr;

	if (!uFnForceMouseUnlock)
	{
		uFnForceMouseUnlock = UFunction::FindFunction("Function REDGame.REDDebugCameraController.ForceMouseUnlock");
	}

	AREDDebugCameraController_execForceMouseUnlock_Params ForceMouseUnlock_Params;
	memset(&ForceMouseUnlock_Params, 0, sizeof(ForceMouseUnlock_Params));
	ForceMouseUnlock_Params.bUnlock = bUnlock;

	this->ProcessEvent(uFnForceMouseUnlock, &ForceMouseUnlock_Params, nullptr);
};

// Function REDGame.REDDebugCameraController.DebugCameraRot
// [0x00824202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          Pitch                          (CPF_Parm)
// float                          Roll                           (CPF_OptionalParm | CPF_Parm)
// float                          Yaw                            (CPF_OptionalParm | CPF_Parm)

void AREDDebugCameraController::DebugCameraRot(float Pitch, float Roll, float Yaw)
{
	static UFunction* uFnDebugCameraRot = nullptr;

	if (!uFnDebugCameraRot)
	{
		uFnDebugCameraRot = UFunction::FindFunction("Function REDGame.REDDebugCameraController.DebugCameraRot");
	}

	AREDDebugCameraController_execDebugCameraRot_Params DebugCameraRot_Params;
	memset(&DebugCameraRot_Params, 0, sizeof(DebugCameraRot_Params));
	memcpy_s(&DebugCameraRot_Params.Pitch, sizeof(DebugCameraRot_Params.Pitch), &Pitch, sizeof(Pitch));
	memcpy_s(&DebugCameraRot_Params.Roll, sizeof(DebugCameraRot_Params.Roll), &Roll, sizeof(Roll));
	memcpy_s(&DebugCameraRot_Params.Yaw, sizeof(DebugCameraRot_Params.Yaw), &Yaw, sizeof(Yaw));

	this->ProcessEvent(uFnDebugCameraRot, &DebugCameraRot_Params, nullptr);
};

// Function REDGame.REDDebugCameraController.DebugCameraPos
// [0x00820202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          Z                              (CPF_Parm)

void AREDDebugCameraController::DebugCameraPos(float X, float Y, float Z)
{
	static UFunction* uFnDebugCameraPos = nullptr;

	if (!uFnDebugCameraPos)
	{
		uFnDebugCameraPos = UFunction::FindFunction("Function REDGame.REDDebugCameraController.DebugCameraPos");
	}

	AREDDebugCameraController_execDebugCameraPos_Params DebugCameraPos_Params;
	memset(&DebugCameraPos_Params, 0, sizeof(DebugCameraPos_Params));
	memcpy_s(&DebugCameraPos_Params.X, sizeof(DebugCameraPos_Params.X), &X, sizeof(X));
	memcpy_s(&DebugCameraPos_Params.Y, sizeof(DebugCameraPos_Params.Y), &Y, sizeof(Y));
	memcpy_s(&DebugCameraPos_Params.Z, sizeof(DebugCameraPos_Params.Z), &Z, sizeof(Z));

	this->ProcessEvent(uFnDebugCameraPos, &DebugCameraPos_Params, nullptr);
};

// Function REDGame.REDDebugCameraController.GetPlayer
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Id                             (CPF_Parm)

class AREDPawn_Player* AREDDebugCameraController::GetPlayer(int32_t Id)
{
	static UFunction* uFnGetPlayer = nullptr;

	if (!uFnGetPlayer)
	{
		uFnGetPlayer = UFunction::FindFunction("Function REDGame.REDDebugCameraController.GetPlayer");
	}

	AREDDebugCameraController_execGetPlayer_Params GetPlayer_Params;
	memset(&GetPlayer_Params, 0, sizeof(GetPlayer_Params));
	memcpy_s(&GetPlayer_Params.Id, sizeof(GetPlayer_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnGetPlayer, &GetPlayer_Params, nullptr);

	return GetPlayer_Params.ReturnValue;
};

// Function REDGame.REDDebugCameraController.UpdateLocal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40762])
// Parameter Info:

void AREDDebugCameraController::UpdateLocal()
{
	static UFunction* uFnUpdateLocal = nullptr;

	if (!uFnUpdateLocal)
	{
		uFnUpdateLocal = UFunction::FindFunction("Function REDGame.REDDebugCameraController.UpdateLocal");
	}

	AREDDebugCameraController_execUpdateLocal_Params UpdateLocal_Params;
	memset(&UpdateLocal_Params, 0, sizeof(UpdateLocal_Params));

	this->ProcessEvent(uFnUpdateLocal, &UpdateLocal_Params, nullptr);
};

// Function REDGame.REDDownloadableContentManager.Init
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDDownloadableContentManager::eventInit()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function REDGame.REDDownloadableContentManager.Init");
	}

	UREDDownloadableContentManager_eventInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
};

// Function REDGame.REDDownloadableContentManager.RefreshDLCFromNative
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDDownloadableContentManager::eventRefreshDLCFromNative()
{
	static UFunction* uFnRefreshDLCFromNative = nullptr;

	if (!uFnRefreshDLCFromNative)
	{
		uFnRefreshDLCFromNative = UFunction::FindFunction("Function REDGame.REDDownloadableContentManager.RefreshDLCFromNative");
	}

	UREDDownloadableContentManager_eventRefreshDLCFromNative_Params RefreshDLCFromNative_Params;
	memset(&RefreshDLCFromNative_Params, 0, sizeof(RefreshDLCFromNative_Params));

	this->ProcessEvent(uFnRefreshDLCFromNative, &RefreshDLCFromNative_Params, nullptr);
};

// Function REDGame.REDDownloadableContentManager.DLCPathChange
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36569])
// Parameter Info:

void UREDDownloadableContentManager::DLCPathChange()
{
	static UFunction* uFnDLCPathChange = nullptr;

	if (!uFnDLCPathChange)
	{
		uFnDLCPathChange = UFunction::FindFunction("Function REDGame.REDDownloadableContentManager.DLCPathChange");
	}

	UREDDownloadableContentManager_execDLCPathChange_Params DLCPathChange_Params;
	memset(&DLCPathChange_Params, 0, sizeof(DLCPathChange_Params));

	this->ProcessEvent(uFnDLCPathChange, &DLCPathChange_Params, nullptr);
};

// Function REDGame.REDEasyCharaSelectActor.GetSpawnPlayerInfo
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// struct FSpawnPlayerInfo        Info                           (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDEasyCharaSelectActor::GetSpawnPlayerInfo(EUE_PLAYER_ID PlayerID, struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnGetSpawnPlayerInfo = nullptr;

	if (!uFnGetSpawnPlayerInfo)
	{
		uFnGetSpawnPlayerInfo = UFunction::FindFunction("Function REDGame.REDEasyCharaSelectActor.GetSpawnPlayerInfo");
	}

	AREDEasyCharaSelectActor_execGetSpawnPlayerInfo_Params GetSpawnPlayerInfo_Params;
	memset(&GetSpawnPlayerInfo_Params, 0, sizeof(GetSpawnPlayerInfo_Params));
	memcpy_s(&GetSpawnPlayerInfo_Params.PlayerID, sizeof(GetSpawnPlayerInfo_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&GetSpawnPlayerInfo_Params.Info, sizeof(GetSpawnPlayerInfo_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnGetSpawnPlayerInfo, &GetSpawnPlayerInfo_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetSpawnPlayerInfo_Params.Info, sizeof(GetSpawnPlayerInfo_Params.Info));
};

// Function REDGame.REDEasyCharaSelectActor.GetCharaNameID
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// ECHARA_ID                      Id                             (CPF_Parm)

class FString AREDEasyCharaSelectActor::GetCharaNameID(ECHARA_ID Id)
{
	static UFunction* uFnGetCharaNameID = nullptr;

	if (!uFnGetCharaNameID)
	{
		uFnGetCharaNameID = UFunction::FindFunction("Function REDGame.REDEasyCharaSelectActor.GetCharaNameID");
	}

	AREDEasyCharaSelectActor_execGetCharaNameID_Params GetCharaNameID_Params;
	memset(&GetCharaNameID_Params, 0, sizeof(GetCharaNameID_Params));
	memcpy_s(&GetCharaNameID_Params.Id, sizeof(GetCharaNameID_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnGetCharaNameID, &GetCharaNameID_Params, nullptr);

	return GetCharaNameID_Params.ReturnValue;
};

// Function REDGame.REDEffect.SpawnEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39942])
// Parameter Info:
// class AREDPawn_Effect*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EffectName                     (CPF_Parm)
// class AREDPawn*                Parent                         (CPF_Parm)
// class UREDEffectMaterialInfo*  Info                           (CPF_Parm)

class AREDPawn_Effect* UREDEffect::SpawnEffect(const class FName& EffectName, class AREDPawn* Parent, class UREDEffectMaterialInfo* Info)
{
	static UFunction* uFnSpawnEffect = nullptr;

	if (!uFnSpawnEffect)
	{
		uFnSpawnEffect = UFunction::FindFunction("Function REDGame.REDEffect.SpawnEffect");
	}

	UREDEffect_execSpawnEffect_Params SpawnEffect_Params;
	memset(&SpawnEffect_Params, 0, sizeof(SpawnEffect_Params));
	memcpy_s(&SpawnEffect_Params.EffectName, sizeof(SpawnEffect_Params.EffectName), &EffectName, sizeof(EffectName));
	SpawnEffect_Params.Parent = Parent;
	SpawnEffect_Params.Info = Info;

	this->ProcessEvent(uFnSpawnEffect, &SpawnEffect_Params, nullptr);

	return SpawnEffect_Params.ReturnValue;
};

// Function REDGame.REDEffectMaterialInfo.GetPawnMaterialFromEffectName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37133])
// Parameter Info:
// class UREDPawnMaterials*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EffectName                     (CPF_Parm)

class UREDPawnMaterials* UREDEffectMaterialInfo::GetPawnMaterialFromEffectName(const class FName& EffectName)
{
	static UFunction* uFnGetPawnMaterialFromEffectName = nullptr;

	if (!uFnGetPawnMaterialFromEffectName)
	{
		uFnGetPawnMaterialFromEffectName = UFunction::FindFunction("Function REDGame.REDEffectMaterialInfo.GetPawnMaterialFromEffectName");
	}

	UREDEffectMaterialInfo_execGetPawnMaterialFromEffectName_Params GetPawnMaterialFromEffectName_Params;
	memset(&GetPawnMaterialFromEffectName_Params, 0, sizeof(GetPawnMaterialFromEffectName_Params));
	memcpy_s(&GetPawnMaterialFromEffectName_Params.EffectName, sizeof(GetPawnMaterialFromEffectName_Params.EffectName), &EffectName, sizeof(EffectName));

	this->ProcessEvent(uFnGetPawnMaterialFromEffectName, &GetPawnMaterialFromEffectName_Params, nullptr);

	return GetPawnMaterialFromEffectName_Params.ReturnValue;
};

// Function REDGame.REDEffectPawnPool.ReturnEffectPawn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39402])
// Parameter Info:
// class AREDPawn_Effect*         EffectPawn                     (CPF_Parm)

void UREDEffectPawnPool::ReturnEffectPawn(class AREDPawn_Effect* EffectPawn)
{
	static UFunction* uFnReturnEffectPawn = nullptr;

	if (!uFnReturnEffectPawn)
	{
		uFnReturnEffectPawn = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.ReturnEffectPawn");
	}

	UREDEffectPawnPool_execReturnEffectPawn_Params ReturnEffectPawn_Params;
	memset(&ReturnEffectPawn_Params, 0, sizeof(ReturnEffectPawn_Params));
	ReturnEffectPawn_Params.EffectPawn = EffectPawn;

	this->ProcessEvent(uFnReturnEffectPawn, &ReturnEffectPawn_Params, nullptr);
};

// Function REDGame.REDEffectPawnPool.GetPooledEffectPawn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37143])
// Parameter Info:
// class AREDPawn_Effect*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AREDPawn_Effect* UREDEffectPawnPool::GetPooledEffectPawn()
{
	static UFunction* uFnGetPooledEffectPawn = nullptr;

	if (!uFnGetPooledEffectPawn)
	{
		uFnGetPooledEffectPawn = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.GetPooledEffectPawn");
	}

	UREDEffectPawnPool_execGetPooledEffectPawn_Params GetPooledEffectPawn_Params;
	memset(&GetPooledEffectPawn_Params, 0, sizeof(GetPooledEffectPawn_Params));

	this->ProcessEvent(uFnGetPooledEffectPawn, &GetPooledEffectPawn_Params, nullptr);

	return GetPooledEffectPawn_Params.ReturnValue;
};

// Function REDGame.REDEffectPawnPool.StopSound
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDEffectPawnPool::StopSound()
{
	static UFunction* uFnStopSound = nullptr;

	if (!uFnStopSound)
	{
		uFnStopSound = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.StopSound");
	}

	UREDEffectPawnPool_execStopSound_Params StopSound_Params;
	memset(&StopSound_Params, 0, sizeof(StopSound_Params));

	this->ProcessEvent(uFnStopSound, &StopSound_Params, nullptr);
};

// Function REDGame.REDEffectPawnPool.StopSoundLocal
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Actor                          (CPF_Parm)

void UREDEffectPawnPool::StopSoundLocal(class AActor* Actor)
{
	static UFunction* uFnStopSoundLocal = nullptr;

	if (!uFnStopSoundLocal)
	{
		uFnStopSoundLocal = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.StopSoundLocal");
	}

	UREDEffectPawnPool_execStopSoundLocal_Params StopSoundLocal_Params;
	memset(&StopSoundLocal_Params, 0, sizeof(StopSoundLocal_Params));
	StopSoundLocal_Params.Actor = Actor;

	this->ProcessEvent(uFnStopSoundLocal, &StopSoundLocal_Params, nullptr);
};

// Function REDGame.REDEffectPawnPool.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AGameInfo*               gi                             (CPF_Parm)

void UREDEffectPawnPool::Reset(class AGameInfo* gi)
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.Reset");
	}

	UREDEffectPawnPool_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));
	Reset_Params.gi = gi;

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function REDGame.REDEffectPawnPool.InitPool
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AGameInfo*               gi                             (CPF_Parm)

void UREDEffectPawnPool::InitPool(class AGameInfo* gi)
{
	static UFunction* uFnInitPool = nullptr;

	if (!uFnInitPool)
	{
		uFnInitPool = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.InitPool");
	}

	UREDEffectPawnPool_execInitPool_Params InitPool_Params;
	memset(&InitPool_Params, 0, sizeof(InitPool_Params));
	InitPool_Params.gi = gi;

	this->ProcessEvent(uFnInitPool, &InitPool_Params, nullptr);
};

// Function REDGame.REDEffectPawnPool.UpdateLightVector
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40751])
// Parameter Info:

void UREDEffectPawnPool::UpdateLightVector()
{
	static UFunction* uFnUpdateLightVector = nullptr;

	if (!uFnUpdateLightVector)
	{
		uFnUpdateLightVector = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.UpdateLightVector");
	}

	UREDEffectPawnPool_execUpdateLightVector_Params UpdateLightVector_Params;
	memset(&UpdateLightVector_Params, 0, sizeof(UpdateLightVector_Params));

	this->ProcessEvent(uFnUpdateLightVector, &UpdateLightVector_Params, nullptr);
};

// Function REDGame.REDEffectPawnPool.UpdateMaterialInstanceParam
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40772])
// Parameter Info:

void UREDEffectPawnPool::UpdateMaterialInstanceParam()
{
	static UFunction* uFnUpdateMaterialInstanceParam = nullptr;

	if (!uFnUpdateMaterialInstanceParam)
	{
		uFnUpdateMaterialInstanceParam = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.UpdateMaterialInstanceParam");
	}

	UREDEffectPawnPool_execUpdateMaterialInstanceParam_Params UpdateMaterialInstanceParam_Params;
	memset(&UpdateMaterialInstanceParam_Params, 0, sizeof(UpdateMaterialInstanceParam_Params));

	this->ProcessEvent(uFnUpdateMaterialInstanceParam, &UpdateMaterialInstanceParam_Params, nullptr);
};

// Function REDGame.REDEffectPawnPool.UpdateLightVectorFromLightAnime
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40752])
// Parameter Info:
// struct FVector                 LightVector                    (CPF_Const | CPF_Parm | CPF_OutParm)

void UREDEffectPawnPool::UpdateLightVectorFromLightAnime(struct FVector& LightVector)
{
	static UFunction* uFnUpdateLightVectorFromLightAnime = nullptr;

	if (!uFnUpdateLightVectorFromLightAnime)
	{
		uFnUpdateLightVectorFromLightAnime = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.UpdateLightVectorFromLightAnime");
	}

	UREDEffectPawnPool_execUpdateLightVectorFromLightAnime_Params UpdateLightVectorFromLightAnime_Params;
	memset(&UpdateLightVectorFromLightAnime_Params, 0, sizeof(UpdateLightVectorFromLightAnime_Params));
	memcpy_s(&UpdateLightVectorFromLightAnime_Params.LightVector, sizeof(UpdateLightVectorFromLightAnime_Params.LightVector), &LightVector, sizeof(LightVector));

	this->ProcessEvent(uFnUpdateLightVectorFromLightAnime, &UpdateLightVectorFromLightAnime_Params, nullptr);

	memcpy_s(&LightVector, sizeof(LightVector), &UpdateLightVectorFromLightAnime_Params.LightVector, sizeof(UpdateLightVectorFromLightAnime_Params.LightVector));
};

// Function REDGame.REDEffectPawnPool.UpdateCameraParam
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40613])
// Parameter Info:
// float                          FOV                            (CPF_Parm)
// struct FVector                 CameraDir                      (CPF_Const | CPF_Parm | CPF_OutParm)

void UREDEffectPawnPool::UpdateCameraParam(float FOV, struct FVector& CameraDir)
{
	static UFunction* uFnUpdateCameraParam = nullptr;

	if (!uFnUpdateCameraParam)
	{
		uFnUpdateCameraParam = UFunction::FindFunction("Function REDGame.REDEffectPawnPool.UpdateCameraParam");
	}

	UREDEffectPawnPool_execUpdateCameraParam_Params UpdateCameraParam_Params;
	memset(&UpdateCameraParam_Params, 0, sizeof(UpdateCameraParam_Params));
	memcpy_s(&UpdateCameraParam_Params.FOV, sizeof(UpdateCameraParam_Params.FOV), &FOV, sizeof(FOV));
	memcpy_s(&UpdateCameraParam_Params.CameraDir, sizeof(UpdateCameraParam_Params.CameraDir), &CameraDir, sizeof(CameraDir));

	this->ProcessEvent(uFnUpdateCameraParam, &UpdateCameraParam_Params, nullptr);

	memcpy_s(&CameraDir, sizeof(CameraDir), &UpdateCameraParam_Params.CameraDir, sizeof(UpdateCameraParam_Params.CameraDir));
};

// Function REDGame.REDEmitterPool.OnParticleSystemFinishedWithColorOverride
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38819])
// Parameter Info:
// class UParticleSystemComponent* PSC                            (CPF_Parm | CPF_EditInline)

void AREDEmitterPool::OnParticleSystemFinishedWithColorOverride(class UParticleSystemComponent* PSC)
{
	static UFunction* uFnOnParticleSystemFinishedWithColorOverride = nullptr;

	if (!uFnOnParticleSystemFinishedWithColorOverride)
	{
		uFnOnParticleSystemFinishedWithColorOverride = UFunction::FindFunction("Function REDGame.REDEmitterPool.OnParticleSystemFinishedWithColorOverride");
	}

	AREDEmitterPool_execOnParticleSystemFinishedWithColorOverride_Params OnParticleSystemFinishedWithColorOverride_Params;
	memset(&OnParticleSystemFinishedWithColorOverride_Params, 0, sizeof(OnParticleSystemFinishedWithColorOverride_Params));
	OnParticleSystemFinishedWithColorOverride_Params.PSC = PSC;

	this->ProcessEvent(uFnOnParticleSystemFinishedWithColorOverride, &OnParticleSystemFinishedWithColorOverride_Params, nullptr);
};

// Function REDGame.REDEmitterPool.SetupMaterialForColorOverrideParticle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39844])
// Parameter Info:
// class UParticleSystemComponent* PSC                            (CPF_Parm | CPF_EditInline)

void AREDEmitterPool::SetupMaterialForColorOverrideParticle(class UParticleSystemComponent* PSC)
{
	static UFunction* uFnSetupMaterialForColorOverrideParticle = nullptr;

	if (!uFnSetupMaterialForColorOverrideParticle)
	{
		uFnSetupMaterialForColorOverrideParticle = UFunction::FindFunction("Function REDGame.REDEmitterPool.SetupMaterialForColorOverrideParticle");
	}

	AREDEmitterPool_execSetupMaterialForColorOverrideParticle_Params SetupMaterialForColorOverrideParticle_Params;
	memset(&SetupMaterialForColorOverrideParticle_Params, 0, sizeof(SetupMaterialForColorOverrideParticle_Params));
	SetupMaterialForColorOverrideParticle_Params.PSC = PSC;

	this->ProcessEvent(uFnSetupMaterialForColorOverrideParticle, &SetupMaterialForColorOverrideParticle_Params, nullptr);
};

// Function REDGame.REDEmitterPool.SpawnEmitter
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm | CPF_Parm)
// class AActor*                  AttachToActor                  (CPF_OptionalParm | CPF_Parm)
// class AActor*                  InInstigator                   (CPF_OptionalParm | CPF_Parm)
// int32_t                        MaxDLEPooledReuses             (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bInheritScaleFromBase          (CPF_OptionalParm | CPF_Parm)

class UParticleSystemComponent* AREDEmitterPool::eventSpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int32_t MaxDLEPooledReuses, bool bInheritScaleFromBase)
{
	static UFunction* uFnSpawnEmitter = nullptr;

	if (!uFnSpawnEmitter)
	{
		uFnSpawnEmitter = UFunction::FindFunction("Function REDGame.REDEmitterPool.SpawnEmitter");
	}

	AREDEmitterPool_eventSpawnEmitter_Params SpawnEmitter_Params;
	memset(&SpawnEmitter_Params, 0, sizeof(SpawnEmitter_Params));
	SpawnEmitter_Params.EmitterTemplate = EmitterTemplate;
	memcpy_s(&SpawnEmitter_Params.SpawnLocation, sizeof(SpawnEmitter_Params.SpawnLocation), &SpawnLocation, sizeof(SpawnLocation));
	memcpy_s(&SpawnEmitter_Params.SpawnRotation, sizeof(SpawnEmitter_Params.SpawnRotation), &SpawnRotation, sizeof(SpawnRotation));
	SpawnEmitter_Params.AttachToActor = AttachToActor;
	SpawnEmitter_Params.InInstigator = InInstigator;
	memcpy_s(&SpawnEmitter_Params.MaxDLEPooledReuses, sizeof(SpawnEmitter_Params.MaxDLEPooledReuses), &MaxDLEPooledReuses, sizeof(MaxDLEPooledReuses));
	SpawnEmitter_Params.bInheritScaleFromBase = bInheritScaleFromBase;

	this->ProcessEvent(uFnSpawnEmitter, &SpawnEmitter_Params, nullptr);

	return SpawnEmitter_Params.ReturnValue;
};

// Function REDGame.REDEmitterPool.ResetMaterialInterface
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39386])
// Parameter Info:

void AREDEmitterPool::ResetMaterialInterface()
{
	static UFunction* uFnResetMaterialInterface = nullptr;

	if (!uFnResetMaterialInterface)
	{
		uFnResetMaterialInterface = UFunction::FindFunction("Function REDGame.REDEmitterPool.ResetMaterialInterface");
	}

	AREDEmitterPool_execResetMaterialInterface_Params ResetMaterialInterface_Params;
	memset(&ResetMaterialInterface_Params, 0, sizeof(ResetMaterialInterface_Params));

	this->ProcessEvent(uFnResetMaterialInterface, &ResetMaterialInterface_Params, nullptr);
};

// Function REDGame.REDEmitterPool.RoundReset
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13389])
// Parameter Info:

void AREDEmitterPool::RoundReset()
{
	static UFunction* uFnRoundReset = nullptr;

	if (!uFnRoundReset)
	{
		uFnRoundReset = UFunction::FindFunction("Function REDGame.REDEmitterPool.RoundReset");
	}

	AREDEmitterPool_execRoundReset_Params RoundReset_Params;
	memset(&RoundReset_Params, 0, sizeof(RoundReset_Params));

	this->ProcessEvent(uFnRoundReset, &RoundReset_Params, nullptr);
};

// Function REDGame.REDEmitterPool.InitPool
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37542])
// Parameter Info:

void AREDEmitterPool::InitPool()
{
	static UFunction* uFnInitPool = nullptr;

	if (!uFnInitPool)
	{
		uFnInitPool = UFunction::FindFunction("Function REDGame.REDEmitterPool.InitPool");
	}

	AREDEmitterPool_execInitPool_Params InitPool_Params;
	memset(&InitPool_Params, 0, sizeof(InitPool_Params));

	this->ProcessEvent(uFnInitPool, &InitPool_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetText
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGameCommon::eventGetText()
{
	static UFunction* uFnGetText = nullptr;

	if (!uFnGetText)
	{
		uFnGetText = UFunction::FindFunction("Function REDGame.REDGameCommon.GetText");
	}

	UREDGameCommon_eventGetText_Params GetText_Params;
	memset(&GetText_Params, 0, sizeof(GetText_Params));

	this->ProcessEvent(uFnGetText, &GetText_Params, nullptr);

	return GetText_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsIMEFormOpen
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::eventIsIMEFormOpen()
{
	static UFunction* uFnIsIMEFormOpen = nullptr;

	if (!uFnIsIMEFormOpen)
	{
		uFnIsIMEFormOpen = UFunction::FindFunction("Function REDGame.REDGameCommon.IsIMEFormOpen");
	}

	UREDGameCommon_eventIsIMEFormOpen_Params IsIMEFormOpen_Params;
	memset(&IsIMEFormOpen_Params, 0, sizeof(IsIMEFormOpen_Params));

	this->ProcessEvent(uFnIsIMEFormOpen, &IsIMEFormOpen_Params, nullptr);

	return IsIMEFormOpen_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.CancelInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGameCommon::eventCancelInput()
{
	static UFunction* uFnCancelInput = nullptr;

	if (!uFnCancelInput)
	{
		uFnCancelInput = UFunction::FindFunction("Function REDGame.REDGameCommon.CancelInput");
	}

	UREDGameCommon_eventCancelInput_Params CancelInput_Params;
	memset(&CancelInput_Params, 0, sizeof(CancelInput_Params));

	this->ProcessEvent(uFnCancelInput, &CancelInput_Params, nullptr);

	return CancelInput_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.DecideInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGameCommon::eventDecideInput()
{
	static UFunction* uFnDecideInput = nullptr;

	if (!uFnDecideInput)
	{
		uFnDecideInput = UFunction::FindFunction("Function REDGame.REDGameCommon.DecideInput");
	}

	UREDGameCommon_eventDecideInput_Params DecideInput_Params;
	memset(&DecideInput_Params, 0, sizeof(DecideInput_Params));

	this->ProcessEvent(uFnDecideInput, &DecideInput_Params, nullptr);

	return DecideInput_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.StartInput
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        maxChars                       (CPF_OptionalParm | CPF_Parm)
// class FString                  Text                           (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       _isPassword                    (CPF_OptionalParm | CPF_Parm)

bool UREDGameCommon::eventStartInput(int32_t maxChars, const class FString& Text, bool _isPassword)
{
	static UFunction* uFnStartInput = nullptr;

	if (!uFnStartInput)
	{
		uFnStartInput = UFunction::FindFunction("Function REDGame.REDGameCommon.StartInput");
	}

	UREDGameCommon_eventStartInput_Params StartInput_Params;
	memset(&StartInput_Params, 0, sizeof(StartInput_Params));
	memcpy_s(&StartInput_Params.maxChars, sizeof(StartInput_Params.maxChars), &maxChars, sizeof(maxChars));
	memcpy_s(&StartInput_Params.Text, sizeof(StartInput_Params.Text), &Text, sizeof(Text));
	StartInput_Params._isPassword = _isPassword;

	this->ProcessEvent(uFnStartInput, &StartInput_Params, nullptr);

	return StartInput_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.CleanupChatWindow
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon::CleanupChatWindow()
{
	static UFunction* uFnCleanupChatWindow = nullptr;

	if (!uFnCleanupChatWindow)
	{
		uFnCleanupChatWindow = UFunction::FindFunction("Function REDGame.REDGameCommon.CleanupChatWindow");
	}

	UREDGameCommon_execCleanupChatWindow_Params CleanupChatWindow_Params;
	memset(&CleanupChatWindow_Params, 0, sizeof(CleanupChatWindow_Params));

	this->ProcessEvent(uFnCleanupChatWindow, &CleanupChatWindow_Params, nullptr);
};

// Function REDGame.REDGameCommon.StartupChatWindow
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon::StartupChatWindow()
{
	static UFunction* uFnStartupChatWindow = nullptr;

	if (!uFnStartupChatWindow)
	{
		uFnStartupChatWindow = UFunction::FindFunction("Function REDGame.REDGameCommon.StartupChatWindow");
	}

	UREDGameCommon_execStartupChatWindow_Params StartupChatWindow_Params;
	memset(&StartupChatWindow_Params, 0, sizeof(StartupChatWindow_Params));

	this->ProcessEvent(uFnStartupChatWindow, &StartupChatWindow_Params, nullptr);
};

// Function REDGame.REDGameCommon.InitializeInstcace
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon::eventInitializeInstcace()
{
	static UFunction* uFnInitializeInstcace = nullptr;

	if (!uFnInitializeInstcace)
	{
		uFnInitializeInstcace = UFunction::FindFunction("Function REDGame.REDGameCommon.InitializeInstcace");
	}

	UREDGameCommon_eventInitializeInstcace_Params InitializeInstcace_Params;
	memset(&InitializeInstcace_Params, 0, sizeof(InitializeInstcace_Params));

	this->ProcessEvent(uFnInitializeInstcace, &InitializeInstcace_Params, nullptr);
};

// Function REDGame.REDGameCommon.IsNarrationChangeComplete
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::eventIsNarrationChangeComplete()
{
	static UFunction* uFnIsNarrationChangeComplete = nullptr;

	if (!uFnIsNarrationChangeComplete)
	{
		uFnIsNarrationChangeComplete = UFunction::FindFunction("Function REDGame.REDGameCommon.IsNarrationChangeComplete");
	}

	UREDGameCommon_eventIsNarrationChangeComplete_Params IsNarrationChangeComplete_Params;
	memset(&IsNarrationChangeComplete_Params, 0, sizeof(IsNarrationChangeComplete_Params));

	this->ProcessEvent(uFnIsNarrationChangeComplete, &IsNarrationChangeComplete_Params, nullptr);

	return IsNarrationChangeComplete_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.NarrationChangeRequest
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isBlock                        (CPF_Parm)

void UREDGameCommon::eventNarrationChangeRequest(const class FString& CharaID, bool isBlock)
{
	static UFunction* uFnNarrationChangeRequest = nullptr;

	if (!uFnNarrationChangeRequest)
	{
		uFnNarrationChangeRequest = UFunction::FindFunction("Function REDGame.REDGameCommon.NarrationChangeRequest");
	}

	UREDGameCommon_eventNarrationChangeRequest_Params NarrationChangeRequest_Params;
	memset(&NarrationChangeRequest_Params, 0, sizeof(NarrationChangeRequest_Params));
	memcpy_s(&NarrationChangeRequest_Params.CharaID, sizeof(NarrationChangeRequest_Params.CharaID), &CharaID, sizeof(CharaID));
	NarrationChangeRequest_Params.isBlock = isBlock;

	this->ProcessEvent(uFnNarrationChangeRequest, &NarrationChangeRequest_Params, nullptr);
};

// Function REDGame.REDGameCommon.SetPlaySoundPadSpeaker
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39795])
// Parameter Info:
// int32_t                        PadID                          (CPF_Parm)

void UREDGameCommon::SetPlaySoundPadSpeaker(int32_t PadID)
{
	static UFunction* uFnSetPlaySoundPadSpeaker = nullptr;

	if (!uFnSetPlaySoundPadSpeaker)
	{
		uFnSetPlaySoundPadSpeaker = UFunction::FindFunction("Function REDGame.REDGameCommon.SetPlaySoundPadSpeaker");
	}

	UREDGameCommon_execSetPlaySoundPadSpeaker_Params SetPlaySoundPadSpeaker_Params;
	memset(&SetPlaySoundPadSpeaker_Params, 0, sizeof(SetPlaySoundPadSpeaker_Params));
	memcpy_s(&SetPlaySoundPadSpeaker_Params.PadID, sizeof(SetPlaySoundPadSpeaker_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnSetPlaySoundPadSpeaker, &SetPlaySoundPadSpeaker_Params, nullptr);
};

// Function REDGame.REDGameCommon.SetCurrentNarrationCharaID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39719])
// Parameter Info:
// int32_t                        svID                           (CPF_Parm)

void UREDGameCommon::SetCurrentNarrationCharaID(int32_t svID)
{
	static UFunction* uFnSetCurrentNarrationCharaID = nullptr;

	if (!uFnSetCurrentNarrationCharaID)
	{
		uFnSetCurrentNarrationCharaID = UFunction::FindFunction("Function REDGame.REDGameCommon.SetCurrentNarrationCharaID");
	}

	UREDGameCommon_execSetCurrentNarrationCharaID_Params SetCurrentNarrationCharaID_Params;
	memset(&SetCurrentNarrationCharaID_Params, 0, sizeof(SetCurrentNarrationCharaID_Params));
	memcpy_s(&SetCurrentNarrationCharaID_Params.svID, sizeof(SetCurrentNarrationCharaID_Params.svID), &svID, sizeof(svID));

	this->ProcessEvent(uFnSetCurrentNarrationCharaID, &SetCurrentNarrationCharaID_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetCurrentNarrationCharaID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37040])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGameCommon::GetCurrentNarrationCharaID()
{
	static UFunction* uFnGetCurrentNarrationCharaID = nullptr;

	if (!uFnGetCurrentNarrationCharaID)
	{
		uFnGetCurrentNarrationCharaID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetCurrentNarrationCharaID");
	}

	UREDGameCommon_execGetCurrentNarrationCharaID_Params GetCurrentNarrationCharaID_Params;
	memset(&GetCurrentNarrationCharaID_Params, 0, sizeof(GetCurrentNarrationCharaID_Params));

	this->ProcessEvent(uFnGetCurrentNarrationCharaID, &GetCurrentNarrationCharaID_Params, nullptr);

	return GetCurrentNarrationCharaID_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetMainQuadrant
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37094])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGameCommon::GetMainQuadrant()
{
	static UFunction* uFnGetMainQuadrant = nullptr;

	if (!uFnGetMainQuadrant)
	{
		uFnGetMainQuadrant = UFunction::FindFunction("Function REDGame.REDGameCommon.GetMainQuadrant");
	}

	UREDGameCommon_execGetMainQuadrant_Params GetMainQuadrant_Params;
	memset(&GetMainQuadrant_Params, 0, sizeof(GetMainQuadrant_Params));

	this->ProcessEvent(uFnGetMainQuadrant, &GetMainQuadrant_Params, nullptr);

	return GetMainQuadrant_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetControllerName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37031])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        ControllerId                   (CPF_Parm)

class FString UREDGameCommon::GetControllerName(int32_t ControllerId)
{
	static UFunction* uFnGetControllerName = nullptr;

	if (!uFnGetControllerName)
	{
		uFnGetControllerName = UFunction::FindFunction("Function REDGame.REDGameCommon.GetControllerName");
	}

	UREDGameCommon_execGetControllerName_Params GetControllerName_Params;
	memset(&GetControllerName_Params, 0, sizeof(GetControllerName_Params));
	memcpy_s(&GetControllerName_Params.ControllerId, sizeof(GetControllerName_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnGetControllerName, &GetControllerName_Params, nullptr);

	return GetControllerName_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsUsePS3Controller
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37926])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

bool UREDGameCommon::IsUsePS3Controller(int32_t ControllerId)
{
	static UFunction* uFnIsUsePS3Controller = nullptr;

	if (!uFnIsUsePS3Controller)
	{
		uFnIsUsePS3Controller = UFunction::FindFunction("Function REDGame.REDGameCommon.IsUsePS3Controller");
	}

	UREDGameCommon_execIsUsePS3Controller_Params IsUsePS3Controller_Params;
	memset(&IsUsePS3Controller_Params, 0, sizeof(IsUsePS3Controller_Params));
	memcpy_s(&IsUsePS3Controller_Params.ControllerId, sizeof(IsUsePS3Controller_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnIsUsePS3Controller, &IsUsePS3Controller_Params, nullptr);

	return IsUsePS3Controller_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsControllerConnected
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[22881])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ControllerId                   (CPF_Parm)

bool UREDGameCommon::IsControllerConnected(int32_t ControllerId)
{
	static UFunction* uFnIsControllerConnected = nullptr;

	if (!uFnIsControllerConnected)
	{
		uFnIsControllerConnected = UFunction::FindFunction("Function REDGame.REDGameCommon.IsControllerConnected");
	}

	UREDGameCommon_execIsControllerConnected_Params IsControllerConnected_Params;
	memset(&IsControllerConnected_Params, 0, sizeof(IsControllerConnected_Params));
	memcpy_s(&IsControllerConnected_Params.ControllerId, sizeof(IsControllerConnected_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnIsControllerConnected, &IsControllerConnected_Params, nullptr);

	return IsControllerConnected_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.ResetLightBarColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39384])
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)

void UREDGameCommon::ResetLightBarColor(int32_t ControllerId)
{
	static UFunction* uFnResetLightBarColor = nullptr;

	if (!uFnResetLightBarColor)
	{
		uFnResetLightBarColor = UFunction::FindFunction("Function REDGame.REDGameCommon.ResetLightBarColor");
	}

	UREDGameCommon_execResetLightBarColor_Params ResetLightBarColor_Params;
	memset(&ResetLightBarColor_Params, 0, sizeof(ResetLightBarColor_Params));
	memcpy_s(&ResetLightBarColor_Params.ControllerId, sizeof(ResetLightBarColor_Params.ControllerId), &ControllerId, sizeof(ControllerId));

	this->ProcessEvent(uFnResetLightBarColor, &ResetLightBarColor_Params, nullptr);
};

// Function REDGame.REDGameCommon.SetLightBarColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39763])
// Parameter Info:
// int32_t                        ControllerId                   (CPF_Parm)
// struct FColor                  lightBarColor                  (CPF_Parm)

void UREDGameCommon::SetLightBarColor(int32_t ControllerId, const struct FColor& lightBarColor)
{
	static UFunction* uFnSetLightBarColor = nullptr;

	if (!uFnSetLightBarColor)
	{
		uFnSetLightBarColor = UFunction::FindFunction("Function REDGame.REDGameCommon.SetLightBarColor");
	}

	UREDGameCommon_execSetLightBarColor_Params SetLightBarColor_Params;
	memset(&SetLightBarColor_Params, 0, sizeof(SetLightBarColor_Params));
	memcpy_s(&SetLightBarColor_Params.ControllerId, sizeof(SetLightBarColor_Params.ControllerId), &ControllerId, sizeof(ControllerId));
	memcpy_s(&SetLightBarColor_Params.lightBarColor, sizeof(SetLightBarColor_Params.lightBarColor), &lightBarColor, sizeof(lightBarColor));

	this->ProcessEvent(uFnSetLightBarColor, &SetLightBarColor_Params, nullptr);
};

// Function REDGame.REDGameCommon.DrawStatusIcon_Sub
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36605])
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// int32_t                        Counter                        (CPF_Parm)
// uint32_t                       inverse                        (CPF_Parm)

void UREDGameCommon::DrawStatusIcon_Sub(int32_t Type, int32_t X, int32_t Y, int32_t Counter, bool inverse)
{
	static UFunction* uFnDrawStatusIcon_Sub = nullptr;

	if (!uFnDrawStatusIcon_Sub)
	{
		uFnDrawStatusIcon_Sub = UFunction::FindFunction("Function REDGame.REDGameCommon.DrawStatusIcon_Sub");
	}

	UREDGameCommon_execDrawStatusIcon_Sub_Params DrawStatusIcon_Sub_Params;
	memset(&DrawStatusIcon_Sub_Params, 0, sizeof(DrawStatusIcon_Sub_Params));
	memcpy_s(&DrawStatusIcon_Sub_Params.Type, sizeof(DrawStatusIcon_Sub_Params.Type), &Type, sizeof(Type));
	memcpy_s(&DrawStatusIcon_Sub_Params.X, sizeof(DrawStatusIcon_Sub_Params.X), &X, sizeof(X));
	memcpy_s(&DrawStatusIcon_Sub_Params.Y, sizeof(DrawStatusIcon_Sub_Params.Y), &Y, sizeof(Y));
	memcpy_s(&DrawStatusIcon_Sub_Params.Counter, sizeof(DrawStatusIcon_Sub_Params.Counter), &Counter, sizeof(Counter));
	DrawStatusIcon_Sub_Params.inverse = inverse;

	this->ProcessEvent(uFnDrawStatusIcon_Sub, &DrawStatusIcon_Sub_Params, nullptr);
};

// Function REDGame.REDGameCommon.DispNowSaving
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36563])
// Parameter Info:

void UREDGameCommon::DispNowSaving()
{
	static UFunction* uFnDispNowSaving = nullptr;

	if (!uFnDispNowSaving)
	{
		uFnDispNowSaving = UFunction::FindFunction("Function REDGame.REDGameCommon.DispNowSaving");
	}

	UREDGameCommon_execDispNowSaving_Params DispNowSaving_Params;
	memset(&DispNowSaving_Params, 0, sizeof(DispNowSaving_Params));

	this->ProcessEvent(uFnDispNowSaving, &DispNowSaving_Params, nullptr);
};

// Function REDGame.REDGameCommon.DispNowConnecting
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36561])
// Parameter Info:

void UREDGameCommon::DispNowConnecting()
{
	static UFunction* uFnDispNowConnecting = nullptr;

	if (!uFnDispNowConnecting)
	{
		uFnDispNowConnecting = UFunction::FindFunction("Function REDGame.REDGameCommon.DispNowConnecting");
	}

	UREDGameCommon_execDispNowConnecting_Params DispNowConnecting_Params;
	memset(&DispNowConnecting_Params, 0, sizeof(DispNowConnecting_Params));

	this->ProcessEvent(uFnDispNowConnecting, &DispNowConnecting_Params, nullptr);
};

// Function REDGame.REDGameCommon.DispNowLoading
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36562])
// Parameter Info:

void UREDGameCommon::DispNowLoading()
{
	static UFunction* uFnDispNowLoading = nullptr;

	if (!uFnDispNowLoading)
	{
		uFnDispNowLoading = UFunction::FindFunction("Function REDGame.REDGameCommon.DispNowLoading");
	}

	UREDGameCommon_execDispNowLoading_Params DispNowLoading_Params;
	memset(&DispNowLoading_Params, 0, sizeof(DispNowLoading_Params));

	this->ProcessEvent(uFnDispNowLoading, &DispNowLoading_Params, nullptr);
};

// Function REDGame.REDGameCommon.DrawStatusIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36604])
// Parameter Info:

void UREDGameCommon::DrawStatusIcon()
{
	static UFunction* uFnDrawStatusIcon = nullptr;

	if (!uFnDrawStatusIcon)
	{
		uFnDrawStatusIcon = UFunction::FindFunction("Function REDGame.REDGameCommon.DrawStatusIcon");
	}

	UREDGameCommon_execDrawStatusIcon_Params DrawStatusIcon_Params;
	memset(&DrawStatusIcon_Params, 0, sizeof(DrawStatusIcon_Params));

	this->ProcessEvent(uFnDrawStatusIcon, &DrawStatusIcon_Params, nullptr);
};

// Function REDGame.REDGameCommon.UpdateStatusIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40861])
// Parameter Info:

void UREDGameCommon::UpdateStatusIcon()
{
	static UFunction* uFnUpdateStatusIcon = nullptr;

	if (!uFnUpdateStatusIcon)
	{
		uFnUpdateStatusIcon = UFunction::FindFunction("Function REDGame.REDGameCommon.UpdateStatusIcon");
	}

	UREDGameCommon_execUpdateStatusIcon_Params UpdateStatusIcon_Params;
	memset(&UpdateStatusIcon_Params, 0, sizeof(UpdateStatusIcon_Params));

	this->ProcessEvent(uFnUpdateStatusIcon, &UpdateStatusIcon_Params, nullptr);
};

// Function REDGame.REDGameCommon.IsSteam
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37872])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsSteam()
{
	static UFunction* uFnIsSteam = nullptr;

	if (!uFnIsSteam)
	{
		uFnIsSteam = UFunction::FindFunction("Function REDGame.REDGameCommon.IsSteam");
	}

	UREDGameCommon_execIsSteam_Params IsSteam_Params;
	memset(&IsSteam_Params, 0, sizeof(IsSteam_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsSteam, &IsSteam_Params, nullptr);

	return IsSteam_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsRevelator2_Option_ForBattle
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37829])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsRevelator2_Option_ForBattle()
{
	static UFunction* uFnIsRevelator2_Option_ForBattle = nullptr;

	if (!uFnIsRevelator2_Option_ForBattle)
	{
		uFnIsRevelator2_Option_ForBattle = UFunction::FindFunction("Function REDGame.REDGameCommon.IsRevelator2_Option_ForBattle");
	}

	UREDGameCommon_execIsRevelator2_Option_ForBattle_Params IsRevelator2_Option_ForBattle_Params;
	memset(&IsRevelator2_Option_ForBattle_Params, 0, sizeof(IsRevelator2_Option_ForBattle_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsRevelator2_Option_ForBattle, &IsRevelator2_Option_ForBattle_Params, nullptr);

	return IsRevelator2_Option_ForBattle_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsRevelator2_Option
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37828])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsRevelator2_Option()
{
	static UFunction* uFnIsRevelator2_Option = nullptr;

	if (!uFnIsRevelator2_Option)
	{
		uFnIsRevelator2_Option = UFunction::FindFunction("Function REDGame.REDGameCommon.IsRevelator2_Option");
	}

	UREDGameCommon_execIsRevelator2_Option_Params IsRevelator2_Option_Params;
	memset(&IsRevelator2_Option_Params, 0, sizeof(IsRevelator2_Option_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsRevelator2_Option, &IsRevelator2_Option_Params, nullptr);

	return IsRevelator2_Option_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsRevelator2_DLC
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37827])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsRevelator2_DLC()
{
	static UFunction* uFnIsRevelator2_DLC = nullptr;

	if (!uFnIsRevelator2_DLC)
	{
		uFnIsRevelator2_DLC = UFunction::FindFunction("Function REDGame.REDGameCommon.IsRevelator2_DLC");
	}

	UREDGameCommon_execIsRevelator2_DLC_Params IsRevelator2_DLC_Params;
	memset(&IsRevelator2_DLC_Params, 0, sizeof(IsRevelator2_DLC_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsRevelator2_DLC, &IsRevelator2_DLC_Params, nullptr);

	return IsRevelator2_DLC_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsEarlyAccess
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37643])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsEarlyAccess()
{
	static UFunction* uFnIsEarlyAccess = nullptr;

	if (!uFnIsEarlyAccess)
	{
		uFnIsEarlyAccess = UFunction::FindFunction("Function REDGame.REDGameCommon.IsEarlyAccess");
	}

	UREDGameCommon_execIsEarlyAccess_Params IsEarlyAccess_Params;
	memset(&IsEarlyAccess_Params, 0, sizeof(IsEarlyAccess_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsEarlyAccess, &IsEarlyAccess_Params, nullptr);

	return IsEarlyAccess_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsEnableTournament
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37647])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsEnableTournament()
{
	static UFunction* uFnIsEnableTournament = nullptr;

	if (!uFnIsEnableTournament)
	{
		uFnIsEnableTournament = UFunction::FindFunction("Function REDGame.REDGameCommon.IsEnableTournament");
	}

	UREDGameCommon_execIsEnableTournament_Params IsEnableTournament_Params;
	memset(&IsEnableTournament_Params, 0, sizeof(IsEnableTournament_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsEnableTournament, &IsEnableTournament_Params, nullptr);

	return IsEnableTournament_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsCHNRom
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37622])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsCHNRom()
{
	static UFunction* uFnIsCHNRom = nullptr;

	if (!uFnIsCHNRom)
	{
		uFnIsCHNRom = UFunction::FindFunction("Function REDGame.REDGameCommon.IsCHNRom");
	}

	UREDGameCommon_execIsCHNRom_Params IsCHNRom_Params;
	memset(&IsCHNRom_Params, 0, sizeof(IsCHNRom_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsCHNRom, &IsCHNRom_Params, nullptr);

	return IsCHNRom_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsAksysMB
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37593])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsAksysMB()
{
	static UFunction* uFnIsAksysMB = nullptr;

	if (!uFnIsAksysMB)
	{
		uFnIsAksysMB = UFunction::FindFunction("Function REDGame.REDGameCommon.IsAksysMB");
	}

	UREDGameCommon_execIsAksysMB_Params IsAksysMB_Params;
	memset(&IsAksysMB_Params, 0, sizeof(IsAksysMB_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsAksysMB, &IsAksysMB_Params, nullptr);

	return IsAksysMB_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsPSPlusTrial
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37796])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsPSPlusTrial()
{
	static UFunction* uFnIsPSPlusTrial = nullptr;

	if (!uFnIsPSPlusTrial)
	{
		uFnIsPSPlusTrial = UFunction::FindFunction("Function REDGame.REDGameCommon.IsPSPlusTrial");
	}

	UREDGameCommon_execIsPSPlusTrial_Params IsPSPlusTrial_Params;
	memset(&IsPSPlusTrial_Params, 0, sizeof(IsPSPlusTrial_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsPSPlusTrial, &IsPSPlusTrial_Params, nullptr);

	return IsPSPlusTrial_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsConsumer
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37628])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsConsumer()
{
	static UFunction* uFnIsConsumer = nullptr;

	if (!uFnIsConsumer)
	{
		uFnIsConsumer = UFunction::FindFunction("Function REDGame.REDGameCommon.IsConsumer");
	}

	UREDGameCommon_execIsConsumer_Params IsConsumer_Params;
	memset(&IsConsumer_Params, 0, sizeof(IsConsumer_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsConsumer, &IsConsumer_Params, nullptr);

	return IsConsumer_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsE3Rom
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37642])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsE3Rom()
{
	static UFunction* uFnIsE3Rom = nullptr;

	if (!uFnIsE3Rom)
	{
		uFnIsE3Rom = UFunction::FindFunction("Function REDGame.REDGameCommon.IsE3Rom");
	}

	UREDGameCommon_execIsE3Rom_Params IsE3Rom_Params;
	memset(&IsE3Rom_Params, 0, sizeof(IsE3Rom_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsE3Rom, &IsE3Rom_Params, nullptr);

	return IsE3Rom_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.LocationTest_SetupInfo
// [0x00020001] (FUNC_Final | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon::LocationTest_SetupInfo()
{
	static UFunction* uFnLocationTest_SetupInfo = nullptr;

	if (!uFnLocationTest_SetupInfo)
	{
		uFnLocationTest_SetupInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.LocationTest_SetupInfo");
	}

	UREDGameCommon_execLocationTest_SetupInfo_Params LocationTest_SetupInfo_Params;
	memset(&LocationTest_SetupInfo_Params, 0, sizeof(LocationTest_SetupInfo_Params));

	this->ProcessEvent(uFnLocationTest_SetupInfo, &LocationTest_SetupInfo_Params, nullptr);
};

// Function REDGame.REDGameCommon.IsLocationTest
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37714])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsLocationTest()
{
	static UFunction* uFnIsLocationTest = nullptr;

	if (!uFnIsLocationTest)
	{
		uFnIsLocationTest = UFunction::FindFunction("Function REDGame.REDGameCommon.IsLocationTest");
	}

	UREDGameCommon_execIsLocationTest_Params IsLocationTest_Params;
	memset(&IsLocationTest_Params, 0, sizeof(IsLocationTest_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnIsLocationTest, &IsLocationTest_Params, nullptr);

	return IsLocationTest_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.UnregistExternalTexture2DArray
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDTexture2DArray*      texArray                       (CPF_Parm)

void UREDGameCommon::eventUnregistExternalTexture2DArray(class UREDTexture2DArray* texArray)
{
	static UFunction* uFnUnregistExternalTexture2DArray = nullptr;

	if (!uFnUnregistExternalTexture2DArray)
	{
		uFnUnregistExternalTexture2DArray = UFunction::FindFunction("Function REDGame.REDGameCommon.UnregistExternalTexture2DArray");
	}

	UREDGameCommon_eventUnregistExternalTexture2DArray_Params UnregistExternalTexture2DArray_Params;
	memset(&UnregistExternalTexture2DArray_Params, 0, sizeof(UnregistExternalTexture2DArray_Params));
	UnregistExternalTexture2DArray_Params.texArray = texArray;

	this->ProcessEvent(uFnUnregistExternalTexture2DArray, &UnregistExternalTexture2DArray_Params, nullptr);
};

// Function REDGame.REDGameCommon.RegistExternalTexture2DArray
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDTexture2DArray*      texArray                       (CPF_Parm)

void UREDGameCommon::eventRegistExternalTexture2DArray(class UREDTexture2DArray* texArray)
{
	static UFunction* uFnRegistExternalTexture2DArray = nullptr;

	if (!uFnRegistExternalTexture2DArray)
	{
		uFnRegistExternalTexture2DArray = UFunction::FindFunction("Function REDGame.REDGameCommon.RegistExternalTexture2DArray");
	}

	UREDGameCommon_eventRegistExternalTexture2DArray_Params RegistExternalTexture2DArray_Params;
	memset(&RegistExternalTexture2DArray_Params, 0, sizeof(RegistExternalTexture2DArray_Params));
	RegistExternalTexture2DArray_Params.texArray = texArray;

	this->ProcessEvent(uFnRegistExternalTexture2DArray, &RegistExternalTexture2DArray_Params, nullptr);
};

// Function REDGame.REDGameCommon.ClearInterludeAssets
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36224])
// Parameter Info:

void UREDGameCommon::ClearInterludeAssets()
{
	static UFunction* uFnClearInterludeAssets = nullptr;

	if (!uFnClearInterludeAssets)
	{
		uFnClearInterludeAssets = UFunction::FindFunction("Function REDGame.REDGameCommon.ClearInterludeAssets");
	}

	UREDGameCommon_execClearInterludeAssets_Params ClearInterludeAssets_Params;
	memset(&ClearInterludeAssets_Params, 0, sizeof(ClearInterludeAssets_Params));

	this->ProcessEvent(uFnClearInterludeAssets, &ClearInterludeAssets_Params, nullptr);
};

// Function REDGame.REDGameCommon.LockInterludeAssets
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38086])
// Parameter Info:

void UREDGameCommon::LockInterludeAssets()
{
	static UFunction* uFnLockInterludeAssets = nullptr;

	if (!uFnLockInterludeAssets)
	{
		uFnLockInterludeAssets = UFunction::FindFunction("Function REDGame.REDGameCommon.LockInterludeAssets");
	}

	UREDGameCommon_execLockInterludeAssets_Params LockInterludeAssets_Params;
	memset(&LockInterludeAssets_Params, 0, sizeof(LockInterludeAssets_Params));

	this->ProcessEvent(uFnLockInterludeAssets, &LockInterludeAssets_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetInstance
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37077])
// Parameter Info:
// class UREDGameCommon*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UREDGameCommon* UREDGameCommon::GetInstance()
{
	static UFunction* uFnGetInstance = nullptr;

	if (!uFnGetInstance)
	{
		uFnGetInstance = UFunction::FindFunction("Function REDGame.REDGameCommon.GetInstance");
	}

	UREDGameCommon_execGetInstance_Params GetInstance_Params;
	memset(&GetInstance_Params, 0, sizeof(GetInstance_Params));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnGetInstance, &GetInstance_Params, nullptr);

	return GetInstance_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetPackageString
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EPKG_NAME                      Id                             (CPF_Parm)
// uint32_t                       isBattle                       (CPF_OptionalParm | CPF_Parm)

class FString UREDGameCommon::eventGetPackageString(EPKG_NAME Id, bool isBattle)
{
	static UFunction* uFnGetPackageString = nullptr;

	if (!uFnGetPackageString)
	{
		uFnGetPackageString = UFunction::FindFunction("Function REDGame.REDGameCommon.GetPackageString");
	}

	UREDGameCommon_eventGetPackageString_Params GetPackageString_Params;
	memset(&GetPackageString_Params, 0, sizeof(GetPackageString_Params));
	memcpy_s(&GetPackageString_Params.Id, sizeof(GetPackageString_Params.Id), &Id, sizeof(Id));
	GetPackageString_Params.isBattle = isBattle;

	this->ProcessEvent(uFnGetPackageString, &GetPackageString_Params, nullptr);

	return GetPackageString_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetNextSceneCommand
// [0x00024003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_SCENE_ID                   Id                             (CPF_Parm)
// uint32_t                       forSeamlessTravel              (CPF_OptionalParm | CPF_Parm)

class FString UREDGameCommon::GetNextSceneCommand(EUE_SCENE_ID Id, bool forSeamlessTravel)
{
	static UFunction* uFnGetNextSceneCommand = nullptr;

	if (!uFnGetNextSceneCommand)
	{
		uFnGetNextSceneCommand = UFunction::FindFunction("Function REDGame.REDGameCommon.GetNextSceneCommand");
	}

	UREDGameCommon_execGetNextSceneCommand_Params GetNextSceneCommand_Params;
	memset(&GetNextSceneCommand_Params, 0, sizeof(GetNextSceneCommand_Params));
	memcpy_s(&GetNextSceneCommand_Params.Id, sizeof(GetNextSceneCommand_Params.Id), &Id, sizeof(Id));
	GetNextSceneCommand_Params.forSeamlessTravel = forSeamlessTravel;

	this->ProcessEvent(uFnGetNextSceneCommand, &GetNextSceneCommand_Params, nullptr);

	return GetNextSceneCommand_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetMeshIDString
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        MeshID                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

class FString UREDGameCommon::eventGetMeshIDString(int32_t MeshID, const class FString& CharaID)
{
	static UFunction* uFnGetMeshIDString = nullptr;

	if (!uFnGetMeshIDString)
	{
		uFnGetMeshIDString = UFunction::FindFunction("Function REDGame.REDGameCommon.GetMeshIDString");
	}

	UREDGameCommon_eventGetMeshIDString_Params GetMeshIDString_Params;
	memset(&GetMeshIDString_Params, 0, sizeof(GetMeshIDString_Params));
	memcpy_s(&GetMeshIDString_Params.MeshID, sizeof(GetMeshIDString_Params.MeshID), &MeshID, sizeof(MeshID));
	memcpy_s(&GetMeshIDString_Params.CharaID, sizeof(GetMeshIDString_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetMeshIDString, &GetMeshIDString_Params, nullptr);

	return GetMeshIDString_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetColorIDString
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        ColorID                        (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

class FString UREDGameCommon::eventGetColorIDString(int32_t ColorID, const class FString& CharaID)
{
	static UFunction* uFnGetColorIDString = nullptr;

	if (!uFnGetColorIDString)
	{
		uFnGetColorIDString = UFunction::FindFunction("Function REDGame.REDGameCommon.GetColorIDString");
	}

	UREDGameCommon_eventGetColorIDString_Params GetColorIDString_Params;
	memset(&GetColorIDString_Params, 0, sizeof(GetColorIDString_Params));
	memcpy_s(&GetColorIDString_Params.ColorID, sizeof(GetColorIDString_Params.ColorID), &ColorID, sizeof(ColorID));
	memcpy_s(&GetColorIDString_Params.CharaID, sizeof(GetColorIDString_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetColorIDString, &GetColorIDString_Params, nullptr);

	return GetColorIDString_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsSelectableBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_BGM_ID                     Id                             (CPF_Parm)

bool UREDGameCommon::eventIsSelectableBGM(EUE_BGM_ID Id)
{
	static UFunction* uFnIsSelectableBGM = nullptr;

	if (!uFnIsSelectableBGM)
	{
		uFnIsSelectableBGM = UFunction::FindFunction("Function REDGame.REDGameCommon.IsSelectableBGM");
	}

	UREDGameCommon_eventIsSelectableBGM_Params IsSelectableBGM_Params;
	memset(&IsSelectableBGM_Params, 0, sizeof(IsSelectableBGM_Params));
	memcpy_s(&IsSelectableBGM_Params.Id, sizeof(IsSelectableBGM_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnIsSelectableBGM, &IsSelectableBGM_Params, nullptr);

	return IsSelectableBGM_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetRandomBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_BGM_ID                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BGM_ID UREDGameCommon::eventGetRandomBGM()
{
	static UFunction* uFnGetRandomBGM = nullptr;

	if (!uFnGetRandomBGM)
	{
		uFnGetRandomBGM = UFunction::FindFunction("Function REDGame.REDGameCommon.GetRandomBGM");
	}

	UREDGameCommon_eventGetRandomBGM_Params GetRandomBGM_Params;
	memset(&GetRandomBGM_Params, 0, sizeof(GetRandomBGM_Params));

	this->ProcessEvent(uFnGetRandomBGM, &GetRandomBGM_Params, nullptr);

	return static_cast<EUE_BGM_ID>(GetRandomBGM_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.BGID_to_IDForUI
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_BG_ID                      Id                             (CPF_Parm)

int32_t UREDGameCommon::BGID_to_IDForUI(EUE_BG_ID Id)
{
	static UFunction* uFnBGID_to_IDForUI = nullptr;

	if (!uFnBGID_to_IDForUI)
	{
		uFnBGID_to_IDForUI = UFunction::FindFunction("Function REDGame.REDGameCommon.BGID_to_IDForUI");
	}

	UREDGameCommon_execBGID_to_IDForUI_Params BGID_to_IDForUI_Params;
	memset(&BGID_to_IDForUI_Params, 0, sizeof(BGID_to_IDForUI_Params));
	memcpy_s(&BGID_to_IDForUI_Params.Id, sizeof(BGID_to_IDForUI_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnBGID_to_IDForUI, &BGID_to_IDForUI_Params, nullptr);

	return BGID_to_IDForUI_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsSelectableStage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_BG_ID                      Id                             (CPF_Parm)

bool UREDGameCommon::eventIsSelectableStage(EUE_BG_ID Id)
{
	static UFunction* uFnIsSelectableStage = nullptr;

	if (!uFnIsSelectableStage)
	{
		uFnIsSelectableStage = UFunction::FindFunction("Function REDGame.REDGameCommon.IsSelectableStage");
	}

	UREDGameCommon_eventIsSelectableStage_Params IsSelectableStage_Params;
	memset(&IsSelectableStage_Params, 0, sizeof(IsSelectableStage_Params));
	memcpy_s(&IsSelectableStage_Params.Id, sizeof(IsSelectableStage_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnIsSelectableStage, &IsSelectableStage_Params, nullptr);

	return IsSelectableStage_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetRandomStage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_BG_ID                      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BG_ID UREDGameCommon::eventGetRandomStage()
{
	static UFunction* uFnGetRandomStage = nullptr;

	if (!uFnGetRandomStage)
	{
		uFnGetRandomStage = UFunction::FindFunction("Function REDGame.REDGameCommon.GetRandomStage");
	}

	UREDGameCommon_eventGetRandomStage_Params GetRandomStage_Params;
	memset(&GetRandomStage_Params, 0, sizeof(GetRandomStage_Params));

	this->ProcessEvent(uFnGetRandomStage, &GetRandomStage_Params, nullptr);

	return static_cast<EUE_BG_ID>(GetRandomStage_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.ArcadeMode_StepStage
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGameCommon::eventArcadeMode_StepStage(EUE_PLAYER_ID Player)
{
	static UFunction* uFnArcadeMode_StepStage = nullptr;

	if (!uFnArcadeMode_StepStage)
	{
		uFnArcadeMode_StepStage = UFunction::FindFunction("Function REDGame.REDGameCommon.ArcadeMode_StepStage");
	}

	UREDGameCommon_eventArcadeMode_StepStage_Params ArcadeMode_StepStage_Params;
	memset(&ArcadeMode_StepStage_Params, 0, sizeof(ArcadeMode_StepStage_Params));
	memcpy_s(&ArcadeMode_StepStage_Params.Player, sizeof(ArcadeMode_StepStage_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnArcadeMode_StepStage, &ArcadeMode_StepStage_Params, nullptr);

	return ArcadeMode_StepStage_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsPlayerColorExChara
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37771])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  exCharaID                      (CPF_Const | CPF_Parm | CPF_NeedCtorLink)

bool UREDGameCommon::IsPlayerColorExChara(const class FString& exCharaID)
{
	static UFunction* uFnIsPlayerColorExChara = nullptr;

	if (!uFnIsPlayerColorExChara)
	{
		uFnIsPlayerColorExChara = UFunction::FindFunction("Function REDGame.REDGameCommon.IsPlayerColorExChara");
	}

	UREDGameCommon_execIsPlayerColorExChara_Params IsPlayerColorExChara_Params;
	memset(&IsPlayerColorExChara_Params, 0, sizeof(IsPlayerColorExChara_Params));
	memcpy_s(&IsPlayerColorExChara_Params.exCharaID, sizeof(IsPlayerColorExChara_Params.exCharaID), &exCharaID, sizeof(exCharaID));

	this->ProcessEvent(uFnIsPlayerColorExChara, &IsPlayerColorExChara_Params, nullptr);

	return IsPlayerColorExChara_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetPlayerColorExCharaMaterial
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37137])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  exCharaID                      (CPF_Const | CPF_Parm | CPF_NeedCtorLink)

class FString UREDGameCommon::GetPlayerColorExCharaMaterial(const class FString& exCharaID)
{
	static UFunction* uFnGetPlayerColorExCharaMaterial = nullptr;

	if (!uFnGetPlayerColorExCharaMaterial)
	{
		uFnGetPlayerColorExCharaMaterial = UFunction::FindFunction("Function REDGame.REDGameCommon.GetPlayerColorExCharaMaterial");
	}

	UREDGameCommon_execGetPlayerColorExCharaMaterial_Params GetPlayerColorExCharaMaterial_Params;
	memset(&GetPlayerColorExCharaMaterial_Params, 0, sizeof(GetPlayerColorExCharaMaterial_Params));
	memcpy_s(&GetPlayerColorExCharaMaterial_Params.exCharaID, sizeof(GetPlayerColorExCharaMaterial_Params.exCharaID), &exCharaID, sizeof(exCharaID));

	this->ProcessEvent(uFnGetPlayerColorExCharaMaterial, &GetPlayerColorExCharaMaterial_Params, nullptr);

	return GetPlayerColorExCharaMaterial_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetPlayerColorExCharaMatPackage
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37138])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  exCharaID                      (CPF_Const | CPF_Parm | CPF_NeedCtorLink)

class FString UREDGameCommon::GetPlayerColorExCharaMatPackage(const class FString& exCharaID)
{
	static UFunction* uFnGetPlayerColorExCharaMatPackage = nullptr;

	if (!uFnGetPlayerColorExCharaMatPackage)
	{
		uFnGetPlayerColorExCharaMatPackage = UFunction::FindFunction("Function REDGame.REDGameCommon.GetPlayerColorExCharaMatPackage");
	}

	UREDGameCommon_execGetPlayerColorExCharaMatPackage_Params GetPlayerColorExCharaMatPackage_Params;
	memset(&GetPlayerColorExCharaMatPackage_Params, 0, sizeof(GetPlayerColorExCharaMatPackage_Params));
	memcpy_s(&GetPlayerColorExCharaMatPackage_Params.exCharaID, sizeof(GetPlayerColorExCharaMatPackage_Params.exCharaID), &exCharaID, sizeof(exCharaID));

	this->ProcessEvent(uFnGetPlayerColorExCharaMatPackage, &GetPlayerColorExCharaMatPackage_Params, nullptr);

	return GetPlayerColorExCharaMatPackage_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.ArcadeMode_IsDarkColor
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35444])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGameCommon::ArcadeMode_IsDarkColor(EUE_PLAYER_ID Player)
{
	static UFunction* uFnArcadeMode_IsDarkColor = nullptr;

	if (!uFnArcadeMode_IsDarkColor)
	{
		uFnArcadeMode_IsDarkColor = UFunction::FindFunction("Function REDGame.REDGameCommon.ArcadeMode_IsDarkColor");
	}

	UREDGameCommon_execArcadeMode_IsDarkColor_Params ArcadeMode_IsDarkColor_Params;
	memset(&ArcadeMode_IsDarkColor_Params, 0, sizeof(ArcadeMode_IsDarkColor_Params));
	memcpy_s(&ArcadeMode_IsDarkColor_Params.Player, sizeof(ArcadeMode_IsDarkColor_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnArcadeMode_IsDarkColor, &ArcadeMode_IsDarkColor_Params, nullptr);

	return ArcadeMode_IsDarkColor_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.ArcadeMode_IsBoss
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGameCommon::eventArcadeMode_IsBoss(EUE_PLAYER_ID Player)
{
	static UFunction* uFnArcadeMode_IsBoss = nullptr;

	if (!uFnArcadeMode_IsBoss)
	{
		uFnArcadeMode_IsBoss = UFunction::FindFunction("Function REDGame.REDGameCommon.ArcadeMode_IsBoss");
	}

	UREDGameCommon_eventArcadeMode_IsBoss_Params ArcadeMode_IsBoss_Params;
	memset(&ArcadeMode_IsBoss_Params, 0, sizeof(ArcadeMode_IsBoss_Params));
	memcpy_s(&ArcadeMode_IsBoss_Params.Player, sizeof(ArcadeMode_IsBoss_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnArcadeMode_IsBoss, &ArcadeMode_IsBoss_Params, nullptr);

	return ArcadeMode_IsBoss_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.ArcadeMode_SetEnemyInfoFromStage
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGameCommon::eventArcadeMode_SetEnemyInfoFromStage(EUE_PLAYER_ID Player)
{
	static UFunction* uFnArcadeMode_SetEnemyInfoFromStage = nullptr;

	if (!uFnArcadeMode_SetEnemyInfoFromStage)
	{
		uFnArcadeMode_SetEnemyInfoFromStage = UFunction::FindFunction("Function REDGame.REDGameCommon.ArcadeMode_SetEnemyInfoFromStage");
	}

	UREDGameCommon_eventArcadeMode_SetEnemyInfoFromStage_Params ArcadeMode_SetEnemyInfoFromStage_Params;
	memset(&ArcadeMode_SetEnemyInfoFromStage_Params, 0, sizeof(ArcadeMode_SetEnemyInfoFromStage_Params));
	memcpy_s(&ArcadeMode_SetEnemyInfoFromStage_Params.Player, sizeof(ArcadeMode_SetEnemyInfoFromStage_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnArcadeMode_SetEnemyInfoFromStage, &ArcadeMode_SetEnemyInfoFromStage_Params, nullptr);
};

// Function REDGame.REDGameCommon.ArcadeMode_SetupOnlyDramaBattle
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EBATTLE_DRAMA_ID               dramaID                        (CPF_Parm)

bool UREDGameCommon::eventArcadeMode_SetupOnlyDramaBattle(EBATTLE_DRAMA_ID dramaID)
{
	static UFunction* uFnArcadeMode_SetupOnlyDramaBattle = nullptr;

	if (!uFnArcadeMode_SetupOnlyDramaBattle)
	{
		uFnArcadeMode_SetupOnlyDramaBattle = UFunction::FindFunction("Function REDGame.REDGameCommon.ArcadeMode_SetupOnlyDramaBattle");
	}

	UREDGameCommon_eventArcadeMode_SetupOnlyDramaBattle_Params ArcadeMode_SetupOnlyDramaBattle_Params;
	memset(&ArcadeMode_SetupOnlyDramaBattle_Params, 0, sizeof(ArcadeMode_SetupOnlyDramaBattle_Params));
	memcpy_s(&ArcadeMode_SetupOnlyDramaBattle_Params.dramaID, sizeof(ArcadeMode_SetupOnlyDramaBattle_Params.dramaID), &dramaID, sizeof(dramaID));

	this->ProcessEvent(uFnArcadeMode_SetupOnlyDramaBattle, &ArcadeMode_SetupOnlyDramaBattle_Params, nullptr);

	return ArcadeMode_SetupOnlyDramaBattle_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.ArcadeMode_IsNoRev2DramaChara
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

bool UREDGameCommon::eventArcadeMode_IsNoRev2DramaChara(const class FString& CharaID)
{
	static UFunction* uFnArcadeMode_IsNoRev2DramaChara = nullptr;

	if (!uFnArcadeMode_IsNoRev2DramaChara)
	{
		uFnArcadeMode_IsNoRev2DramaChara = UFunction::FindFunction("Function REDGame.REDGameCommon.ArcadeMode_IsNoRev2DramaChara");
	}

	UREDGameCommon_eventArcadeMode_IsNoRev2DramaChara_Params ArcadeMode_IsNoRev2DramaChara_Params;
	memset(&ArcadeMode_IsNoRev2DramaChara_Params, 0, sizeof(ArcadeMode_IsNoRev2DramaChara_Params));
	memcpy_s(&ArcadeMode_IsNoRev2DramaChara_Params.CharaID, sizeof(ArcadeMode_IsNoRev2DramaChara_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnArcadeMode_IsNoRev2DramaChara, &ArcadeMode_IsNoRev2DramaChara_Params, nullptr);

	return ArcadeMode_IsNoRev2DramaChara_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetRandomChara
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGameCommon::eventGetRandomChara()
{
	static UFunction* uFnGetRandomChara = nullptr;

	if (!uFnGetRandomChara)
	{
		uFnGetRandomChara = UFunction::FindFunction("Function REDGame.REDGameCommon.GetRandomChara");
	}

	UREDGameCommon_eventGetRandomChara_Params GetRandomChara_Params;
	memset(&GetRandomChara_Params, 0, sizeof(GetRandomChara_Params));

	this->ProcessEvent(uFnGetRandomChara, &GetRandomChara_Params, nullptr);

	return GetRandomChara_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.SetRandomCharaInfo
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon::SetRandomCharaInfo()
{
	static UFunction* uFnSetRandomCharaInfo = nullptr;

	if (!uFnSetRandomCharaInfo)
	{
		uFnSetRandomCharaInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.SetRandomCharaInfo");
	}

	UREDGameCommon_execSetRandomCharaInfo_Params SetRandomCharaInfo_Params;
	memset(&SetRandomCharaInfo_Params, 0, sizeof(SetRandomCharaInfo_Params));

	this->ProcessEvent(uFnSetRandomCharaInfo, &SetRandomCharaInfo_Params, nullptr);
};

// Function REDGame.REDGameCommon.SetDefaultCharaInfo
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

void UREDGameCommon::eventSetDefaultCharaInfo(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnSetDefaultCharaInfo = nullptr;

	if (!uFnSetDefaultCharaInfo)
	{
		uFnSetDefaultCharaInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.SetDefaultCharaInfo");
	}

	UREDGameCommon_eventSetDefaultCharaInfo_Params SetDefaultCharaInfo_Params;
	memset(&SetDefaultCharaInfo_Params, 0, sizeof(SetDefaultCharaInfo_Params));
	memcpy_s(&SetDefaultCharaInfo_Params.PlayerID, sizeof(SetDefaultCharaInfo_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnSetDefaultCharaInfo, &SetDefaultCharaInfo_Params, nullptr);
};

// Function REDGame.REDGameCommon.IsExcludeRandomChara
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  EnemyID                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bDrama                         (CPF_Parm)

bool UREDGameCommon::IsExcludeRandomChara(const class FString& CharaID, const class FString& EnemyID, bool bDrama)
{
	static UFunction* uFnIsExcludeRandomChara = nullptr;

	if (!uFnIsExcludeRandomChara)
	{
		uFnIsExcludeRandomChara = UFunction::FindFunction("Function REDGame.REDGameCommon.IsExcludeRandomChara");
	}

	UREDGameCommon_execIsExcludeRandomChara_Params IsExcludeRandomChara_Params;
	memset(&IsExcludeRandomChara_Params, 0, sizeof(IsExcludeRandomChara_Params));
	memcpy_s(&IsExcludeRandomChara_Params.CharaID, sizeof(IsExcludeRandomChara_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&IsExcludeRandomChara_Params.EnemyID, sizeof(IsExcludeRandomChara_Params.EnemyID), &EnemyID, sizeof(EnemyID));
	IsExcludeRandomChara_Params.bDrama = bDrama;

	this->ProcessEvent(uFnIsExcludeRandomChara, &IsExcludeRandomChara_Params, nullptr);

	return IsExcludeRandomChara_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.InitializeParam
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon::InitializeParam()
{
	static UFunction* uFnInitializeParam = nullptr;

	if (!uFnInitializeParam)
	{
		uFnInitializeParam = UFunction::FindFunction("Function REDGame.REDGameCommon.InitializeParam");
	}

	UREDGameCommon_execInitializeParam_Params InitializeParam_Params;
	memset(&InitializeParam_Params, 0, sizeof(InitializeParam_Params));

	this->ProcessEvent(uFnInitializeParam, &InitializeParam_Params, nullptr);
};

// Function REDGame.REDGameCommon.InitializeCharaSelectParam
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon::InitializeCharaSelectParam()
{
	static UFunction* uFnInitializeCharaSelectParam = nullptr;

	if (!uFnInitializeCharaSelectParam)
	{
		uFnInitializeCharaSelectParam = UFunction::FindFunction("Function REDGame.REDGameCommon.InitializeCharaSelectParam");
	}

	UREDGameCommon_execInitializeCharaSelectParam_Params InitializeCharaSelectParam_Params;
	memset(&InitializeCharaSelectParam_Params, 0, sizeof(InitializeCharaSelectParam_Params));

	this->ProcessEvent(uFnInitializeCharaSelectParam, &InitializeCharaSelectParam_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetCostumeName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37035])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        CostumeID                      (CPF_Parm)

class FString UREDGameCommon::GetCostumeName(const class FString& CharaID, int32_t CostumeID)
{
	static UFunction* uFnGetCostumeName = nullptr;

	if (!uFnGetCostumeName)
	{
		uFnGetCostumeName = UFunction::FindFunction("Function REDGame.REDGameCommon.GetCostumeName");
	}

	UREDGameCommon_execGetCostumeName_Params GetCostumeName_Params;
	memset(&GetCostumeName_Params, 0, sizeof(GetCostumeName_Params));
	memcpy_s(&GetCostumeName_Params.CharaID, sizeof(GetCostumeName_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&GetCostumeName_Params.CostumeID, sizeof(GetCostumeName_Params.CostumeID), &CostumeID, sizeof(CostumeID));

	this->ProcessEvent(uFnGetCostumeName, &GetCostumeName_Params, nullptr);

	return GetCostumeName_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsSelectableCostume
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37845])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        CostumeID                      (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGameCommon::IsSelectableCostume(const class FString& CharaID, int32_t CostumeID, EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsSelectableCostume = nullptr;

	if (!uFnIsSelectableCostume)
	{
		uFnIsSelectableCostume = UFunction::FindFunction("Function REDGame.REDGameCommon.IsSelectableCostume");
	}

	UREDGameCommon_execIsSelectableCostume_Params IsSelectableCostume_Params;
	memset(&IsSelectableCostume_Params, 0, sizeof(IsSelectableCostume_Params));
	memcpy_s(&IsSelectableCostume_Params.CharaID, sizeof(IsSelectableCostume_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&IsSelectableCostume_Params.CostumeID, sizeof(IsSelectableCostume_Params.CostumeID), &CostumeID, sizeof(CostumeID));
	memcpy_s(&IsSelectableCostume_Params.Player, sizeof(IsSelectableCostume_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsSelectableCostume, &IsSelectableCostume_Params, nullptr);

	return IsSelectableCostume_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetCostumeNum
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37036])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

int32_t UREDGameCommon::GetCostumeNum(const class FString& CharaID, EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetCostumeNum = nullptr;

	if (!uFnGetCostumeNum)
	{
		uFnGetCostumeNum = UFunction::FindFunction("Function REDGame.REDGameCommon.GetCostumeNum");
	}

	UREDGameCommon_execGetCostumeNum_Params GetCostumeNum_Params;
	memset(&GetCostumeNum_Params, 0, sizeof(GetCostumeNum_Params));
	memcpy_s(&GetCostumeNum_Params.CharaID, sizeof(GetCostumeNum_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&GetCostumeNum_Params.Player, sizeof(GetCostumeNum_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetCostumeNum, &GetCostumeNum_Params, nullptr);

	return GetCostumeNum_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetCostumeMaxNum
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37034])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGameCommon::GetCostumeMaxNum(const class FString& CharaID)
{
	static UFunction* uFnGetCostumeMaxNum = nullptr;

	if (!uFnGetCostumeMaxNum)
	{
		uFnGetCostumeMaxNum = UFunction::FindFunction("Function REDGame.REDGameCommon.GetCostumeMaxNum");
	}

	UREDGameCommon_execGetCostumeMaxNum_Params GetCostumeMaxNum_Params;
	memset(&GetCostumeMaxNum_Params, 0, sizeof(GetCostumeMaxNum_Params));
	memcpy_s(&GetCostumeMaxNum_Params.CharaID, sizeof(GetCostumeMaxNum_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetCostumeMaxNum, &GetCostumeMaxNum_Params, nullptr);

	return GetCostumeMaxNum_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetDefaultCostumeID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37056])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGameCommon::GetDefaultCostumeID(const class FString& CharaID)
{
	static UFunction* uFnGetDefaultCostumeID = nullptr;

	if (!uFnGetDefaultCostumeID)
	{
		uFnGetDefaultCostumeID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetDefaultCostumeID");
	}

	UREDGameCommon_execGetDefaultCostumeID_Params GetDefaultCostumeID_Params;
	memset(&GetDefaultCostumeID_Params, 0, sizeof(GetDefaultCostumeID_Params));
	memcpy_s(&GetDefaultCostumeID_Params.CharaID, sizeof(GetDefaultCostumeID_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetDefaultCostumeID, &GetDefaultCostumeID_Params, nullptr);

	return GetDefaultCostumeID_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsPlayableChara
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37769])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

bool UREDGameCommon::IsPlayableChara(const class FString& CharaID)
{
	static UFunction* uFnIsPlayableChara = nullptr;

	if (!uFnIsPlayableChara)
	{
		uFnIsPlayableChara = UFunction::FindFunction("Function REDGame.REDGameCommon.IsPlayableChara");
	}

	UREDGameCommon_execIsPlayableChara_Params IsPlayableChara_Params;
	memset(&IsPlayableChara_Params, 0, sizeof(IsPlayableChara_Params));
	memcpy_s(&IsPlayableChara_Params.CharaID, sizeof(IsPlayableChara_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnIsPlayableChara, &IsPlayableChara_Params, nullptr);

	return IsPlayableChara_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsNeedChallengeModeUI
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37740])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsNeedChallengeModeUI()
{
	static UFunction* uFnIsNeedChallengeModeUI = nullptr;

	if (!uFnIsNeedChallengeModeUI)
	{
		uFnIsNeedChallengeModeUI = UFunction::FindFunction("Function REDGame.REDGameCommon.IsNeedChallengeModeUI");
	}

	UREDGameCommon_execIsNeedChallengeModeUI_Params IsNeedChallengeModeUI_Params;
	memset(&IsNeedChallengeModeUI_Params, 0, sizeof(IsNeedChallengeModeUI_Params));

	this->ProcessEvent(uFnIsNeedChallengeModeUI, &IsNeedChallengeModeUI_Params, nullptr);

	return IsNeedChallengeModeUI_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.FreeTrial_SetupInfo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36913])
// Parameter Info:

void UREDGameCommon::FreeTrial_SetupInfo()
{
	static UFunction* uFnFreeTrial_SetupInfo = nullptr;

	if (!uFnFreeTrial_SetupInfo)
	{
		uFnFreeTrial_SetupInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.FreeTrial_SetupInfo");
	}

	UREDGameCommon_execFreeTrial_SetupInfo_Params FreeTrial_SetupInfo_Params;
	memset(&FreeTrial_SetupInfo_Params, 0, sizeof(FreeTrial_SetupInfo_Params));

	this->ProcessEvent(uFnFreeTrial_SetupInfo, &FreeTrial_SetupInfo_Params, nullptr);
};

// Function REDGame.REDGameCommon.IsFreeTrialPlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37672])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsFreeTrialPlay()
{
	static UFunction* uFnIsFreeTrialPlay = nullptr;

	if (!uFnIsFreeTrialPlay)
	{
		uFnIsFreeTrialPlay = UFunction::FindFunction("Function REDGame.REDGameCommon.IsFreeTrialPlay");
	}

	UREDGameCommon_execIsFreeTrialPlay_Params IsFreeTrialPlay_Params;
	memset(&IsFreeTrialPlay_Params, 0, sizeof(IsFreeTrialPlay_Params));

	this->ProcessEvent(uFnIsFreeTrialPlay, &IsFreeTrialPlay_Params, nullptr);

	return IsFreeTrialPlay_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.SetFreeTrialPlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39751])
// Parameter Info:
// uint32_t                       Src                            (CPF_Parm)

void UREDGameCommon::SetFreeTrialPlay(bool Src)
{
	static UFunction* uFnSetFreeTrialPlay = nullptr;

	if (!uFnSetFreeTrialPlay)
	{
		uFnSetFreeTrialPlay = UFunction::FindFunction("Function REDGame.REDGameCommon.SetFreeTrialPlay");
	}

	UREDGameCommon_execSetFreeTrialPlay_Params SetFreeTrialPlay_Params;
	memset(&SetFreeTrialPlay_Params, 0, sizeof(SetFreeTrialPlay_Params));
	SetFreeTrialPlay_Params.Src = Src;

	this->ProcessEvent(uFnSetFreeTrialPlay, &SetFreeTrialPlay_Params, nullptr);
};

// Function REDGame.REDGameCommon.IsEnableFreeTrial
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37644])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsEnableFreeTrial()
{
	static UFunction* uFnIsEnableFreeTrial = nullptr;

	if (!uFnIsEnableFreeTrial)
	{
		uFnIsEnableFreeTrial = UFunction::FindFunction("Function REDGame.REDGameCommon.IsEnableFreeTrial");
	}

	UREDGameCommon_execIsEnableFreeTrial_Params IsEnableFreeTrial_Params;
	memset(&IsEnableFreeTrial_Params, 0, sizeof(IsEnableFreeTrial_Params));

	this->ProcessEvent(uFnIsEnableFreeTrial, &IsEnableFreeTrial_Params, nullptr);

	return IsEnableFreeTrial_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsSelectDFMode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37848])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsSelectDFMode()
{
	static UFunction* uFnIsSelectDFMode = nullptr;

	if (!uFnIsSelectDFMode)
	{
		uFnIsSelectDFMode = UFunction::FindFunction("Function REDGame.REDGameCommon.IsSelectDFMode");
	}

	UREDGameCommon_execIsSelectDFMode_Params IsSelectDFMode_Params;
	memset(&IsSelectDFMode_Params, 0, sizeof(IsSelectDFMode_Params));

	this->ProcessEvent(uFnIsSelectDFMode, &IsSelectDFMode_Params, nullptr);

	return IsSelectDFMode_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsInRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37693])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsInRoom()
{
	static UFunction* uFnIsInRoom = nullptr;

	if (!uFnIsInRoom)
	{
		uFnIsInRoom = UFunction::FindFunction("Function REDGame.REDGameCommon.IsInRoom");
	}

	UREDGameCommon_execIsInRoom_Params IsInRoom_Params;
	memset(&IsInRoom_Params, 0, sizeof(IsInRoom_Params));

	this->ProcessEvent(uFnIsInRoom, &IsInRoom_Params, nullptr);

	return IsInRoom_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsInLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37692])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsInLobby()
{
	static UFunction* uFnIsInLobby = nullptr;

	if (!uFnIsInLobby)
	{
		uFnIsInLobby = UFunction::FindFunction("Function REDGame.REDGameCommon.IsInLobby");
	}

	UREDGameCommon_execIsInLobby_Params IsInLobby_Params;
	memset(&IsInLobby_Params, 0, sizeof(IsInLobby_Params));

	this->ProcessEvent(uFnIsInLobby, &IsInLobby_Params, nullptr);

	return IsInLobby_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetVoiceLanguage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37195])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGameCommon::GetVoiceLanguage()
{
	static UFunction* uFnGetVoiceLanguage = nullptr;

	if (!uFnGetVoiceLanguage)
	{
		uFnGetVoiceLanguage = UFunction::FindFunction("Function REDGame.REDGameCommon.GetVoiceLanguage");
	}

	UREDGameCommon_execGetVoiceLanguage_Params GetVoiceLanguage_Params;
	memset(&GetVoiceLanguage_Params, 0, sizeof(GetVoiceLanguage_Params));

	this->ProcessEvent(uFnGetVoiceLanguage, &GetVoiceLanguage_Params, nullptr);

	return GetVoiceLanguage_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsHandicapEnableMode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37684])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_GAME_MODE                  Mode                           (CPF_Parm)

bool UREDGameCommon::IsHandicapEnableMode(EUE_GAME_MODE Mode)
{
	static UFunction* uFnIsHandicapEnableMode = nullptr;

	if (!uFnIsHandicapEnableMode)
	{
		uFnIsHandicapEnableMode = UFunction::FindFunction("Function REDGame.REDGameCommon.IsHandicapEnableMode");
	}

	UREDGameCommon_execIsHandicapEnableMode_Params IsHandicapEnableMode_Params;
	memset(&IsHandicapEnableMode_Params, 0, sizeof(IsHandicapEnableMode_Params));
	memcpy_s(&IsHandicapEnableMode_Params.Mode, sizeof(IsHandicapEnableMode_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnIsHandicapEnableMode, &IsHandicapEnableMode_Params, nullptr);

	return IsHandicapEnableMode_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsSelectableBGM_Native
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37843])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_BGM_ID                     Id                             (CPF_Parm)

bool UREDGameCommon::IsSelectableBGM_Native(EUE_BGM_ID Id)
{
	static UFunction* uFnIsSelectableBGM_Native = nullptr;

	if (!uFnIsSelectableBGM_Native)
	{
		uFnIsSelectableBGM_Native = UFunction::FindFunction("Function REDGame.REDGameCommon.IsSelectableBGM_Native");
	}

	UREDGameCommon_execIsSelectableBGM_Native_Params IsSelectableBGM_Native_Params;
	memset(&IsSelectableBGM_Native_Params, 0, sizeof(IsSelectableBGM_Native_Params));
	memcpy_s(&IsSelectableBGM_Native_Params.Id, sizeof(IsSelectableBGM_Native_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnIsSelectableBGM_Native, &IsSelectableBGM_Native_Params, nullptr);

	return IsSelectableBGM_Native_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsOnlyDramaBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37758])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsOnlyDramaBattle()
{
	static UFunction* uFnIsOnlyDramaBattle = nullptr;

	if (!uFnIsOnlyDramaBattle)
	{
		uFnIsOnlyDramaBattle = UFunction::FindFunction("Function REDGame.REDGameCommon.IsOnlyDramaBattle");
	}

	UREDGameCommon_execIsOnlyDramaBattle_Params IsOnlyDramaBattle_Params;
	memset(&IsOnlyDramaBattle_Params, 0, sizeof(IsOnlyDramaBattle_Params));

	this->ProcessEvent(uFnIsOnlyDramaBattle, &IsOnlyDramaBattle_Params, nullptr);

	return IsOnlyDramaBattle_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsDramaBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13311])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsDramaBattle()
{
	static UFunction* uFnIsDramaBattle = nullptr;

	if (!uFnIsDramaBattle)
	{
		uFnIsDramaBattle = UFunction::FindFunction("Function REDGame.REDGameCommon.IsDramaBattle");
	}

	UREDGameCommon_execIsDramaBattle_Params IsDramaBattle_Params;
	memset(&IsDramaBattle_Params, 0, sizeof(IsDramaBattle_Params));

	this->ProcessEvent(uFnIsDramaBattle, &IsDramaBattle_Params, nullptr);

	return IsDramaBattle_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.PreBattleLoadSetup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39098])
// Parameter Info:

void UREDGameCommon::PreBattleLoadSetup()
{
	static UFunction* uFnPreBattleLoadSetup = nullptr;

	if (!uFnPreBattleLoadSetup)
	{
		uFnPreBattleLoadSetup = UFunction::FindFunction("Function REDGame.REDGameCommon.PreBattleLoadSetup");
	}

	UREDGameCommon_execPreBattleLoadSetup_Params PreBattleLoadSetup_Params;
	memset(&PreBattleLoadSetup_Params, 0, sizeof(PreBattleLoadSetup_Params));

	this->ProcessEvent(uFnPreBattleLoadSetup, &PreBattleLoadSetup_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetCardInfo
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37015])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Title                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Grade                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Record                         (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// int32_t                        Icon                           (CPF_Parm | CPF_OutParm)
// int32_t                        GradeColorIndex                (CPF_Parm | CPF_OutParm)

bool UREDGameCommon::GetCardInfo(EUE_PLAYER_ID Player, class FString& PlayerName, class FString& Title, class FString& Grade, class FString& Record, int32_t& Icon, int32_t& GradeColorIndex)
{
	static UFunction* uFnGetCardInfo = nullptr;

	if (!uFnGetCardInfo)
	{
		uFnGetCardInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.GetCardInfo");
	}

	UREDGameCommon_execGetCardInfo_Params GetCardInfo_Params;
	memset(&GetCardInfo_Params, 0, sizeof(GetCardInfo_Params));
	memcpy_s(&GetCardInfo_Params.Player, sizeof(GetCardInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&GetCardInfo_Params.PlayerName, sizeof(GetCardInfo_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetCardInfo_Params.Title, sizeof(GetCardInfo_Params.Title), &Title, sizeof(Title));
	memcpy_s(&GetCardInfo_Params.Grade, sizeof(GetCardInfo_Params.Grade), &Grade, sizeof(Grade));
	memcpy_s(&GetCardInfo_Params.Record, sizeof(GetCardInfo_Params.Record), &Record, sizeof(Record));
	memcpy_s(&GetCardInfo_Params.Icon, sizeof(GetCardInfo_Params.Icon), &Icon, sizeof(Icon));
	memcpy_s(&GetCardInfo_Params.GradeColorIndex, sizeof(GetCardInfo_Params.GradeColorIndex), &GradeColorIndex, sizeof(GradeColorIndex));

	this->ProcessEvent(uFnGetCardInfo, &GetCardInfo_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetCardInfo_Params.PlayerName, sizeof(GetCardInfo_Params.PlayerName));
	memcpy_s(&Title, sizeof(Title), &GetCardInfo_Params.Title, sizeof(GetCardInfo_Params.Title));
	memcpy_s(&Grade, sizeof(Grade), &GetCardInfo_Params.Grade, sizeof(GetCardInfo_Params.Grade));
	memcpy_s(&Record, sizeof(Record), &GetCardInfo_Params.Record, sizeof(GetCardInfo_Params.Record));
	memcpy_s(&Icon, sizeof(Icon), &GetCardInfo_Params.Icon, sizeof(GetCardInfo_Params.Icon));
	memcpy_s(&GradeColorIndex, sizeof(GradeColorIndex), &GetCardInfo_Params.GradeColorIndex, sizeof(GetCardInfo_Params.GradeColorIndex));

	return GetCardInfo_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.SetupColorAndVoice
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39831])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        ColorID                        (CPF_Parm)
// uint32_t                       bOverlapCheck                  (CPF_Parm)
// uint32_t                       bInnenCheck                    (CPF_OptionalParm | CPF_Parm)

void UREDGameCommon::SetupColorAndVoice(EUE_PLAYER_ID Player, int32_t ColorID, bool bOverlapCheck, bool bInnenCheck)
{
	static UFunction* uFnSetupColorAndVoice = nullptr;

	if (!uFnSetupColorAndVoice)
	{
		uFnSetupColorAndVoice = UFunction::FindFunction("Function REDGame.REDGameCommon.SetupColorAndVoice");
	}

	UREDGameCommon_execSetupColorAndVoice_Params SetupColorAndVoice_Params;
	memset(&SetupColorAndVoice_Params, 0, sizeof(SetupColorAndVoice_Params));
	memcpy_s(&SetupColorAndVoice_Params.Player, sizeof(SetupColorAndVoice_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetupColorAndVoice_Params.ColorID, sizeof(SetupColorAndVoice_Params.ColorID), &ColorID, sizeof(ColorID));
	SetupColorAndVoice_Params.bOverlapCheck = bOverlapCheck;
	SetupColorAndVoice_Params.bInnenCheck = bInnenCheck;

	this->ProcessEvent(uFnSetupColorAndVoice, &SetupColorAndVoice_Params, nullptr);
};

// Function REDGame.REDGameCommon.SetupNewChallenger
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39850])
// Parameter Info:

void UREDGameCommon::SetupNewChallenger()
{
	static UFunction* uFnSetupNewChallenger = nullptr;

	if (!uFnSetupNewChallenger)
	{
		uFnSetupNewChallenger = UFunction::FindFunction("Function REDGame.REDGameCommon.SetupNewChallenger");
	}

	UREDGameCommon_execSetupNewChallenger_Params SetupNewChallenger_Params;
	memset(&SetupNewChallenger_Params, 0, sizeof(SetupNewChallenger_Params));

	this->ProcessEvent(uFnSetupNewChallenger, &SetupNewChallenger_Params, nullptr);
};

// Function REDGame.REDGameCommon.CheckNewChallenger
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36204])
// Parameter Info:

void UREDGameCommon::CheckNewChallenger()
{
	static UFunction* uFnCheckNewChallenger = nullptr;

	if (!uFnCheckNewChallenger)
	{
		uFnCheckNewChallenger = UFunction::FindFunction("Function REDGame.REDGameCommon.CheckNewChallenger");
	}

	UREDGameCommon_execCheckNewChallenger_Params CheckNewChallenger_Params;
	memset(&CheckNewChallenger_Params, 0, sizeof(CheckNewChallenger_Params));

	this->ProcessEvent(uFnCheckNewChallenger, &CheckNewChallenger_Params, nullptr);
};

// Function REDGame.REDGameCommon.SparringMode_SetupInfo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39939])
// Parameter Info:
// uint32_t                       isEnemySet                     (CPF_Parm)

void UREDGameCommon::SparringMode_SetupInfo(bool isEnemySet)
{
	static UFunction* uFnSparringMode_SetupInfo = nullptr;

	if (!uFnSparringMode_SetupInfo)
	{
		uFnSparringMode_SetupInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.SparringMode_SetupInfo");
	}

	UREDGameCommon_execSparringMode_SetupInfo_Params SparringMode_SetupInfo_Params;
	memset(&SparringMode_SetupInfo_Params, 0, sizeof(SparringMode_SetupInfo_Params));
	SparringMode_SetupInfo_Params.isEnemySet = isEnemySet;

	this->ProcessEvent(uFnSparringMode_SetupInfo, &SparringMode_SetupInfo_Params, nullptr);
};

// Function REDGame.REDGameCommon.ArcadeMode_SetupInfo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35446])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGameCommon::ArcadeMode_SetupInfo(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnArcadeMode_SetupInfo = nullptr;

	if (!uFnArcadeMode_SetupInfo)
	{
		uFnArcadeMode_SetupInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.ArcadeMode_SetupInfo");
	}

	UREDGameCommon_execArcadeMode_SetupInfo_Params ArcadeMode_SetupInfo_Params;
	memset(&ArcadeMode_SetupInfo_Params, 0, sizeof(ArcadeMode_SetupInfo_Params));
	memcpy_s(&ArcadeMode_SetupInfo_Params.Player, sizeof(ArcadeMode_SetupInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ArcadeMode_SetupInfo_Params.CharaID, sizeof(ArcadeMode_SetupInfo_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnArcadeMode_SetupInfo, &ArcadeMode_SetupInfo_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetVersionSuffix
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37192])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGameCommon::GetVersionSuffix()
{
	static UFunction* uFnGetVersionSuffix = nullptr;

	if (!uFnGetVersionSuffix)
	{
		uFnGetVersionSuffix = UFunction::FindFunction("Function REDGame.REDGameCommon.GetVersionSuffix");
	}

	UREDGameCommon_execGetVersionSuffix_Params GetVersionSuffix_Params;
	memset(&GetVersionSuffix_Params, 0, sizeof(GetVersionSuffix_Params));

	this->ProcessEvent(uFnGetVersionSuffix, &GetVersionSuffix_Params, nullptr);

	return GetVersionSuffix_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.REDRand
// [0x00022401] (FUNC_Final | FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[39302])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Max                            (CPF_Parm)

int32_t UREDGameCommon::REDRand(int32_t Max)
{
	static UFunction* uFnREDRand = nullptr;

	if (!uFnREDRand)
	{
		uFnREDRand = UFunction::FindFunction("Function REDGame.REDGameCommon.REDRand");
	}

	UREDGameCommon_execREDRand_Params REDRand_Params;
	memset(&REDRand_Params, 0, sizeof(REDRand_Params));
	memcpy_s(&REDRand_Params.Max, sizeof(REDRand_Params.Max), &Max, sizeof(Max));

	UREDGameCommon::StaticClass()->ProcessEvent(uFnREDRand, &REDRand_Params, nullptr);

	return REDRand_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsMOMEnable
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37729])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsMOMEnable()
{
	static UFunction* uFnIsMOMEnable = nullptr;

	if (!uFnIsMOMEnable)
	{
		uFnIsMOMEnable = UFunction::FindFunction("Function REDGame.REDGameCommon.IsMOMEnable");
	}

	UREDGameCommon_execIsMOMEnable_Params IsMOMEnable_Params;
	memset(&IsMOMEnable_Params, 0, sizeof(IsMOMEnable_Params));

	this->ProcessEvent(uFnIsMOMEnable, &IsMOMEnable_Params, nullptr);

	return IsMOMEnable_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsSparringEnable
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37865])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsSparringEnable()
{
	static UFunction* uFnIsSparringEnable = nullptr;

	if (!uFnIsSparringEnable)
	{
		uFnIsSparringEnable = UFunction::FindFunction("Function REDGame.REDGameCommon.IsSparringEnable");
	}

	UREDGameCommon_execIsSparringEnable_Params IsSparringEnable_Params;
	memset(&IsSparringEnable_Params, 0, sizeof(IsSparringEnable_Params));

	this->ProcessEvent(uFnIsSparringEnable, &IsSparringEnable_Params, nullptr);

	return IsSparringEnable_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetBGMIDFromCharaID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37009])
// Parameter Info:
// EUE_BGM_ID                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  EnemyID                        (CPF_Parm | CPF_NeedCtorLink)

EUE_BGM_ID UREDGameCommon::GetBGMIDFromCharaID(const class FString& CharaID, const class FString& EnemyID)
{
	static UFunction* uFnGetBGMIDFromCharaID = nullptr;

	if (!uFnGetBGMIDFromCharaID)
	{
		uFnGetBGMIDFromCharaID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetBGMIDFromCharaID");
	}

	UREDGameCommon_execGetBGMIDFromCharaID_Params GetBGMIDFromCharaID_Params;
	memset(&GetBGMIDFromCharaID_Params, 0, sizeof(GetBGMIDFromCharaID_Params));
	memcpy_s(&GetBGMIDFromCharaID_Params.CharaID, sizeof(GetBGMIDFromCharaID_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&GetBGMIDFromCharaID_Params.EnemyID, sizeof(GetBGMIDFromCharaID_Params.EnemyID), &EnemyID, sizeof(EnemyID));

	this->ProcessEvent(uFnGetBGMIDFromCharaID, &GetBGMIDFromCharaID_Params, nullptr);

	return static_cast<EUE_BGM_ID>(GetBGMIDFromCharaID_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.GetBGIDFromCharaID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37007])
// Parameter Info:
// EUE_BG_ID                      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

EUE_BG_ID UREDGameCommon::GetBGIDFromCharaID(const class FString& CharaID)
{
	static UFunction* uFnGetBGIDFromCharaID = nullptr;

	if (!uFnGetBGIDFromCharaID)
	{
		uFnGetBGIDFromCharaID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetBGIDFromCharaID");
	}

	UREDGameCommon_execGetBGIDFromCharaID_Params GetBGIDFromCharaID_Params;
	memset(&GetBGIDFromCharaID_Params, 0, sizeof(GetBGIDFromCharaID_Params));
	memcpy_s(&GetBGIDFromCharaID_Params.CharaID, sizeof(GetBGIDFromCharaID_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetBGIDFromCharaID, &GetBGIDFromCharaID_Params, nullptr);

	return static_cast<EUE_BG_ID>(GetBGIDFromCharaID_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.GetStaticTexture
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37181])
// Parameter Info:
// class UTexture2D*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  texName                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       withAssert                     (CPF_OptionalParm | CPF_Parm)

class UTexture2D* UREDGameCommon::GetStaticTexture(const class FString& texName, bool withAssert)
{
	static UFunction* uFnGetStaticTexture = nullptr;

	if (!uFnGetStaticTexture)
	{
		uFnGetStaticTexture = UFunction::FindFunction("Function REDGame.REDGameCommon.GetStaticTexture");
	}

	UREDGameCommon_execGetStaticTexture_Params GetStaticTexture_Params;
	memset(&GetStaticTexture_Params, 0, sizeof(GetStaticTexture_Params));
	memcpy_s(&GetStaticTexture_Params.texName, sizeof(GetStaticTexture_Params.texName), &texName, sizeof(texName));
	GetStaticTexture_Params.withAssert = withAssert;

	this->ProcessEvent(uFnGetStaticTexture, &GetStaticTexture_Params, nullptr);

	return GetStaticTexture_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.IsUseCircleToAccept
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37924])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon::IsUseCircleToAccept()
{
	static UFunction* uFnIsUseCircleToAccept = nullptr;

	if (!uFnIsUseCircleToAccept)
	{
		uFnIsUseCircleToAccept = UFunction::FindFunction("Function REDGame.REDGameCommon.IsUseCircleToAccept");
	}

	UREDGameCommon_execIsUseCircleToAccept_Params IsUseCircleToAccept_Params;
	memset(&IsUseCircleToAccept_Params, 0, sizeof(IsUseCircleToAccept_Params));

	this->ProcessEvent(uFnIsUseCircleToAccept, &IsUseCircleToAccept_Params, nullptr);

	return IsUseCircleToAccept_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetAnywhereDisp
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37003])
// Parameter Info:
// class UREDAnywhereDisp*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UREDAnywhereDisp* UREDGameCommon::GetAnywhereDisp()
{
	static UFunction* uFnGetAnywhereDisp = nullptr;

	if (!uFnGetAnywhereDisp)
	{
		uFnGetAnywhereDisp = UFunction::FindFunction("Function REDGame.REDGameCommon.GetAnywhereDisp");
	}

	UREDGameCommon_execGetAnywhereDisp_Params GetAnywhereDisp_Params;
	memset(&GetAnywhereDisp_Params, 0, sizeof(GetAnywhereDisp_Params));

	this->ProcessEvent(uFnGetAnywhereDisp, &GetAnywhereDisp_Params, nullptr);

	return GetAnywhereDisp_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetProfileFont
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37145])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFont* UREDGameCommon::GetProfileFont()
{
	static UFunction* uFnGetProfileFont = nullptr;

	if (!uFnGetProfileFont)
	{
		uFnGetProfileFont = UFunction::FindFunction("Function REDGame.REDGameCommon.GetProfileFont");
	}

	UREDGameCommon_execGetProfileFont_Params GetProfileFont_Params;
	memset(&GetProfileFont_Params, 0, sizeof(GetProfileFont_Params));

	this->ProcessEvent(uFnGetProfileFont, &GetProfileFont_Params, nullptr);

	return GetProfileFont_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetStaticREDFont
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37180])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFont* UREDGameCommon::GetStaticREDFont()
{
	static UFunction* uFnGetStaticREDFont = nullptr;

	if (!uFnGetStaticREDFont)
	{
		uFnGetStaticREDFont = UFunction::FindFunction("Function REDGame.REDGameCommon.GetStaticREDFont");
	}

	UREDGameCommon_execGetStaticREDFont_Params GetStaticREDFont_Params;
	memset(&GetStaticREDFont_Params, 0, sizeof(GetStaticREDFont_Params));

	this->ProcessEvent(uFnGetStaticREDFont, &GetStaticREDFont_Params, nullptr);

	return GetStaticREDFont_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetStaticFont
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37179])
// Parameter Info:
// class UFont*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UFont* UREDGameCommon::GetStaticFont()
{
	static UFunction* uFnGetStaticFont = nullptr;

	if (!uFnGetStaticFont)
	{
		uFnGetStaticFont = UFunction::FindFunction("Function REDGame.REDGameCommon.GetStaticFont");
	}

	UREDGameCommon_execGetStaticFont_Params GetStaticFont_Params;
	memset(&GetStaticFont_Params, 0, sizeof(GetStaticFont_Params));

	this->ProcessEvent(uFnGetStaticFont, &GetStaticFont_Params, nullptr);

	return GetStaticFont_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetBGMString
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37010])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_BGM_ID                     Id                             (CPF_Parm)

class FString UREDGameCommon::GetBGMString(EUE_BGM_ID Id)
{
	static UFunction* uFnGetBGMString = nullptr;

	if (!uFnGetBGMString)
	{
		uFnGetBGMString = UFunction::FindFunction("Function REDGame.REDGameCommon.GetBGMString");
	}

	UREDGameCommon_execGetBGMString_Params GetBGMString_Params;
	memset(&GetBGMString_Params, 0, sizeof(GetBGMString_Params));
	memcpy_s(&GetBGMString_Params.Id, sizeof(GetBGMString_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnGetBGMString, &GetBGMString_Params, nullptr);

	return GetBGMString_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetBGMID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37008])
// Parameter Info:
// EUE_BGM_ID                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BGM_ID UREDGameCommon::GetBGMID()
{
	static UFunction* uFnGetBGMID = nullptr;

	if (!uFnGetBGMID)
	{
		uFnGetBGMID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetBGMID");
	}

	UREDGameCommon_execGetBGMID_Params GetBGMID_Params;
	memset(&GetBGMID_Params, 0, sizeof(GetBGMID_Params));

	this->ProcessEvent(uFnGetBGMID, &GetBGMID_Params, nullptr);

	return static_cast<EUE_BGM_ID>(GetBGMID_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.SetBGMID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39699])
// Parameter Info:
// EUE_BGM_ID                     Id                             (CPF_Parm)

void UREDGameCommon::SetBGMID(EUE_BGM_ID Id)
{
	static UFunction* uFnSetBGMID = nullptr;

	if (!uFnSetBGMID)
	{
		uFnSetBGMID = UFunction::FindFunction("Function REDGame.REDGameCommon.SetBGMID");
	}

	UREDGameCommon_execSetBGMID_Params SetBGMID_Params;
	memset(&SetBGMID_Params, 0, sizeof(SetBGMID_Params));
	memcpy_s(&SetBGMID_Params.Id, sizeof(SetBGMID_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnSetBGMID, &SetBGMID_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetCurrentBGString
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37039])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGameCommon::GetCurrentBGString()
{
	static UFunction* uFnGetCurrentBGString = nullptr;

	if (!uFnGetCurrentBGString)
	{
		uFnGetCurrentBGString = UFunction::FindFunction("Function REDGame.REDGameCommon.GetCurrentBGString");
	}

	UREDGameCommon_execGetCurrentBGString_Params GetCurrentBGString_Params;
	memset(&GetCurrentBGString_Params, 0, sizeof(GetCurrentBGString_Params));

	this->ProcessEvent(uFnGetCurrentBGString, &GetCurrentBGString_Params, nullptr);

	return GetCurrentBGString_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetBGString
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37011])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_BG_ID                      Id                             (CPF_Parm)

class FString UREDGameCommon::GetBGString(EUE_BG_ID Id)
{
	static UFunction* uFnGetBGString = nullptr;

	if (!uFnGetBGString)
	{
		uFnGetBGString = UFunction::FindFunction("Function REDGame.REDGameCommon.GetBGString");
	}

	UREDGameCommon_execGetBGString_Params GetBGString_Params;
	memset(&GetBGString_Params, 0, sizeof(GetBGString_Params));
	memcpy_s(&GetBGString_Params.Id, sizeof(GetBGString_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnGetBGString, &GetBGString_Params, nullptr);

	return GetBGString_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetBGID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37006])
// Parameter Info:
// EUE_BG_ID                      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BG_ID UREDGameCommon::GetBGID()
{
	static UFunction* uFnGetBGID = nullptr;

	if (!uFnGetBGID)
	{
		uFnGetBGID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetBGID");
	}

	UREDGameCommon_execGetBGID_Params GetBGID_Params;
	memset(&GetBGID_Params, 0, sizeof(GetBGID_Params));

	this->ProcessEvent(uFnGetBGID, &GetBGID_Params, nullptr);

	return static_cast<EUE_BG_ID>(GetBGID_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.SetBGID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39697])
// Parameter Info:
// EUE_BG_ID                      Id                             (CPF_Parm)

void UREDGameCommon::SetBGID(EUE_BG_ID Id)
{
	static UFunction* uFnSetBGID = nullptr;

	if (!uFnSetBGID)
	{
		uFnSetBGID = UFunction::FindFunction("Function REDGame.REDGameCommon.SetBGID");
	}

	UREDGameCommon_execSetBGID_Params SetBGID_Params;
	memset(&SetBGID_Params, 0, sizeof(SetBGID_Params));
	memcpy_s(&SetBGID_Params.Id, sizeof(SetBGID_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnSetBGID, &SetBGID_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetGameMode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37064])
// Parameter Info:
// EUE_GAME_MODE                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_GAME_MODE UREDGameCommon::GetGameMode()
{
	static UFunction* uFnGetGameMode = nullptr;

	if (!uFnGetGameMode)
	{
		uFnGetGameMode = UFunction::FindFunction("Function REDGame.REDGameCommon.GetGameMode");
	}

	UREDGameCommon_execGetGameMode_Params GetGameMode_Params;
	memset(&GetGameMode_Params, 0, sizeof(GetGameMode_Params));

	this->ProcessEvent(uFnGetGameMode, &GetGameMode_Params, nullptr);

	return static_cast<EUE_GAME_MODE>(GetGameMode_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.SetGameMode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39752])
// Parameter Info:
// EUE_GAME_MODE                  Id                             (CPF_Parm)

void UREDGameCommon::SetGameMode(EUE_GAME_MODE Id)
{
	static UFunction* uFnSetGameMode = nullptr;

	if (!uFnSetGameMode)
	{
		uFnSetGameMode = UFunction::FindFunction("Function REDGame.REDGameCommon.SetGameMode");
	}

	UREDGameCommon_execSetGameMode_Params SetGameMode_Params;
	memset(&SetGameMode_Params, 0, sizeof(SetGameMode_Params));
	memcpy_s(&SetGameMode_Params.Id, sizeof(SetGameMode_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnSetGameMode, &SetGameMode_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetAnotherPlayer
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37002])
// Parameter Info:
// EUE_PLAYER_ID                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_PLAYER_ID UREDGameCommon::GetAnotherPlayer()
{
	static UFunction* uFnGetAnotherPlayer = nullptr;

	if (!uFnGetAnotherPlayer)
	{
		uFnGetAnotherPlayer = UFunction::FindFunction("Function REDGame.REDGameCommon.GetAnotherPlayer");
	}

	UREDGameCommon_execGetAnotherPlayer_Params GetAnotherPlayer_Params;
	memset(&GetAnotherPlayer_Params, 0, sizeof(GetAnotherPlayer_Params));

	this->ProcessEvent(uFnGetAnotherPlayer, &GetAnotherPlayer_Params, nullptr);

	return static_cast<EUE_PLAYER_ID>(GetAnotherPlayer_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.GetMainPlayer
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37092])
// Parameter Info:
// EUE_PLAYER_ID                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_PLAYER_ID UREDGameCommon::GetMainPlayer()
{
	static UFunction* uFnGetMainPlayer = nullptr;

	if (!uFnGetMainPlayer)
	{
		uFnGetMainPlayer = UFunction::FindFunction("Function REDGame.REDGameCommon.GetMainPlayer");
	}

	UREDGameCommon_execGetMainPlayer_Params GetMainPlayer_Params;
	memset(&GetMainPlayer_Params, 0, sizeof(GetMainPlayer_Params));

	this->ProcessEvent(uFnGetMainPlayer, &GetMainPlayer_Params, nullptr);

	return static_cast<EUE_PLAYER_ID>(GetMainPlayer_Params.ReturnValue);
};

// Function REDGame.REDGameCommon.SetMainPlayer
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39771])
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

void UREDGameCommon::SetMainPlayer(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnSetMainPlayer = nullptr;

	if (!uFnSetMainPlayer)
	{
		uFnSetMainPlayer = UFunction::FindFunction("Function REDGame.REDGameCommon.SetMainPlayer");
	}

	UREDGameCommon_execSetMainPlayer_Params SetMainPlayer_Params;
	memset(&SetMainPlayer_Params, 0, sizeof(SetMainPlayer_Params));
	memcpy_s(&SetMainPlayer_Params.PlayerID, sizeof(SetMainPlayer_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnSetMainPlayer, &SetMainPlayer_Params, nullptr);
};

// Function REDGame.REDGameCommon.IsGamePlaying
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37677])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

bool UREDGameCommon::IsGamePlaying(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnIsGamePlaying = nullptr;

	if (!uFnIsGamePlaying)
	{
		uFnIsGamePlaying = UFunction::FindFunction("Function REDGame.REDGameCommon.IsGamePlaying");
	}

	UREDGameCommon_execIsGamePlaying_Params IsGamePlaying_Params;
	memset(&IsGamePlaying_Params, 0, sizeof(IsGamePlaying_Params));
	memcpy_s(&IsGamePlaying_Params.PlayerID, sizeof(IsGamePlaying_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnIsGamePlaying, &IsGamePlaying_Params, nullptr);

	return IsGamePlaying_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.SetPlayerState
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39794])
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// EUE_PLAYERSTATE                State                          (CPF_Parm)

void UREDGameCommon::SetPlayerState(EUE_PLAYER_ID PlayerID, EUE_PLAYERSTATE State)
{
	static UFunction* uFnSetPlayerState = nullptr;

	if (!uFnSetPlayerState)
	{
		uFnSetPlayerState = UFunction::FindFunction("Function REDGame.REDGameCommon.SetPlayerState");
	}

	UREDGameCommon_execSetPlayerState_Params SetPlayerState_Params;
	memset(&SetPlayerState_Params, 0, sizeof(SetPlayerState_Params));
	memcpy_s(&SetPlayerState_Params.PlayerID, sizeof(SetPlayerState_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetPlayerState_Params.State, sizeof(SetPlayerState_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnSetPlayerState, &SetPlayerState_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetPadID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37130])
// Parameter Info:
// uint8_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

uint8_t UREDGameCommon::GetPadID(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnGetPadID = nullptr;

	if (!uFnGetPadID)
	{
		uFnGetPadID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetPadID");
	}

	UREDGameCommon_execGetPadID_Params GetPadID_Params;
	memset(&GetPadID_Params, 0, sizeof(GetPadID_Params));
	memcpy_s(&GetPadID_Params.PlayerID, sizeof(GetPadID_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnGetPadID, &GetPadID_Params, nullptr);

	return GetPadID_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.SetPadID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39787])
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// uint8_t                        pad                            (CPF_Parm)

void UREDGameCommon::SetPadID(EUE_PLAYER_ID PlayerID, uint8_t pad)
{
	static UFunction* uFnSetPadID = nullptr;

	if (!uFnSetPadID)
	{
		uFnSetPadID = UFunction::FindFunction("Function REDGame.REDGameCommon.SetPadID");
	}

	UREDGameCommon_execSetPadID_Params SetPadID_Params;
	memset(&SetPadID_Params, 0, sizeof(SetPadID_Params));
	memcpy_s(&SetPadID_Params.PlayerID, sizeof(SetPadID_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetPadID_Params.pad, sizeof(SetPadID_Params.pad), &pad, sizeof(pad));

	this->ProcessEvent(uFnSetPadID, &SetPadID_Params, nullptr);
};

// Function REDGame.REDGameCommon.IsCPU
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37632])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

bool UREDGameCommon::IsCPU(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnIsCPU = nullptr;

	if (!uFnIsCPU)
	{
		uFnIsCPU = UFunction::FindFunction("Function REDGame.REDGameCommon.IsCPU");
	}

	UREDGameCommon_execIsCPU_Params IsCPU_Params;
	memset(&IsCPU_Params, 0, sizeof(IsCPU_Params));
	memcpy_s(&IsCPU_Params.PlayerID, sizeof(IsCPU_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnIsCPU, &IsCPU_Params, nullptr);

	return IsCPU_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.SetCPU
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39717])
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// uint32_t                       cpu                            (CPF_Parm)

void UREDGameCommon::SetCPU(EUE_PLAYER_ID PlayerID, bool cpu)
{
	static UFunction* uFnSetCPU = nullptr;

	if (!uFnSetCPU)
	{
		uFnSetCPU = UFunction::FindFunction("Function REDGame.REDGameCommon.SetCPU");
	}

	UREDGameCommon_execSetCPU_Params SetCPU_Params;
	memset(&SetCPU_Params, 0, sizeof(SetCPU_Params));
	memcpy_s(&SetCPU_Params.PlayerID, sizeof(SetCPU_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	SetCPU_Params.cpu = cpu;

	this->ProcessEvent(uFnSetCPU, &SetCPU_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetStageNoForDrama
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37174])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

int32_t UREDGameCommon::GetStageNoForDrama(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnGetStageNoForDrama = nullptr;

	if (!uFnGetStageNoForDrama)
	{
		uFnGetStageNoForDrama = UFunction::FindFunction("Function REDGame.REDGameCommon.GetStageNoForDrama");
	}

	UREDGameCommon_execGetStageNoForDrama_Params GetStageNoForDrama_Params;
	memset(&GetStageNoForDrama_Params, 0, sizeof(GetStageNoForDrama_Params));
	memcpy_s(&GetStageNoForDrama_Params.PlayerID, sizeof(GetStageNoForDrama_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnGetStageNoForDrama, &GetStageNoForDrama_Params, nullptr);

	return GetStageNoForDrama_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetCostumeID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37033])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

int32_t UREDGameCommon::GetCostumeID(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnGetCostumeID = nullptr;

	if (!uFnGetCostumeID)
	{
		uFnGetCostumeID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetCostumeID");
	}

	UREDGameCommon_execGetCostumeID_Params GetCostumeID_Params;
	memset(&GetCostumeID_Params, 0, sizeof(GetCostumeID_Params));
	memcpy_s(&GetCostumeID_Params.PlayerID, sizeof(GetCostumeID_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnGetCostumeID, &GetCostumeID_Params, nullptr);

	return GetCostumeID_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetVoiceID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37194])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

int32_t UREDGameCommon::GetVoiceID(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnGetVoiceID = nullptr;

	if (!uFnGetVoiceID)
	{
		uFnGetVoiceID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetVoiceID");
	}

	UREDGameCommon_execGetVoiceID_Params GetVoiceID_Params;
	memset(&GetVoiceID_Params, 0, sizeof(GetVoiceID_Params));
	memcpy_s(&GetVoiceID_Params.PlayerID, sizeof(GetVoiceID_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnGetVoiceID, &GetVoiceID_Params, nullptr);

	return GetVoiceID_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetColorID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37023])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

int32_t UREDGameCommon::GetColorID(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnGetColorID = nullptr;

	if (!uFnGetColorID)
	{
		uFnGetColorID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetColorID");
	}

	UREDGameCommon_execGetColorID_Params GetColorID_Params;
	memset(&GetColorID_Params, 0, sizeof(GetColorID_Params));
	memcpy_s(&GetColorID_Params.PlayerID, sizeof(GetColorID_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnGetColorID, &GetColorID_Params, nullptr);

	return GetColorID_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetCharaID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13278])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

class FString UREDGameCommon::GetCharaID(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnGetCharaID = nullptr;

	if (!uFnGetCharaID)
	{
		uFnGetCharaID = UFunction::FindFunction("Function REDGame.REDGameCommon.GetCharaID");
	}

	UREDGameCommon_execGetCharaID_Params GetCharaID_Params;
	memset(&GetCharaID_Params, 0, sizeof(GetCharaID_Params));
	memcpy_s(&GetCharaID_Params.PlayerID, sizeof(GetCharaID_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnGetCharaID, &GetCharaID_Params, nullptr);

	return GetCharaID_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.SetCostumeID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39715])
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// int32_t                        CostumeID                      (CPF_Parm)

void UREDGameCommon::SetCostumeID(EUE_PLAYER_ID PlayerID, int32_t CostumeID)
{
	static UFunction* uFnSetCostumeID = nullptr;

	if (!uFnSetCostumeID)
	{
		uFnSetCostumeID = UFunction::FindFunction("Function REDGame.REDGameCommon.SetCostumeID");
	}

	UREDGameCommon_execSetCostumeID_Params SetCostumeID_Params;
	memset(&SetCostumeID_Params, 0, sizeof(SetCostumeID_Params));
	memcpy_s(&SetCostumeID_Params.PlayerID, sizeof(SetCostumeID_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetCostumeID_Params.CostumeID, sizeof(SetCostumeID_Params.CostumeID), &CostumeID, sizeof(CostumeID));

	this->ProcessEvent(uFnSetCostumeID, &SetCostumeID_Params, nullptr);
};

// Function REDGame.REDGameCommon.SetVoiceID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39865])
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// int32_t                        VoiceID                        (CPF_Parm)

void UREDGameCommon::SetVoiceID(EUE_PLAYER_ID PlayerID, int32_t VoiceID)
{
	static UFunction* uFnSetVoiceID = nullptr;

	if (!uFnSetVoiceID)
	{
		uFnSetVoiceID = UFunction::FindFunction("Function REDGame.REDGameCommon.SetVoiceID");
	}

	UREDGameCommon_execSetVoiceID_Params SetVoiceID_Params;
	memset(&SetVoiceID_Params, 0, sizeof(SetVoiceID_Params));
	memcpy_s(&SetVoiceID_Params.PlayerID, sizeof(SetVoiceID_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetVoiceID_Params.VoiceID, sizeof(SetVoiceID_Params.VoiceID), &VoiceID, sizeof(VoiceID));

	this->ProcessEvent(uFnSetVoiceID, &SetVoiceID_Params, nullptr);
};

// Function REDGame.REDGameCommon.SetColorID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39713])
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// int32_t                        ColorID                        (CPF_Parm)

void UREDGameCommon::SetColorID(EUE_PLAYER_ID PlayerID, int32_t ColorID)
{
	static UFunction* uFnSetColorID = nullptr;

	if (!uFnSetColorID)
	{
		uFnSetColorID = UFunction::FindFunction("Function REDGame.REDGameCommon.SetColorID");
	}

	UREDGameCommon_execSetColorID_Params SetColorID_Params;
	memset(&SetColorID_Params, 0, sizeof(SetColorID_Params));
	memcpy_s(&SetColorID_Params.PlayerID, sizeof(SetColorID_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetColorID_Params.ColorID, sizeof(SetColorID_Params.ColorID), &ColorID, sizeof(ColorID));

	this->ProcessEvent(uFnSetColorID, &SetColorID_Params, nullptr);
};

// Function REDGame.REDGameCommon.SetCharaID
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39708])
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGameCommon::SetCharaID(EUE_PLAYER_ID PlayerID, const class FString& CharaID)
{
	static UFunction* uFnSetCharaID = nullptr;

	if (!uFnSetCharaID)
	{
		uFnSetCharaID = UFunction::FindFunction("Function REDGame.REDGameCommon.SetCharaID");
	}

	UREDGameCommon_execSetCharaID_Params SetCharaID_Params;
	memset(&SetCharaID_Params, 0, sizeof(SetCharaID_Params));
	memcpy_s(&SetCharaID_Params.PlayerID, sizeof(SetCharaID_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetCharaID_Params.CharaID, sizeof(SetCharaID_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSetCharaID, &SetCharaID_Params, nullptr);
};

// Function REDGame.REDGameCommon.GetMainPlayerInfo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37093])
// Parameter Info:
// class UREDGameCommon_PlayerInfo* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UREDGameCommon_PlayerInfo* UREDGameCommon::GetMainPlayerInfo()
{
	static UFunction* uFnGetMainPlayerInfo = nullptr;

	if (!uFnGetMainPlayerInfo)
	{
		uFnGetMainPlayerInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.GetMainPlayerInfo");
	}

	UREDGameCommon_execGetMainPlayerInfo_Params GetMainPlayerInfo_Params;
	memset(&GetMainPlayerInfo_Params, 0, sizeof(GetMainPlayerInfo_Params));

	this->ProcessEvent(uFnGetMainPlayerInfo, &GetMainPlayerInfo_Params, nullptr);

	return GetMainPlayerInfo_Params.ReturnValue;
};

// Function REDGame.REDGameCommon.GetPlayerInfo
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[34038])
// Parameter Info:
// class UREDGameCommon_PlayerInfo* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)

class UREDGameCommon_PlayerInfo* UREDGameCommon::GetPlayerInfo(EUE_PLAYER_ID PlayerID)
{
	static UFunction* uFnGetPlayerInfo = nullptr;

	if (!uFnGetPlayerInfo)
	{
		uFnGetPlayerInfo = UFunction::FindFunction("Function REDGame.REDGameCommon.GetPlayerInfo");
	}

	UREDGameCommon_execGetPlayerInfo_Params GetPlayerInfo_Params;
	memset(&GetPlayerInfo_Params, 0, sizeof(GetPlayerInfo_Params));
	memcpy_s(&GetPlayerInfo_Params.PlayerID, sizeof(GetPlayerInfo_Params.PlayerID), &PlayerID, sizeof(PlayerID));

	this->ProcessEvent(uFnGetPlayerInfo, &GetPlayerInfo_Params, nullptr);

	return GetPlayerInfo_Params.ReturnValue;
};

// Function REDGame.REDGameCommon_Package.GetPackageString
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EPKG_NAME                      Id                             (CPF_Parm)
// uint32_t                       isBattle                       (CPF_Parm)

class FString UREDGameCommon_Package::GetPackageString(EPKG_NAME Id, bool isBattle)
{
	static UFunction* uFnGetPackageString = nullptr;

	if (!uFnGetPackageString)
	{
		uFnGetPackageString = UFunction::FindFunction("Function REDGame.REDGameCommon_Package.GetPackageString");
	}

	UREDGameCommon_Package_execGetPackageString_Params GetPackageString_Params;
	memset(&GetPackageString_Params, 0, sizeof(GetPackageString_Params));
	memcpy_s(&GetPackageString_Params.Id, sizeof(GetPackageString_Params.Id), &Id, sizeof(Id));
	GetPackageString_Params.isBattle = isBattle;

	UREDGameCommon_Package::StaticClass()->ProcessEvent(uFnGetPackageString, &GetPackageString_Params, nullptr);

	return GetPackageString_Params.ReturnValue;
};

// Function REDGame.REDGameCommon_PlayerInfo.ArcadeMode_StepStage
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon_PlayerInfo::eventArcadeMode_StepStage()
{
	static UFunction* uFnArcadeMode_StepStage = nullptr;

	if (!uFnArcadeMode_StepStage)
	{
		uFnArcadeMode_StepStage = UFunction::FindFunction("Function REDGame.REDGameCommon_PlayerInfo.ArcadeMode_StepStage");
	}

	UREDGameCommon_PlayerInfo_eventArcadeMode_StepStage_Params ArcadeMode_StepStage_Params;
	memset(&ArcadeMode_StepStage_Params, 0, sizeof(ArcadeMode_StepStage_Params));

	this->ProcessEvent(uFnArcadeMode_StepStage, &ArcadeMode_StepStage_Params, nullptr);

	return ArcadeMode_StepStage_Params.ReturnValue;
};

// Function REDGame.REDGameCommon_PlayerInfo.ArcadeMode_SetEnemyTableSub
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  _CharaID                       (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        stage                          (CPF_Parm)
// class TArray<struct FPlayerInfo_CharaChainTabel> chainTable                     (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FPlayerInfo_ArcadeInfoTable> infoTable                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGameCommon_PlayerInfo::ArcadeMode_SetEnemyTableSub(const class FString& _CharaID, int32_t stage, const class TArray<struct FPlayerInfo_CharaChainTabel>& chainTable, const class TArray<struct FPlayerInfo_ArcadeInfoTable>& infoTable)
{
	static UFunction* uFnArcadeMode_SetEnemyTableSub = nullptr;

	if (!uFnArcadeMode_SetEnemyTableSub)
	{
		uFnArcadeMode_SetEnemyTableSub = UFunction::FindFunction("Function REDGame.REDGameCommon_PlayerInfo.ArcadeMode_SetEnemyTableSub");
	}

	UREDGameCommon_PlayerInfo_execArcadeMode_SetEnemyTableSub_Params ArcadeMode_SetEnemyTableSub_Params;
	memset(&ArcadeMode_SetEnemyTableSub_Params, 0, sizeof(ArcadeMode_SetEnemyTableSub_Params));
	memcpy_s(&ArcadeMode_SetEnemyTableSub_Params._CharaID, sizeof(ArcadeMode_SetEnemyTableSub_Params._CharaID), &_CharaID, sizeof(_CharaID));
	memcpy_s(&ArcadeMode_SetEnemyTableSub_Params.stage, sizeof(ArcadeMode_SetEnemyTableSub_Params.stage), &stage, sizeof(stage));
	memcpy_s(&ArcadeMode_SetEnemyTableSub_Params.chainTable, sizeof(ArcadeMode_SetEnemyTableSub_Params.chainTable), &chainTable, sizeof(chainTable));
	memcpy_s(&ArcadeMode_SetEnemyTableSub_Params.infoTable, sizeof(ArcadeMode_SetEnemyTableSub_Params.infoTable), &infoTable, sizeof(infoTable));

	this->ProcessEvent(uFnArcadeMode_SetEnemyTableSub, &ArcadeMode_SetEnemyTableSub_Params, nullptr);
};

// Function REDGame.REDGameCommon_PlayerInfo.ArcadeMode_SetEnemyTable
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  _CharaID                       (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FPlayerInfo_CharaChainTabel> chainTable                     (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FPlayerInfo_ArcadeInfoTable> infoTable                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGameCommon_PlayerInfo::eventArcadeMode_SetEnemyTable(const class FString& _CharaID, const class TArray<struct FPlayerInfo_CharaChainTabel>& chainTable, const class TArray<struct FPlayerInfo_ArcadeInfoTable>& infoTable)
{
	static UFunction* uFnArcadeMode_SetEnemyTable = nullptr;

	if (!uFnArcadeMode_SetEnemyTable)
	{
		uFnArcadeMode_SetEnemyTable = UFunction::FindFunction("Function REDGame.REDGameCommon_PlayerInfo.ArcadeMode_SetEnemyTable");
	}

	UREDGameCommon_PlayerInfo_eventArcadeMode_SetEnemyTable_Params ArcadeMode_SetEnemyTable_Params;
	memset(&ArcadeMode_SetEnemyTable_Params, 0, sizeof(ArcadeMode_SetEnemyTable_Params));
	memcpy_s(&ArcadeMode_SetEnemyTable_Params._CharaID, sizeof(ArcadeMode_SetEnemyTable_Params._CharaID), &_CharaID, sizeof(_CharaID));
	memcpy_s(&ArcadeMode_SetEnemyTable_Params.chainTable, sizeof(ArcadeMode_SetEnemyTable_Params.chainTable), &chainTable, sizeof(chainTable));
	memcpy_s(&ArcadeMode_SetEnemyTable_Params.infoTable, sizeof(ArcadeMode_SetEnemyTable_Params.infoTable), &infoTable, sizeof(infoTable));

	this->ProcessEvent(uFnArcadeMode_SetEnemyTable, &ArcadeMode_SetEnemyTable_Params, nullptr);
};

// Function REDGame.REDGameCommon_PlayerInfo.ClearEnemyTable
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon_PlayerInfo::ClearEnemyTable()
{
	static UFunction* uFnClearEnemyTable = nullptr;

	if (!uFnClearEnemyTable)
	{
		uFnClearEnemyTable = UFunction::FindFunction("Function REDGame.REDGameCommon_PlayerInfo.ClearEnemyTable");
	}

	UREDGameCommon_PlayerInfo_execClearEnemyTable_Params ClearEnemyTable_Params;
	memset(&ClearEnemyTable_Params, 0, sizeof(ClearEnemyTable_Params));

	this->ProcessEvent(uFnClearEnemyTable, &ClearEnemyTable_Params, nullptr);
};

// Function REDGame.REDGameCommon_PlayerInfo.InitializeParam
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameCommon_PlayerInfo::eventInitializeParam()
{
	static UFunction* uFnInitializeParam = nullptr;

	if (!uFnInitializeParam)
	{
		uFnInitializeParam = UFunction::FindFunction("Function REDGame.REDGameCommon_PlayerInfo.InitializeParam");
	}

	UREDGameCommon_PlayerInfo_eventInitializeParam_Params InitializeParam_Params;
	memset(&InitializeParam_Params, 0, sizeof(InitializeParam_Params));

	this->ProcessEvent(uFnInitializeParam, &InitializeParam_Params, nullptr);
};

// Function REDGame.REDGameCommon_PlayerInfo.IsLastBattle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon_PlayerInfo::eventIsLastBattle()
{
	static UFunction* uFnIsLastBattle = nullptr;

	if (!uFnIsLastBattle)
	{
		uFnIsLastBattle = UFunction::FindFunction("Function REDGame.REDGameCommon_PlayerInfo.IsLastBattle");
	}

	UREDGameCommon_PlayerInfo_eventIsLastBattle_Params IsLastBattle_Params;
	memset(&IsLastBattle_Params, 0, sizeof(IsLastBattle_Params));

	this->ProcessEvent(uFnIsLastBattle, &IsLastBattle_Params, nullptr);

	return IsLastBattle_Params.ReturnValue;
};

// Function REDGame.REDGameCommon_PlayerInfo.IsDramaBattle
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGameCommon_PlayerInfo::eventIsDramaBattle()
{
	static UFunction* uFnIsDramaBattle = nullptr;

	if (!uFnIsDramaBattle)
	{
		uFnIsDramaBattle = UFunction::FindFunction("Function REDGame.REDGameCommon_PlayerInfo.IsDramaBattle");
	}

	UREDGameCommon_PlayerInfo_eventIsDramaBattle_Params IsDramaBattle_Params;
	memset(&IsDramaBattle_Params, 0, sizeof(IsDramaBattle_Params));

	this->ProcessEvent(uFnIsDramaBattle, &IsDramaBattle_Params, nullptr);

	return IsDramaBattle_Params.ReturnValue;
};

// Function REDGame.REDGameCommon_PlayerInfo.GetStageNumMax
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGameCommon_PlayerInfo::GetStageNumMax()
{
	static UFunction* uFnGetStageNumMax = nullptr;

	if (!uFnGetStageNumMax)
	{
		uFnGetStageNumMax = UFunction::FindFunction("Function REDGame.REDGameCommon_PlayerInfo.GetStageNumMax");
	}

	UREDGameCommon_PlayerInfo_execGetStageNumMax_Params GetStageNumMax_Params;
	memset(&GetStageNumMax_Params, 0, sizeof(GetStageNumMax_Params));

	this->ProcessEvent(uFnGetStageNumMax, &GetStageNumMax_Params, nullptr);

	return GetStageNumMax_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.DispDepthBuffer
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bDisp                          (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// struct FLinearColor            Params                         (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDGameInfo::eventDispDepthBuffer(bool bDisp, int32_t Type, struct FLinearColor& Params)
{
	static UFunction* uFnDispDepthBuffer = nullptr;

	if (!uFnDispDepthBuffer)
	{
		uFnDispDepthBuffer = UFunction::FindFunction("Function REDGame.REDGameInfo.DispDepthBuffer");
	}

	AREDGameInfo_eventDispDepthBuffer_Params DispDepthBuffer_Params;
	memset(&DispDepthBuffer_Params, 0, sizeof(DispDepthBuffer_Params));
	DispDepthBuffer_Params.bDisp = bDisp;
	memcpy_s(&DispDepthBuffer_Params.Type, sizeof(DispDepthBuffer_Params.Type), &Type, sizeof(Type));
	memcpy_s(&DispDepthBuffer_Params.Params, sizeof(DispDepthBuffer_Params.Params), &Params, sizeof(Params));

	this->ProcessEvent(uFnDispDepthBuffer, &DispDepthBuffer_Params, nullptr);

	memcpy_s(&Params, sizeof(Params), &DispDepthBuffer_Params.Params, sizeof(DispDepthBuffer_Params.Params));
};

// Function REDGame.REDGameInfo.CreateDepthViewPostProcess
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UPostProcessChain*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Id                             (CPF_Parm)

class UPostProcessChain* AREDGameInfo::CreateDepthViewPostProcess(int32_t Id)
{
	static UFunction* uFnCreateDepthViewPostProcess = nullptr;

	if (!uFnCreateDepthViewPostProcess)
	{
		uFnCreateDepthViewPostProcess = UFunction::FindFunction("Function REDGame.REDGameInfo.CreateDepthViewPostProcess");
	}

	AREDGameInfo_execCreateDepthViewPostProcess_Params CreateDepthViewPostProcess_Params;
	memset(&CreateDepthViewPostProcess_Params, 0, sizeof(CreateDepthViewPostProcess_Params));
	memcpy_s(&CreateDepthViewPostProcess_Params.Id, sizeof(CreateDepthViewPostProcess_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnCreateDepthViewPostProcess, &CreateDepthViewPostProcess_Params, nullptr);

	return CreateDepthViewPostProcess_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.RestoreDispDepthBufferMaterial
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39392])
// Parameter Info:
// class UPostProcessChain*       PP                             (CPF_Parm)

void AREDGameInfo::RestoreDispDepthBufferMaterial(class UPostProcessChain* PP)
{
	static UFunction* uFnRestoreDispDepthBufferMaterial = nullptr;

	if (!uFnRestoreDispDepthBufferMaterial)
	{
		uFnRestoreDispDepthBufferMaterial = UFunction::FindFunction("Function REDGame.REDGameInfo.RestoreDispDepthBufferMaterial");
	}

	AREDGameInfo_execRestoreDispDepthBufferMaterial_Params RestoreDispDepthBufferMaterial_Params;
	memset(&RestoreDispDepthBufferMaterial_Params, 0, sizeof(RestoreDispDepthBufferMaterial_Params));
	RestoreDispDepthBufferMaterial_Params.PP = PP;

	this->ProcessEvent(uFnRestoreDispDepthBufferMaterial, &RestoreDispDepthBufferMaterial_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetDispDepthBufferParam
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39729])
// Parameter Info:
// class UPostProcessChain*       PP                             (CPF_Parm)
// struct FLinearColor            Params                         (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDGameInfo::SetDispDepthBufferParam(class UPostProcessChain* PP, struct FLinearColor& Params)
{
	static UFunction* uFnSetDispDepthBufferParam = nullptr;

	if (!uFnSetDispDepthBufferParam)
	{
		uFnSetDispDepthBufferParam = UFunction::FindFunction("Function REDGame.REDGameInfo.SetDispDepthBufferParam");
	}

	AREDGameInfo_execSetDispDepthBufferParam_Params SetDispDepthBufferParam_Params;
	memset(&SetDispDepthBufferParam_Params, 0, sizeof(SetDispDepthBufferParam_Params));
	SetDispDepthBufferParam_Params.PP = PP;
	memcpy_s(&SetDispDepthBufferParam_Params.Params, sizeof(SetDispDepthBufferParam_Params.Params), &Params, sizeof(Params));

	this->ProcessEvent(uFnSetDispDepthBufferParam, &SetDispDepthBufferParam_Params, nullptr);

	memcpy_s(&Params, sizeof(Params), &SetDispDepthBufferParam_Params.Params, sizeof(SetDispDepthBufferParam_Params.Params));
};

// Function REDGame.REDGameInfo.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaSeconds                   (CPF_Parm)

void AREDGameInfo::eventTick(float DeltaSeconds)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo.Tick");
	}

	AREDGameInfo_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaSeconds, sizeof(Tick_Params.DeltaSeconds), &DeltaSeconds, sizeof(DeltaSeconds));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo.GetPackageString
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EPKG_NAME                      Id                             (CPF_Parm)
// uint32_t                       isBattle                       (CPF_OptionalParm | CPF_Parm)

class FString AREDGameInfo::eventGetPackageString(EPKG_NAME Id, bool isBattle)
{
	static UFunction* uFnGetPackageString = nullptr;

	if (!uFnGetPackageString)
	{
		uFnGetPackageString = UFunction::FindFunction("Function REDGame.REDGameInfo.GetPackageString");
	}

	AREDGameInfo_eventGetPackageString_Params GetPackageString_Params;
	memset(&GetPackageString_Params, 0, sizeof(GetPackageString_Params));
	memcpy_s(&GetPackageString_Params.Id, sizeof(GetPackageString_Params.Id), &Id, sizeof(Id));
	GetPackageString_Params.isBattle = isBattle;

	this->ProcessEvent(uFnGetPackageString, &GetPackageString_Params, nullptr);

	return GetPackageString_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.QuestList_IsActive
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool AREDGameInfo::QuestList_IsActive(EUE_PLAYER_ID Player)
{
	static UFunction* uFnQuestList_IsActive = nullptr;

	if (!uFnQuestList_IsActive)
	{
		uFnQuestList_IsActive = UFunction::FindFunction("Function REDGame.REDGameInfo.QuestList_IsActive");
	}

	AREDGameInfo_execQuestList_IsActive_Params QuestList_IsActive_Params;
	memset(&QuestList_IsActive_Params, 0, sizeof(QuestList_IsActive_Params));
	memcpy_s(&QuestList_IsActive_Params.Player, sizeof(QuestList_IsActive_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnQuestList_IsActive, &QuestList_IsActive_Params, nullptr);

	return QuestList_IsActive_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.QuestList_Finish
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void AREDGameInfo::QuestList_Finish(EUE_PLAYER_ID Player)
{
	static UFunction* uFnQuestList_Finish = nullptr;

	if (!uFnQuestList_Finish)
	{
		uFnQuestList_Finish = UFunction::FindFunction("Function REDGame.REDGameInfo.QuestList_Finish");
	}

	AREDGameInfo_execQuestList_Finish_Params QuestList_Finish_Params;
	memset(&QuestList_Finish_Params, 0, sizeof(QuestList_Finish_Params));
	memcpy_s(&QuestList_Finish_Params.Player, sizeof(QuestList_Finish_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnQuestList_Finish, &QuestList_Finish_Params, nullptr);
};

// Function REDGame.REDGameInfo.QuestList_IsDisp
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool AREDGameInfo::QuestList_IsDisp(EUE_PLAYER_ID Player)
{
	static UFunction* uFnQuestList_IsDisp = nullptr;

	if (!uFnQuestList_IsDisp)
	{
		uFnQuestList_IsDisp = UFunction::FindFunction("Function REDGame.REDGameInfo.QuestList_IsDisp");
	}

	AREDGameInfo_execQuestList_IsDisp_Params QuestList_IsDisp_Params;
	memset(&QuestList_IsDisp_Params, 0, sizeof(QuestList_IsDisp_Params));
	memcpy_s(&QuestList_IsDisp_Params.Player, sizeof(QuestList_IsDisp_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnQuestList_IsDisp, &QuestList_IsDisp_Params, nullptr);

	return QuestList_IsDisp_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.QuestList_SwitchDisp
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)

void AREDGameInfo::QuestList_SwitchDisp(EUE_PLAYER_ID Player, bool disp)
{
	static UFunction* uFnQuestList_SwitchDisp = nullptr;

	if (!uFnQuestList_SwitchDisp)
	{
		uFnQuestList_SwitchDisp = UFunction::FindFunction("Function REDGame.REDGameInfo.QuestList_SwitchDisp");
	}

	AREDGameInfo_execQuestList_SwitchDisp_Params QuestList_SwitchDisp_Params;
	memset(&QuestList_SwitchDisp_Params, 0, sizeof(QuestList_SwitchDisp_Params));
	memcpy_s(&QuestList_SwitchDisp_Params.Player, sizeof(QuestList_SwitchDisp_Params.Player), &Player, sizeof(Player));
	QuestList_SwitchDisp_Params.disp = disp;

	this->ProcessEvent(uFnQuestList_SwitchDisp, &QuestList_SwitchDisp_Params, nullptr);
};

// Function REDGame.REDGameInfo.QuestList_EndAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void AREDGameInfo::QuestList_EndAnim(EUE_PLAYER_ID Player)
{
	static UFunction* uFnQuestList_EndAnim = nullptr;

	if (!uFnQuestList_EndAnim)
	{
		uFnQuestList_EndAnim = UFunction::FindFunction("Function REDGame.REDGameInfo.QuestList_EndAnim");
	}

	AREDGameInfo_execQuestList_EndAnim_Params QuestList_EndAnim_Params;
	memset(&QuestList_EndAnim_Params, 0, sizeof(QuestList_EndAnim_Params));
	memcpy_s(&QuestList_EndAnim_Params.Player, sizeof(QuestList_EndAnim_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnQuestList_EndAnim, &QuestList_EndAnim_Params, nullptr);
};

// Function REDGame.REDGameInfo.QuestList_Show
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       isCharaSelect                  (CPF_Parm)

void AREDGameInfo::QuestList_Show(EUE_PLAYER_ID Player, bool isCharaSelect)
{
	static UFunction* uFnQuestList_Show = nullptr;

	if (!uFnQuestList_Show)
	{
		uFnQuestList_Show = UFunction::FindFunction("Function REDGame.REDGameInfo.QuestList_Show");
	}

	AREDGameInfo_execQuestList_Show_Params QuestList_Show_Params;
	memset(&QuestList_Show_Params, 0, sizeof(QuestList_Show_Params));
	memcpy_s(&QuestList_Show_Params.Player, sizeof(QuestList_Show_Params.Player), &Player, sizeof(Player));
	QuestList_Show_Params.isCharaSelect = isCharaSelect;

	this->ProcessEvent(uFnQuestList_Show, &QuestList_Show_Params, nullptr);
};

// Function REDGame.REDGameInfo.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDGameInfo::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDGameInfo.DisplayDebug");
	}

	AREDGameInfo_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDGameInfo.ConsoleEvent
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    EventName                      (CPF_Parm)

void AREDGameInfo::eventConsoleEvent(const class FName& EventName)
{
	static UFunction* uFnConsoleEvent = nullptr;

	if (!uFnConsoleEvent)
	{
		uFnConsoleEvent = UFunction::FindFunction("Function REDGame.REDGameInfo.ConsoleEvent");
	}

	AREDGameInfo_eventConsoleEvent_Params ConsoleEvent_Params;
	memset(&ConsoleEvent_Params, 0, sizeof(ConsoleEvent_Params));
	memcpy_s(&ConsoleEvent_Params.EventName, sizeof(ConsoleEvent_Params.EventName), &EventName, sizeof(EventName));

	this->ProcessEvent(uFnConsoleEvent, &ConsoleEvent_Params, nullptr);
};

// Function REDGame.REDGameInfo.SpawnPlayer
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class AREDPawn_Player* AREDGameInfo::SpawnPlayer(struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnSpawnPlayer = nullptr;

	if (!uFnSpawnPlayer)
	{
		uFnSpawnPlayer = UFunction::FindFunction("Function REDGame.REDGameInfo.SpawnPlayer");
	}

	AREDGameInfo_execSpawnPlayer_Params SpawnPlayer_Params;
	memset(&SpawnPlayer_Params, 0, sizeof(SpawnPlayer_Params));
	memcpy_s(&SpawnPlayer_Params.Info, sizeof(SpawnPlayer_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnSpawnPlayer, &SpawnPlayer_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &SpawnPlayer_Params.Info, sizeof(SpawnPlayer_Params.Info));

	return SpawnPlayer_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.LoadCharaPackages
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UREDCharaAsset*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bBlock                         (CPF_Parm)
// class TArray<class FString>    packageNames                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class UREDCharaAsset* AREDGameInfo::eventLoadCharaPackages(bool bBlock, class TArray<class FString>& packageNames)
{
	static UFunction* uFnLoadCharaPackages = nullptr;

	if (!uFnLoadCharaPackages)
	{
		uFnLoadCharaPackages = UFunction::FindFunction("Function REDGame.REDGameInfo.LoadCharaPackages");
	}

	AREDGameInfo_eventLoadCharaPackages_Params LoadCharaPackages_Params;
	memset(&LoadCharaPackages_Params, 0, sizeof(LoadCharaPackages_Params));
	LoadCharaPackages_Params.bBlock = bBlock;
	memcpy_s(&LoadCharaPackages_Params.packageNames, sizeof(LoadCharaPackages_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnLoadCharaPackages, &LoadCharaPackages_Params, nullptr);

	memcpy_s(&packageNames, sizeof(packageNames), &LoadCharaPackages_Params.packageNames, sizeof(LoadCharaPackages_Params.packageNames));

	return LoadCharaPackages_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.GetDramaPackageNames
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  textLang                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  voiceLang                      (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FSpawnPlayerInfo> Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo::GetDramaPackageNames(const class FString& textLang, const class FString& voiceLang, class TArray<struct FSpawnPlayerInfo>& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetDramaPackageNames = nullptr;

	if (!uFnGetDramaPackageNames)
	{
		uFnGetDramaPackageNames = UFunction::FindFunction("Function REDGame.REDGameInfo.GetDramaPackageNames");
	}

	AREDGameInfo_execGetDramaPackageNames_Params GetDramaPackageNames_Params;
	memset(&GetDramaPackageNames_Params, 0, sizeof(GetDramaPackageNames_Params));
	memcpy_s(&GetDramaPackageNames_Params.textLang, sizeof(GetDramaPackageNames_Params.textLang), &textLang, sizeof(textLang));
	memcpy_s(&GetDramaPackageNames_Params.voiceLang, sizeof(GetDramaPackageNames_Params.voiceLang), &voiceLang, sizeof(voiceLang));
	memcpy_s(&GetDramaPackageNames_Params.Info, sizeof(GetDramaPackageNames_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetDramaPackageNames_Params.packageNames, sizeof(GetDramaPackageNames_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnGetDramaPackageNames, &GetDramaPackageNames_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetDramaPackageNames_Params.Info, sizeof(GetDramaPackageNames_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetDramaPackageNames_Params.packageNames, sizeof(GetDramaPackageNames_Params.packageNames));
};

// Function REDGame.REDGameInfo.GetMOMPackageNamesFromArray
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class TArray<struct FSpawnPlayerInfo> Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo::GetMOMPackageNamesFromArray(class TArray<struct FSpawnPlayerInfo>& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetMOMPackageNamesFromArray = nullptr;

	if (!uFnGetMOMPackageNamesFromArray)
	{
		uFnGetMOMPackageNamesFromArray = UFunction::FindFunction("Function REDGame.REDGameInfo.GetMOMPackageNamesFromArray");
	}

	AREDGameInfo_execGetMOMPackageNamesFromArray_Params GetMOMPackageNamesFromArray_Params;
	memset(&GetMOMPackageNamesFromArray_Params, 0, sizeof(GetMOMPackageNamesFromArray_Params));
	memcpy_s(&GetMOMPackageNamesFromArray_Params.Info, sizeof(GetMOMPackageNamesFromArray_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetMOMPackageNamesFromArray_Params.packageNames, sizeof(GetMOMPackageNamesFromArray_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnGetMOMPackageNamesFromArray, &GetMOMPackageNamesFromArray_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetMOMPackageNamesFromArray_Params.Info, sizeof(GetMOMPackageNamesFromArray_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetMOMPackageNamesFromArray_Params.packageNames, sizeof(GetMOMPackageNamesFromArray_Params.packageNames));
};

// Function REDGame.REDGameInfo.GetMOMPackageNames
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo::GetMOMPackageNames(struct FSpawnPlayerInfo& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetMOMPackageNames = nullptr;

	if (!uFnGetMOMPackageNames)
	{
		uFnGetMOMPackageNames = UFunction::FindFunction("Function REDGame.REDGameInfo.GetMOMPackageNames");
	}

	AREDGameInfo_execGetMOMPackageNames_Params GetMOMPackageNames_Params;
	memset(&GetMOMPackageNames_Params, 0, sizeof(GetMOMPackageNames_Params));
	memcpy_s(&GetMOMPackageNames_Params.Info, sizeof(GetMOMPackageNames_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetMOMPackageNames_Params.packageNames, sizeof(GetMOMPackageNames_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnGetMOMPackageNames, &GetMOMPackageNames_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetMOMPackageNames_Params.Info, sizeof(GetMOMPackageNames_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetMOMPackageNames_Params.packageNames, sizeof(GetMOMPackageNames_Params.packageNames));
};

// Function REDGame.REDGameInfo.GetCharaPackageNamesFromArray
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class TArray<struct FSpawnPlayerInfo> Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo::GetCharaPackageNamesFromArray(class TArray<struct FSpawnPlayerInfo>& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetCharaPackageNamesFromArray = nullptr;

	if (!uFnGetCharaPackageNamesFromArray)
	{
		uFnGetCharaPackageNamesFromArray = UFunction::FindFunction("Function REDGame.REDGameInfo.GetCharaPackageNamesFromArray");
	}

	AREDGameInfo_execGetCharaPackageNamesFromArray_Params GetCharaPackageNamesFromArray_Params;
	memset(&GetCharaPackageNamesFromArray_Params, 0, sizeof(GetCharaPackageNamesFromArray_Params));
	memcpy_s(&GetCharaPackageNamesFromArray_Params.Info, sizeof(GetCharaPackageNamesFromArray_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetCharaPackageNamesFromArray_Params.packageNames, sizeof(GetCharaPackageNamesFromArray_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnGetCharaPackageNamesFromArray, &GetCharaPackageNamesFromArray_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetCharaPackageNamesFromArray_Params.Info, sizeof(GetCharaPackageNamesFromArray_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetCharaPackageNamesFromArray_Params.packageNames, sizeof(GetCharaPackageNamesFromArray_Params.packageNames));
};

// Function REDGame.REDGameInfo.GetCharaPackageNames
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<class FString>    packageNames                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo::GetCharaPackageNames(struct FSpawnPlayerInfo& Info, class TArray<class FString>& packageNames)
{
	static UFunction* uFnGetCharaPackageNames = nullptr;

	if (!uFnGetCharaPackageNames)
	{
		uFnGetCharaPackageNames = UFunction::FindFunction("Function REDGame.REDGameInfo.GetCharaPackageNames");
	}

	AREDGameInfo_execGetCharaPackageNames_Params GetCharaPackageNames_Params;
	memset(&GetCharaPackageNames_Params, 0, sizeof(GetCharaPackageNames_Params));
	memcpy_s(&GetCharaPackageNames_Params.Info, sizeof(GetCharaPackageNames_Params.Info), &Info, sizeof(Info));
	memcpy_s(&GetCharaPackageNames_Params.packageNames, sizeof(GetCharaPackageNames_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnGetCharaPackageNames, &GetCharaPackageNames_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetCharaPackageNames_Params.Info, sizeof(GetCharaPackageNames_Params.Info));
	memcpy_s(&packageNames, sizeof(packageNames), &GetCharaPackageNames_Params.packageNames, sizeof(GetCharaPackageNames_Params.packageNames));
};

// Function REDGame.REDGameInfo.DisplayDebugBGEffect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)

void AREDGameInfo::DisplayDebugBGEffect(class AHUD* HUD)
{
	static UFunction* uFnDisplayDebugBGEffect = nullptr;

	if (!uFnDisplayDebugBGEffect)
	{
		uFnDisplayDebugBGEffect = UFunction::FindFunction("Function REDGame.REDGameInfo.DisplayDebugBGEffect");
	}

	AREDGameInfo_execDisplayDebugBGEffect_Params DisplayDebugBGEffect_Params;
	memset(&DisplayDebugBGEffect_Params, 0, sizeof(DisplayDebugBGEffect_Params));
	DisplayDebugBGEffect_Params.HUD = HUD;

	this->ProcessEvent(uFnDisplayDebugBGEffect, &DisplayDebugBGEffect_Params, nullptr);
};

// Function REDGame.REDGameInfo.RequestEventPlayer
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EventName                      (CPF_Parm)
// class APawn*                   PlayerPawn                     (CPF_Parm)
// class APawn*                   EnemyPawn                      (CPF_Parm)
// int32_t                        Param0                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param1                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param2                         (CPF_OptionalParm | CPF_Parm)

bool AREDGameInfo::eventRequestEventPlayer(const class FName& EventName, class APawn* PlayerPawn, class APawn* EnemyPawn, int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnRequestEventPlayer = nullptr;

	if (!uFnRequestEventPlayer)
	{
		uFnRequestEventPlayer = UFunction::FindFunction("Function REDGame.REDGameInfo.RequestEventPlayer");
	}

	AREDGameInfo_eventRequestEventPlayer_Params RequestEventPlayer_Params;
	memset(&RequestEventPlayer_Params, 0, sizeof(RequestEventPlayer_Params));
	memcpy_s(&RequestEventPlayer_Params.EventName, sizeof(RequestEventPlayer_Params.EventName), &EventName, sizeof(EventName));
	RequestEventPlayer_Params.PlayerPawn = PlayerPawn;
	RequestEventPlayer_Params.EnemyPawn = EnemyPawn;
	memcpy_s(&RequestEventPlayer_Params.Param0, sizeof(RequestEventPlayer_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&RequestEventPlayer_Params.Param1, sizeof(RequestEventPlayer_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&RequestEventPlayer_Params.Param2, sizeof(RequestEventPlayer_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnRequestEventPlayer, &RequestEventPlayer_Params, nullptr);

	return RequestEventPlayer_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.GetBGFloorAttribute
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          PosX                           (CPF_Parm)

int32_t AREDGameInfo::eventGetBGFloorAttribute(float PosX)
{
	static UFunction* uFnGetBGFloorAttribute = nullptr;

	if (!uFnGetBGFloorAttribute)
	{
		uFnGetBGFloorAttribute = UFunction::FindFunction("Function REDGame.REDGameInfo.GetBGFloorAttribute");
	}

	AREDGameInfo_eventGetBGFloorAttribute_Params GetBGFloorAttribute_Params;
	memset(&GetBGFloorAttribute_Params, 0, sizeof(GetBGFloorAttribute_Params));
	memcpy_s(&GetBGFloorAttribute_Params.PosX, sizeof(GetBGFloorAttribute_Params.PosX), &PosX, sizeof(PosX));

	this->ProcessEvent(uFnGetBGFloorAttribute, &GetBGFloorAttribute_Params, nullptr);

	return GetBGFloorAttribute_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.RequestEventBGEffectRectList
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EventName                      (CPF_Parm)
// float                          posX1                          (CPF_Parm)
// float                          posX2                          (CPF_Parm)
// float                          posZ1                          (CPF_Parm)
// float                          posZ2                          (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)
// int32_t                        AttackLv                       (CPF_Parm)
// int32_t                        atkType                        (CPF_Parm)
// int32_t                        AttackDamage                   (CPF_Parm)
// class APawn*                   PlayerPawn                     (CPF_Parm)
// class APawn*                   EnemyPawn                      (CPF_Parm)
// class TArray<class UREDSeqEvent_BGEffect*> doneList                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AREDGameInfo::eventRequestEventBGEffectRectList(const class FName& EventName, float posX1, float posX2, float posZ1, float posZ2, int32_t Dir, int32_t AttackLv, int32_t atkType, int32_t AttackDamage, class APawn* PlayerPawn, class APawn* EnemyPawn, class TArray<class UREDSeqEvent_BGEffect*>& doneList)
{
	static UFunction* uFnRequestEventBGEffectRectList = nullptr;

	if (!uFnRequestEventBGEffectRectList)
	{
		uFnRequestEventBGEffectRectList = UFunction::FindFunction("Function REDGame.REDGameInfo.RequestEventBGEffectRectList");
	}

	AREDGameInfo_eventRequestEventBGEffectRectList_Params RequestEventBGEffectRectList_Params;
	memset(&RequestEventBGEffectRectList_Params, 0, sizeof(RequestEventBGEffectRectList_Params));
	memcpy_s(&RequestEventBGEffectRectList_Params.EventName, sizeof(RequestEventBGEffectRectList_Params.EventName), &EventName, sizeof(EventName));
	memcpy_s(&RequestEventBGEffectRectList_Params.posX1, sizeof(RequestEventBGEffectRectList_Params.posX1), &posX1, sizeof(posX1));
	memcpy_s(&RequestEventBGEffectRectList_Params.posX2, sizeof(RequestEventBGEffectRectList_Params.posX2), &posX2, sizeof(posX2));
	memcpy_s(&RequestEventBGEffectRectList_Params.posZ1, sizeof(RequestEventBGEffectRectList_Params.posZ1), &posZ1, sizeof(posZ1));
	memcpy_s(&RequestEventBGEffectRectList_Params.posZ2, sizeof(RequestEventBGEffectRectList_Params.posZ2), &posZ2, sizeof(posZ2));
	memcpy_s(&RequestEventBGEffectRectList_Params.Dir, sizeof(RequestEventBGEffectRectList_Params.Dir), &Dir, sizeof(Dir));
	memcpy_s(&RequestEventBGEffectRectList_Params.AttackLv, sizeof(RequestEventBGEffectRectList_Params.AttackLv), &AttackLv, sizeof(AttackLv));
	memcpy_s(&RequestEventBGEffectRectList_Params.atkType, sizeof(RequestEventBGEffectRectList_Params.atkType), &atkType, sizeof(atkType));
	memcpy_s(&RequestEventBGEffectRectList_Params.AttackDamage, sizeof(RequestEventBGEffectRectList_Params.AttackDamage), &AttackDamage, sizeof(AttackDamage));
	RequestEventBGEffectRectList_Params.PlayerPawn = PlayerPawn;
	RequestEventBGEffectRectList_Params.EnemyPawn = EnemyPawn;
	memcpy_s(&RequestEventBGEffectRectList_Params.doneList, sizeof(RequestEventBGEffectRectList_Params.doneList), &doneList, sizeof(doneList));

	this->ProcessEvent(uFnRequestEventBGEffectRectList, &RequestEventBGEffectRectList_Params, nullptr);

	memcpy_s(&doneList, sizeof(doneList), &RequestEventBGEffectRectList_Params.doneList, sizeof(RequestEventBGEffectRectList_Params.doneList));

	return RequestEventBGEffectRectList_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.RequestEventBGEffectRect
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EventName                      (CPF_Parm)
// float                          posX1                          (CPF_Parm)
// float                          posX2                          (CPF_Parm)
// float                          posZ1                          (CPF_Parm)
// float                          posZ2                          (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)
// int32_t                        AttackLv                       (CPF_Parm)
// int32_t                        atkType                        (CPF_Parm)
// int32_t                        AttackDamage                   (CPF_Parm)
// class APawn*                   PlayerPawn                     (CPF_Parm)
// class APawn*                   EnemyPawn                      (CPF_Parm)

bool AREDGameInfo::eventRequestEventBGEffectRect(const class FName& EventName, float posX1, float posX2, float posZ1, float posZ2, int32_t Dir, int32_t AttackLv, int32_t atkType, int32_t AttackDamage, class APawn* PlayerPawn, class APawn* EnemyPawn)
{
	static UFunction* uFnRequestEventBGEffectRect = nullptr;

	if (!uFnRequestEventBGEffectRect)
	{
		uFnRequestEventBGEffectRect = UFunction::FindFunction("Function REDGame.REDGameInfo.RequestEventBGEffectRect");
	}

	AREDGameInfo_eventRequestEventBGEffectRect_Params RequestEventBGEffectRect_Params;
	memset(&RequestEventBGEffectRect_Params, 0, sizeof(RequestEventBGEffectRect_Params));
	memcpy_s(&RequestEventBGEffectRect_Params.EventName, sizeof(RequestEventBGEffectRect_Params.EventName), &EventName, sizeof(EventName));
	memcpy_s(&RequestEventBGEffectRect_Params.posX1, sizeof(RequestEventBGEffectRect_Params.posX1), &posX1, sizeof(posX1));
	memcpy_s(&RequestEventBGEffectRect_Params.posX2, sizeof(RequestEventBGEffectRect_Params.posX2), &posX2, sizeof(posX2));
	memcpy_s(&RequestEventBGEffectRect_Params.posZ1, sizeof(RequestEventBGEffectRect_Params.posZ1), &posZ1, sizeof(posZ1));
	memcpy_s(&RequestEventBGEffectRect_Params.posZ2, sizeof(RequestEventBGEffectRect_Params.posZ2), &posZ2, sizeof(posZ2));
	memcpy_s(&RequestEventBGEffectRect_Params.Dir, sizeof(RequestEventBGEffectRect_Params.Dir), &Dir, sizeof(Dir));
	memcpy_s(&RequestEventBGEffectRect_Params.AttackLv, sizeof(RequestEventBGEffectRect_Params.AttackLv), &AttackLv, sizeof(AttackLv));
	memcpy_s(&RequestEventBGEffectRect_Params.atkType, sizeof(RequestEventBGEffectRect_Params.atkType), &atkType, sizeof(atkType));
	memcpy_s(&RequestEventBGEffectRect_Params.AttackDamage, sizeof(RequestEventBGEffectRect_Params.AttackDamage), &AttackDamage, sizeof(AttackDamage));
	RequestEventBGEffectRect_Params.PlayerPawn = PlayerPawn;
	RequestEventBGEffectRect_Params.EnemyPawn = EnemyPawn;

	this->ProcessEvent(uFnRequestEventBGEffectRect, &RequestEventBGEffectRect_Params, nullptr);

	return RequestEventBGEffectRect_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.RequestEventBGEffect
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EventName                      (CPF_Parm)
// float                          PosX                           (CPF_Parm)
// float                          PosZ                           (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)
// int32_t                        AttackLv                       (CPF_Parm)
// int32_t                        atkType                        (CPF_Parm)
// int32_t                        AttackDamage                   (CPF_Parm)
// class APawn*                   PlayerPawn                     (CPF_Parm)
// class APawn*                   EnemyPawn                      (CPF_Parm)

bool AREDGameInfo::eventRequestEventBGEffect(const class FName& EventName, float PosX, float PosZ, int32_t Dir, int32_t AttackLv, int32_t atkType, int32_t AttackDamage, class APawn* PlayerPawn, class APawn* EnemyPawn)
{
	static UFunction* uFnRequestEventBGEffect = nullptr;

	if (!uFnRequestEventBGEffect)
	{
		uFnRequestEventBGEffect = UFunction::FindFunction("Function REDGame.REDGameInfo.RequestEventBGEffect");
	}

	AREDGameInfo_eventRequestEventBGEffect_Params RequestEventBGEffect_Params;
	memset(&RequestEventBGEffect_Params, 0, sizeof(RequestEventBGEffect_Params));
	memcpy_s(&RequestEventBGEffect_Params.EventName, sizeof(RequestEventBGEffect_Params.EventName), &EventName, sizeof(EventName));
	memcpy_s(&RequestEventBGEffect_Params.PosX, sizeof(RequestEventBGEffect_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&RequestEventBGEffect_Params.PosZ, sizeof(RequestEventBGEffect_Params.PosZ), &PosZ, sizeof(PosZ));
	memcpy_s(&RequestEventBGEffect_Params.Dir, sizeof(RequestEventBGEffect_Params.Dir), &Dir, sizeof(Dir));
	memcpy_s(&RequestEventBGEffect_Params.AttackLv, sizeof(RequestEventBGEffect_Params.AttackLv), &AttackLv, sizeof(AttackLv));
	memcpy_s(&RequestEventBGEffect_Params.atkType, sizeof(RequestEventBGEffect_Params.atkType), &atkType, sizeof(atkType));
	memcpy_s(&RequestEventBGEffect_Params.AttackDamage, sizeof(RequestEventBGEffect_Params.AttackDamage), &AttackDamage, sizeof(AttackDamage));
	RequestEventBGEffect_Params.PlayerPawn = PlayerPawn;
	RequestEventBGEffect_Params.EnemyPawn = EnemyPawn;

	this->ProcessEvent(uFnRequestEventBGEffect, &RequestEventBGEffect_Params, nullptr);

	return RequestEventBGEffect_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.SetSeqValueFloat
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    VarName                        (CPF_Parm)
// float                          Value                          (CPF_Parm)

void AREDGameInfo::eventSetSeqValueFloat(const class FName& VarName, float Value)
{
	static UFunction* uFnSetSeqValueFloat = nullptr;

	if (!uFnSetSeqValueFloat)
	{
		uFnSetSeqValueFloat = UFunction::FindFunction("Function REDGame.REDGameInfo.SetSeqValueFloat");
	}

	AREDGameInfo_eventSetSeqValueFloat_Params SetSeqValueFloat_Params;
	memset(&SetSeqValueFloat_Params, 0, sizeof(SetSeqValueFloat_Params));
	memcpy_s(&SetSeqValueFloat_Params.VarName, sizeof(SetSeqValueFloat_Params.VarName), &VarName, sizeof(VarName));
	memcpy_s(&SetSeqValueFloat_Params.Value, sizeof(SetSeqValueFloat_Params.Value), &Value, sizeof(Value));

	this->ProcessEvent(uFnSetSeqValueFloat, &SetSeqValueFloat_Params, nullptr);
};

// Function REDGame.REDGameInfo.StopShakeCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::eventStopShakeCamera()
{
	static UFunction* uFnStopShakeCamera = nullptr;

	if (!uFnStopShakeCamera)
	{
		uFnStopShakeCamera = UFunction::FindFunction("Function REDGame.REDGameInfo.StopShakeCamera");
	}

	AREDGameInfo_eventStopShakeCamera_Params StopShakeCamera_Params;
	memset(&StopShakeCamera_Params, 0, sizeof(StopShakeCamera_Params));

	this->ProcessEvent(uFnStopShakeCamera, &StopShakeCamera_Params, nullptr);
};

// Function REDGame.REDGameInfo.ShakeCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PatternName                    (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// int32_t                        inFrame                        (CPF_Parm)
// int32_t                        stayFrame                      (CPF_Parm)
// int32_t                        outFrame                       (CPF_Parm)

void AREDGameInfo::eventShakeCamera(const class FName& PatternName, float Scale, int32_t inFrame, int32_t stayFrame, int32_t outFrame)
{
	static UFunction* uFnShakeCamera = nullptr;

	if (!uFnShakeCamera)
	{
		uFnShakeCamera = UFunction::FindFunction("Function REDGame.REDGameInfo.ShakeCamera");
	}

	AREDGameInfo_eventShakeCamera_Params ShakeCamera_Params;
	memset(&ShakeCamera_Params, 0, sizeof(ShakeCamera_Params));
	memcpy_s(&ShakeCamera_Params.PatternName, sizeof(ShakeCamera_Params.PatternName), &PatternName, sizeof(PatternName));
	memcpy_s(&ShakeCamera_Params.Scale, sizeof(ShakeCamera_Params.Scale), &Scale, sizeof(Scale));
	memcpy_s(&ShakeCamera_Params.inFrame, sizeof(ShakeCamera_Params.inFrame), &inFrame, sizeof(inFrame));
	memcpy_s(&ShakeCamera_Params.stayFrame, sizeof(ShakeCamera_Params.stayFrame), &stayFrame, sizeof(stayFrame));
	memcpy_s(&ShakeCamera_Params.outFrame, sizeof(ShakeCamera_Params.outFrame), &outFrame, sizeof(outFrame));

	this->ProcessEvent(uFnShakeCamera, &ShakeCamera_Params, nullptr);
};

// Function REDGame.REDGameInfo.HideBG
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13303])
// Parameter Info:
// uint32_t                       isHide                         (CPF_Parm)

void AREDGameInfo::HideBG(bool isHide)
{
	static UFunction* uFnHideBG = nullptr;

	if (!uFnHideBG)
	{
		uFnHideBG = UFunction::FindFunction("Function REDGame.REDGameInfo.HideBG");
	}

	AREDGameInfo_execHideBG_Params HideBG_Params;
	memset(&HideBG_Params, 0, sizeof(HideBG_Params));
	HideBG_Params.isHide = isHide;

	this->ProcessEvent(uFnHideBG, &HideBG_Params, nullptr);
};

// Function REDGame.REDGameInfo.GotoNextScene
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_SCENE_ID                   Id                             (CPF_Parm)

void AREDGameInfo::eventGotoNextScene(EUE_SCENE_ID Id)
{
	static UFunction* uFnGotoNextScene = nullptr;

	if (!uFnGotoNextScene)
	{
		uFnGotoNextScene = UFunction::FindFunction("Function REDGame.REDGameInfo.GotoNextScene");
	}

	AREDGameInfo_eventGotoNextScene_Params GotoNextScene_Params;
	memset(&GotoNextScene_Params, 0, sizeof(GotoNextScene_Params));
	memcpy_s(&GotoNextScene_Params.Id, sizeof(GotoNextScene_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnGotoNextScene, &GotoNextScene_Params, nullptr);
};

// Function REDGame.REDGameInfo.RestartLevel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::eventRestartLevel()
{
	static UFunction* uFnRestartLevel = nullptr;

	if (!uFnRestartLevel)
	{
		uFnRestartLevel = UFunction::FindFunction("Function REDGame.REDGameInfo.RestartLevel");
	}

	AREDGameInfo_eventRestartLevel_Params RestartLevel_Params;
	memset(&RestartLevel_Params, 0, sizeof(RestartLevel_Params));

	this->ProcessEvent(uFnRestartLevel, &RestartLevel_Params, nullptr);
};

// Function REDGame.REDGameInfo.UpdateDOF
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40648])
// Parameter Info:

void AREDGameInfo::UpdateDOF()
{
	static UFunction* uFnUpdateDOF = nullptr;

	if (!uFnUpdateDOF)
	{
		uFnUpdateDOF = UFunction::FindFunction("Function REDGame.REDGameInfo.UpdateDOF");
	}

	AREDGameInfo_execUpdateDOF_Params UpdateDOF_Params;
	memset(&UpdateDOF_Params, 0, sizeof(UpdateDOF_Params));

	this->ProcessEvent(uFnUpdateDOF, &UpdateDOF_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetDOFParameterFocusPosition
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39739])
// Parameter Info:
// struct FVector                 Position                       (CPF_Parm)

void AREDGameInfo::SetDOFParameterFocusPosition(const struct FVector& Position)
{
	static UFunction* uFnSetDOFParameterFocusPosition = nullptr;

	if (!uFnSetDOFParameterFocusPosition)
	{
		uFnSetDOFParameterFocusPosition = UFunction::FindFunction("Function REDGame.REDGameInfo.SetDOFParameterFocusPosition");
	}

	AREDGameInfo_execSetDOFParameterFocusPosition_Params SetDOFParameterFocusPosition_Params;
	memset(&SetDOFParameterFocusPosition_Params, 0, sizeof(SetDOFParameterFocusPosition_Params));
	memcpy_s(&SetDOFParameterFocusPosition_Params.Position, sizeof(SetDOFParameterFocusPosition_Params.Position), &Position, sizeof(Position));

	this->ProcessEvent(uFnSetDOFParameterFocusPosition, &SetDOFParameterFocusPosition_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetDOFParameterFocusDistance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39738])
// Parameter Info:
// float                          Distance                       (CPF_Parm)

void AREDGameInfo::SetDOFParameterFocusDistance(float Distance)
{
	static UFunction* uFnSetDOFParameterFocusDistance = nullptr;

	if (!uFnSetDOFParameterFocusDistance)
	{
		uFnSetDOFParameterFocusDistance = UFunction::FindFunction("Function REDGame.REDGameInfo.SetDOFParameterFocusDistance");
	}

	AREDGameInfo_execSetDOFParameterFocusDistance_Params SetDOFParameterFocusDistance_Params;
	memset(&SetDOFParameterFocusDistance_Params, 0, sizeof(SetDOFParameterFocusDistance_Params));
	memcpy_s(&SetDOFParameterFocusDistance_Params.Distance, sizeof(SetDOFParameterFocusDistance_Params.Distance), &Distance, sizeof(Distance));

	this->ProcessEvent(uFnSetDOFParameterFocusDistance, &SetDOFParameterFocusDistance_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetDOFParameterInnerRadius
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39740])
// Parameter Info:
// float                          InnerRadius                    (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::SetDOFParameterInnerRadius(float InnerRadius)
{
	static UFunction* uFnSetDOFParameterInnerRadius = nullptr;

	if (!uFnSetDOFParameterInnerRadius)
	{
		uFnSetDOFParameterInnerRadius = UFunction::FindFunction("Function REDGame.REDGameInfo.SetDOFParameterInnerRadius");
	}

	AREDGameInfo_execSetDOFParameterInnerRadius_Params SetDOFParameterInnerRadius_Params;
	memset(&SetDOFParameterInnerRadius_Params, 0, sizeof(SetDOFParameterInnerRadius_Params));
	memcpy_s(&SetDOFParameterInnerRadius_Params.InnerRadius, sizeof(SetDOFParameterInnerRadius_Params.InnerRadius), &InnerRadius, sizeof(InnerRadius));

	this->ProcessEvent(uFnSetDOFParameterInnerRadius, &SetDOFParameterInnerRadius_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetDOFParameterKernelSize
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39741])
// Parameter Info:
// float                          KernelSize                     (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::SetDOFParameterKernelSize(float KernelSize)
{
	static UFunction* uFnSetDOFParameterKernelSize = nullptr;

	if (!uFnSetDOFParameterKernelSize)
	{
		uFnSetDOFParameterKernelSize = UFunction::FindFunction("Function REDGame.REDGameInfo.SetDOFParameterKernelSize");
	}

	AREDGameInfo_execSetDOFParameterKernelSize_Params SetDOFParameterKernelSize_Params;
	memset(&SetDOFParameterKernelSize_Params, 0, sizeof(SetDOFParameterKernelSize_Params));
	memcpy_s(&SetDOFParameterKernelSize_Params.KernelSize, sizeof(SetDOFParameterKernelSize_Params.KernelSize), &KernelSize, sizeof(KernelSize));

	this->ProcessEvent(uFnSetDOFParameterKernelSize, &SetDOFParameterKernelSize_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetDOFParameterFalloff
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39737])
// Parameter Info:
// float                          Falloff                        (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::SetDOFParameterFalloff(float Falloff)
{
	static UFunction* uFnSetDOFParameterFalloff = nullptr;

	if (!uFnSetDOFParameterFalloff)
	{
		uFnSetDOFParameterFalloff = UFunction::FindFunction("Function REDGame.REDGameInfo.SetDOFParameterFalloff");
	}

	AREDGameInfo_execSetDOFParameterFalloff_Params SetDOFParameterFalloff_Params;
	memset(&SetDOFParameterFalloff_Params, 0, sizeof(SetDOFParameterFalloff_Params));
	memcpy_s(&SetDOFParameterFalloff_Params.Falloff, sizeof(SetDOFParameterFalloff_Params.Falloff), &Falloff, sizeof(Falloff));

	this->ProcessEvent(uFnSetDOFParameterFalloff, &SetDOFParameterFalloff_Params, nullptr);
};

// Function REDGame.REDGameInfo.SwitchDOF
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40150])
// Parameter Info:
// uint32_t                       bOn                            (CPF_Parm)

void AREDGameInfo::SwitchDOF(bool bOn)
{
	static UFunction* uFnSwitchDOF = nullptr;

	if (!uFnSwitchDOF)
	{
		uFnSwitchDOF = UFunction::FindFunction("Function REDGame.REDGameInfo.SwitchDOF");
	}

	AREDGameInfo_execSwitchDOF_Params SwitchDOF_Params;
	memset(&SwitchDOF_Params, 0, sizeof(SwitchDOF_Params));
	SwitchDOF_Params.bOn = bOn;

	this->ProcessEvent(uFnSwitchDOF, &SwitchDOF_Params, nullptr);
};

// Function REDGame.REDGameInfo.GetUberPostProcessEffect
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37189])
// Parameter Info:
// class UUberPostProcessEffect*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UUberPostProcessEffect* AREDGameInfo::GetUberPostProcessEffect()
{
	static UFunction* uFnGetUberPostProcessEffect = nullptr;

	if (!uFnGetUberPostProcessEffect)
	{
		uFnGetUberPostProcessEffect = UFunction::FindFunction("Function REDGame.REDGameInfo.GetUberPostProcessEffect");
	}

	AREDGameInfo_execGetUberPostProcessEffect_Params GetUberPostProcessEffect_Params;
	memset(&GetUberPostProcessEffect_Params, 0, sizeof(GetUberPostProcessEffect_Params));

	this->ProcessEvent(uFnGetUberPostProcessEffect, &GetUberPostProcessEffect_Params, nullptr);

	return GetUberPostProcessEffect_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.ContrastEffectUpdateDraw
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36309])
// Parameter Info:

void AREDGameInfo::ContrastEffectUpdateDraw()
{
	static UFunction* uFnContrastEffectUpdateDraw = nullptr;

	if (!uFnContrastEffectUpdateDraw)
	{
		uFnContrastEffectUpdateDraw = UFunction::FindFunction("Function REDGame.REDGameInfo.ContrastEffectUpdateDraw");
	}

	AREDGameInfo_execContrastEffectUpdateDraw_Params ContrastEffectUpdateDraw_Params;
	memset(&ContrastEffectUpdateDraw_Params, 0, sizeof(ContrastEffectUpdateDraw_Params));

	this->ProcessEvent(uFnContrastEffectUpdateDraw, &ContrastEffectUpdateDraw_Params, nullptr);
};

// Function REDGame.REDGameInfo.ContrastEffectUpdate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36308])
// Parameter Info:

void AREDGameInfo::ContrastEffectUpdate()
{
	static UFunction* uFnContrastEffectUpdate = nullptr;

	if (!uFnContrastEffectUpdate)
	{
		uFnContrastEffectUpdate = UFunction::FindFunction("Function REDGame.REDGameInfo.ContrastEffectUpdate");
	}

	AREDGameInfo_execContrastEffectUpdate_Params ContrastEffectUpdate_Params;
	memset(&ContrastEffectUpdate_Params, 0, sizeof(ContrastEffectUpdate_Params));

	this->ProcessEvent(uFnContrastEffectUpdate, &ContrastEffectUpdate_Params, nullptr);
};

// Function REDGame.REDGameInfo.ContrastEffect
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13510])
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)
// float                          addMin                         (CPF_OptionalParm | CPF_Parm)
// float                          addMax                         (CPF_OptionalParm | CPF_Parm)
// float                          Alpha                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::ContrastEffect(int32_t frame, float addMin, float addMax, float Alpha)
{
	static UFunction* uFnContrastEffect = nullptr;

	if (!uFnContrastEffect)
	{
		uFnContrastEffect = UFunction::FindFunction("Function REDGame.REDGameInfo.ContrastEffect");
	}

	AREDGameInfo_execContrastEffect_Params ContrastEffect_Params;
	memset(&ContrastEffect_Params, 0, sizeof(ContrastEffect_Params));
	memcpy_s(&ContrastEffect_Params.frame, sizeof(ContrastEffect_Params.frame), &frame, sizeof(frame));
	memcpy_s(&ContrastEffect_Params.addMin, sizeof(ContrastEffect_Params.addMin), &addMin, sizeof(addMin));
	memcpy_s(&ContrastEffect_Params.addMax, sizeof(ContrastEffect_Params.addMax), &addMax, sizeof(addMax));
	memcpy_s(&ContrastEffect_Params.Alpha, sizeof(ContrastEffect_Params.Alpha), &Alpha, sizeof(Alpha));

	this->ProcessEvent(uFnContrastEffect, &ContrastEffect_Params, nullptr);
};

// Function REDGame.REDGameInfo.SwitchDiffusionFilter2
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[40148])
// Parameter Info:
// uint32_t                       On                             (CPF_Parm)
// float                          luminancePow                   (CPF_OptionalParm | CPF_Parm)
// float                          saturation                     (CPF_OptionalParm | CPF_Parm)
// uint32_t                       Sepia                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::SwitchDiffusionFilter2(bool On, float luminancePow, float saturation, bool Sepia)
{
	static UFunction* uFnSwitchDiffusionFilter2 = nullptr;

	if (!uFnSwitchDiffusionFilter2)
	{
		uFnSwitchDiffusionFilter2 = UFunction::FindFunction("Function REDGame.REDGameInfo.SwitchDiffusionFilter2");
	}

	AREDGameInfo_execSwitchDiffusionFilter2_Params SwitchDiffusionFilter2_Params;
	memset(&SwitchDiffusionFilter2_Params, 0, sizeof(SwitchDiffusionFilter2_Params));
	SwitchDiffusionFilter2_Params.On = On;
	memcpy_s(&SwitchDiffusionFilter2_Params.luminancePow, sizeof(SwitchDiffusionFilter2_Params.luminancePow), &luminancePow, sizeof(luminancePow));
	memcpy_s(&SwitchDiffusionFilter2_Params.saturation, sizeof(SwitchDiffusionFilter2_Params.saturation), &saturation, sizeof(saturation));
	SwitchDiffusionFilter2_Params.Sepia = Sepia;

	this->ProcessEvent(uFnSwitchDiffusionFilter2, &SwitchDiffusionFilter2_Params, nullptr);
};

// Function REDGame.REDGameInfo.StopTutorialNarration
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40108])
// Parameter Info:

void AREDGameInfo::StopTutorialNarration()
{
	static UFunction* uFnStopTutorialNarration = nullptr;

	if (!uFnStopTutorialNarration)
	{
		uFnStopTutorialNarration = UFunction::FindFunction("Function REDGame.REDGameInfo.StopTutorialNarration");
	}

	AREDGameInfo_execStopTutorialNarration_Params StopTutorialNarration_Params;
	memset(&StopTutorialNarration_Params, 0, sizeof(StopTutorialNarration_Params));

	this->ProcessEvent(uFnStopTutorialNarration, &StopTutorialNarration_Params, nullptr);
};

// Function REDGame.REDGameInfo.PlayTutorialNarration
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39048])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// class AActor*                  Actor                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::PlayTutorialNarration(const class FName& cueName, class AActor* Actor)
{
	static UFunction* uFnPlayTutorialNarration = nullptr;

	if (!uFnPlayTutorialNarration)
	{
		uFnPlayTutorialNarration = UFunction::FindFunction("Function REDGame.REDGameInfo.PlayTutorialNarration");
	}

	AREDGameInfo_execPlayTutorialNarration_Params PlayTutorialNarration_Params;
	memset(&PlayTutorialNarration_Params, 0, sizeof(PlayTutorialNarration_Params));
	memcpy_s(&PlayTutorialNarration_Params.cueName, sizeof(PlayTutorialNarration_Params.cueName), &cueName, sizeof(cueName));
	PlayTutorialNarration_Params.Actor = Actor;

	this->ProcessEvent(uFnPlayTutorialNarration, &PlayTutorialNarration_Params, nullptr);
};

// Function REDGame.REDGameInfo.PlayPadSpeakerNarration
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39038])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// int32_t                        PadID                          (CPF_OptionalParm | CPF_Parm)
// class AActor*                  Actor                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::PlayPadSpeakerNarration(const class FName& cueName, int32_t PadID, class AActor* Actor)
{
	static UFunction* uFnPlayPadSpeakerNarration = nullptr;

	if (!uFnPlayPadSpeakerNarration)
	{
		uFnPlayPadSpeakerNarration = UFunction::FindFunction("Function REDGame.REDGameInfo.PlayPadSpeakerNarration");
	}

	AREDGameInfo_execPlayPadSpeakerNarration_Params PlayPadSpeakerNarration_Params;
	memset(&PlayPadSpeakerNarration_Params, 0, sizeof(PlayPadSpeakerNarration_Params));
	memcpy_s(&PlayPadSpeakerNarration_Params.cueName, sizeof(PlayPadSpeakerNarration_Params.cueName), &cueName, sizeof(cueName));
	memcpy_s(&PlayPadSpeakerNarration_Params.PadID, sizeof(PlayPadSpeakerNarration_Params.PadID), &PadID, sizeof(PadID));
	PlayPadSpeakerNarration_Params.Actor = Actor;

	this->ProcessEvent(uFnPlayPadSpeakerNarration, &PlayPadSpeakerNarration_Params, nullptr);
};

// Function REDGame.REDGameInfo.PlayPadSpeakerCommonSE
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39037])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// int32_t                        PadID                          (CPF_OptionalParm | CPF_Parm)
// class AActor*                  Actor                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::PlayPadSpeakerCommonSE(const class FName& cueName, int32_t PadID, class AActor* Actor)
{
	static UFunction* uFnPlayPadSpeakerCommonSE = nullptr;

	if (!uFnPlayPadSpeakerCommonSE)
	{
		uFnPlayPadSpeakerCommonSE = UFunction::FindFunction("Function REDGame.REDGameInfo.PlayPadSpeakerCommonSE");
	}

	AREDGameInfo_execPlayPadSpeakerCommonSE_Params PlayPadSpeakerCommonSE_Params;
	memset(&PlayPadSpeakerCommonSE_Params, 0, sizeof(PlayPadSpeakerCommonSE_Params));
	memcpy_s(&PlayPadSpeakerCommonSE_Params.cueName, sizeof(PlayPadSpeakerCommonSE_Params.cueName), &cueName, sizeof(cueName));
	memcpy_s(&PlayPadSpeakerCommonSE_Params.PadID, sizeof(PlayPadSpeakerCommonSE_Params.PadID), &PadID, sizeof(PadID));
	PlayPadSpeakerCommonSE_Params.Actor = Actor;

	this->ProcessEvent(uFnPlayPadSpeakerCommonSE, &PlayPadSpeakerCommonSE_Params, nullptr);
};

// Function REDGame.REDGameInfo.PlayNarration
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39036])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// class AActor*                  Actor                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::PlayNarration(const class FName& cueName, class AActor* Actor)
{
	static UFunction* uFnPlayNarration = nullptr;

	if (!uFnPlayNarration)
	{
		uFnPlayNarration = UFunction::FindFunction("Function REDGame.REDGameInfo.PlayNarration");
	}

	AREDGameInfo_execPlayNarration_Params PlayNarration_Params;
	memset(&PlayNarration_Params, 0, sizeof(PlayNarration_Params));
	memcpy_s(&PlayNarration_Params.cueName, sizeof(PlayNarration_Params.cueName), &cueName, sizeof(cueName));
	PlayNarration_Params.Actor = Actor;

	this->ProcessEvent(uFnPlayNarration, &PlayNarration_Params, nullptr);
};

// Function REDGame.REDGameInfo.PlayCommonSE_WithPos
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[38968])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// struct FVector                 Loc                            (CPF_Parm | CPF_OutParm)

void AREDGameInfo::PlayCommonSE_WithPos(const class FName& cueName, struct FVector& Loc)
{
	static UFunction* uFnPlayCommonSE_WithPos = nullptr;

	if (!uFnPlayCommonSE_WithPos)
	{
		uFnPlayCommonSE_WithPos = UFunction::FindFunction("Function REDGame.REDGameInfo.PlayCommonSE_WithPos");
	}

	AREDGameInfo_execPlayCommonSE_WithPos_Params PlayCommonSE_WithPos_Params;
	memset(&PlayCommonSE_WithPos_Params, 0, sizeof(PlayCommonSE_WithPos_Params));
	memcpy_s(&PlayCommonSE_WithPos_Params.cueName, sizeof(PlayCommonSE_WithPos_Params.cueName), &cueName, sizeof(cueName));
	memcpy_s(&PlayCommonSE_WithPos_Params.Loc, sizeof(PlayCommonSE_WithPos_Params.Loc), &Loc, sizeof(Loc));

	this->ProcessEvent(uFnPlayCommonSE_WithPos, &PlayCommonSE_WithPos_Params, nullptr);

	memcpy_s(&Loc, sizeof(Loc), &PlayCommonSE_WithPos_Params.Loc, sizeof(PlayCommonSE_WithPos_Params.Loc));
};

// Function REDGame.REDGameInfo.PlayCommonSE
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[38967])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// class AActor*                  Actor                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::PlayCommonSE(const class FName& cueName, class AActor* Actor)
{
	static UFunction* uFnPlayCommonSE = nullptr;

	if (!uFnPlayCommonSE)
	{
		uFnPlayCommonSE = UFunction::FindFunction("Function REDGame.REDGameInfo.PlayCommonSE");
	}

	AREDGameInfo_execPlayCommonSE_Params PlayCommonSE_Params;
	memset(&PlayCommonSE_Params, 0, sizeof(PlayCommonSE_Params));
	memcpy_s(&PlayCommonSE_Params.cueName, sizeof(PlayCommonSE_Params.cueName), &cueName, sizeof(cueName));
	PlayCommonSE_Params.Actor = Actor;

	this->ProcessEvent(uFnPlayCommonSE, &PlayCommonSE_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetPlaySoundPadSpeaker
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39795])
// Parameter Info:
// int32_t                        PadID                          (CPF_Parm)

void AREDGameInfo::SetPlaySoundPadSpeaker(int32_t PadID)
{
	static UFunction* uFnSetPlaySoundPadSpeaker = nullptr;

	if (!uFnSetPlaySoundPadSpeaker)
	{
		uFnSetPlaySoundPadSpeaker = UFunction::FindFunction("Function REDGame.REDGameInfo.SetPlaySoundPadSpeaker");
	}

	AREDGameInfo_execSetPlaySoundPadSpeaker_Params SetPlaySoundPadSpeaker_Params;
	memset(&SetPlaySoundPadSpeaker_Params, 0, sizeof(SetPlaySoundPadSpeaker_Params));
	memcpy_s(&SetPlaySoundPadSpeaker_Params.PadID, sizeof(SetPlaySoundPadSpeaker_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnSetPlaySoundPadSpeaker, &SetPlaySoundPadSpeaker_Params, nullptr);
};

// Function REDGame.REDGameInfo.IsSoundClassPlaying
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    Category                       (CPF_Parm)

bool AREDGameInfo::eventIsSoundClassPlaying(const class FName& Category)
{
	static UFunction* uFnIsSoundClassPlaying = nullptr;

	if (!uFnIsSoundClassPlaying)
	{
		uFnIsSoundClassPlaying = UFunction::FindFunction("Function REDGame.REDGameInfo.IsSoundClassPlaying");
	}

	AREDGameInfo_eventIsSoundClassPlaying_Params IsSoundClassPlaying_Params;
	memset(&IsSoundClassPlaying_Params, 0, sizeof(IsSoundClassPlaying_Params));
	memcpy_s(&IsSoundClassPlaying_Params.Category, sizeof(IsSoundClassPlaying_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnIsSoundClassPlaying, &IsSoundClassPlaying_Params, nullptr);

	return IsSoundClassPlaying_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.ChangeSoundMode
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    ModeName                       (CPF_Parm)

void AREDGameInfo::eventChangeSoundMode(const class FName& ModeName)
{
	static UFunction* uFnChangeSoundMode = nullptr;

	if (!uFnChangeSoundMode)
	{
		uFnChangeSoundMode = UFunction::FindFunction("Function REDGame.REDGameInfo.ChangeSoundMode");
	}

	AREDGameInfo_eventChangeSoundMode_Params ChangeSoundMode_Params;
	memset(&ChangeSoundMode_Params, 0, sizeof(ChangeSoundMode_Params));
	memcpy_s(&ChangeSoundMode_Params.ModeName, sizeof(ChangeSoundMode_Params.ModeName), &ModeName, sizeof(ModeName));

	this->ProcessEvent(uFnChangeSoundMode, &ChangeSoundMode_Params, nullptr);
};

// Function REDGame.REDGameInfo.CreateCommonParticle
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36330])
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// struct FParticleArg            Arg                            (CPF_Const | CPF_Parm | CPF_OutParm)

class UParticleSystemComponent* AREDGameInfo::CreateCommonParticle(struct FParticleArg& Arg)
{
	static UFunction* uFnCreateCommonParticle = nullptr;

	if (!uFnCreateCommonParticle)
	{
		uFnCreateCommonParticle = UFunction::FindFunction("Function REDGame.REDGameInfo.CreateCommonParticle");
	}

	AREDGameInfo_execCreateCommonParticle_Params CreateCommonParticle_Params;
	memset(&CreateCommonParticle_Params, 0, sizeof(CreateCommonParticle_Params));
	memcpy_s(&CreateCommonParticle_Params.Arg, sizeof(CreateCommonParticle_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnCreateCommonParticle, &CreateCommonParticle_Params, nullptr);

	memcpy_s(&Arg, sizeof(Arg), &CreateCommonParticle_Params.Arg, sizeof(CreateCommonParticle_Params.Arg));

	return CreateCommonParticle_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.SetNoLinkObjParticleDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39783])
// Parameter Info:
// uint32_t                       bDisp                          (CPF_Parm)

void AREDGameInfo::SetNoLinkObjParticleDisp(bool bDisp)
{
	static UFunction* uFnSetNoLinkObjParticleDisp = nullptr;

	if (!uFnSetNoLinkObjParticleDisp)
	{
		uFnSetNoLinkObjParticleDisp = UFunction::FindFunction("Function REDGame.REDGameInfo.SetNoLinkObjParticleDisp");
	}

	AREDGameInfo_execSetNoLinkObjParticleDisp_Params SetNoLinkObjParticleDisp_Params;
	memset(&SetNoLinkObjParticleDisp_Params, 0, sizeof(SetNoLinkObjParticleDisp_Params));
	SetNoLinkObjParticleDisp_Params.bDisp = bDisp;

	this->ProcessEvent(uFnSetNoLinkObjParticleDisp, &SetNoLinkObjParticleDisp_Params, nullptr);
};

// Function REDGame.REDGameInfo.GetParticleSpeed
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37132])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDGameInfo::GetParticleSpeed()
{
	static UFunction* uFnGetParticleSpeed = nullptr;

	if (!uFnGetParticleSpeed)
	{
		uFnGetParticleSpeed = UFunction::FindFunction("Function REDGame.REDGameInfo.GetParticleSpeed");
	}

	AREDGameInfo_execGetParticleSpeed_Params GetParticleSpeed_Params;
	memset(&GetParticleSpeed_Params, 0, sizeof(GetParticleSpeed_Params));

	this->ProcessEvent(uFnGetParticleSpeed, &GetParticleSpeed_Params, nullptr);

	return GetParticleSpeed_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.SetParticleSpeed
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39789])
// Parameter Info:
// float                          Speed                          (CPF_Parm)

void AREDGameInfo::SetParticleSpeed(float Speed)
{
	static UFunction* uFnSetParticleSpeed = nullptr;

	if (!uFnSetParticleSpeed)
	{
		uFnSetParticleSpeed = UFunction::FindFunction("Function REDGame.REDGameInfo.SetParticleSpeed");
	}

	AREDGameInfo_execSetParticleSpeed_Params SetParticleSpeed_Params;
	memset(&SetParticleSpeed_Params, 0, sizeof(SetParticleSpeed_Params));
	memcpy_s(&SetParticleSpeed_Params.Speed, sizeof(SetParticleSpeed_Params.Speed), &Speed, sizeof(Speed));

	this->ProcessEvent(uFnSetParticleSpeed, &SetParticleSpeed_Params, nullptr);
};

// Function REDGame.REDGameInfo.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo.GameEnding");
	}

	AREDGameInfo_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function REDGame.REDGameInfo.PreBeginPlay");
	}

	AREDGameInfo_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function REDGame.REDGameInfo.DestroyOnSeamlessTravel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::eventDestroyOnSeamlessTravel()
{
	static UFunction* uFnDestroyOnSeamlessTravel = nullptr;

	if (!uFnDestroyOnSeamlessTravel)
	{
		uFnDestroyOnSeamlessTravel = UFunction::FindFunction("Function REDGame.REDGameInfo.DestroyOnSeamlessTravel");
	}

	AREDGameInfo_eventDestroyOnSeamlessTravel_Params DestroyOnSeamlessTravel_Params;
	memset(&DestroyOnSeamlessTravel_Params, 0, sizeof(DestroyOnSeamlessTravel_Params));

	this->ProcessEvent(uFnDestroyOnSeamlessTravel, &DestroyOnSeamlessTravel_Params, nullptr);
};

// Function REDGame.REDGameInfo.PostSeamlessTravel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::eventPostSeamlessTravel()
{
	static UFunction* uFnPostSeamlessTravel = nullptr;

	if (!uFnPostSeamlessTravel)
	{
		uFnPostSeamlessTravel = UFunction::FindFunction("Function REDGame.REDGameInfo.PostSeamlessTravel");
	}

	AREDGameInfo_eventPostSeamlessTravel_Params PostSeamlessTravel_Params;
	memset(&PostSeamlessTravel_Params, 0, sizeof(PostSeamlessTravel_Params));

	this->ProcessEvent(uFnPostSeamlessTravel, &PostSeamlessTravel_Params, nullptr);
};

// Function REDGame.REDGameInfo.PostLogin
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       NewPlayer                      (CPF_Parm)

void AREDGameInfo::eventPostLogin(class APlayerController* NewPlayer)
{
	static UFunction* uFnPostLogin = nullptr;

	if (!uFnPostLogin)
	{
		uFnPostLogin = UFunction::FindFunction("Function REDGame.REDGameInfo.PostLogin");
	}

	AREDGameInfo_eventPostLogin_Params PostLogin_Params;
	memset(&PostLogin_Params, 0, sizeof(PostLogin_Params));
	PostLogin_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnPostLogin, &PostLogin_Params, nullptr);
};

// Function REDGame.REDGameInfo.PostLoginCommon
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       NewPlayer                      (CPF_Parm)

void AREDGameInfo::PostLoginCommon(class APlayerController* NewPlayer)
{
	static UFunction* uFnPostLoginCommon = nullptr;

	if (!uFnPostLoginCommon)
	{
		uFnPostLoginCommon = UFunction::FindFunction("Function REDGame.REDGameInfo.PostLoginCommon");
	}

	AREDGameInfo_execPostLoginCommon_Params PostLoginCommon_Params;
	memset(&PostLoginCommon_Params, 0, sizeof(PostLoginCommon_Params));
	PostLoginCommon_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnPostLoginCommon, &PostLoginCommon_Params, nullptr);
};

// Function REDGame.REDGameInfo.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo.InitGame");
	}

	AREDGameInfo_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo.ToggleDebugPause
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::ToggleDebugPause()
{
	static UFunction* uFnToggleDebugPause = nullptr;

	if (!uFnToggleDebugPause)
	{
		uFnToggleDebugPause = UFunction::FindFunction("Function REDGame.REDGameInfo.ToggleDebugPause");
	}

	AREDGameInfo_execToggleDebugPause_Params ToggleDebugPause_Params;
	memset(&ToggleDebugPause_Params, 0, sizeof(ToggleDebugPause_Params));

	this->ProcessEvent(uFnToggleDebugPause, &ToggleDebugPause_Params, nullptr);
};

// Function REDGame.REDGameInfo.ToggleShowDebugMenu
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::ToggleShowDebugMenu()
{
	static UFunction* uFnToggleShowDebugMenu = nullptr;

	if (!uFnToggleShowDebugMenu)
	{
		uFnToggleShowDebugMenu = UFunction::FindFunction("Function REDGame.REDGameInfo.ToggleShowDebugMenu");
	}

	AREDGameInfo_execToggleShowDebugMenu_Params ToggleShowDebugMenu_Params;
	memset(&ToggleShowDebugMenu_Params, 0, sizeof(ToggleShowDebugMenu_Params));

	this->ProcessEvent(uFnToggleShowDebugMenu, &ToggleShowDebugMenu_Params, nullptr);
};

// Function REDGame.REDGameInfo.Step
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::Step()
{
	static UFunction* uFnStep = nullptr;

	if (!uFnStep)
	{
		uFnStep = UFunction::FindFunction("Function REDGame.REDGameInfo.Step");
	}

	AREDGameInfo_execStep_Params Step_Params;
	memset(&Step_Params, 0, sizeof(Step_Params));

	this->ProcessEvent(uFnStep, &Step_Params, nullptr);
};

// Function REDGame.REDGameInfo.StepToggle
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::StepToggle()
{
	static UFunction* uFnStepToggle = nullptr;

	if (!uFnStepToggle)
	{
		uFnStepToggle = UFunction::FindFunction("Function REDGame.REDGameInfo.StepToggle");
	}

	AREDGameInfo_execStepToggle_Params StepToggle_Params;
	memset(&StepToggle_Params, 0, sizeof(StepToggle_Params));

	this->ProcessEvent(uFnStepToggle, &StepToggle_Params, nullptr);
};

// Function REDGame.REDGameInfo.UpdateSceneLightSettings
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40842])
// Parameter Info:

void AREDGameInfo::UpdateSceneLightSettings()
{
	static UFunction* uFnUpdateSceneLightSettings = nullptr;

	if (!uFnUpdateSceneLightSettings)
	{
		uFnUpdateSceneLightSettings = UFunction::FindFunction("Function REDGame.REDGameInfo.UpdateSceneLightSettings");
	}

	AREDGameInfo_execUpdateSceneLightSettings_Params UpdateSceneLightSettings_Params;
	memset(&UpdateSceneLightSettings_Params, 0, sizeof(UpdateSceneLightSettings_Params));

	this->ProcessEvent(uFnUpdateSceneLightSettings, &UpdateSceneLightSettings_Params, nullptr);
};

// Function REDGame.REDGameInfo.LoadStaticTextureVersionDiff
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::eventLoadStaticTextureVersionDiff()
{
	static UFunction* uFnLoadStaticTextureVersionDiff = nullptr;

	if (!uFnLoadStaticTextureVersionDiff)
	{
		uFnLoadStaticTextureVersionDiff = UFunction::FindFunction("Function REDGame.REDGameInfo.LoadStaticTextureVersionDiff");
	}

	AREDGameInfo_eventLoadStaticTextureVersionDiff_Params LoadStaticTextureVersionDiff_Params;
	memset(&LoadStaticTextureVersionDiff_Params, 0, sizeof(LoadStaticTextureVersionDiff_Params));

	this->ProcessEvent(uFnLoadStaticTextureVersionDiff, &LoadStaticTextureVersionDiff_Params, nullptr);
};

// Function REDGame.REDGameInfo.GetLoadStaticTextureVersion
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ESTATIC_TEXTURE_VER            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ESTATIC_TEXTURE_VER AREDGameInfo::GetLoadStaticTextureVersion()
{
	static UFunction* uFnGetLoadStaticTextureVersion = nullptr;

	if (!uFnGetLoadStaticTextureVersion)
	{
		uFnGetLoadStaticTextureVersion = UFunction::FindFunction("Function REDGame.REDGameInfo.GetLoadStaticTextureVersion");
	}

	AREDGameInfo_execGetLoadStaticTextureVersion_Params GetLoadStaticTextureVersion_Params;
	memset(&GetLoadStaticTextureVersion_Params, 0, sizeof(GetLoadStaticTextureVersion_Params));

	this->ProcessEvent(uFnGetLoadStaticTextureVersion, &GetLoadStaticTextureVersion_Params, nullptr);

	return static_cast<ESTATIC_TEXTURE_VER>(GetLoadStaticTextureVersion_Params.ReturnValue);
};

// Function REDGame.REDGameInfo.SetupSceneLightSettings
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::SetupSceneLightSettings()
{
	static UFunction* uFnSetupSceneLightSettings = nullptr;

	if (!uFnSetupSceneLightSettings)
	{
		uFnSetupSceneLightSettings = UFunction::FindFunction("Function REDGame.REDGameInfo.SetupSceneLightSettings");
	}

	AREDGameInfo_execSetupSceneLightSettings_Params SetupSceneLightSettings_Params;
	memset(&SetupSceneLightSettings_Params, 0, sizeof(SetupSceneLightSettings_Params));

	this->ProcessEvent(uFnSetupSceneLightSettings, &SetupSceneLightSettings_Params, nullptr);
};

// Function REDGame.REDGameInfo.ResetSceneColor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::eventResetSceneColor()
{
	static UFunction* uFnResetSceneColor = nullptr;

	if (!uFnResetSceneColor)
	{
		uFnResetSceneColor = UFunction::FindFunction("Function REDGame.REDGameInfo.ResetSceneColor");
	}

	AREDGameInfo_eventResetSceneColor_Params ResetSceneColor_Params;
	memset(&ResetSceneColor_Params, 0, sizeof(ResetSceneColor_Params));

	this->ProcessEvent(uFnResetSceneColor, &ResetSceneColor_Params, nullptr);
};

// Function REDGame.REDGameInfo.AllocEffectPawnPool
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo::AllocEffectPawnPool()
{
	static UFunction* uFnAllocEffectPawnPool = nullptr;

	if (!uFnAllocEffectPawnPool)
	{
		uFnAllocEffectPawnPool = UFunction::FindFunction("Function REDGame.REDGameInfo.AllocEffectPawnPool");
	}

	AREDGameInfo_execAllocEffectPawnPool_Params AllocEffectPawnPool_Params;
	memset(&AllocEffectPawnPool_Params, 0, sizeof(AllocEffectPawnPool_Params));

	this->ProcessEvent(uFnAllocEffectPawnPool, &AllocEffectPawnPool_Params, nullptr);
};

// Function REDGame.REDGameInfo.AllocMeshPool
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        MaxMeshNum                     (CPF_OptionalParm | CPF_Parm)
// int32_t                        MaxMaterialNum                 (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo::AllocMeshPool(int32_t MaxMeshNum, int32_t MaxMaterialNum)
{
	static UFunction* uFnAllocMeshPool = nullptr;

	if (!uFnAllocMeshPool)
	{
		uFnAllocMeshPool = UFunction::FindFunction("Function REDGame.REDGameInfo.AllocMeshPool");
	}

	AREDGameInfo_execAllocMeshPool_Params AllocMeshPool_Params;
	memset(&AllocMeshPool_Params, 0, sizeof(AllocMeshPool_Params));
	memcpy_s(&AllocMeshPool_Params.MaxMeshNum, sizeof(AllocMeshPool_Params.MaxMeshNum), &MaxMeshNum, sizeof(MaxMeshNum));
	memcpy_s(&AllocMeshPool_Params.MaxMaterialNum, sizeof(AllocMeshPool_Params.MaxMaterialNum), &MaxMaterialNum, sizeof(MaxMaterialNum));

	this->ProcessEvent(uFnAllocMeshPool, &AllocMeshPool_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetupSpawnPlayerInfo
// [0x00422002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  PlayerID                       (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  EnemyCharaID                   (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        MeshID                         (CPF_Parm)
// int32_t                        ColorID                        (CPF_Parm)
// int32_t                        VoiceID                        (CPF_Parm)
// struct FSpawnPlayerInfo        Info                           (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo::SetupSpawnPlayerInfo(EUE_PLAYER_ID PlayerID, const class FString& CharaID, const class FString& EnemyCharaID, int32_t MeshID, int32_t ColorID, int32_t VoiceID, struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnSetupSpawnPlayerInfo = nullptr;

	if (!uFnSetupSpawnPlayerInfo)
	{
		uFnSetupSpawnPlayerInfo = UFunction::FindFunction("Function REDGame.REDGameInfo.SetupSpawnPlayerInfo");
	}

	AREDGameInfo_execSetupSpawnPlayerInfo_Params SetupSpawnPlayerInfo_Params;
	memset(&SetupSpawnPlayerInfo_Params, 0, sizeof(SetupSpawnPlayerInfo_Params));
	memcpy_s(&SetupSpawnPlayerInfo_Params.PlayerID, sizeof(SetupSpawnPlayerInfo_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	memcpy_s(&SetupSpawnPlayerInfo_Params.CharaID, sizeof(SetupSpawnPlayerInfo_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&SetupSpawnPlayerInfo_Params.EnemyCharaID, sizeof(SetupSpawnPlayerInfo_Params.EnemyCharaID), &EnemyCharaID, sizeof(EnemyCharaID));
	memcpy_s(&SetupSpawnPlayerInfo_Params.MeshID, sizeof(SetupSpawnPlayerInfo_Params.MeshID), &MeshID, sizeof(MeshID));
	memcpy_s(&SetupSpawnPlayerInfo_Params.ColorID, sizeof(SetupSpawnPlayerInfo_Params.ColorID), &ColorID, sizeof(ColorID));
	memcpy_s(&SetupSpawnPlayerInfo_Params.VoiceID, sizeof(SetupSpawnPlayerInfo_Params.VoiceID), &VoiceID, sizeof(VoiceID));
	memcpy_s(&SetupSpawnPlayerInfo_Params.Info, sizeof(SetupSpawnPlayerInfo_Params.Info), &Info, sizeof(Info));

	AREDGameInfo::StaticClass()->ProcessEvent(uFnSetupSpawnPlayerInfo, &SetupSpawnPlayerInfo_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &SetupSpawnPlayerInfo_Params.Info, sizeof(SetupSpawnPlayerInfo_Params.Info));
};

// Function REDGame.REDGameInfo.UpdateControllerConnectStatus
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40632])
// Parameter Info:

void AREDGameInfo::UpdateControllerConnectStatus()
{
	static UFunction* uFnUpdateControllerConnectStatus = nullptr;

	if (!uFnUpdateControllerConnectStatus)
	{
		uFnUpdateControllerConnectStatus = UFunction::FindFunction("Function REDGame.REDGameInfo.UpdateControllerConnectStatus");
	}

	AREDGameInfo_execUpdateControllerConnectStatus_Params UpdateControllerConnectStatus_Params;
	memset(&UpdateControllerConnectStatus_Params, 0, sizeof(UpdateControllerConnectStatus_Params));

	this->ProcessEvent(uFnUpdateControllerConnectStatus, &UpdateControllerConnectStatus_Params, nullptr);
};

// Function REDGame.REDGameInfo.IsEnableRedirectPS3toPS4Input
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37646])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo::IsEnableRedirectPS3toPS4Input()
{
	static UFunction* uFnIsEnableRedirectPS3toPS4Input = nullptr;

	if (!uFnIsEnableRedirectPS3toPS4Input)
	{
		uFnIsEnableRedirectPS3toPS4Input = UFunction::FindFunction("Function REDGame.REDGameInfo.IsEnableRedirectPS3toPS4Input");
	}

	AREDGameInfo_execIsEnableRedirectPS3toPS4Input_Params IsEnableRedirectPS3toPS4Input_Params;
	memset(&IsEnableRedirectPS3toPS4Input_Params, 0, sizeof(IsEnableRedirectPS3toPS4Input_Params));

	this->ProcessEvent(uFnIsEnableRedirectPS3toPS4Input, &IsEnableRedirectPS3toPS4Input_Params, nullptr);

	return IsEnableRedirectPS3toPS4Input_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.IS_DEBUG_ON
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37589])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo::IS_DEBUG_ON()
{
	static UFunction* uFnIS_DEBUG_ON = nullptr;

	if (!uFnIS_DEBUG_ON)
	{
		uFnIS_DEBUG_ON = UFunction::FindFunction("Function REDGame.REDGameInfo.IS_DEBUG_ON");
	}

	AREDGameInfo_execIS_DEBUG_ON_Params IS_DEBUG_ON_Params;
	memset(&IS_DEBUG_ON_Params, 0, sizeof(IS_DEBUG_ON_Params));

	this->ProcessEvent(uFnIS_DEBUG_ON, &IS_DEBUG_ON_Params, nullptr);

	return IS_DEBUG_ON_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.IsUsePS3Assets
// [0x00022400] (FUNC_Native | FUNC_Static | FUNC_Public | FUNC_AllFlags) (iNative[37925])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo::IsUsePS3Assets()
{
	static UFunction* uFnIsUsePS3Assets = nullptr;

	if (!uFnIsUsePS3Assets)
	{
		uFnIsUsePS3Assets = UFunction::FindFunction("Function REDGame.REDGameInfo.IsUsePS3Assets");
	}

	AREDGameInfo_execIsUsePS3Assets_Params IsUsePS3Assets_Params;
	memset(&IsUsePS3Assets_Params, 0, sizeof(IsUsePS3Assets_Params));

	AREDGameInfo::StaticClass()->ProcessEvent(uFnIsUsePS3Assets, &IsUsePS3Assets_Params, nullptr);

	return IsUsePS3Assets_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.SceneFinalize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39471])
// Parameter Info:

void AREDGameInfo::SceneFinalize()
{
	static UFunction* uFnSceneFinalize = nullptr;

	if (!uFnSceneFinalize)
	{
		uFnSceneFinalize = UFunction::FindFunction("Function REDGame.REDGameInfo.SceneFinalize");
	}

	AREDGameInfo_execSceneFinalize_Params SceneFinalize_Params;
	memset(&SceneFinalize_Params, 0, sizeof(SceneFinalize_Params));

	this->ProcessEvent(uFnSceneFinalize, &SceneFinalize_Params, nullptr);
};

// Function REDGame.REDGameInfo.SceneInitialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39473])
// Parameter Info:

void AREDGameInfo::SceneInitialize()
{
	static UFunction* uFnSceneInitialize = nullptr;

	if (!uFnSceneInitialize)
	{
		uFnSceneInitialize = UFunction::FindFunction("Function REDGame.REDGameInfo.SceneInitialize");
	}

	AREDGameInfo_execSceneInitialize_Params SceneInitialize_Params;
	memset(&SceneInitialize_Params, 0, sizeof(SceneInitialize_Params));

	this->ProcessEvent(uFnSceneInitialize, &SceneInitialize_Params, nullptr);
};

// Function REDGame.REDGameInfo.IsAsyncLoading
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37599])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo::IsAsyncLoading()
{
	static UFunction* uFnIsAsyncLoading = nullptr;

	if (!uFnIsAsyncLoading)
	{
		uFnIsAsyncLoading = UFunction::FindFunction("Function REDGame.REDGameInfo.IsAsyncLoading");
	}

	AREDGameInfo_execIsAsyncLoading_Params IsAsyncLoading_Params;
	memset(&IsAsyncLoading_Params, 0, sizeof(IsAsyncLoading_Params));

	this->ProcessEvent(uFnIsAsyncLoading, &IsAsyncLoading_Params, nullptr);

	return IsAsyncLoading_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.IsPauseGame
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37768])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo::IsPauseGame()
{
	static UFunction* uFnIsPauseGame = nullptr;

	if (!uFnIsPauseGame)
	{
		uFnIsPauseGame = UFunction::FindFunction("Function REDGame.REDGameInfo.IsPauseGame");
	}

	AREDGameInfo_execIsPauseGame_Params IsPauseGame_Params;
	memset(&IsPauseGame_Params, 0, sizeof(IsPauseGame_Params));

	this->ProcessEvent(uFnIsPauseGame, &IsPauseGame_Params, nullptr);

	return IsPauseGame_Params.ReturnValue;
};

// Function REDGame.REDGameInfo.PauserTick
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13354])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo::PauserTick(float DeltaTime)
{
	static UFunction* uFnPauserTick = nullptr;

	if (!uFnPauserTick)
	{
		uFnPauserTick = UFunction::FindFunction("Function REDGame.REDGameInfo.PauserTick");
	}

	AREDGameInfo_execPauserTick_Params PauserTick_Params;
	memset(&PauserTick_Params, 0, sizeof(PauserTick_Params));
	memcpy_s(&PauserTick_Params.DeltaTime, sizeof(PauserTick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnPauserTick, &PauserTick_Params, nullptr);
};

// Function REDGame.REDGameInfo.SetupInternalHUDPtr
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39838])
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)

void AREDGameInfo::SetupInternalHUDPtr(class AHUD* HUD)
{
	static UFunction* uFnSetupInternalHUDPtr = nullptr;

	if (!uFnSetupInternalHUDPtr)
	{
		uFnSetupInternalHUDPtr = UFunction::FindFunction("Function REDGame.REDGameInfo.SetupInternalHUDPtr");
	}

	AREDGameInfo_execSetupInternalHUDPtr_Params SetupInternalHUDPtr_Params;
	memset(&SetupInternalHUDPtr_Params, 0, sizeof(SetupInternalHUDPtr_Params));
	SetupInternalHUDPtr_Params.HUD = HUD;

	this->ProcessEvent(uFnSetupInternalHUDPtr, &SetupInternalHUDPtr_Params, nullptr);
};

// Function REDGame.REDGameInfo.InitializeNetworkTextureList
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37529])
// Parameter Info:
// class UREDTexture2DArray*      TextureList                    (CPF_Parm)

void AREDGameInfo::InitializeNetworkTextureList(class UREDTexture2DArray* TextureList)
{
	static UFunction* uFnInitializeNetworkTextureList = nullptr;

	if (!uFnInitializeNetworkTextureList)
	{
		uFnInitializeNetworkTextureList = UFunction::FindFunction("Function REDGame.REDGameInfo.InitializeNetworkTextureList");
	}

	AREDGameInfo_execInitializeNetworkTextureList_Params InitializeNetworkTextureList_Params;
	memset(&InitializeNetworkTextureList_Params, 0, sizeof(InitializeNetworkTextureList_Params));
	InitializeNetworkTextureList_Params.TextureList = TextureList;

	this->ProcessEvent(uFnInitializeNetworkTextureList, &InitializeNetworkTextureList_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.SwitchPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isPause                        (CPF_Parm)

void AREDGameInfo_Adv::eventSwitchPause(bool isPause)
{
	static UFunction* uFnSwitchPause = nullptr;

	if (!uFnSwitchPause)
	{
		uFnSwitchPause = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SwitchPause");
	}

	AREDGameInfo_Adv_eventSwitchPause_Params SwitchPause_Params;
	memset(&SwitchPause_Params, 0, sizeof(SwitchPause_Params));
	SwitchPause_Params.isPause = isPause;

	this->ProcessEvent(uFnSwitchPause, &SwitchPause_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_Adv::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.Tick");
	}

	AREDGameInfo_Adv_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.SceneReset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Adv::eventSceneReset()
{
	static UFunction* uFnSceneReset = nullptr;

	if (!uFnSceneReset)
	{
		uFnSceneReset = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SceneReset");
	}

	AREDGameInfo_Adv_eventSceneReset_Params SceneReset_Params;
	memset(&SceneReset_Params, 0, sizeof(SceneReset_Params));

	this->ProcessEvent(uFnSceneReset, &SceneReset_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.GetKismetActorList
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class TArray<class AActor*>    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FName                    VarName                        (CPF_Parm)

class TArray<class AActor*> AREDGameInfo_Adv::eventGetKismetActorList(const class FName& VarName)
{
	static UFunction* uFnGetKismetActorList = nullptr;

	if (!uFnGetKismetActorList)
	{
		uFnGetKismetActorList = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.GetKismetActorList");
	}

	AREDGameInfo_Adv_eventGetKismetActorList_Params GetKismetActorList_Params;
	memset(&GetKismetActorList_Params, 0, sizeof(GetKismetActorList_Params));
	memcpy_s(&GetKismetActorList_Params.VarName, sizeof(GetKismetActorList_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetActorList, &GetKismetActorList_Params, nullptr);

	return GetKismetActorList_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Adv.GetKismetActor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    VarName                        (CPF_Parm)

class AActor* AREDGameInfo_Adv::eventGetKismetActor(const class FName& VarName)
{
	static UFunction* uFnGetKismetActor = nullptr;

	if (!uFnGetKismetActor)
	{
		uFnGetKismetActor = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.GetKismetActor");
	}

	AREDGameInfo_Adv_eventGetKismetActor_Params GetKismetActor_Params;
	memset(&GetKismetActor_Params, 0, sizeof(GetKismetActor_Params));
	memcpy_s(&GetKismetActor_Params.VarName, sizeof(GetKismetActor_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetActor, &GetKismetActor_Params, nullptr);

	return GetKismetActor_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Adv.AdvKismetEventStart
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  EventName                      (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       IsLoad                         (CPF_Parm)

void AREDGameInfo_Adv::eventAdvKismetEventStart(const class FString& EventName, bool IsLoad)
{
	static UFunction* uFnAdvKismetEventStart = nullptr;

	if (!uFnAdvKismetEventStart)
	{
		uFnAdvKismetEventStart = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.AdvKismetEventStart");
	}

	AREDGameInfo_Adv_eventAdvKismetEventStart_Params AdvKismetEventStart_Params;
	memset(&AdvKismetEventStart_Params, 0, sizeof(AdvKismetEventStart_Params));
	memcpy_s(&AdvKismetEventStart_Params.EventName, sizeof(AdvKismetEventStart_Params.EventName), &EventName, sizeof(EventName));
	AdvKismetEventStart_Params.IsLoad = IsLoad;

	this->ProcessEvent(uFnAdvKismetEventStart, &AdvKismetEventStart_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.SetDispBattleBG
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  bgname                         (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       IsDisp                         (CPF_Parm)

void AREDGameInfo_Adv::eventSetDispBattleBG(const class FString& bgname, bool IsDisp)
{
	static UFunction* uFnSetDispBattleBG = nullptr;

	if (!uFnSetDispBattleBG)
	{
		uFnSetDispBattleBG = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SetDispBattleBG");
	}

	AREDGameInfo_Adv_eventSetDispBattleBG_Params SetDispBattleBG_Params;
	memset(&SetDispBattleBG_Params, 0, sizeof(SetDispBattleBG_Params));
	memcpy_s(&SetDispBattleBG_Params.bgname, sizeof(SetDispBattleBG_Params.bgname), &bgname, sizeof(bgname));
	SetDispBattleBG_Params.IsDisp = IsDisp;

	this->ProcessEvent(uFnSetDispBattleBG, &SetDispBattleBG_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.IsLoadingBattleBG
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Adv::eventIsLoadingBattleBG()
{
	static UFunction* uFnIsLoadingBattleBG = nullptr;

	if (!uFnIsLoadingBattleBG)
	{
		uFnIsLoadingBattleBG = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.IsLoadingBattleBG");
	}

	AREDGameInfo_Adv_eventIsLoadingBattleBG_Params IsLoadingBattleBG_Params;
	memset(&IsLoadingBattleBG_Params, 0, sizeof(IsLoadingBattleBG_Params));

	this->ProcessEvent(uFnIsLoadingBattleBG, &IsLoadingBattleBG_Params, nullptr);

	return IsLoadingBattleBG_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Adv.SetLoadBattleBG
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  bgname                         (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isUnload                       (CPF_Parm)

void AREDGameInfo_Adv::eventSetLoadBattleBG(const class FString& bgname, bool isUnload)
{
	static UFunction* uFnSetLoadBattleBG = nullptr;

	if (!uFnSetLoadBattleBG)
	{
		uFnSetLoadBattleBG = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SetLoadBattleBG");
	}

	AREDGameInfo_Adv_eventSetLoadBattleBG_Params SetLoadBattleBG_Params;
	memset(&SetLoadBattleBG_Params, 0, sizeof(SetLoadBattleBG_Params));
	memcpy_s(&SetLoadBattleBG_Params.bgname, sizeof(SetLoadBattleBG_Params.bgname), &bgname, sizeof(bgname));
	SetLoadBattleBG_Params.isUnload = isUnload;

	this->ProcessEvent(uFnSetLoadBattleBG, &SetLoadBattleBG_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.CheckBattleBG
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  bgname                         (CPF_Parm | CPF_NeedCtorLink)

bool AREDGameInfo_Adv::eventCheckBattleBG(const class FString& bgname)
{
	static UFunction* uFnCheckBattleBG = nullptr;

	if (!uFnCheckBattleBG)
	{
		uFnCheckBattleBG = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.CheckBattleBG");
	}

	AREDGameInfo_Adv_eventCheckBattleBG_Params CheckBattleBG_Params;
	memset(&CheckBattleBG_Params, 0, sizeof(CheckBattleBG_Params));
	memcpy_s(&CheckBattleBG_Params.bgname, sizeof(CheckBattleBG_Params.bgname), &bgname, sizeof(bgname));

	this->ProcessEvent(uFnCheckBattleBG, &CheckBattleBG_Params, nullptr);

	return CheckBattleBG_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Adv.SpawnCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AREDPawn* AREDGameInfo_Adv::eventSpawnCamera()
{
	static UFunction* uFnSpawnCamera = nullptr;

	if (!uFnSpawnCamera)
	{
		uFnSpawnCamera = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SpawnCamera");
	}

	AREDGameInfo_Adv_eventSpawnCamera_Params SpawnCamera_Params;
	memset(&SpawnCamera_Params, 0, sizeof(SpawnCamera_Params));

	this->ProcessEvent(uFnSpawnCamera, &SpawnCamera_Params, nullptr);

	return SpawnCamera_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Adv.SpawnLight
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AREDPawn* AREDGameInfo_Adv::eventSpawnLight()
{
	static UFunction* uFnSpawnLight = nullptr;

	if (!uFnSpawnLight)
	{
		uFnSpawnLight = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SpawnLight");
	}

	AREDGameInfo_Adv_eventSpawnLight_Params SpawnLight_Params;
	memset(&SpawnLight_Params, 0, sizeof(SpawnLight_Params));

	this->ProcessEvent(uFnSpawnLight, &SpawnLight_Params, nullptr);

	return SpawnLight_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Adv.SpawnAvatar
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UREDMeshArray*           Meshes                         (CPF_Parm)
// class UREDAnimArray*           Anim                           (CPF_Parm)
// class UREDPawnMaterials*       MaterialSet                    (CPF_Parm)

class AREDPawn* AREDGameInfo_Adv::eventSpawnAvatar(class UREDMeshArray* Meshes, class UREDAnimArray* Anim, class UREDPawnMaterials* MaterialSet)
{
	static UFunction* uFnSpawnAvatar = nullptr;

	if (!uFnSpawnAvatar)
	{
		uFnSpawnAvatar = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SpawnAvatar");
	}

	AREDGameInfo_Adv_eventSpawnAvatar_Params SpawnAvatar_Params;
	memset(&SpawnAvatar_Params, 0, sizeof(SpawnAvatar_Params));
	SpawnAvatar_Params.Meshes = Meshes;
	SpawnAvatar_Params.Anim = Anim;
	SpawnAvatar_Params.MaterialSet = MaterialSet;

	this->ProcessEvent(uFnSpawnAvatar, &SpawnAvatar_Params, nullptr);

	return SpawnAvatar_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Adv.SoundVolumeTarget
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USoundCue*               Target                         (CPF_Parm)
// class FName                    Category                       (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)
// float                          Vol                            (CPF_Parm)

void AREDGameInfo_Adv::eventSoundVolumeTarget(class USoundCue* Target, const class FName& Category, int32_t frame, float Vol)
{
	static UFunction* uFnSoundVolumeTarget = nullptr;

	if (!uFnSoundVolumeTarget)
	{
		uFnSoundVolumeTarget = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SoundVolumeTarget");
	}

	AREDGameInfo_Adv_eventSoundVolumeTarget_Params SoundVolumeTarget_Params;
	memset(&SoundVolumeTarget_Params, 0, sizeof(SoundVolumeTarget_Params));
	SoundVolumeTarget_Params.Target = Target;
	memcpy_s(&SoundVolumeTarget_Params.Category, sizeof(SoundVolumeTarget_Params.Category), &Category, sizeof(Category));
	memcpy_s(&SoundVolumeTarget_Params.frame, sizeof(SoundVolumeTarget_Params.frame), &frame, sizeof(frame));
	memcpy_s(&SoundVolumeTarget_Params.Vol, sizeof(SoundVolumeTarget_Params.Vol), &Vol, sizeof(Vol));

	this->ProcessEvent(uFnSoundVolumeTarget, &SoundVolumeTarget_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.SoundVolumeCategory
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    Category                       (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)
// float                          Vol                            (CPF_Parm)

void AREDGameInfo_Adv::eventSoundVolumeCategory(const class FName& Category, int32_t frame, float Vol)
{
	static UFunction* uFnSoundVolumeCategory = nullptr;

	if (!uFnSoundVolumeCategory)
	{
		uFnSoundVolumeCategory = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SoundVolumeCategory");
	}

	AREDGameInfo_Adv_eventSoundVolumeCategory_Params SoundVolumeCategory_Params;
	memset(&SoundVolumeCategory_Params, 0, sizeof(SoundVolumeCategory_Params));
	memcpy_s(&SoundVolumeCategory_Params.Category, sizeof(SoundVolumeCategory_Params.Category), &Category, sizeof(Category));
	memcpy_s(&SoundVolumeCategory_Params.frame, sizeof(SoundVolumeCategory_Params.frame), &frame, sizeof(frame));
	memcpy_s(&SoundVolumeCategory_Params.Vol, sizeof(SoundVolumeCategory_Params.Vol), &Vol, sizeof(Vol));

	this->ProcessEvent(uFnSoundVolumeCategory, &SoundVolumeCategory_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.StopSoundTarget
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USoundCue*               Target                         (CPF_Parm)
// class FName                    Category                       (CPF_Parm)
// int32_t                        frame                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Adv::eventStopSoundTarget(class USoundCue* Target, const class FName& Category, int32_t frame)
{
	static UFunction* uFnStopSoundTarget = nullptr;

	if (!uFnStopSoundTarget)
	{
		uFnStopSoundTarget = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.StopSoundTarget");
	}

	AREDGameInfo_Adv_eventStopSoundTarget_Params StopSoundTarget_Params;
	memset(&StopSoundTarget_Params, 0, sizeof(StopSoundTarget_Params));
	StopSoundTarget_Params.Target = Target;
	memcpy_s(&StopSoundTarget_Params.Category, sizeof(StopSoundTarget_Params.Category), &Category, sizeof(Category));
	memcpy_s(&StopSoundTarget_Params.frame, sizeof(StopSoundTarget_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnStopSoundTarget, &StopSoundTarget_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.StopSoundCategory
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    Category                       (CPF_Parm)
// int32_t                        frame                          (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Adv::eventStopSoundCategory(const class FName& Category, int32_t frame)
{
	static UFunction* uFnStopSoundCategory = nullptr;

	if (!uFnStopSoundCategory)
	{
		uFnStopSoundCategory = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.StopSoundCategory");
	}

	AREDGameInfo_Adv_eventStopSoundCategory_Params StopSoundCategory_Params;
	memset(&StopSoundCategory_Params, 0, sizeof(StopSoundCategory_Params));
	memcpy_s(&StopSoundCategory_Params.Category, sizeof(StopSoundCategory_Params.Category), &Category, sizeof(Category));
	memcpy_s(&StopSoundCategory_Params.frame, sizeof(StopSoundCategory_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnStopSoundCategory, &StopSoundCategory_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Adv::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.GameEnding");
	}

	AREDGameInfo_Adv_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Adv::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.InitGame");
	}

	AREDGameInfo_Adv_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_Adv.UpdatePause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40801])
// Parameter Info:

void AREDGameInfo_Adv::UpdatePause()
{
	static UFunction* uFnUpdatePause = nullptr;

	if (!uFnUpdatePause)
	{
		uFnUpdatePause = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.UpdatePause");
	}

	AREDGameInfo_Adv_execUpdatePause_Params UpdatePause_Params;
	memset(&UpdatePause_Params, 0, sizeof(UpdatePause_Params));

	this->ProcessEvent(uFnUpdatePause, &UpdatePause_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.UpdateScene
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40841])
// Parameter Info:

void AREDGameInfo_Adv::UpdateScene()
{
	static UFunction* uFnUpdateScene = nullptr;

	if (!uFnUpdateScene)
	{
		uFnUpdateScene = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.UpdateScene");
	}

	AREDGameInfo_Adv_execUpdateScene_Params UpdateScene_Params;
	memset(&UpdateScene_Params, 0, sizeof(UpdateScene_Params));

	this->ProcessEvent(uFnUpdateScene, &UpdateScene_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.SceneFinalize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39471])
// Parameter Info:

void AREDGameInfo_Adv::SceneFinalize()
{
	static UFunction* uFnSceneFinalize = nullptr;

	if (!uFnSceneFinalize)
	{
		uFnSceneFinalize = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SceneFinalize");
	}

	AREDGameInfo_Adv_execSceneFinalize_Params SceneFinalize_Params;
	memset(&SceneFinalize_Params, 0, sizeof(SceneFinalize_Params));

	this->ProcessEvent(uFnSceneFinalize, &SceneFinalize_Params, nullptr);
};

// Function REDGame.REDGameInfo_Adv.SceneInitialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39473])
// Parameter Info:

void AREDGameInfo_Adv::SceneInitialize()
{
	static UFunction* uFnSceneInitialize = nullptr;

	if (!uFnSceneInitialize)
	{
		uFnSceneInitialize = UFunction::FindFunction("Function REDGame.REDGameInfo_Adv.SceneInitialize");
	}

	AREDGameInfo_Adv_execSceneInitialize_Params SceneInitialize_Params;
	memset(&SceneInitialize_Params, 0, sizeof(SceneInitialize_Params));

	this->ProcessEvent(uFnSceneInitialize, &SceneInitialize_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_DigitalFigure::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.GameEnding");
	}

	AREDGameInfo_DigitalFigure_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.SwitchPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isPause                        (CPF_Parm)

void AREDGameInfo_DigitalFigure::eventSwitchPause(bool isPause)
{
	static UFunction* uFnSwitchPause = nullptr;

	if (!uFnSwitchPause)
	{
		uFnSwitchPause = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SwitchPause");
	}

	AREDGameInfo_DigitalFigure_eventSwitchPause_Params SwitchPause_Params;
	memset(&SwitchPause_Params, 0, sizeof(SwitchPause_Params));
	SwitchPause_Params.isPause = isPause;

	this->ProcessEvent(uFnSwitchPause, &SwitchPause_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_DigitalFigure::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.Tick");
	}

	AREDGameInfo_DigitalFigure_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.SceneReset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_DigitalFigure::eventSceneReset()
{
	static UFunction* uFnSceneReset = nullptr;

	if (!uFnSceneReset)
	{
		uFnSceneReset = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SceneReset");
	}

	AREDGameInfo_DigitalFigure_eventSceneReset_Params SceneReset_Params;
	memset(&SceneReset_Params, 0, sizeof(SceneReset_Params));

	this->ProcessEvent(uFnSceneReset, &SceneReset_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.GetKismetActorList
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class TArray<class AActor*>    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FName                    VarName                        (CPF_Parm)

class TArray<class AActor*> AREDGameInfo_DigitalFigure::eventGetKismetActorList(const class FName& VarName)
{
	static UFunction* uFnGetKismetActorList = nullptr;

	if (!uFnGetKismetActorList)
	{
		uFnGetKismetActorList = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.GetKismetActorList");
	}

	AREDGameInfo_DigitalFigure_eventGetKismetActorList_Params GetKismetActorList_Params;
	memset(&GetKismetActorList_Params, 0, sizeof(GetKismetActorList_Params));
	memcpy_s(&GetKismetActorList_Params.VarName, sizeof(GetKismetActorList_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetActorList, &GetKismetActorList_Params, nullptr);

	return GetKismetActorList_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_DigitalFigure.GetKismetMaterialInstanceConstant
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UMaterialInstanceConstant* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    VarName                        (CPF_Parm)

class UMaterialInstanceConstant* AREDGameInfo_DigitalFigure::eventGetKismetMaterialInstanceConstant(const class FName& VarName)
{
	static UFunction* uFnGetKismetMaterialInstanceConstant = nullptr;

	if (!uFnGetKismetMaterialInstanceConstant)
	{
		uFnGetKismetMaterialInstanceConstant = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.GetKismetMaterialInstanceConstant");
	}

	AREDGameInfo_DigitalFigure_eventGetKismetMaterialInstanceConstant_Params GetKismetMaterialInstanceConstant_Params;
	memset(&GetKismetMaterialInstanceConstant_Params, 0, sizeof(GetKismetMaterialInstanceConstant_Params));
	memcpy_s(&GetKismetMaterialInstanceConstant_Params.VarName, sizeof(GetKismetMaterialInstanceConstant_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetMaterialInstanceConstant, &GetKismetMaterialInstanceConstant_Params, nullptr);

	return GetKismetMaterialInstanceConstant_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_DigitalFigure.GetKismetActor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    VarName                        (CPF_Parm)

class AActor* AREDGameInfo_DigitalFigure::eventGetKismetActor(const class FName& VarName)
{
	static UFunction* uFnGetKismetActor = nullptr;

	if (!uFnGetKismetActor)
	{
		uFnGetKismetActor = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.GetKismetActor");
	}

	AREDGameInfo_DigitalFigure_eventGetKismetActor_Params GetKismetActor_Params;
	memset(&GetKismetActor_Params, 0, sizeof(GetKismetActor_Params));
	memcpy_s(&GetKismetActor_Params.VarName, sizeof(GetKismetActor_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetActor, &GetKismetActor_Params, nullptr);

	return GetKismetActor_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_DigitalFigure.AdvKismetEventStart
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  EventName                      (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       IsLoad                         (CPF_Parm)

void AREDGameInfo_DigitalFigure::eventAdvKismetEventStart(const class FString& EventName, bool IsLoad)
{
	static UFunction* uFnAdvKismetEventStart = nullptr;

	if (!uFnAdvKismetEventStart)
	{
		uFnAdvKismetEventStart = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.AdvKismetEventStart");
	}

	AREDGameInfo_DigitalFigure_eventAdvKismetEventStart_Params AdvKismetEventStart_Params;
	memset(&AdvKismetEventStart_Params, 0, sizeof(AdvKismetEventStart_Params));
	memcpy_s(&AdvKismetEventStart_Params.EventName, sizeof(AdvKismetEventStart_Params.EventName), &EventName, sizeof(EventName));
	AdvKismetEventStart_Params.IsLoad = IsLoad;

	this->ProcessEvent(uFnAdvKismetEventStart, &AdvKismetEventStart_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.SetDispBattleBG
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  bgname                         (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       IsDisp                         (CPF_Parm)

void AREDGameInfo_DigitalFigure::eventSetDispBattleBG(const class FString& bgname, bool IsDisp)
{
	static UFunction* uFnSetDispBattleBG = nullptr;

	if (!uFnSetDispBattleBG)
	{
		uFnSetDispBattleBG = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SetDispBattleBG");
	}

	AREDGameInfo_DigitalFigure_eventSetDispBattleBG_Params SetDispBattleBG_Params;
	memset(&SetDispBattleBG_Params, 0, sizeof(SetDispBattleBG_Params));
	memcpy_s(&SetDispBattleBG_Params.bgname, sizeof(SetDispBattleBG_Params.bgname), &bgname, sizeof(bgname));
	SetDispBattleBG_Params.IsDisp = IsDisp;

	this->ProcessEvent(uFnSetDispBattleBG, &SetDispBattleBG_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.IsLoadingBattleBG
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_DigitalFigure::eventIsLoadingBattleBG()
{
	static UFunction* uFnIsLoadingBattleBG = nullptr;

	if (!uFnIsLoadingBattleBG)
	{
		uFnIsLoadingBattleBG = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.IsLoadingBattleBG");
	}

	AREDGameInfo_DigitalFigure_eventIsLoadingBattleBG_Params IsLoadingBattleBG_Params;
	memset(&IsLoadingBattleBG_Params, 0, sizeof(IsLoadingBattleBG_Params));

	this->ProcessEvent(uFnIsLoadingBattleBG, &IsLoadingBattleBG_Params, nullptr);

	return IsLoadingBattleBG_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_DigitalFigure.SetLoadBattleBG
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  bgname                         (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isUnload                       (CPF_Parm)

void AREDGameInfo_DigitalFigure::eventSetLoadBattleBG(const class FString& bgname, bool isUnload)
{
	static UFunction* uFnSetLoadBattleBG = nullptr;

	if (!uFnSetLoadBattleBG)
	{
		uFnSetLoadBattleBG = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SetLoadBattleBG");
	}

	AREDGameInfo_DigitalFigure_eventSetLoadBattleBG_Params SetLoadBattleBG_Params;
	memset(&SetLoadBattleBG_Params, 0, sizeof(SetLoadBattleBG_Params));
	memcpy_s(&SetLoadBattleBG_Params.bgname, sizeof(SetLoadBattleBG_Params.bgname), &bgname, sizeof(bgname));
	SetLoadBattleBG_Params.isUnload = isUnload;

	this->ProcessEvent(uFnSetLoadBattleBG, &SetLoadBattleBG_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.SpawnCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AREDPawn* AREDGameInfo_DigitalFigure::eventSpawnCamera()
{
	static UFunction* uFnSpawnCamera = nullptr;

	if (!uFnSpawnCamera)
	{
		uFnSpawnCamera = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SpawnCamera");
	}

	AREDGameInfo_DigitalFigure_eventSpawnCamera_Params SpawnCamera_Params;
	memset(&SpawnCamera_Params, 0, sizeof(SpawnCamera_Params));

	this->ProcessEvent(uFnSpawnCamera, &SpawnCamera_Params, nullptr);

	return SpawnCamera_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_DigitalFigure.SpawnLight
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AREDPawn* AREDGameInfo_DigitalFigure::eventSpawnLight()
{
	static UFunction* uFnSpawnLight = nullptr;

	if (!uFnSpawnLight)
	{
		uFnSpawnLight = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SpawnLight");
	}

	AREDGameInfo_DigitalFigure_eventSpawnLight_Params SpawnLight_Params;
	memset(&SpawnLight_Params, 0, sizeof(SpawnLight_Params));

	this->ProcessEvent(uFnSpawnLight, &SpawnLight_Params, nullptr);

	return SpawnLight_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_DigitalFigure.SpawnLoadingAvatar
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UREDMeshArray*           Meshes                         (CPF_Parm)
// class UREDAnimArray*           Anim                           (CPF_Parm)

class AREDPawn* AREDGameInfo_DigitalFigure::eventSpawnLoadingAvatar(class UREDMeshArray* Meshes, class UREDAnimArray* Anim)
{
	static UFunction* uFnSpawnLoadingAvatar = nullptr;

	if (!uFnSpawnLoadingAvatar)
	{
		uFnSpawnLoadingAvatar = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SpawnLoadingAvatar");
	}

	AREDGameInfo_DigitalFigure_eventSpawnLoadingAvatar_Params SpawnLoadingAvatar_Params;
	memset(&SpawnLoadingAvatar_Params, 0, sizeof(SpawnLoadingAvatar_Params));
	SpawnLoadingAvatar_Params.Meshes = Meshes;
	SpawnLoadingAvatar_Params.Anim = Anim;

	this->ProcessEvent(uFnSpawnLoadingAvatar, &SpawnLoadingAvatar_Params, nullptr);

	return SpawnLoadingAvatar_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_DigitalFigure.SpawnAvatar
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UREDMeshArray*           Meshes                         (CPF_Parm)
// class UREDAnimArray*           Anim                           (CPF_Parm)
// class UREDPawnMaterials*       MaterialSet                    (CPF_Parm)

class AREDPawn* AREDGameInfo_DigitalFigure::eventSpawnAvatar(class UREDMeshArray* Meshes, class UREDAnimArray* Anim, class UREDPawnMaterials* MaterialSet)
{
	static UFunction* uFnSpawnAvatar = nullptr;

	if (!uFnSpawnAvatar)
	{
		uFnSpawnAvatar = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SpawnAvatar");
	}

	AREDGameInfo_DigitalFigure_eventSpawnAvatar_Params SpawnAvatar_Params;
	memset(&SpawnAvatar_Params, 0, sizeof(SpawnAvatar_Params));
	SpawnAvatar_Params.Meshes = Meshes;
	SpawnAvatar_Params.Anim = Anim;
	SpawnAvatar_Params.MaterialSet = MaterialSet;

	this->ProcessEvent(uFnSpawnAvatar, &SpawnAvatar_Params, nullptr);

	return SpawnAvatar_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_DigitalFigure.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_DigitalFigure::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.InitGame");
	}

	AREDGameInfo_DigitalFigure_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_DigitalFigure.UpdatePause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40801])
// Parameter Info:

void AREDGameInfo_DigitalFigure::UpdatePause()
{
	static UFunction* uFnUpdatePause = nullptr;

	if (!uFnUpdatePause)
	{
		uFnUpdatePause = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.UpdatePause");
	}

	AREDGameInfo_DigitalFigure_execUpdatePause_Params UpdatePause_Params;
	memset(&UpdatePause_Params, 0, sizeof(UpdatePause_Params));

	this->ProcessEvent(uFnUpdatePause, &UpdatePause_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.UpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40790])
// Parameter Info:

void AREDGameInfo_DigitalFigure::UpdateNative()
{
	static UFunction* uFnUpdateNative = nullptr;

	if (!uFnUpdateNative)
	{
		uFnUpdateNative = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.UpdateNative");
	}

	AREDGameInfo_DigitalFigure_execUpdateNative_Params UpdateNative_Params;
	memset(&UpdateNative_Params, 0, sizeof(UpdateNative_Params));

	this->ProcessEvent(uFnUpdateNative, &UpdateNative_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.SceneFinalize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39471])
// Parameter Info:

void AREDGameInfo_DigitalFigure::SceneFinalize()
{
	static UFunction* uFnSceneFinalize = nullptr;

	if (!uFnSceneFinalize)
	{
		uFnSceneFinalize = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SceneFinalize");
	}

	AREDGameInfo_DigitalFigure_execSceneFinalize_Params SceneFinalize_Params;
	memset(&SceneFinalize_Params, 0, sizeof(SceneFinalize_Params));

	this->ProcessEvent(uFnSceneFinalize, &SceneFinalize_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.SceneInitialize_AfterFileLoad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39474])
// Parameter Info:

void AREDGameInfo_DigitalFigure::SceneInitialize_AfterFileLoad()
{
	static UFunction* uFnSceneInitialize_AfterFileLoad = nullptr;

	if (!uFnSceneInitialize_AfterFileLoad)
	{
		uFnSceneInitialize_AfterFileLoad = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SceneInitialize_AfterFileLoad");
	}

	AREDGameInfo_DigitalFigure_execSceneInitialize_AfterFileLoad_Params SceneInitialize_AfterFileLoad_Params;
	memset(&SceneInitialize_AfterFileLoad_Params, 0, sizeof(SceneInitialize_AfterFileLoad_Params));

	this->ProcessEvent(uFnSceneInitialize_AfterFileLoad, &SceneInitialize_AfterFileLoad_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.SceneInitialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39473])
// Parameter Info:

void AREDGameInfo_DigitalFigure::SceneInitialize()
{
	static UFunction* uFnSceneInitialize = nullptr;

	if (!uFnSceneInitialize)
	{
		uFnSceneInitialize = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.SceneInitialize");
	}

	AREDGameInfo_DigitalFigure_execSceneInitialize_Params SceneInitialize_Params;
	memset(&SceneInitialize_Params, 0, sizeof(SceneInitialize_Params));

	this->ProcessEvent(uFnSceneInitialize, &SceneInitialize_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.PlaySoundCue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39043])
// Parameter Info:
// class USoundCue*               Cue                            (CPF_Parm)
// EUE_BGM_ID                     bgmid                          (CPF_Parm)

void AREDGameInfo_DigitalFigure::PlaySoundCue(class USoundCue* Cue, EUE_BGM_ID bgmid)
{
	static UFunction* uFnPlaySoundCue = nullptr;

	if (!uFnPlaySoundCue)
	{
		uFnPlaySoundCue = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.PlaySoundCue");
	}

	AREDGameInfo_DigitalFigure_execPlaySoundCue_Params PlaySoundCue_Params;
	memset(&PlaySoundCue_Params, 0, sizeof(PlaySoundCue_Params));
	PlaySoundCue_Params.Cue = Cue;
	memcpy_s(&PlaySoundCue_Params.bgmid, sizeof(PlaySoundCue_Params.bgmid), &bgmid, sizeof(bgmid));

	this->ProcessEvent(uFnPlaySoundCue, &PlaySoundCue_Params, nullptr);
};

// Function REDGame.REDGameInfo_DigitalFigure.GetPlayBGMID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37134])
// Parameter Info:
// EUE_BGM_ID                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BGM_ID AREDGameInfo_DigitalFigure::GetPlayBGMID()
{
	static UFunction* uFnGetPlayBGMID = nullptr;

	if (!uFnGetPlayBGMID)
	{
		uFnGetPlayBGMID = UFunction::FindFunction("Function REDGame.REDGameInfo_DigitalFigure.GetPlayBGMID");
	}

	AREDGameInfo_DigitalFigure_execGetPlayBGMID_Params GetPlayBGMID_Params;
	memset(&GetPlayBGMID_Params, 0, sizeof(GetPlayBGMID_Params));

	this->ProcessEvent(uFnGetPlayBGMID, &GetPlayBGMID_Params, nullptr);

	return static_cast<EUE_BGM_ID>(GetPlayBGMID_Params.ReturnValue);
};

// Function REDGame.REDGameInfo_Ending.GetKismetVariableBool
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    VarName                        (CPF_Parm)

bool AREDGameInfo_Ending::GetKismetVariableBool(const class FName& VarName)
{
	static UFunction* uFnGetKismetVariableBool = nullptr;

	if (!uFnGetKismetVariableBool)
	{
		uFnGetKismetVariableBool = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.GetKismetVariableBool");
	}

	AREDGameInfo_Ending_execGetKismetVariableBool_Params GetKismetVariableBool_Params;
	memset(&GetKismetVariableBool_Params, 0, sizeof(GetKismetVariableBool_Params));
	memcpy_s(&GetKismetVariableBool_Params.VarName, sizeof(GetKismetVariableBool_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetVariableBool, &GetKismetVariableBool_Params, nullptr);

	return GetKismetVariableBool_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Ending.SwitchPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isPause                        (CPF_Parm)

void AREDGameInfo_Ending::eventSwitchPause(bool isPause)
{
	static UFunction* uFnSwitchPause = nullptr;

	if (!uFnSwitchPause)
	{
		uFnSwitchPause = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.SwitchPause");
	}

	AREDGameInfo_Ending_eventSwitchPause_Params SwitchPause_Params;
	memset(&SwitchPause_Params, 0, sizeof(SwitchPause_Params));
	SwitchPause_Params.isPause = isPause;

	this->ProcessEvent(uFnSwitchPause, &SwitchPause_Params, nullptr);
};

// Function REDGame.REDGameInfo_Ending.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_Ending::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.Tick");
	}

	AREDGameInfo_Ending_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_Ending.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Ending::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.InitGame");
	}

	AREDGameInfo_Ending_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_Ending.UpdateDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40649])
// Parameter Info:

void AREDGameInfo_Ending::UpdateDraw()
{
	static UFunction* uFnUpdateDraw = nullptr;

	if (!uFnUpdateDraw)
	{
		uFnUpdateDraw = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.UpdateDraw");
	}

	AREDGameInfo_Ending_execUpdateDraw_Params UpdateDraw_Params;
	memset(&UpdateDraw_Params, 0, sizeof(UpdateDraw_Params));

	this->ProcessEvent(uFnUpdateDraw, &UpdateDraw_Params, nullptr);
};

// Function REDGame.REDGameInfo_Ending.UpdateMain
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40763])
// Parameter Info:

void AREDGameInfo_Ending::UpdateMain()
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.UpdateMain");
	}

	AREDGameInfo_Ending_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGameInfo_Ending.SceneFinalize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39471])
// Parameter Info:

void AREDGameInfo_Ending::SceneFinalize()
{
	static UFunction* uFnSceneFinalize = nullptr;

	if (!uFnSceneFinalize)
	{
		uFnSceneFinalize = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.SceneFinalize");
	}

	AREDGameInfo_Ending_execSceneFinalize_Params SceneFinalize_Params;
	memset(&SceneFinalize_Params, 0, sizeof(SceneFinalize_Params));

	this->ProcessEvent(uFnSceneFinalize, &SceneFinalize_Params, nullptr);
};

// Function REDGame.REDGameInfo_Ending.SceneInitialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39473])
// Parameter Info:

void AREDGameInfo_Ending::SceneInitialize()
{
	static UFunction* uFnSceneInitialize = nullptr;

	if (!uFnSceneInitialize)
	{
		uFnSceneInitialize = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.SceneInitialize");
	}

	AREDGameInfo_Ending_execSceneInitialize_Params SceneInitialize_Params;
	memset(&SceneInitialize_Params, 0, sizeof(SceneInitialize_Params));

	this->ProcessEvent(uFnSceneInitialize, &SceneInitialize_Params, nullptr);
};

// Function REDGame.REDGameInfo_Ending.StopSubtitle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40107])
// Parameter Info:

void AREDGameInfo_Ending::StopSubtitle()
{
	static UFunction* uFnStopSubtitle = nullptr;

	if (!uFnStopSubtitle)
	{
		uFnStopSubtitle = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.StopSubtitle");
	}

	AREDGameInfo_Ending_execStopSubtitle_Params StopSubtitle_Params;
	memset(&StopSubtitle_Params, 0, sizeof(StopSubtitle_Params));

	this->ProcessEvent(uFnStopSubtitle, &StopSubtitle_Params, nullptr);
};

// Function REDGame.REDGameInfo_Ending.UpdatePause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40801])
// Parameter Info:

void AREDGameInfo_Ending::UpdatePause()
{
	static UFunction* uFnUpdatePause = nullptr;

	if (!uFnUpdatePause)
	{
		uFnUpdatePause = UFunction::FindFunction("Function REDGame.REDGameInfo_Ending.UpdatePause");
	}

	AREDGameInfo_Ending_execUpdatePause_Params UpdatePause_Params;
	memset(&UpdatePause_Params, 0, sizeof(UpdatePause_Params));

	this->ProcessEvent(uFnUpdatePause, &UpdatePause_Params, nullptr);
};

// Function REDGame.REDGameInfo_InterludeDrama.GetKismetVariableBool
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    VarName                        (CPF_Parm)

bool AREDGameInfo_InterludeDrama::GetKismetVariableBool(const class FName& VarName)
{
	static UFunction* uFnGetKismetVariableBool = nullptr;

	if (!uFnGetKismetVariableBool)
	{
		uFnGetKismetVariableBool = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.GetKismetVariableBool");
	}

	AREDGameInfo_InterludeDrama_execGetKismetVariableBool_Params GetKismetVariableBool_Params;
	memset(&GetKismetVariableBool_Params, 0, sizeof(GetKismetVariableBool_Params));
	memcpy_s(&GetKismetVariableBool_Params.VarName, sizeof(GetKismetVariableBool_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetVariableBool, &GetKismetVariableBool_Params, nullptr);

	return GetKismetVariableBool_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_InterludeDrama.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_InterludeDrama::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.Tick");
	}

	AREDGameInfo_InterludeDrama_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_InterludeDrama.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_InterludeDrama::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.InitGame");
	}

	AREDGameInfo_InterludeDrama_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_InterludeDrama.InitPreLoad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37543])
// Parameter Info:

void AREDGameInfo_InterludeDrama::InitPreLoad()
{
	static UFunction* uFnInitPreLoad = nullptr;

	if (!uFnInitPreLoad)
	{
		uFnInitPreLoad = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.InitPreLoad");
	}

	AREDGameInfo_InterludeDrama_execInitPreLoad_Params InitPreLoad_Params;
	memset(&InitPreLoad_Params, 0, sizeof(InitPreLoad_Params));

	this->ProcessEvent(uFnInitPreLoad, &InitPreLoad_Params, nullptr);
};

// Function REDGame.REDGameInfo_InterludeDrama.StopMovie
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[28957])
// Parameter Info:

void AREDGameInfo_InterludeDrama::StopMovie()
{
	static UFunction* uFnStopMovie = nullptr;

	if (!uFnStopMovie)
	{
		uFnStopMovie = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.StopMovie");
	}

	AREDGameInfo_InterludeDrama_execStopMovie_Params StopMovie_Params;
	memset(&StopMovie_Params, 0, sizeof(StopMovie_Params));

	this->ProcessEvent(uFnStopMovie, &StopMovie_Params, nullptr);
};

// Function REDGame.REDGameInfo_InterludeDrama.SetNewChallengerEnableFlag
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39782])
// Parameter Info:
// uint32_t                       flag                           (CPF_Parm)

void AREDGameInfo_InterludeDrama::SetNewChallengerEnableFlag(bool flag)
{
	static UFunction* uFnSetNewChallengerEnableFlag = nullptr;

	if (!uFnSetNewChallengerEnableFlag)
	{
		uFnSetNewChallengerEnableFlag = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.SetNewChallengerEnableFlag");
	}

	AREDGameInfo_InterludeDrama_execSetNewChallengerEnableFlag_Params SetNewChallengerEnableFlag_Params;
	memset(&SetNewChallengerEnableFlag_Params, 0, sizeof(SetNewChallengerEnableFlag_Params));
	SetNewChallengerEnableFlag_Params.flag = flag;

	this->ProcessEvent(uFnSetNewChallengerEnableFlag, &SetNewChallengerEnableFlag_Params, nullptr);
};

// Function REDGame.REDGameInfo_InterludeDrama.CheckSkipInput
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36209])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_InterludeDrama::CheckSkipInput()
{
	static UFunction* uFnCheckSkipInput = nullptr;

	if (!uFnCheckSkipInput)
	{
		uFnCheckSkipInput = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.CheckSkipInput");
	}

	AREDGameInfo_InterludeDrama_execCheckSkipInput_Params CheckSkipInput_Params;
	memset(&CheckSkipInput_Params, 0, sizeof(CheckSkipInput_Params));

	this->ProcessEvent(uFnCheckSkipInput, &CheckSkipInput_Params, nullptr);

	return CheckSkipInput_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_InterludeDrama.UpdateDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40649])
// Parameter Info:

void AREDGameInfo_InterludeDrama::UpdateDraw()
{
	static UFunction* uFnUpdateDraw = nullptr;

	if (!uFnUpdateDraw)
	{
		uFnUpdateDraw = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.UpdateDraw");
	}

	AREDGameInfo_InterludeDrama_execUpdateDraw_Params UpdateDraw_Params;
	memset(&UpdateDraw_Params, 0, sizeof(UpdateDraw_Params));

	this->ProcessEvent(uFnUpdateDraw, &UpdateDraw_Params, nullptr);
};

// Function REDGame.REDGameInfo_InterludeDrama.UpdateMain
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40763])
// Parameter Info:

void AREDGameInfo_InterludeDrama::UpdateMain()
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.UpdateMain");
	}

	AREDGameInfo_InterludeDrama_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGameInfo_InterludeDrama.SceneFinalize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39471])
// Parameter Info:

void AREDGameInfo_InterludeDrama::SceneFinalize()
{
	static UFunction* uFnSceneFinalize = nullptr;

	if (!uFnSceneFinalize)
	{
		uFnSceneFinalize = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.SceneFinalize");
	}

	AREDGameInfo_InterludeDrama_execSceneFinalize_Params SceneFinalize_Params;
	memset(&SceneFinalize_Params, 0, sizeof(SceneFinalize_Params));

	this->ProcessEvent(uFnSceneFinalize, &SceneFinalize_Params, nullptr);
};

// Function REDGame.REDGameInfo_InterludeDrama.SceneInitialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39473])
// Parameter Info:

void AREDGameInfo_InterludeDrama::SceneInitialize()
{
	static UFunction* uFnSceneInitialize = nullptr;

	if (!uFnSceneInitialize)
	{
		uFnSceneInitialize = UFunction::FindFunction("Function REDGame.REDGameInfo_InterludeDrama.SceneInitialize");
	}

	AREDGameInfo_InterludeDrama_execSceneInitialize_Params SceneInitialize_Params;
	memset(&SceneInitialize_Params, 0, sizeof(SceneInitialize_Params));

	this->ProcessEvent(uFnSceneInitialize, &SceneInitialize_Params, nullptr);
};

// Function REDGame.REDGameInfo_Menu.SwitchPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isPause                        (CPF_Parm)

void AREDGameInfo_Menu::eventSwitchPause(bool isPause)
{
	static UFunction* uFnSwitchPause = nullptr;

	if (!uFnSwitchPause)
	{
		uFnSwitchPause = UFunction::FindFunction("Function REDGame.REDGameInfo_Menu.SwitchPause");
	}

	AREDGameInfo_Menu_eventSwitchPause_Params SwitchPause_Params;
	memset(&SwitchPause_Params, 0, sizeof(SwitchPause_Params));
	SwitchPause_Params.isPause = isPause;

	this->ProcessEvent(uFnSwitchPause, &SwitchPause_Params, nullptr);
};

// Function REDGame.REDGameInfo_Menu.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_Menu::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_Menu.Tick");
	}

	AREDGameInfo_Menu_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_Menu.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Menu::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Menu.InitGame");
	}

	AREDGameInfo_Menu_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_Menu.GetLocalizeString
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37091])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  WidgetName                     (CPF_Parm | CPF_NeedCtorLink)

class FString AREDGameInfo_Menu::GetLocalizeString(const class FString& WidgetName)
{
	static UFunction* uFnGetLocalizeString = nullptr;

	if (!uFnGetLocalizeString)
	{
		uFnGetLocalizeString = UFunction::FindFunction("Function REDGame.REDGameInfo_Menu.GetLocalizeString");
	}

	AREDGameInfo_Menu_execGetLocalizeString_Params GetLocalizeString_Params;
	memset(&GetLocalizeString_Params, 0, sizeof(GetLocalizeString_Params));
	memcpy_s(&GetLocalizeString_Params.WidgetName, sizeof(GetLocalizeString_Params.WidgetName), &WidgetName, sizeof(WidgetName));

	this->ProcessEvent(uFnGetLocalizeString, &GetLocalizeString_Params, nullptr);

	return GetLocalizeString_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Menu.UpdatePause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40801])
// Parameter Info:

void AREDGameInfo_Menu::UpdatePause()
{
	static UFunction* uFnUpdatePause = nullptr;

	if (!uFnUpdatePause)
	{
		uFnUpdatePause = UFunction::FindFunction("Function REDGame.REDGameInfo_Menu.UpdatePause");
	}

	AREDGameInfo_Menu_execUpdatePause_Params UpdatePause_Params;
	memset(&UpdatePause_Params, 0, sizeof(UpdatePause_Params));

	this->ProcessEvent(uFnUpdatePause, &UpdatePause_Params, nullptr);
};

// Function REDGame.REDGameInfo_BootSequence.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_BootSequence::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_BootSequence.GameEnding");
	}

	AREDGameInfo_BootSequence_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_BootSequence.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_BootSequence::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_BootSequence.Tick");
	}

	AREDGameInfo_BootSequence_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_BootSequence.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_BootSequence::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_BootSequence.InitGame");
	}

	AREDGameInfo_BootSequence_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_BootSequence.BootSequence
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35889])
// Parameter Info:

void AREDGameInfo_BootSequence::BootSequence()
{
	static UFunction* uFnBootSequence = nullptr;

	if (!uFnBootSequence)
	{
		uFnBootSequence = UFunction::FindFunction("Function REDGame.REDGameInfo_BootSequence.BootSequence");
	}

	AREDGameInfo_BootSequence_execBootSequence_Params BootSequence_Params;
	memset(&BootSequence_Params, 0, sizeof(BootSequence_Params));

	this->ProcessEvent(uFnBootSequence, &BootSequence_Params, nullptr);
};

// Function REDGame.REDGameInfo_Library.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Library::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_Library.GameEnding");
	}

	AREDGameInfo_Library_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_Library.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_Library::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_Library.Tick");
	}

	AREDGameInfo_Library_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_Library.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Library::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Library.InitGame");
	}

	AREDGameInfo_Library_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_Library.execRelease
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36781])
// Parameter Info:

void AREDGameInfo_Library::execRelease()
{
	static UFunction* uFnexecRelease = nullptr;

	if (!uFnexecRelease)
	{
		uFnexecRelease = UFunction::FindFunction("Function REDGame.REDGameInfo_Library.execRelease");
	}

	AREDGameInfo_Library_execexecRelease_Params execRelease_Params;
	memset(&execRelease_Params, 0, sizeof(execRelease_Params));

	this->ProcessEvent(uFnexecRelease, &execRelease_Params, nullptr);
};

// Function REDGame.REDGameInfo_Library.execDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36776])
// Parameter Info:

void AREDGameInfo_Library::execDrawNative()
{
	static UFunction* uFnexecDrawNative = nullptr;

	if (!uFnexecDrawNative)
	{
		uFnexecDrawNative = UFunction::FindFunction("Function REDGame.REDGameInfo_Library.execDrawNative");
	}

	AREDGameInfo_Library_execexecDrawNative_Params execDrawNative_Params;
	memset(&execDrawNative_Params, 0, sizeof(execDrawNative_Params));

	this->ProcessEvent(uFnexecDrawNative, &execDrawNative_Params, nullptr);
};

// Function REDGame.REDGameInfo_Library.execUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36784])
// Parameter Info:

void AREDGameInfo_Library::execUpdateNative()
{
	static UFunction* uFnexecUpdateNative = nullptr;

	if (!uFnexecUpdateNative)
	{
		uFnexecUpdateNative = UFunction::FindFunction("Function REDGame.REDGameInfo_Library.execUpdateNative");
	}

	AREDGameInfo_Library_execexecUpdateNative_Params execUpdateNative_Params;
	memset(&execUpdateNative_Params, 0, sizeof(execUpdateNative_Params));

	this->ProcessEvent(uFnexecUpdateNative, &execUpdateNative_Params, nullptr);
};

// Function REDGame.REDGameInfo_Library.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void AREDGameInfo_Library::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGameInfo_Library.InitializeNative");
	}

	AREDGameInfo_Library_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGameInfo_LobbyBase.GetKismetObject
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    VarName                        (CPF_Parm)

class UObject* AREDGameInfo_LobbyBase::eventGetKismetObject(const class FName& VarName)
{
	static UFunction* uFnGetKismetObject = nullptr;

	if (!uFnGetKismetObject)
	{
		uFnGetKismetObject = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.GetKismetObject");
	}

	AREDGameInfo_LobbyBase_eventGetKismetObject_Params GetKismetObject_Params;
	memset(&GetKismetObject_Params, 0, sizeof(GetKismetObject_Params));
	memcpy_s(&GetKismetObject_Params.VarName, sizeof(GetKismetObject_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetObject, &GetKismetObject_Params, nullptr);

	return GetKismetObject_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_LobbyBase.SpawnSMActor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ADynamicSMActor*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UStaticMesh*             Mesh                           (CPF_Parm)

class ADynamicSMActor* AREDGameInfo_LobbyBase::eventSpawnSMActor(class UStaticMesh* Mesh)
{
	static UFunction* uFnSpawnSMActor = nullptr;

	if (!uFnSpawnSMActor)
	{
		uFnSpawnSMActor = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.SpawnSMActor");
	}

	AREDGameInfo_LobbyBase_eventSpawnSMActor_Params SpawnSMActor_Params;
	memset(&SpawnSMActor_Params, 0, sizeof(SpawnSMActor_Params));
	SpawnSMActor_Params.Mesh = Mesh;

	this->ProcessEvent(uFnSpawnSMActor, &SpawnSMActor_Params, nullptr);

	return SpawnSMActor_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_LobbyBase.SpawnLobbyAvater
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UREDMeshArray*           Meshes                         (CPF_Parm)
// class UREDAnimArray*           Anim                           (CPF_Parm)
// class UREDPawnMaterials*       MaterialSet                    (CPF_Parm)

class AREDPawn* AREDGameInfo_LobbyBase::eventSpawnLobbyAvater(class UREDMeshArray* Meshes, class UREDAnimArray* Anim, class UREDPawnMaterials* MaterialSet)
{
	static UFunction* uFnSpawnLobbyAvater = nullptr;

	if (!uFnSpawnLobbyAvater)
	{
		uFnSpawnLobbyAvater = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.SpawnLobbyAvater");
	}

	AREDGameInfo_LobbyBase_eventSpawnLobbyAvater_Params SpawnLobbyAvater_Params;
	memset(&SpawnLobbyAvater_Params, 0, sizeof(SpawnLobbyAvater_Params));
	SpawnLobbyAvater_Params.Meshes = Meshes;
	SpawnLobbyAvater_Params.Anim = Anim;
	SpawnLobbyAvater_Params.MaterialSet = MaterialSet;

	this->ProcessEvent(uFnSpawnLobbyAvater, &SpawnLobbyAvater_Params, nullptr);

	return SpawnLobbyAvater_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_LobbyBase.Tick
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_LobbyBase::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.Tick");
	}

	AREDGameInfo_LobbyBase_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_LobbyBase.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_LobbyBase::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.GameEnding");
	}

	AREDGameInfo_LobbyBase_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_LobbyBase.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_LobbyBase::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.InitGame");
	}

	AREDGameInfo_LobbyBase_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_LobbyBase.CollisionData_Exist
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_LobbyBase::CollisionData_Exist()
{
	static UFunction* uFnCollisionData_Exist = nullptr;

	if (!uFnCollisionData_Exist)
	{
		uFnCollisionData_Exist = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.CollisionData_Exist");
	}

	AREDGameInfo_LobbyBase_execCollisionData_Exist_Params CollisionData_Exist_Params;
	memset(&CollisionData_Exist_Params, 0, sizeof(CollisionData_Exist_Params));

	this->ProcessEvent(uFnCollisionData_Exist, &CollisionData_Exist_Params, nullptr);

	return CollisionData_Exist_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_LobbyBase.CollisionData_Update
// [0x00824002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// int32_t                        kyoutaiMax                     (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_LobbyBase::CollisionData_Update(int32_t kyoutaiMax)
{
	static UFunction* uFnCollisionData_Update = nullptr;

	if (!uFnCollisionData_Update)
	{
		uFnCollisionData_Update = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.CollisionData_Update");
	}

	AREDGameInfo_LobbyBase_execCollisionData_Update_Params CollisionData_Update_Params;
	memset(&CollisionData_Update_Params, 0, sizeof(CollisionData_Update_Params));
	memcpy_s(&CollisionData_Update_Params.kyoutaiMax, sizeof(CollisionData_Update_Params.kyoutaiMax), &kyoutaiMax, sizeof(kyoutaiMax));

	this->ProcessEvent(uFnCollisionData_Update, &CollisionData_Update_Params, nullptr);
};

// Function REDGame.REDGameInfo_LobbyBase.CheckEvent
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36195])
// Parameter Info:
// ELOBBY_EVENT                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               pos                            (CPF_Const | CPF_Parm | CPF_OutParm)
// int32_t                        OptionData                     (CPF_Parm | CPF_OutParm)
// struct FVector2D               eventPos                       (CPF_Parm | CPF_OutParm)
// float                          eventAngle                     (CPF_Parm | CPF_OutParm)

ELOBBY_EVENT AREDGameInfo_LobbyBase::CheckEvent(struct FVector2D& pos, int32_t& OptionData, struct FVector2D& eventPos, float& eventAngle)
{
	static UFunction* uFnCheckEvent = nullptr;

	if (!uFnCheckEvent)
	{
		uFnCheckEvent = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.CheckEvent");
	}

	AREDGameInfo_LobbyBase_execCheckEvent_Params CheckEvent_Params;
	memset(&CheckEvent_Params, 0, sizeof(CheckEvent_Params));
	memcpy_s(&CheckEvent_Params.pos, sizeof(CheckEvent_Params.pos), &pos, sizeof(pos));
	memcpy_s(&CheckEvent_Params.OptionData, sizeof(CheckEvent_Params.OptionData), &OptionData, sizeof(OptionData));
	memcpy_s(&CheckEvent_Params.eventPos, sizeof(CheckEvent_Params.eventPos), &eventPos, sizeof(eventPos));
	memcpy_s(&CheckEvent_Params.eventAngle, sizeof(CheckEvent_Params.eventAngle), &eventAngle, sizeof(eventAngle));

	this->ProcessEvent(uFnCheckEvent, &CheckEvent_Params, nullptr);

	memcpy_s(&pos, sizeof(pos), &CheckEvent_Params.pos, sizeof(CheckEvent_Params.pos));
	memcpy_s(&OptionData, sizeof(OptionData), &CheckEvent_Params.OptionData, sizeof(CheckEvent_Params.OptionData));
	memcpy_s(&eventPos, sizeof(eventPos), &CheckEvent_Params.eventPos, sizeof(CheckEvent_Params.eventPos));
	memcpy_s(&eventAngle, sizeof(eventAngle), &CheckEvent_Params.eventAngle, sizeof(CheckEvent_Params.eventAngle));

	return static_cast<ELOBBY_EVENT>(CheckEvent_Params.ReturnValue);
};

// Function REDGame.REDGameInfo_LobbyBase.CheckCollision_Rect
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36189])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Radius                         (CPF_Parm)
// struct FVector2D               prevpos                        (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               pos                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               checkedPos                     (CPF_Parm | CPF_OutParm)

bool AREDGameInfo_LobbyBase::CheckCollision_Rect(float Radius, struct FVector2D& prevpos, struct FVector2D& pos, struct FVector2D& checkedPos)
{
	static UFunction* uFnCheckCollision_Rect = nullptr;

	if (!uFnCheckCollision_Rect)
	{
		uFnCheckCollision_Rect = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.CheckCollision_Rect");
	}

	AREDGameInfo_LobbyBase_execCheckCollision_Rect_Params CheckCollision_Rect_Params;
	memset(&CheckCollision_Rect_Params, 0, sizeof(CheckCollision_Rect_Params));
	memcpy_s(&CheckCollision_Rect_Params.Radius, sizeof(CheckCollision_Rect_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&CheckCollision_Rect_Params.prevpos, sizeof(CheckCollision_Rect_Params.prevpos), &prevpos, sizeof(prevpos));
	memcpy_s(&CheckCollision_Rect_Params.pos, sizeof(CheckCollision_Rect_Params.pos), &pos, sizeof(pos));
	memcpy_s(&CheckCollision_Rect_Params.checkedPos, sizeof(CheckCollision_Rect_Params.checkedPos), &checkedPos, sizeof(checkedPos));

	this->ProcessEvent(uFnCheckCollision_Rect, &CheckCollision_Rect_Params, nullptr);

	memcpy_s(&prevpos, sizeof(prevpos), &CheckCollision_Rect_Params.prevpos, sizeof(CheckCollision_Rect_Params.prevpos));
	memcpy_s(&pos, sizeof(pos), &CheckCollision_Rect_Params.pos, sizeof(CheckCollision_Rect_Params.pos));
	memcpy_s(&checkedPos, sizeof(checkedPos), &CheckCollision_Rect_Params.checkedPos, sizeof(CheckCollision_Rect_Params.checkedPos));

	return CheckCollision_Rect_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_LobbyBase.CheckCollision_Circle
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36188])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Radius                         (CPF_Parm)
// struct FVector2D               pos                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               checkedPos                     (CPF_Parm | CPF_OutParm)

bool AREDGameInfo_LobbyBase::CheckCollision_Circle(float Radius, struct FVector2D& pos, struct FVector2D& checkedPos)
{
	static UFunction* uFnCheckCollision_Circle = nullptr;

	if (!uFnCheckCollision_Circle)
	{
		uFnCheckCollision_Circle = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.CheckCollision_Circle");
	}

	AREDGameInfo_LobbyBase_execCheckCollision_Circle_Params CheckCollision_Circle_Params;
	memset(&CheckCollision_Circle_Params, 0, sizeof(CheckCollision_Circle_Params));
	memcpy_s(&CheckCollision_Circle_Params.Radius, sizeof(CheckCollision_Circle_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&CheckCollision_Circle_Params.pos, sizeof(CheckCollision_Circle_Params.pos), &pos, sizeof(pos));
	memcpy_s(&CheckCollision_Circle_Params.checkedPos, sizeof(CheckCollision_Circle_Params.checkedPos), &checkedPos, sizeof(checkedPos));

	this->ProcessEvent(uFnCheckCollision_Circle, &CheckCollision_Circle_Params, nullptr);

	memcpy_s(&pos, sizeof(pos), &CheckCollision_Circle_Params.pos, sizeof(CheckCollision_Circle_Params.pos));
	memcpy_s(&checkedPos, sizeof(checkedPos), &CheckCollision_Circle_Params.checkedPos, sizeof(CheckCollision_Circle_Params.checkedPos));

	return CheckCollision_Circle_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_LobbyBase.CheckCollision_Wall
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36190])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Radius                         (CPF_Parm)
// struct FVector2D               pos                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               checkedPos                     (CPF_Parm | CPF_OutParm)

bool AREDGameInfo_LobbyBase::CheckCollision_Wall(float Radius, struct FVector2D& pos, struct FVector2D& checkedPos)
{
	static UFunction* uFnCheckCollision_Wall = nullptr;

	if (!uFnCheckCollision_Wall)
	{
		uFnCheckCollision_Wall = UFunction::FindFunction("Function REDGame.REDGameInfo_LobbyBase.CheckCollision_Wall");
	}

	AREDGameInfo_LobbyBase_execCheckCollision_Wall_Params CheckCollision_Wall_Params;
	memset(&CheckCollision_Wall_Params, 0, sizeof(CheckCollision_Wall_Params));
	memcpy_s(&CheckCollision_Wall_Params.Radius, sizeof(CheckCollision_Wall_Params.Radius), &Radius, sizeof(Radius));
	memcpy_s(&CheckCollision_Wall_Params.pos, sizeof(CheckCollision_Wall_Params.pos), &pos, sizeof(pos));
	memcpy_s(&CheckCollision_Wall_Params.checkedPos, sizeof(CheckCollision_Wall_Params.checkedPos), &checkedPos, sizeof(checkedPos));

	this->ProcessEvent(uFnCheckCollision_Wall, &CheckCollision_Wall_Params, nullptr);

	memcpy_s(&pos, sizeof(pos), &CheckCollision_Wall_Params.pos, sizeof(CheckCollision_Wall_Params.pos));
	memcpy_s(&checkedPos, sizeof(checkedPos), &CheckCollision_Wall_Params.checkedPos, sizeof(CheckCollision_Wall_Params.checkedPos));

	return CheckCollision_Wall_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Fishing.IsAllMapVisible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Fishing::IsAllMapVisible()
{
	static UFunction* uFnIsAllMapVisible = nullptr;

	if (!uFnIsAllMapVisible)
	{
		uFnIsAllMapVisible = UFunction::FindFunction("Function REDGame.REDGameInfo_Fishing.IsAllMapVisible");
	}

	AREDGameInfo_Fishing_execIsAllMapVisible_Params IsAllMapVisible_Params;
	memset(&IsAllMapVisible_Params, 0, sizeof(IsAllMapVisible_Params));

	this->ProcessEvent(uFnIsAllMapVisible, &IsAllMapVisible_Params, nullptr);

	return IsAllMapVisible_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Fishing.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_Fishing::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_Fishing.Tick");
	}

	AREDGameInfo_Fishing_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_Fishing.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Fishing::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_Fishing.GameEnding");
	}

	AREDGameInfo_Fishing_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_Fishing.InitGame
// [0x00C20802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Fishing::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Fishing.InitGame");
	}

	AREDGameInfo_Fishing_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_Fishing.UpdateDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40652])
// Parameter Info:

void AREDGameInfo_Fishing::UpdateDrawNative()
{
	static UFunction* uFnUpdateDrawNative = nullptr;

	if (!uFnUpdateDrawNative)
	{
		uFnUpdateDrawNative = UFunction::FindFunction("Function REDGame.REDGameInfo_Fishing.UpdateDrawNative");
	}

	AREDGameInfo_Fishing_execUpdateDrawNative_Params UpdateDrawNative_Params;
	memset(&UpdateDrawNative_Params, 0, sizeof(UpdateDrawNative_Params));

	this->ProcessEvent(uFnUpdateDrawNative, &UpdateDrawNative_Params, nullptr);
};

// Function REDGame.REDGameInfo_Fishing.UpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40790])
// Parameter Info:

void AREDGameInfo_Fishing::UpdateNative()
{
	static UFunction* uFnUpdateNative = nullptr;

	if (!uFnUpdateNative)
	{
		uFnUpdateNative = UFunction::FindFunction("Function REDGame.REDGameInfo_Fishing.UpdateNative");
	}

	AREDGameInfo_Fishing_execUpdateNative_Params UpdateNative_Params;
	memset(&UpdateNative_Params, 0, sizeof(UpdateNative_Params));

	this->ProcessEvent(uFnUpdateNative, &UpdateNative_Params, nullptr);
};

// Function REDGame.REDGameInfo_Fishing.FinalizeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36842])
// Parameter Info:

void AREDGameInfo_Fishing::FinalizeNative()
{
	static UFunction* uFnFinalizeNative = nullptr;

	if (!uFnFinalizeNative)
	{
		uFnFinalizeNative = UFunction::FindFunction("Function REDGame.REDGameInfo_Fishing.FinalizeNative");
	}

	AREDGameInfo_Fishing_execFinalizeNative_Params FinalizeNative_Params;
	memset(&FinalizeNative_Params, 0, sizeof(FinalizeNative_Params));

	this->ProcessEvent(uFnFinalizeNative, &FinalizeNative_Params, nullptr);
};

// Function REDGame.REDGameInfo_Fishing.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void AREDGameInfo_Fishing::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGameInfo_Fishing.InitializeNative");
	}

	AREDGameInfo_Fishing_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGameInfo_Lobby.PlayEasyChatVoice
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Slot                           (CPF_Parm)
// class USoundCue*               Cue                            (CPF_Parm)

void AREDGameInfo_Lobby::eventPlayEasyChatVoice(int32_t Slot, class USoundCue* Cue)
{
	static UFunction* uFnPlayEasyChatVoice = nullptr;

	if (!uFnPlayEasyChatVoice)
	{
		uFnPlayEasyChatVoice = UFunction::FindFunction("Function REDGame.REDGameInfo_Lobby.PlayEasyChatVoice");
	}

	AREDGameInfo_Lobby_eventPlayEasyChatVoice_Params PlayEasyChatVoice_Params;
	memset(&PlayEasyChatVoice_Params, 0, sizeof(PlayEasyChatVoice_Params));
	memcpy_s(&PlayEasyChatVoice_Params.Slot, sizeof(PlayEasyChatVoice_Params.Slot), &Slot, sizeof(Slot));
	PlayEasyChatVoice_Params.Cue = Cue;

	this->ProcessEvent(uFnPlayEasyChatVoice, &PlayEasyChatVoice_Params, nullptr);
};

// Function REDGame.REDGameInfo_Lobby.UpdateWaitAsyncLoading
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Lobby::UpdateWaitAsyncLoading()
{
	static UFunction* uFnUpdateWaitAsyncLoading = nullptr;

	if (!uFnUpdateWaitAsyncLoading)
	{
		uFnUpdateWaitAsyncLoading = UFunction::FindFunction("Function REDGame.REDGameInfo_Lobby.UpdateWaitAsyncLoading");
	}

	AREDGameInfo_Lobby_execUpdateWaitAsyncLoading_Params UpdateWaitAsyncLoading_Params;
	memset(&UpdateWaitAsyncLoading_Params, 0, sizeof(UpdateWaitAsyncLoading_Params));

	this->ProcessEvent(uFnUpdateWaitAsyncLoading, &UpdateWaitAsyncLoading_Params, nullptr);
};

// Function REDGame.REDGameInfo_Lobby.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_Lobby::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_Lobby.Tick");
	}

	AREDGameInfo_Lobby_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_Lobby.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Lobby::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Lobby.InitGame");
	}

	AREDGameInfo_Lobby_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_MainMenu.PlayEasyChatVoice
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Slot                           (CPF_Parm)
// class USoundCue*               Cue                            (CPF_Parm)

void AREDGameInfo_MainMenu::eventPlayEasyChatVoice(int32_t Slot, class USoundCue* Cue)
{
	static UFunction* uFnPlayEasyChatVoice = nullptr;

	if (!uFnPlayEasyChatVoice)
	{
		uFnPlayEasyChatVoice = UFunction::FindFunction("Function REDGame.REDGameInfo_MainMenu.PlayEasyChatVoice");
	}

	AREDGameInfo_MainMenu_eventPlayEasyChatVoice_Params PlayEasyChatVoice_Params;
	memset(&PlayEasyChatVoice_Params, 0, sizeof(PlayEasyChatVoice_Params));
	memcpy_s(&PlayEasyChatVoice_Params.Slot, sizeof(PlayEasyChatVoice_Params.Slot), &Slot, sizeof(Slot));
	PlayEasyChatVoice_Params.Cue = Cue;

	this->ProcessEvent(uFnPlayEasyChatVoice, &PlayEasyChatVoice_Params, nullptr);
};

// Function REDGame.REDGameInfo_MainMenu.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_MainMenu::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_MainMenu.InitGame");
	}

	AREDGameInfo_MainMenu_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_MainMenu20.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_MainMenu20::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_MainMenu20.GameEnding");
	}

	AREDGameInfo_MainMenu20_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_MainMenu20.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_MainMenu20::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_MainMenu20.InitGame");
	}

	AREDGameInfo_MainMenu20_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_NetworkMenu.SwitchPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isPause                        (CPF_Parm)

void AREDGameInfo_NetworkMenu::eventSwitchPause(bool isPause)
{
	static UFunction* uFnSwitchPause = nullptr;

	if (!uFnSwitchPause)
	{
		uFnSwitchPause = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.SwitchPause");
	}

	AREDGameInfo_NetworkMenu_eventSwitchPause_Params SwitchPause_Params;
	memset(&SwitchPause_Params, 0, sizeof(SwitchPause_Params));
	SwitchPause_Params.isPause = isPause;

	this->ProcessEvent(uFnSwitchPause, &SwitchPause_Params, nullptr);
};

// Function REDGame.REDGameInfo_NetworkMenu.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_NetworkMenu::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.Tick");
	}

	AREDGameInfo_NetworkMenu_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_NetworkMenu.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_NetworkMenu::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.GameEnding");
	}

	AREDGameInfo_NetworkMenu_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_NetworkMenu.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_NetworkMenu::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.InitGame");
	}

	AREDGameInfo_NetworkMenu_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_NetworkMenu.UpdateDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40649])
// Parameter Info:

void AREDGameInfo_NetworkMenu::UpdateDraw()
{
	static UFunction* uFnUpdateDraw = nullptr;

	if (!uFnUpdateDraw)
	{
		uFnUpdateDraw = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.UpdateDraw");
	}

	AREDGameInfo_NetworkMenu_execUpdateDraw_Params UpdateDraw_Params;
	memset(&UpdateDraw_Params, 0, sizeof(UpdateDraw_Params));

	this->ProcessEvent(uFnUpdateDraw, &UpdateDraw_Params, nullptr);
};

// Function REDGame.REDGameInfo_NetworkMenu.UpdateMain
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40763])
// Parameter Info:

void AREDGameInfo_NetworkMenu::UpdateMain()
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.UpdateMain");
	}

	AREDGameInfo_NetworkMenu_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGameInfo_NetworkMenu.SceneFinalize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39471])
// Parameter Info:

void AREDGameInfo_NetworkMenu::SceneFinalize()
{
	static UFunction* uFnSceneFinalize = nullptr;

	if (!uFnSceneFinalize)
	{
		uFnSceneFinalize = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.SceneFinalize");
	}

	AREDGameInfo_NetworkMenu_execSceneFinalize_Params SceneFinalize_Params;
	memset(&SceneFinalize_Params, 0, sizeof(SceneFinalize_Params));

	this->ProcessEvent(uFnSceneFinalize, &SceneFinalize_Params, nullptr);
};

// Function REDGame.REDGameInfo_NetworkMenu.SceneInitialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39473])
// Parameter Info:

void AREDGameInfo_NetworkMenu::SceneInitialize()
{
	static UFunction* uFnSceneInitialize = nullptr;

	if (!uFnSceneInitialize)
	{
		uFnSceneInitialize = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.SceneInitialize");
	}

	AREDGameInfo_NetworkMenu_execSceneInitialize_Params SceneInitialize_Params;
	memset(&SceneInitialize_Params, 0, sizeof(SceneInitialize_Params));

	this->ProcessEvent(uFnSceneInitialize, &SceneInitialize_Params, nullptr);
};

// Function REDGame.REDGameInfo_NetworkMenu.UpdatePause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40801])
// Parameter Info:

void AREDGameInfo_NetworkMenu::UpdatePause()
{
	static UFunction* uFnUpdatePause = nullptr;

	if (!uFnUpdatePause)
	{
		uFnUpdatePause = UFunction::FindFunction("Function REDGame.REDGameInfo_NetworkMenu.UpdatePause");
	}

	AREDGameInfo_NetworkMenu_execUpdatePause_Params UpdatePause_Params;
	memset(&UpdatePause_Params, 0, sizeof(UpdatePause_Params));

	this->ProcessEvent(uFnUpdatePause, &UpdatePause_Params, nullptr);
};

// Function REDGame.REDGameInfo_StoryStaffRoll.SwitchPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isPause                        (CPF_Parm)

void AREDGameInfo_StoryStaffRoll::eventSwitchPause(bool isPause)
{
	static UFunction* uFnSwitchPause = nullptr;

	if (!uFnSwitchPause)
	{
		uFnSwitchPause = UFunction::FindFunction("Function REDGame.REDGameInfo_StoryStaffRoll.SwitchPause");
	}

	AREDGameInfo_StoryStaffRoll_eventSwitchPause_Params SwitchPause_Params;
	memset(&SwitchPause_Params, 0, sizeof(SwitchPause_Params));
	SwitchPause_Params.isPause = isPause;

	this->ProcessEvent(uFnSwitchPause, &SwitchPause_Params, nullptr);
};

// Function REDGame.REDGameInfo_StoryStaffRoll.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_StoryStaffRoll::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_StoryStaffRoll.Tick");
	}

	AREDGameInfo_StoryStaffRoll_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_StoryStaffRoll.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_StoryStaffRoll::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_StoryStaffRoll.InitGame");
	}

	AREDGameInfo_StoryStaffRoll_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_StoryStaffRoll.UpdatePause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40801])
// Parameter Info:

void AREDGameInfo_StoryStaffRoll::UpdatePause()
{
	static UFunction* uFnUpdatePause = nullptr;

	if (!uFnUpdatePause)
	{
		uFnUpdatePause = UFunction::FindFunction("Function REDGame.REDGameInfo_StoryStaffRoll.UpdatePause");
	}

	AREDGameInfo_StoryStaffRoll_execUpdatePause_Params UpdatePause_Params;
	memset(&UpdatePause_Params, 0, sizeof(UpdatePause_Params));

	this->ProcessEvent(uFnUpdatePause, &UpdatePause_Params, nullptr);
};

// Function REDGame.REDGameInfo_TestMode.StopTestBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_TestMode::eventStopTestBGM()
{
	static UFunction* uFnStopTestBGM = nullptr;

	if (!uFnStopTestBGM)
	{
		uFnStopTestBGM = UFunction::FindFunction("Function REDGame.REDGameInfo_TestMode.StopTestBGM");
	}

	AREDGameInfo_TestMode_eventStopTestBGM_Params StopTestBGM_Params;
	memset(&StopTestBGM_Params, 0, sizeof(StopTestBGM_Params));

	this->ProcessEvent(uFnStopTestBGM, &StopTestBGM_Params, nullptr);
};

// Function REDGame.REDGameInfo_TestMode.PlayTestBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_TestMode::eventPlayTestBGM()
{
	static UFunction* uFnPlayTestBGM = nullptr;

	if (!uFnPlayTestBGM)
	{
		uFnPlayTestBGM = UFunction::FindFunction("Function REDGame.REDGameInfo_TestMode.PlayTestBGM");
	}

	AREDGameInfo_TestMode_eventPlayTestBGM_Params PlayTestBGM_Params;
	memset(&PlayTestBGM_Params, 0, sizeof(PlayTestBGM_Params));

	this->ProcessEvent(uFnPlayTestBGM, &PlayTestBGM_Params, nullptr);
};

// Function REDGame.REDGameInfo_TestMode.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_TestMode::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_TestMode.Tick");
	}

	AREDGameInfo_TestMode_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_TestMode.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_TestMode::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_TestMode.InitGame");
	}

	AREDGameInfo_TestMode_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_TestMode.UpdateTestMode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40868])
// Parameter Info:

void AREDGameInfo_TestMode::UpdateTestMode()
{
	static UFunction* uFnUpdateTestMode = nullptr;

	if (!uFnUpdateTestMode)
	{
		uFnUpdateTestMode = UFunction::FindFunction("Function REDGame.REDGameInfo_TestMode.UpdateTestMode");
	}

	AREDGameInfo_TestMode_execUpdateTestMode_Params UpdateTestMode_Params;
	memset(&UpdateTestMode_Params, 0, sizeof(UpdateTestMode_Params));

	this->ProcessEvent(uFnUpdateTestMode, &UpdateTestMode_Params, nullptr);
};

// Function REDGame.REDGameInfo_TestMode.FinalizeTestMode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36844])
// Parameter Info:

void AREDGameInfo_TestMode::FinalizeTestMode()
{
	static UFunction* uFnFinalizeTestMode = nullptr;

	if (!uFnFinalizeTestMode)
	{
		uFnFinalizeTestMode = UFunction::FindFunction("Function REDGame.REDGameInfo_TestMode.FinalizeTestMode");
	}

	AREDGameInfo_TestMode_execFinalizeTestMode_Params FinalizeTestMode_Params;
	memset(&FinalizeTestMode_Params, 0, sizeof(FinalizeTestMode_Params));

	this->ProcessEvent(uFnFinalizeTestMode, &FinalizeTestMode_Params, nullptr);
};

// Function REDGame.REDGameInfo_TestMode.InitializeTestMode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37534])
// Parameter Info:

void AREDGameInfo_TestMode::InitializeTestMode()
{
	static UFunction* uFnInitializeTestMode = nullptr;

	if (!uFnInitializeTestMode)
	{
		uFnInitializeTestMode = UFunction::FindFunction("Function REDGame.REDGameInfo_TestMode.InitializeTestMode");
	}

	AREDGameInfo_TestMode_execInitializeTestMode_Params InitializeTestMode_Params;
	memset(&InitializeTestMode_Params, 0, sizeof(InitializeTestMode_Params));

	this->ProcessEvent(uFnInitializeTestMode, &InitializeTestMode_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyReceiveBinaryData
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        MemberIndex                    (CPF_Parm)
// class FString                  Type                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FActiveLobbyInfo> LobbyList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyReceiveBinaryData(int32_t LobbyIndex, int32_t MemberIndex, const class FString& Type, const class FString& Message, class TArray<struct FActiveLobbyInfo>& LobbyList)
{
	static UFunction* uFnLobbyReceiveBinaryData = nullptr;

	if (!uFnLobbyReceiveBinaryData)
	{
		uFnLobbyReceiveBinaryData = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyReceiveBinaryData");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyReceiveBinaryData_Params LobbyReceiveBinaryData_Params;
	memset(&LobbyReceiveBinaryData_Params, 0, sizeof(LobbyReceiveBinaryData_Params));
	memcpy_s(&LobbyReceiveBinaryData_Params.LobbyIndex, sizeof(LobbyReceiveBinaryData_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyReceiveBinaryData_Params.MemberIndex, sizeof(LobbyReceiveBinaryData_Params.MemberIndex), &MemberIndex, sizeof(MemberIndex));
	memcpy_s(&LobbyReceiveBinaryData_Params.Type, sizeof(LobbyReceiveBinaryData_Params.Type), &Type, sizeof(Type));
	memcpy_s(&LobbyReceiveBinaryData_Params.Message, sizeof(LobbyReceiveBinaryData_Params.Message), &Message, sizeof(Message));
	memcpy_s(&LobbyReceiveBinaryData_Params.LobbyList, sizeof(LobbyReceiveBinaryData_Params.LobbyList), &LobbyList, sizeof(LobbyList));

	this->ProcessEvent(uFnLobbyReceiveBinaryData, &LobbyReceiveBinaryData_Params, nullptr);

	memcpy_s(&LobbyList, sizeof(LobbyList), &LobbyReceiveBinaryData_Params.LobbyList, sizeof(LobbyReceiveBinaryData_Params.LobbyList));
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyReceiveMessage
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        MemberIndex                    (CPF_Parm)
// class FString                  Type                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FActiveLobbyInfo> LobbyList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyReceiveMessage(int32_t LobbyIndex, int32_t MemberIndex, const class FString& Type, const class FString& Message, class TArray<struct FActiveLobbyInfo>& LobbyList)
{
	static UFunction* uFnLobbyReceiveMessage = nullptr;

	if (!uFnLobbyReceiveMessage)
	{
		uFnLobbyReceiveMessage = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyReceiveMessage");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyReceiveMessage_Params LobbyReceiveMessage_Params;
	memset(&LobbyReceiveMessage_Params, 0, sizeof(LobbyReceiveMessage_Params));
	memcpy_s(&LobbyReceiveMessage_Params.LobbyIndex, sizeof(LobbyReceiveMessage_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyReceiveMessage_Params.MemberIndex, sizeof(LobbyReceiveMessage_Params.MemberIndex), &MemberIndex, sizeof(MemberIndex));
	memcpy_s(&LobbyReceiveMessage_Params.Type, sizeof(LobbyReceiveMessage_Params.Type), &Type, sizeof(Type));
	memcpy_s(&LobbyReceiveMessage_Params.Message, sizeof(LobbyReceiveMessage_Params.Message), &Message, sizeof(Message));
	memcpy_s(&LobbyReceiveMessage_Params.LobbyList, sizeof(LobbyReceiveMessage_Params.LobbyList), &LobbyList, sizeof(LobbyList));

	this->ProcessEvent(uFnLobbyReceiveMessage, &LobbyReceiveMessage_Params, nullptr);

	memcpy_s(&LobbyList, sizeof(LobbyList), &LobbyReceiveMessage_Params.LobbyList, sizeof(LobbyReceiveMessage_Params.LobbyList));
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyKicked
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        AdminIndex                     (CPF_Parm)
// class TArray<struct FActiveLobbyInfo> LobbyList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyKicked(int32_t LobbyIndex, int32_t AdminIndex, class TArray<struct FActiveLobbyInfo>& LobbyList)
{
	static UFunction* uFnLobbyKicked = nullptr;

	if (!uFnLobbyKicked)
	{
		uFnLobbyKicked = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyKicked");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyKicked_Params LobbyKicked_Params;
	memset(&LobbyKicked_Params, 0, sizeof(LobbyKicked_Params));
	memcpy_s(&LobbyKicked_Params.LobbyIndex, sizeof(LobbyKicked_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyKicked_Params.AdminIndex, sizeof(LobbyKicked_Params.AdminIndex), &AdminIndex, sizeof(AdminIndex));
	memcpy_s(&LobbyKicked_Params.LobbyList, sizeof(LobbyKicked_Params.LobbyList), &LobbyList, sizeof(LobbyList));

	this->ProcessEvent(uFnLobbyKicked, &LobbyKicked_Params, nullptr);

	memcpy_s(&LobbyList, sizeof(LobbyList), &LobbyKicked_Params.LobbyList, sizeof(LobbyKicked_Params.LobbyList));
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyInviteComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FUniqueNetId            LobbyId                        (CPF_Parm)
// struct FUniqueNetId            FriendId                       (CPF_Parm)
// uint32_t                       bAccepted                      (CPF_Parm)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyInviteComplete(const struct FUniqueNetId& LobbyId, const struct FUniqueNetId& FriendId, bool bAccepted)
{
	static UFunction* uFnLobbyInviteComplete = nullptr;

	if (!uFnLobbyInviteComplete)
	{
		uFnLobbyInviteComplete = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyInviteComplete");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyInviteComplete_Params LobbyInviteComplete_Params;
	memset(&LobbyInviteComplete_Params, 0, sizeof(LobbyInviteComplete_Params));
	memcpy_s(&LobbyInviteComplete_Params.LobbyId, sizeof(LobbyInviteComplete_Params.LobbyId), &LobbyId, sizeof(LobbyId));
	memcpy_s(&LobbyInviteComplete_Params.FriendId, sizeof(LobbyInviteComplete_Params.FriendId), &FriendId, sizeof(FriendId));
	LobbyInviteComplete_Params.bAccepted = bAccepted;

	this->ProcessEvent(uFnLobbyInviteComplete, &LobbyInviteComplete_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyMemberSettingsUpdate
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        MemberIndex                    (CPF_Parm)
// class TArray<struct FActiveLobbyInfo> LobbyList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyMemberSettingsUpdate(int32_t LobbyIndex, int32_t MemberIndex, class TArray<struct FActiveLobbyInfo>& LobbyList)
{
	static UFunction* uFnLobbyMemberSettingsUpdate = nullptr;

	if (!uFnLobbyMemberSettingsUpdate)
	{
		uFnLobbyMemberSettingsUpdate = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyMemberSettingsUpdate");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyMemberSettingsUpdate_Params LobbyMemberSettingsUpdate_Params;
	memset(&LobbyMemberSettingsUpdate_Params, 0, sizeof(LobbyMemberSettingsUpdate_Params));
	memcpy_s(&LobbyMemberSettingsUpdate_Params.LobbyIndex, sizeof(LobbyMemberSettingsUpdate_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyMemberSettingsUpdate_Params.MemberIndex, sizeof(LobbyMemberSettingsUpdate_Params.MemberIndex), &MemberIndex, sizeof(MemberIndex));
	memcpy_s(&LobbyMemberSettingsUpdate_Params.LobbyList, sizeof(LobbyMemberSettingsUpdate_Params.LobbyList), &LobbyList, sizeof(LobbyList));

	this->ProcessEvent(uFnLobbyMemberSettingsUpdate, &LobbyMemberSettingsUpdate_Params, nullptr);

	memcpy_s(&LobbyList, sizeof(LobbyList), &LobbyMemberSettingsUpdate_Params.LobbyList, sizeof(LobbyMemberSettingsUpdate_Params.LobbyList));
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyMemberStatusUpdate
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        MemberIndex                    (CPF_Parm)
// int32_t                        InstigatorIndex                (CPF_Parm)
// class FString                  Status                         (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FActiveLobbyInfo> LobbyList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyMemberStatusUpdate(int32_t LobbyIndex, int32_t MemberIndex, int32_t InstigatorIndex, const class FString& Status, class TArray<struct FActiveLobbyInfo>& LobbyList)
{
	static UFunction* uFnLobbyMemberStatusUpdate = nullptr;

	if (!uFnLobbyMemberStatusUpdate)
	{
		uFnLobbyMemberStatusUpdate = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyMemberStatusUpdate");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyMemberStatusUpdate_Params LobbyMemberStatusUpdate_Params;
	memset(&LobbyMemberStatusUpdate_Params, 0, sizeof(LobbyMemberStatusUpdate_Params));
	memcpy_s(&LobbyMemberStatusUpdate_Params.LobbyIndex, sizeof(LobbyMemberStatusUpdate_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyMemberStatusUpdate_Params.MemberIndex, sizeof(LobbyMemberStatusUpdate_Params.MemberIndex), &MemberIndex, sizeof(MemberIndex));
	memcpy_s(&LobbyMemberStatusUpdate_Params.InstigatorIndex, sizeof(LobbyMemberStatusUpdate_Params.InstigatorIndex), &InstigatorIndex, sizeof(InstigatorIndex));
	memcpy_s(&LobbyMemberStatusUpdate_Params.Status, sizeof(LobbyMemberStatusUpdate_Params.Status), &Status, sizeof(Status));
	memcpy_s(&LobbyMemberStatusUpdate_Params.LobbyList, sizeof(LobbyMemberStatusUpdate_Params.LobbyList), &LobbyList, sizeof(LobbyList));

	this->ProcessEvent(uFnLobbyMemberStatusUpdate, &LobbyMemberStatusUpdate_Params, nullptr);

	memcpy_s(&LobbyList, sizeof(LobbyList), &LobbyMemberStatusUpdate_Params.LobbyList, sizeof(LobbyMemberStatusUpdate_Params.LobbyList));
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbySettingsUpdate
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// class TArray<struct FActiveLobbyInfo> LobbyList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbySettingsUpdate(int32_t LobbyIndex, class TArray<struct FActiveLobbyInfo>& LobbyList)
{
	static UFunction* uFnLobbySettingsUpdate = nullptr;

	if (!uFnLobbySettingsUpdate)
	{
		uFnLobbySettingsUpdate = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbySettingsUpdate");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbySettingsUpdate_Params LobbySettingsUpdate_Params;
	memset(&LobbySettingsUpdate_Params, 0, sizeof(LobbySettingsUpdate_Params));
	memcpy_s(&LobbySettingsUpdate_Params.LobbyIndex, sizeof(LobbySettingsUpdate_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbySettingsUpdate_Params.LobbyList, sizeof(LobbySettingsUpdate_Params.LobbyList), &LobbyList, sizeof(LobbyList));

	this->ProcessEvent(uFnLobbySettingsUpdate, &LobbySettingsUpdate_Params, nullptr);

	memcpy_s(&LobbyList, sizeof(LobbyList), &LobbySettingsUpdate_Params.LobbyList, sizeof(LobbySettingsUpdate_Params.LobbyList));
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.JoinLobbyComplete
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// int32_t                        LobbyIndex                     (CPF_Parm)
// struct FUniqueNetId            LobbyUID                       (CPF_Parm)
// class FString                  Error                          (CPF_Parm | CPF_NeedCtorLink)
// class TArray<struct FActiveLobbyInfo> LobbyList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::JoinLobbyComplete(bool bWasSuccessful, int32_t LobbyIndex, const struct FUniqueNetId& LobbyUID, const class FString& Error, class TArray<struct FActiveLobbyInfo>& LobbyList)
{
	static UFunction* uFnJoinLobbyComplete = nullptr;

	if (!uFnJoinLobbyComplete)
	{
		uFnJoinLobbyComplete = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.JoinLobbyComplete");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execJoinLobbyComplete_Params JoinLobbyComplete_Params;
	memset(&JoinLobbyComplete_Params, 0, sizeof(JoinLobbyComplete_Params));
	JoinLobbyComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&JoinLobbyComplete_Params.LobbyIndex, sizeof(JoinLobbyComplete_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&JoinLobbyComplete_Params.LobbyUID, sizeof(JoinLobbyComplete_Params.LobbyUID), &LobbyUID, sizeof(LobbyUID));
	memcpy_s(&JoinLobbyComplete_Params.Error, sizeof(JoinLobbyComplete_Params.Error), &Error, sizeof(Error));
	memcpy_s(&JoinLobbyComplete_Params.LobbyList, sizeof(JoinLobbyComplete_Params.LobbyList), &LobbyList, sizeof(LobbyList));

	this->ProcessEvent(uFnJoinLobbyComplete, &JoinLobbyComplete_Params, nullptr);

	memcpy_s(&LobbyList, sizeof(LobbyList), &JoinLobbyComplete_Params.LobbyList, sizeof(JoinLobbyComplete_Params.LobbyList));
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.FindLobbiesComplete
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// class TArray<struct FBasicLobbyInfo> LobbyList                      (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::FindLobbiesComplete(bool bWasSuccessful, class TArray<struct FBasicLobbyInfo>& LobbyList)
{
	static UFunction* uFnFindLobbiesComplete = nullptr;

	if (!uFnFindLobbiesComplete)
	{
		uFnFindLobbiesComplete = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.FindLobbiesComplete");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execFindLobbiesComplete_Params FindLobbiesComplete_Params;
	memset(&FindLobbiesComplete_Params, 0, sizeof(FindLobbiesComplete_Params));
	FindLobbiesComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&FindLobbiesComplete_Params.LobbyList, sizeof(FindLobbiesComplete_Params.LobbyList), &LobbyList, sizeof(LobbyList));

	this->ProcessEvent(uFnFindLobbiesComplete, &FindLobbiesComplete_Params, nullptr);

	memcpy_s(&LobbyList, sizeof(LobbyList), &FindLobbiesComplete_Params.LobbyList, sizeof(FindLobbiesComplete_Params.LobbyList));
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.FindLobbies
// [0x00824802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class TArray<struct FFindLobbyFilter> FindFilters                    (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// ELobbyDistance                 Distance                       (CPF_OptionalParm | CPF_Parm)

bool UREDGameOnlineLobbyInterfaceSteamworks::eventFindLobbies(const class TArray<struct FFindLobbyFilter>& FindFilters, ELobbyDistance Distance)
{
	static UFunction* uFnFindLobbies = nullptr;

	if (!uFnFindLobbies)
	{
		uFnFindLobbies = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.FindLobbies");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_eventFindLobbies_Params FindLobbies_Params;
	memset(&FindLobbies_Params, 0, sizeof(FindLobbies_Params));
	memcpy_s(&FindLobbies_Params.FindFilters, sizeof(FindLobbies_Params.FindFilters), &FindFilters, sizeof(FindFilters));
	memcpy_s(&FindLobbies_Params.Distance, sizeof(FindLobbies_Params.Distance), &Distance, sizeof(Distance));

	this->ProcessEvent(uFnFindLobbies, &FindLobbies_Params, nullptr);

	return FindLobbies_Params.ReturnValue;
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.CreateLobbyComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// struct FUniqueNetId            LobbyId                        (CPF_Parm)
// class FString                  Error                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::CreateLobbyComplete(bool bWasSuccessful, const struct FUniqueNetId& LobbyId, const class FString& Error)
{
	static UFunction* uFnCreateLobbyComplete = nullptr;

	if (!uFnCreateLobbyComplete)
	{
		uFnCreateLobbyComplete = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.CreateLobbyComplete");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execCreateLobbyComplete_Params CreateLobbyComplete_Params;
	memset(&CreateLobbyComplete_Params, 0, sizeof(CreateLobbyComplete_Params));
	CreateLobbyComplete_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&CreateLobbyComplete_Params.LobbyId, sizeof(CreateLobbyComplete_Params.LobbyId), &LobbyId, sizeof(LobbyId));
	memcpy_s(&CreateLobbyComplete_Params.Error, sizeof(CreateLobbyComplete_Params.Error), &Error, sizeof(Error));

	this->ProcessEvent(uFnCreateLobbyComplete, &CreateLobbyComplete_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.CreateLobby
// [0x00824802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        MaxPlayers                     (CPF_Parm)
// ELobbyVisibility               Type                           (CPF_OptionalParm | CPF_Parm)
// class TArray<struct FLobbySetting> LobbySettings                  (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

bool UREDGameOnlineLobbyInterfaceSteamworks::eventCreateLobby(int32_t MaxPlayers, ELobbyVisibility Type, const class TArray<struct FLobbySetting>& LobbySettings)
{
	static UFunction* uFnCreateLobby = nullptr;

	if (!uFnCreateLobby)
	{
		uFnCreateLobby = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.CreateLobby");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_eventCreateLobby_Params CreateLobby_Params;
	memset(&CreateLobby_Params, 0, sizeof(CreateLobby_Params));
	memcpy_s(&CreateLobby_Params.MaxPlayers, sizeof(CreateLobby_Params.MaxPlayers), &MaxPlayers, sizeof(MaxPlayers));
	memcpy_s(&CreateLobby_Params.Type, sizeof(CreateLobby_Params.Type), &Type, sizeof(Type));
	memcpy_s(&CreateLobby_Params.LobbySettings, sizeof(CreateLobby_Params.LobbySettings), &LobbySettings, sizeof(LobbySettings));

	this->ProcessEvent(uFnCreateLobby, &CreateLobby_Params, nullptr);

	return CreateLobby_Params.ReturnValue;
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.Cleanup
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameOnlineLobbyInterfaceSteamworks::eventCleanup()
{
	static UFunction* uFnCleanup = nullptr;

	if (!uFnCleanup)
	{
		uFnCleanup = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.Cleanup");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_eventCleanup_Params Cleanup_Params;
	memset(&Cleanup_Params, 0, sizeof(Cleanup_Params));

	this->ProcessEvent(uFnCleanup, &Cleanup_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.Initialize
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameOnlineLobbyInterfaceSteamworks::eventInitialize()
{
	static UFunction* uFnInitialize = nullptr;

	if (!uFnInitialize)
	{
		uFnInitialize = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.Initialize");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_eventInitialize_Params Initialize_Params;
	memset(&Initialize_Params, 0, sizeof(Initialize_Params));

	this->ProcessEvent(uFnInitialize, &Initialize_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyKickedNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38060])
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        AdminIndex                     (CPF_Parm)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyKickedNative(int32_t LobbyIndex, int32_t AdminIndex)
{
	static UFunction* uFnLobbyKickedNative = nullptr;

	if (!uFnLobbyKickedNative)
	{
		uFnLobbyKickedNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyKickedNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyKickedNative_Params LobbyKickedNative_Params;
	memset(&LobbyKickedNative_Params, 0, sizeof(LobbyKickedNative_Params));
	memcpy_s(&LobbyKickedNative_Params.LobbyIndex, sizeof(LobbyKickedNative_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyKickedNative_Params.AdminIndex, sizeof(LobbyKickedNative_Params.AdminIndex), &AdminIndex, sizeof(AdminIndex));

	this->ProcessEvent(uFnLobbyKickedNative, &LobbyKickedNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyInviteCompleteNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38058])
// Parameter Info:
// struct FUniqueNetId            LobbyId                        (CPF_Parm)
// struct FUniqueNetId            FriendId                       (CPF_Parm)
// uint32_t                       bAccepted                      (CPF_Parm)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyInviteCompleteNative(const struct FUniqueNetId& LobbyId, const struct FUniqueNetId& FriendId, bool bAccepted)
{
	static UFunction* uFnLobbyInviteCompleteNative = nullptr;

	if (!uFnLobbyInviteCompleteNative)
	{
		uFnLobbyInviteCompleteNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyInviteCompleteNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyInviteCompleteNative_Params LobbyInviteCompleteNative_Params;
	memset(&LobbyInviteCompleteNative_Params, 0, sizeof(LobbyInviteCompleteNative_Params));
	memcpy_s(&LobbyInviteCompleteNative_Params.LobbyId, sizeof(LobbyInviteCompleteNative_Params.LobbyId), &LobbyId, sizeof(LobbyId));
	memcpy_s(&LobbyInviteCompleteNative_Params.FriendId, sizeof(LobbyInviteCompleteNative_Params.FriendId), &FriendId, sizeof(FriendId));
	LobbyInviteCompleteNative_Params.bAccepted = bAccepted;

	this->ProcessEvent(uFnLobbyInviteCompleteNative, &LobbyInviteCompleteNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyReceiveBinaryDataNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38068])
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        MemberIndex                    (CPF_Parm)
// class FString                  Type                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyReceiveBinaryDataNative(int32_t LobbyIndex, int32_t MemberIndex, const class FString& Type, const class FString& Message)
{
	static UFunction* uFnLobbyReceiveBinaryDataNative = nullptr;

	if (!uFnLobbyReceiveBinaryDataNative)
	{
		uFnLobbyReceiveBinaryDataNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyReceiveBinaryDataNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyReceiveBinaryDataNative_Params LobbyReceiveBinaryDataNative_Params;
	memset(&LobbyReceiveBinaryDataNative_Params, 0, sizeof(LobbyReceiveBinaryDataNative_Params));
	memcpy_s(&LobbyReceiveBinaryDataNative_Params.LobbyIndex, sizeof(LobbyReceiveBinaryDataNative_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyReceiveBinaryDataNative_Params.MemberIndex, sizeof(LobbyReceiveBinaryDataNative_Params.MemberIndex), &MemberIndex, sizeof(MemberIndex));
	memcpy_s(&LobbyReceiveBinaryDataNative_Params.Type, sizeof(LobbyReceiveBinaryDataNative_Params.Type), &Type, sizeof(Type));
	memcpy_s(&LobbyReceiveBinaryDataNative_Params.Message, sizeof(LobbyReceiveBinaryDataNative_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnLobbyReceiveBinaryDataNative, &LobbyReceiveBinaryDataNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyReceiveMessageNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38070])
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        MemberIndex                    (CPF_Parm)
// class FString                  Type                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyReceiveMessageNative(int32_t LobbyIndex, int32_t MemberIndex, const class FString& Type, const class FString& Message)
{
	static UFunction* uFnLobbyReceiveMessageNative = nullptr;

	if (!uFnLobbyReceiveMessageNative)
	{
		uFnLobbyReceiveMessageNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyReceiveMessageNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyReceiveMessageNative_Params LobbyReceiveMessageNative_Params;
	memset(&LobbyReceiveMessageNative_Params, 0, sizeof(LobbyReceiveMessageNative_Params));
	memcpy_s(&LobbyReceiveMessageNative_Params.LobbyIndex, sizeof(LobbyReceiveMessageNative_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyReceiveMessageNative_Params.MemberIndex, sizeof(LobbyReceiveMessageNative_Params.MemberIndex), &MemberIndex, sizeof(MemberIndex));
	memcpy_s(&LobbyReceiveMessageNative_Params.Type, sizeof(LobbyReceiveMessageNative_Params.Type), &Type, sizeof(Type));
	memcpy_s(&LobbyReceiveMessageNative_Params.Message, sizeof(LobbyReceiveMessageNative_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnLobbyReceiveMessageNative, &LobbyReceiveMessageNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyMemberSettingsUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38062])
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        MemberIndex                    (CPF_Parm)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyMemberSettingsUpdateNative(int32_t LobbyIndex, int32_t MemberIndex)
{
	static UFunction* uFnLobbyMemberSettingsUpdateNative = nullptr;

	if (!uFnLobbyMemberSettingsUpdateNative)
	{
		uFnLobbyMemberSettingsUpdateNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyMemberSettingsUpdateNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyMemberSettingsUpdateNative_Params LobbyMemberSettingsUpdateNative_Params;
	memset(&LobbyMemberSettingsUpdateNative_Params, 0, sizeof(LobbyMemberSettingsUpdateNative_Params));
	memcpy_s(&LobbyMemberSettingsUpdateNative_Params.LobbyIndex, sizeof(LobbyMemberSettingsUpdateNative_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyMemberSettingsUpdateNative_Params.MemberIndex, sizeof(LobbyMemberSettingsUpdateNative_Params.MemberIndex), &MemberIndex, sizeof(MemberIndex));

	this->ProcessEvent(uFnLobbyMemberSettingsUpdateNative, &LobbyMemberSettingsUpdateNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyMemberStatusUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38064])
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)
// int32_t                        MemberIndex                    (CPF_Parm)
// int32_t                        InstigatorIndex                (CPF_Parm)
// class FString                  Status                         (CPF_Parm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbyMemberStatusUpdateNative(int32_t LobbyIndex, int32_t MemberIndex, int32_t InstigatorIndex, const class FString& Status)
{
	static UFunction* uFnLobbyMemberStatusUpdateNative = nullptr;

	if (!uFnLobbyMemberStatusUpdateNative)
	{
		uFnLobbyMemberStatusUpdateNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbyMemberStatusUpdateNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbyMemberStatusUpdateNative_Params LobbyMemberStatusUpdateNative_Params;
	memset(&LobbyMemberStatusUpdateNative_Params, 0, sizeof(LobbyMemberStatusUpdateNative_Params));
	memcpy_s(&LobbyMemberStatusUpdateNative_Params.LobbyIndex, sizeof(LobbyMemberStatusUpdateNative_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&LobbyMemberStatusUpdateNative_Params.MemberIndex, sizeof(LobbyMemberStatusUpdateNative_Params.MemberIndex), &MemberIndex, sizeof(MemberIndex));
	memcpy_s(&LobbyMemberStatusUpdateNative_Params.InstigatorIndex, sizeof(LobbyMemberStatusUpdateNative_Params.InstigatorIndex), &InstigatorIndex, sizeof(InstigatorIndex));
	memcpy_s(&LobbyMemberStatusUpdateNative_Params.Status, sizeof(LobbyMemberStatusUpdateNative_Params.Status), &Status, sizeof(Status));

	this->ProcessEvent(uFnLobbyMemberStatusUpdateNative, &LobbyMemberStatusUpdateNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbySettingsUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38076])
// Parameter Info:
// int32_t                        LobbyIndex                     (CPF_Parm)

void UREDGameOnlineLobbyInterfaceSteamworks::LobbySettingsUpdateNative(int32_t LobbyIndex)
{
	static UFunction* uFnLobbySettingsUpdateNative = nullptr;

	if (!uFnLobbySettingsUpdateNative)
	{
		uFnLobbySettingsUpdateNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.LobbySettingsUpdateNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execLobbySettingsUpdateNative_Params LobbySettingsUpdateNative_Params;
	memset(&LobbySettingsUpdateNative_Params, 0, sizeof(LobbySettingsUpdateNative_Params));
	memcpy_s(&LobbySettingsUpdateNative_Params.LobbyIndex, sizeof(LobbySettingsUpdateNative_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));

	this->ProcessEvent(uFnLobbySettingsUpdateNative, &LobbySettingsUpdateNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.JoinLobbyCompleteNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37946])
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// int32_t                        LobbyIndex                     (CPF_Parm)
// struct FUniqueNetId            LobbyUID                       (CPF_Parm)
// class FString                  Error                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::JoinLobbyCompleteNative(bool bWasSuccessful, int32_t LobbyIndex, const struct FUniqueNetId& LobbyUID, const class FString& Error)
{
	static UFunction* uFnJoinLobbyCompleteNative = nullptr;

	if (!uFnJoinLobbyCompleteNative)
	{
		uFnJoinLobbyCompleteNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.JoinLobbyCompleteNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execJoinLobbyCompleteNative_Params JoinLobbyCompleteNative_Params;
	memset(&JoinLobbyCompleteNative_Params, 0, sizeof(JoinLobbyCompleteNative_Params));
	JoinLobbyCompleteNative_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&JoinLobbyCompleteNative_Params.LobbyIndex, sizeof(JoinLobbyCompleteNative_Params.LobbyIndex), &LobbyIndex, sizeof(LobbyIndex));
	memcpy_s(&JoinLobbyCompleteNative_Params.LobbyUID, sizeof(JoinLobbyCompleteNative_Params.LobbyUID), &LobbyUID, sizeof(LobbyUID));
	memcpy_s(&JoinLobbyCompleteNative_Params.Error, sizeof(JoinLobbyCompleteNative_Params.Error), &Error, sizeof(Error));

	this->ProcessEvent(uFnJoinLobbyCompleteNative, &JoinLobbyCompleteNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.FindLobbiesCompleteNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36854])
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// class TArray<struct FFoundLobby> foundList                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::FindLobbiesCompleteNative(bool bWasSuccessful, const class TArray<struct FFoundLobby>& foundList)
{
	static UFunction* uFnFindLobbiesCompleteNative = nullptr;

	if (!uFnFindLobbiesCompleteNative)
	{
		uFnFindLobbiesCompleteNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.FindLobbiesCompleteNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execFindLobbiesCompleteNative_Params FindLobbiesCompleteNative_Params;
	memset(&FindLobbiesCompleteNative_Params, 0, sizeof(FindLobbiesCompleteNative_Params));
	FindLobbiesCompleteNative_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&FindLobbiesCompleteNative_Params.foundList, sizeof(FindLobbiesCompleteNative_Params.foundList), &foundList, sizeof(foundList));

	this->ProcessEvent(uFnFindLobbiesCompleteNative, &FindLobbiesCompleteNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.CreateLobbyCompleteNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36333])
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)
// struct FUniqueNetId            LobbyId                        (CPF_Parm)
// class FString                  Error                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGameOnlineLobbyInterfaceSteamworks::CreateLobbyCompleteNative(bool bWasSuccessful, const struct FUniqueNetId& LobbyId, const class FString& Error)
{
	static UFunction* uFnCreateLobbyCompleteNative = nullptr;

	if (!uFnCreateLobbyCompleteNative)
	{
		uFnCreateLobbyCompleteNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.CreateLobbyCompleteNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execCreateLobbyCompleteNative_Params CreateLobbyCompleteNative_Params;
	memset(&CreateLobbyCompleteNative_Params, 0, sizeof(CreateLobbyCompleteNative_Params));
	CreateLobbyCompleteNative_Params.bWasSuccessful = bWasSuccessful;
	memcpy_s(&CreateLobbyCompleteNative_Params.LobbyId, sizeof(CreateLobbyCompleteNative_Params.LobbyId), &LobbyId, sizeof(LobbyId));
	memcpy_s(&CreateLobbyCompleteNative_Params.Error, sizeof(CreateLobbyCompleteNative_Params.Error), &Error, sizeof(Error));

	this->ProcessEvent(uFnCreateLobbyCompleteNative, &CreateLobbyCompleteNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.CleanupNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36222])
// Parameter Info:

void UREDGameOnlineLobbyInterfaceSteamworks::CleanupNative()
{
	static UFunction* uFnCleanupNative = nullptr;

	if (!uFnCleanupNative)
	{
		uFnCleanupNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.CleanupNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execCleanupNative_Params CleanupNative_Params;
	memset(&CleanupNative_Params, 0, sizeof(CleanupNative_Params));

	this->ProcessEvent(uFnCleanupNative, &CleanupNative_Params, nullptr);
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.JoinedLobbyId
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37944])
// Parameter Info:
// struct FUniqueNetId            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FUniqueNetId UREDGameOnlineLobbyInterfaceSteamworks::JoinedLobbyId()
{
	static UFunction* uFnJoinedLobbyId = nullptr;

	if (!uFnJoinedLobbyId)
	{
		uFnJoinedLobbyId = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.JoinedLobbyId");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execJoinedLobbyId_Params JoinedLobbyId_Params;
	memset(&JoinedLobbyId_Params, 0, sizeof(JoinedLobbyId_Params));

	this->ProcessEvent(uFnJoinedLobbyId, &JoinedLobbyId_Params, nullptr);

	return JoinedLobbyId_Params.ReturnValue;
};

// Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGameOnlineLobbyInterfaceSteamworks::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGameOnlineLobbyInterfaceSteamworks.InitializeNative");
	}

	UREDGameOnlineLobbyInterfaceSteamworks_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.FlushStatsCompleteNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36882])
// Parameter Info:

void UREDGameStatsBase::FlushStatsCompleteNative()
{
	static UFunction* uFnFlushStatsCompleteNative = nullptr;

	if (!uFnFlushStatsCompleteNative)
	{
		uFnFlushStatsCompleteNative = UFunction::FindFunction("Function REDGame.REDGameStatsBase.FlushStatsCompleteNative");
	}

	UREDGameStatsBase_execFlushStatsCompleteNative_Params FlushStatsCompleteNative_Params;
	memset(&FlushStatsCompleteNative_Params, 0, sizeof(FlushStatsCompleteNative_Params));

	this->ProcessEvent(uFnFlushStatsCompleteNative, &FlushStatsCompleteNative_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.FlushStatsComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    SessionName                    (CPF_Parm)
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UREDGameStatsBase::FlushStatsComplete(const class FName& SessionName, bool bWasSuccessful)
{
	static UFunction* uFnFlushStatsComplete = nullptr;

	if (!uFnFlushStatsComplete)
	{
		uFnFlushStatsComplete = UFunction::FindFunction("Function REDGame.REDGameStatsBase.FlushStatsComplete");
	}

	UREDGameStatsBase_execFlushStatsComplete_Params FlushStatsComplete_Params;
	memset(&FlushStatsComplete_Params, 0, sizeof(FlushStatsComplete_Params));
	memcpy_s(&FlushStatsComplete_Params.SessionName, sizeof(FlushStatsComplete_Params.SessionName), &SessionName, sizeof(SessionName));
	FlushStatsComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnFlushStatsComplete, &FlushStatsComplete_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.WriteStats
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGameStatsBase::WriteStats()
{
	static UFunction* uFnWriteStats = nullptr;

	if (!uFnWriteStats)
	{
		uFnWriteStats = UFunction::FindFunction("Function REDGame.REDGameStatsBase.WriteStats");
	}

	UREDGameStatsBase_execWriteStats_Params WriteStats_Params;
	memset(&WriteStats_Params, 0, sizeof(WriteStats_Params));

	this->ProcessEvent(uFnWriteStats, &WriteStats_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.AchievementDoneNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35363])
// Parameter Info:
// int32_t                        unlockedAchievementId          (CPF_Parm)

void UREDGameStatsBase::AchievementDoneNative(int32_t unlockedAchievementId)
{
	static UFunction* uFnAchievementDoneNative = nullptr;

	if (!uFnAchievementDoneNative)
	{
		uFnAchievementDoneNative = UFunction::FindFunction("Function REDGame.REDGameStatsBase.AchievementDoneNative");
	}

	UREDGameStatsBase_execAchievementDoneNative_Params AchievementDoneNative_Params;
	memset(&AchievementDoneNative_Params, 0, sizeof(AchievementDoneNative_Params));
	memcpy_s(&AchievementDoneNative_Params.unlockedAchievementId, sizeof(AchievementDoneNative_Params.unlockedAchievementId), &unlockedAchievementId, sizeof(unlockedAchievementId));

	this->ProcessEvent(uFnAchievementDoneNative, &AchievementDoneNative_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.AchievementDone
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UREDGameStatsBase::AchievementDone(bool bWasSuccessful)
{
	static UFunction* uFnAchievementDone = nullptr;

	if (!uFnAchievementDone)
	{
		uFnAchievementDone = UFunction::FindFunction("Function REDGame.REDGameStatsBase.AchievementDone");
	}

	UREDGameStatsBase_execAchievementDone_Params AchievementDone_Params;
	memset(&AchievementDone_Params, 0, sizeof(AchievementDone_Params));
	AchievementDone_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnAchievementDone, &AchievementDone_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.UnlockAchievement
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        AchievementId                  (CPF_Parm)

void UREDGameStatsBase::UnlockAchievement(int32_t AchievementId)
{
	static UFunction* uFnUnlockAchievement = nullptr;

	if (!uFnUnlockAchievement)
	{
		uFnUnlockAchievement = UFunction::FindFunction("Function REDGame.REDGameStatsBase.UnlockAchievement");
	}

	UREDGameStatsBase_execUnlockAchievement_Params UnlockAchievement_Params;
	memset(&UnlockAchievement_Params, 0, sizeof(UnlockAchievement_Params));
	memcpy_s(&UnlockAchievement_Params.AchievementId, sizeof(UnlockAchievement_Params.AchievementId), &AchievementId, sizeof(AchievementId));

	this->ProcessEvent(uFnUnlockAchievement, &UnlockAchievement_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.UpdateStatsBitCount
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StatsID                        (CPF_Parm)
// int32_t                        BitMask                        (CPF_Parm)
// int32_t                        BitMax                         (CPF_Parm)

int32_t UREDGameStatsBase::UpdateStatsBitCount(int32_t StatsID, int32_t BitMask, int32_t BitMax)
{
	static UFunction* uFnUpdateStatsBitCount = nullptr;

	if (!uFnUpdateStatsBitCount)
	{
		uFnUpdateStatsBitCount = UFunction::FindFunction("Function REDGame.REDGameStatsBase.UpdateStatsBitCount");
	}

	UREDGameStatsBase_execUpdateStatsBitCount_Params UpdateStatsBitCount_Params;
	memset(&UpdateStatsBitCount_Params, 0, sizeof(UpdateStatsBitCount_Params));
	memcpy_s(&UpdateStatsBitCount_Params.StatsID, sizeof(UpdateStatsBitCount_Params.StatsID), &StatsID, sizeof(StatsID));
	memcpy_s(&UpdateStatsBitCount_Params.BitMask, sizeof(UpdateStatsBitCount_Params.BitMask), &BitMask, sizeof(BitMask));
	memcpy_s(&UpdateStatsBitCount_Params.BitMax, sizeof(UpdateStatsBitCount_Params.BitMax), &BitMax, sizeof(BitMax));

	this->ProcessEvent(uFnUpdateStatsBitCount, &UpdateStatsBitCount_Params, nullptr);

	return UpdateStatsBitCount_Params.ReturnValue;
};

// Function REDGame.REDGameStatsBase.UpdateStatsCount
// [0x00044003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StatsID                        (CPF_Parm)
// int32_t                        Count                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        Criteria                       (CPF_OptionalParm | CPF_Parm)

int32_t UREDGameStatsBase::UpdateStatsCount(int32_t StatsID, int32_t Count, int32_t Criteria)
{
	static UFunction* uFnUpdateStatsCount = nullptr;

	if (!uFnUpdateStatsCount)
	{
		uFnUpdateStatsCount = UFunction::FindFunction("Function REDGame.REDGameStatsBase.UpdateStatsCount");
	}

	UREDGameStatsBase_execUpdateStatsCount_Params UpdateStatsCount_Params;
	memset(&UpdateStatsCount_Params, 0, sizeof(UpdateStatsCount_Params));
	memcpy_s(&UpdateStatsCount_Params.StatsID, sizeof(UpdateStatsCount_Params.StatsID), &StatsID, sizeof(StatsID));
	memcpy_s(&UpdateStatsCount_Params.Count, sizeof(UpdateStatsCount_Params.Count), &Count, sizeof(Count));
	memcpy_s(&UpdateStatsCount_Params.Criteria, sizeof(UpdateStatsCount_Params.Criteria), &Criteria, sizeof(Criteria));

	this->ProcessEvent(uFnUpdateStatsCount, &UpdateStatsCount_Params, nullptr);

	return UpdateStatsCount_Params.ReturnValue;
};

// Function REDGame.REDGameStatsBase.UpdateCompleteAchivementStats
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGameStatsBase::UpdateCompleteAchivementStats()
{
	static UFunction* uFnUpdateCompleteAchivementStats = nullptr;

	if (!uFnUpdateCompleteAchivementStats)
	{
		uFnUpdateCompleteAchivementStats = UFunction::FindFunction("Function REDGame.REDGameStatsBase.UpdateCompleteAchivementStats");
	}

	UREDGameStatsBase_execUpdateCompleteAchivementStats_Params UpdateCompleteAchivementStats_Params;
	memset(&UpdateCompleteAchivementStats_Params, 0, sizeof(UpdateCompleteAchivementStats_Params));

	this->ProcessEvent(uFnUpdateCompleteAchivementStats, &UpdateCompleteAchivementStats_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.CheckUnlockedAchievement
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        AchievementId                  (CPF_Parm)

bool UREDGameStatsBase::CheckUnlockedAchievement(int32_t AchievementId)
{
	static UFunction* uFnCheckUnlockedAchievement = nullptr;

	if (!uFnCheckUnlockedAchievement)
	{
		uFnCheckUnlockedAchievement = UFunction::FindFunction("Function REDGame.REDGameStatsBase.CheckUnlockedAchievement");
	}

	UREDGameStatsBase_execCheckUnlockedAchievement_Params CheckUnlockedAchievement_Params;
	memset(&CheckUnlockedAchievement_Params, 0, sizeof(CheckUnlockedAchievement_Params));
	memcpy_s(&CheckUnlockedAchievement_Params.AchievementId, sizeof(CheckUnlockedAchievement_Params.AchievementId), &AchievementId, sizeof(AchievementId));

	this->ProcessEvent(uFnCheckUnlockedAchievement, &CheckUnlockedAchievement_Params, nullptr);

	return CheckUnlockedAchievement_Params.ReturnValue;
};

// Function REDGame.REDGameStatsBase.UnlockedAchievementsSort
// [0x00120002] (FUNC_Defined | FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        A                              (CPF_Parm)
// int32_t                        B                              (CPF_Parm)

int32_t UREDGameStatsBase::UnlockedAchievementsSort(int32_t A, int32_t B)
{
	static UFunction* uFnUnlockedAchievementsSort = nullptr;

	if (!uFnUnlockedAchievementsSort)
	{
		uFnUnlockedAchievementsSort = UFunction::FindFunction("Function REDGame.REDGameStatsBase.UnlockedAchievementsSort");
	}

	UREDGameStatsBase_execUnlockedAchievementsSort_Params UnlockedAchievementsSort_Params;
	memset(&UnlockedAchievementsSort_Params, 0, sizeof(UnlockedAchievementsSort_Params));
	memcpy_s(&UnlockedAchievementsSort_Params.A, sizeof(UnlockedAchievementsSort_Params.A), &A, sizeof(A));
	memcpy_s(&UnlockedAchievementsSort_Params.B, sizeof(UnlockedAchievementsSort_Params.B), &B, sizeof(B));

	this->ProcessEvent(uFnUnlockedAchievementsSort, &UnlockedAchievementsSort_Params, nullptr);

	return UnlockedAchievementsSort_Params.ReturnValue;
};

// Function REDGame.REDGameStatsBase.UpdateStats
// [0x00044003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        StatsID                        (CPF_Parm)
// int32_t                        Value                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        Max                            (CPF_OptionalParm | CPF_Parm)

int32_t UREDGameStatsBase::UpdateStats(int32_t StatsID, int32_t Value, int32_t Max)
{
	static UFunction* uFnUpdateStats = nullptr;

	if (!uFnUpdateStats)
	{
		uFnUpdateStats = UFunction::FindFunction("Function REDGame.REDGameStatsBase.UpdateStats");
	}

	UREDGameStatsBase_execUpdateStats_Params UpdateStats_Params;
	memset(&UpdateStats_Params, 0, sizeof(UpdateStats_Params));
	memcpy_s(&UpdateStats_Params.StatsID, sizeof(UpdateStats_Params.StatsID), &StatsID, sizeof(StatsID));
	memcpy_s(&UpdateStats_Params.Value, sizeof(UpdateStats_Params.Value), &Value, sizeof(Value));
	memcpy_s(&UpdateStats_Params.Max, sizeof(UpdateStats_Params.Max), &Max, sizeof(Max));

	this->ProcessEvent(uFnUpdateStats, &UpdateStats_Params, nullptr);

	return UpdateStats_Params.ReturnValue;
};

// Function REDGame.REDGameStatsBase.Update
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        LocalPlayerIndex               (CPF_Parm)
// int32_t                        StatsID                        (CPF_Parm)
// int32_t                        Value                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        Max                            (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bSkipCommit                    (CPF_OptionalParm | CPF_Parm)

int32_t UREDGameStatsBase::eventUpdate(int32_t LocalPlayerIndex, int32_t StatsID, int32_t Value, int32_t Max, bool bSkipCommit)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGameStatsBase.Update");
	}

	UREDGameStatsBase_eventUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.LocalPlayerIndex, sizeof(Update_Params.LocalPlayerIndex), &LocalPlayerIndex, sizeof(LocalPlayerIndex));
	memcpy_s(&Update_Params.StatsID, sizeof(Update_Params.StatsID), &StatsID, sizeof(StatsID));
	memcpy_s(&Update_Params.Value, sizeof(Update_Params.Value), &Value, sizeof(Value));
	memcpy_s(&Update_Params.Max, sizeof(Update_Params.Max), &Max, sizeof(Max));
	Update_Params.bSkipCommit = bSkipCommit;

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);

	return Update_Params.ReturnValue;
};

// Function REDGame.REDGameStatsBase.ReadStatsCompleteNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39230])
// Parameter Info:

void UREDGameStatsBase::ReadStatsCompleteNative()
{
	static UFunction* uFnReadStatsCompleteNative = nullptr;

	if (!uFnReadStatsCompleteNative)
	{
		uFnReadStatsCompleteNative = UFunction::FindFunction("Function REDGame.REDGameStatsBase.ReadStatsCompleteNative");
	}

	UREDGameStatsBase_execReadStatsCompleteNative_Params ReadStatsCompleteNative_Params;
	memset(&ReadStatsCompleteNative_Params, 0, sizeof(ReadStatsCompleteNative_Params));

	this->ProcessEvent(uFnReadStatsCompleteNative, &ReadStatsCompleteNative_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.ReadStatsComplete
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bWasSuccessful                 (CPF_Parm)

void UREDGameStatsBase::ReadStatsComplete(bool bWasSuccessful)
{
	static UFunction* uFnReadStatsComplete = nullptr;

	if (!uFnReadStatsComplete)
	{
		uFnReadStatsComplete = UFunction::FindFunction("Function REDGame.REDGameStatsBase.ReadStatsComplete");
	}

	UREDGameStatsBase_execReadStatsComplete_Params ReadStatsComplete_Params;
	memset(&ReadStatsComplete_Params, 0, sizeof(ReadStatsComplete_Params));
	ReadStatsComplete_Params.bWasSuccessful = bWasSuccessful;

	this->ProcessEvent(uFnReadStatsComplete, &ReadStatsComplete_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.ReadStats
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGameStatsBase::ReadStats()
{
	static UFunction* uFnReadStats = nullptr;

	if (!uFnReadStats)
	{
		uFnReadStats = UFunction::FindFunction("Function REDGame.REDGameStatsBase.ReadStats");
	}

	UREDGameStatsBase_execReadStats_Params ReadStats_Params;
	memset(&ReadStats_Params, 0, sizeof(ReadStats_Params));

	this->ProcessEvent(uFnReadStats, &ReadStats_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.Read
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LocalPlayerIndex               (CPF_Parm)

void UREDGameStatsBase::eventRead(int32_t LocalPlayerIndex)
{
	static UFunction* uFnRead = nullptr;

	if (!uFnRead)
	{
		uFnRead = UFunction::FindFunction("Function REDGame.REDGameStatsBase.Read");
	}

	UREDGameStatsBase_eventRead_Params Read_Params;
	memset(&Read_Params, 0, sizeof(Read_Params));
	memcpy_s(&Read_Params.LocalPlayerIndex, sizeof(Read_Params.LocalPlayerIndex), &LocalPlayerIndex, sizeof(LocalPlayerIndex));

	this->ProcessEvent(uFnRead, &Read_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.Cleanup
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameStatsBase::eventCleanup()
{
	static UFunction* uFnCleanup = nullptr;

	if (!uFnCleanup)
	{
		uFnCleanup = UFunction::FindFunction("Function REDGame.REDGameStatsBase.Cleanup");
	}

	UREDGameStatsBase_eventCleanup_Params Cleanup_Params;
	memset(&Cleanup_Params, 0, sizeof(Cleanup_Params));

	this->ProcessEvent(uFnCleanup, &Cleanup_Params, nullptr);
};

// Function REDGame.REDGameStatsBase.GetPC
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class APlayerController* UREDGameStatsBase::GetPC()
{
	static UFunction* uFnGetPC = nullptr;

	if (!uFnGetPC)
	{
		uFnGetPC = UFunction::FindFunction("Function REDGame.REDGameStatsBase.GetPC");
	}

	UREDGameStatsBase_execGetPC_Params GetPC_Params;
	memset(&GetPC_Params, 0, sizeof(GetPC_Params));

	this->ProcessEvent(uFnGetPC, &GetPC_Params, nullptr);

	return GetPC_Params.ReturnValue;
};

// Function REDGame.REDGameStatsBase.GetLP
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class ULocalPlayer* UREDGameStatsBase::GetLP()
{
	static UFunction* uFnGetLP = nullptr;

	if (!uFnGetLP)
	{
		uFnGetLP = UFunction::FindFunction("Function REDGame.REDGameStatsBase.GetLP");
	}

	UREDGameStatsBase_execGetLP_Params GetLP_Params;
	memset(&GetLP_Params, 0, sizeof(GetLP_Params));

	this->ProcessEvent(uFnGetLP, &GetLP_Params, nullptr);

	return GetLP_Params.ReturnValue;
};

// Function REDGame.REDGameStats.ReadStatsCompleteNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39230])
// Parameter Info:

void UREDGameStats::ReadStatsCompleteNative()
{
	static UFunction* uFnReadStatsCompleteNative = nullptr;

	if (!uFnReadStatsCompleteNative)
	{
		uFnReadStatsCompleteNative = UFunction::FindFunction("Function REDGame.REDGameStats.ReadStatsCompleteNative");
	}

	UREDGameStats_execReadStatsCompleteNative_Params ReadStatsCompleteNative_Params;
	memset(&ReadStatsCompleteNative_Params, 0, sizeof(ReadStatsCompleteNative_Params));

	this->ProcessEvent(uFnReadStatsCompleteNative, &ReadStatsCompleteNative_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.GameSessionEnded
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGameViewportClient::eventGameSessionEnded()
{
	static UFunction* uFnGameSessionEnded = nullptr;

	if (!uFnGameSessionEnded)
	{
		uFnGameSessionEnded = UFunction::FindFunction("Function REDGame.REDGameViewportClient.GameSessionEnded");
	}

	UREDGameViewportClient_eventGameSessionEnded_Params GameSessionEnded_Params;
	memset(&GameSessionEnded_Params, 0, sizeof(GameSessionEnded_Params));

	this->ProcessEvent(uFnGameSessionEnded, &GameSessionEnded_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGameViewportClient::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameViewportClient.Tick");
	}

	UREDGameViewportClient_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.PostRender
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UREDGameViewportClient::PostRender(class UCanvas* Canvas)
{
	static UFunction* uFnPostRender = nullptr;

	if (!uFnPostRender)
	{
		uFnPostRender = UFunction::FindFunction("Function REDGame.REDGameViewportClient.PostRender");
	}

	UREDGameViewportClient_execPostRender_Params PostRender_Params;
	memset(&PostRender_Params, 0, sizeof(PostRender_Params));
	PostRender_Params.Canvas = Canvas;

	this->ProcessEvent(uFnPostRender, &PostRender_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.UpdateFade
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40672])
// Parameter Info:

void UREDGameViewportClient::UpdateFade()
{
	static UFunction* uFnUpdateFade = nullptr;

	if (!uFnUpdateFade)
	{
		uFnUpdateFade = UFunction::FindFunction("Function REDGame.REDGameViewportClient.UpdateFade");
	}

	UREDGameViewportClient_execUpdateFade_Params UpdateFade_Params;
	memset(&UpdateFade_Params, 0, sizeof(UpdateFade_Params));

	this->ProcessEvent(uFnUpdateFade, &UpdateFade_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.ChangeFadeColor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        inFadeColor                    (CPF_Parm)

void UREDGameViewportClient::eventChangeFadeColor(int32_t inFadeColor)
{
	static UFunction* uFnChangeFadeColor = nullptr;

	if (!uFnChangeFadeColor)
	{
		uFnChangeFadeColor = UFunction::FindFunction("Function REDGame.REDGameViewportClient.ChangeFadeColor");
	}

	UREDGameViewportClient_eventChangeFadeColor_Params ChangeFadeColor_Params;
	memset(&ChangeFadeColor_Params, 0, sizeof(ChangeFadeColor_Params));
	memcpy_s(&ChangeFadeColor_Params.inFadeColor, sizeof(ChangeFadeColor_Params.inFadeColor), &inFadeColor, sizeof(inFadeColor));

	this->ProcessEvent(uFnChangeFadeColor, &ChangeFadeColor_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.AdvanceFadeFrame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13212])
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void UREDGameViewportClient::AdvanceFadeFrame(int32_t frame)
{
	static UFunction* uFnAdvanceFadeFrame = nullptr;

	if (!uFnAdvanceFadeFrame)
	{
		uFnAdvanceFadeFrame = UFunction::FindFunction("Function REDGame.REDGameViewportClient.AdvanceFadeFrame");
	}

	UREDGameViewportClient_execAdvanceFadeFrame_Params AdvanceFadeFrame_Params;
	memset(&AdvanceFadeFrame_Params, 0, sizeof(AdvanceFadeFrame_Params));
	memcpy_s(&AdvanceFadeFrame_Params.frame, sizeof(AdvanceFadeFrame_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnAdvanceFadeFrame, &AdvanceFadeFrame_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.QuickFadeEnd
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13366])
// Parameter Info:

void UREDGameViewportClient::QuickFadeEnd()
{
	static UFunction* uFnQuickFadeEnd = nullptr;

	if (!uFnQuickFadeEnd)
	{
		uFnQuickFadeEnd = UFunction::FindFunction("Function REDGame.REDGameViewportClient.QuickFadeEnd");
	}

	UREDGameViewportClient_execQuickFadeEnd_Params QuickFadeEnd_Params;
	memset(&QuickFadeEnd_Params, 0, sizeof(QuickFadeEnd_Params));

	this->ProcessEvent(uFnQuickFadeEnd, &QuickFadeEnd_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.FadeOutFast
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13269])
// Parameter Info:

void UREDGameViewportClient::FadeOutFast()
{
	static UFunction* uFnFadeOutFast = nullptr;

	if (!uFnFadeOutFast)
	{
		uFnFadeOutFast = UFunction::FindFunction("Function REDGame.REDGameViewportClient.FadeOutFast");
	}

	UREDGameViewportClient_execFadeOutFast_Params FadeOutFast_Params;
	memset(&FadeOutFast_Params, 0, sizeof(FadeOutFast_Params));

	this->ProcessEvent(uFnFadeOutFast, &FadeOutFast_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.FadeOut
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13267])
// Parameter Info:
// int32_t                        frame                          (CPF_OptionalParm | CPF_Parm)

void UREDGameViewportClient::FadeOut(int32_t frame)
{
	static UFunction* uFnFadeOut = nullptr;

	if (!uFnFadeOut)
	{
		uFnFadeOut = UFunction::FindFunction("Function REDGame.REDGameViewportClient.FadeOut");
	}

	UREDGameViewportClient_execFadeOut_Params FadeOut_Params;
	memset(&FadeOut_Params, 0, sizeof(FadeOut_Params));
	memcpy_s(&FadeOut_Params.frame, sizeof(FadeOut_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnFadeOut, &FadeOut_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.FadeIn
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[13265])
// Parameter Info:
// int32_t                        frame                          (CPF_OptionalParm | CPF_Parm)

void UREDGameViewportClient::FadeIn(int32_t frame)
{
	static UFunction* uFnFadeIn = nullptr;

	if (!uFnFadeIn)
	{
		uFnFadeIn = UFunction::FindFunction("Function REDGame.REDGameViewportClient.FadeIn");
	}

	UREDGameViewportClient_execFadeIn_Params FadeIn_Params;
	memset(&FadeIn_Params, 0, sizeof(FadeIn_Params));
	memcpy_s(&FadeIn_Params.frame, sizeof(FadeIn_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnFadeIn, &FadeIn_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.PostDrawUpdate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39084])
// Parameter Info:

void UREDGameViewportClient::PostDrawUpdate()
{
	static UFunction* uFnPostDrawUpdate = nullptr;

	if (!uFnPostDrawUpdate)
	{
		uFnPostDrawUpdate = UFunction::FindFunction("Function REDGame.REDGameViewportClient.PostDrawUpdate");
	}

	UREDGameViewportClient_execPostDrawUpdate_Params PostDrawUpdate_Params;
	memset(&PostDrawUpdate_Params, 0, sizeof(PostDrawUpdate_Params));

	this->ProcessEvent(uFnPostDrawUpdate, &PostDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.PostUpdate
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26347])
// Parameter Info:

void UREDGameViewportClient::PostUpdate()
{
	static UFunction* uFnPostUpdate = nullptr;

	if (!uFnPostUpdate)
	{
		uFnPostUpdate = UFunction::FindFunction("Function REDGame.REDGameViewportClient.PostUpdate");
	}

	UREDGameViewportClient_execPostUpdate_Params PostUpdate_Params;
	memset(&PostUpdate_Params, 0, sizeof(PostUpdate_Params));

	this->ProcessEvent(uFnPostUpdate, &PostUpdate_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.UpdateFade_Tick
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40673])
// Parameter Info:

void UREDGameViewportClient::UpdateFade_Tick()
{
	static UFunction* uFnUpdateFade_Tick = nullptr;

	if (!uFnUpdateFade_Tick)
	{
		uFnUpdateFade_Tick = UFunction::FindFunction("Function REDGame.REDGameViewportClient.UpdateFade_Tick");
	}

	UREDGameViewportClient_execUpdateFade_Tick_Params UpdateFade_Tick_Params;
	memset(&UpdateFade_Tick_Params, 0, sizeof(UpdateFade_Tick_Params));

	this->ProcessEvent(uFnUpdateFade_Tick, &UpdateFade_Tick_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.DrawFade
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36602])
// Parameter Info:

void UREDGameViewportClient::DrawFade()
{
	static UFunction* uFnDrawFade = nullptr;

	if (!uFnDrawFade)
	{
		uFnDrawFade = UFunction::FindFunction("Function REDGame.REDGameViewportClient.DrawFade");
	}

	UREDGameViewportClient_execDrawFade_Params DrawFade_Params;
	memset(&DrawFade_Params, 0, sizeof(DrawFade_Params));

	this->ProcessEvent(uFnDrawFade, &DrawFade_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.FlushDebugDraw
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36879])
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UREDGameViewportClient::FlushDebugDraw(class UCanvas* Canvas)
{
	static UFunction* uFnFlushDebugDraw = nullptr;

	if (!uFnFlushDebugDraw)
	{
		uFnFlushDebugDraw = UFunction::FindFunction("Function REDGame.REDGameViewportClient.FlushDebugDraw");
	}

	UREDGameViewportClient_execFlushDebugDraw_Params FlushDebugDraw_Params;
	memset(&FlushDebugDraw_Params, 0, sizeof(FlushDebugDraw_Params));
	FlushDebugDraw_Params.Canvas = Canvas;

	this->ProcessEvent(uFnFlushDebugDraw, &FlushDebugDraw_Params, nullptr);
};

// Function REDGame.REDGameViewportClient.FlushRender2D
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36880])
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UREDGameViewportClient::FlushRender2D(class UCanvas* Canvas)
{
	static UFunction* uFnFlushRender2D = nullptr;

	if (!uFnFlushRender2D)
	{
		uFnFlushRender2D = UFunction::FindFunction("Function REDGame.REDGameViewportClient.FlushRender2D");
	}

	UREDGameViewportClient_execFlushRender2D_Params FlushRender2D_Params;
	memset(&FlushRender2D_Params, 0, sizeof(FlushRender2D_Params));
	FlushRender2D_Params.Canvas = Canvas;

	this->ProcessEvent(uFnFlushRender2D, &FlushRender2D_Params, nullptr);
};

// Function REDGame.REDGfxMovieArray.SetDispFromCategory
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39730])
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)
// EREDMovie_Category             Category                       (CPF_Parm)

void UREDGfxMovieArray::SetDispFromCategory(bool disp, EREDMovie_Category Category)
{
	static UFunction* uFnSetDispFromCategory = nullptr;

	if (!uFnSetDispFromCategory)
	{
		uFnSetDispFromCategory = UFunction::FindFunction("Function REDGame.REDGfxMovieArray.SetDispFromCategory");
	}

	UREDGfxMovieArray_execSetDispFromCategory_Params SetDispFromCategory_Params;
	memset(&SetDispFromCategory_Params, 0, sizeof(SetDispFromCategory_Params));
	SetDispFromCategory_Params.disp = disp;
	memcpy_s(&SetDispFromCategory_Params.Category, sizeof(SetDispFromCategory_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnSetDispFromCategory, &SetDispFromCategory_Params, nullptr);
};

// Function REDGame.REDGfxMovieArray.Update
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieArray::Update()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMovieArray.Update");
	}

	UREDGfxMovieArray_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMovieArray.SearchEmptyMovieIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMovieArray::SearchEmptyMovieIndex()
{
	static UFunction* uFnSearchEmptyMovieIndex = nullptr;

	if (!uFnSearchEmptyMovieIndex)
	{
		uFnSearchEmptyMovieIndex = UFunction::FindFunction("Function REDGame.REDGfxMovieArray.SearchEmptyMovieIndex");
	}

	UREDGfxMovieArray_execSearchEmptyMovieIndex_Params SearchEmptyMovieIndex_Params;
	memset(&SearchEmptyMovieIndex_Params, 0, sizeof(SearchEmptyMovieIndex_Params));

	this->ProcessEvent(uFnSearchEmptyMovieIndex, &SearchEmptyMovieIndex_Params, nullptr);

	return SearchEmptyMovieIndex_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieArray.ReleaseGfxMovie
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDGfxMoviePlayer*      Movie                          (CPF_Parm)

void UREDGfxMovieArray::ReleaseGfxMovie(class UREDGfxMoviePlayer* Movie)
{
	static UFunction* uFnReleaseGfxMovie = nullptr;

	if (!uFnReleaseGfxMovie)
	{
		uFnReleaseGfxMovie = UFunction::FindFunction("Function REDGame.REDGfxMovieArray.ReleaseGfxMovie");
	}

	UREDGfxMovieArray_execReleaseGfxMovie_Params ReleaseGfxMovie_Params;
	memset(&ReleaseGfxMovie_Params, 0, sizeof(ReleaseGfxMovie_Params));
	ReleaseGfxMovie_Params.Movie = Movie;

	this->ProcessEvent(uFnReleaseGfxMovie, &ReleaseGfxMovie_Params, nullptr);
};

// Function REDGame.REDGfxMovieArray.CreateGfxMovie
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDGfxMoviePlayer*      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Param0                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param1                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param2                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param3                         (CPF_OptionalParm | CPF_Parm)

class UREDGfxMoviePlayer* UREDGfxMovieArray::CreateGfxMovie(const class FString& MovieName, int32_t Param0, int32_t Param1, int32_t Param2, int32_t Param3)
{
	static UFunction* uFnCreateGfxMovie = nullptr;

	if (!uFnCreateGfxMovie)
	{
		uFnCreateGfxMovie = UFunction::FindFunction("Function REDGame.REDGfxMovieArray.CreateGfxMovie");
	}

	UREDGfxMovieArray_execCreateGfxMovie_Params CreateGfxMovie_Params;
	memset(&CreateGfxMovie_Params, 0, sizeof(CreateGfxMovie_Params));
	memcpy_s(&CreateGfxMovie_Params.MovieName, sizeof(CreateGfxMovie_Params.MovieName), &MovieName, sizeof(MovieName));
	memcpy_s(&CreateGfxMovie_Params.Param0, sizeof(CreateGfxMovie_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&CreateGfxMovie_Params.Param1, sizeof(CreateGfxMovie_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&CreateGfxMovie_Params.Param2, sizeof(CreateGfxMovie_Params.Param2), &Param2, sizeof(Param2));
	memcpy_s(&CreateGfxMovie_Params.Param3, sizeof(CreateGfxMovie_Params.Param3), &Param3, sizeof(Param3));

	this->ProcessEvent(uFnCreateGfxMovie, &CreateGfxMovie_Params, nullptr);

	return CreateGfxMovie_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_BattleHUD.FadeOut
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13267])
// Parameter Info:

void UREDGfxMovieManager_BattleHUD::FadeOut()
{
	static UFunction* uFnFadeOut = nullptr;

	if (!uFnFadeOut)
	{
		uFnFadeOut = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.FadeOut");
	}

	UREDGfxMovieManager_BattleHUD_execFadeOut_Params FadeOut_Params;
	memset(&FadeOut_Params, 0, sizeof(FadeOut_Params));

	this->ProcessEvent(uFnFadeOut, &FadeOut_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.FadeIn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13265])
// Parameter Info:

void UREDGfxMovieManager_BattleHUD::FadeIn()
{
	static UFunction* uFnFadeIn = nullptr;

	if (!uFnFadeIn)
	{
		uFnFadeIn = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.FadeIn");
	}

	UREDGfxMovieManager_BattleHUD_execFadeIn_Params FadeIn_Params;
	memset(&FadeIn_Params, 0, sizeof(FadeIn_Params));

	this->ProcessEvent(uFnFadeIn, &FadeIn_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.HideAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13302])
// Parameter Info:

void UREDGfxMovieManager_BattleHUD::HideAll()
{
	static UFunction* uFnHideAll = nullptr;

	if (!uFnHideAll)
	{
		uFnHideAll = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.HideAll");
	}

	UREDGfxMovieManager_BattleHUD_execHideAll_Params HideAll_Params;
	memset(&HideAll_Params, 0, sizeof(HideAll_Params));

	this->ProcessEvent(uFnHideAll, &HideAll_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.ShowAnime
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13434])
// Parameter Info:

void UREDGfxMovieManager_BattleHUD::ShowAnime()
{
	static UFunction* uFnShowAnime = nullptr;

	if (!uFnShowAnime)
	{
		uFnShowAnime = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.ShowAnime");
	}

	UREDGfxMovieManager_BattleHUD_execShowAnime_Params ShowAnime_Params;
	memset(&ShowAnime_Params, 0, sizeof(ShowAnime_Params));

	this->ProcessEvent(uFnShowAnime, &ShowAnime_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.ShowQuick
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13438])
// Parameter Info:

void UREDGfxMovieManager_BattleHUD::ShowQuick()
{
	static UFunction* uFnShowQuick = nullptr;

	if (!uFnShowQuick)
	{
		uFnShowQuick = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.ShowQuick");
	}

	UREDGfxMovieManager_BattleHUD_execShowQuick_Params ShowQuick_Params;
	memset(&ShowQuick_Params, 0, sizeof(ShowQuick_Params));

	this->ProcessEvent(uFnShowQuick, &ShowQuick_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.AdjustPos
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13211])
// Parameter Info:
// int32_t                        offsetUp                       (CPF_Parm)
// int32_t                        offsetDown                     (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::AdjustPos(int32_t offsetUp, int32_t offsetDown)
{
	static UFunction* uFnAdjustPos = nullptr;

	if (!uFnAdjustPos)
	{
		uFnAdjustPos = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.AdjustPos");
	}

	UREDGfxMovieManager_BattleHUD_execAdjustPos_Params AdjustPos_Params;
	memset(&AdjustPos_Params, 0, sizeof(AdjustPos_Params));
	memcpy_s(&AdjustPos_Params.offsetUp, sizeof(AdjustPos_Params.offsetUp), &offsetUp, sizeof(offsetUp));
	memcpy_s(&AdjustPos_Params.offsetDown, sizeof(AdjustPos_Params.offsetDown), &offsetDown, sizeof(offsetDown));

	this->ProcessEvent(uFnAdjustPos, &AdjustPos_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.RVNBlinkEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13390])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::RVNBlinkEffect(int32_t Player)
{
	static UFunction* uFnRVNBlinkEffect = nullptr;

	if (!uFnRVNBlinkEffect)
	{
		uFnRVNBlinkEffect = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.RVNBlinkEffect");
	}

	UREDGfxMovieManager_BattleHUD_execRVNBlinkEffect_Params RVNBlinkEffect_Params;
	memset(&RVNBlinkEffect_Params, 0, sizeof(RVNBlinkEffect_Params));
	memcpy_s(&RVNBlinkEffect_Params.Player, sizeof(RVNBlinkEffect_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnRVNBlinkEffect, &RVNBlinkEffect_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.RVNRiseEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13391])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::RVNRiseEffect(int32_t Player)
{
	static UFunction* uFnRVNRiseEffect = nullptr;

	if (!uFnRVNRiseEffect)
	{
		uFnRVNRiseEffect = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.RVNRiseEffect");
	}

	UREDGfxMovieManager_BattleHUD_execRVNRiseEffect_Params RVNRiseEffect_Params;
	memset(&RVNRiseEffect_Params, 0, sizeof(RVNRiseEffect_Params));
	memcpy_s(&RVNRiseEffect_Params.Player, sizeof(RVNRiseEffect_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnRVNRiseEffect, &RVNRiseEffect_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.JKOGhostGauge
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13333])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        ColorID                        (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       hide                           (CPF_Parm)
// int32_t                        lv                             (CPF_Parm)
// float                          gauge                          (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::JKOGhostGauge(int32_t Player, int32_t ColorID, int32_t Type, bool disp, bool hide, int32_t lv, float gauge)
{
	static UFunction* uFnJKOGhostGauge = nullptr;

	if (!uFnJKOGhostGauge)
	{
		uFnJKOGhostGauge = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.JKOGhostGauge");
	}

	UREDGfxMovieManager_BattleHUD_execJKOGhostGauge_Params JKOGhostGauge_Params;
	memset(&JKOGhostGauge_Params, 0, sizeof(JKOGhostGauge_Params));
	memcpy_s(&JKOGhostGauge_Params.Player, sizeof(JKOGhostGauge_Params.Player), &Player, sizeof(Player));
	memcpy_s(&JKOGhostGauge_Params.ColorID, sizeof(JKOGhostGauge_Params.ColorID), &ColorID, sizeof(ColorID));
	memcpy_s(&JKOGhostGauge_Params.Type, sizeof(JKOGhostGauge_Params.Type), &Type, sizeof(Type));
	JKOGhostGauge_Params.disp = disp;
	JKOGhostGauge_Params.hide = hide;
	memcpy_s(&JKOGhostGauge_Params.lv, sizeof(JKOGhostGauge_Params.lv), &lv, sizeof(lv));
	memcpy_s(&JKOGhostGauge_Params.gauge, sizeof(JKOGhostGauge_Params.gauge), &gauge, sizeof(gauge));

	this->ProcessEvent(uFnJKOGhostGauge, &JKOGhostGauge_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.BurstKakuseiEff
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13230])
// Parameter Info:
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::BurstKakuseiEff(int32_t Dir)
{
	static UFunction* uFnBurstKakuseiEff = nullptr;

	if (!uFnBurstKakuseiEff)
	{
		uFnBurstKakuseiEff = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.BurstKakuseiEff");
	}

	UREDGfxMovieManager_BattleHUD_execBurstKakuseiEff_Params BurstKakuseiEff_Params;
	memset(&BurstKakuseiEff_Params, 0, sizeof(BurstKakuseiEff_Params));
	memcpy_s(&BurstKakuseiEff_Params.Dir, sizeof(BurstKakuseiEff_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnBurstKakuseiEff, &BurstKakuseiEff_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.BurstShake
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13231])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::BurstShake(int32_t Player)
{
	static UFunction* uFnBurstShake = nullptr;

	if (!uFnBurstShake)
	{
		uFnBurstShake = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.BurstShake");
	}

	UREDGfxMovieManager_BattleHUD_execBurstShake_Params BurstShake_Params;
	memset(&BurstShake_Params, 0, sizeof(BurstShake_Params));
	memcpy_s(&BurstShake_Params.Player, sizeof(BurstShake_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnBurstShake, &BurstShake_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.BurstHeal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13229])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::BurstHeal(int32_t Player)
{
	static UFunction* uFnBurstHeal = nullptr;

	if (!uFnBurstHeal)
	{
		uFnBurstHeal = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.BurstHeal");
	}

	UREDGfxMovieManager_BattleHUD_execBurstHeal_Params BurstHeal_Params;
	memset(&BurstHeal_Params, 0, sizeof(BurstHeal_Params));
	memcpy_s(&BurstHeal_Params.Player, sizeof(BurstHeal_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnBurstHeal, &BurstHeal_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetBurstKakusei
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13400])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetBurstKakusei(int32_t Player, bool flag)
{
	static UFunction* uFnSetBurstKakusei = nullptr;

	if (!uFnSetBurstKakusei)
	{
		uFnSetBurstKakusei = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetBurstKakusei");
	}

	UREDGfxMovieManager_BattleHUD_execSetBurstKakusei_Params SetBurstKakusei_Params;
	memset(&SetBurstKakusei_Params, 0, sizeof(SetBurstKakusei_Params));
	memcpy_s(&SetBurstKakusei_Params.Player, sizeof(SetBurstKakusei_Params.Player), &Player, sizeof(Player));
	SetBurstKakusei_Params.flag = flag;

	this->ProcessEvent(uFnSetBurstKakusei, &SetBurstKakusei_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetStylishMode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13424])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetStylishMode(int32_t Player, bool flag)
{
	static UFunction* uFnSetStylishMode = nullptr;

	if (!uFnSetStylishMode)
	{
		uFnSetStylishMode = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetStylishMode");
	}

	UREDGfxMovieManager_BattleHUD_execSetStylishMode_Params SetStylishMode_Params;
	memset(&SetStylishMode_Params, 0, sizeof(SetStylishMode_Params));
	memcpy_s(&SetStylishMode_Params.Player, sizeof(SetStylishMode_Params.Player), &Player, sizeof(Player));
	SetStylishMode_Params.flag = flag;

	this->ProcessEvent(uFnSetStylishMode, &SetStylishMode_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateSpectator
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13489])
// Parameter Info:
// int32_t                        Slot                           (CPF_Parm)
// uint32_t                       isHeadSet                      (CPF_Parm)
// uint32_t                       isSpeak                        (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateSpectator(int32_t Slot, bool isHeadSet, bool isSpeak)
{
	static UFunction* uFnUpdateSpectator = nullptr;

	if (!uFnUpdateSpectator)
	{
		uFnUpdateSpectator = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateSpectator");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateSpectator_Params UpdateSpectator_Params;
	memset(&UpdateSpectator_Params, 0, sizeof(UpdateSpectator_Params));
	memcpy_s(&UpdateSpectator_Params.Slot, sizeof(UpdateSpectator_Params.Slot), &Slot, sizeof(Slot));
	UpdateSpectator_Params.isHeadSet = isHeadSet;
	UpdateSpectator_Params.isSpeak = isSpeak;

	this->ProcessEvent(uFnUpdateSpectator, &UpdateSpectator_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetSpectator
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13421])
// Parameter Info:
// int32_t                        Slot                           (CPF_Parm)
// int32_t                        colorSlot                      (CPF_Parm)
// uint32_t                       isIn                           (CPF_Parm)
// class FString                  OnlineID                       (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_BattleHUD::SetSpectator(int32_t Slot, int32_t colorSlot, bool isIn, const class FString& OnlineID)
{
	static UFunction* uFnSetSpectator = nullptr;

	if (!uFnSetSpectator)
	{
		uFnSetSpectator = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetSpectator");
	}

	UREDGfxMovieManager_BattleHUD_execSetSpectator_Params SetSpectator_Params;
	memset(&SetSpectator_Params, 0, sizeof(SetSpectator_Params));
	memcpy_s(&SetSpectator_Params.Slot, sizeof(SetSpectator_Params.Slot), &Slot, sizeof(Slot));
	memcpy_s(&SetSpectator_Params.colorSlot, sizeof(SetSpectator_Params.colorSlot), &colorSlot, sizeof(colorSlot));
	SetSpectator_Params.isIn = isIn;
	memcpy_s(&SetSpectator_Params.OnlineID, sizeof(SetSpectator_Params.OnlineID), &OnlineID, sizeof(OnlineID));

	this->ProcessEvent(uFnSetSpectator, &SetSpectator_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetSpectatorDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13422])
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetSpectatorDisp(bool disp)
{
	static UFunction* uFnSetSpectatorDisp = nullptr;

	if (!uFnSetSpectatorDisp)
	{
		uFnSetSpectatorDisp = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetSpectatorDisp");
	}

	UREDGfxMovieManager_BattleHUD_execSetSpectatorDisp_Params SetSpectatorDisp_Params;
	memset(&SetSpectatorDisp_Params, 0, sizeof(SetSpectatorDisp_Params));
	SetSpectatorDisp_Params.disp = disp;

	this->ProcessEvent(uFnSetSpectatorDisp, &SetSpectatorDisp_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateMOM
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13483])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// float                          armorGauge                     (CPF_Parm)
// int32_t                        armorState                     (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateMOM(int32_t Player, float armorGauge, int32_t armorState)
{
	static UFunction* uFnUpdateMOM = nullptr;

	if (!uFnUpdateMOM)
	{
		uFnUpdateMOM = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateMOM");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateMOM_Params UpdateMOM_Params;
	memset(&UpdateMOM_Params, 0, sizeof(UpdateMOM_Params));
	memcpy_s(&UpdateMOM_Params.Player, sizeof(UpdateMOM_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateMOM_Params.armorGauge, sizeof(UpdateMOM_Params.armorGauge), &armorGauge, sizeof(armorGauge));
	memcpy_s(&UpdateMOM_Params.armorState, sizeof(UpdateMOM_Params.armorState), &armorState, sizeof(armorState));

	this->ProcessEvent(uFnUpdateMOM, &UpdateMOM_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetTensGaugeColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13425])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        MulColor                       (CPF_Parm)
// int32_t                        AddColor                       (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetTensGaugeColor(int32_t Player, int32_t MulColor, int32_t AddColor)
{
	static UFunction* uFnSetTensGaugeColor = nullptr;

	if (!uFnSetTensGaugeColor)
	{
		uFnSetTensGaugeColor = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetTensGaugeColor");
	}

	UREDGfxMovieManager_BattleHUD_execSetTensGaugeColor_Params SetTensGaugeColor_Params;
	memset(&SetTensGaugeColor_Params, 0, sizeof(SetTensGaugeColor_Params));
	memcpy_s(&SetTensGaugeColor_Params.Player, sizeof(SetTensGaugeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetTensGaugeColor_Params.MulColor, sizeof(SetTensGaugeColor_Params.MulColor), &MulColor, sizeof(MulColor));
	memcpy_s(&SetTensGaugeColor_Params.AddColor, sizeof(SetTensGaugeColor_Params.AddColor), &AddColor, sizeof(AddColor));

	this->ProcessEvent(uFnSetTensGaugeColor, &SetTensGaugeColor_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetHPGaugeColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13411])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        MulColor                       (CPF_Parm)
// int32_t                        AddColor                       (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetHPGaugeColor(int32_t Player, int32_t MulColor, int32_t AddColor)
{
	static UFunction* uFnSetHPGaugeColor = nullptr;

	if (!uFnSetHPGaugeColor)
	{
		uFnSetHPGaugeColor = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetHPGaugeColor");
	}

	UREDGfxMovieManager_BattleHUD_execSetHPGaugeColor_Params SetHPGaugeColor_Params;
	memset(&SetHPGaugeColor_Params, 0, sizeof(SetHPGaugeColor_Params));
	memcpy_s(&SetHPGaugeColor_Params.Player, sizeof(SetHPGaugeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetHPGaugeColor_Params.MulColor, sizeof(SetHPGaugeColor_Params.MulColor), &MulColor, sizeof(MulColor));
	memcpy_s(&SetHPGaugeColor_Params.AddColor, sizeof(SetHPGaugeColor_Params.AddColor), &AddColor, sizeof(AddColor));

	this->ProcessEvent(uFnSetHPGaugeColor, &SetHPGaugeColor_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetVersionStr
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13430])
// Parameter Info:
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_BattleHUD::SetVersionStr(const class FString& Str)
{
	static UFunction* uFnSetVersionStr = nullptr;

	if (!uFnSetVersionStr)
	{
		uFnSetVersionStr = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetVersionStr");
	}

	UREDGfxMovieManager_BattleHUD_execSetVersionStr_Params SetVersionStr_Params;
	memset(&SetVersionStr_Params, 0, sizeof(SetVersionStr_Params));
	memcpy_s(&SetVersionStr_Params.Str, sizeof(SetVersionStr_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnSetVersionStr, &SetVersionStr_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetRecord
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13236])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_BattleHUD::CardInfo_SetRecord(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetRecord = nullptr;

	if (!uFnCardInfo_SetRecord)
	{
		uFnCardInfo_SetRecord = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetRecord");
	}

	UREDGfxMovieManager_BattleHUD_execCardInfo_SetRecord_Params CardInfo_SetRecord_Params;
	memset(&CardInfo_SetRecord_Params, 0, sizeof(CardInfo_SetRecord_Params));
	memcpy_s(&CardInfo_SetRecord_Params.Player, sizeof(CardInfo_SetRecord_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetRecord_Params.Str, sizeof(CardInfo_SetRecord_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetRecord, &CardInfo_SetRecord_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13234])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::CardInfo_SetIcon(int32_t Player, bool disp)
{
	static UFunction* uFnCardInfo_SetIcon = nullptr;

	if (!uFnCardInfo_SetIcon)
	{
		uFnCardInfo_SetIcon = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetIcon");
	}

	UREDGfxMovieManager_BattleHUD_execCardInfo_SetIcon_Params CardInfo_SetIcon_Params;
	memset(&CardInfo_SetIcon_Params, 0, sizeof(CardInfo_SetIcon_Params));
	memcpy_s(&CardInfo_SetIcon_Params.Player, sizeof(CardInfo_SetIcon_Params.Player), &Player, sizeof(Player));
	CardInfo_SetIcon_Params.disp = disp;

	this->ProcessEvent(uFnCardInfo_SetIcon, &CardInfo_SetIcon_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetTitle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13237])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_BattleHUD::CardInfo_SetTitle(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetTitle = nullptr;

	if (!uFnCardInfo_SetTitle)
	{
		uFnCardInfo_SetTitle = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetTitle");
	}

	UREDGfxMovieManager_BattleHUD_execCardInfo_SetTitle_Params CardInfo_SetTitle_Params;
	memset(&CardInfo_SetTitle_Params, 0, sizeof(CardInfo_SetTitle_Params));
	memcpy_s(&CardInfo_SetTitle_Params.Player, sizeof(CardInfo_SetTitle_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetTitle_Params.Str, sizeof(CardInfo_SetTitle_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetTitle, &CardInfo_SetTitle_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetGrade
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13233])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_BattleHUD::CardInfo_SetGrade(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetGrade = nullptr;

	if (!uFnCardInfo_SetGrade)
	{
		uFnCardInfo_SetGrade = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetGrade");
	}

	UREDGfxMovieManager_BattleHUD_execCardInfo_SetGrade_Params CardInfo_SetGrade_Params;
	memset(&CardInfo_SetGrade_Params, 0, sizeof(CardInfo_SetGrade_Params));
	memcpy_s(&CardInfo_SetGrade_Params.Player, sizeof(CardInfo_SetGrade_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetGrade_Params.Str, sizeof(CardInfo_SetGrade_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetGrade, &CardInfo_SetGrade_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetPlayerName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13235])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_BattleHUD::CardInfo_SetPlayerName(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetPlayerName = nullptr;

	if (!uFnCardInfo_SetPlayerName)
	{
		uFnCardInfo_SetPlayerName = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.CardInfo_SetPlayerName");
	}

	UREDGfxMovieManager_BattleHUD_execCardInfo_SetPlayerName_Params CardInfo_SetPlayerName_Params;
	memset(&CardInfo_SetPlayerName_Params, 0, sizeof(CardInfo_SetPlayerName_Params));
	memcpy_s(&CardInfo_SetPlayerName_Params.Player, sizeof(CardInfo_SetPlayerName_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetPlayerName_Params.Str, sizeof(CardInfo_SetPlayerName_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetPlayerName, &CardInfo_SetPlayerName_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetHandicap
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13410])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetHandicap(int32_t Player, bool flag, int32_t val)
{
	static UFunction* uFnSetHandicap = nullptr;

	if (!uFnSetHandicap)
	{
		uFnSetHandicap = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetHandicap");
	}

	UREDGfxMovieManager_BattleHUD_execSetHandicap_Params SetHandicap_Params;
	memset(&SetHandicap_Params, 0, sizeof(SetHandicap_Params));
	memcpy_s(&SetHandicap_Params.Player, sizeof(SetHandicap_Params.Player), &Player, sizeof(Player));
	SetHandicap_Params.flag = flag;
	memcpy_s(&SetHandicap_Params.val, sizeof(SetHandicap_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetHandicap, &SetHandicap_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateSpecialCameraFlag
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13488])
// Parameter Info:
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateSpecialCameraFlag(bool flag)
{
	static UFunction* uFnUpdateSpecialCameraFlag = nullptr;

	if (!uFnUpdateSpecialCameraFlag)
	{
		uFnUpdateSpecialCameraFlag = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateSpecialCameraFlag");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateSpecialCameraFlag_Params UpdateSpecialCameraFlag_Params;
	memset(&UpdateSpecialCameraFlag_Params, 0, sizeof(UpdateSpecialCameraFlag_Params));
	UpdateSpecialCameraFlag_Params.flag = flag;

	this->ProcessEvent(uFnUpdateSpecialCameraFlag, &UpdateSpecialCameraFlag_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateExGauge
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13479])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Id                             (CPF_Parm)
// int32_t                        Icon                           (CPF_Parm)
// int32_t                        val                            (CPF_Parm)
// int32_t                        MaxVal                         (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)
// int32_t                        Mode                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateExGauge(int32_t Player, int32_t Id, int32_t Icon, int32_t val, int32_t MaxVal, int32_t Col, int32_t Mode)
{
	static UFunction* uFnUpdateExGauge = nullptr;

	if (!uFnUpdateExGauge)
	{
		uFnUpdateExGauge = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateExGauge");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateExGauge_Params UpdateExGauge_Params;
	memset(&UpdateExGauge_Params, 0, sizeof(UpdateExGauge_Params));
	memcpy_s(&UpdateExGauge_Params.Player, sizeof(UpdateExGauge_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateExGauge_Params.Id, sizeof(UpdateExGauge_Params.Id), &Id, sizeof(Id));
	memcpy_s(&UpdateExGauge_Params.Icon, sizeof(UpdateExGauge_Params.Icon), &Icon, sizeof(Icon));
	memcpy_s(&UpdateExGauge_Params.val, sizeof(UpdateExGauge_Params.val), &val, sizeof(val));
	memcpy_s(&UpdateExGauge_Params.MaxVal, sizeof(UpdateExGauge_Params.MaxVal), &MaxVal, sizeof(MaxVal));
	memcpy_s(&UpdateExGauge_Params.Col, sizeof(UpdateExGauge_Params.Col), &Col, sizeof(Col));
	memcpy_s(&UpdateExGauge_Params.Mode, sizeof(UpdateExGauge_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnUpdateExGauge, &UpdateExGauge_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetExGaugeActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13406])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Id                             (CPF_Parm)
// uint32_t                       Active                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetExGaugeActive(int32_t Player, int32_t Id, bool Active)
{
	static UFunction* uFnSetExGaugeActive = nullptr;

	if (!uFnSetExGaugeActive)
	{
		uFnSetExGaugeActive = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetExGaugeActive");
	}

	UREDGfxMovieManager_BattleHUD_execSetExGaugeActive_Params SetExGaugeActive_Params;
	memset(&SetExGaugeActive_Params, 0, sizeof(SetExGaugeActive_Params));
	memcpy_s(&SetExGaugeActive_Params.Player, sizeof(SetExGaugeActive_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetExGaugeActive_Params.Id, sizeof(SetExGaugeActive_Params.Id), &Id, sizeof(Id));
	SetExGaugeActive_Params.Active = Active;

	this->ProcessEvent(uFnSetExGaugeActive, &SetExGaugeActive_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.ShowExclamation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13437])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Type                           (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::ShowExclamation(int32_t Player, const class FString& Type, int32_t X, int32_t Y, int32_t Dir)
{
	static UFunction* uFnShowExclamation = nullptr;

	if (!uFnShowExclamation)
	{
		uFnShowExclamation = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.ShowExclamation");
	}

	UREDGfxMovieManager_BattleHUD_execShowExclamation_Params ShowExclamation_Params;
	memset(&ShowExclamation_Params, 0, sizeof(ShowExclamation_Params));
	memcpy_s(&ShowExclamation_Params.Player, sizeof(ShowExclamation_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ShowExclamation_Params.Type, sizeof(ShowExclamation_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ShowExclamation_Params.X, sizeof(ShowExclamation_Params.X), &X, sizeof(X));
	memcpy_s(&ShowExclamation_Params.Y, sizeof(ShowExclamation_Params.Y), &Y, sizeof(Y));
	memcpy_s(&ShowExclamation_Params.Dir, sizeof(ShowExclamation_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnShowExclamation, &ShowExclamation_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetShinSousaiDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13420])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetShinSousaiDamage(int32_t Player, int32_t frame)
{
	static UFunction* uFnSetShinSousaiDamage = nullptr;

	if (!uFnSetShinSousaiDamage)
	{
		uFnSetShinSousaiDamage = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetShinSousaiDamage");
	}

	UREDGfxMovieManager_BattleHUD_execSetShinSousaiDamage_Params SetShinSousaiDamage_Params;
	memset(&SetShinSousaiDamage_Params, 0, sizeof(SetShinSousaiDamage_Params));
	memcpy_s(&SetShinSousaiDamage_Params.Player, sizeof(SetShinSousaiDamage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetShinSousaiDamage_Params.frame, sizeof(SetShinSousaiDamage_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetShinSousaiDamage, &SetShinSousaiDamage_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateShinSousaiTimer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13487])
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateShinSousaiTimer(int32_t Time)
{
	static UFunction* uFnUpdateShinSousaiTimer = nullptr;

	if (!uFnUpdateShinSousaiTimer)
	{
		uFnUpdateShinSousaiTimer = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateShinSousaiTimer");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateShinSousaiTimer_Params UpdateShinSousaiTimer_Params;
	memset(&UpdateShinSousaiTimer_Params, 0, sizeof(UpdateShinSousaiTimer_Params));
	memcpy_s(&UpdateShinSousaiTimer_Params.Time, sizeof(UpdateShinSousaiTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateShinSousaiTimer, &UpdateShinSousaiTimer_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetButtonRendaIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13401])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Time                           (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       dispGauge                      (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetButtonRendaIcon(int32_t Player, int32_t Time, int32_t X, int32_t Y, bool dispGauge)
{
	static UFunction* uFnSetButtonRendaIcon = nullptr;

	if (!uFnSetButtonRendaIcon)
	{
		uFnSetButtonRendaIcon = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetButtonRendaIcon");
	}

	UREDGfxMovieManager_BattleHUD_execSetButtonRendaIcon_Params SetButtonRendaIcon_Params;
	memset(&SetButtonRendaIcon_Params, 0, sizeof(SetButtonRendaIcon_Params));
	memcpy_s(&SetButtonRendaIcon_Params.Player, sizeof(SetButtonRendaIcon_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetButtonRendaIcon_Params.Time, sizeof(SetButtonRendaIcon_Params.Time), &Time, sizeof(Time));
	memcpy_s(&SetButtonRendaIcon_Params.X, sizeof(SetButtonRendaIcon_Params.X), &X, sizeof(X));
	memcpy_s(&SetButtonRendaIcon_Params.Y, sizeof(SetButtonRendaIcon_Params.Y), &Y, sizeof(Y));
	SetButtonRendaIcon_Params.dispGauge = dispGauge;

	this->ProcessEvent(uFnSetButtonRendaIcon, &SetButtonRendaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetLeverGachaIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13413])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Time                           (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       dispGauge                      (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetLeverGachaIcon(int32_t Player, int32_t Time, int32_t X, int32_t Y, bool dispGauge)
{
	static UFunction* uFnSetLeverGachaIcon = nullptr;

	if (!uFnSetLeverGachaIcon)
	{
		uFnSetLeverGachaIcon = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetLeverGachaIcon");
	}

	UREDGfxMovieManager_BattleHUD_execSetLeverGachaIcon_Params SetLeverGachaIcon_Params;
	memset(&SetLeverGachaIcon_Params, 0, sizeof(SetLeverGachaIcon_Params));
	memcpy_s(&SetLeverGachaIcon_Params.Player, sizeof(SetLeverGachaIcon_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetLeverGachaIcon_Params.Time, sizeof(SetLeverGachaIcon_Params.Time), &Time, sizeof(Time));
	memcpy_s(&SetLeverGachaIcon_Params.X, sizeof(SetLeverGachaIcon_Params.X), &X, sizeof(X));
	memcpy_s(&SetLeverGachaIcon_Params.Y, sizeof(SetLeverGachaIcon_Params.Y), &Y, sizeof(Y));
	SetLeverGachaIcon_Params.dispGauge = dispGauge;

	this->ProcessEvent(uFnSetLeverGachaIcon, &SetLeverGachaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetOffscreenCharaIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13416])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetOffscreenCharaIcon(int32_t Player, bool disp, int32_t PosX, int32_t Dir)
{
	static UFunction* uFnSetOffscreenCharaIcon = nullptr;

	if (!uFnSetOffscreenCharaIcon)
	{
		uFnSetOffscreenCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetOffscreenCharaIcon");
	}

	UREDGfxMovieManager_BattleHUD_execSetOffscreenCharaIcon_Params SetOffscreenCharaIcon_Params;
	memset(&SetOffscreenCharaIcon_Params, 0, sizeof(SetOffscreenCharaIcon_Params));
	memcpy_s(&SetOffscreenCharaIcon_Params.Player, sizeof(SetOffscreenCharaIcon_Params.Player), &Player, sizeof(Player));
	SetOffscreenCharaIcon_Params.disp = disp;
	memcpy_s(&SetOffscreenCharaIcon_Params.PosX, sizeof(SetOffscreenCharaIcon_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&SetOffscreenCharaIcon_Params.Dir, sizeof(SetOffscreenCharaIcon_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnSetOffscreenCharaIcon, &SetOffscreenCharaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.ReqNegativePenalty
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13371])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::ReqNegativePenalty(int32_t Player)
{
	static UFunction* uFnReqNegativePenalty = nullptr;

	if (!uFnReqNegativePenalty)
	{
		uFnReqNegativePenalty = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.ReqNegativePenalty");
	}

	UREDGfxMovieManager_BattleHUD_execReqNegativePenalty_Params ReqNegativePenalty_Params;
	memset(&ReqNegativePenalty_Params, 0, sizeof(ReqNegativePenalty_Params));
	memcpy_s(&ReqNegativePenalty_Params.Player, sizeof(ReqNegativePenalty_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnReqNegativePenalty, &ReqNegativePenalty_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetNegativeDangerDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13415])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       level2                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetNegativeDangerDisp(int32_t Player, bool disp, bool level2)
{
	static UFunction* uFnSetNegativeDangerDisp = nullptr;

	if (!uFnSetNegativeDangerDisp)
	{
		uFnSetNegativeDangerDisp = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetNegativeDangerDisp");
	}

	UREDGfxMovieManager_BattleHUD_execSetNegativeDangerDisp_Params SetNegativeDangerDisp_Params;
	memset(&SetNegativeDangerDisp_Params, 0, sizeof(SetNegativeDangerDisp_Params));
	memcpy_s(&SetNegativeDangerDisp_Params.Player, sizeof(SetNegativeDangerDisp_Params.Player), &Player, sizeof(Player));
	SetNegativeDangerDisp_Params.disp = disp;
	SetNegativeDangerDisp_Params.level2 = level2;

	this->ProcessEvent(uFnSetNegativeDangerDisp, &SetNegativeDangerDisp_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateTensionBalance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13491])
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateTensionBalance(float val1, float val2)
{
	static UFunction* uFnUpdateTensionBalance = nullptr;

	if (!uFnUpdateTensionBalance)
	{
		uFnUpdateTensionBalance = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateTensionBalance");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateTensionBalance_Params UpdateTensionBalance_Params;
	memset(&UpdateTensionBalance_Params, 0, sizeof(UpdateTensionBalance_Params));
	memcpy_s(&UpdateTensionBalance_Params.val1, sizeof(UpdateTensionBalance_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateTensionBalance_Params.val2, sizeof(UpdateTensionBalance_Params.val2), &val2, sizeof(val2));

	this->ProcessEvent(uFnUpdateTensionBalance, &UpdateTensionBalance_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetCounterHitByGuardBalance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13402])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       isCounterHit                   (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetCounterHitByGuardBalance(int32_t Player, bool isCounterHit)
{
	static UFunction* uFnSetCounterHitByGuardBalance = nullptr;

	if (!uFnSetCounterHitByGuardBalance)
	{
		uFnSetCounterHitByGuardBalance = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetCounterHitByGuardBalance");
	}

	UREDGfxMovieManager_BattleHUD_execSetCounterHitByGuardBalance_Params SetCounterHitByGuardBalance_Params;
	memset(&SetCounterHitByGuardBalance_Params, 0, sizeof(SetCounterHitByGuardBalance_Params));
	memcpy_s(&SetCounterHitByGuardBalance_Params.Player, sizeof(SetCounterHitByGuardBalance_Params.Player), &Player, sizeof(Player));
	SetCounterHitByGuardBalance_Params.isCounterHit = isCounterHit;

	this->ProcessEvent(uFnSetCounterHitByGuardBalance, &SetCounterHitByGuardBalance_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateGuardBalance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13481])
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)
// float                          red1                           (CPF_Parm)
// float                          red2                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateGuardBalance(float val1, float val2, float red1, float red2)
{
	static UFunction* uFnUpdateGuardBalance = nullptr;

	if (!uFnUpdateGuardBalance)
	{
		uFnUpdateGuardBalance = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateGuardBalance");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateGuardBalance_Params UpdateGuardBalance_Params;
	memset(&UpdateGuardBalance_Params, 0, sizeof(UpdateGuardBalance_Params));
	memcpy_s(&UpdateGuardBalance_Params.val1, sizeof(UpdateGuardBalance_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateGuardBalance_Params.val2, sizeof(UpdateGuardBalance_Params.val2), &val2, sizeof(val2));
	memcpy_s(&UpdateGuardBalance_Params.red1, sizeof(UpdateGuardBalance_Params.red1), &red1, sizeof(red1));
	memcpy_s(&UpdateGuardBalance_Params.red2, sizeof(UpdateGuardBalance_Params.red2), &red2, sizeof(red2));

	this->ProcessEvent(uFnUpdateGuardBalance, &UpdateGuardBalance_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.RequestInfoText
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13378])
// Parameter Info:
// int32_t                        TextID                         (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// int32_t                        subID1                         (CPF_Parm)
// int32_t                        subID2                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::RequestInfoText(int32_t TextID, int32_t Player, int32_t subID1, int32_t subID2)
{
	static UFunction* uFnRequestInfoText = nullptr;

	if (!uFnRequestInfoText)
	{
		uFnRequestInfoText = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.RequestInfoText");
	}

	UREDGfxMovieManager_BattleHUD_execRequestInfoText_Params RequestInfoText_Params;
	memset(&RequestInfoText_Params, 0, sizeof(RequestInfoText_Params));
	memcpy_s(&RequestInfoText_Params.TextID, sizeof(RequestInfoText_Params.TextID), &TextID, sizeof(TextID));
	memcpy_s(&RequestInfoText_Params.Player, sizeof(RequestInfoText_Params.Player), &Player, sizeof(Player));
	memcpy_s(&RequestInfoText_Params.subID1, sizeof(RequestInfoText_Params.subID1), &subID1, sizeof(subID1));
	memcpy_s(&RequestInfoText_Params.subID2, sizeof(RequestInfoText_Params.subID2), &subID2, sizeof(subID2));

	this->ProcessEvent(uFnRequestInfoText, &RequestInfoText_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.DispBurstSealIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13258])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       Input                          (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::DispBurstSealIcon(int32_t Player, bool disp, bool Input)
{
	static UFunction* uFnDispBurstSealIcon = nullptr;

	if (!uFnDispBurstSealIcon)
	{
		uFnDispBurstSealIcon = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.DispBurstSealIcon");
	}

	UREDGfxMovieManager_BattleHUD_execDispBurstSealIcon_Params DispBurstSealIcon_Params;
	memset(&DispBurstSealIcon_Params, 0, sizeof(DispBurstSealIcon_Params));
	memcpy_s(&DispBurstSealIcon_Params.Player, sizeof(DispBurstSealIcon_Params.Player), &Player, sizeof(Player));
	DispBurstSealIcon_Params.disp = disp;
	DispBurstSealIcon_Params.Input = Input;

	this->ProcessEvent(uFnDispBurstSealIcon, &DispBurstSealIcon_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateRoundWin
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13486])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        WinCount                       (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateRoundWin(int32_t Player, int32_t WinCount)
{
	static UFunction* uFnUpdateRoundWin = nullptr;

	if (!uFnUpdateRoundWin)
	{
		uFnUpdateRoundWin = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateRoundWin");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateRoundWin_Params UpdateRoundWin_Params;
	memset(&UpdateRoundWin_Params, 0, sizeof(UpdateRoundWin_Params));
	memcpy_s(&UpdateRoundWin_Params.Player, sizeof(UpdateRoundWin_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateRoundWin_Params.WinCount, sizeof(UpdateRoundWin_Params.WinCount), &WinCount, sizeof(WinCount));

	this->ProcessEvent(uFnUpdateRoundWin, &UpdateRoundWin_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetupRoundNum
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13429])
// Parameter Info:
// int32_t                        round1                         (CPF_Parm)
// int32_t                        round2                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::SetupRoundNum(int32_t round1, int32_t round2)
{
	static UFunction* uFnSetupRoundNum = nullptr;

	if (!uFnSetupRoundNum)
	{
		uFnSetupRoundNum = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetupRoundNum");
	}

	UREDGfxMovieManager_BattleHUD_execSetupRoundNum_Params SetupRoundNum_Params;
	memset(&SetupRoundNum_Params, 0, sizeof(SetupRoundNum_Params));
	memcpy_s(&SetupRoundNum_Params.round1, sizeof(SetupRoundNum_Params.round1), &round1, sizeof(round1));
	memcpy_s(&SetupRoundNum_Params.round2, sizeof(SetupRoundNum_Params.round2), &round2, sizeof(round2));

	this->ProcessEvent(uFnSetupRoundNum, &SetupRoundNum_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.HideCombo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13304])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::HideCombo(int32_t Player)
{
	static UFunction* uFnHideCombo = nullptr;

	if (!uFnHideCombo)
	{
		uFnHideCombo = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.HideCombo");
	}

	UREDGfxMovieManager_BattleHUD_execHideCombo_Params HideCombo_Params;
	memset(&HideCombo_Params, 0, sizeof(HideCombo_Params));
	memcpy_s(&HideCombo_Params.Player, sizeof(HideCombo_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnHideCombo, &HideCombo_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.ShowCombo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13436])
// Parameter Info:
// int32_t                        combo                          (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       isImperfect                    (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm)
// uint32_t                       damagedisp                     (CPF_Parm)
// int32_t                        comp0                          (CPF_Parm)
// int32_t                        comp1                          (CPF_Parm)
// int32_t                        comp2                          (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::ShowCombo(int32_t combo, int32_t Player, bool isImperfect, int32_t Damage, bool damagedisp, int32_t comp0, int32_t comp1, int32_t comp2)
{
	static UFunction* uFnShowCombo = nullptr;

	if (!uFnShowCombo)
	{
		uFnShowCombo = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.ShowCombo");
	}

	UREDGfxMovieManager_BattleHUD_execShowCombo_Params ShowCombo_Params;
	memset(&ShowCombo_Params, 0, sizeof(ShowCombo_Params));
	memcpy_s(&ShowCombo_Params.combo, sizeof(ShowCombo_Params.combo), &combo, sizeof(combo));
	memcpy_s(&ShowCombo_Params.Player, sizeof(ShowCombo_Params.Player), &Player, sizeof(Player));
	ShowCombo_Params.isImperfect = isImperfect;
	memcpy_s(&ShowCombo_Params.Damage, sizeof(ShowCombo_Params.Damage), &Damage, sizeof(Damage));
	ShowCombo_Params.damagedisp = damagedisp;
	memcpy_s(&ShowCombo_Params.comp0, sizeof(ShowCombo_Params.comp0), &comp0, sizeof(comp0));
	memcpy_s(&ShowCombo_Params.comp1, sizeof(ShowCombo_Params.comp1), &comp1, sizeof(comp1));
	memcpy_s(&ShowCombo_Params.comp2, sizeof(ShowCombo_Params.comp2), &comp2, sizeof(comp2));

	this->ProcessEvent(uFnShowCombo, &ShowCombo_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateTimer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13492])
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateTimer(int32_t Time)
{
	static UFunction* uFnUpdateTimer = nullptr;

	if (!uFnUpdateTimer)
	{
		uFnUpdateTimer = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateTimer");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateTimer_Params UpdateTimer_Params;
	memset(&UpdateTimer_Params, 0, sizeof(UpdateTimer_Params));
	memcpy_s(&UpdateTimer_Params.Time, sizeof(UpdateTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateTimer, &UpdateTimer_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateBurst
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13477])
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateBurst(float val1, float val2)
{
	static UFunction* uFnUpdateBurst = nullptr;

	if (!uFnUpdateBurst)
	{
		uFnUpdateBurst = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateBurst");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateBurst_Params UpdateBurst_Params;
	memset(&UpdateBurst_Params, 0, sizeof(UpdateBurst_Params));
	memcpy_s(&UpdateBurst_Params.val1, sizeof(UpdateBurst_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateBurst_Params.val2, sizeof(UpdateBurst_Params.val2), &val2, sizeof(val2));

	this->ProcessEvent(uFnUpdateBurst, &UpdateBurst_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.SetTensionState
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13426])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  State                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_BattleHUD::SetTensionState(int32_t Player, const class FString& State)
{
	static UFunction* uFnSetTensionState = nullptr;

	if (!uFnSetTensionState)
	{
		uFnSetTensionState = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.SetTensionState");
	}

	UREDGfxMovieManager_BattleHUD_execSetTensionState_Params SetTensionState_Params;
	memset(&SetTensionState_Params, 0, sizeof(SetTensionState_Params));
	memcpy_s(&SetTensionState_Params.Player, sizeof(SetTensionState_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetTensionState_Params.State, sizeof(SetTensionState_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnSetTensionState, &SetTensionState_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateTension
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13490])
// Parameter Info:
// float                          tens1                          (CPF_Parm)
// int32_t                        tescol1                        (CPF_Parm)
// float                          tens2                          (CPF_Parm)
// int32_t                        tescol2                        (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateTension(float tens1, int32_t tescol1, float tens2, int32_t tescol2)
{
	static UFunction* uFnUpdateTension = nullptr;

	if (!uFnUpdateTension)
	{
		uFnUpdateTension = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateTension");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateTension_Params UpdateTension_Params;
	memset(&UpdateTension_Params, 0, sizeof(UpdateTension_Params));
	memcpy_s(&UpdateTension_Params.tens1, sizeof(UpdateTension_Params.tens1), &tens1, sizeof(tens1));
	memcpy_s(&UpdateTension_Params.tescol1, sizeof(UpdateTension_Params.tescol1), &tescol1, sizeof(tescol1));
	memcpy_s(&UpdateTension_Params.tens2, sizeof(UpdateTension_Params.tens2), &tens2, sizeof(tens2));
	memcpy_s(&UpdateTension_Params.tescol2, sizeof(UpdateTension_Params.tescol2), &tescol2, sizeof(tescol2));

	this->ProcessEvent(uFnUpdateTension, &UpdateTension_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.UpdateHP
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13482])
// Parameter Info:
// float                          hp1                            (CPF_Parm)
// float                          hp2                            (CPF_Parm)
// float                          red1                           (CPF_Parm)
// float                          red2                           (CPF_Parm)
// float                          white1                         (CPF_Parm)
// float                          white2                         (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::UpdateHP(float hp1, float hp2, float red1, float red2, float white1, float white2)
{
	static UFunction* uFnUpdateHP = nullptr;

	if (!uFnUpdateHP)
	{
		uFnUpdateHP = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.UpdateHP");
	}

	UREDGfxMovieManager_BattleHUD_execUpdateHP_Params UpdateHP_Params;
	memset(&UpdateHP_Params, 0, sizeof(UpdateHP_Params));
	memcpy_s(&UpdateHP_Params.hp1, sizeof(UpdateHP_Params.hp1), &hp1, sizeof(hp1));
	memcpy_s(&UpdateHP_Params.hp2, sizeof(UpdateHP_Params.hp2), &hp2, sizeof(hp2));
	memcpy_s(&UpdateHP_Params.red1, sizeof(UpdateHP_Params.red1), &red1, sizeof(red1));
	memcpy_s(&UpdateHP_Params.red2, sizeof(UpdateHP_Params.red2), &red2, sizeof(red2));
	memcpy_s(&UpdateHP_Params.white1, sizeof(UpdateHP_Params.white1), &white1, sizeof(white1));
	memcpy_s(&UpdateHP_Params.white2, sizeof(UpdateHP_Params.white2), &white2, sizeof(white2));

	this->ProcessEvent(uFnUpdateHP, &UpdateHP_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.ResetOnRound
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13384])
// Parameter Info:

void UREDGfxMovieManager_BattleHUD::ResetOnRound()
{
	static UFunction* uFnResetOnRound = nullptr;

	if (!uFnResetOnRound)
	{
		uFnResetOnRound = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.ResetOnRound");
	}

	UREDGfxMovieManager_BattleHUD_execResetOnRound_Params ResetOnRound_Params;
	memset(&ResetOnRound_Params, 0, sizeof(ResetOnRound_Params));

	this->ProcessEvent(uFnResetOnRound, &ResetOnRound_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.AddBattleHUD
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35377])
// Parameter Info:
// class UREDGfxMoviePlayer_BattleHUD* HUD                            (CPF_Parm)

void UREDGfxMovieManager_BattleHUD::AddBattleHUD(class UREDGfxMoviePlayer_BattleHUD* HUD)
{
	static UFunction* uFnAddBattleHUD = nullptr;

	if (!uFnAddBattleHUD)
	{
		uFnAddBattleHUD = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.AddBattleHUD");
	}

	UREDGfxMovieManager_BattleHUD_execAddBattleHUD_Params AddBattleHUD_Params;
	memset(&AddBattleHUD_Params, 0, sizeof(AddBattleHUD_Params));
	AddBattleHUD_Params.HUD = HUD;

	this->ProcessEvent(uFnAddBattleHUD, &AddBattleHUD_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_BattleHUD.InitializeParam
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_BattleHUD::InitializeParam()
{
	static UFunction* uFnInitializeParam = nullptr;

	if (!uFnInitializeParam)
	{
		uFnInitializeParam = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_BattleHUD.InitializeParam");
	}

	UREDGfxMovieManager_BattleHUD_execInitializeParam_Params InitializeParam_Params;
	memset(&InitializeParam_Params, 0, sizeof(InitializeParam_Params));

	this->ProcessEvent(uFnInitializeParam, &InitializeParam_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsTournamentLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37885])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::IsTournamentLobby()
{
	static UFunction* uFnIsTournamentLobby = nullptr;

	if (!uFnIsTournamentLobby)
	{
		uFnIsTournamentLobby = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsTournamentLobby");
	}

	UREDGfxMovieManager_Network_Base_execIsTournamentLobby_Params IsTournamentLobby_Params;
	memset(&IsTournamentLobby_Params, 0, sizeof(IsTournamentLobby_Params));

	this->ProcessEvent(uFnIsTournamentLobby, &IsTournamentLobby_Params, nullptr);

	return IsTournamentLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsTournamentLeaveLobbyForce
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37884])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  ErrMsgID                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UREDGfxMovieManager_Network_Base::IsTournamentLeaveLobbyForce(class FString& ErrMsgID)
{
	static UFunction* uFnIsTournamentLeaveLobbyForce = nullptr;

	if (!uFnIsTournamentLeaveLobbyForce)
	{
		uFnIsTournamentLeaveLobbyForce = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsTournamentLeaveLobbyForce");
	}

	UREDGfxMovieManager_Network_Base_execIsTournamentLeaveLobbyForce_Params IsTournamentLeaveLobbyForce_Params;
	memset(&IsTournamentLeaveLobbyForce_Params, 0, sizeof(IsTournamentLeaveLobbyForce_Params));
	memcpy_s(&IsTournamentLeaveLobbyForce_Params.ErrMsgID, sizeof(IsTournamentLeaveLobbyForce_Params.ErrMsgID), &ErrMsgID, sizeof(ErrMsgID));

	this->ProcessEvent(uFnIsTournamentLeaveLobbyForce, &IsTournamentLeaveLobbyForce_Params, nullptr);

	memcpy_s(&ErrMsgID, sizeof(ErrMsgID), &IsTournamentLeaveLobbyForce_Params.ErrMsgID, sizeof(IsTournamentLeaveLobbyForce_Params.ErrMsgID));

	return IsTournamentLeaveLobbyForce_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsTournamentGotoRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37883])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::IsTournamentGotoRoom()
{
	static UFunction* uFnIsTournamentGotoRoom = nullptr;

	if (!uFnIsTournamentGotoRoom)
	{
		uFnIsTournamentGotoRoom = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsTournamentGotoRoom");
	}

	UREDGfxMovieManager_Network_Base_execIsTournamentGotoRoom_Params IsTournamentGotoRoom_Params;
	memset(&IsTournamentGotoRoom_Params, 0, sizeof(IsTournamentGotoRoom_Params));

	this->ProcessEvent(uFnIsTournamentGotoRoom, &IsTournamentGotoRoom_Params, nullptr);

	return IsTournamentGotoRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsAsyncLoading
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37599])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::IsAsyncLoading()
{
	static UFunction* uFnIsAsyncLoading = nullptr;

	if (!uFnIsAsyncLoading)
	{
		uFnIsAsyncLoading = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsAsyncLoading");
	}

	UREDGfxMovieManager_Network_Base_execIsAsyncLoading_Params IsAsyncLoading_Params;
	memset(&IsAsyncLoading_Params, 0, sizeof(IsAsyncLoading_Params));

	this->ProcessEvent(uFnIsAsyncLoading, &IsAsyncLoading_Params, nullptr);

	return IsAsyncLoading_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.GetRandomBGM
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13291])
// Parameter Info:
// EUE_BGM_ID                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BGM_ID UREDGfxMovieManager_Network_Base::GetRandomBGM()
{
	static UFunction* uFnGetRandomBGM = nullptr;

	if (!uFnGetRandomBGM)
	{
		uFnGetRandomBGM = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.GetRandomBGM");
	}

	UREDGfxMovieManager_Network_Base_execGetRandomBGM_Params GetRandomBGM_Params;
	memset(&GetRandomBGM_Params, 0, sizeof(GetRandomBGM_Params));

	this->ProcessEvent(uFnGetRandomBGM, &GetRandomBGM_Params, nullptr);

	return static_cast<EUE_BGM_ID>(GetRandomBGM_Params.ReturnValue);
};

// Function REDGame.REDGfxMovieManager_Network_Base.SetupRandomBGM
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39851])
// Parameter Info:

void UREDGfxMovieManager_Network_Base::SetupRandomBGM()
{
	static UFunction* uFnSetupRandomBGM = nullptr;

	if (!uFnSetupRandomBGM)
	{
		uFnSetupRandomBGM = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.SetupRandomBGM");
	}

	UREDGfxMovieManager_Network_Base_execSetupRandomBGM_Params SetupRandomBGM_Params;
	memset(&SetupRandomBGM_Params, 0, sizeof(SetupRandomBGM_Params));

	this->ProcessEvent(uFnSetupRandomBGM, &SetupRandomBGM_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsSilentBGM
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37856])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::IsSilentBGM()
{
	static UFunction* uFnIsSilentBGM = nullptr;

	if (!uFnIsSilentBGM)
	{
		uFnIsSilentBGM = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsSilentBGM");
	}

	UREDGfxMovieManager_Network_Base_execIsSilentBGM_Params IsSilentBGM_Params;
	memset(&IsSilentBGM_Params, 0, sizeof(IsSilentBGM_Params));

	this->ProcessEvent(uFnIsSilentBGM, &IsSilentBGM_Params, nullptr);

	return IsSilentBGM_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsNormalBGM
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37753])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::IsNormalBGM()
{
	static UFunction* uFnIsNormalBGM = nullptr;

	if (!uFnIsNormalBGM)
	{
		uFnIsNormalBGM = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsNormalBGM");
	}

	UREDGfxMovieManager_Network_Base_execIsNormalBGM_Params IsNormalBGM_Params;
	memset(&IsNormalBGM_Params, 0, sizeof(IsNormalBGM_Params));

	this->ProcessEvent(uFnIsNormalBGM, &IsNormalBGM_Params, nullptr);

	return IsNormalBGM_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsRandomBGM
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37805])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::IsRandomBGM()
{
	static UFunction* uFnIsRandomBGM = nullptr;

	if (!uFnIsRandomBGM)
	{
		uFnIsRandomBGM = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsRandomBGM");
	}

	UREDGfxMovieManager_Network_Base_execIsRandomBGM_Params IsRandomBGM_Params;
	memset(&IsRandomBGM_Params, 0, sizeof(IsRandomBGM_Params));

	this->ProcessEvent(uFnIsRandomBGM, &IsRandomBGM_Params, nullptr);

	return IsRandomBGM_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.UpdateCheckWeakErrorInRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40621])
// Parameter Info:

void UREDGfxMovieManager_Network_Base::UpdateCheckWeakErrorInRoom()
{
	static UFunction* uFnUpdateCheckWeakErrorInRoom = nullptr;

	if (!uFnUpdateCheckWeakErrorInRoom)
	{
		uFnUpdateCheckWeakErrorInRoom = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.UpdateCheckWeakErrorInRoom");
	}

	UREDGfxMovieManager_Network_Base_execUpdateCheckWeakErrorInRoom_Params UpdateCheckWeakErrorInRoom_Params;
	memset(&UpdateCheckWeakErrorInRoom_Params, 0, sizeof(UpdateCheckWeakErrorInRoom_Params));

	this->ProcessEvent(uFnUpdateCheckWeakErrorInRoom, &UpdateCheckWeakErrorInRoom_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsInLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37692])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::IsInLobby()
{
	static UFunction* uFnIsInLobby = nullptr;

	if (!uFnIsInLobby)
	{
		uFnIsInLobby = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsInLobby");
	}

	UREDGfxMovieManager_Network_Base_execIsInLobby_Params IsInLobby_Params;
	memset(&IsInLobby_Params, 0, sizeof(IsInLobby_Params));

	this->ProcessEvent(uFnIsInLobby, &IsInLobby_Params, nullptr);

	return IsInLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.ErrorNetwork
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36735])
// Parameter Info:

void UREDGfxMovieManager_Network_Base::ErrorNetwork()
{
	static UFunction* uFnErrorNetwork = nullptr;

	if (!uFnErrorNetwork)
	{
		uFnErrorNetwork = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.ErrorNetwork");
	}

	UREDGfxMovieManager_Network_Base_execErrorNetwork_Params ErrorNetwork_Params;
	memset(&ErrorNetwork_Params, 0, sizeof(ErrorNetwork_Params));

	this->ProcessEvent(uFnErrorNetwork, &ErrorNetwork_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network_Base.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMovieManager_Network_Base::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.InitializeNative");
	}

	UREDGfxMovieManager_Network_Base_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network_Base.SetupWelcomeScene
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39864])
// Parameter Info:

void UREDGfxMovieManager_Network_Base::SetupWelcomeScene()
{
	static UFunction* uFnSetupWelcomeScene = nullptr;

	if (!uFnSetupWelcomeScene)
	{
		uFnSetupWelcomeScene = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.SetupWelcomeScene");
	}

	UREDGfxMovieManager_Network_Base_execSetupWelcomeScene_Params SetupWelcomeScene_Params;
	memset(&SetupWelcomeScene_Params, 0, sizeof(SetupWelcomeScene_Params));

	this->ProcessEvent(uFnSetupWelcomeScene, &SetupWelcomeScene_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network_Base.GetSystemErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37182])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMovieManager_Network_Base::GetSystemErrorMessageID()
{
	static UFunction* uFnGetSystemErrorMessageID = nullptr;

	if (!uFnGetSystemErrorMessageID)
	{
		uFnGetSystemErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.GetSystemErrorMessageID");
	}

	UREDGfxMovieManager_Network_Base_execGetSystemErrorMessageID_Params GetSystemErrorMessageID_Params;
	memset(&GetSystemErrorMessageID_Params, 0, sizeof(GetSystemErrorMessageID_Params));

	this->ProcessEvent(uFnGetSystemErrorMessageID, &GetSystemErrorMessageID_Params, nullptr);

	return GetSystemErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.IsAnySystemError
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37597])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::IsAnySystemError()
{
	static UFunction* uFnIsAnySystemError = nullptr;

	if (!uFnIsAnySystemError)
	{
		uFnIsAnySystemError = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.IsAnySystemError");
	}

	UREDGfxMovieManager_Network_Base_execIsAnySystemError_Params IsAnySystemError_Params;
	memset(&IsAnySystemError_Params, 0, sizeof(IsAnySystemError_Params));

	this->ProcessEvent(uFnIsAnySystemError, &IsAnySystemError_Params, nullptr);

	return IsAnySystemError_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.PopUp_CheckReturnVal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39062])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Handle                         (CPF_Parm)

int32_t UREDGfxMovieManager_Network_Base::PopUp_CheckReturnVal(int32_t Handle)
{
	static UFunction* uFnPopUp_CheckReturnVal = nullptr;

	if (!uFnPopUp_CheckReturnVal)
	{
		uFnPopUp_CheckReturnVal = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.PopUp_CheckReturnVal");
	}

	UREDGfxMovieManager_Network_Base_execPopUp_CheckReturnVal_Params PopUp_CheckReturnVal_Params;
	memset(&PopUp_CheckReturnVal_Params, 0, sizeof(PopUp_CheckReturnVal_Params));
	memcpy_s(&PopUp_CheckReturnVal_Params.Handle, sizeof(PopUp_CheckReturnVal_Params.Handle), &Handle, sizeof(Handle));

	this->ProcessEvent(uFnPopUp_CheckReturnVal, &PopUp_CheckReturnVal_Params, nullptr);

	return PopUp_CheckReturnVal_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.PopUp_OpenYesNo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39067])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  messegaID                      (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMovieManager_Network_Base::PopUp_OpenYesNo(const class FString& messegaID)
{
	static UFunction* uFnPopUp_OpenYesNo = nullptr;

	if (!uFnPopUp_OpenYesNo)
	{
		uFnPopUp_OpenYesNo = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.PopUp_OpenYesNo");
	}

	UREDGfxMovieManager_Network_Base_execPopUp_OpenYesNo_Params PopUp_OpenYesNo_Params;
	memset(&PopUp_OpenYesNo_Params, 0, sizeof(PopUp_OpenYesNo_Params));
	memcpy_s(&PopUp_OpenYesNo_Params.messegaID, sizeof(PopUp_OpenYesNo_Params.messegaID), &messegaID, sizeof(messegaID));

	this->ProcessEvent(uFnPopUp_OpenYesNo, &PopUp_OpenYesNo_Params, nullptr);

	return PopUp_OpenYesNo_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.MenuWindow_IsActiveAny
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38282])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::MenuWindow_IsActiveAny()
{
	static UFunction* uFnMenuWindow_IsActiveAny = nullptr;

	if (!uFnMenuWindow_IsActiveAny)
	{
		uFnMenuWindow_IsActiveAny = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.MenuWindow_IsActiveAny");
	}

	UREDGfxMovieManager_Network_Base_execMenuWindow_IsActiveAny_Params MenuWindow_IsActiveAny_Params;
	memset(&MenuWindow_IsActiveAny_Params, 0, sizeof(MenuWindow_IsActiveAny_Params));

	this->ProcessEvent(uFnMenuWindow_IsActiveAny, &MenuWindow_IsActiveAny_Params, nullptr);

	return MenuWindow_IsActiveAny_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.PopUpErr_IsActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39069])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::PopUpErr_IsActive()
{
	static UFunction* uFnPopUpErr_IsActive = nullptr;

	if (!uFnPopUpErr_IsActive)
	{
		uFnPopUpErr_IsActive = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.PopUpErr_IsActive");
	}

	UREDGfxMovieManager_Network_Base_execPopUpErr_IsActive_Params PopUpErr_IsActive_Params;
	memset(&PopUpErr_IsActive_Params, 0, sizeof(PopUpErr_IsActive_Params));

	this->ProcessEvent(uFnPopUpErr_IsActive, &PopUpErr_IsActive_Params, nullptr);

	return PopUpErr_IsActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.PopUpErr_OpenOK
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39070])
// Parameter Info:
// class FString                  messegaID                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_Network_Base::PopUpErr_OpenOK(const class FString& messegaID)
{
	static UFunction* uFnPopUpErr_OpenOK = nullptr;

	if (!uFnPopUpErr_OpenOK)
	{
		uFnPopUpErr_OpenOK = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.PopUpErr_OpenOK");
	}

	UREDGfxMovieManager_Network_Base_execPopUpErr_OpenOK_Params PopUpErr_OpenOK_Params;
	memset(&PopUpErr_OpenOK_Params, 0, sizeof(PopUpErr_OpenOK_Params));
	memcpy_s(&PopUpErr_OpenOK_Params.messegaID, sizeof(PopUpErr_OpenOK_Params.messegaID), &messegaID, sizeof(messegaID));

	this->ProcessEvent(uFnPopUpErr_OpenOK, &PopUpErr_OpenOK_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network_Base.PopUp_IsActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39064])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network_Base::PopUp_IsActive()
{
	static UFunction* uFnPopUp_IsActive = nullptr;

	if (!uFnPopUp_IsActive)
	{
		uFnPopUp_IsActive = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.PopUp_IsActive");
	}

	UREDGfxMovieManager_Network_Base_execPopUp_IsActive_Params PopUp_IsActive_Params;
	memset(&PopUp_IsActive_Params, 0, sizeof(PopUp_IsActive_Params));

	this->ProcessEvent(uFnPopUp_IsActive, &PopUp_IsActive_Params, nullptr);

	return PopUp_IsActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network_Base.PopUp_OpenOK
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39065])
// Parameter Info:
// class FString                  messegaID                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMovieManager_Network_Base::PopUp_OpenOK(const class FString& messegaID)
{
	static UFunction* uFnPopUp_OpenOK = nullptr;

	if (!uFnPopUp_OpenOK)
	{
		uFnPopUp_OpenOK = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network_Base.PopUp_OpenOK");
	}

	UREDGfxMovieManager_Network_Base_execPopUp_OpenOK_Params PopUp_OpenOK_Params;
	memset(&PopUp_OpenOK_Params, 0, sizeof(PopUp_OpenOK_Params));
	memcpy_s(&PopUp_OpenOK_Params.messegaID, sizeof(PopUp_OpenOK_Params.messegaID), &messegaID, sizeof(messegaID));

	this->ProcessEvent(uFnPopUp_OpenOK, &PopUp_OpenOK_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.Update
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_Network::Update()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.Update");
	}

	UREDGfxMovieManager_Network_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.Update_End
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_Network::Update_End(bool bTrigger)
{
	static UFunction* uFnUpdate_End = nullptr;

	if (!uFnUpdate_End)
	{
		uFnUpdate_End = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.Update_End");
	}

	UREDGfxMovieManager_Network_execUpdate_End_Params Update_End_Params;
	memset(&Update_End_Params, 0, sizeof(Update_End_Params));
	Update_End_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdate_End, &Update_End_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.Update_Error
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_Network::Update_Error(bool bTrigger)
{
	static UFunction* uFnUpdate_Error = nullptr;

	if (!uFnUpdate_Error)
	{
		uFnUpdate_Error = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.Update_Error");
	}

	UREDGfxMovieManager_Network_execUpdate_Error_Params Update_Error_Params;
	memset(&Update_Error_Params, 0, sizeof(Update_Error_Params));
	Update_Error_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdate_Error, &Update_Error_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.Update_ErrorWait2
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_Network::Update_ErrorWait2(bool bTrigger)
{
	static UFunction* uFnUpdate_ErrorWait2 = nullptr;

	if (!uFnUpdate_ErrorWait2)
	{
		uFnUpdate_ErrorWait2 = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.Update_ErrorWait2");
	}

	UREDGfxMovieManager_Network_execUpdate_ErrorWait2_Params Update_ErrorWait2_Params;
	memset(&Update_ErrorWait2_Params, 0, sizeof(Update_ErrorWait2_Params));
	Update_ErrorWait2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdate_ErrorWait2, &Update_ErrorWait2_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.Update_ErrorWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_Network::Update_ErrorWait(bool bTrigger)
{
	static UFunction* uFnUpdate_ErrorWait = nullptr;

	if (!uFnUpdate_ErrorWait)
	{
		uFnUpdate_ErrorWait = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.Update_ErrorWait");
	}

	UREDGfxMovieManager_Network_execUpdate_ErrorWait_Params Update_ErrorWait_Params;
	memset(&Update_ErrorWait_Params, 0, sizeof(Update_ErrorWait_Params));
	Update_ErrorWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdate_ErrorWait, &Update_ErrorWait_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.Update_Main
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_Network::Update_Main(bool bTrigger)
{
	static UFunction* uFnUpdate_Main = nullptr;

	if (!uFnUpdate_Main)
	{
		uFnUpdate_Main = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.Update_Main");
	}

	UREDGfxMovieManager_Network_execUpdate_Main_Params Update_Main_Params;
	memset(&Update_Main_Params, 0, sizeof(Update_Main_Params));
	Update_Main_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdate_Main, &Update_Main_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.IsNetworkEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network::IsNetworkEnd()
{
	static UFunction* uFnIsNetworkEnd = nullptr;

	if (!uFnIsNetworkEnd)
	{
		uFnIsNetworkEnd = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.IsNetworkEnd");
	}

	UREDGfxMovieManager_Network_execIsNetworkEnd_Params IsNetworkEnd_Params;
	memset(&IsNetworkEnd_Params, 0, sizeof(IsNetworkEnd_Params));

	this->ProcessEvent(uFnIsNetworkEnd, &IsNetworkEnd_Params, nullptr);

	return IsNetworkEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network.StartNetwork
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ENETMANAGER_STARTMENU          StartMenu                      (CPF_Parm)

void UREDGfxMovieManager_Network::StartNetwork(ENETMANAGER_STARTMENU StartMenu)
{
	static UFunction* uFnStartNetwork = nullptr;

	if (!uFnStartNetwork)
	{
		uFnStartNetwork = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.StartNetwork");
	}

	UREDGfxMovieManager_Network_execStartNetwork_Params StartNetwork_Params;
	memset(&StartNetwork_Params, 0, sizeof(StartNetwork_Params));
	memcpy_s(&StartNetwork_Params.StartMenu, sizeof(StartNetwork_Params.StartMenu), &StartMenu, sizeof(StartMenu));

	this->ProcessEvent(uFnStartNetwork, &StartNetwork_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.StartBGM
// [0x00824002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isRoom                         (CPF_OptionalParm | CPF_Parm)

void UREDGfxMovieManager_Network::StartBGM(bool isRoom)
{
	static UFunction* uFnStartBGM = nullptr;

	if (!uFnStartBGM)
	{
		uFnStartBGM = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.StartBGM");
	}

	UREDGfxMovieManager_Network_execStartBGM_Params StartBGM_Params;
	memset(&StartBGM_Params, 0, sizeof(StartBGM_Params));
	StartBGM_Params.isRoom = isRoom;

	this->ProcessEvent(uFnStartBGM, &StartBGM_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.Initialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_Network::Initialize()
{
	static UFunction* uFnInitialize = nullptr;

	if (!uFnInitialize)
	{
		uFnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.Initialize");
	}

	UREDGfxMovieManager_Network_execInitialize_Params Initialize_Params;
	memset(&Initialize_Params, 0, sizeof(Initialize_Params));

	this->ProcessEvent(uFnInitialize, &Initialize_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.IsMapCollisionExist
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_Network::IsMapCollisionExist()
{
	static UFunction* uFnIsMapCollisionExist = nullptr;

	if (!uFnIsMapCollisionExist)
	{
		uFnIsMapCollisionExist = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.IsMapCollisionExist");
	}

	UREDGfxMovieManager_Network_execIsMapCollisionExist_Params IsMapCollisionExist_Params;
	memset(&IsMapCollisionExist_Params, 0, sizeof(IsMapCollisionExist_Params));

	this->ProcessEvent(uFnIsMapCollisionExist, &IsMapCollisionExist_Params, nullptr);

	return IsMapCollisionExist_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_Network.UpdateMapCollision
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        kyoutaiMax                     (CPF_OptionalParm | CPF_Parm)

void UREDGfxMovieManager_Network::UpdateMapCollision(int32_t kyoutaiMax)
{
	static UFunction* uFnUpdateMapCollision = nullptr;

	if (!uFnUpdateMapCollision)
	{
		uFnUpdateMapCollision = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.UpdateMapCollision");
	}

	UREDGfxMovieManager_Network_execUpdateMapCollision_Params UpdateMapCollision_Params;
	memset(&UpdateMapCollision_Params, 0, sizeof(UpdateMapCollision_Params));
	memcpy_s(&UpdateMapCollision_Params.kyoutaiMax, sizeof(UpdateMapCollision_Params.kyoutaiMax), &kyoutaiMax, sizeof(kyoutaiMax));

	this->ProcessEvent(uFnUpdateMapCollision, &UpdateMapCollision_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_Network.UpdateLoadRandomBGM
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_Network::UpdateLoadRandomBGM()
{
	static UFunction* uFnUpdateLoadRandomBGM = nullptr;

	if (!uFnUpdateLoadRandomBGM)
	{
		uFnUpdateLoadRandomBGM = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_Network.UpdateLoadRandomBGM");
	}

	UREDGfxMovieManager_Network_execUpdateLoadRandomBGM_Params UpdateLoadRandomBGM_Params;
	memset(&UpdateLoadRandomBGM_Params, 0, sizeof(UpdateLoadRandomBGM_Params));

	this->ProcessEvent(uFnUpdateLoadRandomBGM, &UpdateLoadRandomBGM_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.AS_FuncVoid
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer::AS_FuncVoid()
{
	static UFunction* uFnAS_FuncVoid = nullptr;

	if (!uFnAS_FuncVoid)
	{
		uFnAS_FuncVoid = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.AS_FuncVoid");
	}

	UREDGfxMoviePlayer_execAS_FuncVoid_Params AS_FuncVoid_Params;
	memset(&AS_FuncVoid_Params, 0, sizeof(AS_FuncVoid_Params));

	this->ProcessEvent(uFnAS_FuncVoid, &AS_FuncVoid_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.AS_FuncInt
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Arg                            (CPF_Parm)

void UREDGfxMoviePlayer::AS_FuncInt(int32_t Arg)
{
	static UFunction* uFnAS_FuncInt = nullptr;

	if (!uFnAS_FuncInt)
	{
		uFnAS_FuncInt = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.AS_FuncInt");
	}

	UREDGfxMoviePlayer_execAS_FuncInt_Params AS_FuncInt_Params;
	memset(&AS_FuncInt_Params, 0, sizeof(AS_FuncInt_Params));
	memcpy_s(&AS_FuncInt_Params.Arg, sizeof(AS_FuncInt_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnAS_FuncInt, &AS_FuncInt_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.AS_FuncString
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Arg                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer::AS_FuncString(const class FString& Arg)
{
	static UFunction* uFnAS_FuncString = nullptr;

	if (!uFnAS_FuncString)
	{
		uFnAS_FuncString = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.AS_FuncString");
	}

	UREDGfxMoviePlayer_execAS_FuncString_Params AS_FuncString_Params;
	memset(&AS_FuncString_Params, 0, sizeof(AS_FuncString_Params));
	memcpy_s(&AS_FuncString_Params.Arg, sizeof(AS_FuncString_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnAS_FuncString, &AS_FuncString_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.FuncVoid
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Path                           (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer::FuncVoid(const class FString& Path)
{
	static UFunction* uFnFuncVoid = nullptr;

	if (!uFnFuncVoid)
	{
		uFnFuncVoid = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.FuncVoid");
	}

	UREDGfxMoviePlayer_execFuncVoid_Params FuncVoid_Params;
	memset(&FuncVoid_Params, 0, sizeof(FuncVoid_Params));
	memcpy_s(&FuncVoid_Params.Path, sizeof(FuncVoid_Params.Path), &Path, sizeof(Path));

	this->ProcessEvent(uFnFuncVoid, &FuncVoid_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.FuncInt
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Path                           (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Arg                            (CPF_Parm)

void UREDGfxMoviePlayer::FuncInt(const class FString& Path, int32_t Arg)
{
	static UFunction* uFnFuncInt = nullptr;

	if (!uFnFuncInt)
	{
		uFnFuncInt = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.FuncInt");
	}

	UREDGfxMoviePlayer_execFuncInt_Params FuncInt_Params;
	memset(&FuncInt_Params, 0, sizeof(FuncInt_Params));
	memcpy_s(&FuncInt_Params.Path, sizeof(FuncInt_Params.Path), &Path, sizeof(Path));
	memcpy_s(&FuncInt_Params.Arg, sizeof(FuncInt_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnFuncInt, &FuncInt_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.FuncString
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Path                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Arg                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer::FuncString(const class FString& Path, const class FString& Arg)
{
	static UFunction* uFnFuncString = nullptr;

	if (!uFnFuncString)
	{
		uFnFuncString = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.FuncString");
	}

	UREDGfxMoviePlayer_execFuncString_Params FuncString_Params;
	memset(&FuncString_Params, 0, sizeof(FuncString_Params));
	memcpy_s(&FuncString_Params.Path, sizeof(FuncString_Params.Path), &Path, sizeof(Path));
	memcpy_s(&FuncString_Params.Arg, sizeof(FuncString_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnFuncString, &FuncString_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.StopInstLabel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Path                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer::StopInstLabel(const class FString& Path, const class FString& Label)
{
	static UFunction* uFnStopInstLabel = nullptr;

	if (!uFnStopInstLabel)
	{
		uFnStopInstLabel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.StopInstLabel");
	}

	UREDGfxMoviePlayer_execStopInstLabel_Params StopInstLabel_Params;
	memset(&StopInstLabel_Params, 0, sizeof(StopInstLabel_Params));
	memcpy_s(&StopInstLabel_Params.Path, sizeof(StopInstLabel_Params.Path), &Path, sizeof(Path));
	memcpy_s(&StopInstLabel_Params.Label, sizeof(StopInstLabel_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnStopInstLabel, &StopInstLabel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.PlayInstLabel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Path                           (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer::PlayInstLabel(const class FString& Path, const class FString& Label)
{
	static UFunction* uFnPlayInstLabel = nullptr;

	if (!uFnPlayInstLabel)
	{
		uFnPlayInstLabel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.PlayInstLabel");
	}

	UREDGfxMoviePlayer_execPlayInstLabel_Params PlayInstLabel_Params;
	memset(&PlayInstLabel_Params, 0, sizeof(PlayInstLabel_Params));
	memcpy_s(&PlayInstLabel_Params.Path, sizeof(PlayInstLabel_Params.Path), &Path, sizeof(Path));
	memcpy_s(&PlayInstLabel_Params.Label, sizeof(PlayInstLabel_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnPlayInstLabel, &PlayInstLabel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.REDRand
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Max                            (CPF_Parm)

int32_t UREDGfxMoviePlayer::REDRand(int32_t Max)
{
	static UFunction* uFnREDRand = nullptr;

	if (!uFnREDRand)
	{
		uFnREDRand = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.REDRand");
	}

	UREDGfxMoviePlayer_execREDRand_Params REDRand_Params;
	memset(&REDRand_Params, 0, sizeof(REDRand_Params));
	memcpy_s(&REDRand_Params.Max, sizeof(REDRand_Params.Max), &Max, sizeof(Max));

	this->ProcessEvent(uFnREDRand, &REDRand_Params, nullptr);

	return REDRand_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.REDPC
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPlayerController*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AREDPlayerController* UREDGfxMoviePlayer::REDPC()
{
	static UFunction* uFnREDPC = nullptr;

	if (!uFnREDPC)
	{
		uFnREDPC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.REDPC");
	}

	UREDGfxMoviePlayer_execREDPC_Params REDPC_Params;
	memset(&REDPC_Params, 0, sizeof(REDPC_Params));

	this->ProcessEvent(uFnREDPC, &REDPC_Params, nullptr);

	return REDPC_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.GetLocalizeStaffRoll
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37090])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  Id                             (CPF_Parm | CPF_NeedCtorLink)
// ESTAFFROLL_TEXT_TYPE           Type                           (CPF_Parm)

class FString UREDGfxMoviePlayer::GetLocalizeStaffRoll(const class FString& Id, ESTAFFROLL_TEXT_TYPE Type)
{
	static UFunction* uFnGetLocalizeStaffRoll = nullptr;

	if (!uFnGetLocalizeStaffRoll)
	{
		uFnGetLocalizeStaffRoll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.GetLocalizeStaffRoll");
	}

	UREDGfxMoviePlayer_execGetLocalizeStaffRoll_Params GetLocalizeStaffRoll_Params;
	memset(&GetLocalizeStaffRoll_Params, 0, sizeof(GetLocalizeStaffRoll_Params));
	memcpy_s(&GetLocalizeStaffRoll_Params.Id, sizeof(GetLocalizeStaffRoll_Params.Id), &Id, sizeof(Id));
	memcpy_s(&GetLocalizeStaffRoll_Params.Type, sizeof(GetLocalizeStaffRoll_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnGetLocalizeStaffRoll, &GetLocalizeStaffRoll_Params, nullptr);

	return GetLocalizeStaffRoll_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.GetLocalizeString
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37091])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// class FString                  WidgetName                     (CPF_Parm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer::GetLocalizeString(const class FString& WidgetName)
{
	static UFunction* uFnGetLocalizeString = nullptr;

	if (!uFnGetLocalizeString)
	{
		uFnGetLocalizeString = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.GetLocalizeString");
	}

	UREDGfxMoviePlayer_execGetLocalizeString_Params GetLocalizeString_Params;
	memset(&GetLocalizeString_Params, 0, sizeof(GetLocalizeString_Params));
	memcpy_s(&GetLocalizeString_Params.WidgetName, sizeof(GetLocalizeString_Params.WidgetName), &WidgetName, sizeof(WidgetName));

	this->ProcessEvent(uFnGetLocalizeString, &GetLocalizeString_Params, nullptr);

	return GetLocalizeString_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.SetDispFromCategory
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39730])
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)
// EREDMovie_Category             Category                       (CPF_Parm)

void UREDGfxMoviePlayer::SetDispFromCategory(bool disp, EREDMovie_Category Category)
{
	static UFunction* uFnSetDispFromCategory = nullptr;

	if (!uFnSetDispFromCategory)
	{
		uFnSetDispFromCategory = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.SetDispFromCategory");
	}

	UREDGfxMoviePlayer_execSetDispFromCategory_Params SetDispFromCategory_Params;
	memset(&SetDispFromCategory_Params, 0, sizeof(SetDispFromCategory_Params));
	SetDispFromCategory_Params.disp = disp;
	memcpy_s(&SetDispFromCategory_Params.Category, sizeof(SetDispFromCategory_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnSetDispFromCategory, &SetDispFromCategory_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    WidgetName                     (CPF_Parm)
// class FName                    WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UREDGfxMoviePlayer::eventWidgetInitialized(const class FName& WidgetName, const class FName& WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.WidgetInitialized");
	}

	UREDGfxMoviePlayer_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	WidgetInitialized_Params.Widget = Widget;

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.PlaySoundToUnreal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  soundName                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer::PlaySoundToUnreal(const class FString& soundName)
{
	static UFunction* uFnPlaySoundToUnreal = nullptr;

	if (!uFnPlaySoundToUnreal)
	{
		uFnPlaySoundToUnreal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.PlaySoundToUnreal");
	}

	UREDGfxMoviePlayer_execPlaySoundToUnreal_Params PlaySoundToUnreal_Params;
	memset(&PlaySoundToUnreal_Params, 0, sizeof(PlaySoundToUnreal_Params));
	memcpy_s(&PlaySoundToUnreal_Params.soundName, sizeof(PlaySoundToUnreal_Params.soundName), &soundName, sizeof(soundName));

	this->ProcessEvent(uFnPlaySoundToUnreal, &PlaySoundToUnreal_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer.IsAnimeEndScript
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer::IsAnimeEndScript()
{
	static UFunction* uFnIsAnimeEndScript = nullptr;

	if (!uFnIsAnimeEndScript)
	{
		uFnIsAnimeEndScript = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.IsAnimeEndScript");
	}

	UREDGfxMoviePlayer_execIsAnimeEndScript_Params IsAnimeEndScript_Params;
	memset(&IsAnimeEndScript_Params, 0, sizeof(IsAnimeEndScript_Params));

	this->ProcessEvent(uFnIsAnimeEndScript, &IsAnimeEndScript_Params, nullptr);

	return IsAnimeEndScript_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.IsAnimeEnd
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer::eventIsAnimeEnd()
{
	static UFunction* uFnIsAnimeEnd = nullptr;

	if (!uFnIsAnimeEnd)
	{
		uFnIsAnimeEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.IsAnimeEnd");
	}

	UREDGfxMoviePlayer_eventIsAnimeEnd_Params IsAnimeEnd_Params;
	memset(&IsAnimeEnd_Params, 0, sizeof(IsAnimeEnd_Params));

	this->ProcessEvent(uFnIsAnimeEnd, &IsAnimeEnd_Params, nullptr);

	return IsAnimeEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.MovieStartInternal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_Parm)

bool UREDGfxMoviePlayer::MovieStartInternal(bool StartPaused)
{
	static UFunction* uFnMovieStartInternal = nullptr;

	if (!uFnMovieStartInternal)
	{
		uFnMovieStartInternal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.MovieStartInternal");
	}

	UREDGfxMoviePlayer_execMovieStartInternal_Params MovieStartInternal_Params;
	memset(&MovieStartInternal_Params, 0, sizeof(MovieStartInternal_Params));
	MovieStartInternal_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnMovieStartInternal, &MovieStartInternal_Params, nullptr);

	return MovieStartInternal_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.MovieStart
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer::eventMovieStart(bool StartPaused)
{
	static UFunction* uFnMovieStart = nullptr;

	if (!uFnMovieStart)
	{
		uFnMovieStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.MovieStart");
	}

	UREDGfxMoviePlayer_eventMovieStart_Params MovieStart_Params;
	memset(&MovieStart_Params, 0, sizeof(MovieStart_Params));
	MovieStart_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnMovieStart, &MovieStart_Params, nullptr);

	return MovieStart_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer.GetPackageString
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EPKG_NAME                      Id                             (CPF_Parm)
// uint32_t                       isBattle                       (CPF_OptionalParm | CPF_Parm)

class FString UREDGfxMoviePlayer::eventGetPackageString(EPKG_NAME Id, bool isBattle)
{
	static UFunction* uFnGetPackageString = nullptr;

	if (!uFnGetPackageString)
	{
		uFnGetPackageString = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer.GetPackageString");
	}

	UREDGfxMoviePlayer_eventGetPackageString_Params GetPackageString_Params;
	memset(&GetPackageString_Params, 0, sizeof(GetPackageString_Params));
	memcpy_s(&GetPackageString_Params.Id, sizeof(GetPackageString_Params.Id), &Id, sizeof(Id));
	GetPackageString_Params.isBattle = isBattle;

	this->ProcessEvent(uFnGetPackageString, &GetPackageString_Params, nullptr);

	return GetPackageString_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleHaiku.ResetHaiku
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleHaiku::ResetHaiku(int32_t LRpos)
{
	static UFunction* uFnResetHaiku = nullptr;

	if (!uFnResetHaiku)
	{
		uFnResetHaiku = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHaiku.ResetHaiku");
	}

	UREDGfxMoviePlayer_BattleHaiku_execResetHaiku_Params ResetHaiku_Params;
	memset(&ResetHaiku_Params, 0, sizeof(ResetHaiku_Params));
	memcpy_s(&ResetHaiku_Params.LRpos, sizeof(ResetHaiku_Params.LRpos), &LRpos, sizeof(LRpos));

	this->ProcessEvent(uFnResetHaiku, &ResetHaiku_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHaiku.FadeOutHaiku
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleHaiku::FadeOutHaiku(int32_t LRpos)
{
	static UFunction* uFnFadeOutHaiku = nullptr;

	if (!uFnFadeOutHaiku)
	{
		uFnFadeOutHaiku = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHaiku.FadeOutHaiku");
	}

	UREDGfxMoviePlayer_BattleHaiku_execFadeOutHaiku_Params FadeOutHaiku_Params;
	memset(&FadeOutHaiku_Params, 0, sizeof(FadeOutHaiku_Params));
	memcpy_s(&FadeOutHaiku_Params.LRpos, sizeof(FadeOutHaiku_Params.LRpos), &LRpos, sizeof(LRpos));

	this->ProcessEvent(uFnFadeOutHaiku, &FadeOutHaiku_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHaiku.SetShimonoku
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)
// class FString                  ku                             (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHaiku::SetShimonoku(int32_t LRpos, const class FString& ku)
{
	static UFunction* uFnSetShimonoku = nullptr;

	if (!uFnSetShimonoku)
	{
		uFnSetShimonoku = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHaiku.SetShimonoku");
	}

	UREDGfxMoviePlayer_BattleHaiku_execSetShimonoku_Params SetShimonoku_Params;
	memset(&SetShimonoku_Params, 0, sizeof(SetShimonoku_Params));
	memcpy_s(&SetShimonoku_Params.LRpos, sizeof(SetShimonoku_Params.LRpos), &LRpos, sizeof(LRpos));
	memcpy_s(&SetShimonoku_Params.ku, sizeof(SetShimonoku_Params.ku), &ku, sizeof(ku));

	this->ProcessEvent(uFnSetShimonoku, &SetShimonoku_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHaiku.SetNakanoku
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)
// class FString                  ku                             (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHaiku::SetNakanoku(int32_t LRpos, const class FString& ku)
{
	static UFunction* uFnSetNakanoku = nullptr;

	if (!uFnSetNakanoku)
	{
		uFnSetNakanoku = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHaiku.SetNakanoku");
	}

	UREDGfxMoviePlayer_BattleHaiku_execSetNakanoku_Params SetNakanoku_Params;
	memset(&SetNakanoku_Params, 0, sizeof(SetNakanoku_Params));
	memcpy_s(&SetNakanoku_Params.LRpos, sizeof(SetNakanoku_Params.LRpos), &LRpos, sizeof(LRpos));
	memcpy_s(&SetNakanoku_Params.ku, sizeof(SetNakanoku_Params.ku), &ku, sizeof(ku));

	this->ProcessEvent(uFnSetNakanoku, &SetNakanoku_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHaiku.SetKaminoku
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)
// class FString                  ku                             (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHaiku::SetKaminoku(int32_t LRpos, const class FString& ku)
{
	static UFunction* uFnSetKaminoku = nullptr;

	if (!uFnSetKaminoku)
	{
		uFnSetKaminoku = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHaiku.SetKaminoku");
	}

	UREDGfxMoviePlayer_BattleHaiku_execSetKaminoku_Params SetKaminoku_Params;
	memset(&SetKaminoku_Params, 0, sizeof(SetKaminoku_Params));
	memcpy_s(&SetKaminoku_Params.LRpos, sizeof(SetKaminoku_Params.LRpos), &LRpos, sizeof(LRpos));
	memcpy_s(&SetKaminoku_Params.ku, sizeof(SetKaminoku_Params.ku), &ku, sizeof(ku));

	this->ProcessEvent(uFnSetKaminoku, &SetKaminoku_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHaiku.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_BattleHaiku::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHaiku.Start");
	}

	UREDGfxMoviePlayer_BattleHaiku_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.ChangeMCColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36100])
// Parameter Info:
// class UGFxObject*              pMC                            (CPF_Parm)
// int32_t                        colorMul                       (CPF_Parm)
// int32_t                        colorAdd                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::ChangeMCColor(class UGFxObject* pMC, int32_t colorMul, int32_t colorAdd)
{
	static UFunction* uFnChangeMCColor = nullptr;

	if (!uFnChangeMCColor)
	{
		uFnChangeMCColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.ChangeMCColor");
	}

	UREDGfxMoviePlayer_BattleHUD_execChangeMCColor_Params ChangeMCColor_Params;
	memset(&ChangeMCColor_Params, 0, sizeof(ChangeMCColor_Params));
	ChangeMCColor_Params.pMC = pMC;
	memcpy_s(&ChangeMCColor_Params.colorMul, sizeof(ChangeMCColor_Params.colorMul), &colorMul, sizeof(colorMul));
	memcpy_s(&ChangeMCColor_Params.colorAdd, sizeof(ChangeMCColor_Params.colorAdd), &colorAdd, sizeof(colorAdd));

	this->ProcessEvent(uFnChangeMCColor, &ChangeMCColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.FadeOut
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleHUD::FadeOut()
{
	static UFunction* uFnFadeOut = nullptr;

	if (!uFnFadeOut)
	{
		uFnFadeOut = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.FadeOut");
	}

	UREDGfxMoviePlayer_BattleHUD_execFadeOut_Params FadeOut_Params;
	memset(&FadeOut_Params, 0, sizeof(FadeOut_Params));

	this->ProcessEvent(uFnFadeOut, &FadeOut_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.FadeIn
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleHUD::FadeIn()
{
	static UFunction* uFnFadeIn = nullptr;

	if (!uFnFadeIn)
	{
		uFnFadeIn = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.FadeIn");
	}

	UREDGfxMoviePlayer_BattleHUD_execFadeIn_Params FadeIn_Params;
	memset(&FadeIn_Params, 0, sizeof(FadeIn_Params));

	this->ProcessEvent(uFnFadeIn, &FadeIn_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.HideAll
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleHUD::HideAll()
{
	static UFunction* uFnHideAll = nullptr;

	if (!uFnHideAll)
	{
		uFnHideAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.HideAll");
	}

	UREDGfxMoviePlayer_BattleHUD_execHideAll_Params HideAll_Params;
	memset(&HideAll_Params, 0, sizeof(HideAll_Params));

	this->ProcessEvent(uFnHideAll, &HideAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.ShowAnime
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleHUD::ShowAnime()
{
	static UFunction* uFnShowAnime = nullptr;

	if (!uFnShowAnime)
	{
		uFnShowAnime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.ShowAnime");
	}

	UREDGfxMoviePlayer_BattleHUD_execShowAnime_Params ShowAnime_Params;
	memset(&ShowAnime_Params, 0, sizeof(ShowAnime_Params));

	this->ProcessEvent(uFnShowAnime, &ShowAnime_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.ShowQuick
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleHUD::ShowQuick()
{
	static UFunction* uFnShowQuick = nullptr;

	if (!uFnShowQuick)
	{
		uFnShowQuick = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.ShowQuick");
	}

	UREDGfxMoviePlayer_BattleHUD_execShowQuick_Params ShowQuick_Params;
	memset(&ShowQuick_Params, 0, sizeof(ShowQuick_Params));

	this->ProcessEvent(uFnShowQuick, &ShowQuick_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.RVNBlinkEffect
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::RVNBlinkEffect(int32_t Player)
{
	static UFunction* uFnRVNBlinkEffect = nullptr;

	if (!uFnRVNBlinkEffect)
	{
		uFnRVNBlinkEffect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.RVNBlinkEffect");
	}

	UREDGfxMoviePlayer_BattleHUD_execRVNBlinkEffect_Params RVNBlinkEffect_Params;
	memset(&RVNBlinkEffect_Params, 0, sizeof(RVNBlinkEffect_Params));
	memcpy_s(&RVNBlinkEffect_Params.Player, sizeof(RVNBlinkEffect_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnRVNBlinkEffect, &RVNBlinkEffect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.RVNRiseEffect
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::RVNRiseEffect(int32_t Player)
{
	static UFunction* uFnRVNRiseEffect = nullptr;

	if (!uFnRVNRiseEffect)
	{
		uFnRVNRiseEffect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.RVNRiseEffect");
	}

	UREDGfxMoviePlayer_BattleHUD_execRVNRiseEffect_Params RVNRiseEffect_Params;
	memset(&RVNRiseEffect_Params, 0, sizeof(RVNRiseEffect_Params));
	memcpy_s(&RVNRiseEffect_Params.Player, sizeof(RVNRiseEffect_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnRVNRiseEffect, &RVNRiseEffect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.JKOGhostGauge
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        ColorID                        (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       hide                           (CPF_Parm)
// int32_t                        lv                             (CPF_Parm)
// float                          gauge                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::JKOGhostGauge(int32_t Player, int32_t ColorID, int32_t Type, bool disp, bool hide, int32_t lv, float gauge)
{
	static UFunction* uFnJKOGhostGauge = nullptr;

	if (!uFnJKOGhostGauge)
	{
		uFnJKOGhostGauge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.JKOGhostGauge");
	}

	UREDGfxMoviePlayer_BattleHUD_execJKOGhostGauge_Params JKOGhostGauge_Params;
	memset(&JKOGhostGauge_Params, 0, sizeof(JKOGhostGauge_Params));
	memcpy_s(&JKOGhostGauge_Params.Player, sizeof(JKOGhostGauge_Params.Player), &Player, sizeof(Player));
	memcpy_s(&JKOGhostGauge_Params.ColorID, sizeof(JKOGhostGauge_Params.ColorID), &ColorID, sizeof(ColorID));
	memcpy_s(&JKOGhostGauge_Params.Type, sizeof(JKOGhostGauge_Params.Type), &Type, sizeof(Type));
	JKOGhostGauge_Params.disp = disp;
	JKOGhostGauge_Params.hide = hide;
	memcpy_s(&JKOGhostGauge_Params.lv, sizeof(JKOGhostGauge_Params.lv), &lv, sizeof(lv));
	memcpy_s(&JKOGhostGauge_Params.gauge, sizeof(JKOGhostGauge_Params.gauge), &gauge, sizeof(gauge));

	this->ProcessEvent(uFnJKOGhostGauge, &JKOGhostGauge_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.AdjustPos
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        offsetUp                       (CPF_Parm)
// int32_t                        offsetDown                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::AdjustPos(int32_t offsetUp, int32_t offsetDown)
{
	static UFunction* uFnAdjustPos = nullptr;

	if (!uFnAdjustPos)
	{
		uFnAdjustPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.AdjustPos");
	}

	UREDGfxMoviePlayer_BattleHUD_execAdjustPos_Params AdjustPos_Params;
	memset(&AdjustPos_Params, 0, sizeof(AdjustPos_Params));
	memcpy_s(&AdjustPos_Params.offsetUp, sizeof(AdjustPos_Params.offsetUp), &offsetUp, sizeof(offsetUp));
	memcpy_s(&AdjustPos_Params.offsetDown, sizeof(AdjustPos_Params.offsetDown), &offsetDown, sizeof(offsetDown));

	this->ProcessEvent(uFnAdjustPos, &AdjustPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.BurstKakuseiEff
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::BurstKakuseiEff(int32_t Dir)
{
	static UFunction* uFnBurstKakuseiEff = nullptr;

	if (!uFnBurstKakuseiEff)
	{
		uFnBurstKakuseiEff = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.BurstKakuseiEff");
	}

	UREDGfxMoviePlayer_BattleHUD_execBurstKakuseiEff_Params BurstKakuseiEff_Params;
	memset(&BurstKakuseiEff_Params, 0, sizeof(BurstKakuseiEff_Params));
	memcpy_s(&BurstKakuseiEff_Params.Dir, sizeof(BurstKakuseiEff_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnBurstKakuseiEff, &BurstKakuseiEff_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.BurstShake
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::BurstShake(int32_t Player)
{
	static UFunction* uFnBurstShake = nullptr;

	if (!uFnBurstShake)
	{
		uFnBurstShake = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.BurstShake");
	}

	UREDGfxMoviePlayer_BattleHUD_execBurstShake_Params BurstShake_Params;
	memset(&BurstShake_Params, 0, sizeof(BurstShake_Params));
	memcpy_s(&BurstShake_Params.Player, sizeof(BurstShake_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnBurstShake, &BurstShake_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.BurstHeal
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::BurstHeal(int32_t Player)
{
	static UFunction* uFnBurstHeal = nullptr;

	if (!uFnBurstHeal)
	{
		uFnBurstHeal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.BurstHeal");
	}

	UREDGfxMoviePlayer_BattleHUD_execBurstHeal_Params BurstHeal_Params;
	memset(&BurstHeal_Params, 0, sizeof(BurstHeal_Params));
	memcpy_s(&BurstHeal_Params.Player, sizeof(BurstHeal_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnBurstHeal, &BurstHeal_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetBurstKakusei
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetBurstKakusei(int32_t Player, bool flag)
{
	static UFunction* uFnSetBurstKakusei = nullptr;

	if (!uFnSetBurstKakusei)
	{
		uFnSetBurstKakusei = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetBurstKakusei");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetBurstKakusei_Params SetBurstKakusei_Params;
	memset(&SetBurstKakusei_Params, 0, sizeof(SetBurstKakusei_Params));
	memcpy_s(&SetBurstKakusei_Params.Player, sizeof(SetBurstKakusei_Params.Player), &Player, sizeof(Player));
	SetBurstKakusei_Params.flag = flag;

	this->ProcessEvent(uFnSetBurstKakusei, &SetBurstKakusei_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetStylishMode
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetStylishMode(int32_t Player, bool flag)
{
	static UFunction* uFnSetStylishMode = nullptr;

	if (!uFnSetStylishMode)
	{
		uFnSetStylishMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetStylishMode");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetStylishMode_Params SetStylishMode_Params;
	memset(&SetStylishMode_Params, 0, sizeof(SetStylishMode_Params));
	memcpy_s(&SetStylishMode_Params.Player, sizeof(SetStylishMode_Params.Player), &Player, sizeof(Player));
	SetStylishMode_Params.flag = flag;

	this->ProcessEvent(uFnSetStylishMode, &SetStylishMode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateSpectator
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Slot                           (CPF_Parm)
// uint32_t                       isHeadSet                      (CPF_Parm)
// uint32_t                       isSpeak                        (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateSpectator(int32_t Slot, bool isHeadSet, bool isSpeak)
{
	static UFunction* uFnUpdateSpectator = nullptr;

	if (!uFnUpdateSpectator)
	{
		uFnUpdateSpectator = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateSpectator");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateSpectator_Params UpdateSpectator_Params;
	memset(&UpdateSpectator_Params, 0, sizeof(UpdateSpectator_Params));
	memcpy_s(&UpdateSpectator_Params.Slot, sizeof(UpdateSpectator_Params.Slot), &Slot, sizeof(Slot));
	UpdateSpectator_Params.isHeadSet = isHeadSet;
	UpdateSpectator_Params.isSpeak = isSpeak;

	this->ProcessEvent(uFnUpdateSpectator, &UpdateSpectator_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetSpectator
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Slot                           (CPF_Parm)
// int32_t                        colorSlot                      (CPF_Parm)
// uint32_t                       isIn                           (CPF_Parm)
// class FString                  OnlineID                       (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHUD::SetSpectator(int32_t Slot, int32_t colorSlot, bool isIn, const class FString& OnlineID)
{
	static UFunction* uFnSetSpectator = nullptr;

	if (!uFnSetSpectator)
	{
		uFnSetSpectator = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetSpectator");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetSpectator_Params SetSpectator_Params;
	memset(&SetSpectator_Params, 0, sizeof(SetSpectator_Params));
	memcpy_s(&SetSpectator_Params.Slot, sizeof(SetSpectator_Params.Slot), &Slot, sizeof(Slot));
	memcpy_s(&SetSpectator_Params.colorSlot, sizeof(SetSpectator_Params.colorSlot), &colorSlot, sizeof(colorSlot));
	SetSpectator_Params.isIn = isIn;
	memcpy_s(&SetSpectator_Params.OnlineID, sizeof(SetSpectator_Params.OnlineID), &OnlineID, sizeof(OnlineID));

	this->ProcessEvent(uFnSetSpectator, &SetSpectator_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetSpectatorDisp
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetSpectatorDisp(bool disp)
{
	static UFunction* uFnSetSpectatorDisp = nullptr;

	if (!uFnSetSpectatorDisp)
	{
		uFnSetSpectatorDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetSpectatorDisp");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetSpectatorDisp_Params SetSpectatorDisp_Params;
	memset(&SetSpectatorDisp_Params, 0, sizeof(SetSpectatorDisp_Params));
	SetSpectatorDisp_Params.disp = disp;

	this->ProcessEvent(uFnSetSpectatorDisp, &SetSpectatorDisp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateMOM
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// float                          armorGauge                     (CPF_Parm)
// int32_t                        armorState                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateMOM(int32_t Player, float armorGauge, int32_t armorState)
{
	static UFunction* uFnUpdateMOM = nullptr;

	if (!uFnUpdateMOM)
	{
		uFnUpdateMOM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateMOM");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateMOM_Params UpdateMOM_Params;
	memset(&UpdateMOM_Params, 0, sizeof(UpdateMOM_Params));
	memcpy_s(&UpdateMOM_Params.Player, sizeof(UpdateMOM_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateMOM_Params.armorGauge, sizeof(UpdateMOM_Params.armorGauge), &armorGauge, sizeof(armorGauge));
	memcpy_s(&UpdateMOM_Params.armorState, sizeof(UpdateMOM_Params.armorState), &armorState, sizeof(armorState));

	this->ProcessEvent(uFnUpdateMOM, &UpdateMOM_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetTensGaugeColor
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        MulColor                       (CPF_Parm)
// int32_t                        AddColor                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetTensGaugeColor(int32_t Player, int32_t MulColor, int32_t AddColor)
{
	static UFunction* uFnSetTensGaugeColor = nullptr;

	if (!uFnSetTensGaugeColor)
	{
		uFnSetTensGaugeColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetTensGaugeColor");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetTensGaugeColor_Params SetTensGaugeColor_Params;
	memset(&SetTensGaugeColor_Params, 0, sizeof(SetTensGaugeColor_Params));
	memcpy_s(&SetTensGaugeColor_Params.Player, sizeof(SetTensGaugeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetTensGaugeColor_Params.MulColor, sizeof(SetTensGaugeColor_Params.MulColor), &MulColor, sizeof(MulColor));
	memcpy_s(&SetTensGaugeColor_Params.AddColor, sizeof(SetTensGaugeColor_Params.AddColor), &AddColor, sizeof(AddColor));

	this->ProcessEvent(uFnSetTensGaugeColor, &SetTensGaugeColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetHPGaugeColor
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        MulColor                       (CPF_Parm)
// int32_t                        AddColor                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetHPGaugeColor(int32_t Player, int32_t MulColor, int32_t AddColor)
{
	static UFunction* uFnSetHPGaugeColor = nullptr;

	if (!uFnSetHPGaugeColor)
	{
		uFnSetHPGaugeColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetHPGaugeColor");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetHPGaugeColor_Params SetHPGaugeColor_Params;
	memset(&SetHPGaugeColor_Params, 0, sizeof(SetHPGaugeColor_Params));
	memcpy_s(&SetHPGaugeColor_Params.Player, sizeof(SetHPGaugeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetHPGaugeColor_Params.MulColor, sizeof(SetHPGaugeColor_Params.MulColor), &MulColor, sizeof(MulColor));
	memcpy_s(&SetHPGaugeColor_Params.AddColor, sizeof(SetHPGaugeColor_Params.AddColor), &AddColor, sizeof(AddColor));

	this->ProcessEvent(uFnSetHPGaugeColor, &SetHPGaugeColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetVersionStr
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHUD::SetVersionStr(const class FString& Str)
{
	static UFunction* uFnSetVersionStr = nullptr;

	if (!uFnSetVersionStr)
	{
		uFnSetVersionStr = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetVersionStr");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetVersionStr_Params SetVersionStr_Params;
	memset(&SetVersionStr_Params, 0, sizeof(SetVersionStr_Params));
	memcpy_s(&SetVersionStr_Params.Str, sizeof(SetVersionStr_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnSetVersionStr, &SetVersionStr_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetRecord
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHUD::CardInfo_SetRecord(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetRecord = nullptr;

	if (!uFnCardInfo_SetRecord)
	{
		uFnCardInfo_SetRecord = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetRecord");
	}

	UREDGfxMoviePlayer_BattleHUD_execCardInfo_SetRecord_Params CardInfo_SetRecord_Params;
	memset(&CardInfo_SetRecord_Params, 0, sizeof(CardInfo_SetRecord_Params));
	memcpy_s(&CardInfo_SetRecord_Params.Player, sizeof(CardInfo_SetRecord_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetRecord_Params.Str, sizeof(CardInfo_SetRecord_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetRecord, &CardInfo_SetRecord_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetIcon
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::CardInfo_SetIcon(int32_t Player, bool disp)
{
	static UFunction* uFnCardInfo_SetIcon = nullptr;

	if (!uFnCardInfo_SetIcon)
	{
		uFnCardInfo_SetIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetIcon");
	}

	UREDGfxMoviePlayer_BattleHUD_execCardInfo_SetIcon_Params CardInfo_SetIcon_Params;
	memset(&CardInfo_SetIcon_Params, 0, sizeof(CardInfo_SetIcon_Params));
	memcpy_s(&CardInfo_SetIcon_Params.Player, sizeof(CardInfo_SetIcon_Params.Player), &Player, sizeof(Player));
	CardInfo_SetIcon_Params.disp = disp;

	this->ProcessEvent(uFnCardInfo_SetIcon, &CardInfo_SetIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetTitle
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHUD::CardInfo_SetTitle(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetTitle = nullptr;

	if (!uFnCardInfo_SetTitle)
	{
		uFnCardInfo_SetTitle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetTitle");
	}

	UREDGfxMoviePlayer_BattleHUD_execCardInfo_SetTitle_Params CardInfo_SetTitle_Params;
	memset(&CardInfo_SetTitle_Params, 0, sizeof(CardInfo_SetTitle_Params));
	memcpy_s(&CardInfo_SetTitle_Params.Player, sizeof(CardInfo_SetTitle_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetTitle_Params.Str, sizeof(CardInfo_SetTitle_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetTitle, &CardInfo_SetTitle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetGrade
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHUD::CardInfo_SetGrade(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetGrade = nullptr;

	if (!uFnCardInfo_SetGrade)
	{
		uFnCardInfo_SetGrade = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetGrade");
	}

	UREDGfxMoviePlayer_BattleHUD_execCardInfo_SetGrade_Params CardInfo_SetGrade_Params;
	memset(&CardInfo_SetGrade_Params, 0, sizeof(CardInfo_SetGrade_Params));
	memcpy_s(&CardInfo_SetGrade_Params.Player, sizeof(CardInfo_SetGrade_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetGrade_Params.Str, sizeof(CardInfo_SetGrade_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetGrade, &CardInfo_SetGrade_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetPlayerName
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHUD::CardInfo_SetPlayerName(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetPlayerName = nullptr;

	if (!uFnCardInfo_SetPlayerName)
	{
		uFnCardInfo_SetPlayerName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.CardInfo_SetPlayerName");
	}

	UREDGfxMoviePlayer_BattleHUD_execCardInfo_SetPlayerName_Params CardInfo_SetPlayerName_Params;
	memset(&CardInfo_SetPlayerName_Params, 0, sizeof(CardInfo_SetPlayerName_Params));
	memcpy_s(&CardInfo_SetPlayerName_Params.Player, sizeof(CardInfo_SetPlayerName_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetPlayerName_Params.Str, sizeof(CardInfo_SetPlayerName_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetPlayerName, &CardInfo_SetPlayerName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetHandicap
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetHandicap(int32_t Player, bool flag, int32_t val)
{
	static UFunction* uFnSetHandicap = nullptr;

	if (!uFnSetHandicap)
	{
		uFnSetHandicap = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetHandicap");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetHandicap_Params SetHandicap_Params;
	memset(&SetHandicap_Params, 0, sizeof(SetHandicap_Params));
	memcpy_s(&SetHandicap_Params.Player, sizeof(SetHandicap_Params.Player), &Player, sizeof(Player));
	SetHandicap_Params.flag = flag;
	memcpy_s(&SetHandicap_Params.val, sizeof(SetHandicap_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetHandicap, &SetHandicap_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateSpecialCameraFlag
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateSpecialCameraFlag(bool flag)
{
	static UFunction* uFnUpdateSpecialCameraFlag = nullptr;

	if (!uFnUpdateSpecialCameraFlag)
	{
		uFnUpdateSpecialCameraFlag = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateSpecialCameraFlag");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateSpecialCameraFlag_Params UpdateSpecialCameraFlag_Params;
	memset(&UpdateSpecialCameraFlag_Params, 0, sizeof(UpdateSpecialCameraFlag_Params));
	UpdateSpecialCameraFlag_Params.flag = flag;

	this->ProcessEvent(uFnUpdateSpecialCameraFlag, &UpdateSpecialCameraFlag_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateExGauge
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Id                             (CPF_Parm)
// int32_t                        Icon                           (CPF_Parm)
// int32_t                        val                            (CPF_Parm)
// int32_t                        MaxVal                         (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)
// int32_t                        Mode                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateExGauge(int32_t Player, int32_t Id, int32_t Icon, int32_t val, int32_t MaxVal, int32_t Col, int32_t Mode)
{
	static UFunction* uFnUpdateExGauge = nullptr;

	if (!uFnUpdateExGauge)
	{
		uFnUpdateExGauge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateExGauge");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateExGauge_Params UpdateExGauge_Params;
	memset(&UpdateExGauge_Params, 0, sizeof(UpdateExGauge_Params));
	memcpy_s(&UpdateExGauge_Params.Player, sizeof(UpdateExGauge_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateExGauge_Params.Id, sizeof(UpdateExGauge_Params.Id), &Id, sizeof(Id));
	memcpy_s(&UpdateExGauge_Params.Icon, sizeof(UpdateExGauge_Params.Icon), &Icon, sizeof(Icon));
	memcpy_s(&UpdateExGauge_Params.val, sizeof(UpdateExGauge_Params.val), &val, sizeof(val));
	memcpy_s(&UpdateExGauge_Params.MaxVal, sizeof(UpdateExGauge_Params.MaxVal), &MaxVal, sizeof(MaxVal));
	memcpy_s(&UpdateExGauge_Params.Col, sizeof(UpdateExGauge_Params.Col), &Col, sizeof(Col));
	memcpy_s(&UpdateExGauge_Params.Mode, sizeof(UpdateExGauge_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnUpdateExGauge, &UpdateExGauge_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetExGaugeActive
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Id                             (CPF_Parm)
// uint32_t                       Active                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetExGaugeActive(int32_t Player, int32_t Id, bool Active)
{
	static UFunction* uFnSetExGaugeActive = nullptr;

	if (!uFnSetExGaugeActive)
	{
		uFnSetExGaugeActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetExGaugeActive");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetExGaugeActive_Params SetExGaugeActive_Params;
	memset(&SetExGaugeActive_Params, 0, sizeof(SetExGaugeActive_Params));
	memcpy_s(&SetExGaugeActive_Params.Player, sizeof(SetExGaugeActive_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetExGaugeActive_Params.Id, sizeof(SetExGaugeActive_Params.Id), &Id, sizeof(Id));
	SetExGaugeActive_Params.Active = Active;

	this->ProcessEvent(uFnSetExGaugeActive, &SetExGaugeActive_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.ShowExclamation
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Type                           (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::ShowExclamation(int32_t Player, const class FString& Type, int32_t X, int32_t Y, int32_t Dir)
{
	static UFunction* uFnShowExclamation = nullptr;

	if (!uFnShowExclamation)
	{
		uFnShowExclamation = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.ShowExclamation");
	}

	UREDGfxMoviePlayer_BattleHUD_execShowExclamation_Params ShowExclamation_Params;
	memset(&ShowExclamation_Params, 0, sizeof(ShowExclamation_Params));
	memcpy_s(&ShowExclamation_Params.Player, sizeof(ShowExclamation_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ShowExclamation_Params.Type, sizeof(ShowExclamation_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ShowExclamation_Params.X, sizeof(ShowExclamation_Params.X), &X, sizeof(X));
	memcpy_s(&ShowExclamation_Params.Y, sizeof(ShowExclamation_Params.Y), &Y, sizeof(Y));
	memcpy_s(&ShowExclamation_Params.Dir, sizeof(ShowExclamation_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnShowExclamation, &ShowExclamation_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetShinSousaiDamage
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetShinSousaiDamage(int32_t Player, int32_t frame)
{
	static UFunction* uFnSetShinSousaiDamage = nullptr;

	if (!uFnSetShinSousaiDamage)
	{
		uFnSetShinSousaiDamage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetShinSousaiDamage");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetShinSousaiDamage_Params SetShinSousaiDamage_Params;
	memset(&SetShinSousaiDamage_Params, 0, sizeof(SetShinSousaiDamage_Params));
	memcpy_s(&SetShinSousaiDamage_Params.Player, sizeof(SetShinSousaiDamage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetShinSousaiDamage_Params.frame, sizeof(SetShinSousaiDamage_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetShinSousaiDamage, &SetShinSousaiDamage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateShinSousaiTimer
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateShinSousaiTimer(int32_t Time)
{
	static UFunction* uFnUpdateShinSousaiTimer = nullptr;

	if (!uFnUpdateShinSousaiTimer)
	{
		uFnUpdateShinSousaiTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateShinSousaiTimer");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateShinSousaiTimer_Params UpdateShinSousaiTimer_Params;
	memset(&UpdateShinSousaiTimer_Params, 0, sizeof(UpdateShinSousaiTimer_Params));
	memcpy_s(&UpdateShinSousaiTimer_Params.Time, sizeof(UpdateShinSousaiTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateShinSousaiTimer, &UpdateShinSousaiTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetButtonRendaIcon
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Time                           (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       dispGauge                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetButtonRendaIcon(int32_t Player, int32_t Time, int32_t X, int32_t Y, bool dispGauge)
{
	static UFunction* uFnSetButtonRendaIcon = nullptr;

	if (!uFnSetButtonRendaIcon)
	{
		uFnSetButtonRendaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetButtonRendaIcon");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetButtonRendaIcon_Params SetButtonRendaIcon_Params;
	memset(&SetButtonRendaIcon_Params, 0, sizeof(SetButtonRendaIcon_Params));
	memcpy_s(&SetButtonRendaIcon_Params.Player, sizeof(SetButtonRendaIcon_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetButtonRendaIcon_Params.Time, sizeof(SetButtonRendaIcon_Params.Time), &Time, sizeof(Time));
	memcpy_s(&SetButtonRendaIcon_Params.X, sizeof(SetButtonRendaIcon_Params.X), &X, sizeof(X));
	memcpy_s(&SetButtonRendaIcon_Params.Y, sizeof(SetButtonRendaIcon_Params.Y), &Y, sizeof(Y));
	SetButtonRendaIcon_Params.dispGauge = dispGauge;

	this->ProcessEvent(uFnSetButtonRendaIcon, &SetButtonRendaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetLeverGachaIcon
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Time                           (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       dispGauge                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetLeverGachaIcon(int32_t Player, int32_t Time, int32_t X, int32_t Y, bool dispGauge)
{
	static UFunction* uFnSetLeverGachaIcon = nullptr;

	if (!uFnSetLeverGachaIcon)
	{
		uFnSetLeverGachaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetLeverGachaIcon");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetLeverGachaIcon_Params SetLeverGachaIcon_Params;
	memset(&SetLeverGachaIcon_Params, 0, sizeof(SetLeverGachaIcon_Params));
	memcpy_s(&SetLeverGachaIcon_Params.Player, sizeof(SetLeverGachaIcon_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetLeverGachaIcon_Params.Time, sizeof(SetLeverGachaIcon_Params.Time), &Time, sizeof(Time));
	memcpy_s(&SetLeverGachaIcon_Params.X, sizeof(SetLeverGachaIcon_Params.X), &X, sizeof(X));
	memcpy_s(&SetLeverGachaIcon_Params.Y, sizeof(SetLeverGachaIcon_Params.Y), &Y, sizeof(Y));
	SetLeverGachaIcon_Params.dispGauge = dispGauge;

	this->ProcessEvent(uFnSetLeverGachaIcon, &SetLeverGachaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetOffscreenCharaIcon
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetOffscreenCharaIcon(int32_t Player, bool disp, int32_t PosX, int32_t Dir)
{
	static UFunction* uFnSetOffscreenCharaIcon = nullptr;

	if (!uFnSetOffscreenCharaIcon)
	{
		uFnSetOffscreenCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetOffscreenCharaIcon");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetOffscreenCharaIcon_Params SetOffscreenCharaIcon_Params;
	memset(&SetOffscreenCharaIcon_Params, 0, sizeof(SetOffscreenCharaIcon_Params));
	memcpy_s(&SetOffscreenCharaIcon_Params.Player, sizeof(SetOffscreenCharaIcon_Params.Player), &Player, sizeof(Player));
	SetOffscreenCharaIcon_Params.disp = disp;
	memcpy_s(&SetOffscreenCharaIcon_Params.PosX, sizeof(SetOffscreenCharaIcon_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&SetOffscreenCharaIcon_Params.Dir, sizeof(SetOffscreenCharaIcon_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnSetOffscreenCharaIcon, &SetOffscreenCharaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.ReqNegativePenalty
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::ReqNegativePenalty(int32_t Player)
{
	static UFunction* uFnReqNegativePenalty = nullptr;

	if (!uFnReqNegativePenalty)
	{
		uFnReqNegativePenalty = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.ReqNegativePenalty");
	}

	UREDGfxMoviePlayer_BattleHUD_execReqNegativePenalty_Params ReqNegativePenalty_Params;
	memset(&ReqNegativePenalty_Params, 0, sizeof(ReqNegativePenalty_Params));
	memcpy_s(&ReqNegativePenalty_Params.Player, sizeof(ReqNegativePenalty_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnReqNegativePenalty, &ReqNegativePenalty_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetNegativeDangerDisp
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       level2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetNegativeDangerDisp(int32_t Player, bool disp, bool level2)
{
	static UFunction* uFnSetNegativeDangerDisp = nullptr;

	if (!uFnSetNegativeDangerDisp)
	{
		uFnSetNegativeDangerDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetNegativeDangerDisp");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetNegativeDangerDisp_Params SetNegativeDangerDisp_Params;
	memset(&SetNegativeDangerDisp_Params, 0, sizeof(SetNegativeDangerDisp_Params));
	memcpy_s(&SetNegativeDangerDisp_Params.Player, sizeof(SetNegativeDangerDisp_Params.Player), &Player, sizeof(Player));
	SetNegativeDangerDisp_Params.disp = disp;
	SetNegativeDangerDisp_Params.level2 = level2;

	this->ProcessEvent(uFnSetNegativeDangerDisp, &SetNegativeDangerDisp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateTensionBalance
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateTensionBalance(float val1, float val2)
{
	static UFunction* uFnUpdateTensionBalance = nullptr;

	if (!uFnUpdateTensionBalance)
	{
		uFnUpdateTensionBalance = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateTensionBalance");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateTensionBalance_Params UpdateTensionBalance_Params;
	memset(&UpdateTensionBalance_Params, 0, sizeof(UpdateTensionBalance_Params));
	memcpy_s(&UpdateTensionBalance_Params.val1, sizeof(UpdateTensionBalance_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateTensionBalance_Params.val2, sizeof(UpdateTensionBalance_Params.val2), &val2, sizeof(val2));

	this->ProcessEvent(uFnUpdateTensionBalance, &UpdateTensionBalance_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetCounterHitByGuardBalance
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       isCounterHit                   (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetCounterHitByGuardBalance(int32_t Player, bool isCounterHit)
{
	static UFunction* uFnSetCounterHitByGuardBalance = nullptr;

	if (!uFnSetCounterHitByGuardBalance)
	{
		uFnSetCounterHitByGuardBalance = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetCounterHitByGuardBalance");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetCounterHitByGuardBalance_Params SetCounterHitByGuardBalance_Params;
	memset(&SetCounterHitByGuardBalance_Params, 0, sizeof(SetCounterHitByGuardBalance_Params));
	memcpy_s(&SetCounterHitByGuardBalance_Params.Player, sizeof(SetCounterHitByGuardBalance_Params.Player), &Player, sizeof(Player));
	SetCounterHitByGuardBalance_Params.isCounterHit = isCounterHit;

	this->ProcessEvent(uFnSetCounterHitByGuardBalance, &SetCounterHitByGuardBalance_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateGuardBalance
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)
// float                          red1                           (CPF_Parm)
// float                          red2                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateGuardBalance(float val1, float val2, float red1, float red2)
{
	static UFunction* uFnUpdateGuardBalance = nullptr;

	if (!uFnUpdateGuardBalance)
	{
		uFnUpdateGuardBalance = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateGuardBalance");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateGuardBalance_Params UpdateGuardBalance_Params;
	memset(&UpdateGuardBalance_Params, 0, sizeof(UpdateGuardBalance_Params));
	memcpy_s(&UpdateGuardBalance_Params.val1, sizeof(UpdateGuardBalance_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateGuardBalance_Params.val2, sizeof(UpdateGuardBalance_Params.val2), &val2, sizeof(val2));
	memcpy_s(&UpdateGuardBalance_Params.red1, sizeof(UpdateGuardBalance_Params.red1), &red1, sizeof(red1));
	memcpy_s(&UpdateGuardBalance_Params.red2, sizeof(UpdateGuardBalance_Params.red2), &red2, sizeof(red2));

	this->ProcessEvent(uFnUpdateGuardBalance, &UpdateGuardBalance_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.RequestInfoText
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        TextID                         (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// int32_t                        subID1                         (CPF_Parm)
// int32_t                        subID2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::RequestInfoText(int32_t TextID, int32_t Player, int32_t subID1, int32_t subID2)
{
	static UFunction* uFnRequestInfoText = nullptr;

	if (!uFnRequestInfoText)
	{
		uFnRequestInfoText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.RequestInfoText");
	}

	UREDGfxMoviePlayer_BattleHUD_execRequestInfoText_Params RequestInfoText_Params;
	memset(&RequestInfoText_Params, 0, sizeof(RequestInfoText_Params));
	memcpy_s(&RequestInfoText_Params.TextID, sizeof(RequestInfoText_Params.TextID), &TextID, sizeof(TextID));
	memcpy_s(&RequestInfoText_Params.Player, sizeof(RequestInfoText_Params.Player), &Player, sizeof(Player));
	memcpy_s(&RequestInfoText_Params.subID1, sizeof(RequestInfoText_Params.subID1), &subID1, sizeof(subID1));
	memcpy_s(&RequestInfoText_Params.subID2, sizeof(RequestInfoText_Params.subID2), &subID2, sizeof(subID2));

	this->ProcessEvent(uFnRequestInfoText, &RequestInfoText_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.DispBurstSealIcon
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       Input                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::DispBurstSealIcon(int32_t Player, bool disp, bool Input)
{
	static UFunction* uFnDispBurstSealIcon = nullptr;

	if (!uFnDispBurstSealIcon)
	{
		uFnDispBurstSealIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.DispBurstSealIcon");
	}

	UREDGfxMoviePlayer_BattleHUD_execDispBurstSealIcon_Params DispBurstSealIcon_Params;
	memset(&DispBurstSealIcon_Params, 0, sizeof(DispBurstSealIcon_Params));
	memcpy_s(&DispBurstSealIcon_Params.Player, sizeof(DispBurstSealIcon_Params.Player), &Player, sizeof(Player));
	DispBurstSealIcon_Params.disp = disp;
	DispBurstSealIcon_Params.Input = Input;

	this->ProcessEvent(uFnDispBurstSealIcon, &DispBurstSealIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateRoundWin
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        WinCount                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateRoundWin(int32_t Player, int32_t WinCount)
{
	static UFunction* uFnUpdateRoundWin = nullptr;

	if (!uFnUpdateRoundWin)
	{
		uFnUpdateRoundWin = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateRoundWin");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateRoundWin_Params UpdateRoundWin_Params;
	memset(&UpdateRoundWin_Params, 0, sizeof(UpdateRoundWin_Params));
	memcpy_s(&UpdateRoundWin_Params.Player, sizeof(UpdateRoundWin_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateRoundWin_Params.WinCount, sizeof(UpdateRoundWin_Params.WinCount), &WinCount, sizeof(WinCount));

	this->ProcessEvent(uFnUpdateRoundWin, &UpdateRoundWin_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetupRoundNum
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        round1                         (CPF_Parm)
// int32_t                        round2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::SetupRoundNum(int32_t round1, int32_t round2)
{
	static UFunction* uFnSetupRoundNum = nullptr;

	if (!uFnSetupRoundNum)
	{
		uFnSetupRoundNum = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetupRoundNum");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetupRoundNum_Params SetupRoundNum_Params;
	memset(&SetupRoundNum_Params, 0, sizeof(SetupRoundNum_Params));
	memcpy_s(&SetupRoundNum_Params.round1, sizeof(SetupRoundNum_Params.round1), &round1, sizeof(round1));
	memcpy_s(&SetupRoundNum_Params.round2, sizeof(SetupRoundNum_Params.round2), &round2, sizeof(round2));

	this->ProcessEvent(uFnSetupRoundNum, &SetupRoundNum_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.HideCombo
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::HideCombo(int32_t Player)
{
	static UFunction* uFnHideCombo = nullptr;

	if (!uFnHideCombo)
	{
		uFnHideCombo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.HideCombo");
	}

	UREDGfxMoviePlayer_BattleHUD_execHideCombo_Params HideCombo_Params;
	memset(&HideCombo_Params, 0, sizeof(HideCombo_Params));
	memcpy_s(&HideCombo_Params.Player, sizeof(HideCombo_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnHideCombo, &HideCombo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.ShowCombo
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        combo                          (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       isImperfect                    (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm)
// uint32_t                       damagedisp                     (CPF_Parm)
// int32_t                        comp0                          (CPF_Parm)
// int32_t                        comp1                          (CPF_Parm)
// int32_t                        comp2                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::ShowCombo(int32_t combo, int32_t Player, bool isImperfect, int32_t Damage, bool damagedisp, int32_t comp0, int32_t comp1, int32_t comp2)
{
	static UFunction* uFnShowCombo = nullptr;

	if (!uFnShowCombo)
	{
		uFnShowCombo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.ShowCombo");
	}

	UREDGfxMoviePlayer_BattleHUD_execShowCombo_Params ShowCombo_Params;
	memset(&ShowCombo_Params, 0, sizeof(ShowCombo_Params));
	memcpy_s(&ShowCombo_Params.combo, sizeof(ShowCombo_Params.combo), &combo, sizeof(combo));
	memcpy_s(&ShowCombo_Params.Player, sizeof(ShowCombo_Params.Player), &Player, sizeof(Player));
	ShowCombo_Params.isImperfect = isImperfect;
	memcpy_s(&ShowCombo_Params.Damage, sizeof(ShowCombo_Params.Damage), &Damage, sizeof(Damage));
	ShowCombo_Params.damagedisp = damagedisp;
	memcpy_s(&ShowCombo_Params.comp0, sizeof(ShowCombo_Params.comp0), &comp0, sizeof(comp0));
	memcpy_s(&ShowCombo_Params.comp1, sizeof(ShowCombo_Params.comp1), &comp1, sizeof(comp1));
	memcpy_s(&ShowCombo_Params.comp2, sizeof(ShowCombo_Params.comp2), &comp2, sizeof(comp2));

	this->ProcessEvent(uFnShowCombo, &ShowCombo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateTimer
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateTimer(int32_t Time)
{
	static UFunction* uFnUpdateTimer = nullptr;

	if (!uFnUpdateTimer)
	{
		uFnUpdateTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateTimer");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateTimer_Params UpdateTimer_Params;
	memset(&UpdateTimer_Params, 0, sizeof(UpdateTimer_Params));
	memcpy_s(&UpdateTimer_Params.Time, sizeof(UpdateTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateTimer, &UpdateTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateBurst
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateBurst(float val1, float val2)
{
	static UFunction* uFnUpdateBurst = nullptr;

	if (!uFnUpdateBurst)
	{
		uFnUpdateBurst = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateBurst");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateBurst_Params UpdateBurst_Params;
	memset(&UpdateBurst_Params, 0, sizeof(UpdateBurst_Params));
	memcpy_s(&UpdateBurst_Params.val1, sizeof(UpdateBurst_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateBurst_Params.val2, sizeof(UpdateBurst_Params.val2), &val2, sizeof(val2));

	this->ProcessEvent(uFnUpdateBurst, &UpdateBurst_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.SetTensionState
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  State                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleHUD::SetTensionState(int32_t Player, const class FString& State)
{
	static UFunction* uFnSetTensionState = nullptr;

	if (!uFnSetTensionState)
	{
		uFnSetTensionState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.SetTensionState");
	}

	UREDGfxMoviePlayer_BattleHUD_execSetTensionState_Params SetTensionState_Params;
	memset(&SetTensionState_Params, 0, sizeof(SetTensionState_Params));
	memcpy_s(&SetTensionState_Params.Player, sizeof(SetTensionState_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetTensionState_Params.State, sizeof(SetTensionState_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnSetTensionState, &SetTensionState_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateTension
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// float                          tens1                          (CPF_Parm)
// int32_t                        tescol1                        (CPF_Parm)
// float                          tens2                          (CPF_Parm)
// int32_t                        tescol2                        (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateTension(float tens1, int32_t tescol1, float tens2, int32_t tescol2)
{
	static UFunction* uFnUpdateTension = nullptr;

	if (!uFnUpdateTension)
	{
		uFnUpdateTension = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateTension");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateTension_Params UpdateTension_Params;
	memset(&UpdateTension_Params, 0, sizeof(UpdateTension_Params));
	memcpy_s(&UpdateTension_Params.tens1, sizeof(UpdateTension_Params.tens1), &tens1, sizeof(tens1));
	memcpy_s(&UpdateTension_Params.tescol1, sizeof(UpdateTension_Params.tescol1), &tescol1, sizeof(tescol1));
	memcpy_s(&UpdateTension_Params.tens2, sizeof(UpdateTension_Params.tens2), &tens2, sizeof(tens2));
	memcpy_s(&UpdateTension_Params.tescol2, sizeof(UpdateTension_Params.tescol2), &tescol2, sizeof(tescol2));

	this->ProcessEvent(uFnUpdateTension, &UpdateTension_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateHP
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:
// float                          hp1                            (CPF_Parm)
// float                          hp2                            (CPF_Parm)
// float                          red1                           (CPF_Parm)
// float                          red2                           (CPF_Parm)
// float                          white1                         (CPF_Parm)
// float                          white2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleHUD::UpdateHP(float hp1, float hp2, float red1, float red2, float white1, float white2)
{
	static UFunction* uFnUpdateHP = nullptr;

	if (!uFnUpdateHP)
	{
		uFnUpdateHP = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.UpdateHP");
	}

	UREDGfxMoviePlayer_BattleHUD_execUpdateHP_Params UpdateHP_Params;
	memset(&UpdateHP_Params, 0, sizeof(UpdateHP_Params));
	memcpy_s(&UpdateHP_Params.hp1, sizeof(UpdateHP_Params.hp1), &hp1, sizeof(hp1));
	memcpy_s(&UpdateHP_Params.hp2, sizeof(UpdateHP_Params.hp2), &hp2, sizeof(hp2));
	memcpy_s(&UpdateHP_Params.red1, sizeof(UpdateHP_Params.red1), &red1, sizeof(red1));
	memcpy_s(&UpdateHP_Params.red2, sizeof(UpdateHP_Params.red2), &red2, sizeof(red2));
	memcpy_s(&UpdateHP_Params.white1, sizeof(UpdateHP_Params.white1), &white1, sizeof(white1));
	memcpy_s(&UpdateHP_Params.white2, sizeof(UpdateHP_Params.white2), &white2, sizeof(white2));

	this->ProcessEvent(uFnUpdateHP, &UpdateHP_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.ResetOnRound
// [0x00120000] (FUNC_Public | FUNC_Delegate | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleHUD::ResetOnRound()
{
	static UFunction* uFnResetOnRound = nullptr;

	if (!uFnResetOnRound)
	{
		uFnResetOnRound = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.ResetOnRound");
	}

	UREDGfxMoviePlayer_BattleHUD_execResetOnRound_Params ResetOnRound_Params;
	memset(&ResetOnRound_Params, 0, sizeof(ResetOnRound_Params));

	this->ProcessEvent(uFnResetOnRound, &ResetOnRound_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleHUD.GetPlayerPosX
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37141])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleHUD::GetPlayerPosX(int32_t Player)
{
	static UFunction* uFnGetPlayerPosX = nullptr;

	if (!uFnGetPlayerPosX)
	{
		uFnGetPlayerPosX = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleHUD.GetPlayerPosX");
	}

	UREDGfxMoviePlayer_BattleHUD_execGetPlayerPosX_Params GetPlayerPosX_Params;
	memset(&GetPlayerPosX_Params, 0, sizeof(GetPlayerPosX_Params));
	memcpy_s(&GetPlayerPosX_Params.Player, sizeof(GetPlayerPosX_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetPlayerPosX, &GetPlayerPosX_Params, nullptr);

	return GetPlayerPosX_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDBurst
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40704])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDBurst()
{
	static UFunction* uFnUpdateHUDBurst = nullptr;

	if (!uFnUpdateHUDBurst)
	{
		uFnUpdateHUDBurst = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDBurst");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDBurst_Params UpdateHUDBurst_Params;
	memset(&UpdateHUDBurst_Params, 0, sizeof(UpdateHUDBurst_Params));

	this->ProcessEvent(uFnUpdateHUDBurst, &UpdateHUDBurst_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDDangerDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40705])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDDangerDamage()
{
	static UFunction* uFnUpdateHUDDangerDamage = nullptr;

	if (!uFnUpdateHUDDangerDamage)
	{
		uFnUpdateHUDDangerDamage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDDangerDamage");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDDangerDamage_Params UpdateHUDDangerDamage_Params;
	memset(&UpdateHUDDangerDamage_Params, 0, sizeof(UpdateHUDDangerDamage_Params));

	this->ProcessEvent(uFnUpdateHUDDangerDamage, &UpdateHUDDangerDamage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetDangerDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39725])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetDangerDamage(int32_t Player, int32_t frame)
{
	static UFunction* uFnSetDangerDamage = nullptr;

	if (!uFnSetDangerDamage)
	{
		uFnSetDangerDamage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetDangerDamage");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetDangerDamage_Params SetDangerDamage_Params;
	memset(&SetDangerDamage_Params, 0, sizeof(SetDangerDamage_Params));
	memcpy_s(&SetDangerDamage_Params.Player, sizeof(SetDangerDamage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetDangerDamage_Params.frame, sizeof(SetDangerDamage_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetDangerDamage, &SetDangerDamage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDNegaPenaPos
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40709])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDNegaPenaPos()
{
	static UFunction* uFnUpdateHUDNegaPenaPos = nullptr;

	if (!uFnUpdateHUDNegaPenaPos)
	{
		uFnUpdateHUDNegaPenaPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDNegaPenaPos");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDNegaPenaPos_Params UpdateHUDNegaPenaPos_Params;
	memset(&UpdateHUDNegaPenaPos_Params, 0, sizeof(UpdateHUDNegaPenaPos_Params));

	this->ProcessEvent(uFnUpdateHUDNegaPenaPos, &UpdateHUDNegaPenaPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateNegaPenaPos
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40791])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class UGFxObject*              mc                             (CPF_Parm)
// float                          OffsetY                        (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::UpdateNegaPenaPos(int32_t Player, class UGFxObject* mc, float OffsetY)
{
	static UFunction* uFnUpdateNegaPenaPos = nullptr;

	if (!uFnUpdateNegaPenaPos)
	{
		uFnUpdateNegaPenaPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateNegaPenaPos");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateNegaPenaPos_Params UpdateNegaPenaPos_Params;
	memset(&UpdateNegaPenaPos_Params, 0, sizeof(UpdateNegaPenaPos_Params));
	memcpy_s(&UpdateNegaPenaPos_Params.Player, sizeof(UpdateNegaPenaPos_Params.Player), &Player, sizeof(Player));
	UpdateNegaPenaPos_Params.mc = mc;
	memcpy_s(&UpdateNegaPenaPos_Params.OffsetY, sizeof(UpdateNegaPenaPos_Params.OffsetY), &OffsetY, sizeof(OffsetY));

	this->ProcessEvent(uFnUpdateNegaPenaPos, &UpdateNegaPenaPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDNegaPena
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40708])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDNegaPena()
{
	static UFunction* uFnUpdateHUDNegaPena = nullptr;

	if (!uFnUpdateHUDNegaPena)
	{
		uFnUpdateHUDNegaPena = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDNegaPena");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDNegaPena_Params UpdateHUDNegaPena_Params;
	memset(&UpdateHUDNegaPena_Params, 0, sizeof(UpdateHUDNegaPena_Params));

	this->ProcessEvent(uFnUpdateHUDNegaPena, &UpdateHUDNegaPena_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.ReqHUDNegativePenalty
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39350])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::ReqHUDNegativePenalty(int32_t Player)
{
	static UFunction* uFnReqHUDNegativePenalty = nullptr;

	if (!uFnReqHUDNegativePenalty)
	{
		uFnReqHUDNegativePenalty = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.ReqHUDNegativePenalty");
	}

	UREDGfxMoviePlayer_BattleDownside_execReqHUDNegativePenalty_Params ReqHUDNegativePenalty_Params;
	memset(&ReqHUDNegativePenalty_Params, 0, sizeof(ReqHUDNegativePenalty_Params));
	memcpy_s(&ReqHUDNegativePenalty_Params.Player, sizeof(ReqHUDNegativePenalty_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnReqHUDNegativePenalty, &ReqHUDNegativePenalty_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDNegativeDanger
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40710])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDNegativeDanger()
{
	static UFunction* uFnUpdateHUDNegativeDanger = nullptr;

	if (!uFnUpdateHUDNegativeDanger)
	{
		uFnUpdateHUDNegativeDanger = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDNegativeDanger");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDNegativeDanger_Params UpdateHUDNegativeDanger_Params;
	memset(&UpdateHUDNegativeDanger_Params, 0, sizeof(UpdateHUDNegativeDanger_Params));

	this->ProcessEvent(uFnUpdateHUDNegativeDanger, &UpdateHUDNegativeDanger_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetHUDNegativeDangerDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39758])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       level2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetHUDNegativeDangerDisp(int32_t Player, bool disp, bool level2)
{
	static UFunction* uFnSetHUDNegativeDangerDisp = nullptr;

	if (!uFnSetHUDNegativeDangerDisp)
	{
		uFnSetHUDNegativeDangerDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetHUDNegativeDangerDisp");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetHUDNegativeDangerDisp_Params SetHUDNegativeDangerDisp_Params;
	memset(&SetHUDNegativeDangerDisp_Params, 0, sizeof(SetHUDNegativeDangerDisp_Params));
	memcpy_s(&SetHUDNegativeDangerDisp_Params.Player, sizeof(SetHUDNegativeDangerDisp_Params.Player), &Player, sizeof(Player));
	SetHUDNegativeDangerDisp_Params.disp = disp;
	SetHUDNegativeDangerDisp_Params.level2 = level2;

	this->ProcessEvent(uFnSetHUDNegativeDangerDisp, &SetHUDNegativeDangerDisp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetHUDExGaugeActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39757])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetHUDExGaugeActive(int32_t Player)
{
	static UFunction* uFnSetHUDExGaugeActive = nullptr;

	if (!uFnSetHUDExGaugeActive)
	{
		uFnSetHUDExGaugeActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetHUDExGaugeActive");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetHUDExGaugeActive_Params SetHUDExGaugeActive_Params;
	memset(&SetHUDExGaugeActive_Params, 0, sizeof(SetHUDExGaugeActive_Params));
	memcpy_s(&SetHUDExGaugeActive_Params.Player, sizeof(SetHUDExGaugeActive_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSetHUDExGaugeActive, &SetHUDExGaugeActive_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDExGauge
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40707])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Id                             (CPF_Parm)
// int32_t                        Icon                           (CPF_Parm)
// int32_t                        val                            (CPF_Parm)
// int32_t                        MaxVal                         (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)
// int32_t                        Mode                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDExGauge(int32_t Player, int32_t Id, int32_t Icon, int32_t val, int32_t MaxVal, int32_t Col, int32_t Mode)
{
	static UFunction* uFnUpdateHUDExGauge = nullptr;

	if (!uFnUpdateHUDExGauge)
	{
		uFnUpdateHUDExGauge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDExGauge");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDExGauge_Params UpdateHUDExGauge_Params;
	memset(&UpdateHUDExGauge_Params, 0, sizeof(UpdateHUDExGauge_Params));
	memcpy_s(&UpdateHUDExGauge_Params.Player, sizeof(UpdateHUDExGauge_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateHUDExGauge_Params.Id, sizeof(UpdateHUDExGauge_Params.Id), &Id, sizeof(Id));
	memcpy_s(&UpdateHUDExGauge_Params.Icon, sizeof(UpdateHUDExGauge_Params.Icon), &Icon, sizeof(Icon));
	memcpy_s(&UpdateHUDExGauge_Params.val, sizeof(UpdateHUDExGauge_Params.val), &val, sizeof(val));
	memcpy_s(&UpdateHUDExGauge_Params.MaxVal, sizeof(UpdateHUDExGauge_Params.MaxVal), &MaxVal, sizeof(MaxVal));
	memcpy_s(&UpdateHUDExGauge_Params.Col, sizeof(UpdateHUDExGauge_Params.Col), &Col, sizeof(Col));
	memcpy_s(&UpdateHUDExGauge_Params.Mode, sizeof(UpdateHUDExGauge_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnUpdateHUDExGauge, &UpdateHUDExGauge_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateExGaugeTrig
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40667])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateExGaugeTrig()
{
	static UFunction* uFnUpdateExGaugeTrig = nullptr;

	if (!uFnUpdateExGaugeTrig)
	{
		uFnUpdateExGaugeTrig = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateExGaugeTrig");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateExGaugeTrig_Params UpdateExGaugeTrig_Params;
	memset(&UpdateExGaugeTrig_Params, 0, sizeof(UpdateExGaugeTrig_Params));

	this->ProcessEvent(uFnUpdateExGaugeTrig, &UpdateExGaugeTrig_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateExGaugeActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40666])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateExGaugeActive()
{
	static UFunction* uFnUpdateExGaugeActive = nullptr;

	if (!uFnUpdateExGaugeActive)
	{
		uFnUpdateExGaugeActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateExGaugeActive");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateExGaugeActive_Params UpdateExGaugeActive_Params;
	memset(&UpdateExGaugeActive_Params, 0, sizeof(UpdateExGaugeActive_Params));

	this->ProcessEvent(uFnUpdateExGaugeActive, &UpdateExGaugeActive_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDDangerTime
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40706])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDDangerTime()
{
	static UFunction* uFnUpdateHUDDangerTime = nullptr;

	if (!uFnUpdateHUDDangerTime)
	{
		uFnUpdateHUDDangerTime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDDangerTime");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDDangerTime_Params UpdateHUDDangerTime_Params;
	memset(&UpdateHUDDangerTime_Params, 0, sizeof(UpdateHUDDangerTime_Params));

	this->ProcessEvent(uFnUpdateHUDDangerTime, &UpdateHUDDangerTime_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetHUDDangerTimeMC
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39756])
// Parameter Info:
// class UGFxObject*              mc                             (CPF_Parm)
// float                          Time                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetHUDDangerTimeMC(class UGFxObject* mc, float Time)
{
	static UFunction* uFnSetHUDDangerTimeMC = nullptr;

	if (!uFnSetHUDDangerTimeMC)
	{
		uFnSetHUDDangerTimeMC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetHUDDangerTimeMC");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetHUDDangerTimeMC_Params SetHUDDangerTimeMC_Params;
	memset(&SetHUDDangerTimeMC_Params, 0, sizeof(SetHUDDangerTimeMC_Params));
	SetHUDDangerTimeMC_Params.mc = mc;
	memcpy_s(&SetHUDDangerTimeMC_Params.Time, sizeof(SetHUDDangerTimeMC_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnSetHUDDangerTimeMC, &SetHUDDangerTimeMC_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.ChangeTensionCoverColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36106])
// Parameter Info:
// int32_t                        MulColor                       (CPF_Parm)
// int32_t                        AddColor                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::ChangeTensionCoverColor(int32_t MulColor, int32_t AddColor)
{
	static UFunction* uFnChangeTensionCoverColor = nullptr;

	if (!uFnChangeTensionCoverColor)
	{
		uFnChangeTensionCoverColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.ChangeTensionCoverColor");
	}

	UREDGfxMoviePlayer_BattleDownside_execChangeTensionCoverColor_Params ChangeTensionCoverColor_Params;
	memset(&ChangeTensionCoverColor_Params, 0, sizeof(ChangeTensionCoverColor_Params));
	memcpy_s(&ChangeTensionCoverColor_Params.MulColor, sizeof(ChangeTensionCoverColor_Params.MulColor), &MulColor, sizeof(MulColor));
	memcpy_s(&ChangeTensionCoverColor_Params.AddColor, sizeof(ChangeTensionCoverColor_Params.AddColor), &AddColor, sizeof(AddColor));

	this->ProcessEvent(uFnChangeTensionCoverColor, &ChangeTensionCoverColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDTensionState
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40713])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDTensionState(int32_t Player)
{
	static UFunction* uFnUpdateHUDTensionState = nullptr;

	if (!uFnUpdateHUDTensionState)
	{
		uFnUpdateHUDTensionState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDTensionState");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDTensionState_Params UpdateHUDTensionState_Params;
	memset(&UpdateHUDTensionState_Params, 0, sizeof(UpdateHUDTensionState_Params));
	memcpy_s(&UpdateHUDTensionState_Params.Player, sizeof(UpdateHUDTensionState_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateHUDTensionState, &UpdateHUDTensionState_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDTensGaugeColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40711])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDTensGaugeColor()
{
	static UFunction* uFnUpdateHUDTensGaugeColor = nullptr;

	if (!uFnUpdateHUDTensGaugeColor)
	{
		uFnUpdateHUDTensGaugeColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDTensGaugeColor");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDTensGaugeColor_Params UpdateHUDTensGaugeColor_Params;
	memset(&UpdateHUDTensGaugeColor_Params, 0, sizeof(UpdateHUDTensGaugeColor_Params));

	this->ProcessEvent(uFnUpdateHUDTensGaugeColor, &UpdateHUDTensGaugeColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDTension
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40712])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateHUDTension()
{
	static UFunction* uFnUpdateHUDTension = nullptr;

	if (!uFnUpdateHUDTension)
	{
		uFnUpdateHUDTension = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateHUDTension");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateHUDTension_Params UpdateHUDTension_Params;
	memset(&UpdateHUDTension_Params, 0, sizeof(UpdateHUDTension_Params));

	this->ProcessEvent(uFnUpdateHUDTension, &UpdateHUDTension_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40595])
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::UpdateAll()
{
	static UFunction* uFnUpdateAll = nullptr;

	if (!uFnUpdateAll)
	{
		uFnUpdateAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateAll");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateAll_Params UpdateAll_Params;
	memset(&UpdateAll_Params, 0, sizeof(UpdateAll_Params));

	this->ProcessEvent(uFnUpdateAll, &UpdateAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.Update
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::Update(float DeltaTime)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.Update");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.DeltaTime, sizeof(Update_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.FadeOut
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::FadeOut()
{
	static UFunction* uFnFadeOut = nullptr;

	if (!uFnFadeOut)
	{
		uFnFadeOut = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.FadeOut");
	}

	UREDGfxMoviePlayer_BattleDownside_execFadeOut_Params FadeOut_Params;
	memset(&FadeOut_Params, 0, sizeof(FadeOut_Params));

	this->ProcessEvent(uFnFadeOut, &FadeOut_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.FadeIn
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::FadeIn()
{
	static UFunction* uFnFadeIn = nullptr;

	if (!uFnFadeIn)
	{
		uFnFadeIn = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.FadeIn");
	}

	UREDGfxMoviePlayer_BattleDownside_execFadeIn_Params FadeIn_Params;
	memset(&FadeIn_Params, 0, sizeof(FadeIn_Params));

	this->ProcessEvent(uFnFadeIn, &FadeIn_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.HideAll
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::HideAll()
{
	static UFunction* uFnHideAll = nullptr;

	if (!uFnHideAll)
	{
		uFnHideAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.HideAll");
	}

	UREDGfxMoviePlayer_BattleDownside_execHideAll_Params HideAll_Params;
	memset(&HideAll_Params, 0, sizeof(HideAll_Params));

	this->ProcessEvent(uFnHideAll, &HideAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.ShowAnime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::ShowAnime()
{
	static UFunction* uFnShowAnime = nullptr;

	if (!uFnShowAnime)
	{
		uFnShowAnime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.ShowAnime");
	}

	UREDGfxMoviePlayer_BattleDownside_execShowAnime_Params ShowAnime_Params;
	memset(&ShowAnime_Params, 0, sizeof(ShowAnime_Params));

	this->ProcessEvent(uFnShowAnime, &ShowAnime_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.ShowQuick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::ShowQuick()
{
	static UFunction* uFnShowQuick = nullptr;

	if (!uFnShowQuick)
	{
		uFnShowQuick = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.ShowQuick");
	}

	UREDGfxMoviePlayer_BattleDownside_execShowQuick_Params ShowQuick_Params;
	memset(&ShowQuick_Params, 0, sizeof(ShowQuick_Params));

	this->ProcessEvent(uFnShowQuick, &ShowQuick_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.AdjustPos
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13211])
// Parameter Info:
// int32_t                        offsetUp                       (CPF_Parm)
// int32_t                        offsetDown                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::AdjustPos(int32_t offsetUp, int32_t offsetDown)
{
	static UFunction* uFnAdjustPos = nullptr;

	if (!uFnAdjustPos)
	{
		uFnAdjustPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.AdjustPos");
	}

	UREDGfxMoviePlayer_BattleDownside_execAdjustPos_Params AdjustPos_Params;
	memset(&AdjustPos_Params, 0, sizeof(AdjustPos_Params));
	memcpy_s(&AdjustPos_Params.offsetUp, sizeof(AdjustPos_Params.offsetUp), &offsetUp, sizeof(offsetUp));
	memcpy_s(&AdjustPos_Params.offsetDown, sizeof(AdjustPos_Params.offsetDown), &offsetDown, sizeof(offsetDown));

	this->ProcessEvent(uFnAdjustPos, &AdjustPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.RVNBlinkEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13390])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::RVNBlinkEffect(int32_t Player)
{
	static UFunction* uFnRVNBlinkEffect = nullptr;

	if (!uFnRVNBlinkEffect)
	{
		uFnRVNBlinkEffect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.RVNBlinkEffect");
	}

	UREDGfxMoviePlayer_BattleDownside_execRVNBlinkEffect_Params RVNBlinkEffect_Params;
	memset(&RVNBlinkEffect_Params, 0, sizeof(RVNBlinkEffect_Params));
	memcpy_s(&RVNBlinkEffect_Params.Player, sizeof(RVNBlinkEffect_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnRVNBlinkEffect, &RVNBlinkEffect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.RVNRiseEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13391])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::RVNRiseEffect(int32_t Player)
{
	static UFunction* uFnRVNRiseEffect = nullptr;

	if (!uFnRVNRiseEffect)
	{
		uFnRVNRiseEffect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.RVNRiseEffect");
	}

	UREDGfxMoviePlayer_BattleDownside_execRVNRiseEffect_Params RVNRiseEffect_Params;
	memset(&RVNRiseEffect_Params, 0, sizeof(RVNRiseEffect_Params));
	memcpy_s(&RVNRiseEffect_Params.Player, sizeof(RVNRiseEffect_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnRVNRiseEffect, &RVNRiseEffect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.BurstKakuseiEff
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13230])
// Parameter Info:
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::BurstKakuseiEff(int32_t Dir)
{
	static UFunction* uFnBurstKakuseiEff = nullptr;

	if (!uFnBurstKakuseiEff)
	{
		uFnBurstKakuseiEff = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.BurstKakuseiEff");
	}

	UREDGfxMoviePlayer_BattleDownside_execBurstKakuseiEff_Params BurstKakuseiEff_Params;
	memset(&BurstKakuseiEff_Params, 0, sizeof(BurstKakuseiEff_Params));
	memcpy_s(&BurstKakuseiEff_Params.Dir, sizeof(BurstKakuseiEff_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnBurstKakuseiEff, &BurstKakuseiEff_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetBurstKakusei
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13400])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetBurstKakusei(int32_t Player, bool flag)
{
	static UFunction* uFnSetBurstKakusei = nullptr;

	if (!uFnSetBurstKakusei)
	{
		uFnSetBurstKakusei = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetBurstKakusei");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetBurstKakusei_Params SetBurstKakusei_Params;
	memset(&SetBurstKakusei_Params, 0, sizeof(SetBurstKakusei_Params));
	memcpy_s(&SetBurstKakusei_Params.Player, sizeof(SetBurstKakusei_Params.Player), &Player, sizeof(Player));
	SetBurstKakusei_Params.flag = flag;

	this->ProcessEvent(uFnSetBurstKakusei, &SetBurstKakusei_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.CardInfo_SetRecord
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleDownside::CardInfo_SetRecord(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetRecord = nullptr;

	if (!uFnCardInfo_SetRecord)
	{
		uFnCardInfo_SetRecord = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.CardInfo_SetRecord");
	}

	UREDGfxMoviePlayer_BattleDownside_execCardInfo_SetRecord_Params CardInfo_SetRecord_Params;
	memset(&CardInfo_SetRecord_Params, 0, sizeof(CardInfo_SetRecord_Params));
	memcpy_s(&CardInfo_SetRecord_Params.Player, sizeof(CardInfo_SetRecord_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetRecord_Params.Str, sizeof(CardInfo_SetRecord_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetRecord, &CardInfo_SetRecord_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetTensGaugeColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13425])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        MulColor                       (CPF_Parm)
// int32_t                        AddColor                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetTensGaugeColor(int32_t Player, int32_t MulColor, int32_t AddColor)
{
	static UFunction* uFnSetTensGaugeColor = nullptr;

	if (!uFnSetTensGaugeColor)
	{
		uFnSetTensGaugeColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetTensGaugeColor");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetTensGaugeColor_Params SetTensGaugeColor_Params;
	memset(&SetTensGaugeColor_Params, 0, sizeof(SetTensGaugeColor_Params));
	memcpy_s(&SetTensGaugeColor_Params.Player, sizeof(SetTensGaugeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetTensGaugeColor_Params.MulColor, sizeof(SetTensGaugeColor_Params.MulColor), &MulColor, sizeof(MulColor));
	memcpy_s(&SetTensGaugeColor_Params.AddColor, sizeof(SetTensGaugeColor_Params.AddColor), &AddColor, sizeof(AddColor));

	this->ProcessEvent(uFnSetTensGaugeColor, &SetTensGaugeColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetShinSousaiDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13420])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetShinSousaiDamage(int32_t Player, int32_t frame)
{
	static UFunction* uFnSetShinSousaiDamage = nullptr;

	if (!uFnSetShinSousaiDamage)
	{
		uFnSetShinSousaiDamage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetShinSousaiDamage");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetShinSousaiDamage_Params SetShinSousaiDamage_Params;
	memset(&SetShinSousaiDamage_Params, 0, sizeof(SetShinSousaiDamage_Params));
	memcpy_s(&SetShinSousaiDamage_Params.Player, sizeof(SetShinSousaiDamage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetShinSousaiDamage_Params.frame, sizeof(SetShinSousaiDamage_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetShinSousaiDamage, &SetShinSousaiDamage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateShinSousaiTimer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13487])
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::UpdateShinSousaiTimer(int32_t Time)
{
	static UFunction* uFnUpdateShinSousaiTimer = nullptr;

	if (!uFnUpdateShinSousaiTimer)
	{
		uFnUpdateShinSousaiTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateShinSousaiTimer");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateShinSousaiTimer_Params UpdateShinSousaiTimer_Params;
	memset(&UpdateShinSousaiTimer_Params, 0, sizeof(UpdateShinSousaiTimer_Params));
	memcpy_s(&UpdateShinSousaiTimer_Params.Time, sizeof(UpdateShinSousaiTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateShinSousaiTimer, &UpdateShinSousaiTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateExGauge
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13479])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Id                             (CPF_Parm)
// int32_t                        Icon                           (CPF_Parm)
// int32_t                        val                            (CPF_Parm)
// int32_t                        MaxVal                         (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)
// int32_t                        Mode                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::UpdateExGauge(int32_t Player, int32_t Id, int32_t Icon, int32_t val, int32_t MaxVal, int32_t Col, int32_t Mode)
{
	static UFunction* uFnUpdateExGauge = nullptr;

	if (!uFnUpdateExGauge)
	{
		uFnUpdateExGauge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateExGauge");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateExGauge_Params UpdateExGauge_Params;
	memset(&UpdateExGauge_Params, 0, sizeof(UpdateExGauge_Params));
	memcpy_s(&UpdateExGauge_Params.Player, sizeof(UpdateExGauge_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateExGauge_Params.Id, sizeof(UpdateExGauge_Params.Id), &Id, sizeof(Id));
	memcpy_s(&UpdateExGauge_Params.Icon, sizeof(UpdateExGauge_Params.Icon), &Icon, sizeof(Icon));
	memcpy_s(&UpdateExGauge_Params.val, sizeof(UpdateExGauge_Params.val), &val, sizeof(val));
	memcpy_s(&UpdateExGauge_Params.MaxVal, sizeof(UpdateExGauge_Params.MaxVal), &MaxVal, sizeof(MaxVal));
	memcpy_s(&UpdateExGauge_Params.Col, sizeof(UpdateExGauge_Params.Col), &Col, sizeof(Col));
	memcpy_s(&UpdateExGauge_Params.Mode, sizeof(UpdateExGauge_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnUpdateExGauge, &UpdateExGauge_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetExGaugeActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13406])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Id                             (CPF_Parm)
// uint32_t                       Active                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetExGaugeActive(int32_t Player, int32_t Id, bool Active)
{
	static UFunction* uFnSetExGaugeActive = nullptr;

	if (!uFnSetExGaugeActive)
	{
		uFnSetExGaugeActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetExGaugeActive");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetExGaugeActive_Params SetExGaugeActive_Params;
	memset(&SetExGaugeActive_Params, 0, sizeof(SetExGaugeActive_Params));
	memcpy_s(&SetExGaugeActive_Params.Player, sizeof(SetExGaugeActive_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetExGaugeActive_Params.Id, sizeof(SetExGaugeActive_Params.Id), &Id, sizeof(Id));
	SetExGaugeActive_Params.Active = Active;

	this->ProcessEvent(uFnSetExGaugeActive, &SetExGaugeActive_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.ReqNegativePenalty
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13371])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::ReqNegativePenalty(int32_t Player)
{
	static UFunction* uFnReqNegativePenalty = nullptr;

	if (!uFnReqNegativePenalty)
	{
		uFnReqNegativePenalty = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.ReqNegativePenalty");
	}

	UREDGfxMoviePlayer_BattleDownside_execReqNegativePenalty_Params ReqNegativePenalty_Params;
	memset(&ReqNegativePenalty_Params, 0, sizeof(ReqNegativePenalty_Params));
	memcpy_s(&ReqNegativePenalty_Params.Player, sizeof(ReqNegativePenalty_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnReqNegativePenalty, &ReqNegativePenalty_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetNegativeDangerDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13415])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       level2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::SetNegativeDangerDisp(int32_t Player, bool disp, bool level2)
{
	static UFunction* uFnSetNegativeDangerDisp = nullptr;

	if (!uFnSetNegativeDangerDisp)
	{
		uFnSetNegativeDangerDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetNegativeDangerDisp");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetNegativeDangerDisp_Params SetNegativeDangerDisp_Params;
	memset(&SetNegativeDangerDisp_Params, 0, sizeof(SetNegativeDangerDisp_Params));
	memcpy_s(&SetNegativeDangerDisp_Params.Player, sizeof(SetNegativeDangerDisp_Params.Player), &Player, sizeof(Player));
	SetNegativeDangerDisp_Params.disp = disp;
	SetNegativeDangerDisp_Params.level2 = level2;

	this->ProcessEvent(uFnSetNegativeDangerDisp, &SetNegativeDangerDisp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateTensionBalance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13491])
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::UpdateTensionBalance(float val1, float val2)
{
	static UFunction* uFnUpdateTensionBalance = nullptr;

	if (!uFnUpdateTensionBalance)
	{
		uFnUpdateTensionBalance = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateTensionBalance");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateTensionBalance_Params UpdateTensionBalance_Params;
	memset(&UpdateTensionBalance_Params, 0, sizeof(UpdateTensionBalance_Params));
	memcpy_s(&UpdateTensionBalance_Params.val1, sizeof(UpdateTensionBalance_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateTensionBalance_Params.val2, sizeof(UpdateTensionBalance_Params.val2), &val2, sizeof(val2));

	this->ProcessEvent(uFnUpdateTensionBalance, &UpdateTensionBalance_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.SetTensionState
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13426])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  State                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleDownside::SetTensionState(int32_t Player, const class FString& State)
{
	static UFunction* uFnSetTensionState = nullptr;

	if (!uFnSetTensionState)
	{
		uFnSetTensionState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.SetTensionState");
	}

	UREDGfxMoviePlayer_BattleDownside_execSetTensionState_Params SetTensionState_Params;
	memset(&SetTensionState_Params, 0, sizeof(SetTensionState_Params));
	memcpy_s(&SetTensionState_Params.Player, sizeof(SetTensionState_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetTensionState_Params.State, sizeof(SetTensionState_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnSetTensionState, &SetTensionState_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateTension
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13490])
// Parameter Info:
// float                          tens1                          (CPF_Parm)
// int32_t                        tescol1                        (CPF_Parm)
// float                          tens2                          (CPF_Parm)
// int32_t                        tescol2                        (CPF_Parm)

void UREDGfxMoviePlayer_BattleDownside::UpdateTension(float tens1, int32_t tescol1, float tens2, int32_t tescol2)
{
	static UFunction* uFnUpdateTension = nullptr;

	if (!uFnUpdateTension)
	{
		uFnUpdateTension = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.UpdateTension");
	}

	UREDGfxMoviePlayer_BattleDownside_execUpdateTension_Params UpdateTension_Params;
	memset(&UpdateTension_Params, 0, sizeof(UpdateTension_Params));
	memcpy_s(&UpdateTension_Params.tens1, sizeof(UpdateTension_Params.tens1), &tens1, sizeof(tens1));
	memcpy_s(&UpdateTension_Params.tescol1, sizeof(UpdateTension_Params.tescol1), &tescol1, sizeof(tescol1));
	memcpy_s(&UpdateTension_Params.tens2, sizeof(UpdateTension_Params.tens2), &tens2, sizeof(tens2));
	memcpy_s(&UpdateTension_Params.tescol2, sizeof(UpdateTension_Params.tescol2), &tescol2, sizeof(tescol2));

	this->ProcessEvent(uFnUpdateTension, &UpdateTension_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.ResetOnRound
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::ResetOnRound()
{
	static UFunction* uFnResetOnRound = nullptr;

	if (!uFnResetOnRound)
	{
		uFnResetOnRound = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.ResetOnRound");
	}

	UREDGfxMoviePlayer_BattleDownside_execResetOnRound_Params ResetOnRound_Params;
	memset(&ResetOnRound_Params, 0, sizeof(ResetOnRound_Params));

	this->ProcessEvent(uFnResetOnRound, &ResetOnRound_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.MovieStartInternal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_Parm)

bool UREDGfxMoviePlayer_BattleDownside::MovieStartInternal(bool StartPaused)
{
	static UFunction* uFnMovieStartInternal = nullptr;

	if (!uFnMovieStartInternal)
	{
		uFnMovieStartInternal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.MovieStartInternal");
	}

	UREDGfxMoviePlayer_BattleDownside_execMovieStartInternal_Params MovieStartInternal_Params;
	memset(&MovieStartInternal_Params, 0, sizeof(MovieStartInternal_Params));
	MovieStartInternal_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnMovieStartInternal, &MovieStartInternal_Params, nullptr);

	return MovieStartInternal_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeMC
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::InitializeMC()
{
	static UFunction* uFnInitializeMC = nullptr;

	if (!uFnInitializeMC)
	{
		uFnInitializeMC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeMC");
	}

	UREDGfxMoviePlayer_BattleDownside_execInitializeMC_Params InitializeMC_Params;
	memset(&InitializeMC_Params, 0, sizeof(InitializeMC_Params));

	this->ProcessEvent(uFnInitializeMC, &InitializeMC_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeBurstMC
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// struct FBurstDownSideMC        mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleDownside::InitializeBurstMC(int32_t Player, struct FBurstDownSideMC& mc)
{
	static UFunction* uFnInitializeBurstMC = nullptr;

	if (!uFnInitializeBurstMC)
	{
		uFnInitializeBurstMC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeBurstMC");
	}

	UREDGfxMoviePlayer_BattleDownside_execInitializeBurstMC_Params InitializeBurstMC_Params;
	memset(&InitializeBurstMC_Params, 0, sizeof(InitializeBurstMC_Params));
	memcpy_s(&InitializeBurstMC_Params.Player, sizeof(InitializeBurstMC_Params.Player), &Player, sizeof(Player));
	memcpy_s(&InitializeBurstMC_Params.mc, sizeof(InitializeBurstMC_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnInitializeBurstMC, &InitializeBurstMC_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &InitializeBurstMC_Params.mc, sizeof(InitializeBurstMC_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeNegativeMC
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// struct FNegativeMC             mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleDownside::InitializeNegativeMC(int32_t Player, struct FNegativeMC& mc)
{
	static UFunction* uFnInitializeNegativeMC = nullptr;

	if (!uFnInitializeNegativeMC)
	{
		uFnInitializeNegativeMC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeNegativeMC");
	}

	UREDGfxMoviePlayer_BattleDownside_execInitializeNegativeMC_Params InitializeNegativeMC_Params;
	memset(&InitializeNegativeMC_Params, 0, sizeof(InitializeNegativeMC_Params));
	memcpy_s(&InitializeNegativeMC_Params.Player, sizeof(InitializeNegativeMC_Params.Player), &Player, sizeof(Player));
	memcpy_s(&InitializeNegativeMC_Params.mc, sizeof(InitializeNegativeMC_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnInitializeNegativeMC, &InitializeNegativeMC_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &InitializeNegativeMC_Params.mc, sizeof(InitializeNegativeMC_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeDangerTimeMC
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleDownside::InitializeDangerTimeMC()
{
	static UFunction* uFnInitializeDangerTimeMC = nullptr;

	if (!uFnInitializeDangerTimeMC)
	{
		uFnInitializeDangerTimeMC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeDangerTimeMC");
	}

	UREDGfxMoviePlayer_BattleDownside_execInitializeDangerTimeMC_Params InitializeDangerTimeMC_Params;
	memset(&InitializeDangerTimeMC_Params, 0, sizeof(InitializeDangerTimeMC_Params));

	this->ProcessEvent(uFnInitializeDangerTimeMC, &InitializeDangerTimeMC_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeExGaugeMC
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// struct FExGaugeMC              mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleDownside::InitializeExGaugeMC(int32_t Player, struct FExGaugeMC& mc)
{
	static UFunction* uFnInitializeExGaugeMC = nullptr;

	if (!uFnInitializeExGaugeMC)
	{
		uFnInitializeExGaugeMC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeExGaugeMC");
	}

	UREDGfxMoviePlayer_BattleDownside_execInitializeExGaugeMC_Params InitializeExGaugeMC_Params;
	memset(&InitializeExGaugeMC_Params, 0, sizeof(InitializeExGaugeMC_Params));
	memcpy_s(&InitializeExGaugeMC_Params.Player, sizeof(InitializeExGaugeMC_Params.Player), &Player, sizeof(Player));
	memcpy_s(&InitializeExGaugeMC_Params.mc, sizeof(InitializeExGaugeMC_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnInitializeExGaugeMC, &InitializeExGaugeMC_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &InitializeExGaugeMC_Params.mc, sizeof(InitializeExGaugeMC_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeTensionGaugeMC
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// struct FTensionGaugeMC         mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleDownside::InitializeTensionGaugeMC(int32_t Player, struct FTensionGaugeMC& mc)
{
	static UFunction* uFnInitializeTensionGaugeMC = nullptr;

	if (!uFnInitializeTensionGaugeMC)
	{
		uFnInitializeTensionGaugeMC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleDownside.InitializeTensionGaugeMC");
	}

	UREDGfxMoviePlayer_BattleDownside_execInitializeTensionGaugeMC_Params InitializeTensionGaugeMC_Params;
	memset(&InitializeTensionGaugeMC_Params, 0, sizeof(InitializeTensionGaugeMC_Params));
	memcpy_s(&InitializeTensionGaugeMC_Params.Player, sizeof(InitializeTensionGaugeMC_Params.Player), &Player, sizeof(Player));
	memcpy_s(&InitializeTensionGaugeMC_Params.mc, sizeof(InitializeTensionGaugeMC_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnInitializeTensionGaugeMC, &InitializeTensionGaugeMC_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &InitializeTensionGaugeMC_Params.mc, sizeof(InitializeTensionGaugeMC_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.FadeOut
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleMiddleF::FadeOut()
{
	static UFunction* uFnFadeOut = nullptr;

	if (!uFnFadeOut)
	{
		uFnFadeOut = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.FadeOut");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execFadeOut_Params FadeOut_Params;
	memset(&FadeOut_Params, 0, sizeof(FadeOut_Params));

	this->ProcessEvent(uFnFadeOut, &FadeOut_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.FadeIn
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleMiddleF::FadeIn()
{
	static UFunction* uFnFadeIn = nullptr;

	if (!uFnFadeIn)
	{
		uFnFadeIn = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.FadeIn");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execFadeIn_Params FadeIn_Params;
	memset(&FadeIn_Params, 0, sizeof(FadeIn_Params));

	this->ProcessEvent(uFnFadeIn, &FadeIn_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.HideAll
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleMiddleF::HideAll()
{
	static UFunction* uFnHideAll = nullptr;

	if (!uFnHideAll)
	{
		uFnHideAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.HideAll");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execHideAll_Params HideAll_Params;
	memset(&HideAll_Params, 0, sizeof(HideAll_Params));

	this->ProcessEvent(uFnHideAll, &HideAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.ShowAnime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleMiddleF::ShowAnime()
{
	static UFunction* uFnShowAnime = nullptr;

	if (!uFnShowAnime)
	{
		uFnShowAnime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.ShowAnime");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execShowAnime_Params ShowAnime_Params;
	memset(&ShowAnime_Params, 0, sizeof(ShowAnime_Params));

	this->ProcessEvent(uFnShowAnime, &ShowAnime_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.ShowQuick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleMiddleF::ShowQuick()
{
	static UFunction* uFnShowQuick = nullptr;

	if (!uFnShowQuick)
	{
		uFnShowQuick = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.ShowQuick");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execShowQuick_Params ShowQuick_Params;
	memset(&ShowQuick_Params, 0, sizeof(ShowQuick_Params));

	this->ProcessEvent(uFnShowQuick, &ShowQuick_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.UpdateSpecialCameraFlag
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13488])
// Parameter Info:
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleMiddleF::UpdateSpecialCameraFlag(bool flag)
{
	static UFunction* uFnUpdateSpecialCameraFlag = nullptr;

	if (!uFnUpdateSpecialCameraFlag)
	{
		uFnUpdateSpecialCameraFlag = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.UpdateSpecialCameraFlag");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execUpdateSpecialCameraFlag_Params UpdateSpecialCameraFlag_Params;
	memset(&UpdateSpecialCameraFlag_Params, 0, sizeof(UpdateSpecialCameraFlag_Params));
	UpdateSpecialCameraFlag_Params.flag = flag;

	this->ProcessEvent(uFnUpdateSpecialCameraFlag, &UpdateSpecialCameraFlag_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.ShowExclamation
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13437])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Type                           (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleMiddleF::ShowExclamation(int32_t Player, const class FString& Type, int32_t X, int32_t Y, int32_t Dir)
{
	static UFunction* uFnShowExclamation = nullptr;

	if (!uFnShowExclamation)
	{
		uFnShowExclamation = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.ShowExclamation");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execShowExclamation_Params ShowExclamation_Params;
	memset(&ShowExclamation_Params, 0, sizeof(ShowExclamation_Params));
	memcpy_s(&ShowExclamation_Params.Player, sizeof(ShowExclamation_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ShowExclamation_Params.Type, sizeof(ShowExclamation_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ShowExclamation_Params.X, sizeof(ShowExclamation_Params.X), &X, sizeof(X));
	memcpy_s(&ShowExclamation_Params.Y, sizeof(ShowExclamation_Params.Y), &Y, sizeof(Y));
	memcpy_s(&ShowExclamation_Params.Dir, sizeof(ShowExclamation_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnShowExclamation, &ShowExclamation_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.SetButtonRendaIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13401])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Time                           (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       dispGauge                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleMiddleF::SetButtonRendaIcon(int32_t Player, int32_t Time, int32_t X, int32_t Y, bool dispGauge)
{
	static UFunction* uFnSetButtonRendaIcon = nullptr;

	if (!uFnSetButtonRendaIcon)
	{
		uFnSetButtonRendaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.SetButtonRendaIcon");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execSetButtonRendaIcon_Params SetButtonRendaIcon_Params;
	memset(&SetButtonRendaIcon_Params, 0, sizeof(SetButtonRendaIcon_Params));
	memcpy_s(&SetButtonRendaIcon_Params.Player, sizeof(SetButtonRendaIcon_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetButtonRendaIcon_Params.Time, sizeof(SetButtonRendaIcon_Params.Time), &Time, sizeof(Time));
	memcpy_s(&SetButtonRendaIcon_Params.X, sizeof(SetButtonRendaIcon_Params.X), &X, sizeof(X));
	memcpy_s(&SetButtonRendaIcon_Params.Y, sizeof(SetButtonRendaIcon_Params.Y), &Y, sizeof(Y));
	SetButtonRendaIcon_Params.dispGauge = dispGauge;

	this->ProcessEvent(uFnSetButtonRendaIcon, &SetButtonRendaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.SetLeverGachaIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13413])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Time                           (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       dispGauge                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleMiddleF::SetLeverGachaIcon(int32_t Player, int32_t Time, int32_t X, int32_t Y, bool dispGauge)
{
	static UFunction* uFnSetLeverGachaIcon = nullptr;

	if (!uFnSetLeverGachaIcon)
	{
		uFnSetLeverGachaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.SetLeverGachaIcon");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execSetLeverGachaIcon_Params SetLeverGachaIcon_Params;
	memset(&SetLeverGachaIcon_Params, 0, sizeof(SetLeverGachaIcon_Params));
	memcpy_s(&SetLeverGachaIcon_Params.Player, sizeof(SetLeverGachaIcon_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetLeverGachaIcon_Params.Time, sizeof(SetLeverGachaIcon_Params.Time), &Time, sizeof(Time));
	memcpy_s(&SetLeverGachaIcon_Params.X, sizeof(SetLeverGachaIcon_Params.X), &X, sizeof(X));
	memcpy_s(&SetLeverGachaIcon_Params.Y, sizeof(SetLeverGachaIcon_Params.Y), &Y, sizeof(Y));
	SetLeverGachaIcon_Params.dispGauge = dispGauge;

	this->ProcessEvent(uFnSetLeverGachaIcon, &SetLeverGachaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.SetOffscreenCharaIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13416])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleMiddleF::SetOffscreenCharaIcon(int32_t Player, bool disp, int32_t PosX, int32_t Dir)
{
	static UFunction* uFnSetOffscreenCharaIcon = nullptr;

	if (!uFnSetOffscreenCharaIcon)
	{
		uFnSetOffscreenCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.SetOffscreenCharaIcon");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execSetOffscreenCharaIcon_Params SetOffscreenCharaIcon_Params;
	memset(&SetOffscreenCharaIcon_Params, 0, sizeof(SetOffscreenCharaIcon_Params));
	memcpy_s(&SetOffscreenCharaIcon_Params.Player, sizeof(SetOffscreenCharaIcon_Params.Player), &Player, sizeof(Player));
	SetOffscreenCharaIcon_Params.disp = disp;
	memcpy_s(&SetOffscreenCharaIcon_Params.PosX, sizeof(SetOffscreenCharaIcon_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&SetOffscreenCharaIcon_Params.Dir, sizeof(SetOffscreenCharaIcon_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnSetOffscreenCharaIcon, &SetOffscreenCharaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleMiddleF.MovieStartInternal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_Parm)

bool UREDGfxMoviePlayer_BattleMiddleF::MovieStartInternal(bool StartPaused)
{
	static UFunction* uFnMovieStartInternal = nullptr;

	if (!uFnMovieStartInternal)
	{
		uFnMovieStartInternal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleMiddleF.MovieStartInternal");
	}

	UREDGfxMoviePlayer_BattleMiddleF_execMovieStartInternal_Params MovieStartInternal_Params;
	memset(&MovieStartInternal_Params, 0, sizeof(MovieStartInternal_Params));
	MovieStartInternal_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnMovieStartInternal, &MovieStartInternal_Params, nullptr);

	return MovieStartInternal_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateBurstSealIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40607])
// Parameter Info:
// int32_t                        Side                           (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       Input                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateBurstSealIcon(int32_t Side, bool disp, bool Input)
{
	static UFunction* uFnUpdateBurstSealIcon = nullptr;

	if (!uFnUpdateBurstSealIcon)
	{
		uFnUpdateBurstSealIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateBurstSealIcon");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateBurstSealIcon_Params UpdateBurstSealIcon_Params;
	memset(&UpdateBurstSealIcon_Params, 0, sizeof(UpdateBurstSealIcon_Params));
	memcpy_s(&UpdateBurstSealIcon_Params.Side, sizeof(UpdateBurstSealIcon_Params.Side), &Side, sizeof(Side));
	UpdateBurstSealIcon_Params.disp = disp;
	UpdateBurstSealIcon_Params.Input = Input;

	this->ProcessEvent(uFnUpdateBurstSealIcon, &UpdateBurstSealIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateDispBurstSeal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40646])
// Parameter Info:
// int32_t                        Side                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateDispBurstSeal(int32_t Side)
{
	static UFunction* uFnUpdateDispBurstSeal = nullptr;

	if (!uFnUpdateDispBurstSeal)
	{
		uFnUpdateDispBurstSeal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateDispBurstSeal");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateDispBurstSeal_Params UpdateDispBurstSeal_Params;
	memset(&UpdateDispBurstSeal_Params, 0, sizeof(UpdateDispBurstSeal_Params));
	memcpy_s(&UpdateDispBurstSeal_Params.Side, sizeof(UpdateDispBurstSeal_Params.Side), &Side, sizeof(Side));

	this->ProcessEvent(uFnUpdateDispBurstSeal, &UpdateDispBurstSeal_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHUDBurst
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40704])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateHUDBurst()
{
	static UFunction* uFnUpdateHUDBurst = nullptr;

	if (!uFnUpdateHUDBurst)
	{
		uFnUpdateHUDBurst = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHUDBurst");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateHUDBurst_Params UpdateHUDBurst_Params;
	memset(&UpdateHUDBurst_Params, 0, sizeof(UpdateHUDBurst_Params));

	this->ProcessEvent(uFnUpdateHUDBurst, &UpdateHUDBurst_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetTimer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[28177])
// Parameter Info:
// int32_t                        digit1                         (CPF_Parm)
// int32_t                        digit10                        (CPF_Parm)
// int32_t                        digit100                       (CPF_Parm)
// int32_t                        digitNum                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetTimer(int32_t digit1, int32_t digit10, int32_t digit100, int32_t digitNum)
{
	static UFunction* uFnSetTimer = nullptr;

	if (!uFnSetTimer)
	{
		uFnSetTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetTimer");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetTimer_Params SetTimer_Params;
	memset(&SetTimer_Params, 0, sizeof(SetTimer_Params));
	memcpy_s(&SetTimer_Params.digit1, sizeof(SetTimer_Params.digit1), &digit1, sizeof(digit1));
	memcpy_s(&SetTimer_Params.digit10, sizeof(SetTimer_Params.digit10), &digit10, sizeof(digit10));
	memcpy_s(&SetTimer_Params.digit100, sizeof(SetTimer_Params.digit100), &digit100, sizeof(digit100));
	memcpy_s(&SetTimer_Params.digitNum, sizeof(SetTimer_Params.digitNum), &digitNum, sizeof(digitNum));

	this->ProcessEvent(uFnSetTimer, &SetTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHUDTimer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40714])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateHUDTimer()
{
	static UFunction* uFnUpdateHUDTimer = nullptr;

	if (!uFnUpdateHUDTimer)
	{
		uFnUpdateHUDTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHUDTimer");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateHUDTimer_Params UpdateHUDTimer_Params;
	memset(&UpdateHUDTimer_Params, 0, sizeof(UpdateHUDTimer_Params));

	this->ProcessEvent(uFnUpdateHUDTimer, &UpdateHUDTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.JKOUpdate
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37942])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::JKOUpdate()
{
	static UFunction* uFnJKOUpdate = nullptr;

	if (!uFnJKOUpdate)
	{
		uFnJKOUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.JKOUpdate");
	}

	UREDGfxMoviePlayer_BattleUpside_execJKOUpdate_Params JKOUpdate_Params;
	memset(&JKOUpdate_Params, 0, sizeof(JKOUpdate_Params));

	this->ProcessEvent(uFnJKOUpdate, &JKOUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.JKOUpdateGauge
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37943])
// Parameter Info:
// int32_t                        typeId                         (CPF_Parm)
// struct FJKOGaugeMC             mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleUpside::JKOUpdateGauge(int32_t typeId, struct FJKOGaugeMC& mc)
{
	static UFunction* uFnJKOUpdateGauge = nullptr;

	if (!uFnJKOUpdateGauge)
	{
		uFnJKOUpdateGauge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.JKOUpdateGauge");
	}

	UREDGfxMoviePlayer_BattleUpside_execJKOUpdateGauge_Params JKOUpdateGauge_Params;
	memset(&JKOUpdateGauge_Params, 0, sizeof(JKOUpdateGauge_Params));
	memcpy_s(&JKOUpdateGauge_Params.typeId, sizeof(JKOUpdateGauge_Params.typeId), &typeId, sizeof(typeId));
	memcpy_s(&JKOUpdateGauge_Params.mc, sizeof(JKOUpdateGauge_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnJKOUpdateGauge, &JKOUpdateGauge_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &JKOUpdateGauge_Params.mc, sizeof(JKOUpdateGauge_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateDangerTime
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40642])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateDangerTime()
{
	static UFunction* uFnUpdateDangerTime = nullptr;

	if (!uFnUpdateDangerTime)
	{
		uFnUpdateDangerTime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateDangerTime");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateDangerTime_Params UpdateDangerTime_Params;
	memset(&UpdateDangerTime_Params, 0, sizeof(UpdateDangerTime_Params));

	this->ProcessEvent(uFnUpdateDangerTime, &UpdateDangerTime_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateDangerDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40641])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateDangerDamage(int32_t Player)
{
	static UFunction* uFnUpdateDangerDamage = nullptr;

	if (!uFnUpdateDangerDamage)
	{
		uFnUpdateDangerDamage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateDangerDamage");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateDangerDamage_Params UpdateDangerDamage_Params;
	memset(&UpdateDangerDamage_Params, 0, sizeof(UpdateDangerDamage_Params));
	memcpy_s(&UpdateDangerDamage_Params.Player, sizeof(UpdateDangerDamage_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateDangerDamage, &UpdateDangerDamage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateDanger
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40640])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateDanger()
{
	static UFunction* uFnUpdateDanger = nullptr;

	if (!uFnUpdateDanger)
	{
		uFnUpdateDanger = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateDanger");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateDanger_Params UpdateDanger_Params;
	memset(&UpdateDanger_Params, 0, sizeof(UpdateDanger_Params));

	this->ProcessEvent(uFnUpdateDanger, &UpdateDanger_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateGBLight
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40691])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateGBLight()
{
	static UFunction* uFnUpdateGBLight = nullptr;

	if (!uFnUpdateGBLight)
	{
		uFnUpdateGBLight = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateGBLight");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateGBLight_Params UpdateGBLight_Params;
	memset(&UpdateGBLight_Params, 0, sizeof(UpdateGBLight_Params));

	this->ProcessEvent(uFnUpdateGBLight, &UpdateGBLight_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateRoundNumIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40837])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateRoundNumIcon()
{
	static UFunction* uFnUpdateRoundNumIcon = nullptr;

	if (!uFnUpdateRoundNumIcon)
	{
		uFnUpdateRoundNumIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateRoundNumIcon");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateRoundNumIcon_Params UpdateRoundNumIcon_Params;
	memset(&UpdateRoundNumIcon_Params, 0, sizeof(UpdateRoundNumIcon_Params));

	this->ProcessEvent(uFnUpdateRoundNumIcon, &UpdateRoundNumIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHPGaugeMulti
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40703])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateHPGaugeMulti()
{
	static UFunction* uFnUpdateHPGaugeMulti = nullptr;

	if (!uFnUpdateHPGaugeMulti)
	{
		uFnUpdateHPGaugeMulti = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHPGaugeMulti");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateHPGaugeMulti_Params UpdateHPGaugeMulti_Params;
	memset(&UpdateHPGaugeMulti_Params, 0, sizeof(UpdateHPGaugeMulti_Params));

	this->ProcessEvent(uFnUpdateHPGaugeMulti, &UpdateHPGaugeMulti_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHPGaugeColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40702])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateHPGaugeColor()
{
	static UFunction* uFnUpdateHPGaugeColor = nullptr;

	if (!uFnUpdateHPGaugeColor)
	{
		uFnUpdateHPGaugeColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHPGaugeColor");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateHPGaugeColor_Params UpdateHPGaugeColor_Params;
	memset(&UpdateHPGaugeColor_Params, 0, sizeof(UpdateHPGaugeColor_Params));

	this->ProcessEvent(uFnUpdateHPGaugeColor, &UpdateHPGaugeColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHideCombo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40701])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateHideCombo()
{
	static UFunction* uFnUpdateHideCombo = nullptr;

	if (!uFnUpdateHideCombo)
	{
		uFnUpdateHideCombo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHideCombo");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateHideCombo_Params UpdateHideCombo_Params;
	memset(&UpdateHideCombo_Params, 0, sizeof(UpdateHideCombo_Params));

	this->ProcessEvent(uFnUpdateHideCombo, &UpdateHideCombo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateComboEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40624])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateComboEffect()
{
	static UFunction* uFnUpdateComboEffect = nullptr;

	if (!uFnUpdateComboEffect)
	{
		uFnUpdateComboEffect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateComboEffect");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateComboEffect_Params UpdateComboEffect_Params;
	memset(&UpdateComboEffect_Params, 0, sizeof(UpdateComboEffect_Params));

	this->ProcessEvent(uFnUpdateComboEffect, &UpdateComboEffect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateComboAS
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40623])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateComboAS()
{
	static UFunction* uFnUpdateComboAS = nullptr;

	if (!uFnUpdateComboAS)
	{
		uFnUpdateComboAS = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateComboAS");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateComboAS_Params UpdateComboAS_Params;
	memset(&UpdateComboAS_Params, 0, sizeof(UpdateComboAS_Params));

	this->ProcessEvent(uFnUpdateComboAS, &UpdateComboAS_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.HideComboAS
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37438])
// Parameter Info:
// struct FMiddlePlateMC          mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleUpside::HideComboAS(struct FMiddlePlateMC& mc)
{
	static UFunction* uFnHideComboAS = nullptr;

	if (!uFnHideComboAS)
	{
		uFnHideComboAS = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.HideComboAS");
	}

	UREDGfxMoviePlayer_BattleUpside_execHideComboAS_Params HideComboAS_Params;
	memset(&HideComboAS_Params, 0, sizeof(HideComboAS_Params));
	memcpy_s(&HideComboAS_Params.mc, sizeof(HideComboAS_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnHideComboAS, &HideComboAS_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &HideComboAS_Params.mc, sizeof(HideComboAS_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowComboAS
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39892])
// Parameter Info:
// struct FMiddlePlateMC          mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleUpside::ShowComboAS(struct FMiddlePlateMC& mc)
{
	static UFunction* uFnShowComboAS = nullptr;

	if (!uFnShowComboAS)
	{
		uFnShowComboAS = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowComboAS");
	}

	UREDGfxMoviePlayer_BattleUpside_execShowComboAS_Params ShowComboAS_Params;
	memset(&ShowComboAS_Params, 0, sizeof(ShowComboAS_Params));
	memcpy_s(&ShowComboAS_Params.mc, sizeof(ShowComboAS_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnShowComboAS, &ShowComboAS_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &ShowComboAS_Params.mc, sizeof(ShowComboAS_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40595])
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::UpdateAll()
{
	static UFunction* uFnUpdateAll = nullptr;

	if (!uFnUpdateAll)
	{
		uFnUpdateAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateAll");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateAll_Params UpdateAll_Params;
	memset(&UpdateAll_Params, 0, sizeof(UpdateAll_Params));

	this->ProcessEvent(uFnUpdateAll, &UpdateAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.Update
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::Update(float DeltaTime)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.Update");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.DeltaTime, sizeof(Update_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.Sandstorm2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleUpside::Sandstorm2P(const class FString& Label)
{
	static UFunction* uFnSandstorm2P = nullptr;

	if (!uFnSandstorm2P)
	{
		uFnSandstorm2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.Sandstorm2P");
	}

	UREDGfxMoviePlayer_BattleUpside_execSandstorm2P_Params Sandstorm2P_Params;
	memset(&Sandstorm2P_Params, 0, sizeof(Sandstorm2P_Params));
	memcpy_s(&Sandstorm2P_Params.Label, sizeof(Sandstorm2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnSandstorm2P, &Sandstorm2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.Sandstorm1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleUpside::Sandstorm1P(const class FString& Label)
{
	static UFunction* uFnSandstorm1P = nullptr;

	if (!uFnSandstorm1P)
	{
		uFnSandstorm1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.Sandstorm1P");
	}

	UREDGfxMoviePlayer_BattleUpside_execSandstorm1P_Params Sandstorm1P_Params;
	memset(&Sandstorm1P_Params, 0, sizeof(Sandstorm1P_Params));
	memcpy_s(&Sandstorm1P_Params.Label, sizeof(Sandstorm1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnSandstorm1P, &Sandstorm1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.FadeOut
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::FadeOut()
{
	static UFunction* uFnFadeOut = nullptr;

	if (!uFnFadeOut)
	{
		uFnFadeOut = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.FadeOut");
	}

	UREDGfxMoviePlayer_BattleUpside_execFadeOut_Params FadeOut_Params;
	memset(&FadeOut_Params, 0, sizeof(FadeOut_Params));

	this->ProcessEvent(uFnFadeOut, &FadeOut_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.FadeIn
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::FadeIn()
{
	static UFunction* uFnFadeIn = nullptr;

	if (!uFnFadeIn)
	{
		uFnFadeIn = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.FadeIn");
	}

	UREDGfxMoviePlayer_BattleUpside_execFadeIn_Params FadeIn_Params;
	memset(&FadeIn_Params, 0, sizeof(FadeIn_Params));

	this->ProcessEvent(uFnFadeIn, &FadeIn_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.HideAll
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::HideAll()
{
	static UFunction* uFnHideAll = nullptr;

	if (!uFnHideAll)
	{
		uFnHideAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.HideAll");
	}

	UREDGfxMoviePlayer_BattleUpside_execHideAll_Params HideAll_Params;
	memset(&HideAll_Params, 0, sizeof(HideAll_Params));

	this->ProcessEvent(uFnHideAll, &HideAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowAnime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::ShowAnime()
{
	static UFunction* uFnShowAnime = nullptr;

	if (!uFnShowAnime)
	{
		uFnShowAnime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowAnime");
	}

	UREDGfxMoviePlayer_BattleUpside_execShowAnime_Params ShowAnime_Params;
	memset(&ShowAnime_Params, 0, sizeof(ShowAnime_Params));

	this->ProcessEvent(uFnShowAnime, &ShowAnime_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowQuick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::ShowQuick()
{
	static UFunction* uFnShowQuick = nullptr;

	if (!uFnShowQuick)
	{
		uFnShowQuick = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowQuick");
	}

	UREDGfxMoviePlayer_BattleUpside_execShowQuick_Params ShowQuick_Params;
	memset(&ShowQuick_Params, 0, sizeof(ShowQuick_Params));

	this->ProcessEvent(uFnShowQuick, &ShowQuick_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetVersionStr
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleUpside::SetVersionStr(const class FString& Str)
{
	static UFunction* uFnSetVersionStr = nullptr;

	if (!uFnSetVersionStr)
	{
		uFnSetVersionStr = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetVersionStr");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetVersionStr_Params SetVersionStr_Params;
	memset(&SetVersionStr_Params, 0, sizeof(SetVersionStr_Params));
	memcpy_s(&SetVersionStr_Params.Str, sizeof(SetVersionStr_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnSetVersionStr, &SetVersionStr_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetIcon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::CardInfo_SetIcon(int32_t Player, bool disp)
{
	static UFunction* uFnCardInfo_SetIcon = nullptr;

	if (!uFnCardInfo_SetIcon)
	{
		uFnCardInfo_SetIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetIcon");
	}

	UREDGfxMoviePlayer_BattleUpside_execCardInfo_SetIcon_Params CardInfo_SetIcon_Params;
	memset(&CardInfo_SetIcon_Params, 0, sizeof(CardInfo_SetIcon_Params));
	memcpy_s(&CardInfo_SetIcon_Params.Player, sizeof(CardInfo_SetIcon_Params.Player), &Player, sizeof(Player));
	CardInfo_SetIcon_Params.disp = disp;

	this->ProcessEvent(uFnCardInfo_SetIcon, &CardInfo_SetIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetTitle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleUpside::CardInfo_SetTitle(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetTitle = nullptr;

	if (!uFnCardInfo_SetTitle)
	{
		uFnCardInfo_SetTitle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetTitle");
	}

	UREDGfxMoviePlayer_BattleUpside_execCardInfo_SetTitle_Params CardInfo_SetTitle_Params;
	memset(&CardInfo_SetTitle_Params, 0, sizeof(CardInfo_SetTitle_Params));
	memcpy_s(&CardInfo_SetTitle_Params.Player, sizeof(CardInfo_SetTitle_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetTitle_Params.Str, sizeof(CardInfo_SetTitle_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetTitle, &CardInfo_SetTitle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetGradeColor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        gradeColor                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::CardInfo_SetGradeColor(int32_t Player, int32_t gradeColor)
{
	static UFunction* uFnCardInfo_SetGradeColor = nullptr;

	if (!uFnCardInfo_SetGradeColor)
	{
		uFnCardInfo_SetGradeColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetGradeColor");
	}

	UREDGfxMoviePlayer_BattleUpside_execCardInfo_SetGradeColor_Params CardInfo_SetGradeColor_Params;
	memset(&CardInfo_SetGradeColor_Params, 0, sizeof(CardInfo_SetGradeColor_Params));
	memcpy_s(&CardInfo_SetGradeColor_Params.Player, sizeof(CardInfo_SetGradeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetGradeColor_Params.gradeColor, sizeof(CardInfo_SetGradeColor_Params.gradeColor), &gradeColor, sizeof(gradeColor));

	this->ProcessEvent(uFnCardInfo_SetGradeColor, &CardInfo_SetGradeColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetGrade
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleUpside::CardInfo_SetGrade(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetGrade = nullptr;

	if (!uFnCardInfo_SetGrade)
	{
		uFnCardInfo_SetGrade = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetGrade");
	}

	UREDGfxMoviePlayer_BattleUpside_execCardInfo_SetGrade_Params CardInfo_SetGrade_Params;
	memset(&CardInfo_SetGrade_Params, 0, sizeof(CardInfo_SetGrade_Params));
	memcpy_s(&CardInfo_SetGrade_Params.Player, sizeof(CardInfo_SetGrade_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetGrade_Params.Str, sizeof(CardInfo_SetGrade_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetGrade, &CardInfo_SetGrade_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetPlayerName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleUpside::CardInfo_SetPlayerName(int32_t Player, const class FString& Str)
{
	static UFunction* uFnCardInfo_SetPlayerName = nullptr;

	if (!uFnCardInfo_SetPlayerName)
	{
		uFnCardInfo_SetPlayerName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.CardInfo_SetPlayerName");
	}

	UREDGfxMoviePlayer_BattleUpside_execCardInfo_SetPlayerName_Params CardInfo_SetPlayerName_Params;
	memset(&CardInfo_SetPlayerName_Params, 0, sizeof(CardInfo_SetPlayerName_Params));
	memcpy_s(&CardInfo_SetPlayerName_Params.Player, sizeof(CardInfo_SetPlayerName_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CardInfo_SetPlayerName_Params.Str, sizeof(CardInfo_SetPlayerName_Params.Str), &Str, sizeof(Str));

	this->ProcessEvent(uFnCardInfo_SetPlayerName, &CardInfo_SetPlayerName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetHandicap
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13410])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetHandicap(int32_t Player, bool flag, int32_t val)
{
	static UFunction* uFnSetHandicap = nullptr;

	if (!uFnSetHandicap)
	{
		uFnSetHandicap = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetHandicap");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetHandicap_Params SetHandicap_Params;
	memset(&SetHandicap_Params, 0, sizeof(SetHandicap_Params));
	memcpy_s(&SetHandicap_Params.Player, sizeof(SetHandicap_Params.Player), &Player, sizeof(Player));
	SetHandicap_Params.flag = flag;
	memcpy_s(&SetHandicap_Params.val, sizeof(SetHandicap_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetHandicap, &SetHandicap_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.AdjustPos
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13211])
// Parameter Info:
// int32_t                        offsetUp                       (CPF_Parm)
// int32_t                        offsetDown                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::AdjustPos(int32_t offsetUp, int32_t offsetDown)
{
	static UFunction* uFnAdjustPos = nullptr;

	if (!uFnAdjustPos)
	{
		uFnAdjustPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.AdjustPos");
	}

	UREDGfxMoviePlayer_BattleUpside_execAdjustPos_Params AdjustPos_Params;
	memset(&AdjustPos_Params, 0, sizeof(AdjustPos_Params));
	memcpy_s(&AdjustPos_Params.offsetUp, sizeof(AdjustPos_Params.offsetUp), &offsetUp, sizeof(offsetUp));
	memcpy_s(&AdjustPos_Params.offsetDown, sizeof(AdjustPos_Params.offsetDown), &offsetDown, sizeof(offsetDown));

	this->ProcessEvent(uFnAdjustPos, &AdjustPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.JKOGhostGauge
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13333])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        ColorID                        (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       hide                           (CPF_Parm)
// int32_t                        lv                             (CPF_Parm)
// float                          gauge                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::JKOGhostGauge(int32_t Player, int32_t ColorID, int32_t Type, bool disp, bool hide, int32_t lv, float gauge)
{
	static UFunction* uFnJKOGhostGauge = nullptr;

	if (!uFnJKOGhostGauge)
	{
		uFnJKOGhostGauge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.JKOGhostGauge");
	}

	UREDGfxMoviePlayer_BattleUpside_execJKOGhostGauge_Params JKOGhostGauge_Params;
	memset(&JKOGhostGauge_Params, 0, sizeof(JKOGhostGauge_Params));
	memcpy_s(&JKOGhostGauge_Params.Player, sizeof(JKOGhostGauge_Params.Player), &Player, sizeof(Player));
	memcpy_s(&JKOGhostGauge_Params.ColorID, sizeof(JKOGhostGauge_Params.ColorID), &ColorID, sizeof(ColorID));
	memcpy_s(&JKOGhostGauge_Params.Type, sizeof(JKOGhostGauge_Params.Type), &Type, sizeof(Type));
	JKOGhostGauge_Params.disp = disp;
	JKOGhostGauge_Params.hide = hide;
	memcpy_s(&JKOGhostGauge_Params.lv, sizeof(JKOGhostGauge_Params.lv), &lv, sizeof(lv));
	memcpy_s(&JKOGhostGauge_Params.gauge, sizeof(JKOGhostGauge_Params.gauge), &gauge, sizeof(gauge));

	this->ProcessEvent(uFnJKOGhostGauge, &JKOGhostGauge_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.BurstShake
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13231])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::BurstShake(int32_t Player)
{
	static UFunction* uFnBurstShake = nullptr;

	if (!uFnBurstShake)
	{
		uFnBurstShake = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.BurstShake");
	}

	UREDGfxMoviePlayer_BattleUpside_execBurstShake_Params BurstShake_Params;
	memset(&BurstShake_Params, 0, sizeof(BurstShake_Params));
	memcpy_s(&BurstShake_Params.Player, sizeof(BurstShake_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnBurstShake, &BurstShake_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.BurstHeal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13229])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::BurstHeal(int32_t Player)
{
	static UFunction* uFnBurstHeal = nullptr;

	if (!uFnBurstHeal)
	{
		uFnBurstHeal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.BurstHeal");
	}

	UREDGfxMoviePlayer_BattleUpside_execBurstHeal_Params BurstHeal_Params;
	memset(&BurstHeal_Params, 0, sizeof(BurstHeal_Params));
	memcpy_s(&BurstHeal_Params.Player, sizeof(BurstHeal_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnBurstHeal, &BurstHeal_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetBurstKakusei
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13400])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetBurstKakusei(int32_t Player, bool flag)
{
	static UFunction* uFnSetBurstKakusei = nullptr;

	if (!uFnSetBurstKakusei)
	{
		uFnSetBurstKakusei = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetBurstKakusei");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetBurstKakusei_Params SetBurstKakusei_Params;
	memset(&SetBurstKakusei_Params, 0, sizeof(SetBurstKakusei_Params));
	memcpy_s(&SetBurstKakusei_Params.Player, sizeof(SetBurstKakusei_Params.Player), &Player, sizeof(Player));
	SetBurstKakusei_Params.flag = flag;

	this->ProcessEvent(uFnSetBurstKakusei, &SetBurstKakusei_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetStylishMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetStylishMode(int32_t Player, bool flag)
{
	static UFunction* uFnSetStylishMode = nullptr;

	if (!uFnSetStylishMode)
	{
		uFnSetStylishMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetStylishMode");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetStylishMode_Params SetStylishMode_Params;
	memset(&SetStylishMode_Params, 0, sizeof(SetStylishMode_Params));
	memcpy_s(&SetStylishMode_Params.Player, sizeof(SetStylishMode_Params.Player), &Player, sizeof(Player));
	SetStylishMode_Params.flag = flag;

	this->ProcessEvent(uFnSetStylishMode, &SetStylishMode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateSpectator
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13489])
// Parameter Info:
// int32_t                        Slot                           (CPF_Parm)
// uint32_t                       isHeadSet                      (CPF_Parm)
// uint32_t                       isSpeak                        (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateSpectator(int32_t Slot, bool isHeadSet, bool isSpeak)
{
	static UFunction* uFnUpdateSpectator = nullptr;

	if (!uFnUpdateSpectator)
	{
		uFnUpdateSpectator = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateSpectator");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateSpectator_Params UpdateSpectator_Params;
	memset(&UpdateSpectator_Params, 0, sizeof(UpdateSpectator_Params));
	memcpy_s(&UpdateSpectator_Params.Slot, sizeof(UpdateSpectator_Params.Slot), &Slot, sizeof(Slot));
	UpdateSpectator_Params.isHeadSet = isHeadSet;
	UpdateSpectator_Params.isSpeak = isSpeak;

	this->ProcessEvent(uFnUpdateSpectator, &UpdateSpectator_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetSpectator
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Slot                           (CPF_Parm)
// int32_t                        colorSlot                      (CPF_Parm)
// uint32_t                       isIn                           (CPF_Parm)
// class FString                  OnlineID                       (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleUpside::SetSpectator(int32_t Slot, int32_t colorSlot, bool isIn, const class FString& OnlineID)
{
	static UFunction* uFnSetSpectator = nullptr;

	if (!uFnSetSpectator)
	{
		uFnSetSpectator = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetSpectator");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetSpectator_Params SetSpectator_Params;
	memset(&SetSpectator_Params, 0, sizeof(SetSpectator_Params));
	memcpy_s(&SetSpectator_Params.Slot, sizeof(SetSpectator_Params.Slot), &Slot, sizeof(Slot));
	memcpy_s(&SetSpectator_Params.colorSlot, sizeof(SetSpectator_Params.colorSlot), &colorSlot, sizeof(colorSlot));
	SetSpectator_Params.isIn = isIn;
	memcpy_s(&SetSpectator_Params.OnlineID, sizeof(SetSpectator_Params.OnlineID), &OnlineID, sizeof(OnlineID));

	this->ProcessEvent(uFnSetSpectator, &SetSpectator_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetSpectatorDisp
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetSpectatorDisp(bool disp)
{
	static UFunction* uFnSetSpectatorDisp = nullptr;

	if (!uFnSetSpectatorDisp)
	{
		uFnSetSpectatorDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetSpectatorDisp");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetSpectatorDisp_Params SetSpectatorDisp_Params;
	memset(&SetSpectatorDisp_Params, 0, sizeof(SetSpectatorDisp_Params));
	SetSpectatorDisp_Params.disp = disp;

	this->ProcessEvent(uFnSetSpectatorDisp, &SetSpectatorDisp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateMOM
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13483])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// float                          armorGauge                     (CPF_Parm)
// int32_t                        armorState                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateMOM(int32_t Player, float armorGauge, int32_t armorState)
{
	static UFunction* uFnUpdateMOM = nullptr;

	if (!uFnUpdateMOM)
	{
		uFnUpdateMOM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateMOM");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateMOM_Params UpdateMOM_Params;
	memset(&UpdateMOM_Params, 0, sizeof(UpdateMOM_Params));
	memcpy_s(&UpdateMOM_Params.Player, sizeof(UpdateMOM_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateMOM_Params.armorGauge, sizeof(UpdateMOM_Params.armorGauge), &armorGauge, sizeof(armorGauge));
	memcpy_s(&UpdateMOM_Params.armorState, sizeof(UpdateMOM_Params.armorState), &armorState, sizeof(armorState));

	this->ProcessEvent(uFnUpdateMOM, &UpdateMOM_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetHPGaugeColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13411])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        MulColor                       (CPF_Parm)
// int32_t                        AddColor                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetHPGaugeColor(int32_t Player, int32_t MulColor, int32_t AddColor)
{
	static UFunction* uFnSetHPGaugeColor = nullptr;

	if (!uFnSetHPGaugeColor)
	{
		uFnSetHPGaugeColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetHPGaugeColor");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetHPGaugeColor_Params SetHPGaugeColor_Params;
	memset(&SetHPGaugeColor_Params, 0, sizeof(SetHPGaugeColor_Params));
	memcpy_s(&SetHPGaugeColor_Params.Player, sizeof(SetHPGaugeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetHPGaugeColor_Params.MulColor, sizeof(SetHPGaugeColor_Params.MulColor), &MulColor, sizeof(MulColor));
	memcpy_s(&SetHPGaugeColor_Params.AddColor, sizeof(SetHPGaugeColor_Params.AddColor), &AddColor, sizeof(AddColor));

	this->ProcessEvent(uFnSetHPGaugeColor, &SetHPGaugeColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetShinSousaiDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13420])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetShinSousaiDamage(int32_t Player, int32_t frame)
{
	static UFunction* uFnSetShinSousaiDamage = nullptr;

	if (!uFnSetShinSousaiDamage)
	{
		uFnSetShinSousaiDamage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetShinSousaiDamage");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetShinSousaiDamage_Params SetShinSousaiDamage_Params;
	memset(&SetShinSousaiDamage_Params, 0, sizeof(SetShinSousaiDamage_Params));
	memcpy_s(&SetShinSousaiDamage_Params.Player, sizeof(SetShinSousaiDamage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetShinSousaiDamage_Params.frame, sizeof(SetShinSousaiDamage_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetShinSousaiDamage, &SetShinSousaiDamage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateShinSousaiTimer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13487])
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateShinSousaiTimer(int32_t Time)
{
	static UFunction* uFnUpdateShinSousaiTimer = nullptr;

	if (!uFnUpdateShinSousaiTimer)
	{
		uFnUpdateShinSousaiTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateShinSousaiTimer");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateShinSousaiTimer_Params UpdateShinSousaiTimer_Params;
	memset(&UpdateShinSousaiTimer_Params, 0, sizeof(UpdateShinSousaiTimer_Params));
	memcpy_s(&UpdateShinSousaiTimer_Params.Time, sizeof(UpdateShinSousaiTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateShinSousaiTimer, &UpdateShinSousaiTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetCounterHitByGuardBalance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13402])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       isCounterHit                   (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetCounterHitByGuardBalance(int32_t Player, bool isCounterHit)
{
	static UFunction* uFnSetCounterHitByGuardBalance = nullptr;

	if (!uFnSetCounterHitByGuardBalance)
	{
		uFnSetCounterHitByGuardBalance = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetCounterHitByGuardBalance");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetCounterHitByGuardBalance_Params SetCounterHitByGuardBalance_Params;
	memset(&SetCounterHitByGuardBalance_Params, 0, sizeof(SetCounterHitByGuardBalance_Params));
	memcpy_s(&SetCounterHitByGuardBalance_Params.Player, sizeof(SetCounterHitByGuardBalance_Params.Player), &Player, sizeof(Player));
	SetCounterHitByGuardBalance_Params.isCounterHit = isCounterHit;

	this->ProcessEvent(uFnSetCounterHitByGuardBalance, &SetCounterHitByGuardBalance_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateGuardBalance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13481])
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)
// float                          red1                           (CPF_Parm)
// float                          red2                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateGuardBalance(float val1, float val2, float red1, float red2)
{
	static UFunction* uFnUpdateGuardBalance = nullptr;

	if (!uFnUpdateGuardBalance)
	{
		uFnUpdateGuardBalance = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateGuardBalance");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateGuardBalance_Params UpdateGuardBalance_Params;
	memset(&UpdateGuardBalance_Params, 0, sizeof(UpdateGuardBalance_Params));
	memcpy_s(&UpdateGuardBalance_Params.val1, sizeof(UpdateGuardBalance_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateGuardBalance_Params.val2, sizeof(UpdateGuardBalance_Params.val2), &val2, sizeof(val2));
	memcpy_s(&UpdateGuardBalance_Params.red1, sizeof(UpdateGuardBalance_Params.red1), &red1, sizeof(red1));
	memcpy_s(&UpdateGuardBalance_Params.red2, sizeof(UpdateGuardBalance_Params.red2), &red2, sizeof(red2));

	this->ProcessEvent(uFnUpdateGuardBalance, &UpdateGuardBalance_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.DispBurstSealIcon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13258])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       Input                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::DispBurstSealIcon(int32_t Player, bool disp, bool Input)
{
	static UFunction* uFnDispBurstSealIcon = nullptr;

	if (!uFnDispBurstSealIcon)
	{
		uFnDispBurstSealIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.DispBurstSealIcon");
	}

	UREDGfxMoviePlayer_BattleUpside_execDispBurstSealIcon_Params DispBurstSealIcon_Params;
	memset(&DispBurstSealIcon_Params, 0, sizeof(DispBurstSealIcon_Params));
	memcpy_s(&DispBurstSealIcon_Params.Player, sizeof(DispBurstSealIcon_Params.Player), &Player, sizeof(Player));
	DispBurstSealIcon_Params.disp = disp;
	DispBurstSealIcon_Params.Input = Input;

	this->ProcessEvent(uFnDispBurstSealIcon, &DispBurstSealIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateRoundWin
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13486])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        WinCount                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateRoundWin(int32_t Player, int32_t WinCount)
{
	static UFunction* uFnUpdateRoundWin = nullptr;

	if (!uFnUpdateRoundWin)
	{
		uFnUpdateRoundWin = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateRoundWin");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateRoundWin_Params UpdateRoundWin_Params;
	memset(&UpdateRoundWin_Params, 0, sizeof(UpdateRoundWin_Params));
	memcpy_s(&UpdateRoundWin_Params.Player, sizeof(UpdateRoundWin_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateRoundWin_Params.WinCount, sizeof(UpdateRoundWin_Params.WinCount), &WinCount, sizeof(WinCount));

	this->ProcessEvent(uFnUpdateRoundWin, &UpdateRoundWin_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.SetupRoundNum
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13429])
// Parameter Info:
// int32_t                        round1                         (CPF_Parm)
// int32_t                        round2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::SetupRoundNum(int32_t round1, int32_t round2)
{
	static UFunction* uFnSetupRoundNum = nullptr;

	if (!uFnSetupRoundNum)
	{
		uFnSetupRoundNum = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.SetupRoundNum");
	}

	UREDGfxMoviePlayer_BattleUpside_execSetupRoundNum_Params SetupRoundNum_Params;
	memset(&SetupRoundNum_Params, 0, sizeof(SetupRoundNum_Params));
	memcpy_s(&SetupRoundNum_Params.round1, sizeof(SetupRoundNum_Params.round1), &round1, sizeof(round1));
	memcpy_s(&SetupRoundNum_Params.round2, sizeof(SetupRoundNum_Params.round2), &round2, sizeof(round2));

	this->ProcessEvent(uFnSetupRoundNum, &SetupRoundNum_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateTimer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13492])
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateTimer(int32_t Time)
{
	static UFunction* uFnUpdateTimer = nullptr;

	if (!uFnUpdateTimer)
	{
		uFnUpdateTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateTimer");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateTimer_Params UpdateTimer_Params;
	memset(&UpdateTimer_Params, 0, sizeof(UpdateTimer_Params));
	memcpy_s(&UpdateTimer_Params.Time, sizeof(UpdateTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateTimer, &UpdateTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.RequestInfoText
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13378])
// Parameter Info:
// int32_t                        TextID                         (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// int32_t                        subID1                         (CPF_Parm)
// int32_t                        subID2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::RequestInfoText(int32_t TextID, int32_t Player, int32_t subID1, int32_t subID2)
{
	static UFunction* uFnRequestInfoText = nullptr;

	if (!uFnRequestInfoText)
	{
		uFnRequestInfoText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.RequestInfoText");
	}

	UREDGfxMoviePlayer_BattleUpside_execRequestInfoText_Params RequestInfoText_Params;
	memset(&RequestInfoText_Params, 0, sizeof(RequestInfoText_Params));
	memcpy_s(&RequestInfoText_Params.TextID, sizeof(RequestInfoText_Params.TextID), &TextID, sizeof(TextID));
	memcpy_s(&RequestInfoText_Params.Player, sizeof(RequestInfoText_Params.Player), &Player, sizeof(Player));
	memcpy_s(&RequestInfoText_Params.subID1, sizeof(RequestInfoText_Params.subID1), &subID1, sizeof(subID1));
	memcpy_s(&RequestInfoText_Params.subID2, sizeof(RequestInfoText_Params.subID2), &subID2, sizeof(subID2));

	this->ProcessEvent(uFnRequestInfoText, &RequestInfoText_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.HideCombo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13304])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::HideCombo(int32_t Player)
{
	static UFunction* uFnHideCombo = nullptr;

	if (!uFnHideCombo)
	{
		uFnHideCombo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.HideCombo");
	}

	UREDGfxMoviePlayer_BattleUpside_execHideCombo_Params HideCombo_Params;
	memset(&HideCombo_Params, 0, sizeof(HideCombo_Params));
	memcpy_s(&HideCombo_Params.Player, sizeof(HideCombo_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnHideCombo, &HideCombo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowComboSub
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39893])
// Parameter Info:
// int32_t                        combo                          (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       isImperfect                    (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm)
// uint32_t                       damagedisp                     (CPF_Parm)
// int32_t                        comp0                          (CPF_Parm)
// int32_t                        comp1                          (CPF_Parm)
// int32_t                        comp2                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::ShowComboSub(int32_t combo, int32_t Player, bool isImperfect, int32_t Damage, bool damagedisp, int32_t comp0, int32_t comp1, int32_t comp2)
{
	static UFunction* uFnShowComboSub = nullptr;

	if (!uFnShowComboSub)
	{
		uFnShowComboSub = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowComboSub");
	}

	UREDGfxMoviePlayer_BattleUpside_execShowComboSub_Params ShowComboSub_Params;
	memset(&ShowComboSub_Params, 0, sizeof(ShowComboSub_Params));
	memcpy_s(&ShowComboSub_Params.combo, sizeof(ShowComboSub_Params.combo), &combo, sizeof(combo));
	memcpy_s(&ShowComboSub_Params.Player, sizeof(ShowComboSub_Params.Player), &Player, sizeof(Player));
	ShowComboSub_Params.isImperfect = isImperfect;
	memcpy_s(&ShowComboSub_Params.Damage, sizeof(ShowComboSub_Params.Damage), &Damage, sizeof(Damage));
	ShowComboSub_Params.damagedisp = damagedisp;
	memcpy_s(&ShowComboSub_Params.comp0, sizeof(ShowComboSub_Params.comp0), &comp0, sizeof(comp0));
	memcpy_s(&ShowComboSub_Params.comp1, sizeof(ShowComboSub_Params.comp1), &comp1, sizeof(comp1));
	memcpy_s(&ShowComboSub_Params.comp2, sizeof(ShowComboSub_Params.comp2), &comp2, sizeof(comp2));

	this->ProcessEvent(uFnShowComboSub, &ShowComboSub_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.ComboEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36271])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Level                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::ComboEffect(int32_t Player, int32_t Level)
{
	static UFunction* uFnComboEffect = nullptr;

	if (!uFnComboEffect)
	{
		uFnComboEffect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.ComboEffect");
	}

	UREDGfxMoviePlayer_BattleUpside_execComboEffect_Params ComboEffect_Params;
	memset(&ComboEffect_Params, 0, sizeof(ComboEffect_Params));
	memcpy_s(&ComboEffect_Params.Player, sizeof(ComboEffect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ComboEffect_Params.Level, sizeof(ComboEffect_Params.Level), &Level, sizeof(Level));

	this->ProcessEvent(uFnComboEffect, &ComboEffect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowCombo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        combo                          (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       isImperfect                    (CPF_Parm)
// int32_t                        Damage                         (CPF_Parm)
// uint32_t                       damagedisp                     (CPF_Parm)
// int32_t                        comp0                          (CPF_Parm)
// int32_t                        comp1                          (CPF_Parm)
// int32_t                        comp2                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::ShowCombo(int32_t combo, int32_t Player, bool isImperfect, int32_t Damage, bool damagedisp, int32_t comp0, int32_t comp1, int32_t comp2)
{
	static UFunction* uFnShowCombo = nullptr;

	if (!uFnShowCombo)
	{
		uFnShowCombo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.ShowCombo");
	}

	UREDGfxMoviePlayer_BattleUpside_execShowCombo_Params ShowCombo_Params;
	memset(&ShowCombo_Params, 0, sizeof(ShowCombo_Params));
	memcpy_s(&ShowCombo_Params.combo, sizeof(ShowCombo_Params.combo), &combo, sizeof(combo));
	memcpy_s(&ShowCombo_Params.Player, sizeof(ShowCombo_Params.Player), &Player, sizeof(Player));
	ShowCombo_Params.isImperfect = isImperfect;
	memcpy_s(&ShowCombo_Params.Damage, sizeof(ShowCombo_Params.Damage), &Damage, sizeof(Damage));
	ShowCombo_Params.damagedisp = damagedisp;
	memcpy_s(&ShowCombo_Params.comp0, sizeof(ShowCombo_Params.comp0), &comp0, sizeof(comp0));
	memcpy_s(&ShowCombo_Params.comp1, sizeof(ShowCombo_Params.comp1), &comp1, sizeof(comp1));
	memcpy_s(&ShowCombo_Params.comp2, sizeof(ShowCombo_Params.comp2), &comp2, sizeof(comp2));

	this->ProcessEvent(uFnShowCombo, &ShowCombo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateBurst
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13477])
// Parameter Info:
// float                          val1                           (CPF_Parm)
// float                          val2                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateBurst(float val1, float val2)
{
	static UFunction* uFnUpdateBurst = nullptr;

	if (!uFnUpdateBurst)
	{
		uFnUpdateBurst = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateBurst");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateBurst_Params UpdateBurst_Params;
	memset(&UpdateBurst_Params, 0, sizeof(UpdateBurst_Params));
	memcpy_s(&UpdateBurst_Params.val1, sizeof(UpdateBurst_Params.val1), &val1, sizeof(val1));
	memcpy_s(&UpdateBurst_Params.val2, sizeof(UpdateBurst_Params.val2), &val2, sizeof(val2));

	this->ProcessEvent(uFnUpdateBurst, &UpdateBurst_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHP
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13482])
// Parameter Info:
// float                          hp1                            (CPF_Parm)
// float                          hp2                            (CPF_Parm)
// float                          red1                           (CPF_Parm)
// float                          red2                           (CPF_Parm)
// float                          white1                         (CPF_Parm)
// float                          white2                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::UpdateHP(float hp1, float hp2, float red1, float red2, float white1, float white2)
{
	static UFunction* uFnUpdateHP = nullptr;

	if (!uFnUpdateHP)
	{
		uFnUpdateHP = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.UpdateHP");
	}

	UREDGfxMoviePlayer_BattleUpside_execUpdateHP_Params UpdateHP_Params;
	memset(&UpdateHP_Params, 0, sizeof(UpdateHP_Params));
	memcpy_s(&UpdateHP_Params.hp1, sizeof(UpdateHP_Params.hp1), &hp1, sizeof(hp1));
	memcpy_s(&UpdateHP_Params.hp2, sizeof(UpdateHP_Params.hp2), &hp2, sizeof(hp2));
	memcpy_s(&UpdateHP_Params.red1, sizeof(UpdateHP_Params.red1), &red1, sizeof(red1));
	memcpy_s(&UpdateHP_Params.red2, sizeof(UpdateHP_Params.red2), &red2, sizeof(red2));
	memcpy_s(&UpdateHP_Params.white1, sizeof(UpdateHP_Params.white1), &white1, sizeof(white1));
	memcpy_s(&UpdateHP_Params.white2, sizeof(UpdateHP_Params.white2), &white2, sizeof(white2));

	this->ProcessEvent(uFnUpdateHP, &UpdateHP_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.GetBattleVersion
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37005])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_BattleUpside::GetBattleVersion()
{
	static UFunction* uFnGetBattleVersion = nullptr;

	if (!uFnGetBattleVersion)
	{
		uFnGetBattleVersion = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.GetBattleVersion");
	}

	UREDGfxMoviePlayer_BattleUpside_execGetBattleVersion_Params GetBattleVersion_Params;
	memset(&GetBattleVersion_Params, 0, sizeof(GetBattleVersion_Params));

	this->ProcessEvent(uFnGetBattleVersion, &GetBattleVersion_Params, nullptr);

	return GetBattleVersion_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.MovieStartInternal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_Parm)

bool UREDGfxMoviePlayer_BattleUpside::MovieStartInternal(bool StartPaused)
{
	static UFunction* uFnMovieStartInternal = nullptr;

	if (!uFnMovieStartInternal)
	{
		uFnMovieStartInternal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.MovieStartInternal");
	}

	UREDGfxMoviePlayer_BattleUpside_execMovieStartInternal_Params MovieStartInternal_Params;
	memset(&MovieStartInternal_Params, 0, sizeof(MovieStartInternal_Params));
	MovieStartInternal_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnMovieStartInternal, &MovieStartInternal_Params, nullptr);

	return MovieStartInternal_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeMC
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleUpside::InitializeMC()
{
	static UFunction* uFnInitializeMC = nullptr;

	if (!uFnInitializeMC)
	{
		uFnInitializeMC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeMC");
	}

	UREDGfxMoviePlayer_BattleUpside_execInitializeMC_Params InitializeMC_Params;
	memset(&InitializeMC_Params, 0, sizeof(InitializeMC_Params));

	this->ProcessEvent(uFnInitializeMC, &InitializeMC_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeHUDBurst
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// struct FBurstMC                mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleUpside::InitializeHUDBurst(int32_t Player, struct FBurstMC& mc)
{
	static UFunction* uFnInitializeHUDBurst = nullptr;

	if (!uFnInitializeHUDBurst)
	{
		uFnInitializeHUDBurst = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeHUDBurst");
	}

	UREDGfxMoviePlayer_BattleUpside_execInitializeHUDBurst_Params InitializeHUDBurst_Params;
	memset(&InitializeHUDBurst_Params, 0, sizeof(InitializeHUDBurst_Params));
	memcpy_s(&InitializeHUDBurst_Params.Player, sizeof(InitializeHUDBurst_Params.Player), &Player, sizeof(Player));
	memcpy_s(&InitializeHUDBurst_Params.mc, sizeof(InitializeHUDBurst_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnInitializeHUDBurst, &InitializeHUDBurst_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &InitializeHUDBurst_Params.mc, sizeof(InitializeHUDBurst_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeHUDTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              GaugeRoot                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::InitializeHUDTimer(class UGFxObject* GaugeRoot)
{
	static UFunction* uFnInitializeHUDTimer = nullptr;

	if (!uFnInitializeHUDTimer)
	{
		uFnInitializeHUDTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeHUDTimer");
	}

	UREDGfxMoviePlayer_BattleUpside_execInitializeHUDTimer_Params InitializeHUDTimer_Params;
	memset(&InitializeHUDTimer_Params, 0, sizeof(InitializeHUDTimer_Params));
	InitializeHUDTimer_Params.GaugeRoot = GaugeRoot;

	this->ProcessEvent(uFnInitializeHUDTimer, &InitializeHUDTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeGhostGauge
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              GaugeRoot                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleUpside::InitializeGhostGauge(class UGFxObject* GaugeRoot)
{
	static UFunction* uFnInitializeGhostGauge = nullptr;

	if (!uFnInitializeGhostGauge)
	{
		uFnInitializeGhostGauge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeGhostGauge");
	}

	UREDGfxMoviePlayer_BattleUpside_execInitializeGhostGauge_Params InitializeGhostGauge_Params;
	memset(&InitializeGhostGauge_Params, 0, sizeof(InitializeGhostGauge_Params));
	InitializeGhostGauge_Params.GaugeRoot = GaugeRoot;

	this->ProcessEvent(uFnInitializeGhostGauge, &InitializeGhostGauge_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeGhostGaugeOne
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              GaugeRoot                      (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// struct FJKOGaugeMC             Dest                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleUpside::InitializeGhostGaugeOne(class UGFxObject* GaugeRoot, int32_t Player, int32_t Type, struct FJKOGaugeMC& Dest)
{
	static UFunction* uFnInitializeGhostGaugeOne = nullptr;

	if (!uFnInitializeGhostGaugeOne)
	{
		uFnInitializeGhostGaugeOne = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeGhostGaugeOne");
	}

	UREDGfxMoviePlayer_BattleUpside_execInitializeGhostGaugeOne_Params InitializeGhostGaugeOne_Params;
	memset(&InitializeGhostGaugeOne_Params, 0, sizeof(InitializeGhostGaugeOne_Params));
	InitializeGhostGaugeOne_Params.GaugeRoot = GaugeRoot;
	memcpy_s(&InitializeGhostGaugeOne_Params.Player, sizeof(InitializeGhostGaugeOne_Params.Player), &Player, sizeof(Player));
	memcpy_s(&InitializeGhostGaugeOne_Params.Type, sizeof(InitializeGhostGaugeOne_Params.Type), &Type, sizeof(Type));
	memcpy_s(&InitializeGhostGaugeOne_Params.Dest, sizeof(InitializeGhostGaugeOne_Params.Dest), &Dest, sizeof(Dest));

	this->ProcessEvent(uFnInitializeGhostGaugeOne, &InitializeGhostGaugeOne_Params, nullptr);

	memcpy_s(&Dest, sizeof(Dest), &InitializeGhostGaugeOne_Params.Dest, sizeof(InitializeGhostGaugeOne_Params.Dest));
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeRoundNumIcon
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              PlayerGaugeRoot                (CPF_Parm)
// struct FRoundNumIconMC         mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleUpside::InitializeRoundNumIcon(class UGFxObject* PlayerGaugeRoot, struct FRoundNumIconMC& mc)
{
	static UFunction* uFnInitializeRoundNumIcon = nullptr;

	if (!uFnInitializeRoundNumIcon)
	{
		uFnInitializeRoundNumIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeRoundNumIcon");
	}

	UREDGfxMoviePlayer_BattleUpside_execInitializeRoundNumIcon_Params InitializeRoundNumIcon_Params;
	memset(&InitializeRoundNumIcon_Params, 0, sizeof(InitializeRoundNumIcon_Params));
	InitializeRoundNumIcon_Params.PlayerGaugeRoot = PlayerGaugeRoot;
	memcpy_s(&InitializeRoundNumIcon_Params.mc, sizeof(InitializeRoundNumIcon_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnInitializeRoundNumIcon, &InitializeRoundNumIcon_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &InitializeRoundNumIcon_Params.mc, sizeof(InitializeRoundNumIcon_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeHPGauge
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UGFxObject*              PlayerGaugeRoot                (CPF_Parm)
// struct FHPGaugeMC              mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleUpside::InitializeHPGauge(class UGFxObject* PlayerGaugeRoot, struct FHPGaugeMC& mc)
{
	static UFunction* uFnInitializeHPGauge = nullptr;

	if (!uFnInitializeHPGauge)
	{
		uFnInitializeHPGauge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeHPGauge");
	}

	UREDGfxMoviePlayer_BattleUpside_execInitializeHPGauge_Params InitializeHPGauge_Params;
	memset(&InitializeHPGauge_Params, 0, sizeof(InitializeHPGauge_Params));
	InitializeHPGauge_Params.PlayerGaugeRoot = PlayerGaugeRoot;
	memcpy_s(&InitializeHPGauge_Params.mc, sizeof(InitializeHPGauge_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnInitializeHPGauge, &InitializeHPGauge_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &InitializeHPGauge_Params.mc, sizeof(InitializeHPGauge_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeMiddlePlate
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PlayerID                       (CPF_Parm)
// class UGFxObject*              MiddlePlateRoot                (CPF_Parm)
// struct FMiddlePlateMC          mc                             (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_BattleUpside::InitializeMiddlePlate(int32_t PlayerID, class UGFxObject* MiddlePlateRoot, struct FMiddlePlateMC& mc)
{
	static UFunction* uFnInitializeMiddlePlate = nullptr;

	if (!uFnInitializeMiddlePlate)
	{
		uFnInitializeMiddlePlate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.InitializeMiddlePlate");
	}

	UREDGfxMoviePlayer_BattleUpside_execInitializeMiddlePlate_Params InitializeMiddlePlate_Params;
	memset(&InitializeMiddlePlate_Params, 0, sizeof(InitializeMiddlePlate_Params));
	memcpy_s(&InitializeMiddlePlate_Params.PlayerID, sizeof(InitializeMiddlePlate_Params.PlayerID), &PlayerID, sizeof(PlayerID));
	InitializeMiddlePlate_Params.MiddlePlateRoot = MiddlePlateRoot;
	memcpy_s(&InitializeMiddlePlate_Params.mc, sizeof(InitializeMiddlePlate_Params.mc), &mc, sizeof(mc));

	this->ProcessEvent(uFnInitializeMiddlePlate, &InitializeMiddlePlate_Params, nullptr);

	memcpy_s(&mc, sizeof(mc), &InitializeMiddlePlate_Params.mc, sizeof(InitializeMiddlePlate_Params.mc));
};

// Function REDGame.REDGfxMoviePlayer_BattleUpside.GetScore
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37162])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleUpside::GetScore(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetScore = nullptr;

	if (!uFnGetScore)
	{
		uFnGetScore = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleUpside.GetScore");
	}

	UREDGfxMoviePlayer_BattleUpside_execGetScore_Params GetScore_Params;
	memset(&GetScore_Params, 0, sizeof(GetScore_Params));
	memcpy_s(&GetScore_Params.Player, sizeof(GetScore_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetScore, &GetScore_Params, nullptr);

	return GetScore_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_PlayLevelUP
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::AS_PlayLevelUP(int32_t Player)
{
	static UFunction* uFnAS_PlayLevelUP = nullptr;

	if (!uFnAS_PlayLevelUP)
	{
		uFnAS_PlayLevelUP = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_PlayLevelUP");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execAS_PlayLevelUP_Params AS_PlayLevelUP_Params;
	memset(&AS_PlayLevelUP_Params, 0, sizeof(AS_PlayLevelUP_Params));
	memcpy_s(&AS_PlayLevelUP_Params.Player, sizeof(AS_PlayLevelUP_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnAS_PlayLevelUP, &AS_PlayLevelUP_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_SetExpBar
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// float                          val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::AS_SetExpBar(int32_t Player, float val)
{
	static UFunction* uFnAS_SetExpBar = nullptr;

	if (!uFnAS_SetExpBar)
	{
		uFnAS_SetExpBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_SetExpBar");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execAS_SetExpBar_Params AS_SetExpBar_Params;
	memset(&AS_SetExpBar_Params, 0, sizeof(AS_SetExpBar_Params));
	memcpy_s(&AS_SetExpBar_Params.Player, sizeof(AS_SetExpBar_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AS_SetExpBar_Params.val, sizeof(AS_SetExpBar_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnAS_SetExpBar, &AS_SetExpBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_SetBattleResult
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  res                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleResultMedal::AS_SetBattleResult(int32_t Player, const class FString& res)
{
	static UFunction* uFnAS_SetBattleResult = nullptr;

	if (!uFnAS_SetBattleResult)
	{
		uFnAS_SetBattleResult = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_SetBattleResult");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execAS_SetBattleResult_Params AS_SetBattleResult_Params;
	memset(&AS_SetBattleResult_Params, 0, sizeof(AS_SetBattleResult_Params));
	memcpy_s(&AS_SetBattleResult_Params.Player, sizeof(AS_SetBattleResult_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AS_SetBattleResult_Params.res, sizeof(AS_SetBattleResult_Params.res), &res, sizeof(res));

	this->ProcessEvent(uFnAS_SetBattleResult, &AS_SetBattleResult_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_Show
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleResultMedal::AS_Show()
{
	static UFunction* uFnAS_Show = nullptr;

	if (!uFnAS_Show)
	{
		uFnAS_Show = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_Show");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execAS_Show_Params AS_Show_Params;
	memset(&AS_Show_Params, 0, sizeof(AS_Show_Params));

	this->ProcessEvent(uFnAS_Show, &AS_Show_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_SetMedalAnime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// class FString                  medalName                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Grade                          (CPF_Parm)
// int32_t                        Category                       (CPF_Parm)
// uint32_t                       isBigPlate                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::AS_SetMedalAnime(int32_t Player, int32_t Index, const class FString& medalName, int32_t Grade, int32_t Category, bool isBigPlate)
{
	static UFunction* uFnAS_SetMedalAnime = nullptr;

	if (!uFnAS_SetMedalAnime)
	{
		uFnAS_SetMedalAnime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_SetMedalAnime");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execAS_SetMedalAnime_Params AS_SetMedalAnime_Params;
	memset(&AS_SetMedalAnime_Params, 0, sizeof(AS_SetMedalAnime_Params));
	memcpy_s(&AS_SetMedalAnime_Params.Player, sizeof(AS_SetMedalAnime_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AS_SetMedalAnime_Params.Index, sizeof(AS_SetMedalAnime_Params.Index), &Index, sizeof(Index));
	memcpy_s(&AS_SetMedalAnime_Params.medalName, sizeof(AS_SetMedalAnime_Params.medalName), &medalName, sizeof(medalName));
	memcpy_s(&AS_SetMedalAnime_Params.Grade, sizeof(AS_SetMedalAnime_Params.Grade), &Grade, sizeof(Grade));
	memcpy_s(&AS_SetMedalAnime_Params.Category, sizeof(AS_SetMedalAnime_Params.Category), &Category, sizeof(Category));
	AS_SetMedalAnime_Params.isBigPlate = isBigPlate;

	this->ProcessEvent(uFnAS_SetMedalAnime, &AS_SetMedalAnime_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_FadeOut
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleResultMedal::AS_FadeOut()
{
	static UFunction* uFnAS_FadeOut = nullptr;

	if (!uFnAS_FadeOut)
	{
		uFnAS_FadeOut = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AS_FadeOut");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execAS_FadeOut_Params AS_FadeOut_Params;
	memset(&AS_FadeOut_Params, 0, sizeof(AS_FadeOut_Params));

	this->ProcessEvent(uFnAS_FadeOut, &AS_FadeOut_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.UpdateMedalAnime
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)
// class TArray<struct FMedalAnimInfo> infoArray                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleResultMedal::UpdateMedalAnime(EUE_PLAYER_ID Player, int32_t frame, class TArray<struct FMedalAnimInfo>& infoArray)
{
	static UFunction* uFnUpdateMedalAnime = nullptr;

	if (!uFnUpdateMedalAnime)
	{
		uFnUpdateMedalAnime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.UpdateMedalAnime");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execUpdateMedalAnime_Params UpdateMedalAnime_Params;
	memset(&UpdateMedalAnime_Params, 0, sizeof(UpdateMedalAnime_Params));
	memcpy_s(&UpdateMedalAnime_Params.Player, sizeof(UpdateMedalAnime_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateMedalAnime_Params.frame, sizeof(UpdateMedalAnime_Params.frame), &frame, sizeof(frame));
	memcpy_s(&UpdateMedalAnime_Params.infoArray, sizeof(UpdateMedalAnime_Params.infoArray), &infoArray, sizeof(infoArray));

	this->ProcessEvent(uFnUpdateMedalAnime, &UpdateMedalAnime_Params, nullptr);

	memcpy_s(&infoArray, sizeof(infoArray), &UpdateMedalAnime_Params.infoArray, sizeof(UpdateMedalAnime_Params.infoArray));
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.Update
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::Update(float DeltaTime)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.Update");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.DeltaTime, sizeof(Update_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AddExpCallback
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        medalIndex                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::AddExpCallback(int32_t Player, int32_t medalIndex)
{
	static UFunction* uFnAddExpCallback = nullptr;

	if (!uFnAddExpCallback)
	{
		uFnAddExpCallback = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AddExpCallback");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execAddExpCallback_Params AddExpCallback_Params;
	memset(&AddExpCallback_Params, 0, sizeof(AddExpCallback_Params));
	memcpy_s(&AddExpCallback_Params.Player, sizeof(AddExpCallback_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AddExpCallback_Params.medalIndex, sizeof(AddExpCallback_Params.medalIndex), &medalIndex, sizeof(medalIndex));

	this->ProcessEvent(uFnAddExpCallback, &AddExpCallback_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.UpdateExpBar
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::UpdateExpBar(int32_t Player)
{
	static UFunction* uFnUpdateExpBar = nullptr;

	if (!uFnUpdateExpBar)
	{
		uFnUpdateExpBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.UpdateExpBar");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execUpdateExpBar_Params UpdateExpBar_Params;
	memset(&UpdateExpBar_Params, 0, sizeof(UpdateExpBar_Params));
	memcpy_s(&UpdateExpBar_Params.Player, sizeof(UpdateExpBar_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateExpBar, &UpdateExpBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.SetBattleResult
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  res                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleResultMedal::eventSetBattleResult(int32_t Player, const class FString& res)
{
	static UFunction* uFnSetBattleResult = nullptr;

	if (!uFnSetBattleResult)
	{
		uFnSetBattleResult = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.SetBattleResult");
	}

	UREDGfxMoviePlayer_BattleResultMedal_eventSetBattleResult_Params SetBattleResult_Params;
	memset(&SetBattleResult_Params, 0, sizeof(SetBattleResult_Params));
	memcpy_s(&SetBattleResult_Params.Player, sizeof(SetBattleResult_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetBattleResult_Params.res, sizeof(SetBattleResult_Params.res), &res, sizeof(res));

	this->ProcessEvent(uFnSetBattleResult, &SetBattleResult_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AddMedalInfo
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  medalName                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Grade                          (CPF_Parm)
// int32_t                        Category                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::eventAddMedalInfo(int32_t Player, const class FString& medalName, int32_t Grade, int32_t Category)
{
	static UFunction* uFnAddMedalInfo = nullptr;

	if (!uFnAddMedalInfo)
	{
		uFnAddMedalInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.AddMedalInfo");
	}

	UREDGfxMoviePlayer_BattleResultMedal_eventAddMedalInfo_Params AddMedalInfo_Params;
	memset(&AddMedalInfo_Params, 0, sizeof(AddMedalInfo_Params));
	memcpy_s(&AddMedalInfo_Params.Player, sizeof(AddMedalInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AddMedalInfo_Params.medalName, sizeof(AddMedalInfo_Params.medalName), &medalName, sizeof(medalName));
	memcpy_s(&AddMedalInfo_Params.Grade, sizeof(AddMedalInfo_Params.Grade), &Grade, sizeof(Grade));
	memcpy_s(&AddMedalInfo_Params.Category, sizeof(AddMedalInfo_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnAddMedalInfo, &AddMedalInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.Show
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleResultMedal::eventShow()
{
	static UFunction* uFnShow = nullptr;

	if (!uFnShow)
	{
		uFnShow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.Show");
	}

	UREDGfxMoviePlayer_BattleResultMedal_eventShow_Params Show_Params;
	memset(&Show_Params, 0, sizeof(Show_Params));

	this->ProcessEvent(uFnShow, &Show_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.SetAddExp
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::eventSetAddExp(int32_t Player, int32_t val)
{
	static UFunction* uFnSetAddExp = nullptr;

	if (!uFnSetAddExp)
	{
		uFnSetAddExp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.SetAddExp");
	}

	UREDGfxMoviePlayer_BattleResultMedal_eventSetAddExp_Params SetAddExp_Params;
	memset(&SetAddExp_Params, 0, sizeof(SetAddExp_Params));
	memcpy_s(&SetAddExp_Params.Player, sizeof(SetAddExp_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetAddExp_Params.val, sizeof(SetAddExp_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetAddExp, &SetAddExp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.SetExp
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::eventSetExp(int32_t Player, int32_t val)
{
	static UFunction* uFnSetExp = nullptr;

	if (!uFnSetExp)
	{
		uFnSetExp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.SetExp");
	}

	UREDGfxMoviePlayer_BattleResultMedal_eventSetExp_Params SetExp_Params;
	memset(&SetExp_Params, 0, sizeof(SetExp_Params));
	memcpy_s(&SetExp_Params.Player, sizeof(SetExp_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetExp_Params.val, sizeof(SetExp_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetExp, &SetExp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.SetIchigeki
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultMedal::eventSetIchigeki(bool val)
{
	static UFunction* uFnSetIchigeki = nullptr;

	if (!uFnSetIchigeki)
	{
		uFnSetIchigeki = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.SetIchigeki");
	}

	UREDGfxMoviePlayer_BattleResultMedal_eventSetIchigeki_Params SetIchigeki_Params;
	memset(&SetIchigeki_Params, 0, sizeof(SetIchigeki_Params));
	SetIchigeki_Params.val = val;

	this->ProcessEvent(uFnSetIchigeki, &SetIchigeki_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultMedal.MovieStartInternal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultMedal::MovieStartInternal(bool StartPaused)
{
	static UFunction* uFnMovieStartInternal = nullptr;

	if (!uFnMovieStartInternal)
	{
		uFnMovieStartInternal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultMedal.MovieStartInternal");
	}

	UREDGfxMoviePlayer_BattleResultMedal_execMovieStartInternal_Params MovieStartInternal_Params;
	memset(&MovieStartInternal_Params, 0, sizeof(MovieStartInternal_Params));
	MovieStartInternal_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnMovieStartInternal, &MovieStartInternal_Params, nullptr);

	return MovieStartInternal_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.Update
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::Update(float DeltaTime)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.Update");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.DeltaTime, sizeof(Update_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateQuestWindow
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::UpdateQuestWindow(int32_t Player, bool bTrigger)
{
	static UFunction* uFnUpdateQuestWindow = nullptr;

	if (!uFnUpdateQuestWindow)
	{
		uFnUpdateQuestWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateQuestWindow");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execUpdateQuestWindow_Params UpdateQuestWindow_Params;
	memset(&UpdateQuestWindow_Params, 0, sizeof(UpdateQuestWindow_Params));
	memcpy_s(&UpdateQuestWindow_Params.Player, sizeof(UpdateQuestWindow_Params.Player), &Player, sizeof(Player));
	UpdateQuestWindow_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateQuestWindow, &UpdateQuestWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateMedalWindow
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::UpdateMedalWindow(int32_t Player, bool bTrigger)
{
	static UFunction* uFnUpdateMedalWindow = nullptr;

	if (!uFnUpdateMedalWindow)
	{
		uFnUpdateMedalWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateMedalWindow");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execUpdateMedalWindow_Params UpdateMedalWindow_Params;
	memset(&UpdateMedalWindow_Params, 0, sizeof(UpdateMedalWindow_Params));
	memcpy_s(&UpdateMedalWindow_Params.Player, sizeof(UpdateMedalWindow_Params.Player), &Player, sizeof(Player));
	UpdateMedalWindow_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMedalWindow, &UpdateMedalWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateMainWindow
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::UpdateMainWindow(int32_t Player, bool bTrigger)
{
	static UFunction* uFnUpdateMainWindow = nullptr;

	if (!uFnUpdateMainWindow)
	{
		uFnUpdateMainWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateMainWindow");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execUpdateMainWindow_Params UpdateMainWindow_Params;
	memset(&UpdateMainWindow_Params, 0, sizeof(UpdateMainWindow_Params));
	memcpy_s(&UpdateMainWindow_Params.Player, sizeof(UpdateMainWindow_Params.Player), &Player, sizeof(Player));
	UpdateMainWindow_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainWindow, &UpdateMainWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateQuest2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bUp                            (CPF_Parm)
// uint32_t                       bDown                          (CPF_Parm)
// int32_t                        addVal                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleResultWindow::UpdateQuest2P(bool bUp, bool bDown, int32_t addVal)
{
	static UFunction* uFnUpdateQuest2P = nullptr;

	if (!uFnUpdateQuest2P)
	{
		uFnUpdateQuest2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateQuest2P");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execUpdateQuest2P_Params UpdateQuest2P_Params;
	memset(&UpdateQuest2P_Params, 0, sizeof(UpdateQuest2P_Params));
	UpdateQuest2P_Params.bUp = bUp;
	UpdateQuest2P_Params.bDown = bDown;
	memcpy_s(&UpdateQuest2P_Params.addVal, sizeof(UpdateQuest2P_Params.addVal), &addVal, sizeof(addVal));

	this->ProcessEvent(uFnUpdateQuest2P, &UpdateQuest2P_Params, nullptr);

	return UpdateQuest2P_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateQuest1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bUp                            (CPF_Parm)
// uint32_t                       bDown                          (CPF_Parm)
// int32_t                        addVal                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleResultWindow::UpdateQuest1P(bool bUp, bool bDown, int32_t addVal)
{
	static UFunction* uFnUpdateQuest1P = nullptr;

	if (!uFnUpdateQuest1P)
	{
		uFnUpdateQuest1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateQuest1P");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execUpdateQuest1P_Params UpdateQuest1P_Params;
	memset(&UpdateQuest1P_Params, 0, sizeof(UpdateQuest1P_Params));
	UpdateQuest1P_Params.bUp = bUp;
	UpdateQuest1P_Params.bDown = bDown;
	memcpy_s(&UpdateQuest1P_Params.addVal, sizeof(UpdateQuest1P_Params.addVal), &addVal, sizeof(addVal));

	this->ProcessEvent(uFnUpdateQuest1P, &UpdateQuest1P_Params, nullptr);

	return UpdateQuest1P_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateMedal2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bUp                            (CPF_Parm)
// uint32_t                       bDown                          (CPF_Parm)
// int32_t                        addVal                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleResultWindow::UpdateMedal2P(bool bUp, bool bDown, int32_t addVal)
{
	static UFunction* uFnUpdateMedal2P = nullptr;

	if (!uFnUpdateMedal2P)
	{
		uFnUpdateMedal2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateMedal2P");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execUpdateMedal2P_Params UpdateMedal2P_Params;
	memset(&UpdateMedal2P_Params, 0, sizeof(UpdateMedal2P_Params));
	UpdateMedal2P_Params.bUp = bUp;
	UpdateMedal2P_Params.bDown = bDown;
	memcpy_s(&UpdateMedal2P_Params.addVal, sizeof(UpdateMedal2P_Params.addVal), &addVal, sizeof(addVal));

	this->ProcessEvent(uFnUpdateMedal2P, &UpdateMedal2P_Params, nullptr);

	return UpdateMedal2P_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateMedal1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bUp                            (CPF_Parm)
// uint32_t                       bDown                          (CPF_Parm)
// int32_t                        addVal                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleResultWindow::UpdateMedal1P(bool bUp, bool bDown, int32_t addVal)
{
	static UFunction* uFnUpdateMedal1P = nullptr;

	if (!uFnUpdateMedal1P)
	{
		uFnUpdateMedal1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.UpdateMedal1P");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execUpdateMedal1P_Params UpdateMedal1P_Params;
	memset(&UpdateMedal1P_Params, 0, sizeof(UpdateMedal1P_Params));
	UpdateMedal1P_Params.bUp = bUp;
	UpdateMedal1P_Params.bDown = bDown;
	memcpy_s(&UpdateMedal1P_Params.addVal, sizeof(UpdateMedal1P_Params.addVal), &addVal, sizeof(addVal));

	this->ProcessEvent(uFnUpdateMedal1P, &UpdateMedal1P_Params, nullptr);

	return UpdateMedal1P_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetCpuRank
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Rank                           (CPF_Parm)
// int32_t                        addVal                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetCpuRank(int32_t Player, int32_t Rank, int32_t addVal)
{
	static UFunction* uFnSetCpuRank = nullptr;

	if (!uFnSetCpuRank)
	{
		uFnSetCpuRank = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetCpuRank");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetCpuRank_Params SetCpuRank_Params;
	memset(&SetCpuRank_Params, 0, sizeof(SetCpuRank_Params));
	memcpy_s(&SetCpuRank_Params.Player, sizeof(SetCpuRank_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCpuRank_Params.Rank, sizeof(SetCpuRank_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&SetCpuRank_Params.addVal, sizeof(SetCpuRank_Params.addVal), &addVal, sizeof(addVal));

	this->ProcessEvent(uFnSetCpuRank, &SetCpuRank_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetScore
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Score                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetScore(int32_t Player, int32_t Score)
{
	static UFunction* uFnSetScore = nullptr;

	if (!uFnSetScore)
	{
		uFnSetScore = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetScore");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetScore_Params SetScore_Params;
	memset(&SetScore_Params, 0, sizeof(SetScore_Params));
	memcpy_s(&SetScore_Params.Player, sizeof(SetScore_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetScore_Params.Score, sizeof(SetScore_Params.Score), &Score, sizeof(Score));

	this->ProcessEvent(uFnSetScore, &SetScore_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWinLoseLabel2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleResultWindow::SetWinLoseLabel2P(const class FString& Label)
{
	static UFunction* uFnSetWinLoseLabel2P = nullptr;

	if (!uFnSetWinLoseLabel2P)
	{
		uFnSetWinLoseLabel2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWinLoseLabel2P");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetWinLoseLabel2P_Params SetWinLoseLabel2P_Params;
	memset(&SetWinLoseLabel2P_Params, 0, sizeof(SetWinLoseLabel2P_Params));
	memcpy_s(&SetWinLoseLabel2P_Params.Label, sizeof(SetWinLoseLabel2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnSetWinLoseLabel2P, &SetWinLoseLabel2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWinLoseLabel1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleResultWindow::SetWinLoseLabel1P(const class FString& Label)
{
	static UFunction* uFnSetWinLoseLabel1P = nullptr;

	if (!uFnSetWinLoseLabel1P)
	{
		uFnSetWinLoseLabel1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWinLoseLabel1P");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetWinLoseLabel1P_Params SetWinLoseLabel1P_Params;
	memset(&SetWinLoseLabel1P_Params, 0, sizeof(SetWinLoseLabel1P_Params));
	memcpy_s(&SetWinLoseLabel1P_Params.Label, sizeof(SetWinLoseLabel1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnSetWinLoseLabel1P, &SetWinLoseLabel1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWinLose
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       isWin                          (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetWinLose(int32_t Player, bool isWin)
{
	static UFunction* uFnSetWinLose = nullptr;

	if (!uFnSetWinLose)
	{
		uFnSetWinLose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWinLose");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetWinLose_Params SetWinLose_Params;
	memset(&SetWinLose_Params, 0, sizeof(SetWinLose_Params));
	memcpy_s(&SetWinLose_Params.Player, sizeof(SetWinLose_Params.Player), &Player, sizeof(Player));
	SetWinLose_Params.isWin = isWin;

	this->ProcessEvent(uFnSetWinLose, &SetWinLose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetMedalNum
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        numAll                         (CPF_Parm)
// int32_t                        numGold                        (CPF_Parm)
// int32_t                        numRed                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetMedalNum(int32_t Player, int32_t numAll, int32_t numGold, int32_t numRed)
{
	static UFunction* uFnSetMedalNum = nullptr;

	if (!uFnSetMedalNum)
	{
		uFnSetMedalNum = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetMedalNum");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetMedalNum_Params SetMedalNum_Params;
	memset(&SetMedalNum_Params, 0, sizeof(SetMedalNum_Params));
	memcpy_s(&SetMedalNum_Params.Player, sizeof(SetMedalNum_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetMedalNum_Params.numAll, sizeof(SetMedalNum_Params.numAll), &numAll, sizeof(numAll));
	memcpy_s(&SetMedalNum_Params.numGold, sizeof(SetMedalNum_Params.numGold), &numGold, sizeof(numGold));
	memcpy_s(&SetMedalNum_Params.numRed, sizeof(SetMedalNum_Params.numRed), &numRed, sizeof(numRed));

	this->ProcessEvent(uFnSetMedalNum, &SetMedalNum_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetEnglishMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleResultWindow::SetEnglishMode()
{
	static UFunction* uFnSetEnglishMode = nullptr;

	if (!uFnSetEnglishMode)
	{
		uFnSetEnglishMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetEnglishMode");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetEnglishMode_Params SetEnglishMode_Params;
	memset(&SetEnglishMode_Params, 0, sizeof(SetEnglishMode_Params));

	this->ProcessEvent(uFnSetEnglishMode, &SetEnglishMode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.AddQuestInfo_Internal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  progText                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  questName                      (CPF_Parm | CPF_NeedCtorLink)
// float                          Rate                           (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// class FString                  rewordStr                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        rewordType                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::AddQuestInfo_Internal(int32_t Player, const class FString& progText, const class FString& questName, float Rate, int32_t Type, const class FString& rewordStr, int32_t rewordType)
{
	static UFunction* uFnAddQuestInfo_Internal = nullptr;

	if (!uFnAddQuestInfo_Internal)
	{
		uFnAddQuestInfo_Internal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.AddQuestInfo_Internal");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execAddQuestInfo_Internal_Params AddQuestInfo_Internal_Params;
	memset(&AddQuestInfo_Internal_Params, 0, sizeof(AddQuestInfo_Internal_Params));
	memcpy_s(&AddQuestInfo_Internal_Params.Player, sizeof(AddQuestInfo_Internal_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AddQuestInfo_Internal_Params.progText, sizeof(AddQuestInfo_Internal_Params.progText), &progText, sizeof(progText));
	memcpy_s(&AddQuestInfo_Internal_Params.questName, sizeof(AddQuestInfo_Internal_Params.questName), &questName, sizeof(questName));
	memcpy_s(&AddQuestInfo_Internal_Params.Rate, sizeof(AddQuestInfo_Internal_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&AddQuestInfo_Internal_Params.Type, sizeof(AddQuestInfo_Internal_Params.Type), &Type, sizeof(Type));
	memcpy_s(&AddQuestInfo_Internal_Params.rewordStr, sizeof(AddQuestInfo_Internal_Params.rewordStr), &rewordStr, sizeof(rewordStr));
	memcpy_s(&AddQuestInfo_Internal_Params.rewordType, sizeof(AddQuestInfo_Internal_Params.rewordType), &rewordType, sizeof(rewordType));

	this->ProcessEvent(uFnAddQuestInfo_Internal, &AddQuestInfo_Internal_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.AddQuestInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  questName                      (CPF_Parm | CPF_NeedCtorLink)
// float                          Rate                           (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// class FString                  rewordStr                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        rewordType                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::AddQuestInfo(int32_t Player, const class FString& questName, float Rate, int32_t Type, const class FString& rewordStr, int32_t rewordType)
{
	static UFunction* uFnAddQuestInfo = nullptr;

	if (!uFnAddQuestInfo)
	{
		uFnAddQuestInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.AddQuestInfo");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execAddQuestInfo_Params AddQuestInfo_Params;
	memset(&AddQuestInfo_Params, 0, sizeof(AddQuestInfo_Params));
	memcpy_s(&AddQuestInfo_Params.Player, sizeof(AddQuestInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AddQuestInfo_Params.questName, sizeof(AddQuestInfo_Params.questName), &questName, sizeof(questName));
	memcpy_s(&AddQuestInfo_Params.Rate, sizeof(AddQuestInfo_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&AddQuestInfo_Params.Type, sizeof(AddQuestInfo_Params.Type), &Type, sizeof(Type));
	memcpy_s(&AddQuestInfo_Params.rewordStr, sizeof(AddQuestInfo_Params.rewordStr), &rewordStr, sizeof(rewordStr));
	memcpy_s(&AddQuestInfo_Params.rewordType, sizeof(AddQuestInfo_Params.rewordType), &rewordType, sizeof(rewordType));

	this->ProcessEvent(uFnAddQuestInfo, &AddQuestInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.AddMedalInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  medalName                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  medalDesc                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Grade                          (CPF_Parm)
// uint32_t                       smallWidth                     (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::AddMedalInfo(int32_t Player, const class FString& medalName, const class FString& medalDesc, int32_t Grade, bool smallWidth)
{
	static UFunction* uFnAddMedalInfo = nullptr;

	if (!uFnAddMedalInfo)
	{
		uFnAddMedalInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.AddMedalInfo");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execAddMedalInfo_Params AddMedalInfo_Params;
	memset(&AddMedalInfo_Params, 0, sizeof(AddMedalInfo_Params));
	memcpy_s(&AddMedalInfo_Params.Player, sizeof(AddMedalInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AddMedalInfo_Params.medalName, sizeof(AddMedalInfo_Params.medalName), &medalName, sizeof(medalName));
	memcpy_s(&AddMedalInfo_Params.medalDesc, sizeof(AddMedalInfo_Params.medalDesc), &medalDesc, sizeof(medalDesc));
	memcpy_s(&AddMedalInfo_Params.Grade, sizeof(AddMedalInfo_Params.Grade), &Grade, sizeof(Grade));
	AddMedalInfo_Params.smallWidth = smallWidth;

	this->ProcessEvent(uFnAddMedalInfo, &AddMedalInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SkipDemote
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SkipDemote(int32_t Player)
{
	static UFunction* uFnSkipDemote = nullptr;

	if (!uFnSkipDemote)
	{
		uFnSkipDemote = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SkipDemote");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSkipDemote_Params SkipDemote_Params;
	memset(&SkipDemote_Params, 0, sizeof(SkipDemote_Params));
	memcpy_s(&SkipDemote_Params.Player, sizeof(SkipDemote_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSkipDemote, &SkipDemote_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SkipPromote
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SkipPromote(int32_t Player)
{
	static UFunction* uFnSkipPromote = nullptr;

	if (!uFnSkipPromote)
	{
		uFnSkipPromote = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SkipPromote");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSkipPromote_Params SkipPromote_Params;
	memset(&SkipPromote_Params, 0, sizeof(SkipPromote_Params));
	memcpy_s(&SkipPromote_Params.Player, sizeof(SkipPromote_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSkipPromote, &SkipPromote_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetDemote
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetDemote(int32_t Player)
{
	static UFunction* uFnSetDemote = nullptr;

	if (!uFnSetDemote)
	{
		uFnSetDemote = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetDemote");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetDemote_Params SetDemote_Params;
	memset(&SetDemote_Params, 0, sizeof(SetDemote_Params));
	memcpy_s(&SetDemote_Params.Player, sizeof(SetDemote_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSetDemote, &SetDemote_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.PlayDemote
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::PlayDemote(int32_t Player)
{
	static UFunction* uFnPlayDemote = nullptr;

	if (!uFnPlayDemote)
	{
		uFnPlayDemote = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.PlayDemote");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execPlayDemote_Params PlayDemote_Params;
	memset(&PlayDemote_Params, 0, sizeof(PlayDemote_Params));
	memcpy_s(&PlayDemote_Params.Player, sizeof(PlayDemote_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnPlayDemote, &PlayDemote_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetPromote
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetPromote(int32_t Player)
{
	static UFunction* uFnSetPromote = nullptr;

	if (!uFnSetPromote)
	{
		uFnSetPromote = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetPromote");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetPromote_Params SetPromote_Params;
	memset(&SetPromote_Params, 0, sizeof(SetPromote_Params));
	memcpy_s(&SetPromote_Params.Player, sizeof(SetPromote_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSetPromote, &SetPromote_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.PlayPromote
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::PlayPromote(int32_t Player)
{
	static UFunction* uFnPlayPromote = nullptr;

	if (!uFnPlayPromote)
	{
		uFnPlayPromote = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.PlayPromote");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execPlayPromote_Params PlayPromote_Params;
	memset(&PlayPromote_Params, 0, sizeof(PlayPromote_Params));
	memcpy_s(&PlayPromote_Params.Player, sizeof(PlayPromote_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnPlayPromote, &PlayPromote_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.RankTestFinish
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        Rank                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::RankTestFinish(int32_t Player, int32_t Rank)
{
	static UFunction* uFnRankTestFinish = nullptr;

	if (!uFnRankTestFinish)
	{
		uFnRankTestFinish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.RankTestFinish");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execRankTestFinish_Params RankTestFinish_Params;
	memset(&RankTestFinish_Params, 0, sizeof(RankTestFinish_Params));
	memcpy_s(&RankTestFinish_Params.Player, sizeof(RankTestFinish_Params.Player), &Player, sizeof(Player));
	memcpy_s(&RankTestFinish_Params.Rank, sizeof(RankTestFinish_Params.Rank), &Rank, sizeof(Rank));

	this->ProcessEvent(uFnRankTestFinish, &RankTestFinish_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.PlayLevelUP
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::PlayLevelUP(int32_t Player)
{
	static UFunction* uFnPlayLevelUP = nullptr;

	if (!uFnPlayLevelUP)
	{
		uFnPlayLevelUP = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.PlayLevelUP");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execPlayLevelUP_Params PlayLevelUP_Params;
	memset(&PlayLevelUP_Params, 0, sizeof(PlayLevelUP_Params));
	memcpy_s(&PlayLevelUP_Params.Player, sizeof(PlayLevelUP_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnPlayLevelUP, &PlayLevelUP_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetRank
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetRank(int32_t Player, int32_t val)
{
	static UFunction* uFnSetRank = nullptr;

	if (!uFnSetRank)
	{
		uFnSetRank = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetRank");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetRank_Params SetRank_Params;
	memset(&SetRank_Params, 0, sizeof(SetRank_Params));
	memcpy_s(&SetRank_Params.Player, sizeof(SetRank_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetRank_Params.val, sizeof(SetRank_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetRank, &SetRank_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetDan
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)
// int32_t                        val_after                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetDan(int32_t Player, int32_t val, int32_t val_after)
{
	static UFunction* uFnSetDan = nullptr;

	if (!uFnSetDan)
	{
		uFnSetDan = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetDan");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetDan_Params SetDan_Params;
	memset(&SetDan_Params, 0, sizeof(SetDan_Params));
	memcpy_s(&SetDan_Params.Player, sizeof(SetDan_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetDan_Params.val, sizeof(SetDan_Params.val), &val, sizeof(val));
	memcpy_s(&SetDan_Params.val_after, sizeof(SetDan_Params.val_after), &val_after, sizeof(val_after));

	this->ProcessEvent(uFnSetDan, &SetDan_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetLoseCount
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetLoseCount(int32_t Player, int32_t val)
{
	static UFunction* uFnSetLoseCount = nullptr;

	if (!uFnSetLoseCount)
	{
		uFnSetLoseCount = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetLoseCount");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetLoseCount_Params SetLoseCount_Params;
	memset(&SetLoseCount_Params, 0, sizeof(SetLoseCount_Params));
	memcpy_s(&SetLoseCount_Params.Player, sizeof(SetLoseCount_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetLoseCount_Params.val, sizeof(SetLoseCount_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetLoseCount, &SetLoseCount_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWinCount
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetWinCount(int32_t Player, int32_t val)
{
	static UFunction* uFnSetWinCount = nullptr;

	if (!uFnSetWinCount)
	{
		uFnSetWinCount = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWinCount");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetWinCount_Params SetWinCount_Params;
	memset(&SetWinCount_Params, 0, sizeof(SetWinCount_Params));
	memcpy_s(&SetWinCount_Params.Player, sizeof(SetWinCount_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetWinCount_Params.val, sizeof(SetWinCount_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetWinCount, &SetWinCount_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetTotalCount
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetTotalCount(int32_t Player, int32_t val)
{
	static UFunction* uFnSetTotalCount = nullptr;

	if (!uFnSetTotalCount)
	{
		uFnSetTotalCount = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetTotalCount");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetTotalCount_Params SetTotalCount_Params;
	memset(&SetTotalCount_Params, 0, sizeof(SetTotalCount_Params));
	memcpy_s(&SetTotalCount_Params.Player, sizeof(SetTotalCount_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetTotalCount_Params.val, sizeof(SetTotalCount_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetTotalCount, &SetTotalCount_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetPlayerName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BattleResultWindow::SetPlayerName(int32_t Player, const class FString& PlayerName)
{
	static UFunction* uFnSetPlayerName = nullptr;

	if (!uFnSetPlayerName)
	{
		uFnSetPlayerName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetPlayerName");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetPlayerName_Params SetPlayerName_Params;
	memset(&SetPlayerName_Params, 0, sizeof(SetPlayerName_Params));
	memcpy_s(&SetPlayerName_Params.Player, sizeof(SetPlayerName_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetPlayerName_Params.PlayerName, sizeof(SetPlayerName_Params.PlayerName), &PlayerName, sizeof(PlayerName));

	this->ProcessEvent(uFnSetPlayerName, &SetPlayerName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SkipExpAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SkipExpAnim(int32_t Player)
{
	static UFunction* uFnSkipExpAnim = nullptr;

	if (!uFnSkipExpAnim)
	{
		uFnSkipExpAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SkipExpAnim");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSkipExpAnim_Params SkipExpAnim_Params;
	memset(&SkipExpAnim_Params, 0, sizeof(SkipExpAnim_Params));
	memcpy_s(&SkipExpAnim_Params.Player, sizeof(SkipExpAnim_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSkipExpAnim, &SkipExpAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetExp
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)
// int32_t                        finalVal                       (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetExp(int32_t Player, int32_t val, int32_t finalVal)
{
	static UFunction* uFnSetExp = nullptr;

	if (!uFnSetExp)
	{
		uFnSetExp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetExp");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetExp_Params SetExp_Params;
	memset(&SetExp_Params, 0, sizeof(SetExp_Params));
	memcpy_s(&SetExp_Params.Player, sizeof(SetExp_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetExp_Params.val, sizeof(SetExp_Params.val), &val, sizeof(val));
	memcpy_s(&SetExp_Params.finalVal, sizeof(SetExp_Params.finalVal), &finalVal, sizeof(finalVal));

	this->ProcessEvent(uFnSetExp, &SetExp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetExpValue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// float                          val                            (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetExpValue(int32_t Player, float val)
{
	static UFunction* uFnSetExpValue = nullptr;

	if (!uFnSetExpValue)
	{
		uFnSetExpValue = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetExpValue");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetExpValue_Params SetExpValue_Params;
	memset(&SetExpValue_Params, 0, sizeof(SetExpValue_Params));
	memcpy_s(&SetExpValue_Params.Player, sizeof(SetExpValue_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetExpValue_Params.val, sizeof(SetExpValue_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetExpValue, &SetExpValue_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsEnableMainWindow
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsEnableMainWindow(int32_t Player)
{
	static UFunction* uFnIsEnableMainWindow = nullptr;

	if (!uFnIsEnableMainWindow)
	{
		uFnIsEnableMainWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsEnableMainWindow");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsEnableMainWindow_Params IsEnableMainWindow_Params;
	memset(&IsEnableMainWindow_Params, 0, sizeof(IsEnableMainWindow_Params));
	memcpy_s(&IsEnableMainWindow_Params.Player, sizeof(IsEnableMainWindow_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsEnableMainWindow, &IsEnableMainWindow_Params, nullptr);

	return IsEnableMainWindow_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsShowAnimEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_BattleResultWindow::IsShowAnimEnd()
{
	static UFunction* uFnIsShowAnimEnd = nullptr;

	if (!uFnIsShowAnimEnd)
	{
		uFnIsShowAnimEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsShowAnimEnd");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsShowAnimEnd_Params IsShowAnimEnd_Params;
	memset(&IsShowAnimEnd_Params, 0, sizeof(IsShowAnimEnd_Params));

	this->ProcessEvent(uFnIsShowAnimEnd, &IsShowAnimEnd_Params, nullptr);

	return IsShowAnimEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.ShowAnimSkip
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::ShowAnimSkip(int32_t Player)
{
	static UFunction* uFnShowAnimSkip = nullptr;

	if (!uFnShowAnimSkip)
	{
		uFnShowAnimSkip = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.ShowAnimSkip");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execShowAnimSkip_Params ShowAnimSkip_Params;
	memset(&ShowAnimSkip_Params, 0, sizeof(ShowAnimSkip_Params));
	memcpy_s(&ShowAnimSkip_Params.Player, sizeof(ShowAnimSkip_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnShowAnimSkip, &ShowAnimSkip_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.ShowQuestWindow
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       Show                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::ShowQuestWindow(int32_t Player, bool Show)
{
	static UFunction* uFnShowQuestWindow = nullptr;

	if (!uFnShowQuestWindow)
	{
		uFnShowQuestWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.ShowQuestWindow");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execShowQuestWindow_Params ShowQuestWindow_Params;
	memset(&ShowQuestWindow_Params, 0, sizeof(ShowQuestWindow_Params));
	memcpy_s(&ShowQuestWindow_Params.Player, sizeof(ShowQuestWindow_Params.Player), &Player, sizeof(Player));
	ShowQuestWindow_Params.Show = Show;

	this->ProcessEvent(uFnShowQuestWindow, &ShowQuestWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.ShowMedalWindow
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       Show                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::ShowMedalWindow(int32_t Player, bool Show)
{
	static UFunction* uFnShowMedalWindow = nullptr;

	if (!uFnShowMedalWindow)
	{
		uFnShowMedalWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.ShowMedalWindow");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execShowMedalWindow_Params ShowMedalWindow_Params;
	memset(&ShowMedalWindow_Params, 0, sizeof(ShowMedalWindow_Params));
	memcpy_s(&ShowMedalWindow_Params.Player, sizeof(ShowMedalWindow_Params.Player), &Player, sizeof(Player));
	ShowMedalWindow_Params.Show = Show;

	this->ProcessEvent(uFnShowMedalWindow, &ShowMedalWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.BlackMainWindow
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       Show                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::BlackMainWindow(int32_t Player, bool Show)
{
	static UFunction* uFnBlackMainWindow = nullptr;

	if (!uFnBlackMainWindow)
	{
		uFnBlackMainWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.BlackMainWindow");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execBlackMainWindow_Params BlackMainWindow_Params;
	memset(&BlackMainWindow_Params, 0, sizeof(BlackMainWindow_Params));
	memcpy_s(&BlackMainWindow_Params.Player, sizeof(BlackMainWindow_Params.Player), &Player, sizeof(Player));
	BlackMainWindow_Params.Show = Show;

	this->ProcessEvent(uFnBlackMainWindow, &BlackMainWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.ShowMainWindow
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// uint32_t                       Show                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::ShowMainWindow(int32_t Player, bool Show)
{
	static UFunction* uFnShowMainWindow = nullptr;

	if (!uFnShowMainWindow)
	{
		uFnShowMainWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.ShowMainWindow");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execShowMainWindow_Params ShowMainWindow_Params;
	memset(&ShowMainWindow_Params, 0, sizeof(ShowMainWindow_Params));
	memcpy_s(&ShowMainWindow_Params.Player, sizeof(ShowMainWindow_Params.Player), &Player, sizeof(Player));
	ShowMainWindow_Params.Show = Show;

	this->ProcessEvent(uFnShowMainWindow, &ShowMainWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.Show
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::Show(int32_t Player)
{
	static UFunction* uFnShow = nullptr;

	if (!uFnShow)
	{
		uFnShow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.Show");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execShow_Params Show_Params;
	memset(&Show_Params, 0, sizeof(Show_Params));
	memcpy_s(&Show_Params.Player, sizeof(Show_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnShow, &Show_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.Exp2Rate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Exp                            (CPF_Parm)

float UREDGfxMoviePlayer_BattleResultWindow::Exp2Rate(int32_t Exp)
{
	static UFunction* uFnExp2Rate = nullptr;

	if (!uFnExp2Rate)
	{
		uFnExp2Rate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.Exp2Rate");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execExp2Rate_Params Exp2Rate_Params;
	memset(&Exp2Rate_Params, 0, sizeof(Exp2Rate_Params));
	memcpy_s(&Exp2Rate_Params.Exp, sizeof(Exp2Rate_Params.Exp), &Exp, sizeof(Exp));

	this->ProcessEvent(uFnExp2Rate, &Exp2Rate_Params, nullptr);

	return Exp2Rate_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWindowEnable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// ERESULT_WINDOW_TYPE            Type                           (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::SetWindowEnable(int32_t Player, ERESULT_WINDOW_TYPE Type, bool flag)
{
	static UFunction* uFnSetWindowEnable = nullptr;

	if (!uFnSetWindowEnable)
	{
		uFnSetWindowEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.SetWindowEnable");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execSetWindowEnable_Params SetWindowEnable_Params;
	memset(&SetWindowEnable_Params, 0, sizeof(SetWindowEnable_Params));
	memcpy_s(&SetWindowEnable_Params.Player, sizeof(SetWindowEnable_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetWindowEnable_Params.Type, sizeof(SetWindowEnable_Params.Type), &Type, sizeof(Type));
	SetWindowEnable_Params.flag = flag;

	this->ProcessEvent(uFnSetWindowEnable, &SetWindowEnable_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsTrig_Right
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37913])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsTrig_Right(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Right = nullptr;

	if (!uFnIsTrig_Right)
	{
		uFnIsTrig_Right = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsTrig_Right");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsTrig_Right_Params IsTrig_Right_Params;
	memset(&IsTrig_Right_Params, 0, sizeof(IsTrig_Right_Params));
	memcpy_s(&IsTrig_Right_Params.Player, sizeof(IsTrig_Right_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Right, &IsTrig_Right_Params, nullptr);

	return IsTrig_Right_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsTrig_Left
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37904])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsTrig_Left(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Left = nullptr;

	if (!uFnIsTrig_Left)
	{
		uFnIsTrig_Left = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsTrig_Left");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsTrig_Left_Params IsTrig_Left_Params;
	memset(&IsTrig_Left_Params, 0, sizeof(IsTrig_Left_Params));
	memcpy_s(&IsTrig_Left_Params.Player, sizeof(IsTrig_Left_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Left, &IsTrig_Left_Params, nullptr);

	return IsTrig_Left_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsRep_Down
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37819])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsRep_Down(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRep_Down = nullptr;

	if (!uFnIsRep_Down)
	{
		uFnIsRep_Down = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsRep_Down");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsRep_Down_Params IsRep_Down_Params;
	memset(&IsRep_Down_Params, 0, sizeof(IsRep_Down_Params));
	memcpy_s(&IsRep_Down_Params.Player, sizeof(IsRep_Down_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRep_Down, &IsRep_Down_Params, nullptr);

	return IsRep_Down_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsRep_Up
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37823])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsRep_Up(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRep_Up = nullptr;

	if (!uFnIsRep_Up)
	{
		uFnIsRep_Up = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsRep_Up");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsRep_Up_Params IsRep_Up_Params;
	memset(&IsRep_Up_Params, 0, sizeof(IsRep_Up_Params));
	memcpy_s(&IsRep_Up_Params.Player, sizeof(IsRep_Up_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRep_Up, &IsRep_Up_Params, nullptr);

	return IsRep_Up_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.CommonSE
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    sename                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::CommonSE(const class FName& sename)
{
	static UFunction* uFnCommonSE = nullptr;

	if (!uFnCommonSE)
	{
		uFnCommonSE = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.CommonSE");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execCommonSE_Params CommonSE_Params;
	memset(&CommonSE_Params, 0, sizeof(CommonSE_Params));
	memcpy_s(&CommonSE_Params.sename, sizeof(CommonSE_Params.sename), &sename, sizeof(sename));

	this->ProcessEvent(uFnCommonSE, &CommonSE_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.MovieStartInternal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::MovieStartInternal(bool StartPaused)
{
	static UFunction* uFnMovieStartInternal = nullptr;

	if (!uFnMovieStartInternal)
	{
		uFnMovieStartInternal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.MovieStartInternal");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execMovieStartInternal_Params MovieStartInternal_Params;
	memset(&MovieStartInternal_Params, 0, sizeof(MovieStartInternal_Params));
	MovieStartInternal_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnMovieStartInternal, &MovieStartInternal_Params, nullptr);

	return MovieStartInternal_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.DemoteLightBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36527])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::DemoteLightBar(EUE_PLAYER_ID Player)
{
	static UFunction* uFnDemoteLightBar = nullptr;

	if (!uFnDemoteLightBar)
	{
		uFnDemoteLightBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.DemoteLightBar");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execDemoteLightBar_Params DemoteLightBar_Params;
	memset(&DemoteLightBar_Params, 0, sizeof(DemoteLightBar_Params));
	memcpy_s(&DemoteLightBar_Params.Player, sizeof(DemoteLightBar_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnDemoteLightBar, &DemoteLightBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.PromoteLightBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39150])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow::PromoteLightBar(EUE_PLAYER_ID Player)
{
	static UFunction* uFnPromoteLightBar = nullptr;

	if (!uFnPromoteLightBar)
	{
		uFnPromoteLightBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.PromoteLightBar");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execPromoteLightBar_Params PromoteLightBar_Params;
	memset(&PromoteLightBar_Params, 0, sizeof(PromoteLightBar_Params));
	memcpy_s(&PromoteLightBar_Params.Player, sizeof(PromoteLightBar_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnPromoteLightBar, &PromoteLightBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsTrig_Right_Indiv
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37915])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsTrig_Right_Indiv(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Right_Indiv = nullptr;

	if (!uFnIsTrig_Right_Indiv)
	{
		uFnIsTrig_Right_Indiv = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsTrig_Right_Indiv");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsTrig_Right_Indiv_Params IsTrig_Right_Indiv_Params;
	memset(&IsTrig_Right_Indiv_Params, 0, sizeof(IsTrig_Right_Indiv_Params));
	memcpy_s(&IsTrig_Right_Indiv_Params.Player, sizeof(IsTrig_Right_Indiv_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Right_Indiv, &IsTrig_Right_Indiv_Params, nullptr);

	return IsTrig_Right_Indiv_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsTrig_Left_Indiv
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37906])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsTrig_Left_Indiv(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Left_Indiv = nullptr;

	if (!uFnIsTrig_Left_Indiv)
	{
		uFnIsTrig_Left_Indiv = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsTrig_Left_Indiv");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsTrig_Left_Indiv_Params IsTrig_Left_Indiv_Params;
	memset(&IsTrig_Left_Indiv_Params, 0, sizeof(IsTrig_Left_Indiv_Params));
	memcpy_s(&IsTrig_Left_Indiv_Params.Player, sizeof(IsTrig_Left_Indiv_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Left_Indiv, &IsTrig_Left_Indiv_Params, nullptr);

	return IsTrig_Left_Indiv_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsRep_Down_Indiv
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37820])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsRep_Down_Indiv(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRep_Down_Indiv = nullptr;

	if (!uFnIsRep_Down_Indiv)
	{
		uFnIsRep_Down_Indiv = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsRep_Down_Indiv");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsRep_Down_Indiv_Params IsRep_Down_Indiv_Params;
	memset(&IsRep_Down_Indiv_Params, 0, sizeof(IsRep_Down_Indiv_Params));
	memcpy_s(&IsRep_Down_Indiv_Params.Player, sizeof(IsRep_Down_Indiv_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRep_Down_Indiv, &IsRep_Down_Indiv_Params, nullptr);

	return IsRep_Down_Indiv_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsRep_Up_Indiv
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37824])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow::IsRep_Up_Indiv(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRep_Up_Indiv = nullptr;

	if (!uFnIsRep_Up_Indiv)
	{
		uFnIsRep_Up_Indiv = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.IsRep_Up_Indiv");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execIsRep_Up_Indiv_Params IsRep_Up_Indiv_Params;
	memset(&IsRep_Up_Indiv_Params, 0, sizeof(IsRep_Up_Indiv_Params));
	memcpy_s(&IsRep_Up_Indiv_Params.Player, sizeof(IsRep_Up_Indiv_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRep_Up_Indiv, &IsRep_Up_Indiv_Params, nullptr);

	return IsRep_Up_Indiv_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.GetRankFromExp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37148])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Exp                            (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleResultWindow::GetRankFromExp(int32_t Exp)
{
	static UFunction* uFnGetRankFromExp = nullptr;

	if (!uFnGetRankFromExp)
	{
		uFnGetRankFromExp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.GetRankFromExp");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execGetRankFromExp_Params GetRankFromExp_Params;
	memset(&GetRankFromExp_Params, 0, sizeof(GetRankFromExp_Params));
	memcpy_s(&GetRankFromExp_Params.Exp, sizeof(GetRankFromExp_Params.Exp), &Exp, sizeof(Exp));

	this->ProcessEvent(uFnGetRankFromExp, &GetRankFromExp_Params, nullptr);

	return GetRankFromExp_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.GetRankExpAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37147])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Rank                           (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleResultWindow::GetRankExpAll(int32_t Rank)
{
	static UFunction* uFnGetRankExpAll = nullptr;

	if (!uFnGetRankExpAll)
	{
		uFnGetRankExpAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.GetRankExpAll");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execGetRankExpAll_Params GetRankExpAll_Params;
	memset(&GetRankExpAll_Params, 0, sizeof(GetRankExpAll_Params));
	memcpy_s(&GetRankExpAll_Params.Rank, sizeof(GetRankExpAll_Params.Rank), &Rank, sizeof(Rank));

	this->ProcessEvent(uFnGetRankExpAll, &GetRankExpAll_Params, nullptr);

	return GetRankExpAll_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow.GetNextRankExp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37119])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Rank                           (CPF_Parm)

int32_t UREDGfxMoviePlayer_BattleResultWindow::GetNextRankExp(int32_t Rank)
{
	static UFunction* uFnGetNextRankExp = nullptr;

	if (!uFnGetNextRankExp)
	{
		uFnGetNextRankExp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow.GetNextRankExp");
	}

	UREDGfxMoviePlayer_BattleResultWindow_execGetNextRankExp_Params GetNextRankExp_Params;
	memset(&GetNextRankExp_Params, 0, sizeof(GetNextRankExp_Params));
	memcpy_s(&GetNextRankExp_Params.Rank, sizeof(GetNextRankExp_Params.Rank), &Rank, sizeof(Rank));

	this->ProcessEvent(uFnGetNextRankExp, &GetNextRankExp_Params, nullptr);

	return GetNextRankExp_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BG_Arena.Update
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGfxMoviePlayer_BG_Arena::Update(float DeltaTime)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BG_Arena.Update");
	}

	UREDGfxMoviePlayer_BG_Arena_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.DeltaTime, sizeof(Update_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BG_Arena.SetText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  mc                             (CPF_Parm | CPF_NeedCtorLink)
// class FString                  txt                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_BG_Arena::SetText(const class FString& mc, const class FString& txt)
{
	static UFunction* uFnSetText = nullptr;

	if (!uFnSetText)
	{
		uFnSetText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BG_Arena.SetText");
	}

	UREDGfxMoviePlayer_BG_Arena_execSetText_Params SetText_Params;
	memset(&SetText_Params, 0, sizeof(SetText_Params));
	memcpy_s(&SetText_Params.mc, sizeof(SetText_Params.mc), &mc, sizeof(mc));
	memcpy_s(&SetText_Params.txt, sizeof(SetText_Params.txt), &txt, sizeof(txt));

	this->ProcessEvent(uFnSetText, &SetText_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BG_Arena.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_BG_Arena::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BG_Arena.Start");
	}

	UREDGfxMoviePlayer_BG_Arena_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BG_Arena.UpdateScroll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[34843])
// Parameter Info:

void UREDGfxMoviePlayer_BG_Arena::UpdateScroll()
{
	static UFunction* uFnUpdateScroll = nullptr;

	if (!uFnUpdateScroll)
	{
		uFnUpdateScroll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BG_Arena.UpdateScroll");
	}

	UREDGfxMoviePlayer_BG_Arena_execUpdateScroll_Params UpdateScroll_Params;
	memset(&UpdateScroll_Params, 0, sizeof(UpdateScroll_Params));

	this->ProcessEvent(uFnUpdateScroll, &UpdateScroll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BG_Arena.GetPlayerInfo
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[34038])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Dan                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  guild                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Title                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Comment                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// int32_t                        win                            (CPF_Parm | CPF_OutParm)
// int32_t                        Match                          (CPF_Parm | CPF_OutParm)
// class UTexture2D*              Icon                           (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_BG_Arena::GetPlayerInfo(EUE_PLAYER_ID Player, class FString& PlayerName, class FString& Dan, class FString& guild, class FString& Title, class FString& Comment, int32_t& win, int32_t& Match, class UTexture2D*& Icon)
{
	static UFunction* uFnGetPlayerInfo = nullptr;

	if (!uFnGetPlayerInfo)
	{
		uFnGetPlayerInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BG_Arena.GetPlayerInfo");
	}

	UREDGfxMoviePlayer_BG_Arena_execGetPlayerInfo_Params GetPlayerInfo_Params;
	memset(&GetPlayerInfo_Params, 0, sizeof(GetPlayerInfo_Params));
	memcpy_s(&GetPlayerInfo_Params.Player, sizeof(GetPlayerInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&GetPlayerInfo_Params.PlayerName, sizeof(GetPlayerInfo_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetPlayerInfo_Params.Dan, sizeof(GetPlayerInfo_Params.Dan), &Dan, sizeof(Dan));
	memcpy_s(&GetPlayerInfo_Params.guild, sizeof(GetPlayerInfo_Params.guild), &guild, sizeof(guild));
	memcpy_s(&GetPlayerInfo_Params.Title, sizeof(GetPlayerInfo_Params.Title), &Title, sizeof(Title));
	memcpy_s(&GetPlayerInfo_Params.Comment, sizeof(GetPlayerInfo_Params.Comment), &Comment, sizeof(Comment));
	memcpy_s(&GetPlayerInfo_Params.win, sizeof(GetPlayerInfo_Params.win), &win, sizeof(win));
	memcpy_s(&GetPlayerInfo_Params.Match, sizeof(GetPlayerInfo_Params.Match), &Match, sizeof(Match));
	GetPlayerInfo_Params.Icon = Icon;

	this->ProcessEvent(uFnGetPlayerInfo, &GetPlayerInfo_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetPlayerInfo_Params.PlayerName, sizeof(GetPlayerInfo_Params.PlayerName));
	memcpy_s(&Dan, sizeof(Dan), &GetPlayerInfo_Params.Dan, sizeof(GetPlayerInfo_Params.Dan));
	memcpy_s(&guild, sizeof(guild), &GetPlayerInfo_Params.guild, sizeof(GetPlayerInfo_Params.guild));
	memcpy_s(&Title, sizeof(Title), &GetPlayerInfo_Params.Title, sizeof(GetPlayerInfo_Params.Title));
	memcpy_s(&Comment, sizeof(Comment), &GetPlayerInfo_Params.Comment, sizeof(GetPlayerInfo_Params.Comment));
	memcpy_s(&win, sizeof(win), &GetPlayerInfo_Params.win, sizeof(GetPlayerInfo_Params.win));
	memcpy_s(&Match, sizeof(Match), &GetPlayerInfo_Params.Match, sizeof(GetPlayerInfo_Params.Match));
	Icon = GetPlayerInfo_Params.Icon;

	return GetPlayerInfo_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BG_Arena.GetShopName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37169])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_BG_Arena::GetShopName()
{
	static UFunction* uFnGetShopName = nullptr;

	if (!uFnGetShopName)
	{
		uFnGetShopName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BG_Arena.GetShopName");
	}

	UREDGfxMoviePlayer_BG_Arena_execGetShopName_Params GetShopName_Params;
	memset(&GetShopName_Params, 0, sizeof(GetShopName_Params));

	this->ProcessEvent(uFnGetShopName, &GetShopName_Params, nullptr);

	return GetShopName_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BG_Arena.GetTitleName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37188])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_BG_Arena::GetTitleName()
{
	static UFunction* uFnGetTitleName = nullptr;

	if (!uFnGetTitleName)
	{
		uFnGetTitleName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BG_Arena.GetTitleName");
	}

	UREDGfxMoviePlayer_BG_Arena_execGetTitleName_Params GetTitleName_Params;
	memset(&GetTitleName_Params, 0, sizeof(GetTitleName_Params));

	this->ProcessEvent(uFnGetTitleName, &GetTitleName_Params, nullptr);

	return GetTitleName_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.CancelInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_ChatWindow::eventCancelInput()
{
	static UFunction* uFnCancelInput = nullptr;

	if (!uFnCancelInput)
	{
		uFnCancelInput = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.CancelInput");
	}

	UREDGfxMoviePlayer_ChatWindow_eventCancelInput_Params CancelInput_Params;
	memset(&CancelInput_Params, 0, sizeof(CancelInput_Params));

	this->ProcessEvent(uFnCancelInput, &CancelInput_Params, nullptr);

	return CancelInput_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.DecideInput
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_ChatWindow::eventDecideInput()
{
	static UFunction* uFnDecideInput = nullptr;

	if (!uFnDecideInput)
	{
		uFnDecideInput = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.DecideInput");
	}

	UREDGfxMoviePlayer_ChatWindow_eventDecideInput_Params DecideInput_Params;
	memset(&DecideInput_Params, 0, sizeof(DecideInput_Params));

	this->ProcessEvent(uFnDecideInput, &DecideInput_Params, nullptr);

	return DecideInput_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.StartInput
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        maxChars                       (CPF_OptionalParm | CPF_Parm)
// class FString                  Text                           (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       _isPassword                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_ChatWindow::eventStartInput(int32_t maxChars, const class FString& Text, bool _isPassword)
{
	static UFunction* uFnStartInput = nullptr;

	if (!uFnStartInput)
	{
		uFnStartInput = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.StartInput");
	}

	UREDGfxMoviePlayer_ChatWindow_eventStartInput_Params StartInput_Params;
	memset(&StartInput_Params, 0, sizeof(StartInput_Params));
	memcpy_s(&StartInput_Params.maxChars, sizeof(StartInput_Params.maxChars), &maxChars, sizeof(maxChars));
	memcpy_s(&StartInput_Params.Text, sizeof(StartInput_Params.Text), &Text, sizeof(Text));
	StartInput_Params._isPassword = _isPassword;

	this->ProcessEvent(uFnStartInput, &StartInput_Params, nullptr);

	return StartInput_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.Cleanup
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_ChatWindow::Cleanup()
{
	static UFunction* uFnCleanup = nullptr;

	if (!uFnCleanup)
	{
		uFnCleanup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.Cleanup");
	}

	UREDGfxMoviePlayer_ChatWindow_execCleanup_Params Cleanup_Params;
	memset(&Cleanup_Params, 0, sizeof(Cleanup_Params));

	this->ProcessEvent(uFnCleanup, &Cleanup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.startup
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_ChatWindow::startup()
{
	static UFunction* uFnstartup = nullptr;

	if (!uFnstartup)
	{
		uFnstartup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.startup");
	}

	UREDGfxMoviePlayer_ChatWindow_execstartup_Params startup_Params;
	memset(&startup_Params, 0, sizeof(startup_Params));

	this->ProcessEvent(uFnstartup, &startup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    WidgetName                     (CPF_Parm)
// class FName                    WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UREDGfxMoviePlayer_ChatWindow::eventWidgetInitialized(const class FName& WidgetName, const class FName& WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.WidgetInitialized");
	}

	UREDGfxMoviePlayer_ChatWindow_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	WidgetInitialized_Params.Widget = Widget;

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_ChatWindow::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.Start");
	}

	UREDGfxMoviePlayer_ChatWindow_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.CallSetupFocusedForm
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)
// class UGFxObject*              Obj                            (CPF_Parm)

void UREDGfxMoviePlayer_ChatWindow::CallSetupFocusedForm(const class FString& Text, class UGFxObject* Obj)
{
	static UFunction* uFnCallSetupFocusedForm = nullptr;

	if (!uFnCallSetupFocusedForm)
	{
		uFnCallSetupFocusedForm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.CallSetupFocusedForm");
	}

	UREDGfxMoviePlayer_ChatWindow_execCallSetupFocusedForm_Params CallSetupFocusedForm_Params;
	memset(&CallSetupFocusedForm_Params, 0, sizeof(CallSetupFocusedForm_Params));
	memcpy_s(&CallSetupFocusedForm_Params.Text, sizeof(CallSetupFocusedForm_Params.Text), &Text, sizeof(Text));
	CallSetupFocusedForm_Params.Obj = Obj;

	this->ProcessEvent(uFnCallSetupFocusedForm, &CallSetupFocusedForm_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.OnStop
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38822])
// Parameter Info:

void UREDGfxMoviePlayer_ChatWindow::OnStop()
{
	static UFunction* uFnOnStop = nullptr;

	if (!uFnOnStop)
	{
		uFnOnStop = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.OnStop");
	}

	UREDGfxMoviePlayer_ChatWindow_execOnStop_Params OnStop_Params;
	memset(&OnStop_Params, 0, sizeof(OnStop_Params));

	this->ProcessEvent(uFnOnStop, &OnStop_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.OnStart
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38820])
// Parameter Info:

void UREDGfxMoviePlayer_ChatWindow::OnStart()
{
	static UFunction* uFnOnStart = nullptr;

	if (!uFnOnStart)
	{
		uFnOnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.OnStart");
	}

	UREDGfxMoviePlayer_ChatWindow_execOnStart_Params OnStart_Params;
	memset(&OnStart_Params, 0, sizeof(OnStart_Params));

	this->ProcessEvent(uFnOnStart, &OnStart_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.OnCleanup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13136])
// Parameter Info:

void UREDGfxMoviePlayer_ChatWindow::OnCleanup()
{
	static UFunction* uFnOnCleanup = nullptr;

	if (!uFnOnCleanup)
	{
		uFnOnCleanup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.OnCleanup");
	}

	UREDGfxMoviePlayer_ChatWindow_execOnCleanup_Params OnCleanup_Params;
	memset(&OnCleanup_Params, 0, sizeof(OnCleanup_Params));

	this->ProcessEvent(uFnOnCleanup, &OnCleanup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.OnStartup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38821])
// Parameter Info:

void UREDGfxMoviePlayer_ChatWindow::OnStartup()
{
	static UFunction* uFnOnStartup = nullptr;

	if (!uFnOnStartup)
	{
		uFnOnStartup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.OnStartup");
	}

	UREDGfxMoviePlayer_ChatWindow_execOnStartup_Params OnStartup_Params;
	memset(&OnStartup_Params, 0, sizeof(OnStartup_Params));

	this->ProcessEvent(uFnOnStartup, &OnStartup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_ChatWindow.setPasswordMode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39790])
// Parameter Info:
// uint32_t                       _isPassword                    (CPF_Parm)

void UREDGfxMoviePlayer_ChatWindow::setPasswordMode(bool _isPassword)
{
	static UFunction* uFnsetPasswordMode = nullptr;

	if (!uFnsetPasswordMode)
	{
		uFnsetPasswordMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_ChatWindow.setPasswordMode");
	}

	UREDGfxMoviePlayer_ChatWindow_execsetPasswordMode_Params setPasswordMode_Params;
	memset(&setPasswordMode_Params, 0, sizeof(setPasswordMode_Params));
	setPasswordMode_Params._isPassword = _isPassword;

	this->ProcessEvent(uFnsetPasswordMode, &setPasswordMode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.OnFinalize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::OnFinalize()
{
	static UFunction* uFnOnFinalize = nullptr;

	if (!uFnOnFinalize)
	{
		uFnOnFinalize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.OnFinalize");
	}

	UREDGfxMoviePlayer_Menu_Base_execOnFinalize_Params OnFinalize_Params;
	memset(&OnFinalize_Params, 0, sizeof(OnFinalize_Params));

	this->ProcessEvent(uFnOnFinalize, &OnFinalize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.OnDrawUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_Menu_Base_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.OnUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.OnUpdate");
	}

	UREDGfxMoviePlayer_Menu_Base_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.OnInitialize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.OnInitialize");
	}

	UREDGfxMoviePlayer_Menu_Base_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Update
// [0x00020803] (FUNC_Final | FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::eventUpdate(float DeltaTime)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Update");
	}

	UREDGfxMoviePlayer_Menu_Base_eventUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.DeltaTime, sizeof(Update_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.GotoNextScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_SCENE_ID                   Id                             (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::GotoNextScene(EUE_SCENE_ID Id)
{
	static UFunction* uFnGotoNextScene = nullptr;

	if (!uFnGotoNextScene)
	{
		uFnGotoNextScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.GotoNextScene");
	}

	UREDGfxMoviePlayer_Menu_Base_execGotoNextScene_Params GotoNextScene_Params;
	memset(&GotoNextScene_Params, 0, sizeof(GotoNextScene_Params));
	memcpy_s(&GotoNextScene_Params.Id, sizeof(GotoNextScene_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnGotoNextScene, &GotoNextScene_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.WidgetInitialized
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    WidgetName                     (CPF_Parm)
// class FName                    WidgetPath                     (CPF_Parm)
// class UGFxObject*              Widget                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::eventWidgetInitialized(const class FName& WidgetName, const class FName& WidgetPath, class UGFxObject* Widget)
{
	static UFunction* uFnWidgetInitialized = nullptr;

	if (!uFnWidgetInitialized)
	{
		uFnWidgetInitialized = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.WidgetInitialized");
	}

	UREDGfxMoviePlayer_Menu_Base_eventWidgetInitialized_Params WidgetInitialized_Params;
	memset(&WidgetInitialized_Params, 0, sizeof(WidgetInitialized_Params));
	memcpy_s(&WidgetInitialized_Params.WidgetName, sizeof(WidgetInitialized_Params.WidgetName), &WidgetName, sizeof(WidgetName));
	memcpy_s(&WidgetInitialized_Params.WidgetPath, sizeof(WidgetInitialized_Params.WidgetPath), &WidgetPath, sizeof(WidgetPath));
	WidgetInitialized_Params.Widget = Widget;

	this->ProcessEvent(uFnWidgetInitialized, &WidgetInitialized_Params, nullptr);

	return WidgetInitialized_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsLoadedPackages
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37704])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  packageNames                   (CPF_Const | CPF_Parm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_Menu_Base::IsLoadedPackages(const class FString& packageNames)
{
	static UFunction* uFnIsLoadedPackages = nullptr;

	if (!uFnIsLoadedPackages)
	{
		uFnIsLoadedPackages = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsLoadedPackages");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsLoadedPackages_Params IsLoadedPackages_Params;
	memset(&IsLoadedPackages_Params, 0, sizeof(IsLoadedPackages_Params));
	memcpy_s(&IsLoadedPackages_Params.packageNames, sizeof(IsLoadedPackages_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnIsLoadedPackages, &IsLoadedPackages_Params, nullptr);

	return IsLoadedPackages_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.LoadPackages
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UREDCharaAsset*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bBlock                         (CPF_Parm)
// class TArray<class FString>    packageNames                   (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class UREDCharaAsset* UREDGfxMoviePlayer_Menu_Base::LoadPackages(bool bBlock, class TArray<class FString>& packageNames)
{
	static UFunction* uFnLoadPackages = nullptr;

	if (!uFnLoadPackages)
	{
		uFnLoadPackages = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.LoadPackages");
	}

	UREDGfxMoviePlayer_Menu_Base_execLoadPackages_Params LoadPackages_Params;
	memset(&LoadPackages_Params, 0, sizeof(LoadPackages_Params));
	LoadPackages_Params.bBlock = bBlock;
	memcpy_s(&LoadPackages_Params.packageNames, sizeof(LoadPackages_Params.packageNames), &packageNames, sizeof(packageNames));

	this->ProcessEvent(uFnLoadPackages, &LoadPackages_Params, nullptr);

	memcpy_s(&packageNames, sizeof(packageNames), &LoadPackages_Params.packageNames, sizeof(LoadPackages_Params.packageNames));

	return LoadPackages_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPS4Controller
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37795])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PadID                          (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPS4Controller(int32_t PadID)
{
	static UFunction* uFnIsPS4Controller = nullptr;

	if (!uFnIsPS4Controller)
	{
		uFnIsPS4Controller = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPS4Controller");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPS4Controller_Params IsPS4Controller_Params;
	memset(&IsPS4Controller_Params, 0, sizeof(IsPS4Controller_Params));
	memcpy_s(&IsPS4Controller_Params.PadID, sizeof(IsPS4Controller_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnIsPS4Controller, &IsPS4Controller_Params, nullptr);

	return IsPS4Controller_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsSteam
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsSteam()
{
	static UFunction* uFnIsSteam = nullptr;

	if (!uFnIsSteam)
	{
		uFnIsSteam = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsSteam");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsSteam_Params IsSteam_Params;
	memset(&IsSteam_Params, 0, sizeof(IsSteam_Params));

	this->ProcessEvent(uFnIsSteam, &IsSteam_Params, nullptr);

	return IsSteam_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPS4
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsPS4()
{
	static UFunction* uFnIsPS4 = nullptr;

	if (!uFnIsPS4)
	{
		uFnIsPS4 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPS4");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPS4_Params IsPS4_Params;
	memset(&IsPS4_Params, 0, sizeof(IsPS4_Params));

	this->ProcessEvent(uFnIsPS4, &IsPS4_Params, nullptr);

	return IsPS4_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPS3
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsPS3()
{
	static UFunction* uFnIsPS3 = nullptr;

	if (!uFnIsPS3)
	{
		uFnIsPS3 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPS3");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPS3_Params IsPS3_Params;
	memset(&IsPS3_Params, 0, sizeof(IsPS3_Params));

	this->ProcessEvent(uFnIsPS3, &IsPS3_Params, nullptr);

	return IsPS3_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsConsumer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsConsumer()
{
	static UFunction* uFnIsConsumer = nullptr;

	if (!uFnIsConsumer)
	{
		uFnIsConsumer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsConsumer");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsConsumer_Params IsConsumer_Params;
	memset(&IsConsumer_Params, 0, sizeof(IsConsumer_Params));

	this->ProcessEvent(uFnIsConsumer, &IsConsumer_Params, nullptr);

	return IsConsumer_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.GetREDGameInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDGameInfo*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AREDGameInfo* UREDGfxMoviePlayer_Menu_Base::GetREDGameInfo()
{
	static UFunction* uFnGetREDGameInfo = nullptr;

	if (!uFnGetREDGameInfo)
	{
		uFnGetREDGameInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.GetREDGameInfo");
	}

	UREDGfxMoviePlayer_Menu_Base_execGetREDGameInfo_Params GetREDGameInfo_Params;
	memset(&GetREDGameInfo_Params, 0, sizeof(GetREDGameInfo_Params));

	this->ProcessEvent(uFnGetREDGameInfo, &GetREDGameInfo_Params, nullptr);

	return GetREDGameInfo_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Start");
	}

	UREDGfxMoviePlayer_Menu_Base_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.OnClose");
	}

	UREDGfxMoviePlayer_Menu_Base_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsSoundClassPlaying
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    Category                       (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::eventIsSoundClassPlaying(const class FName& Category)
{
	static UFunction* uFnIsSoundClassPlaying = nullptr;

	if (!uFnIsSoundClassPlaying)
	{
		uFnIsSoundClassPlaying = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsSoundClassPlaying");
	}

	UREDGfxMoviePlayer_Menu_Base_eventIsSoundClassPlaying_Params IsSoundClassPlaying_Params;
	memset(&IsSoundClassPlaying_Params, 0, sizeof(IsSoundClassPlaying_Params));
	memcpy_s(&IsSoundClassPlaying_Params.Category, sizeof(IsSoundClassPlaying_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnIsSoundClassPlaying, &IsSoundClassPlaying_Params, nullptr);

	return IsSoundClassPlaying_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_MenuClose
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_MenuClose()
{
	static UFunction* uFnCommonSE_MenuClose = nullptr;

	if (!uFnCommonSE_MenuClose)
	{
		uFnCommonSE_MenuClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_MenuClose");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_MenuClose_Params CommonSE_MenuClose_Params;
	memset(&CommonSE_MenuClose_Params, 0, sizeof(CommonSE_MenuClose_Params));

	this->ProcessEvent(uFnCommonSE_MenuClose, &CommonSE_MenuClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_MenuOpen
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_MenuOpen()
{
	static UFunction* uFnCommonSE_MenuOpen = nullptr;

	if (!uFnCommonSE_MenuOpen)
	{
		uFnCommonSE_MenuOpen = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_MenuOpen");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_MenuOpen_Params CommonSE_MenuOpen_Params;
	memset(&CommonSE_MenuOpen_Params, 0, sizeof(CommonSE_MenuOpen_Params));

	this->ProcessEvent(uFnCommonSE_MenuOpen, &CommonSE_MenuOpen_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_WorldDollar
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_WorldDollar()
{
	static UFunction* uFnCommonSE_WorldDollar = nullptr;

	if (!uFnCommonSE_WorldDollar)
	{
		uFnCommonSE_WorldDollar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_WorldDollar");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_WorldDollar_Params CommonSE_WorldDollar_Params;
	memset(&CommonSE_WorldDollar_Params, 0, sizeof(CommonSE_WorldDollar_Params));

	this->ProcessEvent(uFnCommonSE_WorldDollar, &CommonSE_WorldDollar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_Warning
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_Warning()
{
	static UFunction* uFnCommonSE_Warning = nullptr;

	if (!uFnCommonSE_Warning)
	{
		uFnCommonSE_Warning = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_Warning");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_Warning_Params CommonSE_Warning_Params;
	memset(&CommonSE_Warning_Params, 0, sizeof(CommonSE_Warning_Params));

	this->ProcessEvent(uFnCommonSE_Warning, &CommonSE_Warning_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_ErrorL
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_ErrorL()
{
	static UFunction* uFnCommonSE_ErrorL = nullptr;

	if (!uFnCommonSE_ErrorL)
	{
		uFnCommonSE_ErrorL = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_ErrorL");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_ErrorL_Params CommonSE_ErrorL_Params;
	memset(&CommonSE_ErrorL_Params, 0, sizeof(CommonSE_ErrorL_Params));

	this->ProcessEvent(uFnCommonSE_ErrorL, &CommonSE_ErrorL_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_Error
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_Error()
{
	static UFunction* uFnCommonSE_Error = nullptr;

	if (!uFnCommonSE_Error)
	{
		uFnCommonSE_Error = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_Error");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_Error_Params CommonSE_Error_Params;
	memset(&CommonSE_Error_Params, 0, sizeof(CommonSE_Error_Params));

	this->ProcessEvent(uFnCommonSE_Error, &CommonSE_Error_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_Cancel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_Cancel()
{
	static UFunction* uFnCommonSE_Cancel = nullptr;

	if (!uFnCommonSE_Cancel)
	{
		uFnCommonSE_Cancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_Cancel");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_Cancel_Params CommonSE_Cancel_Params;
	memset(&CommonSE_Cancel_Params, 0, sizeof(CommonSE_Cancel_Params));

	this->ProcessEvent(uFnCommonSE_Cancel, &CommonSE_Cancel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_ChangeItem
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_ChangeItem()
{
	static UFunction* uFnCommonSE_ChangeItem = nullptr;

	if (!uFnCommonSE_ChangeItem)
	{
		uFnCommonSE_ChangeItem = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_ChangeItem");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_ChangeItem_Params CommonSE_ChangeItem_Params;
	memset(&CommonSE_ChangeItem_Params, 0, sizeof(CommonSE_ChangeItem_Params));

	this->ProcessEvent(uFnCommonSE_ChangeItem, &CommonSE_ChangeItem_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_ItemChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_ItemChange()
{
	static UFunction* uFnCommonSE_ItemChange = nullptr;

	if (!uFnCommonSE_ItemChange)
	{
		uFnCommonSE_ItemChange = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_ItemChange");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_ItemChange_Params CommonSE_ItemChange_Params;
	memset(&CommonSE_ItemChange_Params, 0, sizeof(CommonSE_ItemChange_Params));

	this->ProcessEvent(uFnCommonSE_ItemChange, &CommonSE_ItemChange_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_Cursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_Cursor()
{
	static UFunction* uFnCommonSE_Cursor = nullptr;

	if (!uFnCommonSE_Cursor)
	{
		uFnCommonSE_Cursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_Cursor");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_Cursor_Params CommonSE_Cursor_Params;
	memset(&CommonSE_Cursor_Params, 0, sizeof(CommonSE_Cursor_Params));

	this->ProcessEvent(uFnCommonSE_Cursor, &CommonSE_Cursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_OKSub
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_OKSub()
{
	static UFunction* uFnCommonSE_OKSub = nullptr;

	if (!uFnCommonSE_OKSub)
	{
		uFnCommonSE_OKSub = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_OKSub");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_OKSub_Params CommonSE_OKSub_Params;
	memset(&CommonSE_OKSub_Params, 0, sizeof(CommonSE_OKSub_Params));

	this->ProcessEvent(uFnCommonSE_OKSub, &CommonSE_OKSub_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_OK
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::CommonSE_OK()
{
	static UFunction* uFnCommonSE_OK = nullptr;

	if (!uFnCommonSE_OK)
	{
		uFnCommonSE_OK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE_OK");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_OK_Params CommonSE_OK_Params;
	memset(&CommonSE_OK_Params, 0, sizeof(CommonSE_OK_Params));

	this->ProcessEvent(uFnCommonSE_OK, &CommonSE_OK_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Narration
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::Narration(const class FName& cueName)
{
	static UFunction* uFnNarration = nullptr;

	if (!uFnNarration)
	{
		uFnNarration = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Narration");
	}

	UREDGfxMoviePlayer_Menu_Base_execNarration_Params Narration_Params;
	memset(&Narration_Params, 0, sizeof(Narration_Params));
	memcpy_s(&Narration_Params.cueName, sizeof(Narration_Params.cueName), &cueName, sizeof(cueName));

	this->ProcessEvent(uFnNarration, &Narration_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::CommonSE(const class FName& cueName)
{
	static UFunction* uFnCommonSE = nullptr;

	if (!uFnCommonSE)
	{
		uFnCommonSE = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CommonSE");
	}

	UREDGfxMoviePlayer_Menu_Base_execCommonSE_Params CommonSE_Params;
	memset(&CommonSE_Params, 0, sizeof(CommonSE_Params));
	memcpy_s(&CommonSE_Params.cueName, sizeof(CommonSE_Params.cueName), &cueName, sizeof(cueName));

	this->ProcessEvent(uFnCommonSE, &CommonSE_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.DebugRectDraw
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[36429])
// Parameter Info:
// struct FVector2D               LU                             (CPF_Parm)
// struct FVector2D               RU                             (CPF_Parm)
// struct FVector2D               LD                             (CPF_Parm)
// struct FVector2D               RD                             (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)
// uint32_t                       withDBM                        (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::DebugRectDraw(const struct FVector2D& LU, const struct FVector2D& RU, const struct FVector2D& LD, const struct FVector2D& RD, int32_t Col, bool withDBM)
{
	static UFunction* uFnDebugRectDraw = nullptr;

	if (!uFnDebugRectDraw)
	{
		uFnDebugRectDraw = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.DebugRectDraw");
	}

	UREDGfxMoviePlayer_Menu_Base_execDebugRectDraw_Params DebugRectDraw_Params;
	memset(&DebugRectDraw_Params, 0, sizeof(DebugRectDraw_Params));
	memcpy_s(&DebugRectDraw_Params.LU, sizeof(DebugRectDraw_Params.LU), &LU, sizeof(LU));
	memcpy_s(&DebugRectDraw_Params.RU, sizeof(DebugRectDraw_Params.RU), &RU, sizeof(RU));
	memcpy_s(&DebugRectDraw_Params.LD, sizeof(DebugRectDraw_Params.LD), &LD, sizeof(LD));
	memcpy_s(&DebugRectDraw_Params.RD, sizeof(DebugRectDraw_Params.RD), &RD, sizeof(RD));
	memcpy_s(&DebugRectDraw_Params.Col, sizeof(DebugRectDraw_Params.Col), &Col, sizeof(Col));
	DebugRectDraw_Params.withDBM = withDBM;

	this->ProcessEvent(uFnDebugRectDraw, &DebugRectDraw_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.DebugMainMenuOpen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36423])
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::DebugMainMenuOpen()
{
	static UFunction* uFnDebugMainMenuOpen = nullptr;

	if (!uFnDebugMainMenuOpen)
	{
		uFnDebugMainMenuOpen = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.DebugMainMenuOpen");
	}

	UREDGfxMoviePlayer_Menu_Base_execDebugMainMenuOpen_Params DebugMainMenuOpen_Params;
	memset(&DebugMainMenuOpen_Params, 0, sizeof(DebugMainMenuOpen_Params));

	this->ProcessEvent(uFnDebugMainMenuOpen, &DebugMainMenuOpen_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.DebugText2
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[36430])
// Parameter Info:
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)
// float                          ScaleX                         (CPF_Parm)
// float                          ScaleY                         (CPF_Parm)
// uint32_t                       withDBM                        (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::DebugText2(int32_t X, int32_t Y, int32_t Col, const class FString& Text, float ScaleX, float ScaleY, bool withDBM)
{
	static UFunction* uFnDebugText2 = nullptr;

	if (!uFnDebugText2)
	{
		uFnDebugText2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.DebugText2");
	}

	UREDGfxMoviePlayer_Menu_Base_execDebugText2_Params DebugText2_Params;
	memset(&DebugText2_Params, 0, sizeof(DebugText2_Params));
	memcpy_s(&DebugText2_Params.X, sizeof(DebugText2_Params.X), &X, sizeof(X));
	memcpy_s(&DebugText2_Params.Y, sizeof(DebugText2_Params.Y), &Y, sizeof(Y));
	memcpy_s(&DebugText2_Params.Col, sizeof(DebugText2_Params.Col), &Col, sizeof(Col));
	memcpy_s(&DebugText2_Params.Text, sizeof(DebugText2_Params.Text), &Text, sizeof(Text));
	memcpy_s(&DebugText2_Params.ScaleX, sizeof(DebugText2_Params.ScaleX), &ScaleX, sizeof(ScaleX));
	memcpy_s(&DebugText2_Params.ScaleY, sizeof(DebugText2_Params.ScaleY), &ScaleY, sizeof(ScaleY));
	DebugText2_Params.withDBM = withDBM;

	this->ProcessEvent(uFnDebugText2, &DebugText2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.DebugText
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[19315])
// Parameter Info:
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       withDBM                        (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::DebugText(int32_t X, int32_t Y, int32_t Col, const class FString& Text, bool withDBM)
{
	static UFunction* uFnDebugText = nullptr;

	if (!uFnDebugText)
	{
		uFnDebugText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.DebugText");
	}

	UREDGfxMoviePlayer_Menu_Base_execDebugText_Params DebugText_Params;
	memset(&DebugText_Params, 0, sizeof(DebugText_Params));
	memcpy_s(&DebugText_Params.X, sizeof(DebugText_Params.X), &X, sizeof(X));
	memcpy_s(&DebugText_Params.Y, sizeof(DebugText_Params.Y), &Y, sizeof(Y));
	memcpy_s(&DebugText_Params.Col, sizeof(DebugText_Params.Col), &Col, sizeof(Col));
	memcpy_s(&DebugText_Params.Text, sizeof(DebugText_Params.Text), &Text, sizeof(Text));
	DebugText_Params.withDBM = withDBM;

	this->ProcessEvent(uFnDebugText, &DebugText_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Timer2Digit
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40233])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Time                           (CPF_Parm)
// int32_t                        digit1                         (CPF_Parm | CPF_OutParm)
// int32_t                        digit10                        (CPF_Parm | CPF_OutParm)
// int32_t                        digit100                       (CPF_Parm | CPF_OutParm)

int32_t UREDGfxMoviePlayer_Menu_Base::Timer2Digit(int32_t Time, int32_t& digit1, int32_t& digit10, int32_t& digit100)
{
	static UFunction* uFnTimer2Digit = nullptr;

	if (!uFnTimer2Digit)
	{
		uFnTimer2Digit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Timer2Digit");
	}

	UREDGfxMoviePlayer_Menu_Base_execTimer2Digit_Params Timer2Digit_Params;
	memset(&Timer2Digit_Params, 0, sizeof(Timer2Digit_Params));
	memcpy_s(&Timer2Digit_Params.Time, sizeof(Timer2Digit_Params.Time), &Time, sizeof(Time));
	memcpy_s(&Timer2Digit_Params.digit1, sizeof(Timer2Digit_Params.digit1), &digit1, sizeof(digit1));
	memcpy_s(&Timer2Digit_Params.digit10, sizeof(Timer2Digit_Params.digit10), &digit10, sizeof(digit10));
	memcpy_s(&Timer2Digit_Params.digit100, sizeof(Timer2Digit_Params.digit100), &digit100, sizeof(digit100));

	this->ProcessEvent(uFnTimer2Digit, &Timer2Digit_Params, nullptr);

	memcpy_s(&digit1, sizeof(digit1), &Timer2Digit_Params.digit1, sizeof(Timer2Digit_Params.digit1));
	memcpy_s(&digit10, sizeof(digit10), &Timer2Digit_Params.digit10, sizeof(Timer2Digit_Params.digit10));
	memcpy_s(&digit100, sizeof(digit100), &Timer2Digit_Params.digit100, sizeof(Timer2Digit_Params.digit100));

	return Timer2Digit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.SlideMessage
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39915])
// Parameter Info:
// class FString                  MessageId                      (CPF_Parm | CPF_NeedCtorLink)
// EUE_PLAYER_ID                  Side                           (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::SlideMessage(const class FString& MessageId, EUE_PLAYER_ID Side)
{
	static UFunction* uFnSlideMessage = nullptr;

	if (!uFnSlideMessage)
	{
		uFnSlideMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.SlideMessage");
	}

	UREDGfxMoviePlayer_Menu_Base_execSlideMessage_Params SlideMessage_Params;
	memset(&SlideMessage_Params, 0, sizeof(SlideMessage_Params));
	memcpy_s(&SlideMessage_Params.MessageId, sizeof(SlideMessage_Params.MessageId), &MessageId, sizeof(MessageId));
	memcpy_s(&SlideMessage_Params.Side, sizeof(SlideMessage_Params.Side), &Side, sizeof(Side));

	this->ProcessEvent(uFnSlideMessage, &SlideMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_OpenOK_CustomMessage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39066])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  messege                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_Menu_Base::PopUp_OpenOK_CustomMessage(EUE_PLAYER_ID Player, const class FString& messege)
{
	static UFunction* uFnPopUp_OpenOK_CustomMessage = nullptr;

	if (!uFnPopUp_OpenOK_CustomMessage)
	{
		uFnPopUp_OpenOK_CustomMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_OpenOK_CustomMessage");
	}

	UREDGfxMoviePlayer_Menu_Base_execPopUp_OpenOK_CustomMessage_Params PopUp_OpenOK_CustomMessage_Params;
	memset(&PopUp_OpenOK_CustomMessage_Params, 0, sizeof(PopUp_OpenOK_CustomMessage_Params));
	memcpy_s(&PopUp_OpenOK_CustomMessage_Params.Player, sizeof(PopUp_OpenOK_CustomMessage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&PopUp_OpenOK_CustomMessage_Params.messege, sizeof(PopUp_OpenOK_CustomMessage_Params.messege), &messege, sizeof(messege));

	this->ProcessEvent(uFnPopUp_OpenOK_CustomMessage, &PopUp_OpenOK_CustomMessage_Params, nullptr);

	return PopUp_OpenOK_CustomMessage_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_Close
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39063])
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::PopUp_Close()
{
	static UFunction* uFnPopUp_Close = nullptr;

	if (!uFnPopUp_Close)
	{
		uFnPopUp_Close = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_Close");
	}

	UREDGfxMoviePlayer_Menu_Base_execPopUp_Close_Params PopUp_Close_Params;
	memset(&PopUp_Close_Params, 0, sizeof(PopUp_Close_Params));

	this->ProcessEvent(uFnPopUp_Close, &PopUp_Close_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_IsActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39064])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::PopUp_IsActive()
{
	static UFunction* uFnPopUp_IsActive = nullptr;

	if (!uFnPopUp_IsActive)
	{
		uFnPopUp_IsActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_IsActive");
	}

	UREDGfxMoviePlayer_Menu_Base_execPopUp_IsActive_Params PopUp_IsActive_Params;
	memset(&PopUp_IsActive_Params, 0, sizeof(PopUp_IsActive_Params));

	this->ProcessEvent(uFnPopUp_IsActive, &PopUp_IsActive_Params, nullptr);

	return PopUp_IsActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_CheckReturnVal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39062])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Handle                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_Menu_Base::PopUp_CheckReturnVal(int32_t Handle)
{
	static UFunction* uFnPopUp_CheckReturnVal = nullptr;

	if (!uFnPopUp_CheckReturnVal)
	{
		uFnPopUp_CheckReturnVal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_CheckReturnVal");
	}

	UREDGfxMoviePlayer_Menu_Base_execPopUp_CheckReturnVal_Params PopUp_CheckReturnVal_Params;
	memset(&PopUp_CheckReturnVal_Params, 0, sizeof(PopUp_CheckReturnVal_Params));
	memcpy_s(&PopUp_CheckReturnVal_Params.Handle, sizeof(PopUp_CheckReturnVal_Params.Handle), &Handle, sizeof(Handle));

	this->ProcessEvent(uFnPopUp_CheckReturnVal, &PopUp_CheckReturnVal_Params, nullptr);

	return PopUp_CheckReturnVal_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_OpenYesNo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39067])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  messegaID                      (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_Menu_Base::PopUp_OpenYesNo(EUE_PLAYER_ID Player, const class FString& messegaID)
{
	static UFunction* uFnPopUp_OpenYesNo = nullptr;

	if (!uFnPopUp_OpenYesNo)
	{
		uFnPopUp_OpenYesNo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_OpenYesNo");
	}

	UREDGfxMoviePlayer_Menu_Base_execPopUp_OpenYesNo_Params PopUp_OpenYesNo_Params;
	memset(&PopUp_OpenYesNo_Params, 0, sizeof(PopUp_OpenYesNo_Params));
	memcpy_s(&PopUp_OpenYesNo_Params.Player, sizeof(PopUp_OpenYesNo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&PopUp_OpenYesNo_Params.messegaID, sizeof(PopUp_OpenYesNo_Params.messegaID), &messegaID, sizeof(messegaID));

	this->ProcessEvent(uFnPopUp_OpenYesNo, &PopUp_OpenYesNo_Params, nullptr);

	return PopUp_OpenYesNo_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_OpenOK
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39065])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  messegaID                      (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_Menu_Base::PopUp_OpenOK(EUE_PLAYER_ID Player, const class FString& messegaID)
{
	static UFunction* uFnPopUp_OpenOK = nullptr;

	if (!uFnPopUp_OpenOK)
	{
		uFnPopUp_OpenOK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.PopUp_OpenOK");
	}

	UREDGfxMoviePlayer_Menu_Base_execPopUp_OpenOK_Params PopUp_OpenOK_Params;
	memset(&PopUp_OpenOK_Params, 0, sizeof(PopUp_OpenOK_Params));
	memcpy_s(&PopUp_OpenOK_Params.Player, sizeof(PopUp_OpenOK_Params.Player), &Player, sizeof(Player));
	memcpy_s(&PopUp_OpenOK_Params.messegaID, sizeof(PopUp_OpenOK_Params.messegaID), &messegaID, sizeof(messegaID));

	this->ProcessEvent(uFnPopUp_OpenOK, &PopUp_OpenOK_Params, nullptr);

	return PopUp_OpenOK_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Account_IsBannedNetwork
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35357])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::Account_IsBannedNetwork()
{
	static UFunction* uFnAccount_IsBannedNetwork = nullptr;

	if (!uFnAccount_IsBannedNetwork)
	{
		uFnAccount_IsBannedNetwork = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Account_IsBannedNetwork");
	}

	UREDGfxMoviePlayer_Menu_Base_execAccount_IsBannedNetwork_Params Account_IsBannedNetwork_Params;
	memset(&Account_IsBannedNetwork_Params, 0, sizeof(Account_IsBannedNetwork_Params));

	this->ProcessEvent(uFnAccount_IsBannedNetwork, &Account_IsBannedNetwork_Params, nullptr);

	return Account_IsBannedNetwork_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Account_IsBannedChat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35356])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::Account_IsBannedChat()
{
	static UFunction* uFnAccount_IsBannedChat = nullptr;

	if (!uFnAccount_IsBannedChat)
	{
		uFnAccount_IsBannedChat = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Account_IsBannedChat");
	}

	UREDGfxMoviePlayer_Menu_Base_execAccount_IsBannedChat_Params Account_IsBannedChat_Params;
	memset(&Account_IsBannedChat_Params, 0, sizeof(Account_IsBannedChat_Params));

	this->ProcessEvent(uFnAccount_IsBannedChat, &Account_IsBannedChat_Params, nullptr);

	return Account_IsBannedChat_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.DrawCreditFont
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36600])
// Parameter Info:
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       isCenter                       (CPF_Parm)
// class FString                  Text                           (CPF_Parm | CPF_NeedCtorLink)
// float                          Alpha                          (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::DrawCreditFont(int32_t X, int32_t Y, bool isCenter, const class FString& Text, float Alpha)
{
	static UFunction* uFnDrawCreditFont = nullptr;

	if (!uFnDrawCreditFont)
	{
		uFnDrawCreditFont = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.DrawCreditFont");
	}

	UREDGfxMoviePlayer_Menu_Base_execDrawCreditFont_Params DrawCreditFont_Params;
	memset(&DrawCreditFont_Params, 0, sizeof(DrawCreditFont_Params));
	memcpy_s(&DrawCreditFont_Params.X, sizeof(DrawCreditFont_Params.X), &X, sizeof(X));
	memcpy_s(&DrawCreditFont_Params.Y, sizeof(DrawCreditFont_Params.Y), &Y, sizeof(Y));
	DrawCreditFont_Params.isCenter = isCenter;
	memcpy_s(&DrawCreditFont_Params.Text, sizeof(DrawCreditFont_Params.Text), &Text, sizeof(Text));
	memcpy_s(&DrawCreditFont_Params.Alpha, sizeof(DrawCreditFont_Params.Alpha), &Alpha, sizeof(Alpha));

	this->ProcessEvent(uFnDrawCreditFont, &DrawCreditFont_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_SetHidden
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36345])
// Parameter Info:
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::Credit_SetHidden(bool flag)
{
	static UFunction* uFnCredit_SetHidden = nullptr;

	if (!uFnCredit_SetHidden)
	{
		uFnCredit_SetHidden = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_SetHidden");
	}

	UREDGfxMoviePlayer_Menu_Base_execCredit_SetHidden_Params Credit_SetHidden_Params;
	memset(&Credit_SetHidden_Params, 0, sizeof(Credit_SetHidden_Params));
	Credit_SetHidden_Params.flag = flag;

	this->ProcessEvent(uFnCredit_SetHidden, &Credit_SetHidden_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_ContinueGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36339])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::Credit_ContinueGame(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCredit_ContinueGame = nullptr;

	if (!uFnCredit_ContinueGame)
	{
		uFnCredit_ContinueGame = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_ContinueGame");
	}

	UREDGfxMoviePlayer_Menu_Base_execCredit_ContinueGame_Params Credit_ContinueGame_Params;
	memset(&Credit_ContinueGame_Params, 0, sizeof(Credit_ContinueGame_Params));
	memcpy_s(&Credit_ContinueGame_Params.Player, sizeof(Credit_ContinueGame_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCredit_ContinueGame, &Credit_ContinueGame_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_StartGame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36346])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::Credit_StartGame(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCredit_StartGame = nullptr;

	if (!uFnCredit_StartGame)
	{
		uFnCredit_StartGame = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_StartGame");
	}

	UREDGfxMoviePlayer_Menu_Base_execCredit_StartGame_Params Credit_StartGame_Params;
	memset(&Credit_StartGame_Params, 0, sizeof(Credit_StartGame_Params));
	memcpy_s(&Credit_StartGame_Params.Player, sizeof(Credit_StartGame_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCredit_StartGame, &Credit_StartGame_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsFreePlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36343])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::Credit_IsFreePlay()
{
	static UFunction* uFnCredit_IsFreePlay = nullptr;

	if (!uFnCredit_IsFreePlay)
	{
		uFnCredit_IsFreePlay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsFreePlay");
	}

	UREDGfxMoviePlayer_Menu_Base_execCredit_IsFreePlay_Params Credit_IsFreePlay_Params;
	memset(&Credit_IsFreePlay_Params, 0, sizeof(Credit_IsFreePlay_Params));

	this->ProcessEvent(uFnCredit_IsFreePlay, &Credit_IsFreePlay_Params, nullptr);

	return Credit_IsFreePlay_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsCoinZero
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36340])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::Credit_IsCoinZero(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCredit_IsCoinZero = nullptr;

	if (!uFnCredit_IsCoinZero)
	{
		uFnCredit_IsCoinZero = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsCoinZero");
	}

	UREDGfxMoviePlayer_Menu_Base_execCredit_IsCoinZero_Params Credit_IsCoinZero_Params;
	memset(&Credit_IsCoinZero_Params, 0, sizeof(Credit_IsCoinZero_Params));
	memcpy_s(&Credit_IsCoinZero_Params.Player, sizeof(Credit_IsCoinZero_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCredit_IsCoinZero, &Credit_IsCoinZero_Params, nullptr);

	return Credit_IsCoinZero_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsInsertCoin
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36344])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::Credit_IsInsertCoin(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCredit_IsInsertCoin = nullptr;

	if (!uFnCredit_IsInsertCoin)
	{
		uFnCredit_IsInsertCoin = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsInsertCoin");
	}

	UREDGfxMoviePlayer_Menu_Base_execCredit_IsInsertCoin_Params Credit_IsInsertCoin_Params;
	memset(&Credit_IsInsertCoin_Params, 0, sizeof(Credit_IsInsertCoin_Params));
	memcpy_s(&Credit_IsInsertCoin_Params.Player, sizeof(Credit_IsInsertCoin_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCredit_IsInsertCoin, &Credit_IsInsertCoin_Params, nullptr);

	return Credit_IsInsertCoin_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsEnough_Continue
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36342])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::Credit_IsEnough_Continue(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCredit_IsEnough_Continue = nullptr;

	if (!uFnCredit_IsEnough_Continue)
	{
		uFnCredit_IsEnough_Continue = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsEnough_Continue");
	}

	UREDGfxMoviePlayer_Menu_Base_execCredit_IsEnough_Continue_Params Credit_IsEnough_Continue_Params;
	memset(&Credit_IsEnough_Continue_Params, 0, sizeof(Credit_IsEnough_Continue_Params));
	memcpy_s(&Credit_IsEnough_Continue_Params.Player, sizeof(Credit_IsEnough_Continue_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCredit_IsEnough_Continue, &Credit_IsEnough_Continue_Params, nullptr);

	return Credit_IsEnough_Continue_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsEnough
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36341])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::Credit_IsEnough(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCredit_IsEnough = nullptr;

	if (!uFnCredit_IsEnough)
	{
		uFnCredit_IsEnough = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Credit_IsEnough");
	}

	UREDGfxMoviePlayer_Menu_Base_execCredit_IsEnough_Params Credit_IsEnough_Params;
	memset(&Credit_IsEnough_Params, 0, sizeof(Credit_IsEnough_Params));
	memcpy_s(&Credit_IsEnough_Params.Player, sizeof(Credit_IsEnough_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCredit_IsEnough, &Credit_IsEnough_Params, nullptr);

	return Credit_IsEnough_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.CheckEndGameInput
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::CheckEndGameInput()
{
	static UFunction* uFnCheckEndGameInput = nullptr;

	if (!uFnCheckEndGameInput)
	{
		uFnCheckEndGameInput = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.CheckEndGameInput");
	}

	UREDGfxMoviePlayer_Menu_Base_execCheckEndGameInput_Params CheckEndGameInput_Params;
	memset(&CheckEndGameInput_Params, 0, sizeof(CheckEndGameInput_Params));

	this->ProcessEvent(uFnCheckEndGameInput, &CheckEndGameInput_Params, nullptr);

	return CheckEndGameInput_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsGameStart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsGameStart(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsGameStart = nullptr;

	if (!uFnIsGameStart)
	{
		uFnIsGameStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsGameStart");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsGameStart_Params IsGameStart_Params;
	memset(&IsGameStart_Params, 0, sizeof(IsGameStart_Params));
	memcpy_s(&IsGameStart_Params.Player, sizeof(IsGameStart_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsGameStart, &IsGameStart_Params, nullptr);

	return IsGameStart_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsSkipAdvertise
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsSkipAdvertise()
{
	static UFunction* uFnIsSkipAdvertise = nullptr;

	if (!uFnIsSkipAdvertise)
	{
		uFnIsSkipAdvertise = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsSkipAdvertise");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsSkipAdvertise_Params IsSkipAdvertise_Params;
	memset(&IsSkipAdvertise_Params, 0, sizeof(IsSkipAdvertise_Params));

	this->ProcessEvent(uFnIsSkipAdvertise, &IsSkipAdvertise_Params, nullptr);

	return IsSkipAdvertise_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_AnyBtn
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_AnyBtn(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_AnyBtn = nullptr;

	if (!uFnIsTrig_AnyBtn)
	{
		uFnIsTrig_AnyBtn = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_AnyBtn");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_AnyBtn_Params IsTrig_AnyBtn_Params;
	memset(&IsTrig_AnyBtn_Params, 0, sizeof(IsTrig_AnyBtn_Params));
	memcpy_s(&IsTrig_AnyBtn_Params.Player, sizeof(IsTrig_AnyBtn_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_AnyBtn, &IsTrig_AnyBtn_Params, nullptr);

	return IsTrig_AnyBtn_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsUIExclusive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37921])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsUIExclusive()
{
	static UFunction* uFnIsUIExclusive = nullptr;

	if (!uFnIsUIExclusive)
	{
		uFnIsUIExclusive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsUIExclusive");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsUIExclusive_Params IsUIExclusive_Params;
	memset(&IsUIExclusive_Params, 0, sizeof(IsUIExclusive_Params));

	this->ProcessEvent(uFnIsUIExclusive, &IsUIExclusive_Params, nullptr);

	return IsUIExclusive_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.GetPadNum
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37131])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_Menu_Base::GetPadNum()
{
	static UFunction* uFnGetPadNum = nullptr;

	if (!uFnGetPadNum)
	{
		uFnGetPadNum = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.GetPadNum");
	}

	UREDGfxMoviePlayer_Menu_Base_execGetPadNum_Params GetPadNum_Params;
	memset(&GetPadNum_Params, 0, sizeof(GetPadNum_Params));

	this->ProcessEvent(uFnGetPadNum, &GetPadNum_Params, nullptr);

	return GetPadNum_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.GetPlayerPadID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37140])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_Menu_Base::GetPlayerPadID(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetPlayerPadID = nullptr;

	if (!uFnGetPlayerPadID)
	{
		uFnGetPlayerPadID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.GetPlayerPadID");
	}

	UREDGfxMoviePlayer_Menu_Base_execGetPlayerPadID_Params GetPlayerPadID_Params;
	memset(&GetPlayerPadID_Params, 0, sizeof(GetPlayerPadID_Params));
	memcpy_s(&GetPlayerPadID_Params.Player, sizeof(GetPlayerPadID_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetPlayerPadID, &GetPlayerPadID_Params, nullptr);

	return GetPlayerPadID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.SetPlayerPadID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39793])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        PadID                          (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::SetPlayerPadID(EUE_PLAYER_ID Player, int32_t PadID)
{
	static UFunction* uFnSetPlayerPadID = nullptr;

	if (!uFnSetPlayerPadID)
	{
		uFnSetPlayerPadID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.SetPlayerPadID");
	}

	UREDGfxMoviePlayer_Menu_Base_execSetPlayerPadID_Params SetPlayerPadID_Params;
	memset(&SetPlayerPadID_Params, 0, sizeof(SetPlayerPadID_Params));
	memcpy_s(&SetPlayerPadID_Params.Player, sizeof(SetPlayerPadID_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetPlayerPadID_Params.PadID, sizeof(SetPlayerPadID_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnSetPlayerPadID, &SetPlayerPadID_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Right_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37914])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Right_FromPad(int32_t Player)
{
	static UFunction* uFnIsTrig_Right_FromPad = nullptr;

	if (!uFnIsTrig_Right_FromPad)
	{
		uFnIsTrig_Right_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Right_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Right_FromPad_Params IsTrig_Right_FromPad_Params;
	memset(&IsTrig_Right_FromPad_Params, 0, sizeof(IsTrig_Right_FromPad_Params));
	memcpy_s(&IsTrig_Right_FromPad_Params.Player, sizeof(IsTrig_Right_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Right_FromPad, &IsTrig_Right_FromPad_Params, nullptr);

	return IsTrig_Right_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Left_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37905])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Left_FromPad(int32_t Player)
{
	static UFunction* uFnIsTrig_Left_FromPad = nullptr;

	if (!uFnIsTrig_Left_FromPad)
	{
		uFnIsTrig_Left_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Left_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Left_FromPad_Params IsTrig_Left_FromPad_Params;
	memset(&IsTrig_Left_FromPad_Params, 0, sizeof(IsTrig_Left_FromPad_Params));
	memcpy_s(&IsTrig_Left_FromPad_Params.Player, sizeof(IsTrig_Left_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Left_FromPad, &IsTrig_Left_FromPad_Params, nullptr);

	return IsTrig_Left_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Down_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37901])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Down_FromPad(int32_t Player)
{
	static UFunction* uFnIsTrig_Down_FromPad = nullptr;

	if (!uFnIsTrig_Down_FromPad)
	{
		uFnIsTrig_Down_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Down_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Down_FromPad_Params IsTrig_Down_FromPad_Params;
	memset(&IsTrig_Down_FromPad_Params, 0, sizeof(IsTrig_Down_FromPad_Params));
	memcpy_s(&IsTrig_Down_FromPad_Params.Player, sizeof(IsTrig_Down_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Down_FromPad, &IsTrig_Down_FromPad_Params, nullptr);

	return IsTrig_Down_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Up_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37917])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Up_FromPad(int32_t Player)
{
	static UFunction* uFnIsTrig_Up_FromPad = nullptr;

	if (!uFnIsTrig_Up_FromPad)
	{
		uFnIsTrig_Up_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Up_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Up_FromPad_Params IsTrig_Up_FromPad_Params;
	memset(&IsTrig_Up_FromPad_Params, 0, sizeof(IsTrig_Up_FromPad_Params));
	memcpy_s(&IsTrig_Up_FromPad_Params.Player, sizeof(IsTrig_Up_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Up_FromPad, &IsTrig_Up_FromPad_Params, nullptr);

	return IsTrig_Up_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_NG_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37908])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_NG_FromPad(int32_t Player)
{
	static UFunction* uFnIsTrig_NG_FromPad = nullptr;

	if (!uFnIsTrig_NG_FromPad)
	{
		uFnIsTrig_NG_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_NG_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_NG_FromPad_Params IsTrig_NG_FromPad_Params;
	memset(&IsTrig_NG_FromPad_Params, 0, sizeof(IsTrig_NG_FromPad_Params));
	memcpy_s(&IsTrig_NG_FromPad_Params.Player, sizeof(IsTrig_NG_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_NG_FromPad, &IsTrig_NG_FromPad_Params, nullptr);

	return IsTrig_NG_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_OK_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37910])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_OK_FromPad(int32_t Player)
{
	static UFunction* uFnIsTrig_OK_FromPad = nullptr;

	if (!uFnIsTrig_OK_FromPad)
	{
		uFnIsTrig_OK_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_OK_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_OK_FromPad_Params IsTrig_OK_FromPad_Params;
	memset(&IsTrig_OK_FromPad_Params, 0, sizeof(IsTrig_OK_FromPad_Params));
	memcpy_s(&IsTrig_OK_FromPad_Params.Player, sizeof(IsTrig_OK_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_OK_FromPad, &IsTrig_OK_FromPad_Params, nullptr);

	return IsTrig_OK_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Right_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37789])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Right_FromPad(int32_t Player)
{
	static UFunction* uFnIsPress_Right_FromPad = nullptr;

	if (!uFnIsPress_Right_FromPad)
	{
		uFnIsPress_Right_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Right_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Right_FromPad_Params IsPress_Right_FromPad_Params;
	memset(&IsPress_Right_FromPad_Params, 0, sizeof(IsPress_Right_FromPad_Params));
	memcpy_s(&IsPress_Right_FromPad_Params.Player, sizeof(IsPress_Right_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_Right_FromPad, &IsPress_Right_FromPad_Params, nullptr);

	return IsPress_Right_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Left_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37784])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Left_FromPad(int32_t Player)
{
	static UFunction* uFnIsPress_Left_FromPad = nullptr;

	if (!uFnIsPress_Left_FromPad)
	{
		uFnIsPress_Left_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Left_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Left_FromPad_Params IsPress_Left_FromPad_Params;
	memset(&IsPress_Left_FromPad_Params, 0, sizeof(IsPress_Left_FromPad_Params));
	memcpy_s(&IsPress_Left_FromPad_Params.Player, sizeof(IsPress_Left_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_Left_FromPad, &IsPress_Left_FromPad_Params, nullptr);

	return IsPress_Left_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Down_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37780])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Down_FromPad(int32_t Player)
{
	static UFunction* uFnIsPress_Down_FromPad = nullptr;

	if (!uFnIsPress_Down_FromPad)
	{
		uFnIsPress_Down_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Down_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Down_FromPad_Params IsPress_Down_FromPad_Params;
	memset(&IsPress_Down_FromPad_Params, 0, sizeof(IsPress_Down_FromPad_Params));
	memcpy_s(&IsPress_Down_FromPad_Params.Player, sizeof(IsPress_Down_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_Down_FromPad, &IsPress_Down_FromPad_Params, nullptr);

	return IsPress_Down_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Up_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37791])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Up_FromPad(int32_t Player)
{
	static UFunction* uFnIsPress_Up_FromPad = nullptr;

	if (!uFnIsPress_Up_FromPad)
	{
		uFnIsPress_Up_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Up_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Up_FromPad_Params IsPress_Up_FromPad_Params;
	memset(&IsPress_Up_FromPad_Params, 0, sizeof(IsPress_Up_FromPad_Params));
	memcpy_s(&IsPress_Up_FromPad_Params.Player, sizeof(IsPress_Up_FromPad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_Up_FromPad, &IsPress_Up_FromPad_Params, nullptr);

	return IsPress_Up_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Btn_Without1_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37778])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PadID                          (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Btn_Without1_FromPad(int32_t PadID)
{
	static UFunction* uFnIsPress_Btn_Without1_FromPad = nullptr;

	if (!uFnIsPress_Btn_Without1_FromPad)
	{
		uFnIsPress_Btn_Without1_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Btn_Without1_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Btn_Without1_FromPad_Params IsPress_Btn_Without1_FromPad_Params;
	memset(&IsPress_Btn_Without1_FromPad_Params, 0, sizeof(IsPress_Btn_Without1_FromPad_Params));
	memcpy_s(&IsPress_Btn_Without1_FromPad_Params.PadID, sizeof(IsPress_Btn_Without1_FromPad_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnIsPress_Btn_Without1_FromPad, &IsPress_Btn_Without1_FromPad_Params, nullptr);

	return IsPress_Btn_Without1_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Btn1_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37777])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PadID                          (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Btn1_FromPad(int32_t PadID)
{
	static UFunction* uFnIsPress_Btn1_FromPad = nullptr;

	if (!uFnIsPress_Btn1_FromPad)
	{
		uFnIsPress_Btn1_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Btn1_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Btn1_FromPad_Params IsPress_Btn1_FromPad_Params;
	memset(&IsPress_Btn1_FromPad_Params, 0, sizeof(IsPress_Btn1_FromPad_Params));
	memcpy_s(&IsPress_Btn1_FromPad_Params.PadID, sizeof(IsPress_Btn1_FromPad_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnIsPress_Btn1_FromPad, &IsPress_Btn1_FromPad_Params, nullptr);

	return IsPress_Btn1_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_BtnBack_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37897])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PadID                          (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_BtnBack_FromPad(int32_t PadID)
{
	static UFunction* uFnIsTrig_BtnBack_FromPad = nullptr;

	if (!uFnIsTrig_BtnBack_FromPad)
	{
		uFnIsTrig_BtnBack_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_BtnBack_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_BtnBack_FromPad_Params IsTrig_BtnBack_FromPad_Params;
	memset(&IsTrig_BtnBack_FromPad_Params, 0, sizeof(IsTrig_BtnBack_FromPad_Params));
	memcpy_s(&IsTrig_BtnBack_FromPad_Params.PadID, sizeof(IsTrig_BtnBack_FromPad_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnIsTrig_BtnBack_FromPad, &IsTrig_BtnBack_FromPad_Params, nullptr);

	return IsTrig_BtnBack_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_AnyBtn_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37889])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PadID                          (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_AnyBtn_FromPad(int32_t PadID)
{
	static UFunction* uFnIsTrig_AnyBtn_FromPad = nullptr;

	if (!uFnIsTrig_AnyBtn_FromPad)
	{
		uFnIsTrig_AnyBtn_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_AnyBtn_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_AnyBtn_FromPad_Params IsTrig_AnyBtn_FromPad_Params;
	memset(&IsTrig_AnyBtn_FromPad_Params, 0, sizeof(IsTrig_AnyBtn_FromPad_Params));
	memcpy_s(&IsTrig_AnyBtn_FromPad_Params.PadID, sizeof(IsTrig_AnyBtn_FromPad_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnIsTrig_AnyBtn_FromPad, &IsTrig_AnyBtn_FromPad_Params, nullptr);

	return IsTrig_AnyBtn_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_BtnStart_FromPad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37899])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PadID                          (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_BtnStart_FromPad(int32_t PadID)
{
	static UFunction* uFnIsTrig_BtnStart_FromPad = nullptr;

	if (!uFnIsTrig_BtnStart_FromPad)
	{
		uFnIsTrig_BtnStart_FromPad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_BtnStart_FromPad");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_BtnStart_FromPad_Params IsTrig_BtnStart_FromPad_Params;
	memset(&IsTrig_BtnStart_FromPad_Params, 0, sizeof(IsTrig_BtnStart_FromPad_Params));
	memcpy_s(&IsTrig_BtnStart_FromPad_Params.PadID, sizeof(IsTrig_BtnStart_FromPad_Params.PadID), &PadID, sizeof(PadID));

	this->ProcessEvent(uFnIsTrig_BtnStart_FromPad, &IsTrig_BtnStart_FromPad_Params, nullptr);

	return IsTrig_BtnStart_FromPad_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn6
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37896])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Btn6(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Btn6 = nullptr;

	if (!uFnIsTrig_Btn6)
	{
		uFnIsTrig_Btn6 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn6");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Btn6_Params IsTrig_Btn6_Params;
	memset(&IsTrig_Btn6_Params, 0, sizeof(IsTrig_Btn6_Params));
	memcpy_s(&IsTrig_Btn6_Params.Player, sizeof(IsTrig_Btn6_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Btn6, &IsTrig_Btn6_Params, nullptr);

	return IsTrig_Btn6_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn5
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37895])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Btn5(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Btn5 = nullptr;

	if (!uFnIsTrig_Btn5)
	{
		uFnIsTrig_Btn5 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn5");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Btn5_Params IsTrig_Btn5_Params;
	memset(&IsTrig_Btn5_Params, 0, sizeof(IsTrig_Btn5_Params));
	memcpy_s(&IsTrig_Btn5_Params.Player, sizeof(IsTrig_Btn5_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Btn5, &IsTrig_Btn5_Params, nullptr);

	return IsTrig_Btn5_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn4
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37894])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Btn4(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Btn4 = nullptr;

	if (!uFnIsTrig_Btn4)
	{
		uFnIsTrig_Btn4 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn4");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Btn4_Params IsTrig_Btn4_Params;
	memset(&IsTrig_Btn4_Params, 0, sizeof(IsTrig_Btn4_Params));
	memcpy_s(&IsTrig_Btn4_Params.Player, sizeof(IsTrig_Btn4_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Btn4, &IsTrig_Btn4_Params, nullptr);

	return IsTrig_Btn4_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn3
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37893])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Btn3(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Btn3 = nullptr;

	if (!uFnIsTrig_Btn3)
	{
		uFnIsTrig_Btn3 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn3");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Btn3_Params IsTrig_Btn3_Params;
	memset(&IsTrig_Btn3_Params, 0, sizeof(IsTrig_Btn3_Params));
	memcpy_s(&IsTrig_Btn3_Params.Player, sizeof(IsTrig_Btn3_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Btn3, &IsTrig_Btn3_Params, nullptr);

	return IsTrig_Btn3_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn2
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37892])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Btn2(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Btn2 = nullptr;

	if (!uFnIsTrig_Btn2)
	{
		uFnIsTrig_Btn2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn2");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Btn2_Params IsTrig_Btn2_Params;
	memset(&IsTrig_Btn2_Params, 0, sizeof(IsTrig_Btn2_Params));
	memcpy_s(&IsTrig_Btn2_Params.Player, sizeof(IsTrig_Btn2_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Btn2, &IsTrig_Btn2_Params, nullptr);

	return IsTrig_Btn2_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn1
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37891])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Btn1(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Btn1 = nullptr;

	if (!uFnIsTrig_Btn1)
	{
		uFnIsTrig_Btn1 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Btn1");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Btn1_Params IsTrig_Btn1_Params;
	memset(&IsTrig_Btn1_Params, 0, sizeof(IsTrig_Btn1_Params));
	memcpy_s(&IsTrig_Btn1_Params.Player, sizeof(IsTrig_Btn1_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Btn1, &IsTrig_Btn1_Params, nullptr);

	return IsTrig_Btn1_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPull_R2
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37800])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPull_R2(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPull_R2 = nullptr;

	if (!uFnIsPull_R2)
	{
		uFnIsPull_R2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPull_R2");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPull_R2_Params IsPull_R2_Params;
	memset(&IsPull_R2_Params, 0, sizeof(IsPull_R2_Params));
	memcpy_s(&IsPull_R2_Params.Player, sizeof(IsPull_R2_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPull_R2, &IsPull_R2_Params, nullptr);

	return IsPull_R2_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPull_L2
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37798])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPull_L2(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPull_L2 = nullptr;

	if (!uFnIsPull_L2)
	{
		uFnIsPull_L2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPull_L2");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPull_L2_Params IsPull_L2_Params;
	memset(&IsPull_L2_Params, 0, sizeof(IsPull_L2_Params));
	memcpy_s(&IsPull_L2_Params.Player, sizeof(IsPull_L2_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPull_L2, &IsPull_L2_Params, nullptr);

	return IsPull_L2_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPull_R1
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37799])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPull_R1(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPull_R1 = nullptr;

	if (!uFnIsPull_R1)
	{
		uFnIsPull_R1 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPull_R1");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPull_R1_Params IsPull_R1_Params;
	memset(&IsPull_R1_Params, 0, sizeof(IsPull_R1_Params));
	memcpy_s(&IsPull_R1_Params.Player, sizeof(IsPull_R1_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPull_R1, &IsPull_R1_Params, nullptr);

	return IsPull_R1_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPull_L1
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37797])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPull_L1(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPull_L1 = nullptr;

	if (!uFnIsPull_L1)
	{
		uFnIsPull_L1 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPull_L1");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPull_L1_Params IsPull_L1_Params;
	memset(&IsPull_L1_Params, 0, sizeof(IsPull_L1_Params));
	memcpy_s(&IsPull_L1_Params.Player, sizeof(IsPull_L1_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPull_L1, &IsPull_L1_Params, nullptr);

	return IsPull_L1_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_R2
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37787])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_R2(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_R2 = nullptr;

	if (!uFnIsPress_R2)
	{
		uFnIsPress_R2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_R2");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_R2_Params IsPress_R2_Params;
	memset(&IsPress_R2_Params, 0, sizeof(IsPress_R2_Params));
	memcpy_s(&IsPress_R2_Params.Player, sizeof(IsPress_R2_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_R2, &IsPress_R2_Params, nullptr);

	return IsPress_R2_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_L2
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37782])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_L2(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_L2 = nullptr;

	if (!uFnIsPress_L2)
	{
		uFnIsPress_L2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_L2");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_L2_Params IsPress_L2_Params;
	memset(&IsPress_L2_Params, 0, sizeof(IsPress_L2_Params));
	memcpy_s(&IsPress_L2_Params.Player, sizeof(IsPress_L2_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_L2, &IsPress_L2_Params, nullptr);

	return IsPress_L2_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_R1
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37786])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_R1(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_R1 = nullptr;

	if (!uFnIsPress_R1)
	{
		uFnIsPress_R1 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_R1");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_R1_Params IsPress_R1_Params;
	memset(&IsPress_R1_Params, 0, sizeof(IsPress_R1_Params));
	memcpy_s(&IsPress_R1_Params.Player, sizeof(IsPress_R1_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_R1, &IsPress_R1_Params, nullptr);

	return IsPress_R1_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_L1
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37781])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_L1(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_L1 = nullptr;

	if (!uFnIsPress_L1)
	{
		uFnIsPress_L1 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_L1");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_L1_Params IsPress_L1_Params;
	memset(&IsPress_L1_Params, 0, sizeof(IsPress_L1_Params));
	memcpy_s(&IsPress_L1_Params.Player, sizeof(IsPress_L1_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_L1, &IsPress_L1_Params, nullptr);

	return IsPress_L1_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_L2
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37903])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_L2(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_L2 = nullptr;

	if (!uFnIsTrig_L2)
	{
		uFnIsTrig_L2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_L2");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_L2_Params IsTrig_L2_Params;
	memset(&IsTrig_L2_Params, 0, sizeof(IsTrig_L2_Params));
	memcpy_s(&IsTrig_L2_Params.Player, sizeof(IsTrig_L2_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_L2, &IsTrig_L2_Params, nullptr);

	return IsTrig_L2_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_L1
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37902])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_L1(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_L1 = nullptr;

	if (!uFnIsTrig_L1)
	{
		uFnIsTrig_L1 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_L1");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_L1_Params IsTrig_L1_Params;
	memset(&IsTrig_L1_Params, 0, sizeof(IsTrig_L1_Params));
	memcpy_s(&IsTrig_L1_Params.Player, sizeof(IsTrig_L1_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_L1, &IsTrig_L1_Params, nullptr);

	return IsTrig_L1_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_R2
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37912])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_R2(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_R2 = nullptr;

	if (!uFnIsTrig_R2)
	{
		uFnIsTrig_R2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_R2");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_R2_Params IsTrig_R2_Params;
	memset(&IsTrig_R2_Params, 0, sizeof(IsTrig_R2_Params));
	memcpy_s(&IsTrig_R2_Params.Player, sizeof(IsTrig_R2_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_R2, &IsTrig_R2_Params, nullptr);

	return IsTrig_R2_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_R1
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37911])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_R1(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_R1 = nullptr;

	if (!uFnIsTrig_R1)
	{
		uFnIsTrig_R1 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_R1");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_R1_Params IsTrig_R1_Params;
	memset(&IsTrig_R1_Params, 0, sizeof(IsTrig_R1_Params));
	memcpy_s(&IsTrig_R1_Params.Player, sizeof(IsTrig_R1_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_R1, &IsTrig_R1_Params, nullptr);

	return IsTrig_R1_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_A
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37887])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_A(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_A = nullptr;

	if (!uFnIsTrig_A)
	{
		uFnIsTrig_A = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_A");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_A_Params IsTrig_A_Params;
	memset(&IsTrig_A_Params, 0, sizeof(IsTrig_A_Params));
	memcpy_s(&IsTrig_A_Params.Player, sizeof(IsTrig_A_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_A, &IsTrig_A_Params, nullptr);

	return IsTrig_A_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_X
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37918])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_X(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_X = nullptr;

	if (!uFnIsTrig_X)
	{
		uFnIsTrig_X = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_X");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_X_Params IsTrig_X_Params;
	memset(&IsTrig_X_Params, 0, sizeof(IsTrig_X_Params));
	memcpy_s(&IsTrig_X_Params.Player, sizeof(IsTrig_X_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_X, &IsTrig_X_Params, nullptr);

	return IsTrig_X_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Y
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37919])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Y(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Y = nullptr;

	if (!uFnIsTrig_Y)
	{
		uFnIsTrig_Y = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Y");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Y_Params IsTrig_Y_Params;
	memset(&IsTrig_Y_Params, 0, sizeof(IsTrig_Y_Params));
	memcpy_s(&IsTrig_Y_Params.Player, sizeof(IsTrig_Y_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Y, &IsTrig_Y_Params, nullptr);

	return IsTrig_Y_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_B
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37890])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_B(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_B = nullptr;

	if (!uFnIsTrig_B)
	{
		uFnIsTrig_B = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_B");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_B_Params IsTrig_B_Params;
	memset(&IsTrig_B_Params, 0, sizeof(IsTrig_B_Params));
	memcpy_s(&IsTrig_B_Params.Player, sizeof(IsTrig_B_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_B, &IsTrig_B_Params, nullptr);

	return IsTrig_B_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_OK
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37785])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_OK(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_OK = nullptr;

	if (!uFnIsPress_OK)
	{
		uFnIsPress_OK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_OK");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_OK_Params IsPress_OK_Params;
	memset(&IsPress_OK_Params, 0, sizeof(IsPress_OK_Params));
	memcpy_s(&IsPress_OK_Params.Player, sizeof(IsPress_OK_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_OK, &IsPress_OK_Params, nullptr);

	return IsPress_OK_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_BtnStart
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37898])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_BtnStart(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_BtnStart = nullptr;

	if (!uFnIsTrig_BtnStart)
	{
		uFnIsTrig_BtnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_BtnStart");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_BtnStart_Params IsTrig_BtnStart_Params;
	memset(&IsTrig_BtnStart_Params, 0, sizeof(IsTrig_BtnStart_Params));
	memcpy_s(&IsTrig_BtnStart_Params.Player, sizeof(IsTrig_BtnStart_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_BtnStart, &IsTrig_BtnStart_Params, nullptr);

	return IsTrig_BtnStart_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_NG
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37907])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_NG(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_NG = nullptr;

	if (!uFnIsTrig_NG)
	{
		uFnIsTrig_NG = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_NG");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_NG_Params IsTrig_NG_Params;
	memset(&IsTrig_NG_Params, 0, sizeof(IsTrig_NG_Params));
	memcpy_s(&IsTrig_NG_Params.Player, sizeof(IsTrig_NG_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_NG, &IsTrig_NG_Params, nullptr);

	return IsTrig_NG_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_OK
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37909])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_OK(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_OK = nullptr;

	if (!uFnIsTrig_OK)
	{
		uFnIsTrig_OK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_OK");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_OK_Params IsTrig_OK_Params;
	memset(&IsTrig_OK_Params, 0, sizeof(IsTrig_OK_Params));
	memcpy_s(&IsTrig_OK_Params.Player, sizeof(IsTrig_OK_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_OK, &IsTrig_OK_Params, nullptr);

	return IsTrig_OK_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Right
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37913])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Right(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Right = nullptr;

	if (!uFnIsTrig_Right)
	{
		uFnIsTrig_Right = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Right");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Right_Params IsTrig_Right_Params;
	memset(&IsTrig_Right_Params, 0, sizeof(IsTrig_Right_Params));
	memcpy_s(&IsTrig_Right_Params.Player, sizeof(IsTrig_Right_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Right, &IsTrig_Right_Params, nullptr);

	return IsTrig_Right_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Left
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37904])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Left(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Left = nullptr;

	if (!uFnIsTrig_Left)
	{
		uFnIsTrig_Left = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Left");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Left_Params IsTrig_Left_Params;
	memset(&IsTrig_Left_Params, 0, sizeof(IsTrig_Left_Params));
	memcpy_s(&IsTrig_Left_Params.Player, sizeof(IsTrig_Left_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Left, &IsTrig_Left_Params, nullptr);

	return IsTrig_Left_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Down
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37900])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Down(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Down = nullptr;

	if (!uFnIsTrig_Down)
	{
		uFnIsTrig_Down = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Down");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Down_Params IsTrig_Down_Params;
	memset(&IsTrig_Down_Params, 0, sizeof(IsTrig_Down_Params));
	memcpy_s(&IsTrig_Down_Params.Player, sizeof(IsTrig_Down_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Down, &IsTrig_Down_Params, nullptr);

	return IsTrig_Down_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Up
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37916])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsTrig_Up(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsTrig_Up = nullptr;

	if (!uFnIsTrig_Up)
	{
		uFnIsTrig_Up = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsTrig_Up");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsTrig_Up_Params IsTrig_Up_Params;
	memset(&IsTrig_Up_Params, 0, sizeof(IsTrig_Up_Params));
	memcpy_s(&IsTrig_Up_Params.Player, sizeof(IsTrig_Up_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsTrig_Up, &IsTrig_Up_Params, nullptr);

	return IsTrig_Up_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Right
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37788])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Right(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_Right = nullptr;

	if (!uFnIsPress_Right)
	{
		uFnIsPress_Right = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Right");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Right_Params IsPress_Right_Params;
	memset(&IsPress_Right_Params, 0, sizeof(IsPress_Right_Params));
	memcpy_s(&IsPress_Right_Params.Player, sizeof(IsPress_Right_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_Right, &IsPress_Right_Params, nullptr);

	return IsPress_Right_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Left
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37783])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Left(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_Left = nullptr;

	if (!uFnIsPress_Left)
	{
		uFnIsPress_Left = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Left");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Left_Params IsPress_Left_Params;
	memset(&IsPress_Left_Params, 0, sizeof(IsPress_Left_Params));
	memcpy_s(&IsPress_Left_Params.Player, sizeof(IsPress_Left_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_Left, &IsPress_Left_Params, nullptr);

	return IsPress_Left_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Down
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37779])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Down(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_Down = nullptr;

	if (!uFnIsPress_Down)
	{
		uFnIsPress_Down = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Down");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Down_Params IsPress_Down_Params;
	memset(&IsPress_Down_Params, 0, sizeof(IsPress_Down_Params));
	memcpy_s(&IsPress_Down_Params.Player, sizeof(IsPress_Down_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_Down, &IsPress_Down_Params, nullptr);

	return IsPress_Down_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Up
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37790])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsPress_Up(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsPress_Up = nullptr;

	if (!uFnIsPress_Up)
	{
		uFnIsPress_Up = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsPress_Up");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsPress_Up_Params IsPress_Up_Params;
	memset(&IsPress_Up_Params, 0, sizeof(IsPress_Up_Params));
	memcpy_s(&IsPress_Up_Params.Player, sizeof(IsPress_Up_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsPress_Up, &IsPress_Up_Params, nullptr);

	return IsPress_Up_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsRep_Right
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37822])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsRep_Right(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRep_Right = nullptr;

	if (!uFnIsRep_Right)
	{
		uFnIsRep_Right = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsRep_Right");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsRep_Right_Params IsRep_Right_Params;
	memset(&IsRep_Right_Params, 0, sizeof(IsRep_Right_Params));
	memcpy_s(&IsRep_Right_Params.Player, sizeof(IsRep_Right_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRep_Right, &IsRep_Right_Params, nullptr);

	return IsRep_Right_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsRep_Left
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37821])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsRep_Left(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRep_Left = nullptr;

	if (!uFnIsRep_Left)
	{
		uFnIsRep_Left = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsRep_Left");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsRep_Left_Params IsRep_Left_Params;
	memset(&IsRep_Left_Params, 0, sizeof(IsRep_Left_Params));
	memcpy_s(&IsRep_Left_Params.Player, sizeof(IsRep_Left_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRep_Left, &IsRep_Left_Params, nullptr);

	return IsRep_Left_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsRep_Down
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37819])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsRep_Down(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRep_Down = nullptr;

	if (!uFnIsRep_Down)
	{
		uFnIsRep_Down = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsRep_Down");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsRep_Down_Params IsRep_Down_Params;
	memset(&IsRep_Down_Params, 0, sizeof(IsRep_Down_Params));
	memcpy_s(&IsRep_Down_Params.Player, sizeof(IsRep_Down_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRep_Down, &IsRep_Down_Params, nullptr);

	return IsRep_Down_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsRep_Up
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37823])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::IsRep_Up(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRep_Up = nullptr;

	if (!uFnIsRep_Up)
	{
		uFnIsRep_Up = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsRep_Up");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsRep_Up_Params IsRep_Up_Params;
	memset(&IsRep_Up_Params, 0, sizeof(IsRep_Up_Params));
	memcpy_s(&IsRep_Up_Params.Player, sizeof(IsRep_Up_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRep_Up, &IsRep_Up_Params, nullptr);

	return IsRep_Up_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.EnableOnUpdateDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36671])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::EnableOnUpdateDraw()
{
	static UFunction* uFnEnableOnUpdateDraw = nullptr;

	if (!uFnEnableOnUpdateDraw)
	{
		uFnEnableOnUpdateDraw = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.EnableOnUpdateDraw");
	}

	UREDGfxMoviePlayer_Menu_Base_execEnableOnUpdateDraw_Params EnableOnUpdateDraw_Params;
	memset(&EnableOnUpdateDraw_Params, 0, sizeof(EnableOnUpdateDraw_Params));

	this->ProcessEvent(uFnEnableOnUpdateDraw, &EnableOnUpdateDraw_Params, nullptr);

	return EnableOnUpdateDraw_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsSceneChanging
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37836])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsSceneChanging()
{
	static UFunction* uFnIsSceneChanging = nullptr;

	if (!uFnIsSceneChanging)
	{
		uFnIsSceneChanging = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsSceneChanging");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsSceneChanging_Params IsSceneChanging_Params;
	memset(&IsSceneChanging_Params, 0, sizeof(IsSceneChanging_Params));

	this->ProcessEvent(uFnIsSceneChanging, &IsSceneChanging_Params, nullptr);

	return IsSceneChanging_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.SceneChangeRequest
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39469])
// Parameter Info:
// EUE_SCENE_ID                   SceneID                        (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::SceneChangeRequest(EUE_SCENE_ID SceneID)
{
	static UFunction* uFnSceneChangeRequest = nullptr;

	if (!uFnSceneChangeRequest)
	{
		uFnSceneChangeRequest = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.SceneChangeRequest");
	}

	UREDGfxMoviePlayer_Menu_Base_execSceneChangeRequest_Params SceneChangeRequest_Params;
	memset(&SceneChangeRequest_Params, 0, sizeof(SceneChangeRequest_Params));
	memcpy_s(&SceneChangeRequest_Params.SceneID, sizeof(SceneChangeRequest_Params.SceneID), &SceneID, sizeof(SceneID));

	this->ProcessEvent(uFnSceneChangeRequest, &SceneChangeRequest_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.GetMainQuadrant
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37094])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_Menu_Base::GetMainQuadrant()
{
	static UFunction* uFnGetMainQuadrant = nullptr;

	if (!uFnGetMainQuadrant)
	{
		uFnGetMainQuadrant = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.GetMainQuadrant");
	}

	UREDGfxMoviePlayer_Menu_Base_execGetMainQuadrant_Params GetMainQuadrant_Params;
	memset(&GetMainQuadrant_Params, 0, sizeof(GetMainQuadrant_Params));

	this->ProcessEvent(uFnGetMainQuadrant, &GetMainQuadrant_Params, nullptr);

	return GetMainQuadrant_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsEventMode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37656])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsEventMode()
{
	static UFunction* uFnIsEventMode = nullptr;

	if (!uFnIsEventMode)
	{
		uFnIsEventMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsEventMode");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsEventMode_Params IsEventMode_Params;
	memset(&IsEventMode_Params, 0, sizeof(IsEventMode_Params));

	this->ProcessEvent(uFnIsEventMode, &IsEventMode_Params, nullptr);

	return IsEventMode_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.SetNewChallengerEnableFlag
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39782])
// Parameter Info:
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::SetNewChallengerEnableFlag(bool flag)
{
	static UFunction* uFnSetNewChallengerEnableFlag = nullptr;

	if (!uFnSetNewChallengerEnableFlag)
	{
		uFnSetNewChallengerEnableFlag = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.SetNewChallengerEnableFlag");
	}

	UREDGfxMoviePlayer_Menu_Base_execSetNewChallengerEnableFlag_Params SetNewChallengerEnableFlag_Params;
	memset(&SetNewChallengerEnableFlag_Params, 0, sizeof(SetNewChallengerEnableFlag_Params));
	SetNewChallengerEnableFlag_Params.flag = flag;

	this->ProcessEvent(uFnSetNewChallengerEnableFlag, &SetNewChallengerEnableFlag_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.Initialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13305])
// Parameter Info:

void UREDGfxMoviePlayer_Menu_Base::Initialize()
{
	static UFunction* uFnInitialize = nullptr;

	if (!uFnInitialize)
	{
		uFnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.Initialize");
	}

	UREDGfxMoviePlayer_Menu_Base_execInitialize_Params Initialize_Params;
	memset(&Initialize_Params, 0, sizeof(Initialize_Params));

	this->ProcessEvent(uFnInitialize, &Initialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.IsEditor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13918])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_Menu_Base::IsEditor()
{
	static UFunction* uFnIsEditor = nullptr;

	if (!uFnIsEditor)
	{
		uFnIsEditor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.IsEditor");
	}

	UREDGfxMoviePlayer_Menu_Base_execIsEditor_Params IsEditor_Params;
	memset(&IsEditor_Params, 0, sizeof(IsEditor_Params));

	this->ProcessEvent(uFnIsEditor, &IsEditor_Params, nullptr);

	return IsEditor_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.GetState
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_Menu_Base::GetState()
{
	static UFunction* uFnGetState = nullptr;

	if (!uFnGetState)
	{
		uFnGetState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.GetState");
	}

	UREDGfxMoviePlayer_Menu_Base_execGetState_Params GetState_Params;
	memset(&GetState_Params, 0, sizeof(GetState_Params));

	this->ProcessEvent(uFnGetState, &GetState_Params, nullptr);

	return GetState_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.SetStateQuick
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        _State                         (CPF_Parm)

bool UREDGfxMoviePlayer_Menu_Base::SetStateQuick(int32_t _State)
{
	static UFunction* uFnSetStateQuick = nullptr;

	if (!uFnSetStateQuick)
	{
		uFnSetStateQuick = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.SetStateQuick");
	}

	UREDGfxMoviePlayer_Menu_Base_execSetStateQuick_Params SetStateQuick_Params;
	memset(&SetStateQuick_Params, 0, sizeof(SetStateQuick_Params));
	memcpy_s(&SetStateQuick_Params._State, sizeof(SetStateQuick_Params._State), &_State, sizeof(_State));

	this->ProcessEvent(uFnSetStateQuick, &SetStateQuick_Params, nullptr);

	return SetStateQuick_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_Menu_Base.SetState
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        _State                         (CPF_Parm)

void UREDGfxMoviePlayer_Menu_Base::SetState(int32_t _State)
{
	static UFunction* uFnSetState = nullptr;

	if (!uFnSetState)
	{
		uFnSetState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_Menu_Base.SetState");
	}

	UREDGfxMoviePlayer_Menu_Base_execSetState_Params SetState_Params;
	memset(&SetState_Params, 0, sizeof(SetState_Params));
	memcpy_s(&SetState_Params._State, sizeof(SetState_Params._State), &_State, sizeof(_State));

	this->ProcessEvent(uFnSetState, &SetState_Params, nullptr);
};

// Function REDGame.Menu_DebugCharaSelect.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UMenu_DebugCharaSelect::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.Menu_DebugCharaSelect.OnDrawUpdate");
	}

	UMenu_DebugCharaSelect_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.Menu_DebugCharaSelect.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UMenu_DebugCharaSelect::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.Menu_DebugCharaSelect.OnUpdate");
	}

	UMenu_DebugCharaSelect_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.Menu_DebugCharaSelect.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UMenu_DebugCharaSelect::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.Menu_DebugCharaSelect.OnClose");
	}

	UMenu_DebugCharaSelect_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.Menu_DebugCharaSelect.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UMenu_DebugCharaSelect::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.Menu_DebugCharaSelect.OnInitialize");
	}

	UMenu_DebugCharaSelect_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.Menu_DebugCharaSelect.UpdateDrawMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40651])
// Parameter Info:

void UMenu_DebugCharaSelect::UpdateDrawMenu()
{
	static UFunction* uFnUpdateDrawMenu = nullptr;

	if (!uFnUpdateDrawMenu)
	{
		uFnUpdateDrawMenu = UFunction::FindFunction("Function REDGame.Menu_DebugCharaSelect.UpdateDrawMenu");
	}

	UMenu_DebugCharaSelect_execUpdateDrawMenu_Params UpdateDrawMenu_Params;
	memset(&UpdateDrawMenu_Params, 0, sizeof(UpdateDrawMenu_Params));

	this->ProcessEvent(uFnUpdateDrawMenu, &UpdateDrawMenu_Params, nullptr);
};

// Function REDGame.Menu_DebugCharaSelect.UpdateMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40782])
// Parameter Info:

void UMenu_DebugCharaSelect::UpdateMenu()
{
	static UFunction* uFnUpdateMenu = nullptr;

	if (!uFnUpdateMenu)
	{
		uFnUpdateMenu = UFunction::FindFunction("Function REDGame.Menu_DebugCharaSelect.UpdateMenu");
	}

	UMenu_DebugCharaSelect_execUpdateMenu_Params UpdateMenu_Params;
	memset(&UpdateMenu_Params, 0, sizeof(UpdateMenu_Params));

	this->ProcessEvent(uFnUpdateMenu, &UpdateMenu_Params, nullptr);
};

// Function REDGame.Menu_DebugCharaSelect.FinishMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36862])
// Parameter Info:

void UMenu_DebugCharaSelect::FinishMenu()
{
	static UFunction* uFnFinishMenu = nullptr;

	if (!uFnFinishMenu)
	{
		uFnFinishMenu = UFunction::FindFunction("Function REDGame.Menu_DebugCharaSelect.FinishMenu");
	}

	UMenu_DebugCharaSelect_execFinishMenu_Params FinishMenu_Params;
	memset(&FinishMenu_Params, 0, sizeof(FinishMenu_Params));

	this->ProcessEvent(uFnFinishMenu, &FinishMenu_Params, nullptr);
};

// Function REDGame.Menu_DebugCharaSelect.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UMenu_DebugCharaSelect::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.Menu_DebugCharaSelect.InitMenu");
	}

	UMenu_DebugCharaSelect_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBriefing.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuBriefing::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBriefing.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuBriefing_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBriefing.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuBriefing::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBriefing.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuBriefing_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBriefing.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuBriefing::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBriefing.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuBriefing_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBriefing.UpdateDrawMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40651])
// Parameter Info:

void UREDGfxMoviePlayer_MenuBriefing::UpdateDrawMenu()
{
	static UFunction* uFnUpdateDrawMenu = nullptr;

	if (!uFnUpdateDrawMenu)
	{
		uFnUpdateDrawMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBriefing.UpdateDrawMenu");
	}

	UREDGfxMoviePlayer_MenuBriefing_execUpdateDrawMenu_Params UpdateDrawMenu_Params;
	memset(&UpdateDrawMenu_Params, 0, sizeof(UpdateDrawMenu_Params));

	this->ProcessEvent(uFnUpdateDrawMenu, &UpdateDrawMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBriefing.UpdateMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40782])
// Parameter Info:

void UREDGfxMoviePlayer_MenuBriefing::UpdateMenu()
{
	static UFunction* uFnUpdateMenu = nullptr;

	if (!uFnUpdateMenu)
	{
		uFnUpdateMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBriefing.UpdateMenu");
	}

	UREDGfxMoviePlayer_MenuBriefing_execUpdateMenu_Params UpdateMenu_Params;
	memset(&UpdateMenu_Params, 0, sizeof(UpdateMenu_Params));

	this->ProcessEvent(uFnUpdateMenu, &UpdateMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBriefing.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UREDGfxMoviePlayer_MenuBriefing::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBriefing.InitMenu");
	}

	UREDGfxMoviePlayer_MenuBriefing_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.DebugGetCharaModelOffset
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36422])
// Parameter Info:
// struct FVector                 pos                            (CPF_Parm | CPF_OutParm)
// float                          Scale                          (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::DebugGetCharaModelOffset(struct FVector& pos, float& Scale)
{
	static UFunction* uFnDebugGetCharaModelOffset = nullptr;

	if (!uFnDebugGetCharaModelOffset)
	{
		uFnDebugGetCharaModelOffset = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.DebugGetCharaModelOffset");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execDebugGetCharaModelOffset_Params DebugGetCharaModelOffset_Params;
	memset(&DebugGetCharaModelOffset_Params, 0, sizeof(DebugGetCharaModelOffset_Params));
	memcpy_s(&DebugGetCharaModelOffset_Params.pos, sizeof(DebugGetCharaModelOffset_Params.pos), &pos, sizeof(pos));
	memcpy_s(&DebugGetCharaModelOffset_Params.Scale, sizeof(DebugGetCharaModelOffset_Params.Scale), &Scale, sizeof(Scale));

	this->ProcessEvent(uFnDebugGetCharaModelOffset, &DebugGetCharaModelOffset_Params, nullptr);

	memcpy_s(&pos, sizeof(pos), &DebugGetCharaModelOffset_Params.pos, sizeof(DebugGetCharaModelOffset_Params.pos));
	memcpy_s(&Scale, sizeof(Scale), &DebugGetCharaModelOffset_Params.Scale, sizeof(DebugGetCharaModelOffset_Params.Scale));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.UpdateDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40652])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::UpdateDrawNative()
{
	static UFunction* uFnUpdateDrawNative = nullptr;

	if (!uFnUpdateDrawNative)
	{
		uFnUpdateDrawNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.UpdateDrawNative");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execUpdateDrawNative_Params UpdateDrawNative_Params;
	memset(&UpdateDrawNative_Params, 0, sizeof(UpdateDrawNative_Params));

	this->ProcessEvent(uFnUpdateDrawNative, &UpdateDrawNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.UpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40790])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::UpdateNative()
{
	static UFunction* uFnUpdateNative = nullptr;

	if (!uFnUpdateNative)
	{
		uFnUpdateNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.UpdateNative");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execUpdateNative_Params UpdateNative_Params;
	memset(&UpdateNative_Params, 0, sizeof(UpdateNative_Params));

	this->ProcessEvent(uFnUpdateNative, &UpdateNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.InitializeNative");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsNewQuestExist
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37748])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsNewQuestExist(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsNewQuestExist = nullptr;

	if (!uFnIsNewQuestExist)
	{
		uFnIsNewQuestExist = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsNewQuestExist");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsNewQuestExist_Params IsNewQuestExist_Params;
	memset(&IsNewQuestExist_Params, 0, sizeof(IsNewQuestExist_Params));
	memcpy_s(&IsNewQuestExist_Params.Player, sizeof(IsNewQuestExist_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsNewQuestExist, &IsNewQuestExist_Params, nullptr);

	return IsNewQuestExist_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CharaID_Int
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36146])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::CharaID_Int(const class FString& CharaID)
{
	static UFunction* uFnCharaID_Int = nullptr;

	if (!uFnCharaID_Int)
	{
		uFnCharaID_Int = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CharaID_Int");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execCharaID_Int_Params CharaID_Int_Params;
	memset(&CharaID_Int_Params, 0, sizeof(CharaID_Int_Params));
	memcpy_s(&CharaID_Int_Params.CharaID, sizeof(CharaID_Int_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnCharaID_Int, &CharaID_Int_Params, nullptr);

	return CharaID_Int_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMysetData
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37115])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FCharaSel_MysetData     mySetData                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectBase::GetMysetData(EUE_PLAYER_ID Player, struct FCharaSel_MysetData& mySetData)
{
	static UFunction* uFnGetMysetData = nullptr;

	if (!uFnGetMysetData)
	{
		uFnGetMysetData = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMysetData");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetMysetData_Params GetMysetData_Params;
	memset(&GetMysetData_Params, 0, sizeof(GetMysetData_Params));
	memcpy_s(&GetMysetData_Params.Player, sizeof(GetMysetData_Params.Player), &Player, sizeof(Player));
	memcpy_s(&GetMysetData_Params.mySetData, sizeof(GetMysetData_Params.mySetData), &mySetData, sizeof(mySetData));

	this->ProcessEvent(uFnGetMysetData, &GetMysetData_Params, nullptr);

	memcpy_s(&mySetData, sizeof(mySetData), &GetMysetData_Params.mySetData, sizeof(GetMysetData_Params.mySetData));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetCardStyleType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37016])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetCardStyleType(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetCardStyleType = nullptr;

	if (!uFnGetCardStyleType)
	{
		uFnGetCardStyleType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetCardStyleType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetCardStyleType_Params GetCardStyleType_Params;
	memset(&GetCardStyleType_Params, 0, sizeof(GetCardStyleType_Params));
	memcpy_s(&GetCardStyleType_Params.Player, sizeof(GetCardStyleType_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetCardStyleType, &GetCardStyleType_Params, nullptr);

	return GetCardStyleType_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetCardStyleType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39704])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SetCardStyleType(EUE_PLAYER_ID Player, int32_t Type)
{
	static UFunction* uFnSetCardStyleType = nullptr;

	if (!uFnSetCardStyleType)
	{
		uFnSetCardStyleType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetCardStyleType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSetCardStyleType_Params SetCardStyleType_Params;
	memset(&SetCardStyleType_Params, 0, sizeof(SetCardStyleType_Params));
	memcpy_s(&SetCardStyleType_Params.Player, sizeof(SetCardStyleType_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCardStyleType_Params.Type, sizeof(SetCardStyleType_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnSetCardStyleType, &SetCardStyleType_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsSkipAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37860])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsSkipAll(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsSkipAll = nullptr;

	if (!uFnIsSkipAll)
	{
		uFnIsSkipAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsSkipAll");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsSkipAll_Params IsSkipAll_Params;
	memset(&IsSkipAll_Params, 0, sizeof(IsSkipAll_Params));
	memcpy_s(&IsSkipAll_Params.Player, sizeof(IsSkipAll_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsSkipAll, &IsSkipAll_Params, nullptr);

	return IsSkipAll_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.PopUpTimer_OpenOK
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39073])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  messegaID                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Time                           (CPF_Parm)
// uint32_t                       isRookie                       (CPF_OptionalParm | CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::PopUpTimer_OpenOK(EUE_PLAYER_ID Player, const class FString& messegaID, int32_t Time, bool isRookie)
{
	static UFunction* uFnPopUpTimer_OpenOK = nullptr;

	if (!uFnPopUpTimer_OpenOK)
	{
		uFnPopUpTimer_OpenOK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.PopUpTimer_OpenOK");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execPopUpTimer_OpenOK_Params PopUpTimer_OpenOK_Params;
	memset(&PopUpTimer_OpenOK_Params, 0, sizeof(PopUpTimer_OpenOK_Params));
	memcpy_s(&PopUpTimer_OpenOK_Params.Player, sizeof(PopUpTimer_OpenOK_Params.Player), &Player, sizeof(Player));
	memcpy_s(&PopUpTimer_OpenOK_Params.messegaID, sizeof(PopUpTimer_OpenOK_Params.messegaID), &messegaID, sizeof(messegaID));
	memcpy_s(&PopUpTimer_OpenOK_Params.Time, sizeof(PopUpTimer_OpenOK_Params.Time), &Time, sizeof(Time));
	PopUpTimer_OpenOK_Params.isRookie = isRookie;

	this->ProcessEvent(uFnPopUpTimer_OpenOK, &PopUpTimer_OpenOK_Params, nullptr);

	return PopUpTimer_OpenOK_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.ExternalMOMSetEnemyCursor
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectBase::eventExternalMOMSetEnemyCursor(const class FString& CharaID)
{
	static UFunction* uFnExternalMOMSetEnemyCursor = nullptr;

	if (!uFnExternalMOMSetEnemyCursor)
	{
		uFnExternalMOMSetEnemyCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.ExternalMOMSetEnemyCursor");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_eventExternalMOMSetEnemyCursor_Params ExternalMOMSetEnemyCursor_Params;
	memset(&ExternalMOMSetEnemyCursor_Params, 0, sizeof(ExternalMOMSetEnemyCursor_Params));
	memcpy_s(&ExternalMOMSetEnemyCursor_Params.CharaID, sizeof(ExternalMOMSetEnemyCursor_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnExternalMOMSetEnemyCursor, &ExternalMOMSetEnemyCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMBonus
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37728])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsMOMBonus(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsMOMBonus = nullptr;

	if (!uFnIsMOMBonus)
	{
		uFnIsMOMBonus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMBonus");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsMOMBonus_Params IsMOMBonus_Params;
	memset(&IsMOMBonus_Params, 0, sizeof(IsMOMBonus_Params));
	memcpy_s(&IsMOMBonus_Params.Player, sizeof(IsMOMBonus_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsMOMBonus, &IsMOMBonus_Params, nullptr);

	return IsMOMBonus_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMSelectableChara
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37734])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsMOMSelectableChara(const class FString& CharaID)
{
	static UFunction* uFnIsMOMSelectableChara = nullptr;

	if (!uFnIsMOMSelectableChara)
	{
		uFnIsMOMSelectableChara = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMSelectableChara");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsMOMSelectableChara_Params IsMOMSelectableChara_Params;
	memset(&IsMOMSelectableChara_Params, 0, sizeof(IsMOMSelectableChara_Params));
	memcpy_s(&IsMOMSelectableChara_Params.CharaID, sizeof(IsMOMSelectableChara_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnIsMOMSelectableChara, &IsMOMSelectableChara_Params, nullptr);

	return IsMOMSelectableChara_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMTrigOK
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37737])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsMOMTrigOK(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsMOMTrigOK = nullptr;

	if (!uFnIsMOMTrigOK)
	{
		uFnIsMOMTrigOK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMTrigOK");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsMOMTrigOK_Params IsMOMTrigOK_Params;
	memset(&IsMOMTrigOK_Params, 0, sizeof(IsMOMTrigOK_Params));
	memcpy_s(&IsMOMTrigOK_Params.Player, sizeof(IsMOMTrigOK_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsMOMTrigOK, &IsMOMTrigOK_Params, nullptr);

	return IsMOMTrigOK_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSetPresetType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38403])
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::MOMSetPresetType(int32_t Type)
{
	static UFunction* uFnMOMSetPresetType = nullptr;

	if (!uFnMOMSetPresetType)
	{
		uFnMOMSetPresetType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSetPresetType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMSetPresetType_Params MOMSetPresetType_Params;
	memset(&MOMSetPresetType_Params, 0, sizeof(MOMSetPresetType_Params));
	memcpy_s(&MOMSetPresetType_Params.Type, sizeof(MOMSetPresetType_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnMOMSetPresetType, &MOMSetPresetType_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMOMStarType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37113])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetMOMStarType(const class FString& CharaID)
{
	static UFunction* uFnGetMOMStarType = nullptr;

	if (!uFnGetMOMStarType)
	{
		uFnGetMOMStarType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMOMStarType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetMOMStarType_Params GetMOMStarType_Params;
	memset(&GetMOMStarType_Params, 0, sizeof(GetMOMStarType_Params));
	memcpy_s(&GetMOMStarType_Params.CharaID, sizeof(GetMOMStarType_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetMOMStarType, &GetMOMStarType_Params, nullptr);

	return GetMOMStarType_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMGetMedalYama
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[38384])
// Parameter Info:
// float                          baseVal                        (CPF_Parm | CPF_OutParm)
// float                          targetVal                      (CPF_Parm | CPF_OutParm)
// int32_t                        Level                          (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::MOMGetMedalYama(float& baseVal, float& targetVal, int32_t& Level)
{
	static UFunction* uFnMOMGetMedalYama = nullptr;

	if (!uFnMOMGetMedalYama)
	{
		uFnMOMGetMedalYama = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMGetMedalYama");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMGetMedalYama_Params MOMGetMedalYama_Params;
	memset(&MOMGetMedalYama_Params, 0, sizeof(MOMGetMedalYama_Params));
	memcpy_s(&MOMGetMedalYama_Params.baseVal, sizeof(MOMGetMedalYama_Params.baseVal), &baseVal, sizeof(baseVal));
	memcpy_s(&MOMGetMedalYama_Params.targetVal, sizeof(MOMGetMedalYama_Params.targetVal), &targetVal, sizeof(targetVal));
	memcpy_s(&MOMGetMedalYama_Params.Level, sizeof(MOMGetMedalYama_Params.Level), &Level, sizeof(Level));

	this->ProcessEvent(uFnMOMGetMedalYama, &MOMGetMedalYama_Params, nullptr);

	memcpy_s(&baseVal, sizeof(baseVal), &MOMGetMedalYama_Params.baseVal, sizeof(MOMGetMedalYama_Params.baseVal));
	memcpy_s(&targetVal, sizeof(targetVal), &MOMGetMedalYama_Params.targetVal, sizeof(MOMGetMedalYama_Params.targetVal));
	memcpy_s(&Level, sizeof(Level), &MOMGetMedalYama_Params.Level, sizeof(MOMGetMedalYama_Params.Level));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMGetTimeCount
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38385])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::MOMGetTimeCount()
{
	static UFunction* uFnMOMGetTimeCount = nullptr;

	if (!uFnMOMGetTimeCount)
	{
		uFnMOMGetTimeCount = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMGetTimeCount");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMGetTimeCount_Params MOMGetTimeCount_Params;
	memset(&MOMGetTimeCount_Params, 0, sizeof(MOMGetTimeCount_Params));

	this->ProcessEvent(uFnMOMGetTimeCount, &MOMGetTimeCount_Params, nullptr);

	return MOMGetTimeCount_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMGetBGColorIndex
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38382])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::MOMGetBGColorIndex()
{
	static UFunction* uFnMOMGetBGColorIndex = nullptr;

	if (!uFnMOMGetBGColorIndex)
	{
		uFnMOMGetBGColorIndex = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMGetBGColorIndex");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMGetBGColorIndex_Params MOMGetBGColorIndex_Params;
	memset(&MOMGetBGColorIndex_Params, 0, sizeof(MOMGetBGColorIndex_Params));

	this->ProcessEvent(uFnMOMGetBGColorIndex, &MOMGetBGColorIndex_Params, nullptr);

	return MOMGetBGColorIndex_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMGetEnemyCharaID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38383])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuCharaSelectBase::MOMGetEnemyCharaID()
{
	static UFunction* uFnMOMGetEnemyCharaID = nullptr;

	if (!uFnMOMGetEnemyCharaID)
	{
		uFnMOMGetEnemyCharaID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMGetEnemyCharaID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMGetEnemyCharaID_Params MOMGetEnemyCharaID_Params;
	memset(&MOMGetEnemyCharaID_Params, 0, sizeof(MOMGetEnemyCharaID_Params));

	this->ProcessEvent(uFnMOMGetEnemyCharaID, &MOMGetEnemyCharaID_Params, nullptr);

	return MOMGetEnemyCharaID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSetEnemyCharaID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38402])
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectBase::MOMSetEnemyCharaID(const class FString& CharaID)
{
	static UFunction* uFnMOMSetEnemyCharaID = nullptr;

	if (!uFnMOMSetEnemyCharaID)
	{
		uFnMOMSetEnemyCharaID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSetEnemyCharaID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMSetEnemyCharaID_Params MOMSetEnemyCharaID_Params;
	memset(&MOMSetEnemyCharaID_Params, 0, sizeof(MOMSetEnemyCharaID_Params));
	memcpy_s(&MOMSetEnemyCharaID_Params.CharaID, sizeof(MOMSetEnemyCharaID_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnMOMSetEnemyCharaID, &MOMSetEnemyCharaID_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMStageSelectCancel
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37735])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsMOMStageSelectCancel()
{
	static UFunction* uFnIsMOMStageSelectCancel = nullptr;

	if (!uFnIsMOMStageSelectCancel)
	{
		uFnIsMOMStageSelectCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMStageSelectCancel");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsMOMStageSelectCancel_Params IsMOMStageSelectCancel_Params;
	memset(&IsMOMStageSelectCancel_Params, 0, sizeof(IsMOMStageSelectCancel_Params));

	this->ProcessEvent(uFnIsMOMStageSelectCancel, &IsMOMStageSelectCancel_Params, nullptr);

	return IsMOMStageSelectCancel_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMStageSelect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38405])
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectBase::MOMStageSelect(const class FString& CharaID)
{
	static UFunction* uFnMOMStageSelect = nullptr;

	if (!uFnMOMStageSelect)
	{
		uFnMOMStageSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMStageSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMStageSelect_Params MOMStageSelect_Params;
	memset(&MOMStageSelect_Params, 0, sizeof(MOMStageSelect_Params));
	memcpy_s(&MOMStageSelect_Params.CharaID, sizeof(MOMStageSelect_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnMOMStageSelect, &MOMStageSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMMenuCloseAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38394])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::MOMMenuCloseAll()
{
	static UFunction* uFnMOMMenuCloseAll = nullptr;

	if (!uFnMOMMenuCloseAll)
	{
		uFnMOMMenuCloseAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMMenuCloseAll");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMMenuCloseAll_Params MOMMenuCloseAll_Params;
	memset(&MOMMenuCloseAll_Params, 0, sizeof(MOMMenuCloseAll_Params));

	this->ProcessEvent(uFnMOMMenuCloseAll, &MOMMenuCloseAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMStarted
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37736])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsMOMStarted()
{
	static UFunction* uFnIsMOMStarted = nullptr;

	if (!uFnIsMOMStarted)
	{
		uFnIsMOMStarted = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMStarted");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsMOMStarted_Params IsMOMStarted_Params;
	memset(&IsMOMStarted_Params, 0, sizeof(IsMOMStarted_Params));

	this->ProcessEvent(uFnIsMOMStarted, &IsMOMStarted_Params, nullptr);

	return IsMOMStarted_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.FinishMOMHelpDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36863])
// Parameter Info:
// ECHARASEL_MOMHELP_FLAG         flag                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::FinishMOMHelpDisp(ECHARASEL_MOMHELP_FLAG flag)
{
	static UFunction* uFnFinishMOMHelpDisp = nullptr;

	if (!uFnFinishMOMHelpDisp)
	{
		uFnFinishMOMHelpDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.FinishMOMHelpDisp");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execFinishMOMHelpDisp_Params FinishMOMHelpDisp_Params;
	memset(&FinishMOMHelpDisp_Params, 0, sizeof(FinishMOMHelpDisp_Params));
	memcpy_s(&FinishMOMHelpDisp_Params.flag, sizeof(FinishMOMHelpDisp_Params.flag), &flag, sizeof(flag));

	this->ProcessEvent(uFnFinishMOMHelpDisp, &FinishMOMHelpDisp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMHelpDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37730])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// ECHARASEL_MOMHELP_FLAG         flag                           (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsMOMHelpDisp(ECHARASEL_MOMHELP_FLAG flag)
{
	static UFunction* uFnIsMOMHelpDisp = nullptr;

	if (!uFnIsMOMHelpDisp)
	{
		uFnIsMOMHelpDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMHelpDisp");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsMOMHelpDisp_Params IsMOMHelpDisp_Params;
	memset(&IsMOMHelpDisp_Params, 0, sizeof(IsMOMHelpDisp_Params));
	memcpy_s(&IsMOMHelpDisp_Params.flag, sizeof(IsMOMHelpDisp_Params.flag), &flag, sizeof(flag));

	this->ProcessEvent(uFnIsMOMHelpDisp, &IsMOMHelpDisp_Params, nullptr);

	return IsMOMHelpDisp_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMPresetDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37733])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsMOMPresetDisp()
{
	static UFunction* uFnIsMOMPresetDisp = nullptr;

	if (!uFnIsMOMPresetDisp)
	{
		uFnIsMOMPresetDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsMOMPresetDisp");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsMOMPresetDisp_Params IsMOMPresetDisp_Params;
	memset(&IsMOMPresetDisp_Params, 0, sizeof(IsMOMPresetDisp_Params));

	this->ProcessEvent(uFnIsMOMPresetDisp, &IsMOMPresetDisp_Params, nullptr);

	return IsMOMPresetDisp_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSceneDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38397])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::MOMSceneDraw()
{
	static UFunction* uFnMOMSceneDraw = nullptr;

	if (!uFnMOMSceneDraw)
	{
		uFnMOMSceneDraw = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSceneDraw");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMSceneDraw_Params MOMSceneDraw_Params;
	memset(&MOMSceneDraw_Params, 0, sizeof(MOMSceneDraw_Params));

	this->ProcessEvent(uFnMOMSceneDraw, &MOMSceneDraw_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSceneUpdate
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38399])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::MOMSceneUpdate()
{
	static UFunction* uFnMOMSceneUpdate = nullptr;

	if (!uFnMOMSceneUpdate)
	{
		uFnMOMSceneUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSceneUpdate");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMSceneUpdate_Params MOMSceneUpdate_Params;
	memset(&MOMSceneUpdate_Params, 0, sizeof(MOMSceneUpdate_Params));

	this->ProcessEvent(uFnMOMSceneUpdate, &MOMSceneUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSceneInit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38398])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::MOMSceneInit()
{
	static UFunction* uFnMOMSceneInit = nullptr;

	if (!uFnMOMSceneInit)
	{
		uFnMOMSceneInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.MOMSceneInit");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execMOMSceneInit_Params MOMSceneInit_Params;
	memset(&MOMSceneInit_Params, 0, sizeof(MOMSceneInit_Params));

	this->ProcessEvent(uFnMOMSceneInit, &MOMSceneInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetupArcadeStoryDrama
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39818])
// Parameter Info:
// EBATTLE_DRAMA_ID               BattleDramaID                  (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SetupArcadeStoryDrama(EBATTLE_DRAMA_ID BattleDramaID)
{
	static UFunction* uFnSetupArcadeStoryDrama = nullptr;

	if (!uFnSetupArcadeStoryDrama)
	{
		uFnSetupArcadeStoryDrama = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetupArcadeStoryDrama");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSetupArcadeStoryDrama_Params SetupArcadeStoryDrama_Params;
	memset(&SetupArcadeStoryDrama_Params, 0, sizeof(SetupArcadeStoryDrama_Params));
	memcpy_s(&SetupArcadeStoryDrama_Params.BattleDramaID, sizeof(SetupArcadeStoryDrama_Params.BattleDramaID), &BattleDramaID, sizeof(BattleDramaID));

	this->ProcessEvent(uFnSetupArcadeStoryDrama, &SetupArcadeStoryDrama_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SaveMemoryCostumeID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39460])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        CostumeID                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SaveMemoryCostumeID(EUE_PLAYER_ID Player, const class FString& CharaID, int32_t CostumeID)
{
	static UFunction* uFnSaveMemoryCostumeID = nullptr;

	if (!uFnSaveMemoryCostumeID)
	{
		uFnSaveMemoryCostumeID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SaveMemoryCostumeID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSaveMemoryCostumeID_Params SaveMemoryCostumeID_Params;
	memset(&SaveMemoryCostumeID_Params, 0, sizeof(SaveMemoryCostumeID_Params));
	memcpy_s(&SaveMemoryCostumeID_Params.Player, sizeof(SaveMemoryCostumeID_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SaveMemoryCostumeID_Params.CharaID, sizeof(SaveMemoryCostumeID_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&SaveMemoryCostumeID_Params.CostumeID, sizeof(SaveMemoryCostumeID_Params.CostumeID), &CostumeID, sizeof(CostumeID));

	this->ProcessEvent(uFnSaveMemoryCostumeID, &SaveMemoryCostumeID_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SaveMemoryStylish
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39461])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        Stylish                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SaveMemoryStylish(EUE_PLAYER_ID Player, int32_t Stylish)
{
	static UFunction* uFnSaveMemoryStylish = nullptr;

	if (!uFnSaveMemoryStylish)
	{
		uFnSaveMemoryStylish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SaveMemoryStylish");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSaveMemoryStylish_Params SaveMemoryStylish_Params;
	memset(&SaveMemoryStylish_Params, 0, sizeof(SaveMemoryStylish_Params));
	memcpy_s(&SaveMemoryStylish_Params.Player, sizeof(SaveMemoryStylish_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SaveMemoryStylish_Params.Stylish, sizeof(SaveMemoryStylish_Params.Stylish), &Stylish, sizeof(Stylish));

	this->ProcessEvent(uFnSaveMemoryStylish, &SaveMemoryStylish_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryCostumeID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37101])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetMemoryCostumeID(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnGetMemoryCostumeID = nullptr;

	if (!uFnGetMemoryCostumeID)
	{
		uFnGetMemoryCostumeID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryCostumeID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetMemoryCostumeID_Params GetMemoryCostumeID_Params;
	memset(&GetMemoryCostumeID_Params, 0, sizeof(GetMemoryCostumeID_Params));
	memcpy_s(&GetMemoryCostumeID_Params.Player, sizeof(GetMemoryCostumeID_Params.Player), &Player, sizeof(Player));
	memcpy_s(&GetMemoryCostumeID_Params.CharaID, sizeof(GetMemoryCostumeID_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetMemoryCostumeID, &GetMemoryCostumeID_Params, nullptr);

	return GetMemoryCostumeID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryStylish
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37102])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetMemoryStylish(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetMemoryStylish = nullptr;

	if (!uFnGetMemoryStylish)
	{
		uFnGetMemoryStylish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryStylish");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetMemoryStylish_Params GetMemoryStylish_Params;
	memset(&GetMemoryStylish_Params, 0, sizeof(GetMemoryStylish_Params));
	memcpy_s(&GetMemoryStylish_Params.Player, sizeof(GetMemoryStylish_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetMemoryStylish, &GetMemoryStylish_Params, nullptr);

	return GetMemoryStylish_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SaveMemoryBGIDAndBGMID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39458])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// EUE_BG_ID                      bg_id                          (CPF_Parm)
// EUE_BGM_ID                     BGM_ID                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SaveMemoryBGIDAndBGMID(EUE_PLAYER_ID Player, EUE_BG_ID bg_id, EUE_BGM_ID BGM_ID)
{
	static UFunction* uFnSaveMemoryBGIDAndBGMID = nullptr;

	if (!uFnSaveMemoryBGIDAndBGMID)
	{
		uFnSaveMemoryBGIDAndBGMID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SaveMemoryBGIDAndBGMID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSaveMemoryBGIDAndBGMID_Params SaveMemoryBGIDAndBGMID_Params;
	memset(&SaveMemoryBGIDAndBGMID_Params, 0, sizeof(SaveMemoryBGIDAndBGMID_Params));
	memcpy_s(&SaveMemoryBGIDAndBGMID_Params.Player, sizeof(SaveMemoryBGIDAndBGMID_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SaveMemoryBGIDAndBGMID_Params.bg_id, sizeof(SaveMemoryBGIDAndBGMID_Params.bg_id), &bg_id, sizeof(bg_id));
	memcpy_s(&SaveMemoryBGIDAndBGMID_Params.BGM_ID, sizeof(SaveMemoryBGIDAndBGMID_Params.BGM_ID), &BGM_ID, sizeof(BGM_ID));

	this->ProcessEvent(uFnSaveMemoryBGIDAndBGMID, &SaveMemoryBGIDAndBGMID_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SaveMemoryCharaIDAndColorID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39459])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        ColorID                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SaveMemoryCharaIDAndColorID(EUE_PLAYER_ID Player, const class FString& CharaID, int32_t ColorID)
{
	static UFunction* uFnSaveMemoryCharaIDAndColorID = nullptr;

	if (!uFnSaveMemoryCharaIDAndColorID)
	{
		uFnSaveMemoryCharaIDAndColorID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SaveMemoryCharaIDAndColorID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSaveMemoryCharaIDAndColorID_Params SaveMemoryCharaIDAndColorID_Params;
	memset(&SaveMemoryCharaIDAndColorID_Params, 0, sizeof(SaveMemoryCharaIDAndColorID_Params));
	memcpy_s(&SaveMemoryCharaIDAndColorID_Params.Player, sizeof(SaveMemoryCharaIDAndColorID_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SaveMemoryCharaIDAndColorID_Params.CharaID, sizeof(SaveMemoryCharaIDAndColorID_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&SaveMemoryCharaIDAndColorID_Params.ColorID, sizeof(SaveMemoryCharaIDAndColorID_Params.ColorID), &ColorID, sizeof(ColorID));

	this->ProcessEvent(uFnSaveMemoryCharaIDAndColorID, &SaveMemoryCharaIDAndColorID_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryBGMID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37098])
// Parameter Info:
// EUE_BGM_ID                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

EUE_BGM_ID UREDGfxMoviePlayer_MenuCharaSelectBase::GetMemoryBGMID(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetMemoryBGMID = nullptr;

	if (!uFnGetMemoryBGMID)
	{
		uFnGetMemoryBGMID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryBGMID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetMemoryBGMID_Params GetMemoryBGMID_Params;
	memset(&GetMemoryBGMID_Params, 0, sizeof(GetMemoryBGMID_Params));
	memcpy_s(&GetMemoryBGMID_Params.Player, sizeof(GetMemoryBGMID_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetMemoryBGMID, &GetMemoryBGMID_Params, nullptr);

	return static_cast<EUE_BGM_ID>(GetMemoryBGMID_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryBGID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37097])
// Parameter Info:
// EUE_BG_ID                      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

EUE_BG_ID UREDGfxMoviePlayer_MenuCharaSelectBase::GetMemoryBGID(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetMemoryBGID = nullptr;

	if (!uFnGetMemoryBGID)
	{
		uFnGetMemoryBGID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryBGID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetMemoryBGID_Params GetMemoryBGID_Params;
	memset(&GetMemoryBGID_Params, 0, sizeof(GetMemoryBGID_Params));
	memcpy_s(&GetMemoryBGID_Params.Player, sizeof(GetMemoryBGID_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetMemoryBGID, &GetMemoryBGID_Params, nullptr);

	return static_cast<EUE_BG_ID>(GetMemoryBGID_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryColorID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37100])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetMemoryColorID(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnGetMemoryColorID = nullptr;

	if (!uFnGetMemoryColorID)
	{
		uFnGetMemoryColorID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryColorID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetMemoryColorID_Params GetMemoryColorID_Params;
	memset(&GetMemoryColorID_Params, 0, sizeof(GetMemoryColorID_Params));
	memcpy_s(&GetMemoryColorID_Params.Player, sizeof(GetMemoryColorID_Params.Player), &Player, sizeof(Player));
	memcpy_s(&GetMemoryColorID_Params.CharaID, sizeof(GetMemoryColorID_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetMemoryColorID, &GetMemoryColorID_Params, nullptr);

	return GetMemoryColorID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryCharaID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37099])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

class FString UREDGfxMoviePlayer_MenuCharaSelectBase::GetMemoryCharaID(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetMemoryCharaID = nullptr;

	if (!uFnGetMemoryCharaID)
	{
		uFnGetMemoryCharaID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetMemoryCharaID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetMemoryCharaID_Params GetMemoryCharaID_Params;
	memset(&GetMemoryCharaID_Params, 0, sizeof(GetMemoryCharaID_Params));
	memcpy_s(&GetMemoryCharaID_Params.Player, sizeof(GetMemoryCharaID_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetMemoryCharaID, &GetMemoryCharaID_Params, nullptr);

	return GetMemoryCharaID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsKeyConfig_Active
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37697])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsKeyConfig_Active(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsKeyConfig_Active = nullptr;

	if (!uFnIsKeyConfig_Active)
	{
		uFnIsKeyConfig_Active = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsKeyConfig_Active");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsKeyConfig_Active_Params IsKeyConfig_Active_Params;
	memset(&IsKeyConfig_Active_Params, 0, sizeof(IsKeyConfig_Active_Params));
	memcpy_s(&IsKeyConfig_Active_Params.Player, sizeof(IsKeyConfig_Active_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsKeyConfig_Active, &IsKeyConfig_Active_Params, nullptr);

	return IsKeyConfig_Active_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.KeyConfig_GetType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37953])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::KeyConfig_GetType(EUE_PLAYER_ID Player)
{
	static UFunction* uFnKeyConfig_GetType = nullptr;

	if (!uFnKeyConfig_GetType)
	{
		uFnKeyConfig_GetType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.KeyConfig_GetType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execKeyConfig_GetType_Params KeyConfig_GetType_Params;
	memset(&KeyConfig_GetType_Params, 0, sizeof(KeyConfig_GetType_Params));
	memcpy_s(&KeyConfig_GetType_Params.Player, sizeof(KeyConfig_GetType_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnKeyConfig_GetType, &KeyConfig_GetType_Params, nullptr);

	return KeyConfig_GetType_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.KeyConfig_Open
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37954])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::KeyConfig_Open(EUE_PLAYER_ID Player)
{
	static UFunction* uFnKeyConfig_Open = nullptr;

	if (!uFnKeyConfig_Open)
	{
		uFnKeyConfig_Open = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.KeyConfig_Open");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execKeyConfig_Open_Params KeyConfig_Open_Params;
	memset(&KeyConfig_Open_Params, 0, sizeof(KeyConfig_Open_Params));
	memcpy_s(&KeyConfig_Open_Params.Player, sizeof(KeyConfig_Open_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnKeyConfig_Open, &KeyConfig_Open_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.Network_IsStylish
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[38732])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isRankmatch                    (CPF_Parm)
// uint32_t                       isTournament                   (CPF_Parm)
// uint32_t                       isLobbyBattle                  (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::Network_IsStylish(const class FString& CharaID, bool isRankmatch, bool isTournament, bool isLobbyBattle)
{
	static UFunction* uFnNetwork_IsStylish = nullptr;

	if (!uFnNetwork_IsStylish)
	{
		uFnNetwork_IsStylish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.Network_IsStylish");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execNetwork_IsStylish_Params Network_IsStylish_Params;
	memset(&Network_IsStylish_Params, 0, sizeof(Network_IsStylish_Params));
	memcpy_s(&Network_IsStylish_Params.CharaID, sizeof(Network_IsStylish_Params.CharaID), &CharaID, sizeof(CharaID));
	Network_IsStylish_Params.isRankmatch = isRankmatch;
	Network_IsStylish_Params.isTournament = isTournament;
	Network_IsStylish_Params.isLobbyBattle = isLobbyBattle;

	this->ProcessEvent(uFnNetwork_IsStylish, &Network_IsStylish_Params, nullptr);

	return Network_IsStylish_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.Network_GetCostumeID
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[38731])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isRankmatch                    (CPF_Parm)
// uint32_t                       isTournament                   (CPF_Parm)
// uint32_t                       isLobbyBattle                  (CPF_OptionalParm | CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::Network_GetCostumeID(const class FString& CharaID, bool isRankmatch, bool isTournament, bool isLobbyBattle)
{
	static UFunction* uFnNetwork_GetCostumeID = nullptr;

	if (!uFnNetwork_GetCostumeID)
	{
		uFnNetwork_GetCostumeID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.Network_GetCostumeID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execNetwork_GetCostumeID_Params Network_GetCostumeID_Params;
	memset(&Network_GetCostumeID_Params, 0, sizeof(Network_GetCostumeID_Params));
	memcpy_s(&Network_GetCostumeID_Params.CharaID, sizeof(Network_GetCostumeID_Params.CharaID), &CharaID, sizeof(CharaID));
	Network_GetCostumeID_Params.isRankmatch = isRankmatch;
	Network_GetCostumeID_Params.isTournament = isTournament;
	Network_GetCostumeID_Params.isLobbyBattle = isLobbyBattle;

	this->ProcessEvent(uFnNetwork_GetCostumeID, &Network_GetCostumeID_Params, nullptr);

	return Network_GetCostumeID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.Network_GetColorID
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[38730])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isRankmatch                    (CPF_Parm)
// uint32_t                       isTournament                   (CPF_Parm)
// uint32_t                       isLobbyBattle                  (CPF_OptionalParm | CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::Network_GetColorID(const class FString& CharaID, bool isRankmatch, bool isTournament, bool isLobbyBattle)
{
	static UFunction* uFnNetwork_GetColorID = nullptr;

	if (!uFnNetwork_GetColorID)
	{
		uFnNetwork_GetColorID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.Network_GetColorID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execNetwork_GetColorID_Params Network_GetColorID_Params;
	memset(&Network_GetColorID_Params, 0, sizeof(Network_GetColorID_Params));
	memcpy_s(&Network_GetColorID_Params.CharaID, sizeof(Network_GetColorID_Params.CharaID), &CharaID, sizeof(CharaID));
	Network_GetColorID_Params.isRankmatch = isRankmatch;
	Network_GetColorID_Params.isTournament = isTournament;
	Network_GetColorID_Params.isLobbyBattle = isLobbyBattle;

	this->ProcessEvent(uFnNetwork_GetColorID, &Network_GetColorID_Params, nullptr);

	return Network_GetColorID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.Network_SetMyChara
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[38733])
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        ColorID                        (CPF_Parm)
// EUE_BG_ID                      bg_id                          (CPF_Parm)
// EUE_BGM_ID                     BGM_ID                         (CPF_Parm)
// int32_t                        CostumeID                      (CPF_Parm)
// uint32_t                       isStylish                      (CPF_Parm)
// uint32_t                       isRankmatch                    (CPF_Parm)
// uint32_t                       isTournament                   (CPF_Parm)
// uint32_t                       isLobbyBattle                  (CPF_OptionalParm | CPF_Parm)
// uint32_t                       isWelcomeMode                  (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::Network_SetMyChara(const class FString& CharaID, int32_t ColorID, EUE_BG_ID bg_id, EUE_BGM_ID BGM_ID, int32_t CostumeID, bool isStylish, bool isRankmatch, bool isTournament, bool isLobbyBattle, bool isWelcomeMode)
{
	static UFunction* uFnNetwork_SetMyChara = nullptr;

	if (!uFnNetwork_SetMyChara)
	{
		uFnNetwork_SetMyChara = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.Network_SetMyChara");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execNetwork_SetMyChara_Params Network_SetMyChara_Params;
	memset(&Network_SetMyChara_Params, 0, sizeof(Network_SetMyChara_Params));
	memcpy_s(&Network_SetMyChara_Params.CharaID, sizeof(Network_SetMyChara_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&Network_SetMyChara_Params.ColorID, sizeof(Network_SetMyChara_Params.ColorID), &ColorID, sizeof(ColorID));
	memcpy_s(&Network_SetMyChara_Params.bg_id, sizeof(Network_SetMyChara_Params.bg_id), &bg_id, sizeof(bg_id));
	memcpy_s(&Network_SetMyChara_Params.BGM_ID, sizeof(Network_SetMyChara_Params.BGM_ID), &BGM_ID, sizeof(BGM_ID));
	memcpy_s(&Network_SetMyChara_Params.CostumeID, sizeof(Network_SetMyChara_Params.CostumeID), &CostumeID, sizeof(CostumeID));
	Network_SetMyChara_Params.isStylish = isStylish;
	Network_SetMyChara_Params.isRankmatch = isRankmatch;
	Network_SetMyChara_Params.isTournament = isTournament;
	Network_SetMyChara_Params.isLobbyBattle = isLobbyBattle;
	Network_SetMyChara_Params.isWelcomeMode = isWelcomeMode;

	this->ProcessEvent(uFnNetwork_SetMyChara, &Network_SetMyChara_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsEvent_StageSelectLock
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37655])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsEvent_StageSelectLock()
{
	static UFunction* uFnIsEvent_StageSelectLock = nullptr;

	if (!uFnIsEvent_StageSelectLock)
	{
		uFnIsEvent_StageSelectLock = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsEvent_StageSelectLock");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsEvent_StageSelectLock_Params IsEvent_StageSelectLock_Params;
	memset(&IsEvent_StageSelectLock_Params, 0, sizeof(IsEvent_StageSelectLock_Params));

	this->ProcessEvent(uFnIsEvent_StageSelectLock, &IsEvent_StageSelectLock_Params, nullptr);

	return IsEvent_StageSelectLock_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsEvent_StageSelectEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37654])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsEvent_StageSelectEnable()
{
	static UFunction* uFnIsEvent_StageSelectEnable = nullptr;

	if (!uFnIsEvent_StageSelectEnable)
	{
		uFnIsEvent_StageSelectEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsEvent_StageSelectEnable");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsEvent_StageSelectEnable_Params IsEvent_StageSelectEnable_Params;
	memset(&IsEvent_StageSelectEnable_Params, 0, sizeof(IsEvent_StageSelectEnable_Params));

	this->ProcessEvent(uFnIsEvent_StageSelectEnable, &IsEvent_StageSelectEnable_Params, nullptr);

	return IsEvent_StageSelectEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialGetAchievementRate
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40286])
// Parameter Info:
// int32_t                        Num                            (CPF_Parm | CPF_OutParm)
// int32_t                        numAll                         (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::TrialGetAchievementRate(int32_t& Num, int32_t& numAll)
{
	static UFunction* uFnTrialGetAchievementRate = nullptr;

	if (!uFnTrialGetAchievementRate)
	{
		uFnTrialGetAchievementRate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialGetAchievementRate");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execTrialGetAchievementRate_Params TrialGetAchievementRate_Params;
	memset(&TrialGetAchievementRate_Params, 0, sizeof(TrialGetAchievementRate_Params));
	memcpy_s(&TrialGetAchievementRate_Params.Num, sizeof(TrialGetAchievementRate_Params.Num), &Num, sizeof(Num));
	memcpy_s(&TrialGetAchievementRate_Params.numAll, sizeof(TrialGetAchievementRate_Params.numAll), &numAll, sizeof(numAll));

	this->ProcessEvent(uFnTrialGetAchievementRate, &TrialGetAchievementRate_Params, nullptr);

	memcpy_s(&Num, sizeof(Num), &TrialGetAchievementRate_Params.Num, sizeof(TrialGetAchievementRate_Params.Num));
	memcpy_s(&numAll, sizeof(numAll), &TrialGetAchievementRate_Params.numAll, sizeof(TrialGetAchievementRate_Params.numAll));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialGetEnemyChara
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40287])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuCharaSelectBase::TrialGetEnemyChara()
{
	static UFunction* uFnTrialGetEnemyChara = nullptr;

	if (!uFnTrialGetEnemyChara)
	{
		uFnTrialGetEnemyChara = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialGetEnemyChara");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execTrialGetEnemyChara_Params TrialGetEnemyChara_Params;
	memset(&TrialGetEnemyChara_Params, 0, sizeof(TrialGetEnemyChara_Params));

	this->ProcessEvent(uFnTrialGetEnemyChara, &TrialGetEnemyChara_Params, nullptr);

	return TrialGetEnemyChara_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialSelectNG
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40289])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::TrialSelectNG()
{
	static UFunction* uFnTrialSelectNG = nullptr;

	if (!uFnTrialSelectNG)
	{
		uFnTrialSelectNG = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialSelectNG");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execTrialSelectNG_Params TrialSelectNG_Params;
	memset(&TrialSelectNG_Params, 0, sizeof(TrialSelectNG_Params));

	this->ProcessEvent(uFnTrialSelectNG, &TrialSelectNG_Params, nullptr);

	return TrialSelectNG_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialSelectOK
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40290])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::TrialSelectOK()
{
	static UFunction* uFnTrialSelectOK = nullptr;

	if (!uFnTrialSelectOK)
	{
		uFnTrialSelectOK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialSelectOK");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execTrialSelectOK_Params TrialSelectOK_Params;
	memset(&TrialSelectOK_Params, 0, sizeof(TrialSelectOK_Params));

	this->ProcessEvent(uFnTrialSelectOK, &TrialSelectOK_Params, nullptr);

	return TrialSelectOK_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialSelectOpen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40291])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectBase::TrialSelectOpen(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnTrialSelectOpen = nullptr;

	if (!uFnTrialSelectOpen)
	{
		uFnTrialSelectOpen = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.TrialSelectOpen");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execTrialSelectOpen_Params TrialSelectOpen_Params;
	memset(&TrialSelectOpen_Params, 0, sizeof(TrialSelectOpen_Params));
	memcpy_s(&TrialSelectOpen_Params.Player, sizeof(TrialSelectOpen_Params.Player), &Player, sizeof(Player));
	memcpy_s(&TrialSelectOpen_Params.CharaID, sizeof(TrialSelectOpen_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnTrialSelectOpen, &TrialSelectOpen_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetColorMax
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37024])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetColorMax()
{
	static UFunction* uFnGetColorMax = nullptr;

	if (!uFnGetColorMax)
	{
		uFnGetColorMax = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetColorMax");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetColorMax_Params GetColorMax_Params;
	memset(&GetColorMax_Params, 0, sizeof(GetColorMax_Params));

	this->ProcessEvent(uFnGetColorMax, &GetColorMax_Params, nullptr);

	return GetColorMax_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetVicinityColor
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37193])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        baseColor                      (CPF_Parm)
// int32_t                        prevprev                       (CPF_Parm | CPF_OutParm)
// int32_t                        prev                           (CPF_Parm | CPF_OutParm)
// int32_t                        Next                           (CPF_Parm | CPF_OutParm)
// int32_t                        nextnext                       (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::GetVicinityColor(EUE_PLAYER_ID Player, const class FString& CharaID, int32_t baseColor, int32_t& prevprev, int32_t& prev, int32_t& Next, int32_t& nextnext)
{
	static UFunction* uFnGetVicinityColor = nullptr;

	if (!uFnGetVicinityColor)
	{
		uFnGetVicinityColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetVicinityColor");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetVicinityColor_Params GetVicinityColor_Params;
	memset(&GetVicinityColor_Params, 0, sizeof(GetVicinityColor_Params));
	memcpy_s(&GetVicinityColor_Params.Player, sizeof(GetVicinityColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&GetVicinityColor_Params.CharaID, sizeof(GetVicinityColor_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&GetVicinityColor_Params.baseColor, sizeof(GetVicinityColor_Params.baseColor), &baseColor, sizeof(baseColor));
	memcpy_s(&GetVicinityColor_Params.prevprev, sizeof(GetVicinityColor_Params.prevprev), &prevprev, sizeof(prevprev));
	memcpy_s(&GetVicinityColor_Params.prev, sizeof(GetVicinityColor_Params.prev), &prev, sizeof(prev));
	memcpy_s(&GetVicinityColor_Params.Next, sizeof(GetVicinityColor_Params.Next), &Next, sizeof(Next));
	memcpy_s(&GetVicinityColor_Params.nextnext, sizeof(GetVicinityColor_Params.nextnext), &nextnext, sizeof(nextnext));

	this->ProcessEvent(uFnGetVicinityColor, &GetVicinityColor_Params, nullptr);

	memcpy_s(&prevprev, sizeof(prevprev), &GetVicinityColor_Params.prevprev, sizeof(GetVicinityColor_Params.prevprev));
	memcpy_s(&prev, sizeof(prev), &GetVicinityColor_Params.prev, sizeof(GetVicinityColor_Params.prev));
	memcpy_s(&Next, sizeof(Next), &GetVicinityColor_Params.Next, sizeof(GetVicinityColor_Params.Next));
	memcpy_s(&nextnext, sizeof(nextnext), &GetVicinityColor_Params.nextnext, sizeof(GetVicinityColor_Params.nextnext));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsForbiddenCustomMenuOK
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37668])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsForbiddenCustomMenuOK(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsForbiddenCustomMenuOK = nullptr;

	if (!uFnIsForbiddenCustomMenuOK)
	{
		uFnIsForbiddenCustomMenuOK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsForbiddenCustomMenuOK");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsForbiddenCustomMenuOK_Params IsForbiddenCustomMenuOK_Params;
	memset(&IsForbiddenCustomMenuOK_Params, 0, sizeof(IsForbiddenCustomMenuOK_Params));
	memcpy_s(&IsForbiddenCustomMenuOK_Params.Player, sizeof(IsForbiddenCustomMenuOK_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsForbiddenCustomMenuOK, &IsForbiddenCustomMenuOK_Params, nullptr);

	return IsForbiddenCustomMenuOK_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CloseCustomMenu
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[36231])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bFast                          (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::CloseCustomMenu(EUE_PLAYER_ID Player, bool bFast)
{
	static UFunction* uFnCloseCustomMenu = nullptr;

	if (!uFnCloseCustomMenu)
	{
		uFnCloseCustomMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CloseCustomMenu");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execCloseCustomMenu_Params CloseCustomMenu_Params;
	memset(&CloseCustomMenu_Params, 0, sizeof(CloseCustomMenu_Params));
	memcpy_s(&CloseCustomMenu_Params.Player, sizeof(CloseCustomMenu_Params.Player), &Player, sizeof(Player));
	CloseCustomMenu_Params.bFast = bFast;

	this->ProcessEvent(uFnCloseCustomMenu, &CloseCustomMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetCustomMenuVal_KeyType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39723])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SetCustomMenuVal_KeyType(EUE_PLAYER_ID Player, int32_t val)
{
	static UFunction* uFnSetCustomMenuVal_KeyType = nullptr;

	if (!uFnSetCustomMenuVal_KeyType)
	{
		uFnSetCustomMenuVal_KeyType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetCustomMenuVal_KeyType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSetCustomMenuVal_KeyType_Params SetCustomMenuVal_KeyType_Params;
	memset(&SetCustomMenuVal_KeyType_Params, 0, sizeof(SetCustomMenuVal_KeyType_Params));
	memcpy_s(&SetCustomMenuVal_KeyType_Params.Player, sizeof(SetCustomMenuVal_KeyType_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCustomMenuVal_KeyType_Params.val, sizeof(SetCustomMenuVal_KeyType_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetCustomMenuVal_KeyType, &SetCustomMenuVal_KeyType_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetCustomMenuVal_Color
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39722])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SetCustomMenuVal_Color(EUE_PLAYER_ID Player, int32_t val)
{
	static UFunction* uFnSetCustomMenuVal_Color = nullptr;

	if (!uFnSetCustomMenuVal_Color)
	{
		uFnSetCustomMenuVal_Color = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetCustomMenuVal_Color");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSetCustomMenuVal_Color_Params SetCustomMenuVal_Color_Params;
	memset(&SetCustomMenuVal_Color_Params, 0, sizeof(SetCustomMenuVal_Color_Params));
	memcpy_s(&SetCustomMenuVal_Color_Params.Player, sizeof(SetCustomMenuVal_Color_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCustomMenuVal_Color_Params.val, sizeof(SetCustomMenuVal_Color_Params.val), &val, sizeof(val));

	this->ProcessEvent(uFnSetCustomMenuVal_Color, &SetCustomMenuVal_Color_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetCustomMenuVal_KeyType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37042])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetCustomMenuVal_KeyType(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetCustomMenuVal_KeyType = nullptr;

	if (!uFnGetCustomMenuVal_KeyType)
	{
		uFnGetCustomMenuVal_KeyType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetCustomMenuVal_KeyType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetCustomMenuVal_KeyType_Params GetCustomMenuVal_KeyType_Params;
	memset(&GetCustomMenuVal_KeyType_Params, 0, sizeof(GetCustomMenuVal_KeyType_Params));
	memcpy_s(&GetCustomMenuVal_KeyType_Params.Player, sizeof(GetCustomMenuVal_KeyType_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetCustomMenuVal_KeyType, &GetCustomMenuVal_KeyType_Params, nullptr);

	return GetCustomMenuVal_KeyType_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetCustomMenuVal_Color
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37041])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetCustomMenuVal_Color(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetCustomMenuVal_Color = nullptr;

	if (!uFnGetCustomMenuVal_Color)
	{
		uFnGetCustomMenuVal_Color = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetCustomMenuVal_Color");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetCustomMenuVal_Color_Params GetCustomMenuVal_Color_Params;
	memset(&GetCustomMenuVal_Color_Params, 0, sizeof(GetCustomMenuVal_Color_Params));
	memcpy_s(&GetCustomMenuVal_Color_Params.Player, sizeof(GetCustomMenuVal_Color_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetCustomMenuVal_Color, &GetCustomMenuVal_Color_Params, nullptr);

	return GetCustomMenuVal_Color_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.OpenCustomMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38829])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// EUE_PLAYER_ID                  controlPlayer                  (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectBase::OpenCustomMenu(EUE_PLAYER_ID Player, EUE_PLAYER_ID controlPlayer, const class FString& CharaID)
{
	static UFunction* uFnOpenCustomMenu = nullptr;

	if (!uFnOpenCustomMenu)
	{
		uFnOpenCustomMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.OpenCustomMenu");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execOpenCustomMenu_Params OpenCustomMenu_Params;
	memset(&OpenCustomMenu_Params, 0, sizeof(OpenCustomMenu_Params));
	memcpy_s(&OpenCustomMenu_Params.Player, sizeof(OpenCustomMenu_Params.Player), &Player, sizeof(Player));
	memcpy_s(&OpenCustomMenu_Params.controlPlayer, sizeof(OpenCustomMenu_Params.controlPlayer), &controlPlayer, sizeof(controlPlayer));
	memcpy_s(&OpenCustomMenu_Params.CharaID, sizeof(OpenCustomMenu_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnOpenCustomMenu, &OpenCustomMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.RequestInfoBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39369])
// Parameter Info:
// class FString                  TextID                         (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectBase::RequestInfoBar(const class FString& TextID)
{
	static UFunction* uFnRequestInfoBar = nullptr;

	if (!uFnRequestInfoBar)
	{
		uFnRequestInfoBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.RequestInfoBar");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execRequestInfoBar_Params RequestInfoBar_Params;
	memset(&RequestInfoBar_Params, 0, sizeof(RequestInfoBar_Params));
	memcpy_s(&RequestInfoBar_Params.TextID, sizeof(RequestInfoBar_Params.TextID), &TextID, sizeof(TextID));

	this->ProcessEvent(uFnRequestInfoBar, &RequestInfoBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.DelayGarbageCollection
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36525])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::DelayGarbageCollection()
{
	static UFunction* uFnDelayGarbageCollection = nullptr;

	if (!uFnDelayGarbageCollection)
	{
		uFnDelayGarbageCollection = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.DelayGarbageCollection");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execDelayGarbageCollection_Params DelayGarbageCollection_Params;
	memset(&DelayGarbageCollection_Params, 0, sizeof(DelayGarbageCollection_Params));

	this->ProcessEvent(uFnDelayGarbageCollection, &DelayGarbageCollection_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetSelectCharaID
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

class FString UREDGfxMoviePlayer_MenuCharaSelectBase::eventGetSelectCharaID(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetSelectCharaID = nullptr;

	if (!uFnGetSelectCharaID)
	{
		uFnGetSelectCharaID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetSelectCharaID");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_eventGetSelectCharaID_Params GetSelectCharaID_Params;
	memset(&GetSelectCharaID_Params, 0, sizeof(GetSelectCharaID_Params));
	memcpy_s(&GetSelectCharaID_Params.Player, sizeof(GetSelectCharaID_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetSelectCharaID, &GetSelectCharaID_Params, nullptr);

	return GetSelectCharaID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.UpdateBookKeepingInfo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40605])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::UpdateBookKeepingInfo(EUE_PLAYER_ID Player)
{
	static UFunction* uFnUpdateBookKeepingInfo = nullptr;

	if (!uFnUpdateBookKeepingInfo)
	{
		uFnUpdateBookKeepingInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.UpdateBookKeepingInfo");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execUpdateBookKeepingInfo_Params UpdateBookKeepingInfo_Params;
	memset(&UpdateBookKeepingInfo_Params, 0, sizeof(UpdateBookKeepingInfo_Params));
	memcpy_s(&UpdateBookKeepingInfo_Params.Player, sizeof(UpdateBookKeepingInfo_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateBookKeepingInfo, &UpdateBookKeepingInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.UpdateCardInfoFromGameCommon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40615])
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::UpdateCardInfoFromGameCommon()
{
	static UFunction* uFnUpdateCardInfoFromGameCommon = nullptr;

	if (!uFnUpdateCardInfoFromGameCommon)
	{
		uFnUpdateCardInfoFromGameCommon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.UpdateCardInfoFromGameCommon");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execUpdateCardInfoFromGameCommon_Params UpdateCardInfoFromGameCommon_Params;
	memset(&UpdateCardInfoFromGameCommon_Params, 0, sizeof(UpdateCardInfoFromGameCommon_Params));

	this->ProcessEvent(uFnUpdateCardInfoFromGameCommon, &UpdateCardInfoFromGameCommon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsSelectableColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37844])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        ColorID                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelectBase::IsSelectableColor(EUE_PLAYER_ID Player, const class FString& CharaID, int32_t ColorID)
{
	static UFunction* uFnIsSelectableColor = nullptr;

	if (!uFnIsSelectableColor)
	{
		uFnIsSelectableColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.IsSelectableColor");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execIsSelectableColor_Params IsSelectableColor_Params;
	memset(&IsSelectableColor_Params, 0, sizeof(IsSelectableColor_Params));
	memcpy_s(&IsSelectableColor_Params.Player, sizeof(IsSelectableColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&IsSelectableColor_Params.CharaID, sizeof(IsSelectableColor_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&IsSelectableColor_Params.ColorID, sizeof(IsSelectableColor_Params.ColorID), &ColorID, sizeof(ColorID));

	this->ProcessEvent(uFnIsSelectableColor, &IsSelectableColor_Params, nullptr);

	return IsSelectableColor_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetCostumeFromCard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37032])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetCostumeFromCard(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnGetCostumeFromCard = nullptr;

	if (!uFnGetCostumeFromCard)
	{
		uFnGetCostumeFromCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetCostumeFromCard");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetCostumeFromCard_Params GetCostumeFromCard_Params;
	memset(&GetCostumeFromCard_Params, 0, sizeof(GetCostumeFromCard_Params));
	memcpy_s(&GetCostumeFromCard_Params.Player, sizeof(GetCostumeFromCard_Params.Player), &Player, sizeof(Player));
	memcpy_s(&GetCostumeFromCard_Params.CharaID, sizeof(GetCostumeFromCard_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetCostumeFromCard, &GetCostumeFromCard_Params, nullptr);

	return GetCostumeFromCard_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetColorFromCard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37022])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetColorFromCard(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnGetColorFromCard = nullptr;

	if (!uFnGetColorFromCard)
	{
		uFnGetColorFromCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetColorFromCard");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetColorFromCard_Params GetColorFromCard_Params;
	memset(&GetColorFromCard_Params, 0, sizeof(GetColorFromCard_Params));
	memcpy_s(&GetColorFromCard_Params.Player, sizeof(GetColorFromCard_Params.Player), &Player, sizeof(Player));
	memcpy_s(&GetColorFromCard_Params.CharaID, sizeof(GetColorFromCard_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetColorFromCard, &GetColorFromCard_Params, nullptr);

	return GetColorFromCard_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CardFadeOut
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::CardFadeOut()
{
	static UFunction* uFnCardFadeOut = nullptr;

	if (!uFnCardFadeOut)
	{
		uFnCardFadeOut = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CardFadeOut");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execCardFadeOut_Params CardFadeOut_Params;
	memset(&CardFadeOut_Params, 0, sizeof(CardFadeOut_Params));

	this->ProcessEvent(uFnCardFadeOut, &CardFadeOut_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.InitCardLoad
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37512])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::InitCardLoad(EUE_PLAYER_ID Player)
{
	static UFunction* uFnInitCardLoad = nullptr;

	if (!uFnInitCardLoad)
	{
		uFnInitCardLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.InitCardLoad");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execInitCardLoad_Params InitCardLoad_Params;
	memset(&InitCardLoad_Params, 0, sizeof(InitCardLoad_Params));
	memcpy_s(&InitCardLoad_Params.Player, sizeof(InitCardLoad_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnInitCardLoad, &InitCardLoad_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CommonSE_Cursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::CommonSE_Cursor()
{
	static UFunction* uFnCommonSE_Cursor = nullptr;

	if (!uFnCommonSE_Cursor)
	{
		uFnCommonSE_Cursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CommonSE_Cursor");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execCommonSE_Cursor_Params CommonSE_Cursor_Params;
	memset(&CommonSE_Cursor_Params, 0, sizeof(CommonSE_Cursor_Params));

	this->ProcessEvent(uFnCommonSE_Cursor, &CommonSE_Cursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CommonSE_OK
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectBase::CommonSE_OK()
{
	static UFunction* uFnCommonSE_OK = nullptr;

	if (!uFnCommonSE_OK)
	{
		uFnCommonSE_OK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.CommonSE_OK");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execCommonSE_OK_Params CommonSE_OK_Params;
	memset(&CommonSE_OK_Params, 0, sizeof(CommonSE_OK_Params));

	this->ProcessEvent(uFnCommonSE_OK, &CommonSE_OK_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetKeyAllocationTypeNum
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37080])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetKeyAllocationTypeNum()
{
	static UFunction* uFnGetKeyAllocationTypeNum = nullptr;

	if (!uFnGetKeyAllocationTypeNum)
	{
		uFnGetKeyAllocationTypeNum = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetKeyAllocationTypeNum");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetKeyAllocationTypeNum_Params GetKeyAllocationTypeNum_Params;
	memset(&GetKeyAllocationTypeNum_Params, 0, sizeof(GetKeyAllocationTypeNum_Params));

	this->ProcessEvent(uFnGetKeyAllocationTypeNum, &GetKeyAllocationTypeNum_Params, nullptr);

	return GetKeyAllocationTypeNum_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetKeyAllocationType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37079])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelectBase::GetKeyAllocationType(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetKeyAllocationType = nullptr;

	if (!uFnGetKeyAllocationType)
	{
		uFnGetKeyAllocationType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.GetKeyAllocationType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execGetKeyAllocationType_Params GetKeyAllocationType_Params;
	memset(&GetKeyAllocationType_Params, 0, sizeof(GetKeyAllocationType_Params));
	memcpy_s(&GetKeyAllocationType_Params.Player, sizeof(GetKeyAllocationType_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetKeyAllocationType, &GetKeyAllocationType_Params, nullptr);

	return GetKeyAllocationType_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetKeyAllocationType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39762])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectBase::SetKeyAllocationType(EUE_PLAYER_ID Player, int32_t Type)
{
	static UFunction* uFnSetKeyAllocationType = nullptr;

	if (!uFnSetKeyAllocationType)
	{
		uFnSetKeyAllocationType = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectBase.SetKeyAllocationType");
	}

	UREDGfxMoviePlayer_MenuCharaSelectBase_execSetKeyAllocationType_Params SetKeyAllocationType_Params;
	memset(&SetKeyAllocationType_Params, 0, sizeof(SetKeyAllocationType_Params));
	memcpy_s(&SetKeyAllocationType_Params.Player, sizeof(SetKeyAllocationType_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetKeyAllocationType_Params.Type, sizeof(SetKeyAllocationType_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnSetKeyAllocationType, &SetKeyAllocationType_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.AS_SetTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Time                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuModeSelect::AS_SetTimer(float Time)
{
	static UFunction* uFnAS_SetTimer = nullptr;

	if (!uFnAS_SetTimer)
	{
		uFnAS_SetTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.AS_SetTimer");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execAS_SetTimer_Params AS_SetTimer_Params;
	memset(&AS_SetTimer_Params, 0, sizeof(AS_SetTimer_Params));
	memcpy_s(&AS_SetTimer_Params.Time, sizeof(AS_SetTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnAS_SetTimer, &AS_SetTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.UpdateGearRotation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuModeSelect::UpdateGearRotation()
{
	static UFunction* uFnUpdateGearRotation = nullptr;

	if (!uFnUpdateGearRotation)
	{
		uFnUpdateGearRotation = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.UpdateGearRotation");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execUpdateGearRotation_Params UpdateGearRotation_Params;
	memset(&UpdateGearRotation_Params, 0, sizeof(UpdateGearRotation_Params));

	this->ProcessEvent(uFnUpdateGearRotation, &UpdateGearRotation_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.UpdateCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       decide                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuModeSelect::UpdateCursor(bool decide)
{
	static UFunction* uFnUpdateCursor = nullptr;

	if (!uFnUpdateCursor)
	{
		uFnUpdateCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.UpdateCursor");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execUpdateCursor_Params UpdateCursor_Params;
	memset(&UpdateCursor_Params, 0, sizeof(UpdateCursor_Params));
	UpdateCursor_Params.decide = decide;

	this->ProcessEvent(uFnUpdateCursor, &UpdateCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuModeSelect::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.IsSelectable_Right
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Cursor                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuModeSelect::IsSelectable_Right(int32_t Cursor)
{
	static UFunction* uFnIsSelectable_Right = nullptr;

	if (!uFnIsSelectable_Right)
	{
		uFnIsSelectable_Right = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.IsSelectable_Right");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execIsSelectable_Right_Params IsSelectable_Right_Params;
	memset(&IsSelectable_Right_Params, 0, sizeof(IsSelectable_Right_Params));
	memcpy_s(&IsSelectable_Right_Params.Cursor, sizeof(IsSelectable_Right_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnIsSelectable_Right, &IsSelectable_Right_Params, nullptr);

	return IsSelectable_Right_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.IsSelectable_Left
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Cursor                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuModeSelect::IsSelectable_Left(int32_t Cursor)
{
	static UFunction* uFnIsSelectable_Left = nullptr;

	if (!uFnIsSelectable_Left)
	{
		uFnIsSelectable_Left = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.IsSelectable_Left");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execIsSelectable_Left_Params IsSelectable_Left_Params;
	memset(&IsSelectable_Left_Params, 0, sizeof(IsSelectable_Left_Params));
	memcpy_s(&IsSelectable_Left_Params.Cursor, sizeof(IsSelectable_Left_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnIsSelectable_Left, &IsSelectable_Left_Params, nullptr);

	return IsSelectable_Left_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.GetEnableModeCount
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuModeSelect::GetEnableModeCount()
{
	static UFunction* uFnGetEnableModeCount = nullptr;

	if (!uFnGetEnableModeCount)
	{
		uFnGetEnableModeCount = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.GetEnableModeCount");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execGetEnableModeCount_Params GetEnableModeCount_Params;
	memset(&GetEnableModeCount_Params, 0, sizeof(GetEnableModeCount_Params));

	this->ProcessEvent(uFnGetEnableModeCount, &GetEnableModeCount_Params, nullptr);

	return GetEnableModeCount_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.IsModeEnable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_GAME_MODE                  Mode                           (CPF_Parm)

bool UREDGfxMoviePlayer_MenuModeSelect::IsModeEnable(EUE_GAME_MODE Mode)
{
	static UFunction* uFnIsModeEnable = nullptr;

	if (!uFnIsModeEnable)
	{
		uFnIsModeEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.IsModeEnable");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execIsModeEnable_Params IsModeEnable_Params;
	memset(&IsModeEnable_Params, 0, sizeof(IsModeEnable_Params));
	memcpy_s(&IsModeEnable_Params.Mode, sizeof(IsModeEnable_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnIsModeEnable, &IsModeEnable_Params, nullptr);

	return IsModeEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuModeSelect::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.OnClose");
	}

	UREDGfxMoviePlayer_MenuModeSelect_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuModeSelect::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuModeSelect::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.Start");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.GameModeSetup
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_GAME_MODE                  Mode                           (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuModeSelect::GameModeSetup(EUE_GAME_MODE Mode, EUE_PLAYER_ID Player)
{
	static UFunction* uFnGameModeSetup = nullptr;

	if (!uFnGameModeSetup)
	{
		uFnGameModeSetup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.GameModeSetup");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execGameModeSetup_Params GameModeSetup_Params;
	memset(&GameModeSetup_Params, 0, sizeof(GameModeSetup_Params));
	memcpy_s(&GameModeSetup_Params.Mode, sizeof(GameModeSetup_Params.Mode), &Mode, sizeof(Mode));
	memcpy_s(&GameModeSetup_Params.Player, sizeof(GameModeSetup_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGameModeSetup, &GameModeSetup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.CheckGameModeFromTestMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_GAME_MODE                  Mode                           (CPF_Parm)

bool UREDGfxMoviePlayer_MenuModeSelect::CheckGameModeFromTestMode(EUE_GAME_MODE Mode)
{
	static UFunction* uFnCheckGameModeFromTestMode = nullptr;

	if (!uFnCheckGameModeFromTestMode)
	{
		uFnCheckGameModeFromTestMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.CheckGameModeFromTestMode");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execCheckGameModeFromTestMode_Params CheckGameModeFromTestMode_Params;
	memset(&CheckGameModeFromTestMode_Params, 0, sizeof(CheckGameModeFromTestMode_Params));
	memcpy_s(&CheckGameModeFromTestMode_Params.Mode, sizeof(CheckGameModeFromTestMode_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnCheckGameModeFromTestMode, &CheckGameModeFromTestMode_Params, nullptr);

	return CheckGameModeFromTestMode_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.MOM_GetModeSelectText
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38379])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuModeSelect::MOM_GetModeSelectText()
{
	static UFunction* uFnMOM_GetModeSelectText = nullptr;

	if (!uFnMOM_GetModeSelectText)
	{
		uFnMOM_GetModeSelectText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.MOM_GetModeSelectText");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execMOM_GetModeSelectText_Params MOM_GetModeSelectText_Params;
	memset(&MOM_GetModeSelectText_Params, 0, sizeof(MOM_GetModeSelectText_Params));

	this->ProcessEvent(uFnMOM_GetModeSelectText, &MOM_GetModeSelectText_Params, nullptr);

	return MOM_GetModeSelectText_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.CheckGameModeVersion
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36201])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// EUE_GAME_MODE                  Mode                           (CPF_Parm)

bool UREDGfxMoviePlayer_MenuModeSelect::CheckGameModeVersion(EUE_PLAYER_ID Player, EUE_GAME_MODE Mode)
{
	static UFunction* uFnCheckGameModeVersion = nullptr;

	if (!uFnCheckGameModeVersion)
	{
		uFnCheckGameModeVersion = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.CheckGameModeVersion");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execCheckGameModeVersion_Params CheckGameModeVersion_Params;
	memset(&CheckGameModeVersion_Params, 0, sizeof(CheckGameModeVersion_Params));
	memcpy_s(&CheckGameModeVersion_Params.Player, sizeof(CheckGameModeVersion_Params.Player), &Player, sizeof(Player));
	memcpy_s(&CheckGameModeVersion_Params.Mode, sizeof(CheckGameModeVersion_Params.Mode), &Mode, sizeof(Mode));

	this->ProcessEvent(uFnCheckGameModeVersion, &CheckGameModeVersion_Params, nullptr);

	return CheckGameModeVersion_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.GetSelectModeFromCard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37166])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuModeSelect::GetSelectModeFromCard(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetSelectModeFromCard = nullptr;

	if (!uFnGetSelectModeFromCard)
	{
		uFnGetSelectModeFromCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.GetSelectModeFromCard");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execGetSelectModeFromCard_Params GetSelectModeFromCard_Params;
	memset(&GetSelectModeFromCard_Params, 0, sizeof(GetSelectModeFromCard_Params));
	memcpy_s(&GetSelectModeFromCard_Params.Player, sizeof(GetSelectModeFromCard_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetSelectModeFromCard, &GetSelectModeFromCard_Params, nullptr);

	return GetSelectModeFromCard_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuModeSelect.SetSelectModeForCard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39806])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// EUE_GAME_MODE                  Mode                           (CPF_Parm)
// int32_t                        Cursor                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuModeSelect::SetSelectModeForCard(EUE_PLAYER_ID Player, EUE_GAME_MODE Mode, int32_t Cursor)
{
	static UFunction* uFnSetSelectModeForCard = nullptr;

	if (!uFnSetSelectModeForCard)
	{
		uFnSetSelectModeForCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuModeSelect.SetSelectModeForCard");
	}

	UREDGfxMoviePlayer_MenuModeSelect_execSetSelectModeForCard_Params SetSelectModeForCard_Params;
	memset(&SetSelectModeForCard_Params, 0, sizeof(SetSelectModeForCard_Params));
	memcpy_s(&SetSelectModeForCard_Params.Player, sizeof(SetSelectModeForCard_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetSelectModeForCard_Params.Mode, sizeof(SetSelectModeForCard_Params.Mode), &Mode, sizeof(Mode));
	memcpy_s(&SetSelectModeForCard_Params.Cursor, sizeof(SetSelectModeForCard_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnSetSelectModeForCard, &SetSelectModeForCard_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.AS_SetTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        digit1                         (CPF_Parm)
// int32_t                        digit10                        (CPF_Parm)
// int32_t                        digit100                       (CPF_Parm)
// int32_t                        digitNum                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMOMPreset::AS_SetTimer(int32_t digit1, int32_t digit10, int32_t digit100, int32_t digitNum)
{
	static UFunction* uFnAS_SetTimer = nullptr;

	if (!uFnAS_SetTimer)
	{
		uFnAS_SetTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.AS_SetTimer");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execAS_SetTimer_Params AS_SetTimer_Params;
	memset(&AS_SetTimer_Params, 0, sizeof(AS_SetTimer_Params));
	memcpy_s(&AS_SetTimer_Params.digit1, sizeof(AS_SetTimer_Params.digit1), &digit1, sizeof(digit1));
	memcpy_s(&AS_SetTimer_Params.digit10, sizeof(AS_SetTimer_Params.digit10), &digit10, sizeof(digit10));
	memcpy_s(&AS_SetTimer_Params.digit100, sizeof(AS_SetTimer_Params.digit100), &digit100, sizeof(digit100));
	memcpy_s(&AS_SetTimer_Params.digitNum, sizeof(AS_SetTimer_Params.digitNum), &digitNum, sizeof(digitNum));

	this->ProcessEvent(uFnAS_SetTimer, &AS_SetTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.UpdateTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuMOMPreset::UpdateTimer(int32_t Time)
{
	static UFunction* uFnUpdateTimer = nullptr;

	if (!uFnUpdateTimer)
	{
		uFnUpdateTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.UpdateTimer");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execUpdateTimer_Params UpdateTimer_Params;
	memset(&UpdateTimer_Params, 0, sizeof(UpdateTimer_Params));
	memcpy_s(&UpdateTimer_Params.Time, sizeof(UpdateTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateTimer, &UpdateTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMPreset::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMOMPreset::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMPreset::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OnClose");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMPreset::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuMOMPreset::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.Start");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.SetCursorFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Cursor                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuMOMPreset::SetCursorFocus(int32_t Cursor)
{
	static UFunction* uFnSetCursorFocus = nullptr;

	if (!uFnSetCursorFocus)
	{
		uFnSetCursorFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.SetCursorFocus");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execSetCursorFocus_Params SetCursorFocus_Params;
	memset(&SetCursorFocus_Params, 0, sizeof(SetCursorFocus_Params));
	memcpy_s(&SetCursorFocus_Params.Cursor, sizeof(SetCursorFocus_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnSetCursorFocus, &SetCursorFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.UpdateCursorAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PrevCursor                     (CPF_Parm)
// int32_t                        Cursor                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuMOMPreset::UpdateCursorAnim(int32_t PrevCursor, int32_t Cursor)
{
	static UFunction* uFnUpdateCursorAnim = nullptr;

	if (!uFnUpdateCursorAnim)
	{
		uFnUpdateCursorAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.UpdateCursorAnim");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execUpdateCursorAnim_Params UpdateCursorAnim_Params;
	memset(&UpdateCursorAnim_Params, 0, sizeof(UpdateCursorAnim_Params));
	memcpy_s(&UpdateCursorAnim_Params.PrevCursor, sizeof(UpdateCursorAnim_Params.PrevCursor), &PrevCursor, sizeof(PrevCursor));
	memcpy_s(&UpdateCursorAnim_Params.Cursor, sizeof(UpdateCursorAnim_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnUpdateCursorAnim, &UpdateCursorAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.EndAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMPreset::EndAnim()
{
	static UFunction* uFnEndAnim = nullptr;

	if (!uFnEndAnim)
	{
		uFnEndAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.EndAnim");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execEndAnim_Params EndAnim_Params;
	memset(&EndAnim_Params, 0, sizeof(EndAnim_Params));

	this->ProcessEvent(uFnEndAnim, &EndAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.StartAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMPreset::StartAnim()
{
	static UFunction* uFnStartAnim = nullptr;

	if (!uFnStartAnim)
	{
		uFnStartAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.StartAnim");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execStartAnim_Params StartAnim_Params;
	memset(&StartAnim_Params, 0, sizeof(StartAnim_Params));

	this->ProcessEvent(uFnStartAnim, &StartAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.IsMessageBoxActive
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMOMPreset::IsMessageBoxActive()
{
	static UFunction* uFnIsMessageBoxActive = nullptr;

	if (!uFnIsMessageBoxActive)
	{
		uFnIsMessageBoxActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.IsMessageBoxActive");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execIsMessageBoxActive_Params IsMessageBoxActive_Params;
	memset(&IsMessageBoxActive_Params, 0, sizeof(IsMessageBoxActive_Params));

	this->ProcessEvent(uFnIsMessageBoxActive, &IsMessageBoxActive_Params, nullptr);

	return IsMessageBoxActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.CloseMessageBox
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMPreset::CloseMessageBox()
{
	static UFunction* uFnCloseMessageBox = nullptr;

	if (!uFnCloseMessageBox)
	{
		uFnCloseMessageBox = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.CloseMessageBox");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execCloseMessageBox_Params CloseMessageBox_Params;
	memset(&CloseMessageBox_Params, 0, sizeof(CloseMessageBox_Params));

	this->ProcessEvent(uFnCloseMessageBox, &CloseMessageBox_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OpenMessageBox
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMPreset::OpenMessageBox()
{
	static UFunction* uFnOpenMessageBox = nullptr;

	if (!uFnOpenMessageBox)
	{
		uFnOpenMessageBox = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.OpenMessageBox");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execOpenMessageBox_Params OpenMessageBox_Params;
	memset(&OpenMessageBox_Params, 0, sizeof(OpenMessageBox_Params));

	this->ProcessEvent(uFnOpenMessageBox, &OpenMessageBox_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.DrawUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36607])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMPreset::DrawUpdateNative()
{
	static UFunction* uFnDrawUpdateNative = nullptr;

	if (!uFnDrawUpdateNative)
	{
		uFnDrawUpdateNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMPreset.DrawUpdateNative");
	}

	UREDGfxMoviePlayer_MenuMOMPreset_execDrawUpdateNative_Params DrawUpdateNative_Params;
	memset(&DrawUpdateNative_Params, 0, sizeof(DrawUpdateNative_Params));

	this->ProcessEvent(uFnDrawUpdateNative, &DrawUpdateNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuQuestList::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuQuestList_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.OnInitialize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuQuestList::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuQuestList_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.IsActive
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuQuestList::IsActive()
{
	static UFunction* uFnIsActive = nullptr;

	if (!uFnIsActive)
	{
		uFnIsActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.IsActive");
	}

	UREDGfxMoviePlayer_MenuQuestList_execIsActive_Params IsActive_Params;
	memset(&IsActive_Params, 0, sizeof(IsActive_Params));

	this->ProcessEvent(uFnIsActive, &IsActive_Params, nullptr);

	return IsActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.IsDisp
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuQuestList::IsDisp()
{
	static UFunction* uFnIsDisp = nullptr;

	if (!uFnIsDisp)
	{
		uFnIsDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.IsDisp");
	}

	UREDGfxMoviePlayer_MenuQuestList_execIsDisp_Params IsDisp_Params;
	memset(&IsDisp_Params, 0, sizeof(IsDisp_Params));

	this->ProcessEvent(uFnIsDisp, &IsDisp_Params, nullptr);

	return IsDisp_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.SwitchDisp
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuQuestList::SwitchDisp(bool disp)
{
	static UFunction* uFnSwitchDisp = nullptr;

	if (!uFnSwitchDisp)
	{
		uFnSwitchDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.SwitchDisp");
	}

	UREDGfxMoviePlayer_MenuQuestList_execSwitchDisp_Params SwitchDisp_Params;
	memset(&SwitchDisp_Params, 0, sizeof(SwitchDisp_Params));
	SwitchDisp_Params.disp = disp;

	this->ProcessEvent(uFnSwitchDisp, &SwitchDisp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.EndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuQuestList::EndMenu()
{
	static UFunction* uFnEndMenu = nullptr;

	if (!uFnEndMenu)
	{
		uFnEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.EndMenu");
	}

	UREDGfxMoviePlayer_MenuQuestList_execEndMenu_Params EndMenu_Params;
	memset(&EndMenu_Params, 0, sizeof(EndMenu_Params));

	this->ProcessEvent(uFnEndMenu, &EndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.StartMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       isCharaSelect                  (CPF_Parm)

void UREDGfxMoviePlayer_MenuQuestList::StartMenu(EUE_PLAYER_ID Player, bool isCharaSelect)
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.StartMenu");
	}

	UREDGfxMoviePlayer_MenuQuestList_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));
	memcpy_s(&StartMenu_Params.Player, sizeof(StartMenu_Params.Player), &Player, sizeof(Player));
	StartMenu_Params.isCharaSelect = isCharaSelect;

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.SetupText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  baseMC                         (CPF_Parm | CPF_NeedCtorLink)
// struct FQuestList_ItemParam    Param                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuQuestList::SetupText(const class FString& baseMC, const struct FQuestList_ItemParam& Param)
{
	static UFunction* uFnSetupText = nullptr;

	if (!uFnSetupText)
	{
		uFnSetupText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.SetupText");
	}

	UREDGfxMoviePlayer_MenuQuestList_execSetupText_Params SetupText_Params;
	memset(&SetupText_Params, 0, sizeof(SetupText_Params));
	memcpy_s(&SetupText_Params.baseMC, sizeof(SetupText_Params.baseMC), &baseMC, sizeof(baseMC));
	memcpy_s(&SetupText_Params.Param, sizeof(SetupText_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnSetupText, &SetupText_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuQuestList::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.Start");
	}

	UREDGfxMoviePlayer_MenuQuestList_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuQuestList.GetQuestList
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37146])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       isCharaSelect                  (CPF_Parm)
// class TArray<struct FQuestList_ItemParam> outList                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_MenuQuestList::GetQuestList(EUE_PLAYER_ID Player, bool isCharaSelect, class TArray<struct FQuestList_ItemParam>& outList)
{
	static UFunction* uFnGetQuestList = nullptr;

	if (!uFnGetQuestList)
	{
		uFnGetQuestList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuQuestList.GetQuestList");
	}

	UREDGfxMoviePlayer_MenuQuestList_execGetQuestList_Params GetQuestList_Params;
	memset(&GetQuestList_Params, 0, sizeof(GetQuestList_Params));
	memcpy_s(&GetQuestList_Params.Player, sizeof(GetQuestList_Params.Player), &Player, sizeof(Player));
	GetQuestList_Params.isCharaSelect = isCharaSelect;
	memcpy_s(&GetQuestList_Params.outList, sizeof(GetQuestList_Params.outList), &outList, sizeof(outList));

	this->ProcessEvent(uFnGetQuestList, &GetQuestList_Params, nullptr);

	memcpy_s(&outList, sizeof(outList), &GetQuestList_Params.outList, sizeof(GetQuestList_Params.outList));

	return GetQuestList_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateTimer(EUE_PLAYER_ID Player, int32_t Time)
{
	static UFunction* uFnUpdateTimer = nullptr;

	if (!uFnUpdateTimer)
	{
		uFnUpdateTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateTimer");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateTimer_Params UpdateTimer_Params;
	memset(&UpdateTimer_Params, 0, sizeof(UpdateTimer_Params));
	memcpy_s(&UpdateTimer_Params.Player, sizeof(UpdateTimer_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateTimer_Params.Time, sizeof(UpdateTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateTimer, &UpdateTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.SetReadWaitMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  MessageId                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuReadCard::SetReadWaitMessage(EUE_PLAYER_ID Player, const class FString& MessageId)
{
	static UFunction* uFnSetReadWaitMessage = nullptr;

	if (!uFnSetReadWaitMessage)
	{
		uFnSetReadWaitMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.SetReadWaitMessage");
	}

	UREDGfxMoviePlayer_MenuReadCard_execSetReadWaitMessage_Params SetReadWaitMessage_Params;
	memset(&SetReadWaitMessage_Params, 0, sizeof(SetReadWaitMessage_Params));
	memcpy_s(&SetReadWaitMessage_Params.Player, sizeof(SetReadWaitMessage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetReadWaitMessage_Params.MessageId, sizeof(SetReadWaitMessage_Params.MessageId), &MessageId, sizeof(MessageId));

	this->ProcessEvent(uFnSetReadWaitMessage, &SetReadWaitMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.CloseCommonMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::CloseCommonMessage(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCloseCommonMessage = nullptr;

	if (!uFnCloseCommonMessage)
	{
		uFnCloseCommonMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.CloseCommonMessage");
	}

	UREDGfxMoviePlayer_MenuReadCard_execCloseCommonMessage_Params CloseCommonMessage_Params;
	memset(&CloseCommonMessage_Params, 0, sizeof(CloseCommonMessage_Params));
	memcpy_s(&CloseCommonMessage_Params.Player, sizeof(CloseCommonMessage_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCloseCommonMessage, &CloseCommonMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.IsOpenCommonMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuReadCard::IsOpenCommonMessage(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsOpenCommonMessage = nullptr;

	if (!uFnIsOpenCommonMessage)
	{
		uFnIsOpenCommonMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.IsOpenCommonMessage");
	}

	UREDGfxMoviePlayer_MenuReadCard_execIsOpenCommonMessage_Params IsOpenCommonMessage_Params;
	memset(&IsOpenCommonMessage_Params, 0, sizeof(IsOpenCommonMessage_Params));
	memcpy_s(&IsOpenCommonMessage_Params.Player, sizeof(IsOpenCommonMessage_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsOpenCommonMessage, &IsOpenCommonMessage_Params, nullptr);

	return IsOpenCommonMessage_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateCommonMessage
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  MessageId                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  addMessage                     (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuReadCard::UpdateCommonMessage(EUE_PLAYER_ID Player, const class FString& MessageId, const class FString& addMessage)
{
	static UFunction* uFnUpdateCommonMessage = nullptr;

	if (!uFnUpdateCommonMessage)
	{
		uFnUpdateCommonMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateCommonMessage");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateCommonMessage_Params UpdateCommonMessage_Params;
	memset(&UpdateCommonMessage_Params, 0, sizeof(UpdateCommonMessage_Params));
	memcpy_s(&UpdateCommonMessage_Params.Player, sizeof(UpdateCommonMessage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateCommonMessage_Params.MessageId, sizeof(UpdateCommonMessage_Params.MessageId), &MessageId, sizeof(MessageId));
	memcpy_s(&UpdateCommonMessage_Params.addMessage, sizeof(UpdateCommonMessage_Params.addMessage), &addMessage, sizeof(addMessage));

	this->ProcessEvent(uFnUpdateCommonMessage, &UpdateCommonMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.OpenCommonMessage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  MessageId                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuReadCard::OpenCommonMessage(EUE_PLAYER_ID Player, const class FString& MessageId)
{
	static UFunction* uFnOpenCommonMessage = nullptr;

	if (!uFnOpenCommonMessage)
	{
		uFnOpenCommonMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.OpenCommonMessage");
	}

	UREDGfxMoviePlayer_MenuReadCard_execOpenCommonMessage_Params OpenCommonMessage_Params;
	memset(&OpenCommonMessage_Params, 0, sizeof(OpenCommonMessage_Params));
	memcpy_s(&OpenCommonMessage_Params.Player, sizeof(OpenCommonMessage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&OpenCommonMessage_Params.MessageId, sizeof(OpenCommonMessage_Params.MessageId), &MessageId, sizeof(MessageId));

	this->ProcessEvent(uFnOpenCommonMessage, &OpenCommonMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuReadCard_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateError
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Trigger                        (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FReadCard_Info          Info                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateError(bool Trigger, EUE_PLAYER_ID Player, struct FReadCard_Info& Info)
{
	static UFunction* uFnUpdateError = nullptr;

	if (!uFnUpdateError)
	{
		uFnUpdateError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateError");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateError_Params UpdateError_Params;
	memset(&UpdateError_Params, 0, sizeof(UpdateError_Params));
	UpdateError_Params.Trigger = Trigger;
	memcpy_s(&UpdateError_Params.Player, sizeof(UpdateError_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateError_Params.Info, sizeof(UpdateError_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnUpdateError, &UpdateError_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateError_Params.Info, sizeof(UpdateError_Params.Info));
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateEntry
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Trigger                        (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FReadCard_Info          Info                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateEntry(bool Trigger, EUE_PLAYER_ID Player, struct FReadCard_Info& Info)
{
	static UFunction* uFnUpdateEntry = nullptr;

	if (!uFnUpdateEntry)
	{
		uFnUpdateEntry = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateEntry");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateEntry_Params UpdateEntry_Params;
	memset(&UpdateEntry_Params, 0, sizeof(UpdateEntry_Params));
	UpdateEntry_Params.Trigger = Trigger;
	memcpy_s(&UpdateEntry_Params.Player, sizeof(UpdateEntry_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateEntry_Params.Info, sizeof(UpdateEntry_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnUpdateEntry, &UpdateEntry_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateEntry_Params.Info, sizeof(UpdateEntry_Params.Info));
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateEntryConfirm
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Trigger                        (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FReadCard_Info          Info                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateEntryConfirm(bool Trigger, EUE_PLAYER_ID Player, struct FReadCard_Info& Info)
{
	static UFunction* uFnUpdateEntryConfirm = nullptr;

	if (!uFnUpdateEntryConfirm)
	{
		uFnUpdateEntryConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateEntryConfirm");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateEntryConfirm_Params UpdateEntryConfirm_Params;
	memset(&UpdateEntryConfirm_Params, 0, sizeof(UpdateEntryConfirm_Params));
	UpdateEntryConfirm_Params.Trigger = Trigger;
	memcpy_s(&UpdateEntryConfirm_Params.Player, sizeof(UpdateEntryConfirm_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateEntryConfirm_Params.Info, sizeof(UpdateEntryConfirm_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnUpdateEntryConfirm, &UpdateEntryConfirm_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateEntryConfirm_Params.Info, sizeof(UpdateEntryConfirm_Params.Info));
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateReadEnd
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Trigger                        (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FReadCard_Info          Info                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateReadEnd(bool Trigger, EUE_PLAYER_ID Player, struct FReadCard_Info& Info)
{
	static UFunction* uFnUpdateReadEnd = nullptr;

	if (!uFnUpdateReadEnd)
	{
		uFnUpdateReadEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateReadEnd");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateReadEnd_Params UpdateReadEnd_Params;
	memset(&UpdateReadEnd_Params, 0, sizeof(UpdateReadEnd_Params));
	UpdateReadEnd_Params.Trigger = Trigger;
	memcpy_s(&UpdateReadEnd_Params.Player, sizeof(UpdateReadEnd_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateReadEnd_Params.Info, sizeof(UpdateReadEnd_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnUpdateReadEnd, &UpdateReadEnd_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateReadEnd_Params.Info, sizeof(UpdateReadEnd_Params.Info));
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateRead
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Trigger                        (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FReadCard_Info          Info                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateRead(bool Trigger, EUE_PLAYER_ID Player, struct FReadCard_Info& Info)
{
	static UFunction* uFnUpdateRead = nullptr;

	if (!uFnUpdateRead)
	{
		uFnUpdateRead = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateRead");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateRead_Params UpdateRead_Params;
	memset(&UpdateRead_Params, 0, sizeof(UpdateRead_Params));
	UpdateRead_Params.Trigger = Trigger;
	memcpy_s(&UpdateRead_Params.Player, sizeof(UpdateRead_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateRead_Params.Info, sizeof(UpdateRead_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnUpdateRead, &UpdateRead_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateRead_Params.Info, sizeof(UpdateRead_Params.Info));
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateReadWait
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Trigger                        (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FReadCard_Info          Info                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateReadWait(bool Trigger, EUE_PLAYER_ID Player, struct FReadCard_Info& Info)
{
	static UFunction* uFnUpdateReadWait = nullptr;

	if (!uFnUpdateReadWait)
	{
		uFnUpdateReadWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateReadWait");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateReadWait_Params UpdateReadWait_Params;
	memset(&UpdateReadWait_Params, 0, sizeof(UpdateReadWait_Params));
	UpdateReadWait_Params.Trigger = Trigger;
	memcpy_s(&UpdateReadWait_Params.Player, sizeof(UpdateReadWait_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateReadWait_Params.Info, sizeof(UpdateReadWait_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnUpdateReadWait, &UpdateReadWait_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateReadWait_Params.Info, sizeof(UpdateReadWait_Params.Info));
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateReadWaitSingle
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Trigger                        (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FReadCard_Info          Info                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateReadWaitSingle(bool Trigger, EUE_PLAYER_ID Player, struct FReadCard_Info& Info)
{
	static UFunction* uFnUpdateReadWaitSingle = nullptr;

	if (!uFnUpdateReadWaitSingle)
	{
		uFnUpdateReadWaitSingle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateReadWaitSingle");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateReadWaitSingle_Params UpdateReadWaitSingle_Params;
	memset(&UpdateReadWaitSingle_Params, 0, sizeof(UpdateReadWaitSingle_Params));
	UpdateReadWaitSingle_Params.Trigger = Trigger;
	memcpy_s(&UpdateReadWaitSingle_Params.Player, sizeof(UpdateReadWaitSingle_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateReadWaitSingle_Params.Info, sizeof(UpdateReadWaitSingle_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnUpdateReadWaitSingle, &UpdateReadWaitSingle_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateReadWaitSingle_Params.Info, sizeof(UpdateReadWaitSingle_Params.Info));
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateReadCheck
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Trigger                        (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FReadCard_Info          Info                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuReadCard::UpdateReadCheck(bool Trigger, EUE_PLAYER_ID Player, struct FReadCard_Info& Info)
{
	static UFunction* uFnUpdateReadCheck = nullptr;

	if (!uFnUpdateReadCheck)
	{
		uFnUpdateReadCheck = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.UpdateReadCheck");
	}

	UREDGfxMoviePlayer_MenuReadCard_execUpdateReadCheck_Params UpdateReadCheck_Params;
	memset(&UpdateReadCheck_Params, 0, sizeof(UpdateReadCheck_Params));
	UpdateReadCheck_Params.Trigger = Trigger;
	memcpy_s(&UpdateReadCheck_Params.Player, sizeof(UpdateReadCheck_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateReadCheck_Params.Info, sizeof(UpdateReadCheck_Params.Info), &Info, sizeof(Info));

	this->ProcessEvent(uFnUpdateReadCheck, &UpdateReadCheck_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateReadCheck_Params.Info, sizeof(UpdateReadCheck_Params.Info));
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.CloseAccessCodeMessage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReadCard::eventCloseAccessCodeMessage()
{
	static UFunction* uFnCloseAccessCodeMessage = nullptr;

	if (!uFnCloseAccessCodeMessage)
	{
		uFnCloseAccessCodeMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.CloseAccessCodeMessage");
	}

	UREDGfxMoviePlayer_MenuReadCard_eventCloseAccessCodeMessage_Params CloseAccessCodeMessage_Params;
	memset(&CloseAccessCodeMessage_Params, 0, sizeof(CloseAccessCodeMessage_Params));

	this->ProcessEvent(uFnCloseAccessCodeMessage, &CloseAccessCodeMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.OpenAccessCodeMessage
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  MessageId                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuReadCard::eventOpenAccessCodeMessage(const class FString& MessageId)
{
	static UFunction* uFnOpenAccessCodeMessage = nullptr;

	if (!uFnOpenAccessCodeMessage)
	{
		uFnOpenAccessCodeMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.OpenAccessCodeMessage");
	}

	UREDGfxMoviePlayer_MenuReadCard_eventOpenAccessCodeMessage_Params OpenAccessCodeMessage_Params;
	memset(&OpenAccessCodeMessage_Params, 0, sizeof(OpenAccessCodeMessage_Params));
	memcpy_s(&OpenAccessCodeMessage_Params.MessageId, sizeof(OpenAccessCodeMessage_Params.MessageId), &MessageId, sizeof(MessageId));

	this->ProcessEvent(uFnOpenAccessCodeMessage, &OpenAccessCodeMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.EndAccessCode
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReadCard::eventEndAccessCode()
{
	static UFunction* uFnEndAccessCode = nullptr;

	if (!uFnEndAccessCode)
	{
		uFnEndAccessCode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.EndAccessCode");
	}

	UREDGfxMoviePlayer_MenuReadCard_eventEndAccessCode_Params EndAccessCode_Params;
	memset(&EndAccessCode_Params, 0, sizeof(EndAccessCode_Params));

	this->ProcessEvent(uFnEndAccessCode, &EndAccessCode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.SetAccessCode
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Code                           (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuReadCard::eventSetAccessCode(const class FString& Code)
{
	static UFunction* uFnSetAccessCode = nullptr;

	if (!uFnSetAccessCode)
	{
		uFnSetAccessCode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.SetAccessCode");
	}

	UREDGfxMoviePlayer_MenuReadCard_eventSetAccessCode_Params SetAccessCode_Params;
	memset(&SetAccessCode_Params, 0, sizeof(SetAccessCode_Params));
	memcpy_s(&SetAccessCode_Params.Code, sizeof(SetAccessCode_Params.Code), &Code, sizeof(Code));

	this->ProcessEvent(uFnSetAccessCode, &SetAccessCode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.DispAccessCode
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::eventDispAccessCode(bool disp)
{
	static UFunction* uFnDispAccessCode = nullptr;

	if (!uFnDispAccessCode)
	{
		uFnDispAccessCode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.DispAccessCode");
	}

	UREDGfxMoviePlayer_MenuReadCard_eventDispAccessCode_Params DispAccessCode_Params;
	memset(&DispAccessCode_Params, 0, sizeof(DispAccessCode_Params));
	DispAccessCode_Params.disp = disp;

	this->ProcessEvent(uFnDispAccessCode, &DispAccessCode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.StartAccessCode
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReadCard::eventStartAccessCode()
{
	static UFunction* uFnStartAccessCode = nullptr;

	if (!uFnStartAccessCode)
	{
		uFnStartAccessCode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.StartAccessCode");
	}

	UREDGfxMoviePlayer_MenuReadCard_eventStartAccessCode_Params StartAccessCode_Params;
	memset(&StartAccessCode_Params, 0, sizeof(StartAccessCode_Params));

	this->ProcessEvent(uFnStartAccessCode, &StartAccessCode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.decide
// [0x00044003] (FUNC_Final | FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bReadCard                      (CPF_Parm)
// uint32_t                       isFirstPlay                    (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::decide(EUE_PLAYER_ID Player, bool bReadCard, bool isFirstPlay)
{
	static UFunction* uFndecide = nullptr;

	if (!uFndecide)
	{
		uFndecide = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.decide");
	}

	UREDGfxMoviePlayer_MenuReadCard_execdecide_Params decide_Params;
	memset(&decide_Params, 0, sizeof(decide_Params));
	memcpy_s(&decide_Params.Player, sizeof(decide_Params.Player), &Player, sizeof(Player));
	decide_Params.bReadCard = bReadCard;
	decide_Params.isFirstPlay = isFirstPlay;

	this->ProcessEvent(uFndecide, &decide_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.IsReadCard
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuReadCard::IsReadCard(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsReadCard = nullptr;

	if (!uFnIsReadCard)
	{
		uFnIsReadCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.IsReadCard");
	}

	UREDGfxMoviePlayer_MenuReadCard_execIsReadCard_Params IsReadCard_Params;
	memset(&IsReadCard_Params, 0, sizeof(IsReadCard_Params));
	memcpy_s(&IsReadCard_Params.Player, sizeof(IsReadCard_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsReadCard, &IsReadCard_Params, nullptr);

	return IsReadCard_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.IsReadEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuReadCard::IsReadEnd(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsReadEnd = nullptr;

	if (!uFnIsReadEnd)
	{
		uFnIsReadEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.IsReadEnd");
	}

	UREDGfxMoviePlayer_MenuReadCard_execIsReadEnd_Params IsReadEnd_Params;
	memset(&IsReadEnd_Params, 0, sizeof(IsReadEnd_Params));
	memcpy_s(&IsReadEnd_Params.Player, sizeof(IsReadEnd_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsReadEnd, &IsReadEnd_Params, nullptr);

	return IsReadEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.StartReadCard
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::StartReadCard(EUE_PLAYER_ID Player)
{
	static UFunction* uFnStartReadCard = nullptr;

	if (!uFnStartReadCard)
	{
		uFnStartReadCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.StartReadCard");
	}

	UREDGfxMoviePlayer_MenuReadCard_execStartReadCard_Params StartReadCard_Params;
	memset(&StartReadCard_Params, 0, sizeof(StartReadCard_Params));
	memcpy_s(&StartReadCard_Params.Player, sizeof(StartReadCard_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnStartReadCard, &StartReadCard_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReadCard::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuReadCard_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuReadCard::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Start");
	}

	UREDGfxMoviePlayer_MenuReadCard_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_ExclusiveError
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36182])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuReadCard::Check_ExclusiveError(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCheck_ExclusiveError = nullptr;

	if (!uFnCheck_ExclusiveError)
	{
		uFnCheck_ExclusiveError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_ExclusiveError");
	}

	UREDGfxMoviePlayer_MenuReadCard_execCheck_ExclusiveError_Params Check_ExclusiveError_Params;
	memset(&Check_ExclusiveError_Params, 0, sizeof(Check_ExclusiveError_Params));
	memcpy_s(&Check_ExclusiveError_Params.Player, sizeof(Check_ExclusiveError_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCheck_ExclusiveError, &Check_ExclusiveError_Params, nullptr);

	return Check_ExclusiveError_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_Online
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36183])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuReadCard::Check_Online()
{
	static UFunction* uFnCheck_Online = nullptr;

	if (!uFnCheck_Online)
	{
		uFnCheck_Online = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_Online");
	}

	UREDGfxMoviePlayer_MenuReadCard_execCheck_Online_Params Check_Online_Params;
	memset(&Check_Online_Params, 0, sizeof(Check_Online_Params));

	this->ProcessEvent(uFnCheck_Online, &Check_Online_Params, nullptr);

	return Check_Online_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_SingleNode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36186])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuReadCard::Check_SingleNode()
{
	static UFunction* uFnCheck_SingleNode = nullptr;

	if (!uFnCheck_SingleNode)
	{
		uFnCheck_SingleNode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_SingleNode");
	}

	UREDGfxMoviePlayer_MenuReadCard_execCheck_SingleNode_Params Check_SingleNode_Params;
	memset(&Check_SingleNode_Params, 0, sizeof(Check_SingleNode_Params));

	this->ProcessEvent(uFnCheck_SingleNode, &Check_SingleNode_Params, nullptr);

	return Check_SingleNode_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Req_SetupCard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39347])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       isFirstPlay                    (CPF_Parm)

bool UREDGfxMoviePlayer_MenuReadCard::Req_SetupCard(EUE_PLAYER_ID Player, bool isFirstPlay)
{
	static UFunction* uFnReq_SetupCard = nullptr;

	if (!uFnReq_SetupCard)
	{
		uFnReq_SetupCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Req_SetupCard");
	}

	UREDGfxMoviePlayer_MenuReadCard_execReq_SetupCard_Params Req_SetupCard_Params;
	memset(&Req_SetupCard_Params, 0, sizeof(Req_SetupCard_Params));
	memcpy_s(&Req_SetupCard_Params.Player, sizeof(Req_SetupCard_Params.Player), &Player, sizeof(Player));
	Req_SetupCard_Params.isFirstPlay = isFirstPlay;

	this->ProcessEvent(uFnReq_SetupCard, &Req_SetupCard_Params, nullptr);

	return Req_SetupCard_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_EntryCard
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36181])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        Error                          (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuReadCard::Check_EntryCard(EUE_PLAYER_ID Player, int32_t& Error)
{
	static UFunction* uFnCheck_EntryCard = nullptr;

	if (!uFnCheck_EntryCard)
	{
		uFnCheck_EntryCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_EntryCard");
	}

	UREDGfxMoviePlayer_MenuReadCard_execCheck_EntryCard_Params Check_EntryCard_Params;
	memset(&Check_EntryCard_Params, 0, sizeof(Check_EntryCard_Params));
	memcpy_s(&Check_EntryCard_Params.Player, sizeof(Check_EntryCard_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Check_EntryCard_Params.Error, sizeof(Check_EntryCard_Params.Error), &Error, sizeof(Error));

	this->ProcessEvent(uFnCheck_EntryCard, &Check_EntryCard_Params, nullptr);

	memcpy_s(&Error, sizeof(Error), &Check_EntryCard_Params.Error, sizeof(Check_EntryCard_Params.Error));

	return Check_EntryCard_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Req_EntryCard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39344])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::Req_EntryCard(EUE_PLAYER_ID Player)
{
	static UFunction* uFnReq_EntryCard = nullptr;

	if (!uFnReq_EntryCard)
	{
		uFnReq_EntryCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Req_EntryCard");
	}

	UREDGfxMoviePlayer_MenuReadCard_execReq_EntryCard_Params Req_EntryCard_Params;
	memset(&Req_EntryCard_Params, 0, sizeof(Req_EntryCard_Params));
	memcpy_s(&Req_EntryCard_Params.Player, sizeof(Req_EntryCard_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnReq_EntryCard, &Req_EntryCard_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_ReadCard
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36184])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        newCard                        (CPF_Parm | CPF_OutParm)
// int32_t                        Error                          (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuReadCard::Check_ReadCard(EUE_PLAYER_ID Player, int32_t& newCard, int32_t& Error)
{
	static UFunction* uFnCheck_ReadCard = nullptr;

	if (!uFnCheck_ReadCard)
	{
		uFnCheck_ReadCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_ReadCard");
	}

	UREDGfxMoviePlayer_MenuReadCard_execCheck_ReadCard_Params Check_ReadCard_Params;
	memset(&Check_ReadCard_Params, 0, sizeof(Check_ReadCard_Params));
	memcpy_s(&Check_ReadCard_Params.Player, sizeof(Check_ReadCard_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Check_ReadCard_Params.newCard, sizeof(Check_ReadCard_Params.newCard), &newCard, sizeof(newCard));
	memcpy_s(&Check_ReadCard_Params.Error, sizeof(Check_ReadCard_Params.Error), &Error, sizeof(Error));

	this->ProcessEvent(uFnCheck_ReadCard, &Check_ReadCard_Params, nullptr);

	memcpy_s(&newCard, sizeof(newCard), &Check_ReadCard_Params.newCard, sizeof(Check_ReadCard_Params.newCard));
	memcpy_s(&Error, sizeof(Error), &Check_ReadCard_Params.Error, sizeof(Check_ReadCard_Params.Error));

	return Check_ReadCard_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_ReadCardStart
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36185])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuReadCard::Check_ReadCardStart(EUE_PLAYER_ID Player)
{
	static UFunction* uFnCheck_ReadCardStart = nullptr;

	if (!uFnCheck_ReadCardStart)
	{
		uFnCheck_ReadCardStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Check_ReadCardStart");
	}

	UREDGfxMoviePlayer_MenuReadCard_execCheck_ReadCardStart_Params Check_ReadCardStart_Params;
	memset(&Check_ReadCardStart_Params, 0, sizeof(Check_ReadCardStart_Params));
	memcpy_s(&Check_ReadCardStart_Params.Player, sizeof(Check_ReadCardStart_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnCheck_ReadCardStart, &Check_ReadCardStart_Params, nullptr);

	return Check_ReadCardStart_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Req_ReadCardSkip
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39345])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::Req_ReadCardSkip(EUE_PLAYER_ID Player)
{
	static UFunction* uFnReq_ReadCardSkip = nullptr;

	if (!uFnReq_ReadCardSkip)
	{
		uFnReq_ReadCardSkip = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Req_ReadCardSkip");
	}

	UREDGfxMoviePlayer_MenuReadCard_execReq_ReadCardSkip_Params Req_ReadCardSkip_Params;
	memset(&Req_ReadCardSkip_Params, 0, sizeof(Req_ReadCardSkip_Params));
	memcpy_s(&Req_ReadCardSkip_Params.Player, sizeof(Req_ReadCardSkip_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnReq_ReadCardSkip, &Req_ReadCardSkip_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReadCard.Req_ReadCardStart
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39346])
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuReadCard::Req_ReadCardStart(EUE_PLAYER_ID Player)
{
	static UFunction* uFnReq_ReadCardStart = nullptr;

	if (!uFnReq_ReadCardStart)
	{
		uFnReq_ReadCardStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReadCard.Req_ReadCardStart");
	}

	UREDGfxMoviePlayer_MenuReadCard_execReq_ReadCardStart_Params Req_ReadCardStart_Params;
	memset(&Req_ReadCardStart_Params, 0, sizeof(Req_ReadCardStart_Params));
	memcpy_s(&Req_ReadCardStart_Params.Player, sizeof(Req_ReadCardStart_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnReq_ReadCardStart, &Req_ReadCardStart_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuContinue.SetCountDownTime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        oldTime                        (CPF_Parm)
// int32_t                        NewTime                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuContinue::SetCountDownTime(int32_t oldTime, int32_t NewTime)
{
	static UFunction* uFnSetCountDownTime = nullptr;

	if (!uFnSetCountDownTime)
	{
		uFnSetCountDownTime = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuContinue.SetCountDownTime");
	}

	UREDGfxMoviePlayer_MenuContinue_execSetCountDownTime_Params SetCountDownTime_Params;
	memset(&SetCountDownTime_Params, 0, sizeof(SetCountDownTime_Params));
	memcpy_s(&SetCountDownTime_Params.oldTime, sizeof(SetCountDownTime_Params.oldTime), &oldTime, sizeof(oldTime));
	memcpy_s(&SetCountDownTime_Params.NewTime, sizeof(SetCountDownTime_Params.NewTime), &NewTime, sizeof(NewTime));

	this->ProcessEvent(uFnSetCountDownTime, &SetCountDownTime_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuContinue.StartCountDown
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuContinue::StartCountDown()
{
	static UFunction* uFnStartCountDown = nullptr;

	if (!uFnStartCountDown)
	{
		uFnStartCountDown = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuContinue.StartCountDown");
	}

	UREDGfxMoviePlayer_MenuContinue_execStartCountDown_Params StartCountDown_Params;
	memset(&StartCountDown_Params, 0, sizeof(StartCountDown_Params));

	this->ProcessEvent(uFnStartCountDown, &StartCountDown_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuContinue.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuContinue::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuContinue.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuContinue_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuContinue.UpdateContinueEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuContinue::UpdateContinueEnd(bool bTrigger)
{
	static UFunction* uFnUpdateContinueEnd = nullptr;

	if (!uFnUpdateContinueEnd)
	{
		uFnUpdateContinueEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuContinue.UpdateContinueEnd");
	}

	UREDGfxMoviePlayer_MenuContinue_execUpdateContinueEnd_Params UpdateContinueEnd_Params;
	memset(&UpdateContinueEnd_Params, 0, sizeof(UpdateContinueEnd_Params));
	UpdateContinueEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateContinueEnd, &UpdateContinueEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuContinue.UpdateContinue
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuContinue::UpdateContinue(bool bTrigger)
{
	static UFunction* uFnUpdateContinue = nullptr;

	if (!uFnUpdateContinue)
	{
		uFnUpdateContinue = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuContinue.UpdateContinue");
	}

	UREDGfxMoviePlayer_MenuContinue_execUpdateContinue_Params UpdateContinue_Params;
	memset(&UpdateContinue_Params, 0, sizeof(UpdateContinue_Params));
	UpdateContinue_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateContinue, &UpdateContinue_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuContinue.UpdateContinueStart
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuContinue::UpdateContinueStart(bool bTrigger)
{
	static UFunction* uFnUpdateContinueStart = nullptr;

	if (!uFnUpdateContinueStart)
	{
		uFnUpdateContinueStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuContinue.UpdateContinueStart");
	}

	UREDGfxMoviePlayer_MenuContinue_execUpdateContinueStart_Params UpdateContinueStart_Params;
	memset(&UpdateContinueStart_Params, 0, sizeof(UpdateContinueStart_Params));
	UpdateContinueStart_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateContinueStart, &UpdateContinueStart_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuContinue.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuContinue::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuContinue.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuContinue_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuContinue.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuContinue::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuContinue.Start");
	}

	UREDGfxMoviePlayer_MenuContinue_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuDebugMenu::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuDebugMenu_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuDebugMenu::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuDebugMenu_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuDebugMenu::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuDebugMenu_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.UpdateDrawDebugMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40650])
// Parameter Info:

void UREDGfxMoviePlayer_MenuDebugMenu::UpdateDrawDebugMenu()
{
	static UFunction* uFnUpdateDrawDebugMenu = nullptr;

	if (!uFnUpdateDrawDebugMenu)
	{
		uFnUpdateDrawDebugMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.UpdateDrawDebugMenu");
	}

	UREDGfxMoviePlayer_MenuDebugMenu_execUpdateDrawDebugMenu_Params UpdateDrawDebugMenu_Params;
	memset(&UpdateDrawDebugMenu_Params, 0, sizeof(UpdateDrawDebugMenu_Params));

	this->ProcessEvent(uFnUpdateDrawDebugMenu, &UpdateDrawDebugMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.UpdateDebugMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40643])
// Parameter Info:

void UREDGfxMoviePlayer_MenuDebugMenu::UpdateDebugMenu()
{
	static UFunction* uFnUpdateDebugMenu = nullptr;

	if (!uFnUpdateDebugMenu)
	{
		uFnUpdateDebugMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.UpdateDebugMenu");
	}

	UREDGfxMoviePlayer_MenuDebugMenu_execUpdateDebugMenu_Params UpdateDebugMenu_Params;
	memset(&UpdateDebugMenu_Params, 0, sizeof(UpdateDebugMenu_Params));

	this->ProcessEvent(uFnUpdateDebugMenu, &UpdateDebugMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.InitDebugMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37513])
// Parameter Info:

void UREDGfxMoviePlayer_MenuDebugMenu::InitDebugMenu()
{
	static UFunction* uFnInitDebugMenu = nullptr;

	if (!uFnInitDebugMenu)
	{
		uFnInitDebugMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuDebugMenu.InitDebugMenu");
	}

	UREDGfxMoviePlayer_MenuDebugMenu_execInitDebugMenu_Params InitDebugMenu_Params;
	memset(&InitDebugMenu_Params, 0, sizeof(InitDebugMenu_Params));

	this->ProcessEvent(uFnInitDebugMenu, &InitDebugMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.OnFinalize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::OnFinalize()
{
	static UFunction* uFnOnFinalize = nullptr;

	if (!uFnOnFinalize)
	{
		uFnOnFinalize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.OnFinalize");
	}

	UREDGfxMoviePlayer_MenuGallery_execOnFinalize_Params OnFinalize_Params;
	memset(&OnFinalize_Params, 0, sizeof(OnFinalize_Params));

	this->ProcessEvent(uFnOnFinalize, &OnFinalize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuGallery_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.drawThumbnail
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::drawThumbnail()
{
	static UFunction* uFndrawThumbnail = nullptr;

	if (!uFndrawThumbnail)
	{
		uFndrawThumbnail = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.drawThumbnail");
	}

	UREDGfxMoviePlayer_MenuGallery_execdrawThumbnail_Params drawThumbnail_Params;
	memset(&drawThumbnail_Params, 0, sizeof(drawThumbnail_Params));

	this->ProcessEvent(uFndrawThumbnail, &drawThumbnail_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuGallery_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.funcMovie
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::funcMovie(bool bTrigger)
{
	static UFunction* uFnfuncMovie = nullptr;

	if (!uFnfuncMovie)
	{
		uFnfuncMovie = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.funcMovie");
	}

	UREDGfxMoviePlayer_MenuGallery_execfuncMovie_Params funcMovie_Params;
	memset(&funcMovie_Params, 0, sizeof(funcMovie_Params));
	funcMovie_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncMovie, &funcMovie_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.funcSoundPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)
// EGALLERY_STATE                 State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::funcSoundPlay(bool bTrigger, EGALLERY_STATE State)
{
	static UFunction* uFnfuncSoundPlay = nullptr;

	if (!uFnfuncSoundPlay)
	{
		uFnfuncSoundPlay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.funcSoundPlay");
	}

	UREDGfxMoviePlayer_MenuGallery_execfuncSoundPlay_Params funcSoundPlay_Params;
	memset(&funcSoundPlay_Params, 0, sizeof(funcSoundPlay_Params));
	funcSoundPlay_Params.bTrigger = bTrigger;
	memcpy_s(&funcSoundPlay_Params.State, sizeof(funcSoundPlay_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnfuncSoundPlay, &funcSoundPlay_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.funcSoundLoad
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)
// EGALLERY_STATE                 State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::funcSoundLoad(bool bTrigger, EGALLERY_STATE State)
{
	static UFunction* uFnfuncSoundLoad = nullptr;

	if (!uFnfuncSoundLoad)
	{
		uFnfuncSoundLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.funcSoundLoad");
	}

	UREDGfxMoviePlayer_MenuGallery_execfuncSoundLoad_Params funcSoundLoad_Params;
	memset(&funcSoundLoad_Params, 0, sizeof(funcSoundLoad_Params));
	funcSoundLoad_Params.bTrigger = bTrigger;
	memcpy_s(&funcSoundLoad_Params.State, sizeof(funcSoundLoad_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnfuncSoundLoad, &funcSoundLoad_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.funcView
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::funcView(bool bTrigger)
{
	static UFunction* uFnfuncView = nullptr;

	if (!uFnfuncView)
	{
		uFnfuncView = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.funcView");
	}

	UREDGfxMoviePlayer_MenuGallery_execfuncView_Params funcView_Params;
	memset(&funcView_Params, 0, sizeof(funcView_Params));
	funcView_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncView, &funcView_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.funcViewLoad
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::funcViewLoad(bool bTrigger)
{
	static UFunction* uFnfuncViewLoad = nullptr;

	if (!uFnfuncViewLoad)
	{
		uFnfuncViewLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.funcViewLoad");
	}

	UREDGfxMoviePlayer_MenuGallery_execfuncViewLoad_Params funcViewLoad_Params;
	memset(&funcViewLoad_Params, 0, sizeof(funcViewLoad_Params));
	funcViewLoad_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncViewLoad, &funcViewLoad_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.funcIdle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::funcIdle(bool bTrigger)
{
	static UFunction* uFnfuncIdle = nullptr;

	if (!uFnfuncIdle)
	{
		uFnfuncIdle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.funcIdle");
	}

	UREDGfxMoviePlayer_MenuGallery_execfuncIdle_Params funcIdle_Params;
	memset(&funcIdle_Params, 0, sizeof(funcIdle_Params));
	funcIdle_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncIdle, &funcIdle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.FactorDecision
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::FactorDecision()
{
	static UFunction* uFnFactorDecision = nullptr;

	if (!uFnFactorDecision)
	{
		uFnFactorDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.FactorDecision");
	}

	UREDGfxMoviePlayer_MenuGallery_execFactorDecision_Params FactorDecision_Params;
	memset(&FactorDecision_Params, 0, sizeof(FactorDecision_Params));

	this->ProcessEvent(uFnFactorDecision, &FactorDecision_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.IsFactorEnable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        factor                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuGallery::IsFactorEnable(int32_t factor)
{
	static UFunction* uFnIsFactorEnable = nullptr;

	if (!uFnIsFactorEnable)
	{
		uFnIsFactorEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.IsFactorEnable");
	}

	UREDGfxMoviePlayer_MenuGallery_execIsFactorEnable_Params IsFactorEnable_Params;
	memset(&IsFactorEnable_Params, 0, sizeof(IsFactorEnable_Params));
	memcpy_s(&IsFactorEnable_Params.factor, sizeof(IsFactorEnable_Params.factor), &factor, sizeof(factor));

	this->ProcessEvent(uFnIsFactorEnable, &IsFactorEnable_Params, nullptr);

	return IsFactorEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.CategoryChenge
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Add                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::eventCategoryChenge(int32_t Add)
{
	static UFunction* uFnCategoryChenge = nullptr;

	if (!uFnCategoryChenge)
	{
		uFnCategoryChenge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.CategoryChenge");
	}

	UREDGfxMoviePlayer_MenuGallery_eventCategoryChenge_Params CategoryChenge_Params;
	memset(&CategoryChenge_Params, 0, sizeof(CategoryChenge_Params));
	memcpy_s(&CategoryChenge_Params.Add, sizeof(CategoryChenge_Params.Add), &Add, sizeof(Add));

	this->ProcessEvent(uFnCategoryChenge, &CategoryChenge_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuGallery_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.ResourceFree
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::ResourceFree()
{
	static UFunction* uFnResourceFree = nullptr;

	if (!uFnResourceFree)
	{
		uFnResourceFree = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.ResourceFree");
	}

	UREDGfxMoviePlayer_MenuGallery_execResourceFree_Params ResourceFree_Params;
	memset(&ResourceFree_Params, 0, sizeof(ResourceFree_Params));

	this->ProcessEvent(uFnResourceFree, &ResourceFree_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.setupCategoryFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::setupCategoryFocus()
{
	static UFunction* uFnsetupCategoryFocus = nullptr;

	if (!uFnsetupCategoryFocus)
	{
		uFnsetupCategoryFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.setupCategoryFocus");
	}

	UREDGfxMoviePlayer_MenuGallery_execsetupCategoryFocus_Params setupCategoryFocus_Params;
	memset(&setupCategoryFocus_Params, 0, sizeof(setupCategoryFocus_Params));

	this->ProcessEvent(uFnsetupCategoryFocus, &setupCategoryFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.setupUserInfomation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::setupUserInfomation()
{
	static UFunction* uFnsetupUserInfomation = nullptr;

	if (!uFnsetupUserInfomation)
	{
		uFnsetupUserInfomation = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.setupUserInfomation");
	}

	UREDGfxMoviePlayer_MenuGallery_execsetupUserInfomation_Params setupUserInfomation_Params;
	memset(&setupUserInfomation_Params, 0, sizeof(setupUserInfomation_Params));

	this->ProcessEvent(uFnsetupUserInfomation, &setupUserInfomation_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.GetFactorPrice
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Category                       (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuGallery::eventGetFactorPrice(int32_t Category, int32_t Index)
{
	static UFunction* uFnGetFactorPrice = nullptr;

	if (!uFnGetFactorPrice)
	{
		uFnGetFactorPrice = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.GetFactorPrice");
	}

	UREDGfxMoviePlayer_MenuGallery_eventGetFactorPrice_Params GetFactorPrice_Params;
	memset(&GetFactorPrice_Params, 0, sizeof(GetFactorPrice_Params));
	memcpy_s(&GetFactorPrice_Params.Category, sizeof(GetFactorPrice_Params.Category), &Category, sizeof(Category));
	memcpy_s(&GetFactorPrice_Params.Index, sizeof(GetFactorPrice_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnGetFactorPrice, &GetFactorPrice_Params, nullptr);

	return GetFactorPrice_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.PopUp_OpenYesNo_Custom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39068])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuGallery::PopUp_OpenYesNo_Custom(EUE_PLAYER_ID Player, int32_t Index)
{
	static UFunction* uFnPopUp_OpenYesNo_Custom = nullptr;

	if (!uFnPopUp_OpenYesNo_Custom)
	{
		uFnPopUp_OpenYesNo_Custom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.PopUp_OpenYesNo_Custom");
	}

	UREDGfxMoviePlayer_MenuGallery_execPopUp_OpenYesNo_Custom_Params PopUp_OpenYesNo_Custom_Params;
	memset(&PopUp_OpenYesNo_Custom_Params, 0, sizeof(PopUp_OpenYesNo_Custom_Params));
	memcpy_s(&PopUp_OpenYesNo_Custom_Params.Player, sizeof(PopUp_OpenYesNo_Custom_Params.Player), &Player, sizeof(Player));
	memcpy_s(&PopUp_OpenYesNo_Custom_Params.Index, sizeof(PopUp_OpenYesNo_Custom_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnPopUp_OpenYesNo_Custom, &PopUp_OpenYesNo_Custom_Params, nullptr);

	return PopUp_OpenYesNo_Custom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.SetupArcadeOPED
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39817])
// Parameter Info:
// EBATTLE_DRAMA_ID               BattleDramaID                  (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::SetupArcadeOPED(EBATTLE_DRAMA_ID BattleDramaID)
{
	static UFunction* uFnSetupArcadeOPED = nullptr;

	if (!uFnSetupArcadeOPED)
	{
		uFnSetupArcadeOPED = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.SetupArcadeOPED");
	}

	UREDGfxMoviePlayer_MenuGallery_execSetupArcadeOPED_Params SetupArcadeOPED_Params;
	memset(&SetupArcadeOPED_Params, 0, sizeof(SetupArcadeOPED_Params));
	memcpy_s(&SetupArcadeOPED_Params.BattleDramaID, sizeof(SetupArcadeOPED_Params.BattleDramaID), &BattleDramaID, sizeof(BattleDramaID));

	this->ProcessEvent(uFnSetupArcadeOPED, &SetupArcadeOPED_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.StopGalleryVoice
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40100])
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::StopGalleryVoice()
{
	static UFunction* uFnStopGalleryVoice = nullptr;

	if (!uFnStopGalleryVoice)
	{
		uFnStopGalleryVoice = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.StopGalleryVoice");
	}

	UREDGfxMoviePlayer_MenuGallery_execStopGalleryVoice_Params StopGalleryVoice_Params;
	memset(&StopGalleryVoice_Params, 0, sizeof(StopGalleryVoice_Params));

	this->ProcessEvent(uFnStopGalleryVoice, &StopGalleryVoice_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.PlayGalleryVoice
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39028])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// class AActor*                  Actor                          (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::PlayGalleryVoice(const class FName& cueName, class AActor* Actor)
{
	static UFunction* uFnPlayGalleryVoice = nullptr;

	if (!uFnPlayGalleryVoice)
	{
		uFnPlayGalleryVoice = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.PlayGalleryVoice");
	}

	UREDGfxMoviePlayer_MenuGallery_execPlayGalleryVoice_Params PlayGalleryVoice_Params;
	memset(&PlayGalleryVoice_Params, 0, sizeof(PlayGalleryVoice_Params));
	memcpy_s(&PlayGalleryVoice_Params.cueName, sizeof(PlayGalleryVoice_Params.cueName), &cueName, sizeof(cueName));
	PlayGalleryVoice_Params.Actor = Actor;

	this->ProcessEvent(uFnPlayGalleryVoice, &PlayGalleryVoice_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.StopMovie
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[28957])
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::StopMovie()
{
	static UFunction* uFnStopMovie = nullptr;

	if (!uFnStopMovie)
	{
		uFnStopMovie = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.StopMovie");
	}

	UREDGfxMoviePlayer_MenuGallery_execStopMovie_Params StopMovie_Params;
	memset(&StopMovie_Params, 0, sizeof(StopMovie_Params));

	this->ProcessEvent(uFnStopMovie, &StopMovie_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.IsMoviePlaying
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37739])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_MenuGallery::IsMoviePlaying(const class FString& MovieName)
{
	static UFunction* uFnIsMoviePlaying = nullptr;

	if (!uFnIsMoviePlaying)
	{
		uFnIsMoviePlaying = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.IsMoviePlaying");
	}

	UREDGfxMoviePlayer_MenuGallery_execIsMoviePlaying_Params IsMoviePlaying_Params;
	memset(&IsMoviePlaying_Params, 0, sizeof(IsMoviePlaying_Params));
	memcpy_s(&IsMoviePlaying_Params.MovieName, sizeof(IsMoviePlaying_Params.MovieName), &MovieName, sizeof(MovieName));

	this->ProcessEvent(uFnIsMoviePlaying, &IsMoviePlaying_Params, nullptr);

	return IsMoviePlaying_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.IsMovieFinish
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37738])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_MenuGallery::IsMovieFinish(const class FString& MovieName)
{
	static UFunction* uFnIsMovieFinish = nullptr;

	if (!uFnIsMovieFinish)
	{
		uFnIsMovieFinish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.IsMovieFinish");
	}

	UREDGfxMoviePlayer_MenuGallery_execIsMovieFinish_Params IsMovieFinish_Params;
	memset(&IsMovieFinish_Params, 0, sizeof(IsMovieFinish_Params));
	memcpy_s(&IsMovieFinish_Params.MovieName, sizeof(IsMovieFinish_Params.MovieName), &MovieName, sizeof(MovieName));

	this->ProcessEvent(uFnIsMovieFinish, &IsMovieFinish_Params, nullptr);

	return IsMovieFinish_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.StartMovie
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40026])
// Parameter Info:
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuGallery::StartMovie(const class FString& MovieName)
{
	static UFunction* uFnStartMovie = nullptr;

	if (!uFnStartMovie)
	{
		uFnStartMovie = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.StartMovie");
	}

	UREDGfxMoviePlayer_MenuGallery_execStartMovie_Params StartMovie_Params;
	memset(&StartMovie_Params, 0, sizeof(StartMovie_Params));
	memcpy_s(&StartMovie_Params.MovieName, sizeof(StartMovie_Params.MovieName), &MovieName, sizeof(MovieName));

	this->ProcessEvent(uFnStartMovie, &StartMovie_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.CursorDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36378])
// Parameter Info:
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::CursorDraw(int32_t X, int32_t Y)
{
	static UFunction* uFnCursorDraw = nullptr;

	if (!uFnCursorDraw)
	{
		uFnCursorDraw = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.CursorDraw");
	}

	UREDGfxMoviePlayer_MenuGallery_execCursorDraw_Params CursorDraw_Params;
	memset(&CursorDraw_Params, 0, sizeof(CursorDraw_Params));
	memcpy_s(&CursorDraw_Params.X, sizeof(CursorDraw_Params.X), &X, sizeof(X));
	memcpy_s(&CursorDraw_Params.Y, sizeof(CursorDraw_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnCursorDraw, &CursorDraw_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.ThumbnailDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40223])
// Parameter Info:
// int32_t                        Category                       (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       isCur                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::ThumbnailDraw(int32_t Category, int32_t Index, int32_t X, int32_t Y, bool isCur)
{
	static UFunction* uFnThumbnailDraw = nullptr;

	if (!uFnThumbnailDraw)
	{
		uFnThumbnailDraw = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.ThumbnailDraw");
	}

	UREDGfxMoviePlayer_MenuGallery_execThumbnailDraw_Params ThumbnailDraw_Params;
	memset(&ThumbnailDraw_Params, 0, sizeof(ThumbnailDraw_Params));
	memcpy_s(&ThumbnailDraw_Params.Category, sizeof(ThumbnailDraw_Params.Category), &Category, sizeof(Category));
	memcpy_s(&ThumbnailDraw_Params.Index, sizeof(ThumbnailDraw_Params.Index), &Index, sizeof(Index));
	memcpy_s(&ThumbnailDraw_Params.X, sizeof(ThumbnailDraw_Params.X), &X, sizeof(X));
	memcpy_s(&ThumbnailDraw_Params.Y, sizeof(ThumbnailDraw_Params.Y), &Y, sizeof(Y));
	ThumbnailDraw_Params.isCur = isCur;

	this->ProcessEvent(uFnThumbnailDraw, &ThumbnailDraw_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.ThumbnailMaskDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40224])
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::ThumbnailMaskDraw()
{
	static UFunction* uFnThumbnailMaskDraw = nullptr;

	if (!uFnThumbnailMaskDraw)
	{
		uFnThumbnailMaskDraw = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.ThumbnailMaskDraw");
	}

	UREDGfxMoviePlayer_MenuGallery_execThumbnailMaskDraw_Params ThumbnailMaskDraw_Params;
	memset(&ThumbnailMaskDraw_Params, 0, sizeof(ThumbnailMaskDraw_Params));

	this->ProcessEvent(uFnThumbnailMaskDraw, &ThumbnailMaskDraw_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.UpdateViewerCurrent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40882])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Add                            (CPF_Parm)

bool UREDGfxMoviePlayer_MenuGallery::UpdateViewerCurrent(int32_t Add)
{
	static UFunction* uFnUpdateViewerCurrent = nullptr;

	if (!uFnUpdateViewerCurrent)
	{
		uFnUpdateViewerCurrent = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.UpdateViewerCurrent");
	}

	UREDGfxMoviePlayer_MenuGallery_execUpdateViewerCurrent_Params UpdateViewerCurrent_Params;
	memset(&UpdateViewerCurrent_Params, 0, sizeof(UpdateViewerCurrent_Params));
	memcpy_s(&UpdateViewerCurrent_Params.Add, sizeof(UpdateViewerCurrent_Params.Add), &Add, sizeof(Add));

	this->ProcessEvent(uFnUpdateViewerCurrent, &UpdateViewerCurrent_Params, nullptr);

	return UpdateViewerCurrent_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.UpdateViewerAxis
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40881])
// Parameter Info:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          Z                              (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::UpdateViewerAxis(float X, float Y, float Z)
{
	static UFunction* uFnUpdateViewerAxis = nullptr;

	if (!uFnUpdateViewerAxis)
	{
		uFnUpdateViewerAxis = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.UpdateViewerAxis");
	}

	UREDGfxMoviePlayer_MenuGallery_execUpdateViewerAxis_Params UpdateViewerAxis_Params;
	memset(&UpdateViewerAxis_Params, 0, sizeof(UpdateViewerAxis_Params));
	memcpy_s(&UpdateViewerAxis_Params.X, sizeof(UpdateViewerAxis_Params.X), &X, sizeof(X));
	memcpy_s(&UpdateViewerAxis_Params.Y, sizeof(UpdateViewerAxis_Params.Y), &Y, sizeof(Y));
	memcpy_s(&UpdateViewerAxis_Params.Z, sizeof(UpdateViewerAxis_Params.Z), &Z, sizeof(Z));

	this->ProcessEvent(uFnUpdateViewerAxis, &UpdateViewerAxis_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.InitViewer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37547])
// Parameter Info:
// class FString                  PackageName                    (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuGallery::InitViewer(const class FString& PackageName)
{
	static UFunction* uFnInitViewer = nullptr;

	if (!uFnInitViewer)
	{
		uFnInitViewer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.InitViewer");
	}

	UREDGfxMoviePlayer_MenuGallery_execInitViewer_Params InitViewer_Params;
	memset(&InitViewer_Params, 0, sizeof(InitViewer_Params));
	memcpy_s(&InitViewer_Params.PackageName, sizeof(InitViewer_Params.PackageName), &PackageName, sizeof(PackageName));

	this->ProcessEvent(uFnInitViewer, &InitViewer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.IsLoading
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37705])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuGallery::IsLoading()
{
	static UFunction* uFnIsLoading = nullptr;

	if (!uFnIsLoading)
	{
		uFnIsLoading = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.IsLoading");
	}

	UREDGfxMoviePlayer_MenuGallery_execIsLoading_Params IsLoading_Params;
	memset(&IsLoading_Params, 0, sizeof(IsLoading_Params));

	this->ProcessEvent(uFnIsLoading, &IsLoading_Params, nullptr);

	return IsLoading_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.PointPayment
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39056])
// Parameter Info:
// int32_t                        Point                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::PointPayment(int32_t Point)
{
	static UFunction* uFnPointPayment = nullptr;

	if (!uFnPointPayment)
	{
		uFnPointPayment = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.PointPayment");
	}

	UREDGfxMoviePlayer_MenuGallery_execPointPayment_Params PointPayment_Params;
	memset(&PointPayment_Params, 0, sizeof(PointPayment_Params));
	memcpy_s(&PointPayment_Params.Point, sizeof(PointPayment_Params.Point), &Point, sizeof(Point));

	this->ProcessEvent(uFnPointPayment, &PointPayment_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.CheckPurchase
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36206])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Point                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuGallery::CheckPurchase(int32_t Point)
{
	static UFunction* uFnCheckPurchase = nullptr;

	if (!uFnCheckPurchase)
	{
		uFnCheckPurchase = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.CheckPurchase");
	}

	UREDGfxMoviePlayer_MenuGallery_execCheckPurchase_Params CheckPurchase_Params;
	memset(&CheckPurchase_Params, 0, sizeof(CheckPurchase_Params));
	memcpy_s(&CheckPurchase_Params.Point, sizeof(CheckPurchase_Params.Point), &Point, sizeof(Point));

	this->ProcessEvent(uFnCheckPurchase, &CheckPurchase_Params, nullptr);

	return CheckPurchase_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.UpdateFactorState
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40671])
// Parameter Info:
// int32_t                        Category                       (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::UpdateFactorState(int32_t Category, int32_t Index, int32_t State)
{
	static UFunction* uFnUpdateFactorState = nullptr;

	if (!uFnUpdateFactorState)
	{
		uFnUpdateFactorState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.UpdateFactorState");
	}

	UREDGfxMoviePlayer_MenuGallery_execUpdateFactorState_Params UpdateFactorState_Params;
	memset(&UpdateFactorState_Params, 0, sizeof(UpdateFactorState_Params));
	memcpy_s(&UpdateFactorState_Params.Category, sizeof(UpdateFactorState_Params.Category), &Category, sizeof(Category));
	memcpy_s(&UpdateFactorState_Params.Index, sizeof(UpdateFactorState_Params.Index), &Index, sizeof(Index));
	memcpy_s(&UpdateFactorState_Params.State, sizeof(UpdateFactorState_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnUpdateFactorState, &UpdateFactorState_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.CheckFactorDecision
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36197])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Category                       (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuGallery::CheckFactorDecision(int32_t Category, int32_t Index)
{
	static UFunction* uFnCheckFactorDecision = nullptr;

	if (!uFnCheckFactorDecision)
	{
		uFnCheckFactorDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.CheckFactorDecision");
	}

	UREDGfxMoviePlayer_MenuGallery_execCheckFactorDecision_Params CheckFactorDecision_Params;
	memset(&CheckFactorDecision_Params, 0, sizeof(CheckFactorDecision_Params));
	memcpy_s(&CheckFactorDecision_Params.Category, sizeof(CheckFactorDecision_Params.Category), &Category, sizeof(Category));
	memcpy_s(&CheckFactorDecision_Params.Index, sizeof(CheckFactorDecision_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnCheckFactorDecision, &CheckFactorDecision_Params, nullptr);

	return CheckFactorDecision_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.GetUserOpenPer
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37191])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Open                           (CPF_Parm | CPF_OutParm)
// int32_t                        total                          (CPF_Parm | CPF_OutParm)

int32_t UREDGfxMoviePlayer_MenuGallery::GetUserOpenPer(int32_t& Open, int32_t& total)
{
	static UFunction* uFnGetUserOpenPer = nullptr;

	if (!uFnGetUserOpenPer)
	{
		uFnGetUserOpenPer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.GetUserOpenPer");
	}

	UREDGfxMoviePlayer_MenuGallery_execGetUserOpenPer_Params GetUserOpenPer_Params;
	memset(&GetUserOpenPer_Params, 0, sizeof(GetUserOpenPer_Params));
	memcpy_s(&GetUserOpenPer_Params.Open, sizeof(GetUserOpenPer_Params.Open), &Open, sizeof(Open));
	memcpy_s(&GetUserOpenPer_Params.total, sizeof(GetUserOpenPer_Params.total), &total, sizeof(total));

	this->ProcessEvent(uFnGetUserOpenPer, &GetUserOpenPer_Params, nullptr);

	memcpy_s(&Open, sizeof(Open), &GetUserOpenPer_Params.Open, sizeof(GetUserOpenPer_Params.Open));
	memcpy_s(&total, sizeof(total), &GetUserOpenPer_Params.total, sizeof(GetUserOpenPer_Params.total));

	return GetUserOpenPer_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.GetUserHavePoint
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37190])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuGallery::GetUserHavePoint()
{
	static UFunction* uFnGetUserHavePoint = nullptr;

	if (!uFnGetUserHavePoint)
	{
		uFnGetUserHavePoint = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.GetUserHavePoint");
	}

	UREDGfxMoviePlayer_MenuGallery_execGetUserHavePoint_Params GetUserHavePoint_Params;
	memset(&GetUserHavePoint_Params, 0, sizeof(GetUserHavePoint_Params));

	this->ProcessEvent(uFnGetUserHavePoint, &GetUserHavePoint_Params, nullptr);

	return GetUserHavePoint_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.execViewer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36785])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::execViewer(int32_t State)
{
	static UFunction* uFnexecViewer = nullptr;

	if (!uFnexecViewer)
	{
		uFnexecViewer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.execViewer");
	}

	UREDGfxMoviePlayer_MenuGallery_execexecViewer_Params execViewer_Params;
	memset(&execViewer_Params, 0, sizeof(execViewer_Params));
	memcpy_s(&execViewer_Params.State, sizeof(execViewer_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecViewer, &execViewer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.execScrollBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36783])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::execScrollBar(int32_t State)
{
	static UFunction* uFnexecScrollBar = nullptr;

	if (!uFnexecScrollBar)
	{
		uFnexecScrollBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.execScrollBar");
	}

	UREDGfxMoviePlayer_MenuGallery_execexecScrollBar_Params execScrollBar_Params;
	memset(&execScrollBar_Params, 0, sizeof(execScrollBar_Params));
	memcpy_s(&execScrollBar_Params.State, sizeof(execScrollBar_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecScrollBar, &execScrollBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.execCtrlBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36775])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::execCtrlBar(int32_t State)
{
	static UFunction* uFnexecCtrlBar = nullptr;

	if (!uFnexecCtrlBar)
	{
		uFnexecCtrlBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.execCtrlBar");
	}

	UREDGfxMoviePlayer_MenuGallery_execexecCtrlBar_Params execCtrlBar_Params;
	memset(&execCtrlBar_Params, 0, sizeof(execCtrlBar_Params));
	memcpy_s(&execCtrlBar_Params.State, sizeof(execCtrlBar_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecCtrlBar, &execCtrlBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.execInfoBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36780])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)
// int32_t                        Category                       (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::execInfoBar(int32_t State, int32_t Category, int32_t Index)
{
	static UFunction* uFnexecInfoBar = nullptr;

	if (!uFnexecInfoBar)
	{
		uFnexecInfoBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.execInfoBar");
	}

	UREDGfxMoviePlayer_MenuGallery_execexecInfoBar_Params execInfoBar_Params;
	memset(&execInfoBar_Params, 0, sizeof(execInfoBar_Params));
	memcpy_s(&execInfoBar_Params.State, sizeof(execInfoBar_Params.State), &State, sizeof(State));
	memcpy_s(&execInfoBar_Params.Category, sizeof(execInfoBar_Params.Category), &Category, sizeof(Category));
	memcpy_s(&execInfoBar_Params.Index, sizeof(execInfoBar_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnexecInfoBar, &execInfoBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.execFactorName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36778])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)
// class FString                  Message                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuGallery::execFactorName(int32_t State, const class FString& Message)
{
	static UFunction* uFnexecFactorName = nullptr;

	if (!uFnexecFactorName)
	{
		uFnexecFactorName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.execFactorName");
	}

	UREDGfxMoviePlayer_MenuGallery_execexecFactorName_Params execFactorName_Params;
	memset(&execFactorName_Params, 0, sizeof(execFactorName_Params));
	memcpy_s(&execFactorName_Params.State, sizeof(execFactorName_Params.State), &State, sizeof(State));
	memcpy_s(&execFactorName_Params.Message, sizeof(execFactorName_Params.Message), &Message, sizeof(Message));

	this->ProcessEvent(uFnexecFactorName, &execFactorName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.execDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36776])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuGallery::execDrawNative(int32_t State)
{
	static UFunction* uFnexecDrawNative = nullptr;

	if (!uFnexecDrawNative)
	{
		uFnexecDrawNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.execDrawNative");
	}

	UREDGfxMoviePlayer_MenuGallery_execexecDrawNative_Params execDrawNative_Params;
	memset(&execDrawNative_Params, 0, sizeof(execDrawNative_Params));
	memcpy_s(&execDrawNative_Params.State, sizeof(execDrawNative_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecDrawNative, &execDrawNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGallery.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuGallery::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGallery.InitializeNative");
	}

	UREDGfxMoviePlayer_MenuGallery_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGameOver.AS_Label
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuGameOver::AS_Label(const class FString& Label)
{
	static UFunction* uFnAS_Label = nullptr;

	if (!uFnAS_Label)
	{
		uFnAS_Label = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGameOver.AS_Label");
	}

	UREDGfxMoviePlayer_MenuGameOver_execAS_Label_Params AS_Label_Params;
	memset(&AS_Label_Params, 0, sizeof(AS_Label_Params));
	memcpy_s(&AS_Label_Params.Label, sizeof(AS_Label_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_Label, &AS_Label_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGameOver.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuGameOver::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGameOver.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuGameOver_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGameOver.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuGameOver::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGameOver.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuGameOver_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGameOver.EndMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36684])
// Parameter Info:

void UREDGfxMoviePlayer_MenuGameOver::EndMenu()
{
	static UFunction* uFnEndMenu = nullptr;

	if (!uFnEndMenu)
	{
		uFnEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGameOver.EndMenu");
	}

	UREDGfxMoviePlayer_MenuGameOver_execEndMenu_Params EndMenu_Params;
	memset(&EndMenu_Params, 0, sizeof(EndMenu_Params));

	this->ProcessEvent(uFnEndMenu, &EndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGameOver.UpdateMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40782])
// Parameter Info:

void UREDGfxMoviePlayer_MenuGameOver::UpdateMenu()
{
	static UFunction* uFnUpdateMenu = nullptr;

	if (!uFnUpdateMenu)
	{
		uFnUpdateMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGameOver.UpdateMenu");
	}

	UREDGfxMoviePlayer_MenuGameOver_execUpdateMenu_Params UpdateMenu_Params;
	memset(&UpdateMenu_Params, 0, sizeof(UpdateMenu_Params));

	this->ProcessEvent(uFnUpdateMenu, &UpdateMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuGameOver.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UREDGfxMoviePlayer_MenuGameOver::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuGameOver.InitMenu");
	}

	UREDGfxMoviePlayer_MenuGameOver_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuInterlude::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuInterlude_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuInterlude::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuInterlude_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.AS_Label
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuInterlude::AS_Label(const class FString& Label)
{
	static UFunction* uFnAS_Label = nullptr;

	if (!uFnAS_Label)
	{
		uFnAS_Label = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.AS_Label");
	}

	UREDGfxMoviePlayer_MenuInterlude_execAS_Label_Params AS_Label_Params;
	memset(&AS_Label_Params, 0, sizeof(AS_Label_Params));
	memcpy_s(&AS_Label_Params.Label, sizeof(AS_Label_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_Label, &AS_Label_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateEnd
// [0x00040001] (FUNC_Final | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuInterlude::UpdateEnd(bool bTrigger)
{
	static UFunction* uFnUpdateEnd = nullptr;

	if (!uFnUpdateEnd)
	{
		uFnUpdateEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateEnd");
	}

	UREDGfxMoviePlayer_MenuInterlude_execUpdateEnd_Params UpdateEnd_Params;
	memset(&UpdateEnd_Params, 0, sizeof(UpdateEnd_Params));
	UpdateEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEnd, &UpdateEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateEndWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuInterlude::UpdateEndWait(bool bTrigger)
{
	static UFunction* uFnUpdateEndWait = nullptr;

	if (!uFnUpdateEndWait)
	{
		uFnUpdateEndWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateEndWait");
	}

	UREDGfxMoviePlayer_MenuInterlude_execUpdateEndWait_Params UpdateEndWait_Params;
	memset(&UpdateEndWait_Params, 0, sizeof(UpdateEndWait_Params));
	UpdateEndWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEndWait, &UpdateEndWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateExec
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuInterlude::UpdateExec(bool bTrigger)
{
	static UFunction* uFnUpdateExec = nullptr;

	if (!uFnUpdateExec)
	{
		uFnUpdateExec = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateExec");
	}

	UREDGfxMoviePlayer_MenuInterlude_execUpdateExec_Params UpdateExec_Params;
	memset(&UpdateExec_Params, 0, sizeof(UpdateExec_Params));
	UpdateExec_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateExec, &UpdateExec_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateWaitCharaLoad
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuInterlude::UpdateWaitCharaLoad(bool bTrigger)
{
	static UFunction* uFnUpdateWaitCharaLoad = nullptr;

	if (!uFnUpdateWaitCharaLoad)
	{
		uFnUpdateWaitCharaLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateWaitCharaLoad");
	}

	UREDGfxMoviePlayer_MenuInterlude_execUpdateWaitCharaLoad_Params UpdateWaitCharaLoad_Params;
	memset(&UpdateWaitCharaLoad_Params, 0, sizeof(UpdateWaitCharaLoad_Params));
	UpdateWaitCharaLoad_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateWaitCharaLoad, &UpdateWaitCharaLoad_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateCharaLoad
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuInterlude::UpdateCharaLoad(bool bTrigger)
{
	static UFunction* uFnUpdateCharaLoad = nullptr;

	if (!uFnUpdateCharaLoad)
	{
		uFnUpdateCharaLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateCharaLoad");
	}

	UREDGfxMoviePlayer_MenuInterlude_execUpdateCharaLoad_Params UpdateCharaLoad_Params;
	memset(&UpdateCharaLoad_Params, 0, sizeof(UpdateCharaLoad_Params));
	UpdateCharaLoad_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateCharaLoad, &UpdateCharaLoad_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuInterlude::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuInterlude_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.BGMRequest
// [0x00824002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class FString                  cueName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  PackageName                    (CPF_OptionalParm | CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuInterlude::BGMRequest(const class FString& cueName, const class FString& PackageName)
{
	static UFunction* uFnBGMRequest = nullptr;

	if (!uFnBGMRequest)
	{
		uFnBGMRequest = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.BGMRequest");
	}

	UREDGfxMoviePlayer_MenuInterlude_execBGMRequest_Params BGMRequest_Params;
	memset(&BGMRequest_Params, 0, sizeof(BGMRequest_Params));
	memcpy_s(&BGMRequest_Params.cueName, sizeof(BGMRequest_Params.cueName), &cueName, sizeof(cueName));
	memcpy_s(&BGMRequest_Params.PackageName, sizeof(BGMRequest_Params.PackageName), &PackageName, sizeof(PackageName));

	this->ProcessEvent(uFnBGMRequest, &BGMRequest_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsPlayerPlateDebug
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37774])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuInterlude::IsPlayerPlateDebug()
{
	static UFunction* uFnIsPlayerPlateDebug = nullptr;

	if (!uFnIsPlayerPlateDebug)
	{
		uFnIsPlayerPlateDebug = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsPlayerPlateDebug");
	}

	UREDGfxMoviePlayer_MenuInterlude_execIsPlayerPlateDebug_Params IsPlayerPlateDebug_Params;
	memset(&IsPlayerPlateDebug_Params, 0, sizeof(IsPlayerPlateDebug_Params));

	this->ProcessEvent(uFnIsPlayerPlateDebug, &IsPlayerPlateDebug_Params, nullptr);

	return IsPlayerPlateDebug_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.MOM_FinishDispBaseRule
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38378])
// Parameter Info:

void UREDGfxMoviePlayer_MenuInterlude::MOM_FinishDispBaseRule()
{
	static UFunction* uFnMOM_FinishDispBaseRule = nullptr;

	if (!uFnMOM_FinishDispBaseRule)
	{
		uFnMOM_FinishDispBaseRule = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.MOM_FinishDispBaseRule");
	}

	UREDGfxMoviePlayer_MenuInterlude_execMOM_FinishDispBaseRule_Params MOM_FinishDispBaseRule_Params;
	memset(&MOM_FinishDispBaseRule_Params, 0, sizeof(MOM_FinishDispBaseRule_Params));

	this->ProcessEvent(uFnMOM_FinishDispBaseRule, &MOM_FinishDispBaseRule_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.MOM_IsDispBaseRule
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38380])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuInterlude::MOM_IsDispBaseRule()
{
	static UFunction* uFnMOM_IsDispBaseRule = nullptr;

	if (!uFnMOM_IsDispBaseRule)
	{
		uFnMOM_IsDispBaseRule = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.MOM_IsDispBaseRule");
	}

	UREDGfxMoviePlayer_MenuInterlude_execMOM_IsDispBaseRule_Params MOM_IsDispBaseRule_Params;
	memset(&MOM_IsDispBaseRule_Params, 0, sizeof(MOM_IsDispBaseRule_Params));

	this->ProcessEvent(uFnMOM_IsDispBaseRule, &MOM_IsDispBaseRule_Params, nullptr);

	return MOM_IsDispBaseRule_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsVSLoadComplete
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37928])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuInterlude::IsVSLoadComplete()
{
	static UFunction* uFnIsVSLoadComplete = nullptr;

	if (!uFnIsVSLoadComplete)
	{
		uFnIsVSLoadComplete = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsVSLoadComplete");
	}

	UREDGfxMoviePlayer_MenuInterlude_execIsVSLoadComplete_Params IsVSLoadComplete_Params;
	memset(&IsVSLoadComplete_Params, 0, sizeof(IsVSLoadComplete_Params));

	this->ProcessEvent(uFnIsVSLoadComplete, &IsVSLoadComplete_Params, nullptr);

	return IsVSLoadComplete_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateVSLoadPercent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40884])
// Parameter Info:
// int32_t                        Percent                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuInterlude::UpdateVSLoadPercent(int32_t Percent)
{
	static UFunction* uFnUpdateVSLoadPercent = nullptr;

	if (!uFnUpdateVSLoadPercent)
	{
		uFnUpdateVSLoadPercent = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateVSLoadPercent");
	}

	UREDGfxMoviePlayer_MenuInterlude_execUpdateVSLoadPercent_Params UpdateVSLoadPercent_Params;
	memset(&UpdateVSLoadPercent_Params, 0, sizeof(UpdateVSLoadPercent_Params));
	memcpy_s(&UpdateVSLoadPercent_Params.Percent, sizeof(UpdateVSLoadPercent_Params.Percent), &Percent, sizeof(Percent));

	this->ProcessEvent(uFnUpdateVSLoadPercent, &UpdateVSLoadPercent_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.RankMatch_IsUploadRCodeEnd
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39205])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuInterlude::RankMatch_IsUploadRCodeEnd()
{
	static UFunction* uFnRankMatch_IsUploadRCodeEnd = nullptr;

	if (!uFnRankMatch_IsUploadRCodeEnd)
	{
		uFnRankMatch_IsUploadRCodeEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.RankMatch_IsUploadRCodeEnd");
	}

	UREDGfxMoviePlayer_MenuInterlude_execRankMatch_IsUploadRCodeEnd_Params RankMatch_IsUploadRCodeEnd_Params;
	memset(&RankMatch_IsUploadRCodeEnd_Params, 0, sizeof(RankMatch_IsUploadRCodeEnd_Params));

	this->ProcessEvent(uFnRankMatch_IsUploadRCodeEnd, &RankMatch_IsUploadRCodeEnd_Params, nullptr);

	return RankMatch_IsUploadRCodeEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.RankMatch_UploadRCode
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39206])
// Parameter Info:

void UREDGfxMoviePlayer_MenuInterlude::RankMatch_UploadRCode()
{
	static UFunction* uFnRankMatch_UploadRCode = nullptr;

	if (!uFnRankMatch_UploadRCode)
	{
		uFnRankMatch_UploadRCode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.RankMatch_UploadRCode");
	}

	UREDGfxMoviePlayer_MenuInterlude_execRankMatch_UploadRCode_Params RankMatch_UploadRCode_Params;
	memset(&RankMatch_UploadRCode_Params, 0, sizeof(RankMatch_UploadRCode_Params));

	this->ProcessEvent(uFnRankMatch_UploadRCode, &RankMatch_UploadRCode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsRankMatchBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37811])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuInterlude::IsRankMatchBattle()
{
	static UFunction* uFnIsRankMatchBattle = nullptr;

	if (!uFnIsRankMatchBattle)
	{
		uFnIsRankMatchBattle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsRankMatchBattle");
	}

	UREDGfxMoviePlayer_MenuInterlude_execIsRankMatchBattle_Params IsRankMatchBattle_Params;
	memset(&IsRankMatchBattle_Params, 0, sizeof(IsRankMatchBattle_Params));

	this->ProcessEvent(uFnIsRankMatchBattle, &IsRankMatchBattle_Params, nullptr);

	return IsRankMatchBattle_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsNinteisen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37751])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuInterlude::IsNinteisen(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsNinteisen = nullptr;

	if (!uFnIsNinteisen)
	{
		uFnIsNinteisen = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsNinteisen");
	}

	UREDGfxMoviePlayer_MenuInterlude_execIsNinteisen_Params IsNinteisen_Params;
	memset(&IsNinteisen_Params, 0, sizeof(IsNinteisen_Params));
	memcpy_s(&IsNinteisen_Params.Player, sizeof(IsNinteisen_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsNinteisen, &IsNinteisen_Params, nullptr);

	return IsNinteisen_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.VSStartTrigger
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40986])
// Parameter Info:

void UREDGfxMoviePlayer_MenuInterlude::VSStartTrigger()
{
	static UFunction* uFnVSStartTrigger = nullptr;

	if (!uFnVSStartTrigger)
	{
		uFnVSStartTrigger = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.VSStartTrigger");
	}

	UREDGfxMoviePlayer_MenuInterlude_execVSStartTrigger_Params VSStartTrigger_Params;
	memset(&VSStartTrigger_Params, 0, sizeof(VSStartTrigger_Params));

	this->ProcessEvent(uFnVSStartTrigger, &VSStartTrigger_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40649])
// Parameter Info:

void UREDGfxMoviePlayer_MenuInterlude::UpdateDraw()
{
	static UFunction* uFnUpdateDraw = nullptr;

	if (!uFnUpdateDraw)
	{
		uFnUpdateDraw = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.UpdateDraw");
	}

	UREDGfxMoviePlayer_MenuInterlude_execUpdateDraw_Params UpdateDraw_Params;
	memset(&UpdateDraw_Params, 0, sizeof(UpdateDraw_Params));

	this->ProcessEvent(uFnUpdateDraw, &UpdateDraw_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsRankdownMatch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37807])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuInterlude::IsRankdownMatch(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRankdownMatch = nullptr;

	if (!uFnIsRankdownMatch)
	{
		uFnIsRankdownMatch = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsRankdownMatch");
	}

	UREDGfxMoviePlayer_MenuInterlude_execIsRankdownMatch_Params IsRankdownMatch_Params;
	memset(&IsRankdownMatch_Params, 0, sizeof(IsRankdownMatch_Params));
	memcpy_s(&IsRankdownMatch_Params.Player, sizeof(IsRankdownMatch_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRankdownMatch, &IsRankdownMatch_Params, nullptr);

	return IsRankdownMatch_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsRankupMatch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37815])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuInterlude::IsRankupMatch(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsRankupMatch = nullptr;

	if (!uFnIsRankupMatch)
	{
		uFnIsRankupMatch = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsRankupMatch");
	}

	UREDGfxMoviePlayer_MenuInterlude_execIsRankupMatch_Params IsRankupMatch_Params;
	memset(&IsRankupMatch_Params, 0, sizeof(IsRankupMatch_Params));
	memcpy_s(&IsRankupMatch_Params.Player, sizeof(IsRankupMatch_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsRankupMatch, &IsRankupMatch_Params, nullptr);

	return IsRankupMatch_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.ProcAsyncLoading
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39146])
// Parameter Info:
// float                          Time                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuInterlude::ProcAsyncLoading(float Time)
{
	static UFunction* uFnProcAsyncLoading = nullptr;

	if (!uFnProcAsyncLoading)
	{
		uFnProcAsyncLoading = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.ProcAsyncLoading");
	}

	UREDGfxMoviePlayer_MenuInterlude_execProcAsyncLoading_Params ProcAsyncLoading_Params;
	memset(&ProcAsyncLoading_Params, 0, sizeof(ProcAsyncLoading_Params));
	memcpy_s(&ProcAsyncLoading_Params.Time, sizeof(ProcAsyncLoading_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnProcAsyncLoading, &ProcAsyncLoading_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsAsyncLoading
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37599])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuInterlude::IsAsyncLoading()
{
	static UFunction* uFnIsAsyncLoading = nullptr;

	if (!uFnIsAsyncLoading)
	{
		uFnIsAsyncLoading = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuInterlude.IsAsyncLoading");
	}

	UREDGfxMoviePlayer_MenuInterlude_execIsAsyncLoading_Params IsAsyncLoading_Params;
	memset(&IsAsyncLoading_Params, 0, sizeof(IsAsyncLoading_Params));

	this->ProcessEvent(uFnIsAsyncLoading, &IsAsyncLoading_Params, nullptr);

	return IsAsyncLoading_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.SetNetworkTitle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  SetText                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuMainMenu::SetNetworkTitle(const class FString& SetText)
{
	static UFunction* uFnSetNetworkTitle = nullptr;

	if (!uFnSetNetworkTitle)
	{
		uFnSetNetworkTitle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.SetNetworkTitle");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execSetNetworkTitle_Params SetNetworkTitle_Params;
	memset(&SetNetworkTitle_Params, 0, sizeof(SetNetworkTitle_Params));
	memcpy_s(&SetNetworkTitle_Params.SetText, sizeof(SetNetworkTitle_Params.SetText), &SetText, sizeof(SetText));

	this->ProcessEvent(uFnSetNetworkTitle, &SetNetworkTitle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.OnFinalize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::OnFinalize()
{
	static UFunction* uFnOnFinalize = nullptr;

	if (!uFnOnFinalize)
	{
		uFnOnFinalize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.OnFinalize");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execOnFinalize_Params OnFinalize_Params;
	memset(&OnFinalize_Params, 0, sizeof(OnFinalize_Params));

	this->ProcessEvent(uFnOnFinalize, &OnFinalize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcExit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcExit(bool bTrigger)
{
	static UFunction* uFnfuncExit = nullptr;

	if (!uFnfuncExit)
	{
		uFnfuncExit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcExit");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncExit_Params funcExit_Params;
	memset(&funcExit_Params, 0, sizeof(funcExit_Params));
	funcExit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncExit, &funcExit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcTournament
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcTournament(bool bTrigger)
{
	static UFunction* uFnfuncTournament = nullptr;

	if (!uFnfuncTournament)
	{
		uFnfuncTournament = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcTournament");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncTournament_Params funcTournament_Params;
	memset(&funcTournament_Params, 0, sizeof(funcTournament_Params));
	funcTournament_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncTournament, &funcTournament_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcLinkStore
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcLinkStore(bool bTrigger, int32_t State)
{
	static UFunction* uFnfuncLinkStore = nullptr;

	if (!uFnfuncLinkStore)
	{
		uFnfuncLinkStore = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcLinkStore");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncLinkStore_Params funcLinkStore_Params;
	memset(&funcLinkStore_Params, 0, sizeof(funcLinkStore_Params));
	funcLinkStore_Params.bTrigger = bTrigger;
	memcpy_s(&funcLinkStore_Params.State, sizeof(funcLinkStore_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnfuncLinkStore, &funcLinkStore_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcMOM
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcMOM(bool bTrigger)
{
	static UFunction* uFnfuncMOM = nullptr;

	if (!uFnfuncMOM)
	{
		uFnfuncMOM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcMOM");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncMOM_Params funcMOM_Params;
	memset(&funcMOM_Params, 0, sizeof(funcMOM_Params));
	funcMOM_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncMOM, &funcMOM_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcReplay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcReplay(bool bTrigger)
{
	static UFunction* uFnfuncReplay = nullptr;

	if (!uFnfuncReplay)
	{
		uFnfuncReplay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcReplay");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncReplay_Params funcReplay_Params;
	memset(&funcReplay_Params, 0, sizeof(funcReplay_Params));
	funcReplay_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncReplay, &funcReplay_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcStory2
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcStory2(bool bTrigger)
{
	static UFunction* uFnfuncStory2 = nullptr;

	if (!uFnfuncStory2)
	{
		uFnfuncStory2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcStory2");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncStory2_Params funcStory2_Params;
	memset(&funcStory2_Params, 0, sizeof(funcStory2_Params));
	funcStory2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncStory2, &funcStory2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcStory
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcStory(bool bTrigger)
{
	static UFunction* uFnfuncStory = nullptr;

	if (!uFnfuncStory)
	{
		uFnfuncStory = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcStory");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncStory_Params funcStory_Params;
	memset(&funcStory_Params, 0, sizeof(funcStory_Params));
	funcStory_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncStory, &funcStory_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcNetwork
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcNetwork(bool bTrigger)
{
	static UFunction* uFnfuncNetwork = nullptr;

	if (!uFnfuncNetwork)
	{
		uFnfuncNetwork = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcNetwork");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncNetwork_Params funcNetwork_Params;
	memset(&funcNetwork_Params, 0, sizeof(funcNetwork_Params));
	funcNetwork_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncNetwork, &funcNetwork_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcEntrySelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcEntrySelect(bool bTrigger)
{
	static UFunction* uFnfuncEntrySelect = nullptr;

	if (!uFnfuncEntrySelect)
	{
		uFnfuncEntrySelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcEntrySelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncEntrySelect_Params funcEntrySelect_Params;
	memset(&funcEntrySelect_Params, 0, sizeof(funcEntrySelect_Params));
	funcEntrySelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncEntrySelect, &funcEntrySelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.endControllerSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::endControllerSelect()
{
	static UFunction* uFnendControllerSelect = nullptr;

	if (!uFnendControllerSelect)
	{
		uFnendControllerSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.endControllerSelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execendControllerSelect_Params endControllerSelect_Params;
	memset(&endControllerSelect_Params, 0, sizeof(endControllerSelect_Params));

	this->ProcessEvent(uFnendControllerSelect, &endControllerSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.moveController
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Id                             (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::moveController(int32_t Id, int32_t Type)
{
	static UFunction* uFnmoveController = nullptr;

	if (!uFnmoveController)
	{
		uFnmoveController = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.moveController");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execmoveController_Params moveController_Params;
	memset(&moveController_Params, 0, sizeof(moveController_Params));
	memcpy_s(&moveController_Params.Id, sizeof(moveController_Params.Id), &Id, sizeof(Id));
	memcpy_s(&moveController_Params.Type, sizeof(moveController_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnmoveController, &moveController_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateControllerSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::updateControllerSelect()
{
	static UFunction* uFnupdateControllerSelect = nullptr;

	if (!uFnupdateControllerSelect)
	{
		uFnupdateControllerSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateControllerSelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execupdateControllerSelect_Params updateControllerSelect_Params;
	memset(&updateControllerSelect_Params, 0, sizeof(updateControllerSelect_Params));

	this->ProcessEvent(uFnupdateControllerSelect, &updateControllerSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.startControllerSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::startControllerSelect()
{
	static UFunction* uFnstartControllerSelect = nullptr;

	if (!uFnstartControllerSelect)
	{
		uFnstartControllerSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.startControllerSelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execstartControllerSelect_Params startControllerSelect_Params;
	memset(&startControllerSelect_Params, 0, sizeof(startControllerSelect_Params));

	this->ProcessEvent(uFnstartControllerSelect, &startControllerSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.EntryDecision
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::EntryDecision()
{
	static UFunction* uFnEntryDecision = nullptr;

	if (!uFnEntryDecision)
	{
		uFnEntryDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.EntryDecision");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execEntryDecision_Params EntryDecision_Params;
	memset(&EntryDecision_Params, 0, sizeof(EntryDecision_Params));

	this->ProcessEvent(uFnEntryDecision, &EntryDecision_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcNews
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcNews(bool bTrigger)
{
	static UFunction* uFnfuncNews = nullptr;

	if (!uFnfuncNews)
	{
		uFnfuncNews = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcNews");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncNews_Params funcNews_Params;
	memset(&funcNews_Params, 0, sizeof(funcNews_Params));
	funcNews_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncNews, &funcNews_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.HotNewsViewChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       flg                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::HotNewsViewChange(bool flg)
{
	static UFunction* uFnHotNewsViewChange = nullptr;

	if (!uFnHotNewsViewChange)
	{
		uFnHotNewsViewChange = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.HotNewsViewChange");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execHotNewsViewChange_Params HotNewsViewChange_Params;
	memset(&HotNewsViewChange_Params, 0, sizeof(HotNewsViewChange_Params));
	HotNewsViewChange_Params.flg = flg;

	this->ProcessEvent(uFnHotNewsViewChange, &HotNewsViewChange_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcIdle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::funcIdle(bool bTrigger)
{
	static UFunction* uFnfuncIdle = nullptr;

	if (!uFnfuncIdle)
	{
		uFnfuncIdle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.funcIdle");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execfuncIdle_Params funcIdle_Params;
	memset(&funcIdle_Params, 0, sizeof(funcIdle_Params));
	funcIdle_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncIdle, &funcIdle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateSubGear
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::updateSubGear()
{
	static UFunction* uFnupdateSubGear = nullptr;

	if (!uFnupdateSubGear)
	{
		uFnupdateSubGear = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateSubGear");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execupdateSubGear_Params updateSubGear_Params;
	memset(&updateSubGear_Params, 0, sizeof(updateSubGear_Params));

	this->ProcessEvent(uFnupdateSubGear, &updateSubGear_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.SetupSubGearRotation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)
// int32_t                        subIndex                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::SetupSubGearRotation(int32_t Type, int32_t subIndex)
{
	static UFunction* uFnSetupSubGearRotation = nullptr;

	if (!uFnSetupSubGearRotation)
	{
		uFnSetupSubGearRotation = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.SetupSubGearRotation");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execSetupSubGearRotation_Params SetupSubGearRotation_Params;
	memset(&SetupSubGearRotation_Params, 0, sizeof(SetupSubGearRotation_Params));
	memcpy_s(&SetupSubGearRotation_Params.Type, sizeof(SetupSubGearRotation_Params.Type), &Type, sizeof(Type));
	memcpy_s(&SetupSubGearRotation_Params.subIndex, sizeof(SetupSubGearRotation_Params.subIndex), &subIndex, sizeof(subIndex));

	this->ProcessEvent(uFnSetupSubGearRotation, &SetupSubGearRotation_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateSubFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::updateSubFocus()
{
	static UFunction* uFnupdateSubFocus = nullptr;

	if (!uFnupdateSubFocus)
	{
		uFnupdateSubFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateSubFocus");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execupdateSubFocus_Params updateSubFocus_Params;
	memset(&updateSubFocus_Params, 0, sizeof(updateSubFocus_Params));

	this->ProcessEvent(uFnupdateSubFocus, &updateSubFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateSubCategory
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::updateSubCategory()
{
	static UFunction* uFnupdateSubCategory = nullptr;

	if (!uFnupdateSubCategory)
	{
		uFnupdateSubCategory = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateSubCategory");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execupdateSubCategory_Params updateSubCategory_Params;
	memset(&updateSubCategory_Params, 0, sizeof(updateSubCategory_Params));

	this->ProcessEvent(uFnupdateSubCategory, &updateSubCategory_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateMainCategory
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::updateMainCategory()
{
	static UFunction* uFnupdateMainCategory = nullptr;

	if (!uFnupdateMainCategory)
	{
		uFnupdateMainCategory = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.updateMainCategory");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execupdateMainCategory_Params updateMainCategory_Params;
	memset(&updateMainCategory_Params, 0, sizeof(updateMainCategory_Params));

	this->ProcessEvent(uFnupdateMainCategory, &updateMainCategory_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.ModeDecision
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        main_c                         (CPF_Parm)
// int32_t                        sub_c                          (CPF_Parm)
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::ModeDecision(int32_t main_c, int32_t sub_c, int32_t State)
{
	static UFunction* uFnModeDecision = nullptr;

	if (!uFnModeDecision)
	{
		uFnModeDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.ModeDecision");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execModeDecision_Params ModeDecision_Params;
	memset(&ModeDecision_Params, 0, sizeof(ModeDecision_Params));
	memcpy_s(&ModeDecision_Params.main_c, sizeof(ModeDecision_Params.main_c), &main_c, sizeof(main_c));
	memcpy_s(&ModeDecision_Params.sub_c, sizeof(ModeDecision_Params.sub_c), &sub_c, sizeof(sub_c));
	memcpy_s(&ModeDecision_Params.State, sizeof(ModeDecision_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnModeDecision, &ModeDecision_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.StartNetwork
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ENETMANAGER_STARTMENU          Start                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::StartNetwork(ENETMANAGER_STARTMENU Start)
{
	static UFunction* uFnStartNetwork = nullptr;

	if (!uFnStartNetwork)
	{
		uFnStartNetwork = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.StartNetwork");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execStartNetwork_Params StartNetwork_Params;
	memset(&StartNetwork_Params, 0, sizeof(StartNetwork_Params));
	memcpy_s(&StartNetwork_Params.Start, sizeof(StartNetwork_Params.Start), &Start, sizeof(Start));

	this->ProcessEvent(uFnStartNetwork, &StartNetwork_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.startMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::startMainMenu()
{
	static UFunction* uFnstartMainMenu = nullptr;

	if (!uFnstartMainMenu)
	{
		uFnstartMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.startMainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execstartMainMenu_Params startMainMenu_Params;
	memset(&startMainMenu_Params, 0, sizeof(startMainMenu_Params));

	this->ProcessEvent(uFnstartMainMenu, &startMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.setupSubCategory
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::setupSubCategory()
{
	static UFunction* uFnsetupSubCategory = nullptr;

	if (!uFnsetupSubCategory)
	{
		uFnsetupSubCategory = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.setupSubCategory");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execsetupSubCategory_Params setupSubCategory_Params;
	memset(&setupSubCategory_Params, 0, sizeof(setupSubCategory_Params));

	this->ProcessEvent(uFnsetupSubCategory, &setupSubCategory_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.setupMainCategoryColor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Category                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::setupMainCategoryColor(int32_t Category)
{
	static UFunction* uFnsetupMainCategoryColor = nullptr;

	if (!uFnsetupMainCategoryColor)
	{
		uFnsetupMainCategoryColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.setupMainCategoryColor");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execsetupMainCategoryColor_Params setupMainCategoryColor_Params;
	memset(&setupMainCategoryColor_Params, 0, sizeof(setupMainCategoryColor_Params));
	memcpy_s(&setupMainCategoryColor_Params.Category, sizeof(setupMainCategoryColor_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnsetupMainCategoryColor, &setupMainCategoryColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.setupMainCategory
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::setupMainCategory()
{
	static UFunction* uFnsetupMainCategory = nullptr;

	if (!uFnsetupMainCategory)
	{
		uFnsetupMainCategory = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.setupMainCategory");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execsetupMainCategory_Params setupMainCategory_Params;
	memset(&setupMainCategory_Params, 0, sizeof(setupMainCategory_Params));

	this->ProcessEvent(uFnsetupMainCategory, &setupMainCategory_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.setupMainFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       flg                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::setupMainFocus(bool flg)
{
	static UFunction* uFnsetupMainFocus = nullptr;

	if (!uFnsetupMainFocus)
	{
		uFnsetupMainFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.setupMainFocus");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execsetupMainFocus_Params setupMainFocus_Params;
	memset(&setupMainFocus_Params, 0, sizeof(setupMainFocus_Params));
	setupMainFocus_Params.flg = flg;

	this->ProcessEvent(uFnsetupMainFocus, &setupMainFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncTournament
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40689])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsGotoLobby                    (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuMainMenu::UpdateFuncTournament(bool bTrigger, int32_t& IsGotoLobby)
{
	static UFunction* uFnUpdateFuncTournament = nullptr;

	if (!uFnUpdateFuncTournament)
	{
		uFnUpdateFuncTournament = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncTournament");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execUpdateFuncTournament_Params UpdateFuncTournament_Params;
	memset(&UpdateFuncTournament_Params, 0, sizeof(UpdateFuncTournament_Params));
	UpdateFuncTournament_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateFuncTournament_Params.IsGotoLobby, sizeof(UpdateFuncTournament_Params.IsGotoLobby), &IsGotoLobby, sizeof(IsGotoLobby));

	this->ProcessEvent(uFnUpdateFuncTournament, &UpdateFuncTournament_Params, nullptr);

	memcpy_s(&IsGotoLobby, sizeof(IsGotoLobby), &UpdateFuncTournament_Params.IsGotoLobby, sizeof(UpdateFuncTournament_Params.IsGotoLobby));

	return UpdateFuncTournament_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncLinkStore
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40683])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuMainMenu::UpdateFuncLinkStore(bool bTrigger)
{
	static UFunction* uFnUpdateFuncLinkStore = nullptr;

	if (!uFnUpdateFuncLinkStore)
	{
		uFnUpdateFuncLinkStore = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncLinkStore");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execUpdateFuncLinkStore_Params UpdateFuncLinkStore_Params;
	memset(&UpdateFuncLinkStore_Params, 0, sizeof(UpdateFuncLinkStore_Params));
	UpdateFuncLinkStore_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateFuncLinkStore, &UpdateFuncLinkStore_Params, nullptr);

	return UpdateFuncLinkStore_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncMOM
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40684])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu::UpdateFuncMOM(bool bTrigger)
{
	static UFunction* uFnUpdateFuncMOM = nullptr;

	if (!uFnUpdateFuncMOM)
	{
		uFnUpdateFuncMOM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncMOM");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execUpdateFuncMOM_Params UpdateFuncMOM_Params;
	memset(&UpdateFuncMOM_Params, 0, sizeof(UpdateFuncMOM_Params));
	UpdateFuncMOM_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateFuncMOM, &UpdateFuncMOM_Params, nullptr);

	return UpdateFuncMOM_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncReplay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40686])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu::UpdateFuncReplay(bool bTrigger)
{
	static UFunction* uFnUpdateFuncReplay = nullptr;

	if (!uFnUpdateFuncReplay)
	{
		uFnUpdateFuncReplay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncReplay");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execUpdateFuncReplay_Params UpdateFuncReplay_Params;
	memset(&UpdateFuncReplay_Params, 0, sizeof(UpdateFuncReplay_Params));
	UpdateFuncReplay_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateFuncReplay, &UpdateFuncReplay_Params, nullptr);

	return UpdateFuncReplay_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncStory2
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40688])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsOK                           (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuMainMenu::UpdateFuncStory2(bool bTrigger, int32_t& IsOK)
{
	static UFunction* uFnUpdateFuncStory2 = nullptr;

	if (!uFnUpdateFuncStory2)
	{
		uFnUpdateFuncStory2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncStory2");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execUpdateFuncStory2_Params UpdateFuncStory2_Params;
	memset(&UpdateFuncStory2_Params, 0, sizeof(UpdateFuncStory2_Params));
	UpdateFuncStory2_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateFuncStory2_Params.IsOK, sizeof(UpdateFuncStory2_Params.IsOK), &IsOK, sizeof(IsOK));

	this->ProcessEvent(uFnUpdateFuncStory2, &UpdateFuncStory2_Params, nullptr);

	memcpy_s(&IsOK, sizeof(IsOK), &UpdateFuncStory2_Params.IsOK, sizeof(UpdateFuncStory2_Params.IsOK));

	return UpdateFuncStory2_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncStory
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40687])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu::UpdateFuncStory(bool bTrigger)
{
	static UFunction* uFnUpdateFuncStory = nullptr;

	if (!uFnUpdateFuncStory)
	{
		uFnUpdateFuncStory = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UpdateFuncStory");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execUpdateFuncStory_Params UpdateFuncStory_Params;
	memset(&UpdateFuncStory_Params, 0, sizeof(UpdateFuncStory_Params));
	UpdateFuncStory_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateFuncStory, &UpdateFuncStory_Params, nullptr);

	return UpdateFuncStory_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsR2LobbyEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37803])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu::IsR2LobbyEnable()
{
	static UFunction* uFnIsR2LobbyEnable = nullptr;

	if (!uFnIsR2LobbyEnable)
	{
		uFnIsR2LobbyEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsR2LobbyEnable");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execIsR2LobbyEnable_Params IsR2LobbyEnable_Params;
	memset(&IsR2LobbyEnable_Params, 0, sizeof(IsR2LobbyEnable_Params));

	this->ProcessEvent(uFnIsR2LobbyEnable, &IsR2LobbyEnable_Params, nullptr);

	return IsR2LobbyEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsRankMatchEntry
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37813])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu::IsRankMatchEntry()
{
	static UFunction* uFnIsRankMatchEntry = nullptr;

	if (!uFnIsRankMatchEntry)
	{
		uFnIsRankMatchEntry = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsRankMatchEntry");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execIsRankMatchEntry_Params IsRankMatchEntry_Params;
	memset(&IsRankMatchEntry_Params, 0, sizeof(IsRankMatchEntry_Params));

	this->ProcessEvent(uFnIsRankMatchEntry, &IsRankMatchEntry_Params, nullptr);

	return IsRankMatchEntry_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsGalleryPlayEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37676])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu::IsGalleryPlayEnable()
{
	static UFunction* uFnIsGalleryPlayEnable = nullptr;

	if (!uFnIsGalleryPlayEnable)
	{
		uFnIsGalleryPlayEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsGalleryPlayEnable");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execIsGalleryPlayEnable_Params IsGalleryPlayEnable_Params;
	memset(&IsGalleryPlayEnable_Params, 0, sizeof(IsGalleryPlayEnable_Params));

	this->ProcessEvent(uFnIsGalleryPlayEnable, &IsGalleryPlayEnable_Params, nullptr);

	return IsGalleryPlayEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsStoryPlayEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37874])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu::IsStoryPlayEnable()
{
	static UFunction* uFnIsStoryPlayEnable = nullptr;

	if (!uFnIsStoryPlayEnable)
	{
		uFnIsStoryPlayEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsStoryPlayEnable");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execIsStoryPlayEnable_Params IsStoryPlayEnable_Params;
	memset(&IsStoryPlayEnable_Params, 0, sizeof(IsStoryPlayEnable_Params));

	this->ProcessEvent(uFnIsStoryPlayEnable, &IsStoryPlayEnable_Params, nullptr);

	return IsStoryPlayEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsModeDecisionEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37726])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Main                           (CPF_Parm)
// int32_t                        sub                            (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu::IsModeDecisionEnable(int32_t Main, int32_t sub)
{
	static UFunction* uFnIsModeDecisionEnable = nullptr;

	if (!uFnIsModeDecisionEnable)
	{
		uFnIsModeDecisionEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsModeDecisionEnable");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execIsModeDecisionEnable_Params IsModeDecisionEnable_Params;
	memset(&IsModeDecisionEnable_Params, 0, sizeof(IsModeDecisionEnable_Params));
	memcpy_s(&IsModeDecisionEnable_Params.Main, sizeof(IsModeDecisionEnable_Params.Main), &Main, sizeof(Main));
	memcpy_s(&IsModeDecisionEnable_Params.sub, sizeof(IsModeDecisionEnable_Params.sub), &sub, sizeof(sub));

	this->ProcessEvent(uFnIsModeDecisionEnable, &IsModeDecisionEnable_Params, nullptr);

	return IsModeDecisionEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsRegionJP_MainMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37818])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu::IsRegionJP_MainMenu()
{
	static UFunction* uFnIsRegionJP_MainMenu = nullptr;

	if (!uFnIsRegionJP_MainMenu)
	{
		uFnIsRegionJP_MainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsRegionJP_MainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execIsRegionJP_MainMenu_Params IsRegionJP_MainMenu_Params;
	memset(&IsRegionJP_MainMenu_Params, 0, sizeof(IsRegionJP_MainMenu_Params));

	this->ProcessEvent(uFnIsRegionJP_MainMenu, &IsRegionJP_MainMenu_Params, nullptr);

	return IsRegionJP_MainMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.LinkStoreJumpPopup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38009])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::LinkStoreJumpPopup()
{
	static UFunction* uFnLinkStoreJumpPopup = nullptr;

	if (!uFnLinkStoreJumpPopup)
	{
		uFnLinkStoreJumpPopup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.LinkStoreJumpPopup");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execLinkStoreJumpPopup_Params LinkStoreJumpPopup_Params;
	memset(&LinkStoreJumpPopup_Params, 0, sizeof(LinkStoreJumpPopup_Params));

	this->ProcessEvent(uFnLinkStoreJumpPopup, &LinkStoreJumpPopup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UnLockMessagePopup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40586])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::UnLockMessagePopup()
{
	static UFunction* uFnUnLockMessagePopup = nullptr;

	if (!uFnUnLockMessagePopup)
	{
		uFnUnLockMessagePopup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.UnLockMessagePopup");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execUnLockMessagePopup_Params UnLockMessagePopup_Params;
	memset(&UnLockMessagePopup_Params, 0, sizeof(UnLockMessagePopup_Params));

	this->ProcessEvent(uFnUnLockMessagePopup, &UnLockMessagePopup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.CheckRespectDisablePopup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36207])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::CheckRespectDisablePopup()
{
	static UFunction* uFnCheckRespectDisablePopup = nullptr;

	if (!uFnCheckRespectDisablePopup)
	{
		uFnCheckRespectDisablePopup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.CheckRespectDisablePopup");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execCheckRespectDisablePopup_Params CheckRespectDisablePopup_Params;
	memset(&CheckRespectDisablePopup_Params, 0, sizeof(CheckRespectDisablePopup_Params));

	this->ProcessEvent(uFnCheckRespectDisablePopup, &CheckRespectDisablePopup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsRespectEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37826])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu::IsRespectEnable()
{
	static UFunction* uFnIsRespectEnable = nullptr;

	if (!uFnIsRespectEnable)
	{
		uFnIsRespectEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.IsRespectEnable");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execIsRespectEnable_Params IsRespectEnable_Params;
	memset(&IsRespectEnable_Params, 0, sizeof(IsRespectEnable_Params));

	this->ProcessEvent(uFnIsRespectEnable, &IsRespectEnable_Params, nullptr);

	return IsRespectEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.ModeDecisionLightBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38360])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::ModeDecisionLightBar()
{
	static UFunction* uFnModeDecisionLightBar = nullptr;

	if (!uFnModeDecisionLightBar)
	{
		uFnModeDecisionLightBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.ModeDecisionLightBar");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execModeDecisionLightBar_Params ModeDecisionLightBar_Params;
	memset(&ModeDecisionLightBar_Params, 0, sizeof(ModeDecisionLightBar_Params));

	this->ProcessEvent(uFnModeDecisionLightBar, &ModeDecisionLightBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.SetupCardData
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39825])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::SetupCardData()
{
	static UFunction* uFnSetupCardData = nullptr;

	if (!uFnSetupCardData)
	{
		uFnSetupCardData = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.SetupCardData");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execSetupCardData_Params SetupCardData_Params;
	memset(&SetupCardData_Params, 0, sizeof(SetupCardData_Params));

	this->ProcessEvent(uFnSetupCardData, &SetupCardData_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.PopUpMenuInit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39072])
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::PopUpMenuInit(int32_t Type)
{
	static UFunction* uFnPopUpMenuInit = nullptr;

	if (!uFnPopUpMenuInit)
	{
		uFnPopUpMenuInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.PopUpMenuInit");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execPopUpMenuInit_Params PopUpMenuInit_Params;
	memset(&PopUpMenuInit_Params, 0, sizeof(PopUpMenuInit_Params));
	memcpy_s(&PopUpMenuInit_Params.Type, sizeof(PopUpMenuInit_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnPopUpMenuInit, &PopUpMenuInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.execCtrlBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36775])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::execCtrlBar(int32_t State)
{
	static UFunction* uFnexecCtrlBar = nullptr;

	if (!uFnexecCtrlBar)
	{
		uFnexecCtrlBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.execCtrlBar");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execexecCtrlBar_Params execCtrlBar_Params;
	memset(&execCtrlBar_Params, 0, sizeof(execCtrlBar_Params));
	memcpy_s(&execCtrlBar_Params.State, sizeof(execCtrlBar_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecCtrlBar, &execCtrlBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.execInfoBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36780])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::execInfoBar(int32_t State)
{
	static UFunction* uFnexecInfoBar = nullptr;

	if (!uFnexecInfoBar)
	{
		uFnexecInfoBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.execInfoBar");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execexecInfoBar_Params execInfoBar_Params;
	memset(&execInfoBar_Params, 0, sizeof(execInfoBar_Params));
	memcpy_s(&execInfoBar_Params.State, sizeof(execInfoBar_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecInfoBar, &execInfoBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.execDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36776])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::execDrawNative(int32_t State)
{
	static UFunction* uFnexecDrawNative = nullptr;

	if (!uFnexecDrawNative)
	{
		uFnexecDrawNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.execDrawNative");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execexecDrawNative_Params execDrawNative_Params;
	memset(&execDrawNative_Params, 0, sizeof(execDrawNative_Params));
	memcpy_s(&execDrawNative_Params.State, sizeof(execDrawNative_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecDrawNative, &execDrawNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.execUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36784])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu::execUpdateNative(int32_t State)
{
	static UFunction* uFnexecUpdateNative = nullptr;

	if (!uFnexecUpdateNative)
	{
		uFnexecUpdateNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.execUpdateNative");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execexecUpdateNative_Params execUpdateNative_Params;
	memset(&execUpdateNative_Params, 0, sizeof(execUpdateNative_Params));
	memcpy_s(&execUpdateNative_Params.State, sizeof(execUpdateNative_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecUpdateNative, &execUpdateNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.InitializeInMainMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37524])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::InitializeInMainMenu()
{
	static UFunction* uFnInitializeInMainMenu = nullptr;

	if (!uFnInitializeInMainMenu)
	{
		uFnInitializeInMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.InitializeInMainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execInitializeInMainMenu_Params InitializeInMainMenu_Params;
	memset(&InitializeInMainMenu_Params, 0, sizeof(InitializeInMainMenu_Params));

	this->ProcessEvent(uFnInitializeInMainMenu, &InitializeInMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu.InitializeNative");
	}

	UREDGfxMoviePlayer_MenuMainMenu_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OnFinalize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::OnFinalize()
{
	static UFunction* uFnOnFinalize = nullptr;

	if (!uFnOnFinalize)
	{
		uFnOnFinalize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OnFinalize");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execOnFinalize_Params OnFinalize_Params;
	memset(&OnFinalize_Params, 0, sizeof(OnFinalize_Params));

	this->ProcessEvent(uFnOnFinalize, &OnFinalize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcExit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcExit(bool bTrigger)
{
	static UFunction* uFnfuncExit = nullptr;

	if (!uFnfuncExit)
	{
		uFnfuncExit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcExit");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncExit_Params funcExit_Params;
	memset(&funcExit_Params, 0, sizeof(funcExit_Params));
	funcExit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncExit, &funcExit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcClose
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcClose(bool bTrigger)
{
	static UFunction* uFnfuncClose = nullptr;

	if (!uFnfuncClose)
	{
		uFnfuncClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcClose");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncClose_Params funcClose_Params;
	memset(&funcClose_Params, 0, sizeof(funcClose_Params));
	funcClose_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncClose, &funcClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcFigure
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcFigure(bool bTrigger)
{
	static UFunction* uFnfuncFigure = nullptr;

	if (!uFnfuncFigure)
	{
		uFnfuncFigure = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcFigure");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncFigure_Params funcFigure_Params;
	memset(&funcFigure_Params, 0, sizeof(funcFigure_Params));
	funcFigure_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncFigure, &funcFigure_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcMOM
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcMOM(bool bTrigger)
{
	static UFunction* uFnfuncMOM = nullptr;

	if (!uFnfuncMOM)
	{
		uFnfuncMOM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcMOM");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncMOM_Params funcMOM_Params;
	memset(&funcMOM_Params, 0, sizeof(funcMOM_Params));
	funcMOM_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncMOM, &funcMOM_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcReplay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcReplay(bool bTrigger)
{
	static UFunction* uFnfuncReplay = nullptr;

	if (!uFnfuncReplay)
	{
		uFnfuncReplay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcReplay");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncReplay_Params funcReplay_Params;
	memset(&funcReplay_Params, 0, sizeof(funcReplay_Params));
	funcReplay_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncReplay, &funcReplay_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcTutorial
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcTutorial(bool bTrigger)
{
	static UFunction* uFnfuncTutorial = nullptr;

	if (!uFnfuncTutorial)
	{
		uFnfuncTutorial = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcTutorial");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncTutorial_Params funcTutorial_Params;
	memset(&funcTutorial_Params, 0, sizeof(funcTutorial_Params));
	funcTutorial_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncTutorial, &funcTutorial_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcStory2
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcStory2(bool bTrigger)
{
	static UFunction* uFnfuncStory2 = nullptr;

	if (!uFnfuncStory2)
	{
		uFnfuncStory2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcStory2");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncStory2_Params funcStory2_Params;
	memset(&funcStory2_Params, 0, sizeof(funcStory2_Params));
	funcStory2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncStory2, &funcStory2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcStory
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcStory(bool bTrigger)
{
	static UFunction* uFnfuncStory = nullptr;

	if (!uFnfuncStory)
	{
		uFnfuncStory = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcStory");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncStory_Params funcStory_Params;
	memset(&funcStory_Params, 0, sizeof(funcStory_Params));
	funcStory_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncStory, &funcStory_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcNetwork
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcNetwork(bool bTrigger)
{
	static UFunction* uFnfuncNetwork = nullptr;

	if (!uFnfuncNetwork)
	{
		uFnfuncNetwork = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcNetwork");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncNetwork_Params funcNetwork_Params;
	memset(&funcNetwork_Params, 0, sizeof(funcNetwork_Params));
	funcNetwork_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncNetwork, &funcNetwork_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcEntrySelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcEntrySelect(bool bTrigger)
{
	static UFunction* uFnfuncEntrySelect = nullptr;

	if (!uFnfuncEntrySelect)
	{
		uFnfuncEntrySelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcEntrySelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncEntrySelect_Params funcEntrySelect_Params;
	memset(&funcEntrySelect_Params, 0, sizeof(funcEntrySelect_Params));
	funcEntrySelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncEntrySelect, &funcEntrySelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.endControllerSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::endControllerSelect()
{
	static UFunction* uFnendControllerSelect = nullptr;

	if (!uFnendControllerSelect)
	{
		uFnendControllerSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.endControllerSelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execendControllerSelect_Params endControllerSelect_Params;
	memset(&endControllerSelect_Params, 0, sizeof(endControllerSelect_Params));

	this->ProcessEvent(uFnendControllerSelect, &endControllerSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.moveController
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Id                             (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::moveController(int32_t Id, int32_t Type)
{
	static UFunction* uFnmoveController = nullptr;

	if (!uFnmoveController)
	{
		uFnmoveController = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.moveController");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execmoveController_Params moveController_Params;
	memset(&moveController_Params, 0, sizeof(moveController_Params));
	memcpy_s(&moveController_Params.Id, sizeof(moveController_Params.Id), &Id, sizeof(Id));
	memcpy_s(&moveController_Params.Type, sizeof(moveController_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnmoveController, &moveController_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.updateControllerSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::updateControllerSelect()
{
	static UFunction* uFnupdateControllerSelect = nullptr;

	if (!uFnupdateControllerSelect)
	{
		uFnupdateControllerSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.updateControllerSelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execupdateControllerSelect_Params updateControllerSelect_Params;
	memset(&updateControllerSelect_Params, 0, sizeof(updateControllerSelect_Params));

	this->ProcessEvent(uFnupdateControllerSelect, &updateControllerSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.startControllerSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::startControllerSelect()
{
	static UFunction* uFnstartControllerSelect = nullptr;

	if (!uFnstartControllerSelect)
	{
		uFnstartControllerSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.startControllerSelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execstartControllerSelect_Params startControllerSelect_Params;
	memset(&startControllerSelect_Params, 0, sizeof(startControllerSelect_Params));

	this->ProcessEvent(uFnstartControllerSelect, &startControllerSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.EntryDecision
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::EntryDecision()
{
	static UFunction* uFnEntryDecision = nullptr;

	if (!uFnEntryDecision)
	{
		uFnEntryDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.EntryDecision");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execEntryDecision_Params EntryDecision_Params;
	memset(&EntryDecision_Params, 0, sizeof(EntryDecision_Params));

	this->ProcessEvent(uFnEntryDecision, &EntryDecision_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcBattleConfig
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcBattleConfig(bool bTrigger)
{
	static UFunction* uFnfuncBattleConfig = nullptr;

	if (!uFnfuncBattleConfig)
	{
		uFnfuncBattleConfig = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcBattleConfig");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncBattleConfig_Params funcBattleConfig_Params;
	memset(&funcBattleConfig_Params, 0, sizeof(funcBattleConfig_Params));
	funcBattleConfig_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncBattleConfig, &funcBattleConfig_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcNews
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcNews(bool bTrigger)
{
	static UFunction* uFnfuncNews = nullptr;

	if (!uFnfuncNews)
	{
		uFnfuncNews = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcNews");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncNews_Params funcNews_Params;
	memset(&funcNews_Params, 0, sizeof(funcNews_Params));
	funcNews_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncNews, &funcNews_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.WebLinkDecision
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::eventWebLinkDecision()
{
	static UFunction* uFnWebLinkDecision = nullptr;

	if (!uFnWebLinkDecision)
	{
		uFnWebLinkDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.WebLinkDecision");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_eventWebLinkDecision_Params WebLinkDecision_Params;
	memset(&WebLinkDecision_Params, 0, sizeof(WebLinkDecision_Params));

	this->ProcessEvent(uFnWebLinkDecision, &WebLinkDecision_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.HotNewsViewChange
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       flg                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::HotNewsViewChange(bool flg)
{
	static UFunction* uFnHotNewsViewChange = nullptr;

	if (!uFnHotNewsViewChange)
	{
		uFnHotNewsViewChange = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.HotNewsViewChange");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execHotNewsViewChange_Params HotNewsViewChange_Params;
	memset(&HotNewsViewChange_Params, 0, sizeof(HotNewsViewChange_Params));
	HotNewsViewChange_Params.flg = flg;

	this->ProcessEvent(uFnHotNewsViewChange, &HotNewsViewChange_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcIdleEA
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcIdleEA(bool bTrigger)
{
	static UFunction* uFnfuncIdleEA = nullptr;

	if (!uFnfuncIdleEA)
	{
		uFnfuncIdleEA = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcIdleEA");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncIdleEA_Params funcIdleEA_Params;
	memset(&funcIdleEA_Params, 0, sizeof(funcIdleEA_Params));
	funcIdleEA_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncIdleEA, &funcIdleEA_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcIdle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::funcIdle(bool bTrigger)
{
	static UFunction* uFnfuncIdle = nullptr;

	if (!uFnfuncIdle)
	{
		uFnfuncIdle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.funcIdle");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execfuncIdle_Params funcIdle_Params;
	memset(&funcIdle_Params, 0, sizeof(funcIdle_Params));
	funcIdle_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncIdle, &funcIdle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ShortCutAction
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::ShortCutAction(int32_t Type)
{
	static UFunction* uFnShortCutAction = nullptr;

	if (!uFnShortCutAction)
	{
		uFnShortCutAction = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ShortCutAction");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execShortCutAction_Params ShortCutAction_Params;
	memset(&ShortCutAction_Params, 0, sizeof(ShortCutAction_Params));
	memcpy_s(&ShortCutAction_Params.Type, sizeof(ShortCutAction_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnShortCutAction, &ShortCutAction_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ShortCutJump
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::ShortCutJump(int32_t Type)
{
	static UFunction* uFnShortCutJump = nullptr;

	if (!uFnShortCutJump)
	{
		uFnShortCutJump = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ShortCutJump");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execShortCutJump_Params ShortCutJump_Params;
	memset(&ShortCutJump_Params, 0, sizeof(ShortCutJump_Params));
	memcpy_s(&ShortCutJump_Params.Type, sizeof(ShortCutJump_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnShortCutJump, &ShortCutJump_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ShortCutAssign
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::ShortCutAssign(int32_t Type)
{
	static UFunction* uFnShortCutAssign = nullptr;

	if (!uFnShortCutAssign)
	{
		uFnShortCutAssign = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ShortCutAssign");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execShortCutAssign_Params ShortCutAssign_Params;
	memset(&ShortCutAssign_Params, 0, sizeof(ShortCutAssign_Params));
	memcpy_s(&ShortCutAssign_Params.Type, sizeof(ShortCutAssign_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnShortCutAssign, &ShortCutAssign_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.MenuIndexCancel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::MenuIndexCancel()
{
	static UFunction* uFnMenuIndexCancel = nullptr;

	if (!uFnMenuIndexCancel)
	{
		uFnMenuIndexCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.MenuIndexCancel");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execMenuIndexCancel_Params MenuIndexCancel_Params;
	memset(&MenuIndexCancel_Params, 0, sizeof(MenuIndexCancel_Params));

	this->ProcessEvent(uFnMenuIndexCancel, &MenuIndexCancel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.MenuIndexDecision
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::MenuIndexDecision()
{
	static UFunction* uFnMenuIndexDecision = nullptr;

	if (!uFnMenuIndexDecision)
	{
		uFnMenuIndexDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.MenuIndexDecision");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execMenuIndexDecision_Params MenuIndexDecision_Params;
	memset(&MenuIndexDecision_Params, 0, sizeof(MenuIndexDecision_Params));

	this->ProcessEvent(uFnMenuIndexDecision, &MenuIndexDecision_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.MenuIndexChange
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Add                            (CPF_Parm)
// uint32_t                       trg                            (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::MenuIndexChange(int32_t Add, bool trg)
{
	static UFunction* uFnMenuIndexChange = nullptr;

	if (!uFnMenuIndexChange)
	{
		uFnMenuIndexChange = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.MenuIndexChange");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execMenuIndexChange_Params MenuIndexChange_Params;
	memset(&MenuIndexChange_Params, 0, sizeof(MenuIndexChange_Params));
	memcpy_s(&MenuIndexChange_Params.Add, sizeof(MenuIndexChange_Params.Add), &Add, sizeof(Add));
	MenuIndexChange_Params.trg = trg;

	this->ProcessEvent(uFnMenuIndexChange, &MenuIndexChange_Params, nullptr);

	return MenuIndexChange_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.MenuIndexLRCheck
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Add                            (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::MenuIndexLRCheck(int32_t Add)
{
	static UFunction* uFnMenuIndexLRCheck = nullptr;

	if (!uFnMenuIndexLRCheck)
	{
		uFnMenuIndexLRCheck = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.MenuIndexLRCheck");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execMenuIndexLRCheck_Params MenuIndexLRCheck_Params;
	memset(&MenuIndexLRCheck_Params, 0, sizeof(MenuIndexLRCheck_Params));
	memcpy_s(&MenuIndexLRCheck_Params.Add, sizeof(MenuIndexLRCheck_Params.Add), &Add, sizeof(Add));

	this->ProcessEvent(uFnMenuIndexLRCheck, &MenuIndexLRCheck_Params, nullptr);

	return MenuIndexLRCheck_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.createBottomList
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::createBottomList(int32_t Index)
{
	static UFunction* uFncreateBottomList = nullptr;

	if (!uFncreateBottomList)
	{
		uFncreateBottomList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.createBottomList");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execcreateBottomList_Params createBottomList_Params;
	memset(&createBottomList_Params, 0, sizeof(createBottomList_Params));
	memcpy_s(&createBottomList_Params.Index, sizeof(createBottomList_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFncreateBottomList, &createBottomList_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.createMiddleList
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::createMiddleList(int32_t Index)
{
	static UFunction* uFncreateMiddleList = nullptr;

	if (!uFncreateMiddleList)
	{
		uFncreateMiddleList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.createMiddleList");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execcreateMiddleList_Params createMiddleList_Params;
	memset(&createMiddleList_Params, 0, sizeof(createMiddleList_Params));
	memcpy_s(&createMiddleList_Params.Index, sizeof(createMiddleList_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFncreateMiddleList, &createMiddleList_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ModeDecision20
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::ModeDecision20(int32_t Index, int32_t State)
{
	static UFunction* uFnModeDecision20 = nullptr;

	if (!uFnModeDecision20)
	{
		uFnModeDecision20 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ModeDecision20");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execModeDecision20_Params ModeDecision20_Params;
	memset(&ModeDecision20_Params, 0, sizeof(ModeDecision20_Params));
	memcpy_s(&ModeDecision20_Params.Index, sizeof(ModeDecision20_Params.Index), &Index, sizeof(Index));
	memcpy_s(&ModeDecision20_Params.State, sizeof(ModeDecision20_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnModeDecision20, &ModeDecision20_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ModeDecision
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        main_c                         (CPF_Parm)
// int32_t                        sub_c                          (CPF_Parm)
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::ModeDecision(int32_t main_c, int32_t sub_c, int32_t State)
{
	static UFunction* uFnModeDecision = nullptr;

	if (!uFnModeDecision)
	{
		uFnModeDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.ModeDecision");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execModeDecision_Params ModeDecision_Params;
	memset(&ModeDecision_Params, 0, sizeof(ModeDecision_Params));
	memcpy_s(&ModeDecision_Params.main_c, sizeof(ModeDecision_Params.main_c), &main_c, sizeof(main_c));
	memcpy_s(&ModeDecision_Params.sub_c, sizeof(ModeDecision_Params.sub_c), &sub_c, sizeof(sub_c));
	memcpy_s(&ModeDecision_Params.State, sizeof(ModeDecision_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnModeDecision, &ModeDecision_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.startNetwork20
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::startNetwork20()
{
	static UFunction* uFnstartNetwork20 = nullptr;

	if (!uFnstartNetwork20)
	{
		uFnstartNetwork20 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.startNetwork20");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execstartNetwork20_Params startNetwork20_Params;
	memset(&startNetwork20_Params, 0, sizeof(startNetwork20_Params));

	this->ProcessEvent(uFnstartNetwork20, &startNetwork20_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.startMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::startMainMenu()
{
	static UFunction* uFnstartMainMenu = nullptr;

	if (!uFnstartMainMenu)
	{
		uFnstartMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.startMainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execstartMainMenu_Params startMainMenu_Params;
	memset(&startMainMenu_Params, 0, sizeof(startMainMenu_Params));

	this->ProcessEvent(uFnstartMainMenu, &startMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::UpdateCursor()
{
	static UFunction* uFnUpdateCursor = nullptr;

	if (!uFnUpdateCursor)
	{
		uFnUpdateCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateCursor");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execUpdateCursor_Params UpdateCursor_Params;
	memset(&UpdateCursor_Params, 0, sizeof(UpdateCursor_Params));

	this->ProcessEvent(uFnUpdateCursor, &UpdateCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.chengeCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Level                          (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::chengeCursor(int32_t Level, int32_t Index)
{
	static UFunction* uFnchengeCursor = nullptr;

	if (!uFnchengeCursor)
	{
		uFnchengeCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.chengeCursor");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execchengeCursor_Params chengeCursor_Params;
	memset(&chengeCursor_Params, 0, sizeof(chengeCursor_Params));
	memcpy_s(&chengeCursor_Params.Level, sizeof(chengeCursor_Params.Level), &Level, sizeof(Level));
	memcpy_s(&chengeCursor_Params.Index, sizeof(chengeCursor_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnchengeCursor, &chengeCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.updateBottomMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::updateBottomMenu()
{
	static UFunction* uFnupdateBottomMenu = nullptr;

	if (!uFnupdateBottomMenu)
	{
		uFnupdateBottomMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.updateBottomMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execupdateBottomMenu_Params updateBottomMenu_Params;
	memset(&updateBottomMenu_Params, 0, sizeof(updateBottomMenu_Params));

	this->ProcessEvent(uFnupdateBottomMenu, &updateBottomMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.updateMiddleMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::updateMiddleMenu()
{
	static UFunction* uFnupdateMiddleMenu = nullptr;

	if (!uFnupdateMiddleMenu)
	{
		uFnupdateMiddleMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.updateMiddleMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execupdateMiddleMenu_Params updateMiddleMenu_Params;
	memset(&updateMiddleMenu_Params, 0, sizeof(updateMiddleMenu_Params));

	this->ProcessEvent(uFnupdateMiddleMenu, &updateMiddleMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.updateTopMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::updateTopMenu()
{
	static UFunction* uFnupdateTopMenu = nullptr;

	if (!uFnupdateTopMenu)
	{
		uFnupdateTopMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.updateTopMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execupdateTopMenu_Params updateTopMenu_Params;
	memset(&updateTopMenu_Params, 0, sizeof(updateTopMenu_Params));

	this->ProcessEvent(uFnupdateTopMenu, &updateTopMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsShortCutFactor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Type                           (CPF_Parm)
// int32_t                        Level                          (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::IsShortCutFactor(int32_t Type, int32_t Level, int32_t Index)
{
	static UFunction* uFnIsShortCutFactor = nullptr;

	if (!uFnIsShortCutFactor)
	{
		uFnIsShortCutFactor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsShortCutFactor");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execIsShortCutFactor_Params IsShortCutFactor_Params;
	memset(&IsShortCutFactor_Params, 0, sizeof(IsShortCutFactor_Params));
	memcpy_s(&IsShortCutFactor_Params.Type, sizeof(IsShortCutFactor_Params.Type), &Type, sizeof(Type));
	memcpy_s(&IsShortCutFactor_Params.Level, sizeof(IsShortCutFactor_Params.Level), &Level, sizeof(Level));
	memcpy_s(&IsShortCutFactor_Params.Index, sizeof(IsShortCutFactor_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIsShortCutFactor, &IsShortCutFactor_Params, nullptr);

	return IsShortCutFactor_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.setupBottomMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::setupBottomMenu()
{
	static UFunction* uFnsetupBottomMenu = nullptr;

	if (!uFnsetupBottomMenu)
	{
		uFnsetupBottomMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.setupBottomMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execsetupBottomMenu_Params setupBottomMenu_Params;
	memset(&setupBottomMenu_Params, 0, sizeof(setupBottomMenu_Params));

	this->ProcessEvent(uFnsetupBottomMenu, &setupBottomMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.setupMiddleMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::setupMiddleMenu()
{
	static UFunction* uFnsetupMiddleMenu = nullptr;

	if (!uFnsetupMiddleMenu)
	{
		uFnsetupMiddleMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.setupMiddleMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execsetupMiddleMenu_Params setupMiddleMenu_Params;
	memset(&setupMiddleMenu_Params, 0, sizeof(setupMiddleMenu_Params));

	this->ProcessEvent(uFnsetupMiddleMenu, &setupMiddleMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.setupTopMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::setupTopMenu()
{
	static UFunction* uFnsetupTopMenu = nullptr;

	if (!uFnsetupTopMenu)
	{
		uFnsetupTopMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.setupTopMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execsetupTopMenu_Params setupTopMenu_Params;
	memset(&setupTopMenu_Params, 0, sizeof(setupTopMenu_Params));

	this->ProcessEvent(uFnsetupTopMenu, &setupTopMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.isNetworkFromOtherScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu20::isNetworkFromOtherScene()
{
	static UFunction* uFnisNetworkFromOtherScene = nullptr;

	if (!uFnisNetworkFromOtherScene)
	{
		uFnisNetworkFromOtherScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.isNetworkFromOtherScene");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execisNetworkFromOtherScene_Params isNetworkFromOtherScene_Params;
	memset(&isNetworkFromOtherScene_Params, 0, sizeof(isNetworkFromOtherScene_Params));

	this->ProcessEvent(uFnisNetworkFromOtherScene, &isNetworkFromOtherScene_Params, nullptr);

	return isNetworkFromOtherScene_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.InitMainMenuScene_FromNetwork
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::InitMainMenuScene_FromNetwork()
{
	static UFunction* uFnInitMainMenuScene_FromNetwork = nullptr;

	if (!uFnInitMainMenuScene_FromNetwork)
	{
		uFnInitMainMenuScene_FromNetwork = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.InitMainMenuScene_FromNetwork");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execInitMainMenuScene_FromNetwork_Params InitMainMenuScene_FromNetwork_Params;
	memset(&InitMainMenuScene_FromNetwork_Params, 0, sizeof(InitMainMenuScene_FromNetwork_Params));

	this->ProcessEvent(uFnInitMainMenuScene_FromNetwork, &InitMainMenuScene_FromNetwork_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.InitMainMenuScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::InitMainMenuScene()
{
	static UFunction* uFnInitMainMenuScene = nullptr;

	if (!uFnInitMainMenuScene)
	{
		uFnInitMainMenuScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.InitMainMenuScene");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execInitMainMenuScene_Params InitMainMenuScene_Params;
	memset(&InitMainMenuScene_Params, 0, sizeof(InitMainMenuScene_Params));

	this->ProcessEvent(uFnInitMainMenuScene, &InitMainMenuScene_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.CloseHotNews
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::CloseHotNews()
{
	static UFunction* uFnCloseHotNews = nullptr;

	if (!uFnCloseHotNews)
	{
		uFnCloseHotNews = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.CloseHotNews");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execCloseHotNews_Params CloseHotNews_Params;
	memset(&CloseHotNews_Params, 0, sizeof(CloseHotNews_Params));

	this->ProcessEvent(uFnCloseHotNews, &CloseHotNews_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OpenHotNews
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::OpenHotNews()
{
	static UFunction* uFnOpenHotNews = nullptr;

	if (!uFnOpenHotNews)
	{
		uFnOpenHotNews = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OpenHotNews");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execOpenHotNews_Params OpenHotNews_Params;
	memset(&OpenHotNews_Params, 0, sizeof(OpenHotNews_Params));

	this->ProcessEvent(uFnOpenHotNews, &OpenHotNews_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OpenModeTransition
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_GAME_MODE                  GameMode                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::OpenModeTransition(EUE_GAME_MODE GameMode)
{
	static UFunction* uFnOpenModeTransition = nullptr;

	if (!uFnOpenModeTransition)
	{
		uFnOpenModeTransition = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OpenModeTransition");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execOpenModeTransition_Params OpenModeTransition_Params;
	memset(&OpenModeTransition_Params, 0, sizeof(OpenModeTransition_Params));
	memcpy_s(&OpenModeTransition_Params.GameMode, sizeof(OpenModeTransition_Params.GameMode), &GameMode, sizeof(GameMode));

	this->ProcessEvent(uFnOpenModeTransition, &OpenModeTransition_Params, nullptr);

	return OpenModeTransition_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OpenEarlyAccessMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::OpenEarlyAccessMenu()
{
	static UFunction* uFnOpenEarlyAccessMenu = nullptr;

	if (!uFnOpenEarlyAccessMenu)
	{
		uFnOpenEarlyAccessMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OpenEarlyAccessMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execOpenEarlyAccessMenu_Params OpenEarlyAccessMenu_Params;
	memset(&OpenEarlyAccessMenu_Params, 0, sizeof(OpenEarlyAccessMenu_Params));

	this->ProcessEvent(uFnOpenEarlyAccessMenu, &OpenEarlyAccessMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.CloseMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::CloseMainMenu()
{
	static UFunction* uFnCloseMainMenu = nullptr;

	if (!uFnCloseMainMenu)
	{
		uFnCloseMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.CloseMainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execCloseMainMenu_Params CloseMainMenu_Params;
	memset(&CloseMainMenu_Params, 0, sizeof(CloseMainMenu_Params));

	this->ProcessEvent(uFnCloseMainMenu, &CloseMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OpenMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::OpenMainMenu()
{
	static UFunction* uFnOpenMainMenu = nullptr;

	if (!uFnOpenMainMenu)
	{
		uFnOpenMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.OpenMainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execOpenMainMenu_Params OpenMainMenu_Params;
	memset(&OpenMainMenu_Params, 0, sizeof(OpenMainMenu_Params));

	this->ProcessEvent(uFnOpenMainMenu, &OpenMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.GetResultIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuMainMenu20::GetResultIndex()
{
	static UFunction* uFnGetResultIndex = nullptr;

	if (!uFnGetResultIndex)
	{
		uFnGetResultIndex = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.GetResultIndex");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execGetResultIndex_Params GetResultIndex_Params;
	memset(&GetResultIndex_Params, 0, sizeof(GetResultIndex_Params));

	this->ProcessEvent(uFnGetResultIndex, &GetResultIndex_Params, nullptr);

	return GetResultIndex_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsExitWaitMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu20::IsExitWaitMainMenu()
{
	static UFunction* uFnIsExitWaitMainMenu = nullptr;

	if (!uFnIsExitWaitMainMenu)
	{
		uFnIsExitWaitMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsExitWaitMainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execIsExitWaitMainMenu_Params IsExitWaitMainMenu_Params;
	memset(&IsExitWaitMainMenu_Params, 0, sizeof(IsExitWaitMainMenu_Params));

	this->ProcessEvent(uFnIsExitWaitMainMenu, &IsExitWaitMainMenu_Params, nullptr);

	return IsExitWaitMainMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsActiveMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu20::IsActiveMainMenu()
{
	static UFunction* uFnIsActiveMainMenu = nullptr;

	if (!uFnIsActiveMainMenu)
	{
		uFnIsActiveMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsActiveMainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execIsActiveMainMenu_Params IsActiveMainMenu_Params;
	memset(&IsActiveMainMenu_Params, 0, sizeof(IsActiveMainMenu_Params));

	this->ProcessEvent(uFnIsActiveMainMenu, &IsActiveMainMenu_Params, nullptr);

	return IsActiveMainMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.Start");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsNewMMIndex
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37747])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::IsNewMMIndex(int32_t Index)
{
	static UFunction* uFnIsNewMMIndex = nullptr;

	if (!uFnIsNewMMIndex)
	{
		uFnIsNewMMIndex = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsNewMMIndex");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execIsNewMMIndex_Params IsNewMMIndex_Params;
	memset(&IsNewMMIndex_Params, 0, sizeof(IsNewMMIndex_Params));
	memcpy_s(&IsNewMMIndex_Params.Index, sizeof(IsNewMMIndex_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIsNewMMIndex, &IsNewMMIndex_Params, nullptr);

	return IsNewMMIndex_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsModeDecisionEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37726])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Main                           (CPF_Parm)
// int32_t                        sub                            (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::IsModeDecisionEnable(int32_t Main, int32_t sub)
{
	static UFunction* uFnIsModeDecisionEnable = nullptr;

	if (!uFnIsModeDecisionEnable)
	{
		uFnIsModeDecisionEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsModeDecisionEnable");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execIsModeDecisionEnable_Params IsModeDecisionEnable_Params;
	memset(&IsModeDecisionEnable_Params, 0, sizeof(IsModeDecisionEnable_Params));
	memcpy_s(&IsModeDecisionEnable_Params.Main, sizeof(IsModeDecisionEnable_Params.Main), &Main, sizeof(Main));
	memcpy_s(&IsModeDecisionEnable_Params.sub, sizeof(IsModeDecisionEnable_Params.sub), &sub, sizeof(sub));

	this->ProcessEvent(uFnIsModeDecisionEnable, &IsModeDecisionEnable_Params, nullptr);

	return IsModeDecisionEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsRespectEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37826])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuMainMenu20::IsRespectEnable()
{
	static UFunction* uFnIsRespectEnable = nullptr;

	if (!uFnIsRespectEnable)
	{
		uFnIsRespectEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.IsRespectEnable");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execIsRespectEnable_Params IsRespectEnable_Params;
	memset(&IsRespectEnable_Params, 0, sizeof(IsRespectEnable_Params));

	this->ProcessEvent(uFnIsRespectEnable, &IsRespectEnable_Params, nullptr);

	return IsRespectEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.CheckFirstBattlePopup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36198])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::CheckFirstBattlePopup()
{
	static UFunction* uFnCheckFirstBattlePopup = nullptr;

	if (!uFnCheckFirstBattlePopup)
	{
		uFnCheckFirstBattlePopup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.CheckFirstBattlePopup");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execCheckFirstBattlePopup_Params CheckFirstBattlePopup_Params;
	memset(&CheckFirstBattlePopup_Params, 0, sizeof(CheckFirstBattlePopup_Params));

	this->ProcessEvent(uFnCheckFirstBattlePopup, &CheckFirstBattlePopup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.FirstBattleSelect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36867])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::FirstBattleSelect()
{
	static UFunction* uFnFirstBattleSelect = nullptr;

	if (!uFnFirstBattleSelect)
	{
		uFnFirstBattleSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.FirstBattleSelect");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execFirstBattleSelect_Params FirstBattleSelect_Params;
	memset(&FirstBattleSelect_Params, 0, sizeof(FirstBattleSelect_Params));

	this->ProcessEvent(uFnFirstBattleSelect, &FirstBattleSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateFuncFigure
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40681])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::UpdateFuncFigure(bool bTrigger)
{
	static UFunction* uFnUpdateFuncFigure = nullptr;

	if (!uFnUpdateFuncFigure)
	{
		uFnUpdateFuncFigure = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateFuncFigure");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execUpdateFuncFigure_Params UpdateFuncFigure_Params;
	memset(&UpdateFuncFigure_Params, 0, sizeof(UpdateFuncFigure_Params));
	UpdateFuncFigure_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateFuncFigure, &UpdateFuncFigure_Params, nullptr);

	return UpdateFuncFigure_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateFuncBattleConfig
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40680])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        Mode                           (CPF_Parm)
// int32_t                        IsOK                           (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuMainMenu20::UpdateFuncBattleConfig(bool bTrigger, int32_t Mode, int32_t& IsOK)
{
	static UFunction* uFnUpdateFuncBattleConfig = nullptr;

	if (!uFnUpdateFuncBattleConfig)
	{
		uFnUpdateFuncBattleConfig = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateFuncBattleConfig");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execUpdateFuncBattleConfig_Params UpdateFuncBattleConfig_Params;
	memset(&UpdateFuncBattleConfig_Params, 0, sizeof(UpdateFuncBattleConfig_Params));
	UpdateFuncBattleConfig_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateFuncBattleConfig_Params.Mode, sizeof(UpdateFuncBattleConfig_Params.Mode), &Mode, sizeof(Mode));
	memcpy_s(&UpdateFuncBattleConfig_Params.IsOK, sizeof(UpdateFuncBattleConfig_Params.IsOK), &IsOK, sizeof(IsOK));

	this->ProcessEvent(uFnUpdateFuncBattleConfig, &UpdateFuncBattleConfig_Params, nullptr);

	memcpy_s(&IsOK, sizeof(IsOK), &UpdateFuncBattleConfig_Params.IsOK, sizeof(UpdateFuncBattleConfig_Params.IsOK));

	return UpdateFuncBattleConfig_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateFuncNews
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40685])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuMainMenu20::UpdateFuncNews(bool bTrigger)
{
	static UFunction* uFnUpdateFuncNews = nullptr;

	if (!uFnUpdateFuncNews)
	{
		uFnUpdateFuncNews = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateFuncNews");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execUpdateFuncNews_Params UpdateFuncNews_Params;
	memset(&UpdateFuncNews_Params, 0, sizeof(UpdateFuncNews_Params));
	UpdateFuncNews_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateFuncNews, &UpdateFuncNews_Params, nullptr);

	return UpdateFuncNews_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateFuncIdleEA
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40682])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsMode                         (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuMainMenu20::UpdateFuncIdleEA(bool bTrigger, int32_t& IsMode)
{
	static UFunction* uFnUpdateFuncIdleEA = nullptr;

	if (!uFnUpdateFuncIdleEA)
	{
		uFnUpdateFuncIdleEA = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.UpdateFuncIdleEA");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execUpdateFuncIdleEA_Params UpdateFuncIdleEA_Params;
	memset(&UpdateFuncIdleEA_Params, 0, sizeof(UpdateFuncIdleEA_Params));
	UpdateFuncIdleEA_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateFuncIdleEA_Params.IsMode, sizeof(UpdateFuncIdleEA_Params.IsMode), &IsMode, sizeof(IsMode));

	this->ProcessEvent(uFnUpdateFuncIdleEA, &UpdateFuncIdleEA_Params, nullptr);

	memcpy_s(&IsMode, sizeof(IsMode), &UpdateFuncIdleEA_Params.IsMode, sizeof(UpdateFuncIdleEA_Params.IsMode));

	return UpdateFuncIdleEA_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.execDrawNews
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36777])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::execDrawNews(int32_t State)
{
	static UFunction* uFnexecDrawNews = nullptr;

	if (!uFnexecDrawNews)
	{
		uFnexecDrawNews = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.execDrawNews");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execexecDrawNews_Params execDrawNews_Params;
	memset(&execDrawNews_Params, 0, sizeof(execDrawNews_Params));
	memcpy_s(&execDrawNews_Params.State, sizeof(execDrawNews_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecDrawNews, &execDrawNews_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.execCtrlBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36775])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::execCtrlBar(int32_t State)
{
	static UFunction* uFnexecCtrlBar = nullptr;

	if (!uFnexecCtrlBar)
	{
		uFnexecCtrlBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.execCtrlBar");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execexecCtrlBar_Params execCtrlBar_Params;
	memset(&execCtrlBar_Params, 0, sizeof(execCtrlBar_Params));
	memcpy_s(&execCtrlBar_Params.State, sizeof(execCtrlBar_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecCtrlBar, &execCtrlBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.execDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36776])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::execDrawNative(int32_t State)
{
	static UFunction* uFnexecDrawNative = nullptr;

	if (!uFnexecDrawNative)
	{
		uFnexecDrawNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.execDrawNative");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execexecDrawNative_Params execDrawNative_Params;
	memset(&execDrawNative_Params, 0, sizeof(execDrawNative_Params));
	memcpy_s(&execDrawNative_Params.State, sizeof(execDrawNative_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecDrawNative, &execDrawNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.execUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36784])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenu20::execUpdateNative(int32_t State)
{
	static UFunction* uFnexecUpdateNative = nullptr;

	if (!uFnexecUpdateNative)
	{
		uFnexecUpdateNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.execUpdateNative");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execexecUpdateNative_Params execUpdateNative_Params;
	memset(&execUpdateNative_Params, 0, sizeof(execUpdateNative_Params));
	memcpy_s(&execUpdateNative_Params.State, sizeof(execUpdateNative_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecUpdateNative, &execUpdateNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.InitializeInMainMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37524])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::InitializeInMainMenu()
{
	static UFunction* uFnInitializeInMainMenu = nullptr;

	if (!uFnInitializeInMainMenu)
	{
		uFnInitializeInMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.InitializeInMainMenu");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execInitializeInMainMenu_Params InitializeInMainMenu_Params;
	memset(&InitializeInMainMenu_Params, 0, sizeof(InitializeInMainMenu_Params));

	this->ProcessEvent(uFnInitializeInMainMenu, &InitializeInMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenu20::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenu20.InitializeNative");
	}

	UREDGfxMoviePlayer_MenuMainMenu20_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenuScene.OnFinalize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenuScene::OnFinalize()
{
	static UFunction* uFnOnFinalize = nullptr;

	if (!uFnOnFinalize)
	{
		uFnOnFinalize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenuScene.OnFinalize");
	}

	UREDGfxMoviePlayer_MenuMainMenuScene_execOnFinalize_Params OnFinalize_Params;
	memset(&OnFinalize_Params, 0, sizeof(OnFinalize_Params));

	this->ProcessEvent(uFnOnFinalize, &OnFinalize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenuScene.OnDrawUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenuScene::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenuScene.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuMainMenuScene_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenuScene.OnUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMainMenuScene::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenuScene.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuMainMenuScene_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMainMenuScene.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMainMenuScene::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMainMenuScene.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuMainMenuScene_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsInformationActive
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::eventIsInformationActive()
{
	static UFunction* uFnIsInformationActive = nullptr;

	if (!uFnIsInformationActive)
	{
		uFnIsInformationActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsInformationActive");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_eventIsInformationActive_Params IsInformationActive_Params;
	memset(&IsInformationActive_Params, 0, sizeof(IsInformationActive_Params));

	this->ProcessEvent(uFnIsInformationActive, &IsInformationActive_Params, nullptr);

	return IsInformationActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.FinishInformation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::FinishInformation()
{
	static UFunction* uFnFinishInformation = nullptr;

	if (!uFnFinishInformation)
	{
		uFnFinishInformation = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.FinishInformation");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execFinishInformation_Params FinishInformation_Params;
	memset(&FinishInformation_Params, 0, sizeof(FinishInformation_Params));

	this->ProcessEvent(uFnFinishInformation, &FinishInformation_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.StartInformation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::StartInformation()
{
	static UFunction* uFnStartInformation = nullptr;

	if (!uFnStartInformation)
	{
		uFnStartInformation = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.StartInformation");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execStartInformation_Params StartInformation_Params;
	memset(&StartInformation_Params, 0, sizeof(StartInformation_Params));

	this->ProcessEvent(uFnStartInformation, &StartInformation_Params, nullptr);

	return StartInformation_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.FinishGotoMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::FinishGotoMode()
{
	static UFunction* uFnFinishGotoMode = nullptr;

	if (!uFnFinishGotoMode)
	{
		uFnFinishGotoMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.FinishGotoMode");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execFinishGotoMode_Params FinishGotoMode_Params;
	memset(&FinishGotoMode_Params, 0, sizeof(FinishGotoMode_Params));

	this->ProcessEvent(uFnFinishGotoMode, &FinishGotoMode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsGotoModeCancel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsGotoModeCancel()
{
	static UFunction* uFnIsGotoModeCancel = nullptr;

	if (!uFnIsGotoModeCancel)
	{
		uFnIsGotoModeCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsGotoModeCancel");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsGotoModeCancel_Params IsGotoModeCancel_Params;
	memset(&IsGotoModeCancel_Params, 0, sizeof(IsGotoModeCancel_Params));

	this->ProcessEvent(uFnIsGotoModeCancel, &IsGotoModeCancel_Params, nullptr);

	return IsGotoModeCancel_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.StartGotoMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_GAME_MODE                  GameMode                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetwork_Base::StartGotoMode(EUE_GAME_MODE GameMode)
{
	static UFunction* uFnStartGotoMode = nullptr;

	if (!uFnStartGotoMode)
	{
		uFnStartGotoMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.StartGotoMode");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execStartGotoMode_Params StartGotoMode_Params;
	memset(&StartGotoMode_Params, 0, sizeof(StartGotoMode_Params));
	memcpy_s(&StartGotoMode_Params.GameMode, sizeof(StartGotoMode_Params.GameMode), &GameMode, sizeof(GameMode));

	this->ProcessEvent(uFnStartGotoMode, &StartGotoMode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsMainMenuSelectOnline
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsMainMenuSelectOnline()
{
	static UFunction* uFnIsMainMenuSelectOnline = nullptr;

	if (!uFnIsMainMenuSelectOnline)
	{
		uFnIsMainMenuSelectOnline = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsMainMenuSelectOnline");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsMainMenuSelectOnline_Params IsMainMenuSelectOnline_Params;
	memset(&IsMainMenuSelectOnline_Params, 0, sizeof(IsMainMenuSelectOnline_Params));

	this->ProcessEvent(uFnIsMainMenuSelectOnline, &IsMainMenuSelectOnline_Params, nullptr);

	return IsMainMenuSelectOnline_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsMainMenuEnableClose
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsMainMenuEnableClose()
{
	static UFunction* uFnIsMainMenuEnableClose = nullptr;

	if (!uFnIsMainMenuEnableClose)
	{
		uFnIsMainMenuEnableClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsMainMenuEnableClose");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsMainMenuEnableClose_Params IsMainMenuEnableClose_Params;
	memset(&IsMainMenuEnableClose_Params, 0, sizeof(IsMainMenuEnableClose_Params));

	this->ProcessEvent(uFnIsMainMenuEnableClose, &IsMainMenuEnableClose_Params, nullptr);

	return IsMainMenuEnableClose_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsMainMenuActive
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::eventIsMainMenuActive()
{
	static UFunction* uFnIsMainMenuActive = nullptr;

	if (!uFnIsMainMenuActive)
	{
		uFnIsMainMenuActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsMainMenuActive");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_eventIsMainMenuActive_Params IsMainMenuActive_Params;
	memset(&IsMainMenuActive_Params, 0, sizeof(IsMainMenuActive_Params));

	this->ProcessEvent(uFnIsMainMenuActive, &IsMainMenuActive_Params, nullptr);

	return IsMainMenuActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsEndMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsEndMainMenu()
{
	static UFunction* uFnIsEndMainMenu = nullptr;

	if (!uFnIsEndMainMenu)
	{
		uFnIsEndMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsEndMainMenu");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsEndMainMenu_Params IsEndMainMenu_Params;
	memset(&IsEndMainMenu_Params, 0, sizeof(IsEndMainMenu_Params));

	this->ProcessEvent(uFnIsEndMainMenu, &IsEndMainMenu_Params, nullptr);

	return IsEndMainMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.EndMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::EndMainMenu()
{
	static UFunction* uFnEndMainMenu = nullptr;

	if (!uFnEndMainMenu)
	{
		uFnEndMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.EndMainMenu");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execEndMainMenu_Params EndMainMenu_Params;
	memset(&EndMainMenu_Params, 0, sizeof(EndMainMenu_Params));

	this->ProcessEvent(uFnEndMainMenu, &EndMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.FinishMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::FinishMainMenu()
{
	static UFunction* uFnFinishMainMenu = nullptr;

	if (!uFnFinishMainMenu)
	{
		uFnFinishMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.FinishMainMenu");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execFinishMainMenu_Params FinishMainMenu_Params;
	memset(&FinishMainMenu_Params, 0, sizeof(FinishMainMenu_Params));

	this->ProcessEvent(uFnFinishMainMenu, &FinishMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.startMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bMainmenuInit                  (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::startMainMenu(bool bMainmenuInit)
{
	static UFunction* uFnstartMainMenu = nullptr;

	if (!uFnstartMainMenu)
	{
		uFnstartMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.startMainMenu");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execstartMainMenu_Params startMainMenu_Params;
	memset(&startMainMenu_Params, 0, sizeof(startMainMenu_Params));
	startMainMenu_Params.bMainmenuInit = bMainmenuInit;

	this->ProcessEvent(uFnstartMainMenu, &startMainMenu_Params, nullptr);

	return startMainMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.GetNetworkResName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetwork_Base::GetNetworkResName()
{
	static UFunction* uFnGetNetworkResName = nullptr;

	if (!uFnGetNetworkResName)
	{
		uFnGetNetworkResName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.GetNetworkResName");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execGetNetworkResName_Params GetNetworkResName_Params;
	memset(&GetNetworkResName_Params, 0, sizeof(GetNetworkResName_Params));

	this->ProcessEvent(uFnGetNetworkResName, &GetNetworkResName_Params, nullptr);

	return GetNetworkResName_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.ForceEndMenu
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.StartMenu
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsCancelRankMatchEntry
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37616])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsCancelRankMatchEntry()
{
	static UFunction* uFnIsCancelRankMatchEntry = nullptr;

	if (!uFnIsCancelRankMatchEntry)
	{
		uFnIsCancelRankMatchEntry = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsCancelRankMatchEntry");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsCancelRankMatchEntry_Params IsCancelRankMatchEntry_Params;
	memset(&IsCancelRankMatchEntry_Params, 0, sizeof(IsCancelRankMatchEntry_Params));

	this->ProcessEvent(uFnIsCancelRankMatchEntry, &IsCancelRankMatchEntry_Params, nullptr);

	return IsCancelRankMatchEntry_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.CancelRankMatchEntry
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36066])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::CancelRankMatchEntry()
{
	static UFunction* uFnCancelRankMatchEntry = nullptr;

	if (!uFnCancelRankMatchEntry)
	{
		uFnCancelRankMatchEntry = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.CancelRankMatchEntry");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execCancelRankMatchEntry_Params CancelRankMatchEntry_Params;
	memset(&CancelRankMatchEntry_Params, 0, sizeof(CancelRankMatchEntry_Params));

	this->ProcessEvent(uFnCancelRankMatchEntry, &CancelRankMatchEntry_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsRankMatchEntry
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37813])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsRankMatchEntry()
{
	static UFunction* uFnIsRankMatchEntry = nullptr;

	if (!uFnIsRankMatchEntry)
	{
		uFnIsRankMatchEntry = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsRankMatchEntry");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsRankMatchEntry_Params IsRankMatchEntry_Params;
	memset(&IsRankMatchEntry_Params, 0, sizeof(IsRankMatchEntry_Params));

	this->ProcessEvent(uFnIsRankMatchEntry, &IsRankMatchEntry_Params, nullptr);

	return IsRankMatchEntry_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.RealtimeMultiPlayNotify
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39232])
// Parameter Info:
// uint32_t                       isAsync                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetwork_Base::RealtimeMultiPlayNotify(bool isAsync)
{
	static UFunction* uFnRealtimeMultiPlayNotify = nullptr;

	if (!uFnRealtimeMultiPlayNotify)
	{
		uFnRealtimeMultiPlayNotify = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.RealtimeMultiPlayNotify");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execRealtimeMultiPlayNotify_Params RealtimeMultiPlayNotify_Params;
	memset(&RealtimeMultiPlayNotify_Params, 0, sizeof(RealtimeMultiPlayNotify_Params));
	RealtimeMultiPlayNotify_Params.isAsync = isAsync;

	this->ProcessEvent(uFnRealtimeMultiPlayNotify, &RealtimeMultiPlayNotify_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsBannedChat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37600])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsBannedChat()
{
	static UFunction* uFnIsBannedChat = nullptr;

	if (!uFnIsBannedChat)
	{
		uFnIsBannedChat = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsBannedChat");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsBannedChat_Params IsBannedChat_Params;
	memset(&IsBannedChat_Params, 0, sizeof(IsBannedChat_Params));

	this->ProcessEvent(uFnIsBannedChat, &IsBannedChat_Params, nullptr);

	return IsBannedChat_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsDisableLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37638])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsDisableLobby()
{
	static UFunction* uFnIsDisableLobby = nullptr;

	if (!uFnIsDisableLobby)
	{
		uFnIsDisableLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsDisableLobby");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsDisableLobby_Params IsDisableLobby_Params;
	memset(&IsDisableLobby_Params, 0, sizeof(IsDisableLobby_Params));

	this->ProcessEvent(uFnIsDisableLobby, &IsDisableLobby_Params, nullptr);

	return IsDisableLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsWaitMessageActive
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37929])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::IsWaitMessageActive()
{
	static UFunction* uFnIsWaitMessageActive = nullptr;

	if (!uFnIsWaitMessageActive)
	{
		uFnIsWaitMessageActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.IsWaitMessageActive");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execIsWaitMessageActive_Params IsWaitMessageActive_Params;
	memset(&IsWaitMessageActive_Params, 0, sizeof(IsWaitMessageActive_Params));

	this->ProcessEvent(uFnIsWaitMessageActive, &IsWaitMessageActive_Params, nullptr);

	return IsWaitMessageActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.StopWaitMessage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40111])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::StopWaitMessage()
{
	static UFunction* uFnStopWaitMessage = nullptr;

	if (!uFnStopWaitMessage)
	{
		uFnStopWaitMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.StopWaitMessage");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execStopWaitMessage_Params StopWaitMessage_Params;
	memset(&StopWaitMessage_Params, 0, sizeof(StopWaitMessage_Params));

	this->ProcessEvent(uFnStopWaitMessage, &StopWaitMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.ReqWaitMessage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39372])
// Parameter Info:
// class FString                  MessageId                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuNetwork_Base::ReqWaitMessage(const class FString& MessageId)
{
	static UFunction* uFnReqWaitMessage = nullptr;

	if (!uFnReqWaitMessage)
	{
		uFnReqWaitMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.ReqWaitMessage");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execReqWaitMessage_Params ReqWaitMessage_Params;
	memset(&ReqWaitMessage_Params, 0, sizeof(ReqWaitMessage_Params));
	memcpy_s(&ReqWaitMessage_Params.MessageId, sizeof(ReqWaitMessage_Params.MessageId), &MessageId, sizeof(MessageId));

	this->ProcessEvent(uFnReqWaitMessage, &ReqWaitMessage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.MenuWindoeCloseAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38281])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::MenuWindoeCloseAll()
{
	static UFunction* uFnMenuWindoeCloseAll = nullptr;

	if (!uFnMenuWindoeCloseAll)
	{
		uFnMenuWindoeCloseAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.MenuWindoeCloseAll");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execMenuWindoeCloseAll_Params MenuWindoeCloseAll_Params;
	memset(&MenuWindoeCloseAll_Params, 0, sizeof(MenuWindoeCloseAll_Params));

	this->ProcessEvent(uFnMenuWindoeCloseAll, &MenuWindoeCloseAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.UpdateTextChatInput
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40869])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       IsLobby                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetwork_Base::UpdateTextChatInput(bool IsLobby)
{
	static UFunction* uFnUpdateTextChatInput = nullptr;

	if (!uFnUpdateTextChatInput)
	{
		uFnUpdateTextChatInput = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.UpdateTextChatInput");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execUpdateTextChatInput_Params UpdateTextChatInput_Params;
	memset(&UpdateTextChatInput_Params, 0, sizeof(UpdateTextChatInput_Params));
	UpdateTextChatInput_Params.IsLobby = IsLobby;

	this->ProcessEvent(uFnUpdateTextChatInput, &UpdateTextChatInput_Params, nullptr);

	return UpdateTextChatInput_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.InitTextChat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37546])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetwork_Base::InitTextChat()
{
	static UFunction* uFnInitTextChat = nullptr;

	if (!uFnInitTextChat)
	{
		uFnInitTextChat = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetwork_Base.InitTextChat");
	}

	UREDGfxMoviePlayer_MenuNetwork_Base_execInitTextChat_Params InitTextChat_Params;
	memset(&InitTextChat_Params, 0, sizeof(InitTextChat_Params));

	this->ProcessEvent(uFnInitTextChat, &InitTextChat_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.OnDrawUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInit::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateSealNetwork
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::UpdateSealNetwork(bool bTrigger)
{
	static UFunction* uFnUpdateSealNetwork = nullptr;

	if (!uFnUpdateSealNetwork)
	{
		uFnUpdateSealNetwork = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateSealNetwork");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdateSealNetwork_Params UpdateSealNetwork_Params;
	memset(&UpdateSealNetwork_Params, 0, sizeof(UpdateSealNetwork_Params));
	UpdateSealNetwork_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateSealNetwork, &UpdateSealNetwork_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateErrorWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::UpdateErrorWait(bool bTrigger)
{
	static UFunction* uFnUpdateErrorWait = nullptr;

	if (!uFnUpdateErrorWait)
	{
		uFnUpdateErrorWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateErrorWait");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdateErrorWait_Params UpdateErrorWait_Params;
	memset(&UpdateErrorWait_Params, 0, sizeof(UpdateErrorWait_Params));
	UpdateErrorWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateErrorWait, &UpdateErrorWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateError
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::UpdateError(bool bTrigger)
{
	static UFunction* uFnUpdateError = nullptr;

	if (!uFnUpdateError)
	{
		uFnUpdateError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateError");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdateError_Params UpdateError_Params;
	memset(&UpdateError_Params, 0, sizeof(UpdateError_Params));
	UpdateError_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateError, &UpdateError_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateBannedChat
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::UpdateBannedChat(bool bTrigger)
{
	static UFunction* uFnUpdateBannedChat = nullptr;

	if (!uFnUpdateBannedChat)
	{
		uFnUpdateBannedChat = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateBannedChat");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdateBannedChat_Params UpdateBannedChat_Params;
	memset(&UpdateBannedChat_Params, 0, sizeof(UpdateBannedChat_Params));
	UpdateBannedChat_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateBannedChat, &UpdateBannedChat_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateInitWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::UpdateInitWait(bool bTrigger)
{
	static UFunction* uFnUpdateInitWait = nullptr;

	if (!uFnUpdateInitWait)
	{
		uFnUpdateInitWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateInitWait");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdateInitWait_Params UpdateInitWait_Params;
	memset(&UpdateInitWait_Params, 0, sizeof(UpdateInitWait_Params));
	UpdateInitWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateInitWait, &UpdateInitWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateInit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::UpdateInit(bool bTrigger)
{
	static UFunction* uFnUpdateInit = nullptr;

	if (!uFnUpdateInit)
	{
		uFnUpdateInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateInit");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdateInit_Params UpdateInit_Params;
	memset(&UpdateInit_Params, 0, sizeof(UpdateInit_Params));
	UpdateInit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateInit, &UpdateInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateSignin
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::UpdateSignin(bool bTrigger)
{
	static UFunction* uFnUpdateSignin = nullptr;

	if (!uFnUpdateSignin)
	{
		uFnUpdateSignin = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateSignin");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdateSignin_Params UpdateSignin_Params;
	memset(&UpdateSignin_Params, 0, sizeof(UpdateSignin_Params));
	UpdateSignin_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateSignin, &UpdateSignin_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdatePreWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::UpdatePreWait(bool bTrigger)
{
	static UFunction* uFnUpdatePreWait = nullptr;

	if (!uFnUpdatePreWait)
	{
		uFnUpdatePreWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdatePreWait");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdatePreWait_Params UpdatePreWait_Params;
	memset(&UpdatePreWait_Params, 0, sizeof(UpdatePreWait_Params));
	UpdatePreWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdatePreWait, &UpdatePreWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsSuccess
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::IsSuccess()
{
	static UFunction* uFnIsSuccess = nullptr;

	if (!uFnIsSuccess)
	{
		uFnIsSuccess = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsSuccess");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execIsSuccess_Params IsSuccess_Params;
	memset(&IsSuccess_Params, 0, sizeof(IsSuccess_Params));

	this->ProcessEvent(uFnIsSuccess, &IsSuccess_Params, nullptr);

	return IsSuccess_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInit::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.StartMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInit::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInit::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInit::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkInit::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ResetInviteInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInit::ResetInviteInfo()
{
	static UFunction* uFnResetInviteInfo = nullptr;

	if (!uFnResetInviteInfo)
	{
		uFnResetInviteInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ResetInviteInfo");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execResetInviteInfo_Params ResetInviteInfo_Params;
	memset(&ResetInviteInfo_Params, 0, sizeof(ResetInviteInfo_Params));

	this->ProcessEvent(uFnResetInviteInfo, &ResetInviteInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsFromInvite
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::IsFromInvite()
{
	static UFunction* uFnIsFromInvite = nullptr;

	if (!uFnIsFromInvite)
	{
		uFnIsFromInvite = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsFromInvite");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execIsFromInvite_Params IsFromInvite_Params;
	memset(&IsFromInvite_Params, 0, sizeof(IsFromInvite_Params));

	this->ProcessEvent(uFnIsFromInvite, &IsFromInvite_Params, nullptr);

	return IsFromInvite_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.GetSealingNetworkMessage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37164])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkInit::GetSealingNetworkMessage()
{
	static UFunction* uFnGetSealingNetworkMessage = nullptr;

	if (!uFnGetSealingNetworkMessage)
	{
		uFnGetSealingNetworkMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.GetSealingNetworkMessage");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execGetSealingNetworkMessage_Params GetSealingNetworkMessage_Params;
	memset(&GetSealingNetworkMessage_Params, 0, sizeof(GetSealingNetworkMessage_Params));

	this->ProcessEvent(uFnGetSealingNetworkMessage, &GetSealingNetworkMessage_Params, nullptr);

	return GetSealingNetworkMessage_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.SetInitializeNetworkFlag
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39759])
// Parameter Info:
// uint32_t                       flag                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInit::SetInitializeNetworkFlag(bool flag)
{
	static UFunction* uFnSetInitializeNetworkFlag = nullptr;

	if (!uFnSetInitializeNetworkFlag)
	{
		uFnSetInitializeNetworkFlag = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.SetInitializeNetworkFlag");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execSetInitializeNetworkFlag_Params SetInitializeNetworkFlag_Params;
	memset(&SetInitializeNetworkFlag_Params, 0, sizeof(SetInitializeNetworkFlag_Params));
	SetInitializeNetworkFlag_Params.flag = flag;

	this->ProcessEvent(uFnSetInitializeNetworkFlag, &SetInitializeNetworkFlag_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateRcode
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40817])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        Success                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::UpdateRcode(bool bTrigger, int32_t& Success)
{
	static UFunction* uFnUpdateRcode = nullptr;

	if (!uFnUpdateRcode)
	{
		uFnUpdateRcode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.UpdateRcode");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execUpdateRcode_Params UpdateRcode_Params;
	memset(&UpdateRcode_Params, 0, sizeof(UpdateRcode_Params));
	UpdateRcode_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateRcode_Params.Success, sizeof(UpdateRcode_Params.Success), &Success, sizeof(Success));

	this->ProcessEvent(uFnUpdateRcode, &UpdateRcode_Params, nullptr);

	memcpy_s(&Success, sizeof(Success), &UpdateRcode_Params.Success, sizeof(UpdateRcode_Params.Success));

	return UpdateRcode_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsBannedChatMessageRunning
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37601])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::IsBannedChatMessageRunning()
{
	static UFunction* uFnIsBannedChatMessageRunning = nullptr;

	if (!uFnIsBannedChatMessageRunning)
	{
		uFnIsBannedChatMessageRunning = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsBannedChatMessageRunning");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execIsBannedChatMessageRunning_Params IsBannedChatMessageRunning_Params;
	memset(&IsBannedChatMessageRunning_Params, 0, sizeof(IsBannedChatMessageRunning_Params));

	this->ProcessEvent(uFnIsBannedChatMessageRunning, &IsBannedChatMessageRunning_Params, nullptr);

	return IsBannedChatMessageRunning_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ReqBannedChatMessage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39348])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::ReqBannedChatMessage()
{
	static UFunction* uFnReqBannedChatMessage = nullptr;

	if (!uFnReqBannedChatMessage)
	{
		uFnReqBannedChatMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ReqBannedChatMessage");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execReqBannedChatMessage_Params ReqBannedChatMessage_Params;
	memset(&ReqBannedChatMessage_Params, 0, sizeof(ReqBannedChatMessage_Params));

	this->ProcessEvent(uFnReqBannedChatMessage, &ReqBannedChatMessage_Params, nullptr);

	return ReqBannedChatMessage_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.GetInitErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37073])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkInit::GetInitErrorMessageID()
{
	static UFunction* uFnGetInitErrorMessageID = nullptr;

	if (!uFnGetInitErrorMessageID)
	{
		uFnGetInitErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.GetInitErrorMessageID");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execGetInitErrorMessageID_Params GetInitErrorMessageID_Params;
	memset(&GetInitErrorMessageID_Params, 0, sizeof(GetInitErrorMessageID_Params));

	this->ProcessEvent(uFnGetInitErrorMessageID, &GetInitErrorMessageID_Params, nullptr);

	return GetInitErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsInitializing
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37691])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)
// int32_t                        IsBannedChat                   (CPF_Parm | CPF_OutParm)
// int32_t                        SealNetwork                    (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::IsInitializing(int32_t& isError, int32_t& IsBannedChat, int32_t& SealNetwork)
{
	static UFunction* uFnIsInitializing = nullptr;

	if (!uFnIsInitializing)
	{
		uFnIsInitializing = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsInitializing");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execIsInitializing_Params IsInitializing_Params;
	memset(&IsInitializing_Params, 0, sizeof(IsInitializing_Params));
	memcpy_s(&IsInitializing_Params.isError, sizeof(IsInitializing_Params.isError), &isError, sizeof(isError));
	memcpy_s(&IsInitializing_Params.IsBannedChat, sizeof(IsInitializing_Params.IsBannedChat), &IsBannedChat, sizeof(IsBannedChat));
	memcpy_s(&IsInitializing_Params.SealNetwork, sizeof(IsInitializing_Params.SealNetwork), &SealNetwork, sizeof(SealNetwork));

	this->ProcessEvent(uFnIsInitializing, &IsInitializing_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsInitializing_Params.isError, sizeof(IsInitializing_Params.isError));
	memcpy_s(&IsBannedChat, sizeof(IsBannedChat), &IsInitializing_Params.IsBannedChat, sizeof(IsInitializing_Params.IsBannedChat));
	memcpy_s(&SealNetwork, sizeof(SealNetwork), &IsInitializing_Params.SealNetwork, sizeof(IsInitializing_Params.SealNetwork));

	return IsInitializing_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ReqInitializeError
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39352])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::ReqInitializeError()
{
	static UFunction* uFnReqInitializeError = nullptr;

	if (!uFnReqInitializeError)
	{
		uFnReqInitializeError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ReqInitializeError");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execReqInitializeError_Params ReqInitializeError_Params;
	memset(&ReqInitializeError_Params, 0, sizeof(ReqInitializeError_Params));

	this->ProcessEvent(uFnReqInitializeError, &ReqInitializeError_Params, nullptr);

	return ReqInitializeError_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ReqInitialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39351])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::ReqInitialize()
{
	static UFunction* uFnReqInitialize = nullptr;

	if (!uFnReqInitialize)
	{
		uFnReqInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ReqInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execReqInitialize_Params ReqInitialize_Params;
	memset(&ReqInitialize_Params, 0, sizeof(ReqInitialize_Params));

	this->ProcessEvent(uFnReqInitialize, &ReqInitialize_Params, nullptr);

	return ReqInitialize_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsSignInDialogRunning
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37855])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::IsSignInDialogRunning()
{
	static UFunction* uFnIsSignInDialogRunning = nullptr;

	if (!uFnIsSignInDialogRunning)
	{
		uFnIsSignInDialogRunning = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsSignInDialogRunning");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execIsSignInDialogRunning_Params IsSignInDialogRunning_Params;
	memset(&IsSignInDialogRunning_Params, 0, sizeof(IsSignInDialogRunning_Params));

	this->ProcessEvent(uFnIsSignInDialogRunning, &IsSignInDialogRunning_Params, nullptr);

	return IsSignInDialogRunning_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ReqSignInDialog
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39358])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::ReqSignInDialog()
{
	static UFunction* uFnReqSignInDialog = nullptr;

	if (!uFnReqSignInDialog)
	{
		uFnReqSignInDialog = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.ReqSignInDialog");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execReqSignInDialog_Params ReqSignInDialog_Params;
	memset(&ReqSignInDialog_Params, 0, sizeof(ReqSignInDialog_Params));

	this->ProcessEvent(uFnReqSignInDialog, &ReqSignInDialog_Params, nullptr);

	return ReqSignInDialog_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsPreWait
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37792])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInit::IsPreWait()
{
	static UFunction* uFnIsPreWait = nullptr;

	if (!uFnIsPreWait)
	{
		uFnIsPreWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInit.IsPreWait");
	}

	UREDGfxMoviePlayer_MenuNetworkInit_execIsPreWait_Params IsPreWait_Params;
	memset(&IsPreWait_Params, 0, sizeof(IsPreWait_Params));

	this->ProcessEvent(uFnIsPreWait, &IsPreWait_Params, nullptr);

	return IsPreWait_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.OnDrawUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInvite::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInvite::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateErrorWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInvite::UpdateErrorWait(bool bTrigger)
{
	static UFunction* uFnUpdateErrorWait = nullptr;

	if (!uFnUpdateErrorWait)
	{
		uFnUpdateErrorWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateErrorWait");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execUpdateErrorWait_Params UpdateErrorWait_Params;
	memset(&UpdateErrorWait_Params, 0, sizeof(UpdateErrorWait_Params));
	UpdateErrorWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateErrorWait, &UpdateErrorWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateError
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInvite::UpdateError(bool bTrigger)
{
	static UFunction* uFnUpdateError = nullptr;

	if (!uFnUpdateError)
	{
		uFnUpdateError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateError");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execUpdateError_Params UpdateError_Params;
	memset(&UpdateError_Params, 0, sizeof(UpdateError_Params));
	UpdateError_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateError, &UpdateError_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInvite::UpdateMain(bool bTrigger)
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateMain");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));
	UpdateMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateRev2ToRev1
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInvite::UpdateRev2ToRev1(bool bTrigger)
{
	static UFunction* uFnUpdateRev2ToRev1 = nullptr;

	if (!uFnUpdateRev2ToRev1)
	{
		uFnUpdateRev2ToRev1 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateRev2ToRev1");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execUpdateRev2ToRev1_Params UpdateRev2ToRev1_Params;
	memset(&UpdateRev2ToRev1_Params, 0, sizeof(UpdateRev2ToRev1_Params));
	UpdateRev2ToRev1_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRev2ToRev1, &UpdateRev2ToRev1_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateRev1ToRev2
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInvite::UpdateRev1ToRev2(bool bTrigger)
{
	static UFunction* uFnUpdateRev1ToRev2 = nullptr;

	if (!uFnUpdateRev1ToRev2)
	{
		uFnUpdateRev1ToRev2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateRev1ToRev2");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execUpdateRev1ToRev2_Params UpdateRev1ToRev2_Params;
	memset(&UpdateRev1ToRev2_Params, 0, sizeof(UpdateRev1ToRev2_Params));
	UpdateRev1ToRev2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRev1ToRev2, &UpdateRev1ToRev2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateVersionCheck
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInvite::UpdateVersionCheck(bool bTrigger)
{
	static UFunction* uFnUpdateVersionCheck = nullptr;

	if (!uFnUpdateVersionCheck)
	{
		uFnUpdateVersionCheck = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.UpdateVersionCheck");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execUpdateVersionCheck_Params UpdateVersionCheck_Params;
	memset(&UpdateVersionCheck_Params, 0, sizeof(UpdateVersionCheck_Params));
	UpdateVersionCheck_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateVersionCheck, &UpdateVersionCheck_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInvite::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInvite::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.StartMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInvite::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInvite::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInvite::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkInvite::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.GetRoomGameVersion
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37159])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkInvite::GetRoomGameVersion(int32_t& isError)
{
	static UFunction* uFnGetRoomGameVersion = nullptr;

	if (!uFnGetRoomGameVersion)
	{
		uFnGetRoomGameVersion = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.GetRoomGameVersion");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execGetRoomGameVersion_Params GetRoomGameVersion_Params;
	memset(&GetRoomGameVersion_Params, 0, sizeof(GetRoomGameVersion_Params));
	memcpy_s(&GetRoomGameVersion_Params.isError, sizeof(GetRoomGameVersion_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnGetRoomGameVersion, &GetRoomGameVersion_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &GetRoomGameVersion_Params.isError, sizeof(GetRoomGameVersion_Params.isError));

	return GetRoomGameVersion_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.InviteDone
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37588])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkInvite::InviteDone()
{
	static UFunction* uFnInviteDone = nullptr;

	if (!uFnInviteDone)
	{
		uFnInviteDone = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.InviteDone");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execInviteDone_Params InviteDone_Params;
	memset(&InviteDone_Params, 0, sizeof(InviteDone_Params));

	this->ProcessEvent(uFnInviteDone, &InviteDone_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.GetErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37059])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkInvite::GetErrorMessageID()
{
	static UFunction* uFnGetErrorMessageID = nullptr;

	if (!uFnGetErrorMessageID)
	{
		uFnGetErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.GetErrorMessageID");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execGetErrorMessageID_Params GetErrorMessageID_Params;
	memset(&GetErrorMessageID_Params, 0, sizeof(GetErrorMessageID_Params));

	this->ProcessEvent(uFnGetErrorMessageID, &GetErrorMessageID_Params, nullptr);

	return GetErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.IsJoinSessionRunning
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37696])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkInvite::IsJoinSessionRunning(int32_t& isError)
{
	static UFunction* uFnIsJoinSessionRunning = nullptr;

	if (!uFnIsJoinSessionRunning)
	{
		uFnIsJoinSessionRunning = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.IsJoinSessionRunning");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execIsJoinSessionRunning_Params IsJoinSessionRunning_Params;
	memset(&IsJoinSessionRunning_Params, 0, sizeof(IsJoinSessionRunning_Params));
	memcpy_s(&IsJoinSessionRunning_Params.isError, sizeof(IsJoinSessionRunning_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsJoinSessionRunning, &IsJoinSessionRunning_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsJoinSessionRunning_Params.isError, sizeof(IsJoinSessionRunning_Params.isError));

	return IsJoinSessionRunning_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.JoinSession
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37948])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkInvite::JoinSession()
{
	static UFunction* uFnJoinSession = nullptr;

	if (!uFnJoinSession)
	{
		uFnJoinSession = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.JoinSession");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execJoinSession_Params JoinSession_Params;
	memset(&JoinSession_Params, 0, sizeof(JoinSession_Params));

	this->ProcessEvent(uFnJoinSession, &JoinSession_Params, nullptr);

	return JoinSession_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.ChangeVersion
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36107])
// Parameter Info:
// uint32_t                       bRev2                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkInvite::ChangeVersion(bool bRev2)
{
	static UFunction* uFnChangeVersion = nullptr;

	if (!uFnChangeVersion)
	{
		uFnChangeVersion = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.ChangeVersion");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execChangeVersion_Params ChangeVersion_Params;
	memset(&ChangeVersion_Params, 0, sizeof(ChangeVersion_Params));
	ChangeVersion_Params.bRev2 = bRev2;

	this->ProcessEvent(uFnChangeVersion, &ChangeVersion_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.CheckVersion
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36212])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        VersionRev2                    (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkInvite::CheckVersion(int32_t& VersionRev2)
{
	static UFunction* uFnCheckVersion = nullptr;

	if (!uFnCheckVersion)
	{
		uFnCheckVersion = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkInvite.CheckVersion");
	}

	UREDGfxMoviePlayer_MenuNetworkInvite_execCheckVersion_Params CheckVersion_Params;
	memset(&CheckVersion_Params, 0, sizeof(CheckVersion_Params));
	memcpy_s(&CheckVersion_Params.VersionRev2, sizeof(CheckVersion_Params.VersionRev2), &VersionRev2, sizeof(VersionRev2));

	this->ProcessEvent(uFnCheckVersion, &CheckVersion_Params, nullptr);

	memcpy_s(&VersionRev2, sizeof(VersionRev2), &CheckVersion_Params.VersionRev2, sizeof(CheckVersion_Params.VersionRev2));

	return CheckVersion_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsAllMapVisible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsAllMapVisible()
{
	static UFunction* uFnIsAllMapVisible = nullptr;

	if (!uFnIsAllMapVisible)
	{
		uFnIsAllMapVisible = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsAllMapVisible");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsAllMapVisible_Params IsAllMapVisible_Params;
	memset(&IsAllMapVisible_Params, 0, sizeof(IsAllMapVisible_Params));

	this->ProcessEvent(uFnIsAllMapVisible, &IsAllMapVisible_Params, nullptr);

	return IsAllMapVisible_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateEnd(bool bTrigger)
{
	static UFunction* uFnUpdateEnd = nullptr;

	if (!uFnUpdateEnd)
	{
		uFnUpdateEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateEnd");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateEnd_Params UpdateEnd_Params;
	memset(&UpdateEnd_Params, 0, sizeof(UpdateEnd_Params));
	UpdateEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEnd, &UpdateEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateGotoMode
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateGotoMode(bool bTrigger)
{
	static UFunction* uFnUpdateGotoMode = nullptr;

	if (!uFnUpdateGotoMode)
	{
		uFnUpdateGotoMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateGotoMode");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateGotoMode_Params UpdateGotoMode_Params;
	memset(&UpdateGotoMode_Params, 0, sizeof(UpdateGotoMode_Params));
	UpdateGotoMode_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateGotoMode, &UpdateGotoMode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateInformation
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateInformation(bool bTrigger)
{
	static UFunction* uFnUpdateInformation = nullptr;

	if (!uFnUpdateInformation)
	{
		uFnUpdateInformation = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateInformation");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateInformation_Params UpdateInformation_Params;
	memset(&UpdateInformation_Params, 0, sizeof(UpdateInformation_Params));
	UpdateInformation_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateInformation, &UpdateInformation_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateInformationInit
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateInformationInit(bool bTrigger)
{
	static UFunction* uFnUpdateInformationInit = nullptr;

	if (!uFnUpdateInformationInit)
	{
		uFnUpdateInformationInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateInformationInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateInformationInit_Params UpdateInformationInit_Params;
	memset(&UpdateInformationInit_Params, 0, sizeof(UpdateInformationInit_Params));
	UpdateInformationInit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateInformationInit, &UpdateInformationInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMainMenuEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateMainMenuEnd(bool bTrigger)
{
	static UFunction* uFnUpdateMainMenuEnd = nullptr;

	if (!uFnUpdateMainMenuEnd)
	{
		uFnUpdateMainMenuEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMainMenuEnd");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateMainMenuEnd_Params UpdateMainMenuEnd_Params;
	memset(&UpdateMainMenuEnd_Params, 0, sizeof(UpdateMainMenuEnd_Params));
	UpdateMainMenuEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainMenuEnd, &UpdateMainMenuEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMainMenu
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateMainMenu(bool bTrigger)
{
	static UFunction* uFnUpdateMainMenu = nullptr;

	if (!uFnUpdateMainMenu)
	{
		uFnUpdateMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMainMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateMainMenu_Params UpdateMainMenu_Params;
	memset(&UpdateMainMenu_Params, 0, sizeof(UpdateMainMenu_Params));
	UpdateMainMenu_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainMenu, &UpdateMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMainMenuInit
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateMainMenuInit(bool bTrigger)
{
	static UFunction* uFnUpdateMainMenuInit = nullptr;

	if (!uFnUpdateMainMenuInit)
	{
		uFnUpdateMainMenuInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMainMenuInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateMainMenuInit_Params UpdateMainMenuInit_Params;
	memset(&UpdateMainMenuInit_Params, 0, sizeof(UpdateMainMenuInit_Params));
	UpdateMainMenuInit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainMenuInit, &UpdateMainMenuInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveForceWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLeaveForceWait(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveForceWait = nullptr;

	if (!uFnUpdateLeaveForceWait)
	{
		uFnUpdateLeaveForceWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveForceWait");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLeaveForceWait_Params UpdateLeaveForceWait_Params;
	memset(&UpdateLeaveForceWait_Params, 0, sizeof(UpdateLeaveForceWait_Params));
	UpdateLeaveForceWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveForceWait, &UpdateLeaveForceWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveForce
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLeaveForce(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveForce = nullptr;

	if (!uFnUpdateLeaveForce)
	{
		uFnUpdateLeaveForce = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveForce");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLeaveForce_Params UpdateLeaveForce_Params;
	memset(&UpdateLeaveForce_Params, 0, sizeof(UpdateLeaveForce_Params));
	UpdateLeaveForce_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveForce, &UpdateLeaveForce_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateTournamentGotoRoom2
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateTournamentGotoRoom2(bool bTrigger)
{
	static UFunction* uFnUpdateTournamentGotoRoom2 = nullptr;

	if (!uFnUpdateTournamentGotoRoom2)
	{
		uFnUpdateTournamentGotoRoom2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateTournamentGotoRoom2");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateTournamentGotoRoom2_Params UpdateTournamentGotoRoom2_Params;
	memset(&UpdateTournamentGotoRoom2_Params, 0, sizeof(UpdateTournamentGotoRoom2_Params));
	UpdateTournamentGotoRoom2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateTournamentGotoRoom2, &UpdateTournamentGotoRoom2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateTournamentGotoRoom
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateTournamentGotoRoom(bool bTrigger)
{
	static UFunction* uFnUpdateTournamentGotoRoom = nullptr;

	if (!uFnUpdateTournamentGotoRoom)
	{
		uFnUpdateTournamentGotoRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateTournamentGotoRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateTournamentGotoRoom_Params UpdateTournamentGotoRoom_Params;
	memset(&UpdateTournamentGotoRoom_Params, 0, sizeof(UpdateTournamentGotoRoom_Params));
	UpdateTournamentGotoRoom_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateTournamentGotoRoom, &UpdateTournamentGotoRoom_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyRoomJoin
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLobbyRoomJoin(bool bTrigger)
{
	static UFunction* uFnUpdateLobbyRoomJoin = nullptr;

	if (!uFnUpdateLobbyRoomJoin)
	{
		uFnUpdateLobbyRoomJoin = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyRoomJoin");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLobbyRoomJoin_Params UpdateLobbyRoomJoin_Params;
	memset(&UpdateLobbyRoomJoin_Params, 0, sizeof(UpdateLobbyRoomJoin_Params));
	UpdateLobbyRoomJoin_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLobbyRoomJoin, &UpdateLobbyRoomJoin_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateEntryCancelWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateEntryCancelWait(bool bTrigger)
{
	static UFunction* uFnUpdateEntryCancelWait = nullptr;

	if (!uFnUpdateEntryCancelWait)
	{
		uFnUpdateEntryCancelWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateEntryCancelWait");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateEntryCancelWait_Params UpdateEntryCancelWait_Params;
	memset(&UpdateEntryCancelWait_Params, 0, sizeof(UpdateEntryCancelWait_Params));
	UpdateEntryCancelWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEntryCancelWait, &UpdateEntryCancelWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateEntryCancelConfirm
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateEntryCancelConfirm(bool bTrigger)
{
	static UFunction* uFnUpdateEntryCancelConfirm = nullptr;

	if (!uFnUpdateEntryCancelConfirm)
	{
		uFnUpdateEntryCancelConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateEntryCancelConfirm");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateEntryCancelConfirm_Params UpdateEntryCancelConfirm_Params;
	memset(&UpdateEntryCancelConfirm_Params, 0, sizeof(UpdateEntryCancelConfirm_Params));
	UpdateEntryCancelConfirm_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEntryCancelConfirm, &UpdateEntryCancelConfirm_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveWait2
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLeaveWait2(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveWait2 = nullptr;

	if (!uFnUpdateLeaveWait2)
	{
		uFnUpdateLeaveWait2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveWait2");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLeaveWait2_Params UpdateLeaveWait2_Params;
	memset(&UpdateLeaveWait2_Params, 0, sizeof(UpdateLeaveWait2_Params));
	UpdateLeaveWait2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveWait2, &UpdateLeaveWait2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLeaveWait(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveWait = nullptr;

	if (!uFnUpdateLeaveWait)
	{
		uFnUpdateLeaveWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveWait");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLeaveWait_Params UpdateLeaveWait_Params;
	memset(&UpdateLeaveWait_Params, 0, sizeof(UpdateLeaveWait_Params));
	UpdateLeaveWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveWait, &UpdateLeaveWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveConfirm
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLeaveConfirm(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveConfirm = nullptr;

	if (!uFnUpdateLeaveConfirm)
	{
		uFnUpdateLeaveConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveConfirm");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLeaveConfirm_Params UpdateLeaveConfirm_Params;
	memset(&UpdateLeaveConfirm_Params, 0, sizeof(UpdateLeaveConfirm_Params));
	UpdateLeaveConfirm_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveConfirm, &UpdateLeaveConfirm_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateErrorToLobbySelect
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateErrorToLobbySelect(bool bTrigger)
{
	static UFunction* uFnUpdateErrorToLobbySelect = nullptr;

	if (!uFnUpdateErrorToLobbySelect)
	{
		uFnUpdateErrorToLobbySelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateErrorToLobbySelect");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateErrorToLobbySelect_Params UpdateErrorToLobbySelect_Params;
	memset(&UpdateErrorToLobbySelect_Params, 0, sizeof(UpdateErrorToLobbySelect_Params));
	UpdateErrorToLobbySelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateErrorToLobbySelect, &UpdateErrorToLobbySelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateErrorToMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateErrorToMain(bool bTrigger)
{
	static UFunction* uFnUpdateErrorToMain = nullptr;

	if (!uFnUpdateErrorToMain)
	{
		uFnUpdateErrorToMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateErrorToMain");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateErrorToMain_Params UpdateErrorToMain_Params;
	memset(&UpdateErrorToMain_Params, 0, sizeof(UpdateErrorToMain_Params));
	UpdateErrorToMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateErrorToMain, &UpdateErrorToMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateGotoRoom
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateGotoRoom(bool bTrigger)
{
	static UFunction* uFnUpdateGotoRoom = nullptr;

	if (!uFnUpdateGotoRoom)
	{
		uFnUpdateGotoRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateGotoRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateGotoRoom_Params UpdateGotoRoom_Params;
	memset(&UpdateGotoRoom_Params, 0, sizeof(UpdateGotoRoom_Params));
	UpdateGotoRoom_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateGotoRoom, &UpdateGotoRoom_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyRoomCreating
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLobbyRoomCreating(bool bTrigger)
{
	static UFunction* uFnUpdateLobbyRoomCreating = nullptr;

	if (!uFnUpdateLobbyRoomCreating)
	{
		uFnUpdateLobbyRoomCreating = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyRoomCreating");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLobbyRoomCreating_Params UpdateLobbyRoomCreating_Params;
	memset(&UpdateLobbyRoomCreating_Params, 0, sizeof(UpdateLobbyRoomCreating_Params));
	UpdateLobbyRoomCreating_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLobbyRoomCreating, &UpdateLobbyRoomCreating_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateRoomCreating
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateRoomCreating(bool bTrigger)
{
	static UFunction* uFnUpdateRoomCreating = nullptr;

	if (!uFnUpdateRoomCreating)
	{
		uFnUpdateRoomCreating = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateRoomCreating");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateRoomCreating_Params UpdateRoomCreating_Params;
	memset(&UpdateRoomCreating_Params, 0, sizeof(UpdateRoomCreating_Params));
	UpdateRoomCreating_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomCreating, &UpdateRoomCreating_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyMenuWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLobbyMenuWait(bool bTrigger)
{
	static UFunction* uFnUpdateLobbyMenuWait = nullptr;

	if (!uFnUpdateLobbyMenuWait)
	{
		uFnUpdateLobbyMenuWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyMenuWait");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLobbyMenuWait_Params UpdateLobbyMenuWait_Params;
	memset(&UpdateLobbyMenuWait_Params, 0, sizeof(UpdateLobbyMenuWait_Params));
	UpdateLobbyMenuWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLobbyMenuWait, &UpdateLobbyMenuWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateMain(bool bTrigger)
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMain");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));
	UpdateMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.StartMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsFromSearch
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsFromSearch()
{
	static UFunction* uFnIsFromSearch = nullptr;

	if (!uFnIsFromSearch)
	{
		uFnIsFromSearch = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsFromSearch");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsFromSearch_Params IsFromSearch_Params;
	memset(&IsFromSearch_Params, 0, sizeof(IsFromSearch_Params));

	this->ProcessEvent(uFnIsFromSearch, &IsFromSearch_Params, nullptr);

	return IsFromSearch_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsFromCharaSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsFromCharaSelect()
{
	static UFunction* uFnIsFromCharaSelect = nullptr;

	if (!uFnIsFromCharaSelect)
	{
		uFnIsFromCharaSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsFromCharaSelect");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsFromCharaSelect_Params IsFromCharaSelect_Params;
	memset(&IsFromCharaSelect_Params, 0, sizeof(IsFromCharaSelect_Params));

	this->ProcessEvent(uFnIsFromCharaSelect, &IsFromCharaSelect_Params, nullptr);

	return IsFromCharaSelect_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyChatDisableMessage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40755])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLobbyChatDisableMessage()
{
	static UFunction* uFnUpdateLobbyChatDisableMessage = nullptr;

	if (!uFnUpdateLobbyChatDisableMessage)
	{
		uFnUpdateLobbyChatDisableMessage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyChatDisableMessage");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLobbyChatDisableMessage_Params UpdateLobbyChatDisableMessage_Params;
	memset(&UpdateLobbyChatDisableMessage_Params, 0, sizeof(UpdateLobbyChatDisableMessage_Params));

	this->ProcessEvent(uFnUpdateLobbyChatDisableMessage, &UpdateLobbyChatDisableMessage_Params, nullptr);

	return UpdateLobbyChatDisableMessage_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsForceLobbyExitCall
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37669])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsForceLobbyExitCall()
{
	static UFunction* uFnIsForceLobbyExitCall = nullptr;

	if (!uFnIsForceLobbyExitCall)
	{
		uFnIsForceLobbyExitCall = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsForceLobbyExitCall");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsForceLobbyExitCall_Params IsForceLobbyExitCall_Params;
	memset(&IsForceLobbyExitCall_Params, 0, sizeof(IsForceLobbyExitCall_Params));

	this->ProcessEvent(uFnIsForceLobbyExitCall, &IsForceLobbyExitCall_Params, nullptr);

	return IsForceLobbyExitCall_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.TournamentShowBattler
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40278])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::TournamentShowBattler()
{
	static UFunction* uFnTournamentShowBattler = nullptr;

	if (!uFnTournamentShowBattler)
	{
		uFnTournamentShowBattler = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.TournamentShowBattler");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execTournamentShowBattler_Params TournamentShowBattler_Params;
	memset(&TournamentShowBattler_Params, 0, sizeof(TournamentShowBattler_Params));

	this->ProcessEvent(uFnTournamentShowBattler, &TournamentShowBattler_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsTournamentLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37885])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsTournamentLobby()
{
	static UFunction* uFnIsTournamentLobby = nullptr;

	if (!uFnIsTournamentLobby)
	{
		uFnIsTournamentLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsTournamentLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsTournamentLobby_Params IsTournamentLobby_Params;
	memset(&IsTournamentLobby_Params, 0, sizeof(IsTournamentLobby_Params));

	this->ProcessEvent(uFnIsTournamentLobby, &IsTournamentLobby_Params, nullptr);

	return IsTournamentLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyRoomJoinNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40761])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        State                          (CPF_Parm | CPF_OutParm)
// int32_t                        isGotoRoom                     (CPF_Parm | CPF_OutParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)
// class FString                  ErrorMsgID                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLobbyRoomJoinNative(bool bTrigger, int32_t& State, int32_t& isGotoRoom, int32_t& isError, class FString& ErrorMsgID)
{
	static UFunction* uFnUpdateLobbyRoomJoinNative = nullptr;

	if (!uFnUpdateLobbyRoomJoinNative)
	{
		uFnUpdateLobbyRoomJoinNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLobbyRoomJoinNative");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLobbyRoomJoinNative_Params UpdateLobbyRoomJoinNative_Params;
	memset(&UpdateLobbyRoomJoinNative_Params, 0, sizeof(UpdateLobbyRoomJoinNative_Params));
	UpdateLobbyRoomJoinNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateLobbyRoomJoinNative_Params.State, sizeof(UpdateLobbyRoomJoinNative_Params.State), &State, sizeof(State));
	memcpy_s(&UpdateLobbyRoomJoinNative_Params.isGotoRoom, sizeof(UpdateLobbyRoomJoinNative_Params.isGotoRoom), &isGotoRoom, sizeof(isGotoRoom));
	memcpy_s(&UpdateLobbyRoomJoinNative_Params.isError, sizeof(UpdateLobbyRoomJoinNative_Params.isError), &isError, sizeof(isError));
	memcpy_s(&UpdateLobbyRoomJoinNative_Params.ErrorMsgID, sizeof(UpdateLobbyRoomJoinNative_Params.ErrorMsgID), &ErrorMsgID, sizeof(ErrorMsgID));

	this->ProcessEvent(uFnUpdateLobbyRoomJoinNative, &UpdateLobbyRoomJoinNative_Params, nullptr);

	memcpy_s(&State, sizeof(State), &UpdateLobbyRoomJoinNative_Params.State, sizeof(UpdateLobbyRoomJoinNative_Params.State));
	memcpy_s(&isGotoRoom, sizeof(isGotoRoom), &UpdateLobbyRoomJoinNative_Params.isGotoRoom, sizeof(UpdateLobbyRoomJoinNative_Params.isGotoRoom));
	memcpy_s(&isError, sizeof(isError), &UpdateLobbyRoomJoinNative_Params.isError, sizeof(UpdateLobbyRoomJoinNative_Params.isError));
	memcpy_s(&ErrorMsgID, sizeof(ErrorMsgID), &UpdateLobbyRoomJoinNative_Params.ErrorMsgID, sizeof(UpdateLobbyRoomJoinNative_Params.ErrorMsgID));

	return UpdateLobbyRoomJoinNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateInputTournament
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40723])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::UpdateInputTournament()
{
	static UFunction* uFnUpdateInputTournament = nullptr;

	if (!uFnUpdateInputTournament)
	{
		uFnUpdateInputTournament = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateInputTournament");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateInputTournament_Params UpdateInputTournament_Params;
	memset(&UpdateInputTournament_Params, 0, sizeof(UpdateInputTournament_Params));

	this->ProcessEvent(uFnUpdateInputTournament, &UpdateInputTournament_Params, nullptr);

	return UpdateInputTournament_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateInputNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40722])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        IsLobbyMenu                    (CPF_Parm | CPF_OutParm)
// int32_t                        IsGotoLobbyRoom                (CPF_Parm | CPF_OutParm)
// int32_t                        IsLeaveLobby                   (CPF_Parm | CPF_OutParm)
// int32_t                        IsMainMenu                     (CPF_Parm | CPF_OutParm)
// int32_t                        IsInformationOpen              (CPF_Parm | CPF_OutParm)
// EUE_GAME_MODE                  GameMode                       (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::UpdateInputNative(int32_t& IsLobbyMenu, int32_t& IsGotoLobbyRoom, int32_t& IsLeaveLobby, int32_t& IsMainMenu, int32_t& IsInformationOpen, EUE_GAME_MODE& GameMode)
{
	static UFunction* uFnUpdateInputNative = nullptr;

	if (!uFnUpdateInputNative)
	{
		uFnUpdateInputNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateInputNative");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateInputNative_Params UpdateInputNative_Params;
	memset(&UpdateInputNative_Params, 0, sizeof(UpdateInputNative_Params));
	memcpy_s(&UpdateInputNative_Params.IsLobbyMenu, sizeof(UpdateInputNative_Params.IsLobbyMenu), &IsLobbyMenu, sizeof(IsLobbyMenu));
	memcpy_s(&UpdateInputNative_Params.IsGotoLobbyRoom, sizeof(UpdateInputNative_Params.IsGotoLobbyRoom), &IsGotoLobbyRoom, sizeof(IsGotoLobbyRoom));
	memcpy_s(&UpdateInputNative_Params.IsLeaveLobby, sizeof(UpdateInputNative_Params.IsLeaveLobby), &IsLeaveLobby, sizeof(IsLeaveLobby));
	memcpy_s(&UpdateInputNative_Params.IsMainMenu, sizeof(UpdateInputNative_Params.IsMainMenu), &IsMainMenu, sizeof(IsMainMenu));
	memcpy_s(&UpdateInputNative_Params.IsInformationOpen, sizeof(UpdateInputNative_Params.IsInformationOpen), &IsInformationOpen, sizeof(IsInformationOpen));
	memcpy_s(&UpdateInputNative_Params.GameMode, sizeof(UpdateInputNative_Params.GameMode), &GameMode, sizeof(GameMode));

	this->ProcessEvent(uFnUpdateInputNative, &UpdateInputNative_Params, nullptr);

	memcpy_s(&IsLobbyMenu, sizeof(IsLobbyMenu), &UpdateInputNative_Params.IsLobbyMenu, sizeof(UpdateInputNative_Params.IsLobbyMenu));
	memcpy_s(&IsGotoLobbyRoom, sizeof(IsGotoLobbyRoom), &UpdateInputNative_Params.IsGotoLobbyRoom, sizeof(UpdateInputNative_Params.IsGotoLobbyRoom));
	memcpy_s(&IsLeaveLobby, sizeof(IsLeaveLobby), &UpdateInputNative_Params.IsLeaveLobby, sizeof(UpdateInputNative_Params.IsLeaveLobby));
	memcpy_s(&IsMainMenu, sizeof(IsMainMenu), &UpdateInputNative_Params.IsMainMenu, sizeof(UpdateInputNative_Params.IsMainMenu));
	memcpy_s(&IsInformationOpen, sizeof(IsInformationOpen), &UpdateInputNative_Params.IsInformationOpen, sizeof(UpdateInputNative_Params.IsInformationOpen));
	memcpy_s(&GameMode, sizeof(GameMode), &UpdateInputNative_Params.GameMode, sizeof(UpdateInputNative_Params.GameMode));

	return UpdateInputNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateEntryCancelConfirmNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40658])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsCancel                       (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::UpdateEntryCancelConfirmNative(bool bTrigger, int32_t& IsCancel)
{
	static UFunction* uFnUpdateEntryCancelConfirmNative = nullptr;

	if (!uFnUpdateEntryCancelConfirmNative)
	{
		uFnUpdateEntryCancelConfirmNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateEntryCancelConfirmNative");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateEntryCancelConfirmNative_Params UpdateEntryCancelConfirmNative_Params;
	memset(&UpdateEntryCancelConfirmNative_Params, 0, sizeof(UpdateEntryCancelConfirmNative_Params));
	UpdateEntryCancelConfirmNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateEntryCancelConfirmNative_Params.IsCancel, sizeof(UpdateEntryCancelConfirmNative_Params.IsCancel), &IsCancel, sizeof(IsCancel));

	this->ProcessEvent(uFnUpdateEntryCancelConfirmNative, &UpdateEntryCancelConfirmNative_Params, nullptr);

	memcpy_s(&IsCancel, sizeof(IsCancel), &UpdateEntryCancelConfirmNative_Params.IsCancel, sizeof(UpdateEntryCancelConfirmNative_Params.IsCancel));

	return UpdateEntryCancelConfirmNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveLobbyConfirmNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40742])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsLeave                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::UpdateLeaveLobbyConfirmNative(bool bTrigger, int32_t& IsLeave)
{
	static UFunction* uFnUpdateLeaveLobbyConfirmNative = nullptr;

	if (!uFnUpdateLeaveLobbyConfirmNative)
	{
		uFnUpdateLeaveLobbyConfirmNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateLeaveLobbyConfirmNative");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateLeaveLobbyConfirmNative_Params UpdateLeaveLobbyConfirmNative_Params;
	memset(&UpdateLeaveLobbyConfirmNative_Params, 0, sizeof(UpdateLeaveLobbyConfirmNative_Params));
	UpdateLeaveLobbyConfirmNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateLeaveLobbyConfirmNative_Params.IsLeave, sizeof(UpdateLeaveLobbyConfirmNative_Params.IsLeave), &IsLeave, sizeof(IsLeave));

	this->ProcessEvent(uFnUpdateLeaveLobbyConfirmNative, &UpdateLeaveLobbyConfirmNative_Params, nullptr);

	memcpy_s(&IsLeave, sizeof(IsLeave), &UpdateLeaveLobbyConfirmNative_Params.IsLeave, sizeof(UpdateLeaveLobbyConfirmNative_Params.IsLeave));

	return UpdateLeaveLobbyConfirmNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsLeaveLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37699])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsLeaveLobby()
{
	static UFunction* uFnIsLeaveLobby = nullptr;

	if (!uFnIsLeaveLobby)
	{
		uFnIsLeaveLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsLeaveLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsLeaveLobby_Params IsLeaveLobby_Params;
	memset(&IsLeaveLobby_Params, 0, sizeof(IsLeaveLobby_Params));

	this->ProcessEvent(uFnIsLeaveLobby, &IsLeaveLobby_Params, nullptr);

	return IsLeaveLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.LeaveLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35120])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::LeaveLobby()
{
	static UFunction* uFnLeaveLobby = nullptr;

	if (!uFnLeaveLobby)
	{
		uFnLeaveLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.LeaveLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execLeaveLobby_Params LeaveLobby_Params;
	memset(&LeaveLobby_Params, 0, sizeof(LeaveLobby_Params));

	this->ProcessEvent(uFnLeaveLobby, &LeaveLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsLeaveRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37700])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsLeaveRoom()
{
	static UFunction* uFnIsLeaveRoom = nullptr;

	if (!uFnIsLeaveRoom)
	{
		uFnIsLeaveRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsLeaveRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsLeaveRoom_Params IsLeaveRoom_Params;
	memset(&IsLeaveRoom_Params, 0, sizeof(IsLeaveRoom_Params));

	this->ProcessEvent(uFnIsLeaveRoom, &IsLeaveRoom_Params, nullptr);

	return IsLeaveRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.LeaveRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37985])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::LeaveRoom()
{
	static UFunction* uFnLeaveRoom = nullptr;

	if (!uFnLeaveRoom)
	{
		uFnLeaveRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.LeaveRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execLeaveRoom_Params LeaveRoom_Params;
	memset(&LeaveRoom_Params, 0, sizeof(LeaveRoom_Params));

	this->ProcessEvent(uFnLeaveRoom, &LeaveRoom_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OpenRoomMenuFromSearch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38844])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::OpenRoomMenuFromSearch()
{
	static UFunction* uFnOpenRoomMenuFromSearch = nullptr;

	if (!uFnOpenRoomMenuFromSearch)
	{
		uFnOpenRoomMenuFromSearch = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OpenRoomMenuFromSearch");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execOpenRoomMenuFromSearch_Params OpenRoomMenuFromSearch_Params;
	memset(&OpenRoomMenuFromSearch_Params, 0, sizeof(OpenRoomMenuFromSearch_Params));

	this->ProcessEvent(uFnOpenRoomMenuFromSearch, &OpenRoomMenuFromSearch_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OpenRoomMenuFromCharaSelect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38843])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::OpenRoomMenuFromCharaSelect()
{
	static UFunction* uFnOpenRoomMenuFromCharaSelect = nullptr;

	if (!uFnOpenRoomMenuFromCharaSelect)
	{
		uFnOpenRoomMenuFromCharaSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OpenRoomMenuFromCharaSelect");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execOpenRoomMenuFromCharaSelect_Params OpenRoomMenuFromCharaSelect_Params;
	memset(&OpenRoomMenuFromCharaSelect_Params, 0, sizeof(OpenRoomMenuFromCharaSelect_Params));

	this->ProcessEvent(uFnOpenRoomMenuFromCharaSelect, &OpenRoomMenuFromCharaSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsLobbyMenuRunning
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37711])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        IsCreate                       (CPF_Parm | CPF_OutParm)
// int32_t                        IsSearch                       (CPF_Parm | CPF_OutParm)
// int32_t                        isRankmatch                    (CPF_Parm | CPF_OutParm)
// int32_t                        IsRankBoard                    (CPF_Parm | CPF_OutParm)
// int32_t                        IsLeaveLobby                   (CPF_Parm | CPF_OutParm)
// int32_t                        IsMainMenu                     (CPF_Parm | CPF_OutParm)
// int32_t                        IsLobbyRoom                    (CPF_Parm | CPF_OutParm)
// int32_t                        IsOpenMainMenu                 (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsLobbyMenuRunning(int32_t& IsCreate, int32_t& IsSearch, int32_t& isRankmatch, int32_t& IsRankBoard, int32_t& IsLeaveLobby, int32_t& IsMainMenu, int32_t& IsLobbyRoom, int32_t& IsOpenMainMenu)
{
	static UFunction* uFnIsLobbyMenuRunning = nullptr;

	if (!uFnIsLobbyMenuRunning)
	{
		uFnIsLobbyMenuRunning = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsLobbyMenuRunning");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsLobbyMenuRunning_Params IsLobbyMenuRunning_Params;
	memset(&IsLobbyMenuRunning_Params, 0, sizeof(IsLobbyMenuRunning_Params));
	memcpy_s(&IsLobbyMenuRunning_Params.IsCreate, sizeof(IsLobbyMenuRunning_Params.IsCreate), &IsCreate, sizeof(IsCreate));
	memcpy_s(&IsLobbyMenuRunning_Params.IsSearch, sizeof(IsLobbyMenuRunning_Params.IsSearch), &IsSearch, sizeof(IsSearch));
	memcpy_s(&IsLobbyMenuRunning_Params.isRankmatch, sizeof(IsLobbyMenuRunning_Params.isRankmatch), &isRankmatch, sizeof(isRankmatch));
	memcpy_s(&IsLobbyMenuRunning_Params.IsRankBoard, sizeof(IsLobbyMenuRunning_Params.IsRankBoard), &IsRankBoard, sizeof(IsRankBoard));
	memcpy_s(&IsLobbyMenuRunning_Params.IsLeaveLobby, sizeof(IsLobbyMenuRunning_Params.IsLeaveLobby), &IsLeaveLobby, sizeof(IsLeaveLobby));
	memcpy_s(&IsLobbyMenuRunning_Params.IsMainMenu, sizeof(IsLobbyMenuRunning_Params.IsMainMenu), &IsMainMenu, sizeof(IsMainMenu));
	memcpy_s(&IsLobbyMenuRunning_Params.IsLobbyRoom, sizeof(IsLobbyMenuRunning_Params.IsLobbyRoom), &IsLobbyRoom, sizeof(IsLobbyRoom));
	memcpy_s(&IsLobbyMenuRunning_Params.IsOpenMainMenu, sizeof(IsLobbyMenuRunning_Params.IsOpenMainMenu), &IsOpenMainMenu, sizeof(IsOpenMainMenu));

	this->ProcessEvent(uFnIsLobbyMenuRunning, &IsLobbyMenuRunning_Params, nullptr);

	memcpy_s(&IsCreate, sizeof(IsCreate), &IsLobbyMenuRunning_Params.IsCreate, sizeof(IsLobbyMenuRunning_Params.IsCreate));
	memcpy_s(&IsSearch, sizeof(IsSearch), &IsLobbyMenuRunning_Params.IsSearch, sizeof(IsLobbyMenuRunning_Params.IsSearch));
	memcpy_s(&isRankmatch, sizeof(isRankmatch), &IsLobbyMenuRunning_Params.isRankmatch, sizeof(IsLobbyMenuRunning_Params.isRankmatch));
	memcpy_s(&IsRankBoard, sizeof(IsRankBoard), &IsLobbyMenuRunning_Params.IsRankBoard, sizeof(IsLobbyMenuRunning_Params.IsRankBoard));
	memcpy_s(&IsLeaveLobby, sizeof(IsLeaveLobby), &IsLobbyMenuRunning_Params.IsLeaveLobby, sizeof(IsLobbyMenuRunning_Params.IsLeaveLobby));
	memcpy_s(&IsMainMenu, sizeof(IsMainMenu), &IsLobbyMenuRunning_Params.IsMainMenu, sizeof(IsLobbyMenuRunning_Params.IsMainMenu));
	memcpy_s(&IsLobbyRoom, sizeof(IsLobbyRoom), &IsLobbyMenuRunning_Params.IsLobbyRoom, sizeof(IsLobbyMenuRunning_Params.IsLobbyRoom));
	memcpy_s(&IsOpenMainMenu, sizeof(IsOpenMainMenu), &IsLobbyMenuRunning_Params.IsOpenMainMenu, sizeof(IsLobbyMenuRunning_Params.IsOpenMainMenu));

	return IsLobbyMenuRunning_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OpenLobbyMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38833])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::OpenLobbyMenu()
{
	static UFunction* uFnOpenLobbyMenu = nullptr;

	if (!uFnOpenLobbyMenu)
	{
		uFnOpenLobbyMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OpenLobbyMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execOpenLobbyMenu_Params OpenLobbyMenu_Params;
	memset(&OpenLobbyMenu_Params, 0, sizeof(OpenLobbyMenu_Params));

	this->ProcessEvent(uFnOpenLobbyMenu, &OpenLobbyMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsCreatingLobbyRoom
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37634])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsCreatingLobbyRoom(int32_t& isError)
{
	static UFunction* uFnIsCreatingLobbyRoom = nullptr;

	if (!uFnIsCreatingLobbyRoom)
	{
		uFnIsCreatingLobbyRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsCreatingLobbyRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsCreatingLobbyRoom_Params IsCreatingLobbyRoom_Params;
	memset(&IsCreatingLobbyRoom_Params, 0, sizeof(IsCreatingLobbyRoom_Params));
	memcpy_s(&IsCreatingLobbyRoom_Params.isError, sizeof(IsCreatingLobbyRoom_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsCreatingLobbyRoom, &IsCreatingLobbyRoom_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsCreatingLobbyRoom_Params.isError, sizeof(IsCreatingLobbyRoom_Params.isError));

	return IsCreatingLobbyRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.CreateLobbyRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36334])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::CreateLobbyRoom()
{
	static UFunction* uFnCreateLobbyRoom = nullptr;

	if (!uFnCreateLobbyRoom)
	{
		uFnCreateLobbyRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.CreateLobbyRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execCreateLobbyRoom_Params CreateLobbyRoom_Params;
	memset(&CreateLobbyRoom_Params, 0, sizeof(CreateLobbyRoom_Params));

	this->ProcessEvent(uFnCreateLobbyRoom, &CreateLobbyRoom_Params, nullptr);

	return CreateLobbyRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsCreatingRoom
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37635])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsCreatingRoom(int32_t& isError)
{
	static UFunction* uFnIsCreatingRoom = nullptr;

	if (!uFnIsCreatingRoom)
	{
		uFnIsCreatingRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsCreatingRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsCreatingRoom_Params IsCreatingRoom_Params;
	memset(&IsCreatingRoom_Params, 0, sizeof(IsCreatingRoom_Params));
	memcpy_s(&IsCreatingRoom_Params.isError, sizeof(IsCreatingRoom_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsCreatingRoom, &IsCreatingRoom_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsCreatingRoom_Params.isError, sizeof(IsCreatingRoom_Params.isError));

	return IsCreatingRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.CreateRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36337])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::CreateRoom()
{
	static UFunction* uFnCreateRoom = nullptr;

	if (!uFnCreateRoom)
	{
		uFnCreateRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.CreateRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execCreateRoom_Params CreateRoom_Params;
	memset(&CreateRoom_Params, 0, sizeof(CreateRoom_Params));

	this->ProcessEvent(uFnCreateRoom, &CreateRoom_Params, nullptr);

	return CreateRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsGotoRoomFromLobbyMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37683])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsGotoRoomFromLobbyMenu()
{
	static UFunction* uFnIsGotoRoomFromLobbyMenu = nullptr;

	if (!uFnIsGotoRoomFromLobbyMenu)
	{
		uFnIsGotoRoomFromLobbyMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsGotoRoomFromLobbyMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsGotoRoomFromLobbyMenu_Params IsGotoRoomFromLobbyMenu_Params;
	memset(&IsGotoRoomFromLobbyMenu_Params, 0, sizeof(IsGotoRoomFromLobbyMenu_Params));

	this->ProcessEvent(uFnIsGotoRoomFromLobbyMenu, &IsGotoRoomFromLobbyMenu_Params, nullptr);

	return IsGotoRoomFromLobbyMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsExistRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37661])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobby::IsExistRoom()
{
	static UFunction* uFnIsExistRoom = nullptr;

	if (!uFnIsExistRoom)
	{
		uFnIsExistRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.IsExistRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execIsExistRoom_Params IsExistRoom_Params;
	memset(&IsExistRoom_Params, 0, sizeof(IsExistRoom_Params));

	this->ProcessEvent(uFnIsExistRoom, &IsExistRoom_Params, nullptr);

	return IsExistRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateDrawMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40651])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateDrawMenu()
{
	static UFunction* uFnUpdateDrawMenu = nullptr;

	if (!uFnUpdateDrawMenu)
	{
		uFnUpdateDrawMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateDrawMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateDrawMenu_Params UpdateDrawMenu_Params;
	memset(&UpdateDrawMenu_Params, 0, sizeof(UpdateDrawMenu_Params));

	this->ProcessEvent(uFnUpdateDrawMenu, &UpdateDrawMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40782])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::UpdateMenu()
{
	static UFunction* uFnUpdateMenu = nullptr;

	if (!uFnUpdateMenu)
	{
		uFnUpdateMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.UpdateMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execUpdateMenu_Params UpdateMenu_Params;
	memset(&UpdateMenu_Params, 0, sizeof(UpdateMenu_Params));

	this->ProcessEvent(uFnUpdateMenu, &UpdateMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnCloseNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38813])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::OnCloseNative()
{
	static UFunction* uFnOnCloseNative = nullptr;

	if (!uFnOnCloseNative)
	{
		uFnOnCloseNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.OnCloseNative");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execOnCloseNative_Params OnCloseNative_Params;
	memset(&OnCloseNative_Params, 0, sizeof(OnCloseNative_Params));

	this->ProcessEvent(uFnOnCloseNative, &OnCloseNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobby::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobby.InitMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobby_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateErrorWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateErrorWait(bool bTrigger)
{
	static UFunction* uFnUpdateErrorWait = nullptr;

	if (!uFnUpdateErrorWait)
	{
		uFnUpdateErrorWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateErrorWait");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateErrorWait_Params UpdateErrorWait_Params;
	memset(&UpdateErrorWait_Params, 0, sizeof(UpdateErrorWait_Params));
	UpdateErrorWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateErrorWait, &UpdateErrorWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateError
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateError(bool bTrigger)
{
	static UFunction* uFnUpdateError = nullptr;

	if (!uFnUpdateError)
	{
		uFnUpdateError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateError");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateError_Params UpdateError_Params;
	memset(&UpdateError_Params, 0, sizeof(UpdateError_Params));
	UpdateError_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateError, &UpdateError_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateEndWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateEndWait(bool bTrigger)
{
	static UFunction* uFnUpdateEndWait = nullptr;

	if (!uFnUpdateEndWait)
	{
		uFnUpdateEndWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateEndWait");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateEndWait_Params UpdateEndWait_Params;
	memset(&UpdateEndWait_Params, 0, sizeof(UpdateEndWait_Params));
	UpdateEndWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEndWait, &UpdateEndWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateReturnMainMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateReturnMainMenu(bool bTrigger)
{
	static UFunction* uFnUpdateReturnMainMenu = nullptr;

	if (!uFnUpdateReturnMainMenu)
	{
		uFnUpdateReturnMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateReturnMainMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateReturnMainMenu_Params UpdateReturnMainMenu_Params;
	memset(&UpdateReturnMainMenu_Params, 0, sizeof(UpdateReturnMainMenu_Params));
	UpdateReturnMainMenu_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateReturnMainMenu, &UpdateReturnMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateJoinLobby
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateJoinLobby(bool bTrigger)
{
	static UFunction* uFnUpdateJoinLobby = nullptr;

	if (!uFnUpdateJoinLobby)
	{
		uFnUpdateJoinLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateJoinLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateJoinLobby_Params UpdateJoinLobby_Params;
	memset(&UpdateJoinLobby_Params, 0, sizeof(UpdateJoinLobby_Params));
	UpdateJoinLobby_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateJoinLobby, &UpdateJoinLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateLobby
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateLobby(bool bTrigger)
{
	static UFunction* uFnUpdateLobby = nullptr;

	if (!uFnUpdateLobby)
	{
		uFnUpdateLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateLobby_Params UpdateLobby_Params;
	memset(&UpdateLobby_Params, 0, sizeof(UpdateLobby_Params));
	UpdateLobby_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLobby, &UpdateLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdeteRightMenuCursor
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Disable                        (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdeteRightMenuCursor(bool Disable)
{
	static UFunction* uFnUpdeteRightMenuCursor = nullptr;

	if (!uFnUpdeteRightMenuCursor)
	{
		uFnUpdeteRightMenuCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdeteRightMenuCursor");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdeteRightMenuCursor_Params UpdeteRightMenuCursor_Params;
	memset(&UpdeteRightMenuCursor_Params, 0, sizeof(UpdeteRightMenuCursor_Params));
	UpdeteRightMenuCursor_Params.Disable = Disable;

	this->ProcessEvent(uFnUpdeteRightMenuCursor, &UpdeteRightMenuCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateLobbyMarker
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateLobbyMarker()
{
	static UFunction* uFnUpdateLobbyMarker = nullptr;

	if (!uFnUpdateLobbyMarker)
	{
		uFnUpdateLobbyMarker = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateLobbyMarker");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateLobbyMarker_Params UpdateLobbyMarker_Params;
	memset(&UpdateLobbyMarker_Params, 0, sizeof(UpdateLobbyMarker_Params));

	this->ProcessEvent(uFnUpdateLobbyMarker, &UpdateLobbyMarker_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateLobbyInit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateLobbyInit(bool bTrigger)
{
	static UFunction* uFnUpdateLobbyInit = nullptr;

	if (!uFnUpdateLobbyInit)
	{
		uFnUpdateLobbyInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateLobbyInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateLobbyInit_Params UpdateLobbyInit_Params;
	memset(&UpdateLobbyInit_Params, 0, sizeof(UpdateLobbyInit_Params));
	UpdateLobbyInit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLobbyInit, &UpdateLobbyInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateWorld
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateWorld(bool bTrigger)
{
	static UFunction* uFnUpdateWorld = nullptr;

	if (!uFnUpdateWorld)
	{
		uFnUpdateWorld = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateWorld");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateWorld_Params UpdateWorld_Params;
	memset(&UpdateWorld_Params, 0, sizeof(UpdateWorld_Params));
	UpdateWorld_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateWorld, &UpdateWorld_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateWorldMarker
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateWorldMarker()
{
	static UFunction* uFnUpdateWorldMarker = nullptr;

	if (!uFnUpdateWorldMarker)
	{
		uFnUpdateWorldMarker = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateWorldMarker");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateWorldMarker_Params UpdateWorldMarker_Params;
	memset(&UpdateWorldMarker_Params, 0, sizeof(UpdateWorldMarker_Params));

	this->ProcessEvent(uFnUpdateWorldMarker, &UpdateWorldMarker_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.SetWorldMarker
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ServerIndex                    (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::SetWorldMarker(int32_t ServerIndex)
{
	static UFunction* uFnSetWorldMarker = nullptr;

	if (!uFnSetWorldMarker)
	{
		uFnSetWorldMarker = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.SetWorldMarker");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execSetWorldMarker_Params SetWorldMarker_Params;
	memset(&SetWorldMarker_Params, 0, sizeof(SetWorldMarker_Params));
	memcpy_s(&SetWorldMarker_Params.ServerIndex, sizeof(SetWorldMarker_Params.ServerIndex), &ServerIndex, sizeof(ServerIndex));

	this->ProcessEvent(uFnSetWorldMarker, &SetWorldMarker_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateWorldInit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateWorldInit(bool bTrigger)
{
	static UFunction* uFnUpdateWorldInit = nullptr;

	if (!uFnUpdateWorldInit)
	{
		uFnUpdateWorldInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateWorldInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateWorldInit_Params UpdateWorldInit_Params;
	memset(&UpdateWorldInit_Params, 0, sizeof(UpdateWorldInit_Params));
	UpdateWorldInit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateWorldInit, &UpdateWorldInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateServer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateServer(bool bTrigger)
{
	static UFunction* uFnUpdateServer = nullptr;

	if (!uFnUpdateServer)
	{
		uFnUpdateServer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateServer");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateServer_Params UpdateServer_Params;
	memset(&UpdateServer_Params, 0, sizeof(UpdateServer_Params));
	UpdateServer_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateServer, &UpdateServer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateServerInit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateServerInit(bool bTrigger)
{
	static UFunction* uFnUpdateServerInit = nullptr;

	if (!uFnUpdateServerInit)
	{
		uFnUpdateServerInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateServerInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateServerInit_Params UpdateServerInit_Params;
	memset(&UpdateServerInit_Params, 0, sizeof(UpdateServerInit_Params));
	UpdateServerInit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateServerInit, &UpdateServerInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdatePrevLobby
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)
// uint32_t                       bNoSelectLobby                 (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdatePrevLobby(bool bTrigger, bool bNoSelectLobby)
{
	static UFunction* uFnUpdatePrevLobby = nullptr;

	if (!uFnUpdatePrevLobby)
	{
		uFnUpdatePrevLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdatePrevLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdatePrevLobby_Params UpdatePrevLobby_Params;
	memset(&UpdatePrevLobby_Params, 0, sizeof(UpdatePrevLobby_Params));
	UpdatePrevLobby_Params.bTrigger = bTrigger;
	UpdatePrevLobby_Params.bNoSelectLobby = bNoSelectLobby;

	this->ProcessEvent(uFnUpdatePrevLobby, &UpdatePrevLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateSelectState
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateSelectState(bool bTrigger)
{
	static UFunction* uFnUpdateSelectState = nullptr;

	if (!uFnUpdateSelectState)
	{
		uFnUpdateSelectState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateSelectState");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateSelectState_Params UpdateSelectState_Params;
	memset(&UpdateSelectState_Params, 0, sizeof(UpdateSelectState_Params));
	UpdateSelectState_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateSelectState, &UpdateSelectState_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.StartMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateScrollWindow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40844])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateScrollWindow()
{
	static UFunction* uFnUpdateScrollWindow = nullptr;

	if (!uFnUpdateScrollWindow)
	{
		uFnUpdateScrollWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateScrollWindow");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateScrollWindow_Params UpdateScrollWindow_Params;
	memset(&UpdateScrollWindow_Params, 0, sizeof(UpdateScrollWindow_Params));

	this->ProcessEvent(uFnUpdateScrollWindow, &UpdateScrollWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdatePrevLobby_Native
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40809])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       IsTrigger                      (CPF_Parm)
// uint32_t                       bNoSelectLobby                 (CPF_Parm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)
// class FString                  ErrMsgID                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdatePrevLobby_Native(bool IsTrigger, bool bNoSelectLobby, int32_t& isError, class FString& ErrMsgID)
{
	static UFunction* uFnUpdatePrevLobby_Native = nullptr;

	if (!uFnUpdatePrevLobby_Native)
	{
		uFnUpdatePrevLobby_Native = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdatePrevLobby_Native");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdatePrevLobby_Native_Params UpdatePrevLobby_Native_Params;
	memset(&UpdatePrevLobby_Native_Params, 0, sizeof(UpdatePrevLobby_Native_Params));
	UpdatePrevLobby_Native_Params.IsTrigger = IsTrigger;
	UpdatePrevLobby_Native_Params.bNoSelectLobby = bNoSelectLobby;
	memcpy_s(&UpdatePrevLobby_Native_Params.isError, sizeof(UpdatePrevLobby_Native_Params.isError), &isError, sizeof(isError));
	memcpy_s(&UpdatePrevLobby_Native_Params.ErrMsgID, sizeof(UpdatePrevLobby_Native_Params.ErrMsgID), &ErrMsgID, sizeof(ErrMsgID));

	this->ProcessEvent(uFnUpdatePrevLobby_Native, &UpdatePrevLobby_Native_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &UpdatePrevLobby_Native_Params.isError, sizeof(UpdatePrevLobby_Native_Params.isError));
	memcpy_s(&ErrMsgID, sizeof(ErrMsgID), &UpdatePrevLobby_Native_Params.ErrMsgID, sizeof(UpdatePrevLobby_Native_Params.ErrMsgID));

	return UpdatePrevLobby_Native_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.CloseScrollWindow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36235])
// Parameter Info:
// ECURSOR_TYPE                   Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::CloseScrollWindow(ECURSOR_TYPE Type)
{
	static UFunction* uFnCloseScrollWindow = nullptr;

	if (!uFnCloseScrollWindow)
	{
		uFnCloseScrollWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.CloseScrollWindow");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execCloseScrollWindow_Params CloseScrollWindow_Params;
	memset(&CloseScrollWindow_Params, 0, sizeof(CloseScrollWindow_Params));
	memcpy_s(&CloseScrollWindow_Params.Type, sizeof(CloseScrollWindow_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnCloseScrollWindow, &CloseScrollWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OpenScrollWindow
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38845])
// Parameter Info:
// ECURSOR_TYPE                   Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::OpenScrollWindow(ECURSOR_TYPE Type)
{
	static UFunction* uFnOpenScrollWindow = nullptr;

	if (!uFnOpenScrollWindow)
	{
		uFnOpenScrollWindow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OpenScrollWindow");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execOpenScrollWindow_Params OpenScrollWindow_Params;
	memset(&OpenScrollWindow_Params, 0, sizeof(OpenScrollWindow_Params));
	memcpy_s(&OpenScrollWindow_Params.Type, sizeof(OpenScrollWindow_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnOpenScrollWindow, &OpenScrollWindow_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ScrollUpdate
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39481])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// ECURSOR_TYPE                   Type                           (CPF_Parm)
// int32_t                        Cursor                         (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::ScrollUpdate(ECURSOR_TYPE Type, int32_t& Cursor)
{
	static UFunction* uFnScrollUpdate = nullptr;

	if (!uFnScrollUpdate)
	{
		uFnScrollUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ScrollUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execScrollUpdate_Params ScrollUpdate_Params;
	memset(&ScrollUpdate_Params, 0, sizeof(ScrollUpdate_Params));
	memcpy_s(&ScrollUpdate_Params.Type, sizeof(ScrollUpdate_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ScrollUpdate_Params.Cursor, sizeof(ScrollUpdate_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnScrollUpdate, &ScrollUpdate_Params, nullptr);

	memcpy_s(&Cursor, sizeof(Cursor), &ScrollUpdate_Params.Cursor, sizeof(ScrollUpdate_Params.Cursor));

	return ScrollUpdate_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ScrollInit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39479])
// Parameter Info:
// ECURSOR_TYPE                   Type                           (CPF_Parm)
// int32_t                        Cursor                         (CPF_Parm)
// int32_t                        dispNum                        (CPF_Parm)
// int32_t                        maxNum                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::ScrollInit(ECURSOR_TYPE Type, int32_t Cursor, int32_t dispNum, int32_t maxNum)
{
	static UFunction* uFnScrollInit = nullptr;

	if (!uFnScrollInit)
	{
		uFnScrollInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ScrollInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execScrollInit_Params ScrollInit_Params;
	memset(&ScrollInit_Params, 0, sizeof(ScrollInit_Params));
	memcpy_s(&ScrollInit_Params.Type, sizeof(ScrollInit_Params.Type), &Type, sizeof(Type));
	memcpy_s(&ScrollInit_Params.Cursor, sizeof(ScrollInit_Params.Cursor), &Cursor, sizeof(Cursor));
	memcpy_s(&ScrollInit_Params.dispNum, sizeof(ScrollInit_Params.dispNum), &dispNum, sizeof(dispNum));
	memcpy_s(&ScrollInit_Params.maxNum, sizeof(ScrollInit_Params.maxNum), &maxNum, sizeof(maxNum));

	this->ProcessEvent(uFnScrollInit, &ScrollInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.GetJoinLobbyErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37078])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkLobbySelect::GetJoinLobbyErrorMessageID()
{
	static UFunction* uFnGetJoinLobbyErrorMessageID = nullptr;

	if (!uFnGetJoinLobbyErrorMessageID)
	{
		uFnGetJoinLobbyErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.GetJoinLobbyErrorMessageID");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execGetJoinLobbyErrorMessageID_Params GetJoinLobbyErrorMessageID_Params;
	memset(&GetJoinLobbyErrorMessageID_Params, 0, sizeof(GetJoinLobbyErrorMessageID_Params));

	this->ProcessEvent(uFnGetJoinLobbyErrorMessageID, &GetJoinLobbyErrorMessageID_Params, nullptr);

	return GetJoinLobbyErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsJoinLobby
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37695])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsJoinLobby(int32_t& isError)
{
	static UFunction* uFnIsJoinLobby = nullptr;

	if (!uFnIsJoinLobby)
	{
		uFnIsJoinLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsJoinLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsJoinLobby_Params IsJoinLobby_Params;
	memset(&IsJoinLobby_Params, 0, sizeof(IsJoinLobby_Params));
	memcpy_s(&IsJoinLobby_Params.isError, sizeof(IsJoinLobby_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsJoinLobby, &IsJoinLobby_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsJoinLobby_Params.isError, sizeof(IsJoinLobby_Params.isError));

	return IsJoinLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ReqJoinLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39353])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Cursor                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::ReqJoinLobby(int32_t Cursor)
{
	static UFunction* uFnReqJoinLobby = nullptr;

	if (!uFnReqJoinLobby)
	{
		uFnReqJoinLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ReqJoinLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execReqJoinLobby_Params ReqJoinLobby_Params;
	memset(&ReqJoinLobby_Params, 0, sizeof(ReqJoinLobby_Params));
	memcpy_s(&ReqJoinLobby_Params.Cursor, sizeof(ReqJoinLobby_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnReqJoinLobby, &ReqJoinLobby_Params, nullptr);

	return ReqJoinLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsSelectableLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37846])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Cursor                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsSelectableLobby(int32_t Cursor)
{
	static UFunction* uFnIsSelectableLobby = nullptr;

	if (!uFnIsSelectableLobby)
	{
		uFnIsSelectableLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsSelectableLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsSelectableLobby_Params IsSelectableLobby_Params;
	memset(&IsSelectableLobby_Params, 0, sizeof(IsSelectableLobby_Params));
	memcpy_s(&IsSelectableLobby_Params.Cursor, sizeof(IsSelectableLobby_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnIsSelectableLobby, &IsSelectableLobby_Params, nullptr);

	return IsSelectableLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.SelectWorld
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39671])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Cursor                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::SelectWorld(int32_t Cursor)
{
	static UFunction* uFnSelectWorld = nullptr;

	if (!uFnSelectWorld)
	{
		uFnSelectWorld = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.SelectWorld");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execSelectWorld_Params SelectWorld_Params;
	memset(&SelectWorld_Params, 0, sizeof(SelectWorld_Params));
	memcpy_s(&SelectWorld_Params.Cursor, sizeof(SelectWorld_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnSelectWorld, &SelectWorld_Params, nullptr);

	return SelectWorld_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.SelectServer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39670])
// Parameter Info:
// int32_t                        Cursor                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::SelectServer(int32_t Cursor)
{
	static UFunction* uFnSelectServer = nullptr;

	if (!uFnSelectServer)
	{
		uFnSelectServer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.SelectServer");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execSelectServer_Params SelectServer_Params;
	memset(&SelectServer_Params, 0, sizeof(SelectServer_Params));
	memcpy_s(&SelectServer_Params.Cursor, sizeof(SelectServer_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnSelectServer, &SelectServer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.GetLobbyInitErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37089])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkLobbySelect::GetLobbyInitErrorMessageID()
{
	static UFunction* uFnGetLobbyInitErrorMessageID = nullptr;

	if (!uFnGetLobbyInitErrorMessageID)
	{
		uFnGetLobbyInitErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.GetLobbyInitErrorMessageID");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execGetLobbyInitErrorMessageID_Params GetLobbyInitErrorMessageID_Params;
	memset(&GetLobbyInitErrorMessageID_Params, 0, sizeof(GetLobbyInitErrorMessageID_Params));

	this->ProcessEvent(uFnGetLobbyInitErrorMessageID, &GetLobbyInitErrorMessageID_Params, nullptr);

	return GetLobbyInitErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsLobbyInit
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37709])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsLobbyInit(int32_t& isError)
{
	static UFunction* uFnIsLobbyInit = nullptr;

	if (!uFnIsLobbyInit)
	{
		uFnIsLobbyInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsLobbyInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsLobbyInit_Params IsLobbyInit_Params;
	memset(&IsLobbyInit_Params, 0, sizeof(IsLobbyInit_Params));
	memcpy_s(&IsLobbyInit_Params.isError, sizeof(IsLobbyInit_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsLobbyInit, &IsLobbyInit_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsLobbyInit_Params.isError, sizeof(IsLobbyInit_Params.isError));

	return IsLobbyInit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ReqLobbyInit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39354])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::ReqLobbyInit()
{
	static UFunction* uFnReqLobbyInit = nullptr;

	if (!uFnReqLobbyInit)
	{
		uFnReqLobbyInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ReqLobbyInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execReqLobbyInit_Params ReqLobbyInit_Params;
	memset(&ReqLobbyInit_Params, 0, sizeof(ReqLobbyInit_Params));

	this->ProcessEvent(uFnReqLobbyInit, &ReqLobbyInit_Params, nullptr);

	return ReqLobbyInit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.GetWorldInitErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37196])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkLobbySelect::GetWorldInitErrorMessageID()
{
	static UFunction* uFnGetWorldInitErrorMessageID = nullptr;

	if (!uFnGetWorldInitErrorMessageID)
	{
		uFnGetWorldInitErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.GetWorldInitErrorMessageID");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execGetWorldInitErrorMessageID_Params GetWorldInitErrorMessageID_Params;
	memset(&GetWorldInitErrorMessageID_Params, 0, sizeof(GetWorldInitErrorMessageID_Params));

	this->ProcessEvent(uFnGetWorldInitErrorMessageID, &GetWorldInitErrorMessageID_Params, nullptr);

	return GetWorldInitErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsWorldInit
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37932])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsWorldInit(int32_t& isError)
{
	static UFunction* uFnIsWorldInit = nullptr;

	if (!uFnIsWorldInit)
	{
		uFnIsWorldInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsWorldInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsWorldInit_Params IsWorldInit_Params;
	memset(&IsWorldInit_Params, 0, sizeof(IsWorldInit_Params));
	memcpy_s(&IsWorldInit_Params.isError, sizeof(IsWorldInit_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsWorldInit, &IsWorldInit_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsWorldInit_Params.isError, sizeof(IsWorldInit_Params.isError));

	return IsWorldInit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ReqWorldInit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39373])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::ReqWorldInit()
{
	static UFunction* uFnReqWorldInit = nullptr;

	if (!uFnReqWorldInit)
	{
		uFnReqWorldInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ReqWorldInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execReqWorldInit_Params ReqWorldInit_Params;
	memset(&ReqWorldInit_Params, 0, sizeof(ReqWorldInit_Params));

	this->ProcessEvent(uFnReqWorldInit, &ReqWorldInit_Params, nullptr);

	return ReqWorldInit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsSelectableServer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37847])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ServerIndex                    (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsSelectableServer(int32_t ServerIndex)
{
	static UFunction* uFnIsSelectableServer = nullptr;

	if (!uFnIsSelectableServer)
	{
		uFnIsSelectableServer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsSelectableServer");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsSelectableServer_Params IsSelectableServer_Params;
	memset(&IsSelectableServer_Params, 0, sizeof(IsSelectableServer_Params));
	memcpy_s(&IsSelectableServer_Params.ServerIndex, sizeof(IsSelectableServer_Params.ServerIndex), &ServerIndex, sizeof(ServerIndex));

	this->ProcessEvent(uFnIsSelectableServer, &IsSelectableServer_Params, nullptr);

	return IsSelectableServer_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.GetServerInitErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37167])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkLobbySelect::GetServerInitErrorMessageID()
{
	static UFunction* uFnGetServerInitErrorMessageID = nullptr;

	if (!uFnGetServerInitErrorMessageID)
	{
		uFnGetServerInitErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.GetServerInitErrorMessageID");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execGetServerInitErrorMessageID_Params GetServerInitErrorMessageID_Params;
	memset(&GetServerInitErrorMessageID_Params, 0, sizeof(GetServerInitErrorMessageID_Params));

	this->ProcessEvent(uFnGetServerInitErrorMessageID, &GetServerInitErrorMessageID_Params, nullptr);

	return GetServerInitErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsServerInit
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37850])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsServerInit(int32_t& isError)
{
	static UFunction* uFnIsServerInit = nullptr;

	if (!uFnIsServerInit)
	{
		uFnIsServerInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsServerInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsServerInit_Params IsServerInit_Params;
	memset(&IsServerInit_Params, 0, sizeof(IsServerInit_Params));
	memcpy_s(&IsServerInit_Params.isError, sizeof(IsServerInit_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsServerInit, &IsServerInit_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsServerInit_Params.isError, sizeof(IsServerInit_Params.isError));

	return IsServerInit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ReqServerInit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39357])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::ReqServerInit()
{
	static UFunction* uFnReqServerInit = nullptr;

	if (!uFnReqServerInit)
	{
		uFnReqServerInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.ReqServerInit");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execReqServerInit_Params ReqServerInit_Params;
	memset(&ReqServerInit_Params, 0, sizeof(ReqServerInit_Params));

	this->ProcessEvent(uFnReqServerInit, &ReqServerInit_Params, nullptr);

	return ReqServerInit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsInLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37692])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsInLobby()
{
	static UFunction* uFnIsInLobby = nullptr;

	if (!uFnIsInLobby)
	{
		uFnIsInLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsInLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsInLobby_Params IsInLobby_Params;
	memset(&IsInLobby_Params, 0, sizeof(IsInLobby_Params));

	this->ProcessEvent(uFnIsInLobby, &IsInLobby_Params, nullptr);

	return IsInLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.SetupLobbySelected
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39839])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::SetupLobbySelected()
{
	static UFunction* uFnSetupLobbySelected = nullptr;

	if (!uFnSetupLobbySelected)
	{
		uFnSetupLobbySelected = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.SetupLobbySelected");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execSetupLobbySelected_Params SetupLobbySelected_Params;
	memset(&SetupLobbySelected_Params, 0, sizeof(SetupLobbySelected_Params));

	this->ProcessEvent(uFnSetupLobbySelected, &SetupLobbySelected_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsLobbySelected
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37713])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsLobbySelected()
{
	static UFunction* uFnIsLobbySelected = nullptr;

	if (!uFnIsLobbySelected)
	{
		uFnIsLobbySelected = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsLobbySelected");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsLobbySelected_Params IsLobbySelected_Params;
	memset(&IsLobbySelected_Params, 0, sizeof(IsLobbySelected_Params));

	this->ProcessEvent(uFnIsLobbySelected, &IsLobbySelected_Params, nullptr);

	return IsLobbySelected_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsEventRobbyEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37657])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkLobbySelect::IsEventRobbyEnable()
{
	static UFunction* uFnIsEventRobbyEnable = nullptr;

	if (!uFnIsEventRobbyEnable)
	{
		uFnIsEventRobbyEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.IsEventRobbyEnable");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execIsEventRobbyEnable_Params IsEventRobbyEnable_Params;
	memset(&IsEventRobbyEnable_Params, 0, sizeof(IsEventRobbyEnable_Params));

	this->ProcessEvent(uFnIsEventRobbyEnable, &IsEventRobbyEnable_Params, nullptr);

	return IsEventRobbyEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateDrawMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40651])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::UpdateDrawMenu()
{
	static UFunction* uFnUpdateDrawMenu = nullptr;

	if (!uFnUpdateDrawMenu)
	{
		uFnUpdateDrawMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.UpdateDrawMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execUpdateDrawMenu_Params UpdateDrawMenu_Params;
	memset(&UpdateDrawMenu_Params, 0, sizeof(UpdateDrawMenu_Params));

	this->ProcessEvent(uFnUpdateDrawMenu, &UpdateDrawMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnCloseNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38813])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::OnCloseNative()
{
	static UFunction* uFnOnCloseNative = nullptr;

	if (!uFnOnCloseNative)
	{
		uFnOnCloseNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.OnCloseNative");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execOnCloseNative_Params OnCloseNative_Params;
	memset(&OnCloseNative_Params, 0, sizeof(OnCloseNative_Params));

	this->ProcessEvent(uFnOnCloseNative, &OnCloseNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkLobbySelect::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkLobbySelect.InitMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkLobbySelect_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRankBoard::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRankBoard::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.UpdateMain
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRankBoard::UpdateMain(bool bTrigger)
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.UpdateMain");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));
	UpdateMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRankBoard::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRankBoard::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.StartMenu
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRankBoard::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRankBoard::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRankBoard::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkRankBoard::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.UpdateDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40652])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRankBoard::UpdateDrawNative()
{
	static UFunction* uFnUpdateDrawNative = nullptr;

	if (!uFnUpdateDrawNative)
	{
		uFnUpdateDrawNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.UpdateDrawNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execUpdateDrawNative_Params UpdateDrawNative_Params;
	memset(&UpdateDrawNative_Params, 0, sizeof(UpdateDrawNative_Params));

	this->ProcessEvent(uFnUpdateDrawNative, &UpdateDrawNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.UpdateMainNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40768])
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRankBoard::UpdateMainNative(bool bTrigger)
{
	static UFunction* uFnUpdateMainNative = nullptr;

	if (!uFnUpdateMainNative)
	{
		uFnUpdateMainNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.UpdateMainNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execUpdateMainNative_Params UpdateMainNative_Params;
	memset(&UpdateMainNative_Params, 0, sizeof(UpdateMainNative_Params));
	UpdateMainNative_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainNative, &UpdateMainNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.FinalizeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36842])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRankBoard::FinalizeNative()
{
	static UFunction* uFnFinalizeNative = nullptr;

	if (!uFnFinalizeNative)
	{
		uFnFinalizeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.FinalizeNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execFinalizeNative_Params FinalizeNative_Params;
	memset(&FinalizeNative_Params, 0, sizeof(FinalizeNative_Params));

	this->ProcessEvent(uFnFinalizeNative, &FinalizeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRankBoard::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRankBoard.InitializeNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRankBoard_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateEnd(bool bTrigger)
{
	static UFunction* uFnUpdateEnd = nullptr;

	if (!uFnUpdateEnd)
	{
		uFnUpdateEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateEnd");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateEnd_Params UpdateEnd_Params;
	memset(&UpdateEnd_Params, 0, sizeof(UpdateEnd_Params));
	UpdateEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEnd, &UpdateEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomErrorWait2
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateRoomErrorWait2(bool bTrigger)
{
	static UFunction* uFnUpdateRoomErrorWait2 = nullptr;

	if (!uFnUpdateRoomErrorWait2)
	{
		uFnUpdateRoomErrorWait2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomErrorWait2");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateRoomErrorWait2_Params UpdateRoomErrorWait2_Params;
	memset(&UpdateRoomErrorWait2_Params, 0, sizeof(UpdateRoomErrorWait2_Params));
	UpdateRoomErrorWait2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomErrorWait2, &UpdateRoomErrorWait2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomErrorWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateRoomErrorWait(bool bTrigger)
{
	static UFunction* uFnUpdateRoomErrorWait = nullptr;

	if (!uFnUpdateRoomErrorWait)
	{
		uFnUpdateRoomErrorWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomErrorWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateRoomErrorWait_Params UpdateRoomErrorWait_Params;
	memset(&UpdateRoomErrorWait_Params, 0, sizeof(UpdateRoomErrorWait_Params));
	UpdateRoomErrorWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomErrorWait, &UpdateRoomErrorWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomError
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateRoomError(bool bTrigger)
{
	static UFunction* uFnUpdateRoomError = nullptr;

	if (!uFnUpdateRoomError)
	{
		uFnUpdateRoomError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomError");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateRoomError_Params UpdateRoomError_Params;
	memset(&UpdateRoomError_Params, 0, sizeof(UpdateRoomError_Params));
	UpdateRoomError_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomError, &UpdateRoomError_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateGotoBattle
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateGotoBattle(bool bTrigger)
{
	static UFunction* uFnUpdateGotoBattle = nullptr;

	if (!uFnUpdateGotoBattle)
	{
		uFnUpdateGotoBattle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateGotoBattle");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateGotoBattle_Params UpdateGotoBattle_Params;
	memset(&UpdateGotoBattle_Params, 0, sizeof(UpdateGotoBattle_Params));
	UpdateGotoBattle_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateGotoBattle, &UpdateGotoBattle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateLeaveRoomConfirm
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateLeaveRoomConfirm(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveRoomConfirm = nullptr;

	if (!uFnUpdateLeaveRoomConfirm)
	{
		uFnUpdateLeaveRoomConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateLeaveRoomConfirm");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateLeaveRoomConfirm_Params UpdateLeaveRoomConfirm_Params;
	memset(&UpdateLeaveRoomConfirm_Params, 0, sizeof(UpdateLeaveRoomConfirm_Params));
	UpdateLeaveRoomConfirm_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveRoomConfirm, &UpdateLeaveRoomConfirm_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateLeaveLobbyWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateLeaveLobbyWait(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveLobbyWait = nullptr;

	if (!uFnUpdateLeaveLobbyWait)
	{
		uFnUpdateLeaveLobbyWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateLeaveLobbyWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateLeaveLobbyWait_Params UpdateLeaveLobbyWait_Params;
	memset(&UpdateLeaveLobbyWait_Params, 0, sizeof(UpdateLeaveLobbyWait_Params));
	UpdateLeaveLobbyWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveLobbyWait, &UpdateLeaveLobbyWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateLeaveRoomWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateLeaveRoomWait(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveRoomWait = nullptr;

	if (!uFnUpdateLeaveRoomWait)
	{
		uFnUpdateLeaveRoomWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateLeaveRoomWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateLeaveRoomWait_Params UpdateLeaveRoomWait_Params;
	memset(&UpdateLeaveRoomWait_Params, 0, sizeof(UpdateLeaveRoomWait_Params));
	UpdateLeaveRoomWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveRoomWait, &UpdateLeaveRoomWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateBattleReadyWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateBattleReadyWait(bool bTrigger)
{
	static UFunction* uFnUpdateBattleReadyWait = nullptr;

	if (!uFnUpdateBattleReadyWait)
	{
		uFnUpdateBattleReadyWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateBattleReadyWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateBattleReadyWait_Params UpdateBattleReadyWait_Params;
	memset(&UpdateBattleReadyWait_Params, 0, sizeof(UpdateBattleReadyWait_Params));
	UpdateBattleReadyWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateBattleReadyWait, &UpdateBattleReadyWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateContactMenuWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateContactMenuWait(bool bTrigger)
{
	static UFunction* uFnUpdateContactMenuWait = nullptr;

	if (!uFnUpdateContactMenuWait)
	{
		uFnUpdateContactMenuWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateContactMenuWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateContactMenuWait_Params UpdateContactMenuWait_Params;
	memset(&UpdateContactMenuWait_Params, 0, sizeof(UpdateContactMenuWait_Params));
	UpdateContactMenuWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateContactMenuWait, &UpdateContactMenuWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomMenuWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateRoomMenuWait(bool bTrigger)
{
	static UFunction* uFnUpdateRoomMenuWait = nullptr;

	if (!uFnUpdateRoomMenuWait)
	{
		uFnUpdateRoomMenuWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomMenuWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateRoomMenuWait_Params UpdateRoomMenuWait_Params;
	memset(&UpdateRoomMenuWait_Params, 0, sizeof(UpdateRoomMenuWait_Params));
	UpdateRoomMenuWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomMenuWait, &UpdateRoomMenuWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateMain(bool bTrigger)
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateMain");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));
	UpdateMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateMainWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateMainWait(bool bTrigger)
{
	static UFunction* uFnUpdateMainWait = nullptr;

	if (!uFnUpdateMainWait)
	{
		uFnUpdateMainWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateMainWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateMainWait_Params UpdateMainWait_Params;
	memset(&UpdateMainWait_Params, 0, sizeof(UpdateMainWait_Params));
	UpdateMainWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainWait, &UpdateMainWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GetContactMenuTypeFromCursor
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// ENETCONTACT_MENU_TYPE          Type                           (CPF_Parm | CPF_OutParm)
// int32_t                        SlotIndex                      (CPF_Parm | CPF_OutParm)
// int32_t                        KyoutaiIndex                   (CPF_Parm | CPF_OutParm)
// int32_t                        ChairIndex                     (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::GetContactMenuTypeFromCursor(ENETCONTACT_MENU_TYPE& Type, int32_t& SlotIndex, int32_t& KyoutaiIndex, int32_t& ChairIndex)
{
	static UFunction* uFnGetContactMenuTypeFromCursor = nullptr;

	if (!uFnGetContactMenuTypeFromCursor)
	{
		uFnGetContactMenuTypeFromCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GetContactMenuTypeFromCursor");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execGetContactMenuTypeFromCursor_Params GetContactMenuTypeFromCursor_Params;
	memset(&GetContactMenuTypeFromCursor_Params, 0, sizeof(GetContactMenuTypeFromCursor_Params));
	memcpy_s(&GetContactMenuTypeFromCursor_Params.Type, sizeof(GetContactMenuTypeFromCursor_Params.Type), &Type, sizeof(Type));
	memcpy_s(&GetContactMenuTypeFromCursor_Params.SlotIndex, sizeof(GetContactMenuTypeFromCursor_Params.SlotIndex), &SlotIndex, sizeof(SlotIndex));
	memcpy_s(&GetContactMenuTypeFromCursor_Params.KyoutaiIndex, sizeof(GetContactMenuTypeFromCursor_Params.KyoutaiIndex), &KyoutaiIndex, sizeof(KyoutaiIndex));
	memcpy_s(&GetContactMenuTypeFromCursor_Params.ChairIndex, sizeof(GetContactMenuTypeFromCursor_Params.ChairIndex), &ChairIndex, sizeof(ChairIndex));

	this->ProcessEvent(uFnGetContactMenuTypeFromCursor, &GetContactMenuTypeFromCursor_Params, nullptr);

	memcpy_s(&Type, sizeof(Type), &GetContactMenuTypeFromCursor_Params.Type, sizeof(GetContactMenuTypeFromCursor_Params.Type));
	memcpy_s(&SlotIndex, sizeof(SlotIndex), &GetContactMenuTypeFromCursor_Params.SlotIndex, sizeof(GetContactMenuTypeFromCursor_Params.SlotIndex));
	memcpy_s(&KyoutaiIndex, sizeof(KyoutaiIndex), &GetContactMenuTypeFromCursor_Params.KyoutaiIndex, sizeof(GetContactMenuTypeFromCursor_Params.KyoutaiIndex));
	memcpy_s(&ChairIndex, sizeof(ChairIndex), &GetContactMenuTypeFromCursor_Params.ChairIndex, sizeof(GetContactMenuTypeFromCursor_Params.ChairIndex));

	return GetContactMenuTypeFromCursor_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateIconDetail
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateIconDetail()
{
	static UFunction* uFnUpdateIconDetail = nullptr;

	if (!uFnUpdateIconDetail)
	{
		uFnUpdateIconDetail = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateIconDetail");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateIconDetail_Params UpdateIconDetail_Params;
	memset(&UpdateIconDetail_Params, 0, sizeof(UpdateIconDetail_Params));

	this->ProcessEvent(uFnUpdateIconDetail, &UpdateIconDetail_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateGameTable
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateGameTable()
{
	static UFunction* uFnUpdateGameTable = nullptr;

	if (!uFnUpdateGameTable)
	{
		uFnUpdateGameTable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateGameTable");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateGameTable_Params UpdateGameTable_Params;
	memset(&UpdateGameTable_Params, 0, sizeof(UpdateGameTable_Params));

	this->ProcessEvent(uFnUpdateGameTable, &UpdateGameTable_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateFocusMove
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::UpdateFocusMove()
{
	static UFunction* uFnUpdateFocusMove = nullptr;

	if (!uFnUpdateFocusMove)
	{
		uFnUpdateFocusMove = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateFocusMove");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateFocusMove_Params UpdateFocusMove_Params;
	memset(&UpdateFocusMove_Params, 0, sizeof(UpdateFocusMove_Params));

	this->ProcessEvent(uFnUpdateFocusMove, &UpdateFocusMove_Params, nullptr);

	return UpdateFocusMove_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateFocus
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateFocus()
{
	static UFunction* uFnUpdateFocus = nullptr;

	if (!uFnUpdateFocus)
	{
		uFnUpdateFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateFocus");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateFocus_Params UpdateFocus_Params;
	memset(&UpdateFocus_Params, 0, sizeof(UpdateFocus_Params));

	this->ProcessEvent(uFnUpdateFocus, &UpdateFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SetRoomInfo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        RoomType                       (CPF_Parm)
// int32_t                        Policy                         (CPF_Parm)
// int32_t                        RotateType                     (CPF_Parm)
// int32_t                        roundNum                       (CPF_Parm)
// int32_t                        RoundTime                      (CPF_Parm)
// int32_t                        VoiceChatType                  (CPF_Parm)
// int32_t                        ShareType                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::eventSetRoomInfo(int32_t RoomType, int32_t Policy, int32_t RotateType, int32_t roundNum, int32_t RoundTime, int32_t VoiceChatType, int32_t ShareType)
{
	static UFunction* uFnSetRoomInfo = nullptr;

	if (!uFnSetRoomInfo)
	{
		uFnSetRoomInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SetRoomInfo");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_eventSetRoomInfo_Params SetRoomInfo_Params;
	memset(&SetRoomInfo_Params, 0, sizeof(SetRoomInfo_Params));
	memcpy_s(&SetRoomInfo_Params.RoomType, sizeof(SetRoomInfo_Params.RoomType), &RoomType, sizeof(RoomType));
	memcpy_s(&SetRoomInfo_Params.Policy, sizeof(SetRoomInfo_Params.Policy), &Policy, sizeof(Policy));
	memcpy_s(&SetRoomInfo_Params.RotateType, sizeof(SetRoomInfo_Params.RotateType), &RotateType, sizeof(RotateType));
	memcpy_s(&SetRoomInfo_Params.roundNum, sizeof(SetRoomInfo_Params.roundNum), &roundNum, sizeof(roundNum));
	memcpy_s(&SetRoomInfo_Params.RoundTime, sizeof(SetRoomInfo_Params.RoundTime), &RoundTime, sizeof(RoundTime));
	memcpy_s(&SetRoomInfo_Params.VoiceChatType, sizeof(SetRoomInfo_Params.VoiceChatType), &VoiceChatType, sizeof(VoiceChatType));
	memcpy_s(&SetRoomInfo_Params.ShareType, sizeof(SetRoomInfo_Params.ShareType), &ShareType, sizeof(ShareType));

	this->ProcessEvent(uFnSetRoomInfo, &SetRoomInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.ReqRoomInOutAnim
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Number                         (CPF_Parm)
// uint32_t                       isIn                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::eventReqRoomInOutAnim(int32_t Number, bool isIn)
{
	static UFunction* uFnReqRoomInOutAnim = nullptr;

	if (!uFnReqRoomInOutAnim)
	{
		uFnReqRoomInOutAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.ReqRoomInOutAnim");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_eventReqRoomInOutAnim_Params ReqRoomInOutAnim_Params;
	memset(&ReqRoomInOutAnim_Params, 0, sizeof(ReqRoomInOutAnim_Params));
	memcpy_s(&ReqRoomInOutAnim_Params.Number, sizeof(ReqRoomInOutAnim_Params.Number), &Number, sizeof(Number));
	ReqRoomInOutAnim_Params.isIn = isIn;

	this->ProcessEvent(uFnReqRoomInOutAnim, &ReqRoomInOutAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdatePlayerBannerInfo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Number                         (CPF_Parm)
// int32_t                        CharaID                        (CPF_Parm)
// int32_t                        RelStrength                    (CPF_Parm)
// uint32_t                       IsSpectator                    (CPF_Parm)
// uint32_t                       VoiceChat                      (CPF_Parm)
// uint32_t                       isSpeak                        (CPF_Parm)
// uint32_t                       IsBattleReady                  (CPF_Parm)
// int32_t                        Qos                            (CPF_Parm)
// int32_t                        RoomState                      (CPF_Parm)
// int32_t                        MOMLevel                       (CPF_Parm)
// class FString                  Dan                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuNetworkRoom::eventUpdatePlayerBannerInfo(int32_t Number, int32_t CharaID, int32_t RelStrength, bool IsSpectator, bool VoiceChat, bool isSpeak, bool IsBattleReady, int32_t Qos, int32_t RoomState, int32_t MOMLevel, const class FString& Dan)
{
	static UFunction* uFnUpdatePlayerBannerInfo = nullptr;

	if (!uFnUpdatePlayerBannerInfo)
	{
		uFnUpdatePlayerBannerInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdatePlayerBannerInfo");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_eventUpdatePlayerBannerInfo_Params UpdatePlayerBannerInfo_Params;
	memset(&UpdatePlayerBannerInfo_Params, 0, sizeof(UpdatePlayerBannerInfo_Params));
	memcpy_s(&UpdatePlayerBannerInfo_Params.Number, sizeof(UpdatePlayerBannerInfo_Params.Number), &Number, sizeof(Number));
	memcpy_s(&UpdatePlayerBannerInfo_Params.CharaID, sizeof(UpdatePlayerBannerInfo_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&UpdatePlayerBannerInfo_Params.RelStrength, sizeof(UpdatePlayerBannerInfo_Params.RelStrength), &RelStrength, sizeof(RelStrength));
	UpdatePlayerBannerInfo_Params.IsSpectator = IsSpectator;
	UpdatePlayerBannerInfo_Params.VoiceChat = VoiceChat;
	UpdatePlayerBannerInfo_Params.isSpeak = isSpeak;
	UpdatePlayerBannerInfo_Params.IsBattleReady = IsBattleReady;
	memcpy_s(&UpdatePlayerBannerInfo_Params.Qos, sizeof(UpdatePlayerBannerInfo_Params.Qos), &Qos, sizeof(Qos));
	memcpy_s(&UpdatePlayerBannerInfo_Params.RoomState, sizeof(UpdatePlayerBannerInfo_Params.RoomState), &RoomState, sizeof(RoomState));
	memcpy_s(&UpdatePlayerBannerInfo_Params.MOMLevel, sizeof(UpdatePlayerBannerInfo_Params.MOMLevel), &MOMLevel, sizeof(MOMLevel));
	memcpy_s(&UpdatePlayerBannerInfo_Params.Dan, sizeof(UpdatePlayerBannerInfo_Params.Dan), &Dan, sizeof(Dan));

	this->ProcessEvent(uFnUpdatePlayerBannerInfo, &UpdatePlayerBannerInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SetPlayerBannerInfo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Number                         (CPF_Parm)
// int32_t                        KyoutaiIndex                   (CPF_Parm)
// int32_t                        ChairIndex                     (CPF_Parm)
// uint32_t                       IsExist                        (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Dan                            (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Qos                            (CPF_Parm)
// int32_t                        CharaID                        (CPF_Parm)
// uint32_t                       IsMe                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::eventSetPlayerBannerInfo(int32_t Number, int32_t KyoutaiIndex, int32_t ChairIndex, bool IsExist, const class FString& PlayerName, const class FString& Dan, int32_t Qos, int32_t CharaID, bool IsMe)
{
	static UFunction* uFnSetPlayerBannerInfo = nullptr;

	if (!uFnSetPlayerBannerInfo)
	{
		uFnSetPlayerBannerInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SetPlayerBannerInfo");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_eventSetPlayerBannerInfo_Params SetPlayerBannerInfo_Params;
	memset(&SetPlayerBannerInfo_Params, 0, sizeof(SetPlayerBannerInfo_Params));
	memcpy_s(&SetPlayerBannerInfo_Params.Number, sizeof(SetPlayerBannerInfo_Params.Number), &Number, sizeof(Number));
	memcpy_s(&SetPlayerBannerInfo_Params.KyoutaiIndex, sizeof(SetPlayerBannerInfo_Params.KyoutaiIndex), &KyoutaiIndex, sizeof(KyoutaiIndex));
	memcpy_s(&SetPlayerBannerInfo_Params.ChairIndex, sizeof(SetPlayerBannerInfo_Params.ChairIndex), &ChairIndex, sizeof(ChairIndex));
	SetPlayerBannerInfo_Params.IsExist = IsExist;
	memcpy_s(&SetPlayerBannerInfo_Params.PlayerName, sizeof(SetPlayerBannerInfo_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&SetPlayerBannerInfo_Params.Dan, sizeof(SetPlayerBannerInfo_Params.Dan), &Dan, sizeof(Dan));
	memcpy_s(&SetPlayerBannerInfo_Params.Qos, sizeof(SetPlayerBannerInfo_Params.Qos), &Qos, sizeof(Qos));
	memcpy_s(&SetPlayerBannerInfo_Params.CharaID, sizeof(SetPlayerBannerInfo_Params.CharaID), &CharaID, sizeof(CharaID));
	SetPlayerBannerInfo_Params.IsMe = IsMe;

	this->ProcessEvent(uFnSetPlayerBannerInfo, &SetPlayerBannerInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.StartMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.HideBG
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       hide                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::eventHideBG(bool hide)
{
	static UFunction* uFnHideBG = nullptr;

	if (!uFnHideBG)
	{
		uFnHideBG = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.HideBG");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_eventHideBG_Params HideBG_Params;
	memset(&HideBG_Params, 0, sizeof(HideBG_Params));
	HideBG_Params.hide = hide;

	this->ProcessEvent(uFnHideBG, &HideBG_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsBreakupSoon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37612])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsBreakupSoon()
{
	static UFunction* uFnIsBreakupSoon = nullptr;

	if (!uFnIsBreakupSoon)
	{
		uFnIsBreakupSoon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsBreakupSoon");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsBreakupSoon_Params IsBreakupSoon_Params;
	memset(&IsBreakupSoon_Params, 0, sizeof(IsBreakupSoon_Params));

	this->ProcessEvent(uFnIsBreakupSoon, &IsBreakupSoon_Params, nullptr);

	return IsBreakupSoon_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsLeaveLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37699])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsLeaveLobby()
{
	static UFunction* uFnIsLeaveLobby = nullptr;

	if (!uFnIsLeaveLobby)
	{
		uFnIsLeaveLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsLeaveLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsLeaveLobby_Params IsLeaveLobby_Params;
	memset(&IsLeaveLobby_Params, 0, sizeof(IsLeaveLobby_Params));

	this->ProcessEvent(uFnIsLeaveLobby, &IsLeaveLobby_Params, nullptr);

	return IsLeaveLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.LeaveLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35120])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::LeaveLobby()
{
	static UFunction* uFnLeaveLobby = nullptr;

	if (!uFnLeaveLobby)
	{
		uFnLeaveLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.LeaveLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execLeaveLobby_Params LeaveLobby_Params;
	memset(&LeaveLobby_Params, 0, sizeof(LeaveLobby_Params));

	this->ProcessEvent(uFnLeaveLobby, &LeaveLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsTournamentForceLeaveRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37882])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsTournamentForceLeaveRoom()
{
	static UFunction* uFnIsTournamentForceLeaveRoom = nullptr;

	if (!uFnIsTournamentForceLeaveRoom)
	{
		uFnIsTournamentForceLeaveRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsTournamentForceLeaveRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsTournamentForceLeaveRoom_Params IsTournamentForceLeaveRoom_Params;
	memset(&IsTournamentForceLeaveRoom_Params, 0, sizeof(IsTournamentForceLeaveRoom_Params));

	this->ProcessEvent(uFnIsTournamentForceLeaveRoom, &IsTournamentForceLeaveRoom_Params, nullptr);

	return IsTournamentForceLeaveRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsTournamentForceBattleReady
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37881])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsTournamentForceBattleReady()
{
	static UFunction* uFnIsTournamentForceBattleReady = nullptr;

	if (!uFnIsTournamentForceBattleReady)
	{
		uFnIsTournamentForceBattleReady = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsTournamentForceBattleReady");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsTournamentForceBattleReady_Params IsTournamentForceBattleReady_Params;
	memset(&IsTournamentForceBattleReady_Params, 0, sizeof(IsTournamentForceBattleReady_Params));

	this->ProcessEvent(uFnIsTournamentForceBattleReady, &IsTournamentForceBattleReady_Params, nullptr);

	return IsTournamentForceBattleReady_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsTournamentRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37886])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsTournamentRoom()
{
	static UFunction* uFnIsTournamentRoom = nullptr;

	if (!uFnIsTournamentRoom)
	{
		uFnIsTournamentRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsTournamentRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsTournamentRoom_Params IsTournamentRoom_Params;
	memset(&IsTournamentRoom_Params, 0, sizeof(IsTournamentRoom_Params));

	this->ProcessEvent(uFnIsTournamentRoom, &IsTournamentRoom_Params, nullptr);

	return IsTournamentRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsLobbyRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37712])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsLobbyRoom()
{
	static UFunction* uFnIsLobbyRoom = nullptr;

	if (!uFnIsLobbyRoom)
	{
		uFnIsLobbyRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsLobbyRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsLobbyRoom_Params IsLobbyRoom_Params;
	memset(&IsLobbyRoom_Params, 0, sizeof(IsLobbyRoom_Params));

	this->ProcessEvent(uFnIsLobbyRoom, &IsLobbyRoom_Params, nullptr);

	return IsLobbyRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SwitchLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40151])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::SwitchLobby()
{
	static UFunction* uFnSwitchLobby = nullptr;

	if (!uFnSwitchLobby)
	{
		uFnSwitchLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SwitchLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execSwitchLobby_Params SwitchLobby_Params;
	memset(&SwitchLobby_Params, 0, sizeof(SwitchLobby_Params));

	this->ProcessEvent(uFnSwitchLobby, &SwitchLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GetRoomState
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37160])
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// class FString                  Message                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// int32_t                        IconType                       (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuNetworkRoom::GetRoomState(int32_t Index, class FString& Message, int32_t& IconType)
{
	static UFunction* uFnGetRoomState = nullptr;

	if (!uFnGetRoomState)
	{
		uFnGetRoomState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GetRoomState");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execGetRoomState_Params GetRoomState_Params;
	memset(&GetRoomState_Params, 0, sizeof(GetRoomState_Params));
	memcpy_s(&GetRoomState_Params.Index, sizeof(GetRoomState_Params.Index), &Index, sizeof(Index));
	memcpy_s(&GetRoomState_Params.Message, sizeof(GetRoomState_Params.Message), &Message, sizeof(Message));
	memcpy_s(&GetRoomState_Params.IconType, sizeof(GetRoomState_Params.IconType), &IconType, sizeof(IconType));

	this->ProcessEvent(uFnGetRoomState, &GetRoomState_Params, nullptr);

	memcpy_s(&Message, sizeof(Message), &GetRoomState_Params.Message, sizeof(GetRoomState_Params.Message));
	memcpy_s(&IconType, sizeof(IconType), &GetRoomState_Params.IconType, sizeof(GetRoomState_Params.IconType));
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GetRoomErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37158])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkRoom::GetRoomErrorMessageID()
{
	static UFunction* uFnGetRoomErrorMessageID = nullptr;

	if (!uFnGetRoomErrorMessageID)
	{
		uFnGetRoomErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GetRoomErrorMessageID");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execGetRoomErrorMessageID_Params GetRoomErrorMessageID_Params;
	memset(&GetRoomErrorMessageID_Params, 0, sizeof(GetRoomErrorMessageID_Params));

	this->ProcessEvent(uFnGetRoomErrorMessageID, &GetRoomErrorMessageID_Params, nullptr);

	return GetRoomErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsRoomError
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37833])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsRoomError()
{
	static UFunction* uFnIsRoomError = nullptr;

	if (!uFnIsRoomError)
	{
		uFnIsRoomError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsRoomError");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsRoomError_Params IsRoomError_Params;
	memset(&IsRoomError_Params, 0, sizeof(IsRoomError_Params));

	this->ProcessEvent(uFnIsRoomError, &IsRoomError_Params, nullptr);

	return IsRoomError_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateGotoBattleNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40695])
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateGotoBattleNative(bool bTrigger, int32_t& isError)
{
	static UFunction* uFnUpdateGotoBattleNative = nullptr;

	if (!uFnUpdateGotoBattleNative)
	{
		uFnUpdateGotoBattleNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateGotoBattleNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateGotoBattleNative_Params UpdateGotoBattleNative_Params;
	memset(&UpdateGotoBattleNative_Params, 0, sizeof(UpdateGotoBattleNative_Params));
	UpdateGotoBattleNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateGotoBattleNative_Params.isError, sizeof(UpdateGotoBattleNative_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnUpdateGotoBattleNative, &UpdateGotoBattleNative_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &UpdateGotoBattleNative_Params.isError, sizeof(UpdateGotoBattleNative_Params.isError));
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomErrorNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40833])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::UpdateRoomErrorNative(bool bTrigger)
{
	static UFunction* uFnUpdateRoomErrorNative = nullptr;

	if (!uFnUpdateRoomErrorNative)
	{
		uFnUpdateRoomErrorNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateRoomErrorNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateRoomErrorNative_Params UpdateRoomErrorNative_Params;
	memset(&UpdateRoomErrorNative_Params, 0, sizeof(UpdateRoomErrorNative_Params));
	UpdateRoomErrorNative_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomErrorNative, &UpdateRoomErrorNative_Params, nullptr);

	return UpdateRoomErrorNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateLeaveRoomConfirmNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40745])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsLeave                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::UpdateLeaveRoomConfirmNative(bool bTrigger, int32_t& IsLeave)
{
	static UFunction* uFnUpdateLeaveRoomConfirmNative = nullptr;

	if (!uFnUpdateLeaveRoomConfirmNative)
	{
		uFnUpdateLeaveRoomConfirmNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateLeaveRoomConfirmNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateLeaveRoomConfirmNative_Params UpdateLeaveRoomConfirmNative_Params;
	memset(&UpdateLeaveRoomConfirmNative_Params, 0, sizeof(UpdateLeaveRoomConfirmNative_Params));
	UpdateLeaveRoomConfirmNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateLeaveRoomConfirmNative_Params.IsLeave, sizeof(UpdateLeaveRoomConfirmNative_Params.IsLeave), &IsLeave, sizeof(IsLeave));

	this->ProcessEvent(uFnUpdateLeaveRoomConfirmNative, &UpdateLeaveRoomConfirmNative_Params, nullptr);

	memcpy_s(&IsLeave, sizeof(IsLeave), &UpdateLeaveRoomConfirmNative_Params.IsLeave, sizeof(UpdateLeaveRoomConfirmNative_Params.IsLeave));

	return UpdateLeaveRoomConfirmNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.RoomInfo_MemberMax
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39420])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuNetworkRoom::RoomInfo_MemberMax()
{
	static UFunction* uFnRoomInfo_MemberMax = nullptr;

	if (!uFnRoomInfo_MemberMax)
	{
		uFnRoomInfo_MemberMax = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.RoomInfo_MemberMax");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execRoomInfo_MemberMax_Params RoomInfo_MemberMax_Params;
	memset(&RoomInfo_MemberMax_Params, 0, sizeof(RoomInfo_MemberMax_Params));

	this->ProcessEvent(uFnRoomInfo_MemberMax, &RoomInfo_MemberMax_Params, nullptr);

	return RoomInfo_MemberMax_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateMemberInfo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40781])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateMemberInfo()
{
	static UFunction* uFnUpdateMemberInfo = nullptr;

	if (!uFnUpdateMemberInfo)
	{
		uFnUpdateMemberInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateMemberInfo");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateMemberInfo_Params UpdateMemberInfo_Params;
	memset(&UpdateMemberInfo_Params, 0, sizeof(UpdateMemberInfo_Params));

	this->ProcessEvent(uFnUpdateMemberInfo, &UpdateMemberInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsContactMenuExit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37629])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsContactMenuExit()
{
	static UFunction* uFnIsContactMenuExit = nullptr;

	if (!uFnIsContactMenuExit)
	{
		uFnIsContactMenuExit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsContactMenuExit");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsContactMenuExit_Params IsContactMenuExit_Params;
	memset(&IsContactMenuExit_Params, 0, sizeof(IsContactMenuExit_Params));

	this->ProcessEvent(uFnIsContactMenuExit, &IsContactMenuExit_Params, nullptr);

	return IsContactMenuExit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OpenContactMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38828])
// Parameter Info:
// ENETCONTACT_MENU_TYPE          Type                           (CPF_Parm)
// int32_t                        SlotIndex                      (CPF_Parm)
// int32_t                        KyoutaiIndex                   (CPF_Parm)
// int32_t                        ChairIndex                     (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoom::OpenContactMenu(ENETCONTACT_MENU_TYPE Type, int32_t SlotIndex, int32_t KyoutaiIndex, int32_t ChairIndex)
{
	static UFunction* uFnOpenContactMenu = nullptr;

	if (!uFnOpenContactMenu)
	{
		uFnOpenContactMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OpenContactMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execOpenContactMenu_Params OpenContactMenu_Params;
	memset(&OpenContactMenu_Params, 0, sizeof(OpenContactMenu_Params));
	memcpy_s(&OpenContactMenu_Params.Type, sizeof(OpenContactMenu_Params.Type), &Type, sizeof(Type));
	memcpy_s(&OpenContactMenu_Params.SlotIndex, sizeof(OpenContactMenu_Params.SlotIndex), &SlotIndex, sizeof(SlotIndex));
	memcpy_s(&OpenContactMenu_Params.KyoutaiIndex, sizeof(OpenContactMenu_Params.KyoutaiIndex), &KyoutaiIndex, sizeof(KyoutaiIndex));
	memcpy_s(&OpenContactMenu_Params.ChairIndex, sizeof(OpenContactMenu_Params.ChairIndex), &ChairIndex, sizeof(ChairIndex));

	this->ProcessEvent(uFnOpenContactMenu, &OpenContactMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OpenEasyTextChat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38831])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::OpenEasyTextChat()
{
	static UFunction* uFnOpenEasyTextChat = nullptr;

	if (!uFnOpenEasyTextChat)
	{
		uFnOpenEasyTextChat = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OpenEasyTextChat");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execOpenEasyTextChat_Params OpenEasyTextChat_Params;
	memset(&OpenEasyTextChat_Params, 0, sizeof(OpenEasyTextChat_Params));

	this->ProcessEvent(uFnOpenEasyTextChat, &OpenEasyTextChat_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsRoomMenuExit
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37834])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        IsLeaveRoom                    (CPF_Parm | CPF_OutParm)
// int32_t                        IsMainMenu                     (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsRoomMenuExit(int32_t& IsLeaveRoom, int32_t& IsMainMenu)
{
	static UFunction* uFnIsRoomMenuExit = nullptr;

	if (!uFnIsRoomMenuExit)
	{
		uFnIsRoomMenuExit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsRoomMenuExit");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsRoomMenuExit_Params IsRoomMenuExit_Params;
	memset(&IsRoomMenuExit_Params, 0, sizeof(IsRoomMenuExit_Params));
	memcpy_s(&IsRoomMenuExit_Params.IsLeaveRoom, sizeof(IsRoomMenuExit_Params.IsLeaveRoom), &IsLeaveRoom, sizeof(IsLeaveRoom));
	memcpy_s(&IsRoomMenuExit_Params.IsMainMenu, sizeof(IsRoomMenuExit_Params.IsMainMenu), &IsMainMenu, sizeof(IsMainMenu));

	this->ProcessEvent(uFnIsRoomMenuExit, &IsRoomMenuExit_Params, nullptr);

	memcpy_s(&IsLeaveRoom, sizeof(IsLeaveRoom), &IsRoomMenuExit_Params.IsLeaveRoom, sizeof(IsRoomMenuExit_Params.IsLeaveRoom));
	memcpy_s(&IsMainMenu, sizeof(IsMainMenu), &IsRoomMenuExit_Params.IsMainMenu, sizeof(IsRoomMenuExit_Params.IsMainMenu));

	return IsRoomMenuExit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OpenRoomMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38842])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::OpenRoomMenu()
{
	static UFunction* uFnOpenRoomMenu = nullptr;

	if (!uFnOpenRoomMenu)
	{
		uFnOpenRoomMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OpenRoomMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execOpenRoomMenu_Params OpenRoomMenu_Params;
	memset(&OpenRoomMenu_Params, 0, sizeof(OpenRoomMenu_Params));

	this->ProcessEvent(uFnOpenRoomMenu, &OpenRoomMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.BackToWaitRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::BackToWaitRoom()
{
	static UFunction* uFnBackToWaitRoom = nullptr;

	if (!uFnBackToWaitRoom)
	{
		uFnBackToWaitRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.BackToWaitRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execBackToWaitRoom_Params BackToWaitRoom_Params;
	memset(&BackToWaitRoom_Params, 0, sizeof(BackToWaitRoom_Params));

	this->ProcessEvent(uFnBackToWaitRoom, &BackToWaitRoom_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SendBattleReadyCancel
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39680])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::SendBattleReadyCancel()
{
	static UFunction* uFnSendBattleReadyCancel = nullptr;

	if (!uFnSendBattleReadyCancel)
	{
		uFnSendBattleReadyCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SendBattleReadyCancel");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execSendBattleReadyCancel_Params SendBattleReadyCancel_Params;
	memset(&SendBattleReadyCancel_Params, 0, sizeof(SendBattleReadyCancel_Params));

	this->ProcessEvent(uFnSendBattleReadyCancel, &SendBattleReadyCancel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsSendingBattleReady
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37849])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsSendingBattleReady()
{
	static UFunction* uFnIsSendingBattleReady = nullptr;

	if (!uFnIsSendingBattleReady)
	{
		uFnIsSendingBattleReady = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsSendingBattleReady");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsSendingBattleReady_Params IsSendingBattleReady_Params;
	memset(&IsSendingBattleReady_Params, 0, sizeof(IsSendingBattleReady_Params));

	this->ProcessEvent(uFnIsSendingBattleReady, &IsSendingBattleReady_Params, nullptr);

	return IsSendingBattleReady_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SendBattleReady
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39679])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::SendBattleReady()
{
	static UFunction* uFnSendBattleReady = nullptr;

	if (!uFnSendBattleReady)
	{
		uFnSendBattleReady = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.SendBattleReady");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execSendBattleReady_Params SendBattleReady_Params;
	memset(&SendBattleReady_Params, 0, sizeof(SendBattleReady_Params));

	this->ProcessEvent(uFnSendBattleReady, &SendBattleReady_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsLeaveRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37700])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsLeaveRoom()
{
	static UFunction* uFnIsLeaveRoom = nullptr;

	if (!uFnIsLeaveRoom)
	{
		uFnIsLeaveRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsLeaveRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsLeaveRoom_Params IsLeaveRoom_Params;
	memset(&IsLeaveRoom_Params, 0, sizeof(IsLeaveRoom_Params));

	this->ProcessEvent(uFnIsLeaveRoom, &IsLeaveRoom_Params, nullptr);

	return IsLeaveRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.LeaveRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37985])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::LeaveRoom()
{
	static UFunction* uFnLeaveRoom = nullptr;

	if (!uFnLeaveRoom)
	{
		uFnLeaveRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.LeaveRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execLeaveRoom_Params LeaveRoom_Params;
	memset(&LeaveRoom_Params, 0, sizeof(LeaveRoom_Params));

	this->ProcessEvent(uFnLeaveRoom, &LeaveRoom_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GotoBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37406])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::GotoBattle()
{
	static UFunction* uFnGotoBattle = nullptr;

	if (!uFnGotoBattle)
	{
		uFnGotoBattle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GotoBattle");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execGotoBattle_Params GotoBattle_Params;
	memset(&GotoBattle_Params, 0, sizeof(GotoBattle_Params));

	this->ProcessEvent(uFnGotoBattle, &GotoBattle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GetMySlotIndex
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37116])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuNetworkRoom::GetMySlotIndex()
{
	static UFunction* uFnGetMySlotIndex = nullptr;

	if (!uFnGetMySlotIndex)
	{
		uFnGetMySlotIndex = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.GetMySlotIndex");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execGetMySlotIndex_Params GetMySlotIndex_Params;
	memset(&GetMySlotIndex_Params, 0, sizeof(GetMySlotIndex_Params));

	this->ProcessEvent(uFnGetMySlotIndex, &GetMySlotIndex_Params, nullptr);

	return GetMySlotIndex_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsBattleReadyInputEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37605])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsBattleReadyInputEnable()
{
	static UFunction* uFnIsBattleReadyInputEnable = nullptr;

	if (!uFnIsBattleReadyInputEnable)
	{
		uFnIsBattleReadyInputEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsBattleReadyInputEnable");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsBattleReadyInputEnable_Params IsBattleReadyInputEnable_Params;
	memset(&IsBattleReadyInputEnable_Params, 0, sizeof(IsBattleReadyInputEnable_Params));

	this->ProcessEvent(uFnIsBattleReadyInputEnable, &IsBattleReadyInputEnable_Params, nullptr);

	return IsBattleReadyInputEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsBattleReady
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37604])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsBattleReady()
{
	static UFunction* uFnIsBattleReady = nullptr;

	if (!uFnIsBattleReady)
	{
		uFnIsBattleReady = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsBattleReady");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsBattleReady_Params IsBattleReady_Params;
	memset(&IsBattleReady_Params, 0, sizeof(IsBattleReady_Params));

	this->ProcessEvent(uFnIsBattleReady, &IsBattleReady_Params, nullptr);

	return IsBattleReady_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsNeedGotoBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37741])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsNeedGotoBattle()
{
	static UFunction* uFnIsNeedGotoBattle = nullptr;

	if (!uFnIsNeedGotoBattle)
	{
		uFnIsNeedGotoBattle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsNeedGotoBattle");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsNeedGotoBattle_Params IsNeedGotoBattle_Params;
	memset(&IsNeedGotoBattle_Params, 0, sizeof(IsNeedGotoBattle_Params));

	this->ProcessEvent(uFnIsNeedGotoBattle, &IsNeedGotoBattle_Params, nullptr);

	return IsNeedGotoBattle_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsSitBattleConsole
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37857])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsSitBattleConsole()
{
	static UFunction* uFnIsSitBattleConsole = nullptr;

	if (!uFnIsSitBattleConsole)
	{
		uFnIsSitBattleConsole = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsSitBattleConsole");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsSitBattleConsole_Params IsSitBattleConsole_Params;
	memset(&IsSitBattleConsole_Params, 0, sizeof(IsSitBattleConsole_Params));

	this->ProcessEvent(uFnIsSitBattleConsole, &IsSitBattleConsole_Params, nullptr);

	return IsSitBattleConsole_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsSlotIsMine
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37863])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        SlotIndex                      (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsSlotIsMine(int32_t SlotIndex)
{
	static UFunction* uFnIsSlotIsMine = nullptr;

	if (!uFnIsSlotIsMine)
	{
		uFnIsSlotIsMine = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsSlotIsMine");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsSlotIsMine_Params IsSlotIsMine_Params;
	memset(&IsSlotIsMine_Params, 0, sizeof(IsSlotIsMine_Params));
	memcpy_s(&IsSlotIsMine_Params.SlotIndex, sizeof(IsSlotIsMine_Params.SlotIndex), &SlotIndex, sizeof(SlotIndex));

	this->ProcessEvent(uFnIsSlotIsMine, &IsSlotIsMine_Params, nullptr);

	return IsSlotIsMine_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsHost
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37687])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::IsHost()
{
	static UFunction* uFnIsHost = nullptr;

	if (!uFnIsHost)
	{
		uFnIsHost = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.IsHost");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execIsHost_Params IsHost_Params;
	memset(&IsHost_Params, 0, sizeof(IsHost_Params));

	this->ProcessEvent(uFnIsHost, &IsHost_Params, nullptr);

	return IsHost_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.TextChat_IsFullScreen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40207])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoom::TextChat_IsFullScreen()
{
	static UFunction* uFnTextChat_IsFullScreen = nullptr;

	if (!uFnTextChat_IsFullScreen)
	{
		uFnTextChat_IsFullScreen = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.TextChat_IsFullScreen");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execTextChat_IsFullScreen_Params TextChat_IsFullScreen_Params;
	memset(&TextChat_IsFullScreen_Params, 0, sizeof(TextChat_IsFullScreen_Params));

	this->ProcessEvent(uFnTextChat_IsFullScreen, &TextChat_IsFullScreen_Params, nullptr);

	return TextChat_IsFullScreen_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateDrawMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40651])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateDrawMenu()
{
	static UFunction* uFnUpdateDrawMenu = nullptr;

	if (!uFnUpdateDrawMenu)
	{
		uFnUpdateDrawMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateDrawMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateDrawMenu_Params UpdateDrawMenu_Params;
	memset(&UpdateDrawMenu_Params, 0, sizeof(UpdateDrawMenu_Params));

	this->ProcessEvent(uFnUpdateDrawMenu, &UpdateDrawMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40782])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::UpdateMenu()
{
	static UFunction* uFnUpdateMenu = nullptr;

	if (!uFnUpdateMenu)
	{
		uFnUpdateMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.UpdateMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execUpdateMenu_Params UpdateMenu_Params;
	memset(&UpdateMenu_Params, 0, sizeof(UpdateMenu_Params));

	this->ProcessEvent(uFnUpdateMenu, &UpdateMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnCloseNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38813])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::OnCloseNative()
{
	static UFunction* uFnOnCloseNative = nullptr;

	if (!uFnOnCloseNative)
	{
		uFnOnCloseNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.OnCloseNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execOnCloseNative_Params OnCloseNative_Params;
	memset(&OnCloseNative_Params, 0, sizeof(OnCloseNative_Params));

	this->ProcessEvent(uFnOnCloseNative, &OnCloseNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoom::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoom.InitMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoom_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsAllMapVisible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsAllMapVisible()
{
	static UFunction* uFnIsAllMapVisible = nullptr;

	if (!uFnIsAllMapVisible)
	{
		uFnIsAllMapVisible = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsAllMapVisible");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsAllMapVisible_Params IsAllMapVisible_Params;
	memset(&IsAllMapVisible_Params, 0, sizeof(IsAllMapVisible_Params));

	this->ProcessEvent(uFnIsAllMapVisible, &IsAllMapVisible_Params, nullptr);

	return IsAllMapVisible_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateEnd(bool bTrigger)
{
	static UFunction* uFnUpdateEnd = nullptr;

	if (!uFnUpdateEnd)
	{
		uFnUpdateEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateEnd");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateEnd_Params UpdateEnd_Params;
	memset(&UpdateEnd_Params, 0, sizeof(UpdateEnd_Params));
	UpdateEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEnd, &UpdateEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateGotoMode
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateGotoMode(bool bTrigger)
{
	static UFunction* uFnUpdateGotoMode = nullptr;

	if (!uFnUpdateGotoMode)
	{
		uFnUpdateGotoMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateGotoMode");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateGotoMode_Params UpdateGotoMode_Params;
	memset(&UpdateGotoMode_Params, 0, sizeof(UpdateGotoMode_Params));
	UpdateGotoMode_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateGotoMode, &UpdateGotoMode_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMainMenuEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateMainMenuEnd(bool bTrigger)
{
	static UFunction* uFnUpdateMainMenuEnd = nullptr;

	if (!uFnUpdateMainMenuEnd)
	{
		uFnUpdateMainMenuEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMainMenuEnd");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateMainMenuEnd_Params UpdateMainMenuEnd_Params;
	memset(&UpdateMainMenuEnd_Params, 0, sizeof(UpdateMainMenuEnd_Params));
	UpdateMainMenuEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainMenuEnd, &UpdateMainMenuEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMainMenu
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateMainMenu(bool bTrigger)
{
	static UFunction* uFnUpdateMainMenu = nullptr;

	if (!uFnUpdateMainMenu)
	{
		uFnUpdateMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMainMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateMainMenu_Params UpdateMainMenu_Params;
	memset(&UpdateMainMenu_Params, 0, sizeof(UpdateMainMenu_Params));
	UpdateMainMenu_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainMenu, &UpdateMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMainMenuInit
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateMainMenuInit(bool bTrigger)
{
	static UFunction* uFnUpdateMainMenuInit = nullptr;

	if (!uFnUpdateMainMenuInit)
	{
		uFnUpdateMainMenuInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMainMenuInit");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateMainMenuInit_Params UpdateMainMenuInit_Params;
	memset(&UpdateMainMenuInit_Params, 0, sizeof(UpdateMainMenuInit_Params));
	UpdateMainMenuInit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainMenuInit, &UpdateMainMenuInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomErrorWait2
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateRoomErrorWait2(bool bTrigger)
{
	static UFunction* uFnUpdateRoomErrorWait2 = nullptr;

	if (!uFnUpdateRoomErrorWait2)
	{
		uFnUpdateRoomErrorWait2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomErrorWait2");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateRoomErrorWait2_Params UpdateRoomErrorWait2_Params;
	memset(&UpdateRoomErrorWait2_Params, 0, sizeof(UpdateRoomErrorWait2_Params));
	UpdateRoomErrorWait2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomErrorWait2, &UpdateRoomErrorWait2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomErrorWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateRoomErrorWait(bool bTrigger)
{
	static UFunction* uFnUpdateRoomErrorWait = nullptr;

	if (!uFnUpdateRoomErrorWait)
	{
		uFnUpdateRoomErrorWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomErrorWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateRoomErrorWait_Params UpdateRoomErrorWait_Params;
	memset(&UpdateRoomErrorWait_Params, 0, sizeof(UpdateRoomErrorWait_Params));
	UpdateRoomErrorWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomErrorWait, &UpdateRoomErrorWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomError
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateRoomError(bool bTrigger)
{
	static UFunction* uFnUpdateRoomError = nullptr;

	if (!uFnUpdateRoomError)
	{
		uFnUpdateRoomError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomError");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateRoomError_Params UpdateRoomError_Params;
	memset(&UpdateRoomError_Params, 0, sizeof(UpdateRoomError_Params));
	UpdateRoomError_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomError, &UpdateRoomError_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateGotoBattle
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateGotoBattle(bool bTrigger)
{
	static UFunction* uFnUpdateGotoBattle = nullptr;

	if (!uFnUpdateGotoBattle)
	{
		uFnUpdateGotoBattle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateGotoBattle");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateGotoBattle_Params UpdateGotoBattle_Params;
	memset(&UpdateGotoBattle_Params, 0, sizeof(UpdateGotoBattle_Params));
	UpdateGotoBattle_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateGotoBattle, &UpdateGotoBattle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateLeaveRoomConfirm
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateLeaveRoomConfirm(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveRoomConfirm = nullptr;

	if (!uFnUpdateLeaveRoomConfirm)
	{
		uFnUpdateLeaveRoomConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateLeaveRoomConfirm");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateLeaveRoomConfirm_Params UpdateLeaveRoomConfirm_Params;
	memset(&UpdateLeaveRoomConfirm_Params, 0, sizeof(UpdateLeaveRoomConfirm_Params));
	UpdateLeaveRoomConfirm_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveRoomConfirm, &UpdateLeaveRoomConfirm_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateLeaveLobbyWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateLeaveLobbyWait(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveLobbyWait = nullptr;

	if (!uFnUpdateLeaveLobbyWait)
	{
		uFnUpdateLeaveLobbyWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateLeaveLobbyWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateLeaveLobbyWait_Params UpdateLeaveLobbyWait_Params;
	memset(&UpdateLeaveLobbyWait_Params, 0, sizeof(UpdateLeaveLobbyWait_Params));
	UpdateLeaveLobbyWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveLobbyWait, &UpdateLeaveLobbyWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateLeaveRoomWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateLeaveRoomWait(bool bTrigger)
{
	static UFunction* uFnUpdateLeaveRoomWait = nullptr;

	if (!uFnUpdateLeaveRoomWait)
	{
		uFnUpdateLeaveRoomWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateLeaveRoomWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateLeaveRoomWait_Params UpdateLeaveRoomWait_Params;
	memset(&UpdateLeaveRoomWait_Params, 0, sizeof(UpdateLeaveRoomWait_Params));
	UpdateLeaveRoomWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateLeaveRoomWait, &UpdateLeaveRoomWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateBattleReadyWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateBattleReadyWait(bool bTrigger)
{
	static UFunction* uFnUpdateBattleReadyWait = nullptr;

	if (!uFnUpdateBattleReadyWait)
	{
		uFnUpdateBattleReadyWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateBattleReadyWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateBattleReadyWait_Params UpdateBattleReadyWait_Params;
	memset(&UpdateBattleReadyWait_Params, 0, sizeof(UpdateBattleReadyWait_Params));
	UpdateBattleReadyWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateBattleReadyWait, &UpdateBattleReadyWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomMenuWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateRoomMenuWait(bool bTrigger)
{
	static UFunction* uFnUpdateRoomMenuWait = nullptr;

	if (!uFnUpdateRoomMenuWait)
	{
		uFnUpdateRoomMenuWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomMenuWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateRoomMenuWait_Params UpdateRoomMenuWait_Params;
	memset(&UpdateRoomMenuWait_Params, 0, sizeof(UpdateRoomMenuWait_Params));
	UpdateRoomMenuWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomMenuWait, &UpdateRoomMenuWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateMain(bool bTrigger)
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMain");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));
	UpdateMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMainWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateMainWait(bool bTrigger)
{
	static UFunction* uFnUpdateMainWait = nullptr;

	if (!uFnUpdateMainWait)
	{
		uFnUpdateMainWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMainWait");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateMainWait_Params UpdateMainWait_Params;
	memset(&UpdateMainWait_Params, 0, sizeof(UpdateMainWait_Params));
	UpdateMainWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMainWait, &UpdateMainWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.StartMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsIMEFormOpen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13314])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsIMEFormOpen()
{
	static UFunction* uFnIsIMEFormOpen = nullptr;

	if (!uFnIsIMEFormOpen)
	{
		uFnIsIMEFormOpen = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsIMEFormOpen");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsIMEFormOpen_Params IsIMEFormOpen_Params;
	memset(&IsIMEFormOpen_Params, 0, sizeof(IsIMEFormOpen_Params));

	this->ProcessEvent(uFnIsIMEFormOpen, &IsIMEFormOpen_Params, nullptr);

	return IsIMEFormOpen_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.GetKyoutaiMaxNum
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37083])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuNetworkRoomAC20::GetKyoutaiMaxNum()
{
	static UFunction* uFnGetKyoutaiMaxNum = nullptr;

	if (!uFnGetKyoutaiMaxNum)
	{
		uFnGetKyoutaiMaxNum = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.GetKyoutaiMaxNum");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execGetKyoutaiMaxNum_Params GetKyoutaiMaxNum_Params;
	memset(&GetKyoutaiMaxNum_Params, 0, sizeof(GetKyoutaiMaxNum_Params));

	this->ProcessEvent(uFnGetKyoutaiMaxNum, &GetKyoutaiMaxNum_Params, nullptr);

	return GetKyoutaiMaxNum_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsBreakupSoon
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37612])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsBreakupSoon()
{
	static UFunction* uFnIsBreakupSoon = nullptr;

	if (!uFnIsBreakupSoon)
	{
		uFnIsBreakupSoon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsBreakupSoon");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsBreakupSoon_Params IsBreakupSoon_Params;
	memset(&IsBreakupSoon_Params, 0, sizeof(IsBreakupSoon_Params));

	this->ProcessEvent(uFnIsBreakupSoon, &IsBreakupSoon_Params, nullptr);

	return IsBreakupSoon_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsLeaveLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37699])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsLeaveLobby()
{
	static UFunction* uFnIsLeaveLobby = nullptr;

	if (!uFnIsLeaveLobby)
	{
		uFnIsLeaveLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsLeaveLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsLeaveLobby_Params IsLeaveLobby_Params;
	memset(&IsLeaveLobby_Params, 0, sizeof(IsLeaveLobby_Params));

	this->ProcessEvent(uFnIsLeaveLobby, &IsLeaveLobby_Params, nullptr);

	return IsLeaveLobby_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.LeaveLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35120])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::LeaveLobby()
{
	static UFunction* uFnLeaveLobby = nullptr;

	if (!uFnLeaveLobby)
	{
		uFnLeaveLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.LeaveLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execLeaveLobby_Params LeaveLobby_Params;
	memset(&LeaveLobby_Params, 0, sizeof(LeaveLobby_Params));

	this->ProcessEvent(uFnLeaveLobby, &LeaveLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsTournamentForceLeaveRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37882])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsTournamentForceLeaveRoom()
{
	static UFunction* uFnIsTournamentForceLeaveRoom = nullptr;

	if (!uFnIsTournamentForceLeaveRoom)
	{
		uFnIsTournamentForceLeaveRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsTournamentForceLeaveRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsTournamentForceLeaveRoom_Params IsTournamentForceLeaveRoom_Params;
	memset(&IsTournamentForceLeaveRoom_Params, 0, sizeof(IsTournamentForceLeaveRoom_Params));

	this->ProcessEvent(uFnIsTournamentForceLeaveRoom, &IsTournamentForceLeaveRoom_Params, nullptr);

	return IsTournamentForceLeaveRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsTournamentForceBattleReady
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37881])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsTournamentForceBattleReady()
{
	static UFunction* uFnIsTournamentForceBattleReady = nullptr;

	if (!uFnIsTournamentForceBattleReady)
	{
		uFnIsTournamentForceBattleReady = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsTournamentForceBattleReady");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsTournamentForceBattleReady_Params IsTournamentForceBattleReady_Params;
	memset(&IsTournamentForceBattleReady_Params, 0, sizeof(IsTournamentForceBattleReady_Params));

	this->ProcessEvent(uFnIsTournamentForceBattleReady, &IsTournamentForceBattleReady_Params, nullptr);

	return IsTournamentForceBattleReady_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsTournamentRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37886])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsTournamentRoom()
{
	static UFunction* uFnIsTournamentRoom = nullptr;

	if (!uFnIsTournamentRoom)
	{
		uFnIsTournamentRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsTournamentRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsTournamentRoom_Params IsTournamentRoom_Params;
	memset(&IsTournamentRoom_Params, 0, sizeof(IsTournamentRoom_Params));

	this->ProcessEvent(uFnIsTournamentRoom, &IsTournamentRoom_Params, nullptr);

	return IsTournamentRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.SwitchLobby
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40151])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::SwitchLobby()
{
	static UFunction* uFnSwitchLobby = nullptr;

	if (!uFnSwitchLobby)
	{
		uFnSwitchLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.SwitchLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execSwitchLobby_Params SwitchLobby_Params;
	memset(&SwitchLobby_Params, 0, sizeof(SwitchLobby_Params));

	this->ProcessEvent(uFnSwitchLobby, &SwitchLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.GetRoomErrorMessageID
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37158])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuNetworkRoomAC20::GetRoomErrorMessageID()
{
	static UFunction* uFnGetRoomErrorMessageID = nullptr;

	if (!uFnGetRoomErrorMessageID)
	{
		uFnGetRoomErrorMessageID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.GetRoomErrorMessageID");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execGetRoomErrorMessageID_Params GetRoomErrorMessageID_Params;
	memset(&GetRoomErrorMessageID_Params, 0, sizeof(GetRoomErrorMessageID_Params));

	this->ProcessEvent(uFnGetRoomErrorMessageID, &GetRoomErrorMessageID_Params, nullptr);

	return GetRoomErrorMessageID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsRoomError
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37833])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsRoomError()
{
	static UFunction* uFnIsRoomError = nullptr;

	if (!uFnIsRoomError)
	{
		uFnIsRoomError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsRoomError");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsRoomError_Params IsRoomError_Params;
	memset(&IsRoomError_Params, 0, sizeof(IsRoomError_Params));

	this->ProcessEvent(uFnIsRoomError, &IsRoomError_Params, nullptr);

	return IsRoomError_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateGotoBattleNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40695])
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateGotoBattleNative(bool bTrigger, int32_t& isError)
{
	static UFunction* uFnUpdateGotoBattleNative = nullptr;

	if (!uFnUpdateGotoBattleNative)
	{
		uFnUpdateGotoBattleNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateGotoBattleNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateGotoBattleNative_Params UpdateGotoBattleNative_Params;
	memset(&UpdateGotoBattleNative_Params, 0, sizeof(UpdateGotoBattleNative_Params));
	UpdateGotoBattleNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateGotoBattleNative_Params.isError, sizeof(UpdateGotoBattleNative_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnUpdateGotoBattleNative, &UpdateGotoBattleNative_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &UpdateGotoBattleNative_Params.isError, sizeof(UpdateGotoBattleNative_Params.isError));
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomErrorNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40833])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateRoomErrorNative(bool bTrigger)
{
	static UFunction* uFnUpdateRoomErrorNative = nullptr;

	if (!uFnUpdateRoomErrorNative)
	{
		uFnUpdateRoomErrorNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateRoomErrorNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateRoomErrorNative_Params UpdateRoomErrorNative_Params;
	memset(&UpdateRoomErrorNative_Params, 0, sizeof(UpdateRoomErrorNative_Params));
	UpdateRoomErrorNative_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRoomErrorNative, &UpdateRoomErrorNative_Params, nullptr);

	return UpdateRoomErrorNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateLeaveRoomConfirmNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40745])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsLeave                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateLeaveRoomConfirmNative(bool bTrigger, int32_t& IsLeave)
{
	static UFunction* uFnUpdateLeaveRoomConfirmNative = nullptr;

	if (!uFnUpdateLeaveRoomConfirmNative)
	{
		uFnUpdateLeaveRoomConfirmNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateLeaveRoomConfirmNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateLeaveRoomConfirmNative_Params UpdateLeaveRoomConfirmNative_Params;
	memset(&UpdateLeaveRoomConfirmNative_Params, 0, sizeof(UpdateLeaveRoomConfirmNative_Params));
	UpdateLeaveRoomConfirmNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateLeaveRoomConfirmNative_Params.IsLeave, sizeof(UpdateLeaveRoomConfirmNative_Params.IsLeave), &IsLeave, sizeof(IsLeave));

	this->ProcessEvent(uFnUpdateLeaveRoomConfirmNative, &UpdateLeaveRoomConfirmNative_Params, nullptr);

	memcpy_s(&IsLeave, sizeof(IsLeave), &UpdateLeaveRoomConfirmNative_Params.IsLeave, sizeof(UpdateLeaveRoomConfirmNative_Params.IsLeave));

	return UpdateLeaveRoomConfirmNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsContactMenuExit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37629])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsContactMenuExit()
{
	static UFunction* uFnIsContactMenuExit = nullptr;

	if (!uFnIsContactMenuExit)
	{
		uFnIsContactMenuExit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsContactMenuExit");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsContactMenuExit_Params IsContactMenuExit_Params;
	memset(&IsContactMenuExit_Params, 0, sizeof(IsContactMenuExit_Params));

	this->ProcessEvent(uFnIsContactMenuExit, &IsContactMenuExit_Params, nullptr);

	return IsContactMenuExit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OpenContactMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38828])
// Parameter Info:
// ENETCONTACT_MENU_TYPE          Type                           (CPF_Parm)
// int32_t                        SlotIndex                      (CPF_Parm)
// int32_t                        KyoutaiIndex                   (CPF_Parm)
// int32_t                        ChairIndex                     (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::OpenContactMenu(ENETCONTACT_MENU_TYPE Type, int32_t SlotIndex, int32_t KyoutaiIndex, int32_t ChairIndex)
{
	static UFunction* uFnOpenContactMenu = nullptr;

	if (!uFnOpenContactMenu)
	{
		uFnOpenContactMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OpenContactMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execOpenContactMenu_Params OpenContactMenu_Params;
	memset(&OpenContactMenu_Params, 0, sizeof(OpenContactMenu_Params));
	memcpy_s(&OpenContactMenu_Params.Type, sizeof(OpenContactMenu_Params.Type), &Type, sizeof(Type));
	memcpy_s(&OpenContactMenu_Params.SlotIndex, sizeof(OpenContactMenu_Params.SlotIndex), &SlotIndex, sizeof(SlotIndex));
	memcpy_s(&OpenContactMenu_Params.KyoutaiIndex, sizeof(OpenContactMenu_Params.KyoutaiIndex), &KyoutaiIndex, sizeof(KyoutaiIndex));
	memcpy_s(&OpenContactMenu_Params.ChairIndex, sizeof(OpenContactMenu_Params.ChairIndex), &ChairIndex, sizeof(ChairIndex));

	this->ProcessEvent(uFnOpenContactMenu, &OpenContactMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OpenEasyTextChat
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38831])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::OpenEasyTextChat()
{
	static UFunction* uFnOpenEasyTextChat = nullptr;

	if (!uFnOpenEasyTextChat)
	{
		uFnOpenEasyTextChat = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OpenEasyTextChat");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execOpenEasyTextChat_Params OpenEasyTextChat_Params;
	memset(&OpenEasyTextChat_Params, 0, sizeof(OpenEasyTextChat_Params));

	this->ProcessEvent(uFnOpenEasyTextChat, &OpenEasyTextChat_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsRoomMenuExit
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37834])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        IsLeaveRoom                    (CPF_Parm | CPF_OutParm)
// int32_t                        IsMainMenu                     (CPF_Parm | CPF_OutParm)
// int32_t                        IsOpenMainMenu                 (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsRoomMenuExit(int32_t& IsLeaveRoom, int32_t& IsMainMenu, int32_t& IsOpenMainMenu)
{
	static UFunction* uFnIsRoomMenuExit = nullptr;

	if (!uFnIsRoomMenuExit)
	{
		uFnIsRoomMenuExit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsRoomMenuExit");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsRoomMenuExit_Params IsRoomMenuExit_Params;
	memset(&IsRoomMenuExit_Params, 0, sizeof(IsRoomMenuExit_Params));
	memcpy_s(&IsRoomMenuExit_Params.IsLeaveRoom, sizeof(IsRoomMenuExit_Params.IsLeaveRoom), &IsLeaveRoom, sizeof(IsLeaveRoom));
	memcpy_s(&IsRoomMenuExit_Params.IsMainMenu, sizeof(IsRoomMenuExit_Params.IsMainMenu), &IsMainMenu, sizeof(IsMainMenu));
	memcpy_s(&IsRoomMenuExit_Params.IsOpenMainMenu, sizeof(IsRoomMenuExit_Params.IsOpenMainMenu), &IsOpenMainMenu, sizeof(IsOpenMainMenu));

	this->ProcessEvent(uFnIsRoomMenuExit, &IsRoomMenuExit_Params, nullptr);

	memcpy_s(&IsLeaveRoom, sizeof(IsLeaveRoom), &IsRoomMenuExit_Params.IsLeaveRoom, sizeof(IsRoomMenuExit_Params.IsLeaveRoom));
	memcpy_s(&IsMainMenu, sizeof(IsMainMenu), &IsRoomMenuExit_Params.IsMainMenu, sizeof(IsRoomMenuExit_Params.IsMainMenu));
	memcpy_s(&IsOpenMainMenu, sizeof(IsOpenMainMenu), &IsRoomMenuExit_Params.IsOpenMainMenu, sizeof(IsRoomMenuExit_Params.IsOpenMainMenu));

	return IsRoomMenuExit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OpenRoomMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38842])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::OpenRoomMenu()
{
	static UFunction* uFnOpenRoomMenu = nullptr;

	if (!uFnOpenRoomMenu)
	{
		uFnOpenRoomMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OpenRoomMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execOpenRoomMenu_Params OpenRoomMenu_Params;
	memset(&OpenRoomMenu_Params, 0, sizeof(OpenRoomMenu_Params));

	this->ProcessEvent(uFnOpenRoomMenu, &OpenRoomMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.BackToWaitRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::BackToWaitRoom()
{
	static UFunction* uFnBackToWaitRoom = nullptr;

	if (!uFnBackToWaitRoom)
	{
		uFnBackToWaitRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.BackToWaitRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execBackToWaitRoom_Params BackToWaitRoom_Params;
	memset(&BackToWaitRoom_Params, 0, sizeof(BackToWaitRoom_Params));

	this->ProcessEvent(uFnBackToWaitRoom, &BackToWaitRoom_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.SendBattleReadyCancel
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39680])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::SendBattleReadyCancel()
{
	static UFunction* uFnSendBattleReadyCancel = nullptr;

	if (!uFnSendBattleReadyCancel)
	{
		uFnSendBattleReadyCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.SendBattleReadyCancel");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execSendBattleReadyCancel_Params SendBattleReadyCancel_Params;
	memset(&SendBattleReadyCancel_Params, 0, sizeof(SendBattleReadyCancel_Params));

	this->ProcessEvent(uFnSendBattleReadyCancel, &SendBattleReadyCancel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsSendingBattleReady
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37849])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsSendingBattleReady()
{
	static UFunction* uFnIsSendingBattleReady = nullptr;

	if (!uFnIsSendingBattleReady)
	{
		uFnIsSendingBattleReady = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsSendingBattleReady");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsSendingBattleReady_Params IsSendingBattleReady_Params;
	memset(&IsSendingBattleReady_Params, 0, sizeof(IsSendingBattleReady_Params));

	this->ProcessEvent(uFnIsSendingBattleReady, &IsSendingBattleReady_Params, nullptr);

	return IsSendingBattleReady_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.SendBattleReady
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39679])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::SendBattleReady()
{
	static UFunction* uFnSendBattleReady = nullptr;

	if (!uFnSendBattleReady)
	{
		uFnSendBattleReady = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.SendBattleReady");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execSendBattleReady_Params SendBattleReady_Params;
	memset(&SendBattleReady_Params, 0, sizeof(SendBattleReady_Params));

	this->ProcessEvent(uFnSendBattleReady, &SendBattleReady_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsLeaveRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37700])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsLeaveRoom()
{
	static UFunction* uFnIsLeaveRoom = nullptr;

	if (!uFnIsLeaveRoom)
	{
		uFnIsLeaveRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsLeaveRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsLeaveRoom_Params IsLeaveRoom_Params;
	memset(&IsLeaveRoom_Params, 0, sizeof(IsLeaveRoom_Params));

	this->ProcessEvent(uFnIsLeaveRoom, &IsLeaveRoom_Params, nullptr);

	return IsLeaveRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.LeaveRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37985])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::LeaveRoom()
{
	static UFunction* uFnLeaveRoom = nullptr;

	if (!uFnLeaveRoom)
	{
		uFnLeaveRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.LeaveRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execLeaveRoom_Params LeaveRoom_Params;
	memset(&LeaveRoom_Params, 0, sizeof(LeaveRoom_Params));

	this->ProcessEvent(uFnLeaveRoom, &LeaveRoom_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.GotoBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37406])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::GotoBattle()
{
	static UFunction* uFnGotoBattle = nullptr;

	if (!uFnGotoBattle)
	{
		uFnGotoBattle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.GotoBattle");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execGotoBattle_Params GotoBattle_Params;
	memset(&GotoBattle_Params, 0, sizeof(GotoBattle_Params));

	this->ProcessEvent(uFnGotoBattle, &GotoBattle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.GetMySlotIndex
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37116])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuNetworkRoomAC20::GetMySlotIndex()
{
	static UFunction* uFnGetMySlotIndex = nullptr;

	if (!uFnGetMySlotIndex)
	{
		uFnGetMySlotIndex = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.GetMySlotIndex");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execGetMySlotIndex_Params GetMySlotIndex_Params;
	memset(&GetMySlotIndex_Params, 0, sizeof(GetMySlotIndex_Params));

	this->ProcessEvent(uFnGetMySlotIndex, &GetMySlotIndex_Params, nullptr);

	return GetMySlotIndex_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsBattleReadyInputEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37605])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsBattleReadyInputEnable()
{
	static UFunction* uFnIsBattleReadyInputEnable = nullptr;

	if (!uFnIsBattleReadyInputEnable)
	{
		uFnIsBattleReadyInputEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsBattleReadyInputEnable");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsBattleReadyInputEnable_Params IsBattleReadyInputEnable_Params;
	memset(&IsBattleReadyInputEnable_Params, 0, sizeof(IsBattleReadyInputEnable_Params));

	this->ProcessEvent(uFnIsBattleReadyInputEnable, &IsBattleReadyInputEnable_Params, nullptr);

	return IsBattleReadyInputEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsBattleReady
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37604])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsBattleReady()
{
	static UFunction* uFnIsBattleReady = nullptr;

	if (!uFnIsBattleReady)
	{
		uFnIsBattleReady = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsBattleReady");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsBattleReady_Params IsBattleReady_Params;
	memset(&IsBattleReady_Params, 0, sizeof(IsBattleReady_Params));

	this->ProcessEvent(uFnIsBattleReady, &IsBattleReady_Params, nullptr);

	return IsBattleReady_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsNeedGotoBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37741])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsNeedGotoBattle()
{
	static UFunction* uFnIsNeedGotoBattle = nullptr;

	if (!uFnIsNeedGotoBattle)
	{
		uFnIsNeedGotoBattle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsNeedGotoBattle");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsNeedGotoBattle_Params IsNeedGotoBattle_Params;
	memset(&IsNeedGotoBattle_Params, 0, sizeof(IsNeedGotoBattle_Params));

	this->ProcessEvent(uFnIsNeedGotoBattle, &IsNeedGotoBattle_Params, nullptr);

	return IsNeedGotoBattle_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsSitBattleConsole
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37857])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsSitBattleConsole()
{
	static UFunction* uFnIsSitBattleConsole = nullptr;

	if (!uFnIsSitBattleConsole)
	{
		uFnIsSitBattleConsole = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsSitBattleConsole");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsSitBattleConsole_Params IsSitBattleConsole_Params;
	memset(&IsSitBattleConsole_Params, 0, sizeof(IsSitBattleConsole_Params));

	this->ProcessEvent(uFnIsSitBattleConsole, &IsSitBattleConsole_Params, nullptr);

	return IsSitBattleConsole_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsSlotIsMine
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37863])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        SlotIndex                      (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsSlotIsMine(int32_t SlotIndex)
{
	static UFunction* uFnIsSlotIsMine = nullptr;

	if (!uFnIsSlotIsMine)
	{
		uFnIsSlotIsMine = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsSlotIsMine");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsSlotIsMine_Params IsSlotIsMine_Params;
	memset(&IsSlotIsMine_Params, 0, sizeof(IsSlotIsMine_Params));
	memcpy_s(&IsSlotIsMine_Params.SlotIndex, sizeof(IsSlotIsMine_Params.SlotIndex), &SlotIndex, sizeof(SlotIndex));

	this->ProcessEvent(uFnIsSlotIsMine, &IsSlotIsMine_Params, nullptr);

	return IsSlotIsMine_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsHost
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37687])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::IsHost()
{
	static UFunction* uFnIsHost = nullptr;

	if (!uFnIsHost)
	{
		uFnIsHost = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.IsHost");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execIsHost_Params IsHost_Params;
	memset(&IsHost_Params, 0, sizeof(IsHost_Params));

	this->ProcessEvent(uFnIsHost, &IsHost_Params, nullptr);

	return IsHost_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.TextChat_IsFullScreen
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40207])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::TextChat_IsFullScreen()
{
	static UFunction* uFnTextChat_IsFullScreen = nullptr;

	if (!uFnTextChat_IsFullScreen)
	{
		uFnTextChat_IsFullScreen = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.TextChat_IsFullScreen");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execTextChat_IsFullScreen_Params TextChat_IsFullScreen_Params;
	memset(&TextChat_IsFullScreen_Params, 0, sizeof(TextChat_IsFullScreen_Params));

	this->ProcessEvent(uFnTextChat_IsFullScreen, &TextChat_IsFullScreen_Params, nullptr);

	return TextChat_IsFullScreen_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateDrawMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40651])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateDrawMenu()
{
	static UFunction* uFnUpdateDrawMenu = nullptr;

	if (!uFnUpdateDrawMenu)
	{
		uFnUpdateDrawMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateDrawMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateDrawMenu_Params UpdateDrawMenu_Params;
	memset(&UpdateDrawMenu_Params, 0, sizeof(UpdateDrawMenu_Params));

	this->ProcessEvent(uFnUpdateDrawMenu, &UpdateDrawMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateInput
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40721])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        BattleReady                    (CPF_Parm | CPF_OutParm)
// int32_t                        LeaveRoom                      (CPF_Parm | CPF_OutParm)
// int32_t                        IsMainMenu                     (CPF_Parm | CPF_OutParm)
// EUE_GAME_MODE                  GameMode                       (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateInput(int32_t& BattleReady, int32_t& LeaveRoom, int32_t& IsMainMenu, EUE_GAME_MODE& GameMode)
{
	static UFunction* uFnUpdateInput = nullptr;

	if (!uFnUpdateInput)
	{
		uFnUpdateInput = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateInput");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateInput_Params UpdateInput_Params;
	memset(&UpdateInput_Params, 0, sizeof(UpdateInput_Params));
	memcpy_s(&UpdateInput_Params.BattleReady, sizeof(UpdateInput_Params.BattleReady), &BattleReady, sizeof(BattleReady));
	memcpy_s(&UpdateInput_Params.LeaveRoom, sizeof(UpdateInput_Params.LeaveRoom), &LeaveRoom, sizeof(LeaveRoom));
	memcpy_s(&UpdateInput_Params.IsMainMenu, sizeof(UpdateInput_Params.IsMainMenu), &IsMainMenu, sizeof(IsMainMenu));
	memcpy_s(&UpdateInput_Params.GameMode, sizeof(UpdateInput_Params.GameMode), &GameMode, sizeof(GameMode));

	this->ProcessEvent(uFnUpdateInput, &UpdateInput_Params, nullptr);

	memcpy_s(&BattleReady, sizeof(BattleReady), &UpdateInput_Params.BattleReady, sizeof(UpdateInput_Params.BattleReady));
	memcpy_s(&LeaveRoom, sizeof(LeaveRoom), &UpdateInput_Params.LeaveRoom, sizeof(UpdateInput_Params.LeaveRoom));
	memcpy_s(&IsMainMenu, sizeof(IsMainMenu), &UpdateInput_Params.IsMainMenu, sizeof(UpdateInput_Params.IsMainMenu));
	memcpy_s(&GameMode, sizeof(GameMode), &UpdateInput_Params.GameMode, sizeof(UpdateInput_Params.GameMode));

	return UpdateInput_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40782])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::UpdateMenu()
{
	static UFunction* uFnUpdateMenu = nullptr;

	if (!uFnUpdateMenu)
	{
		uFnUpdateMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.UpdateMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execUpdateMenu_Params UpdateMenu_Params;
	memset(&UpdateMenu_Params, 0, sizeof(UpdateMenu_Params));

	this->ProcessEvent(uFnUpdateMenu, &UpdateMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnCloseNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38813])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::OnCloseNative()
{
	static UFunction* uFnOnCloseNative = nullptr;

	if (!uFnOnCloseNative)
	{
		uFnOnCloseNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.OnCloseNative");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execOnCloseNative_Params OnCloseNative_Params;
	memset(&OnCloseNative_Params, 0, sizeof(OnCloseNative_Params));

	this->ProcessEvent(uFnOnCloseNative, &OnCloseNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkRoomAC20::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkRoomAC20.InitMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkRoomAC20_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateReturnLobby
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateReturnLobby(bool bTrigger)
{
	static UFunction* uFnUpdateReturnLobby = nullptr;

	if (!uFnUpdateReturnLobby)
	{
		uFnUpdateReturnLobby = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateReturnLobby");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateReturnLobby_Params UpdateReturnLobby_Params;
	memset(&UpdateReturnLobby_Params, 0, sizeof(UpdateReturnLobby_Params));
	UpdateReturnLobby_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateReturnLobby, &UpdateReturnLobby_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinError
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateJoinError(bool bTrigger)
{
	static UFunction* uFnUpdateJoinError = nullptr;

	if (!uFnUpdateJoinError)
	{
		uFnUpdateJoinError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinError");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateJoinError_Params UpdateJoinError_Params;
	memset(&UpdateJoinError_Params, 0, sizeof(UpdateJoinError_Params));
	UpdateJoinError_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateJoinError, &UpdateJoinError_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinErrorWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateJoinErrorWait(bool bTrigger)
{
	static UFunction* uFnUpdateJoinErrorWait = nullptr;

	if (!uFnUpdateJoinErrorWait)
	{
		uFnUpdateJoinErrorWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinErrorWait");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateJoinErrorWait_Params UpdateJoinErrorWait_Params;
	memset(&UpdateJoinErrorWait_Params, 0, sizeof(UpdateJoinErrorWait_Params));
	UpdateJoinErrorWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateJoinErrorWait, &UpdateJoinErrorWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateError
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateError(bool bTrigger)
{
	static UFunction* uFnUpdateError = nullptr;

	if (!uFnUpdateError)
	{
		uFnUpdateError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateError");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateError_Params UpdateError_Params;
	memset(&UpdateError_Params, 0, sizeof(UpdateError_Params));
	UpdateError_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateError, &UpdateError_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateNotFound
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateNotFound(bool bTrigger)
{
	static UFunction* uFnUpdateNotFound = nullptr;

	if (!uFnUpdateNotFound)
	{
		uFnUpdateNotFound = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateNotFound");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateNotFound_Params UpdateNotFound_Params;
	memset(&UpdateNotFound_Params, 0, sizeof(UpdateNotFound_Params));
	UpdateNotFound_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateNotFound, &UpdateNotFound_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdatejoinPasswordMiss
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdatejoinPasswordMiss(bool bTrigger)
{
	static UFunction* uFnUpdatejoinPasswordMiss = nullptr;

	if (!uFnUpdatejoinPasswordMiss)
	{
		uFnUpdatejoinPasswordMiss = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdatejoinPasswordMiss");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdatejoinPasswordMiss_Params UpdatejoinPasswordMiss_Params;
	memset(&UpdatejoinPasswordMiss_Params, 0, sizeof(UpdatejoinPasswordMiss_Params));
	UpdatejoinPasswordMiss_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdatejoinPasswordMiss, &UpdatejoinPasswordMiss_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdatejoinPassword
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdatejoinPassword(bool bTrigger)
{
	static UFunction* uFnUpdatejoinPassword = nullptr;

	if (!uFnUpdatejoinPassword)
	{
		uFnUpdatejoinPassword = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdatejoinPassword");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdatejoinPassword_Params UpdatejoinPassword_Params;
	memset(&UpdatejoinPassword_Params, 0, sizeof(UpdatejoinPassword_Params));
	UpdatejoinPassword_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdatejoinPassword, &UpdatejoinPassword_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdatejoinWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdatejoinWait(bool bTrigger)
{
	static UFunction* uFnUpdatejoinWait = nullptr;

	if (!uFnUpdatejoinWait)
	{
		uFnUpdatejoinWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdatejoinWait");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdatejoinWait_Params UpdatejoinWait_Params;
	memset(&UpdatejoinWait_Params, 0, sizeof(UpdatejoinWait_Params));
	UpdatejoinWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdatejoinWait, &UpdatejoinWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoin
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateJoin(bool bTrigger)
{
	static UFunction* uFnUpdateJoin = nullptr;

	if (!uFnUpdateJoin)
	{
		uFnUpdateJoin = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoin");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateJoin_Params UpdateJoin_Params;
	memset(&UpdateJoin_Params, 0, sizeof(UpdateJoin_Params));
	UpdateJoin_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateJoin, &UpdateJoin_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinConfirm
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateJoinConfirm(bool bTrigger)
{
	static UFunction* uFnUpdateJoinConfirm = nullptr;

	if (!uFnUpdateJoinConfirm)
	{
		uFnUpdateJoinConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinConfirm");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateJoinConfirm_Params UpdateJoinConfirm_Params;
	memset(&UpdateJoinConfirm_Params, 0, sizeof(UpdateJoinConfirm_Params));
	UpdateJoinConfirm_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateJoinConfirm, &UpdateJoinConfirm_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateSerachResult
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateSerachResult(bool bTrigger)
{
	static UFunction* uFnUpdateSerachResult = nullptr;

	if (!uFnUpdateSerachResult)
	{
		uFnUpdateSerachResult = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateSerachResult");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateSerachResult_Params UpdateSerachResult_Params;
	memset(&UpdateSerachResult_Params, 0, sizeof(UpdateSerachResult_Params));
	UpdateSerachResult_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateSerachResult, &UpdateSerachResult_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateSerachWait
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateSerachWait(bool bTrigger)
{
	static UFunction* uFnUpdateSerachWait = nullptr;

	if (!uFnUpdateSerachWait)
	{
		uFnUpdateSerachWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateSerachWait");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateSerachWait_Params UpdateSerachWait_Params;
	memset(&UpdateSerachWait_Params, 0, sizeof(UpdateSerachWait_Params));
	UpdateSerachWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateSerachWait, &UpdateSerachWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateSerach
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateSerach(bool bTrigger)
{
	static UFunction* uFnUpdateSerach = nullptr;

	if (!uFnUpdateSerach)
	{
		uFnUpdateSerach = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateSerach");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateSerach_Params UpdateSerach_Params;
	memset(&UpdateSerach_Params, 0, sizeof(UpdateSerach_Params));
	UpdateSerach_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateSerach, &UpdateSerach_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.StartMenu
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsReSearchEnable
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::eventIsReSearchEnable()
{
	static UFunction* uFnIsReSearchEnable = nullptr;

	if (!uFnIsReSearchEnable)
	{
		uFnIsReSearchEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsReSearchEnable");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_eventIsReSearchEnable_Params IsReSearchEnable_Params;
	memset(&IsReSearchEnable_Params, 0, sizeof(IsReSearchEnable_Params));

	this->ProcessEvent(uFnIsReSearchEnable, &IsReSearchEnable_Params, nullptr);

	return IsReSearchEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.SetReturnLobbyState
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::SetReturnLobbyState()
{
	static UFunction* uFnSetReturnLobbyState = nullptr;

	if (!uFnSetReturnLobbyState)
	{
		uFnSetReturnLobbyState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.SetReturnLobbyState");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execSetReturnLobbyState_Params SetReturnLobbyState_Params;
	memset(&SetReturnLobbyState_Params, 0, sizeof(SetReturnLobbyState_Params));

	this->ProcessEvent(uFnSetReturnLobbyState, &SetReturnLobbyState_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.ReturnLobbyNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39403])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::ReturnLobbyNative()
{
	static UFunction* uFnReturnLobbyNative = nullptr;

	if (!uFnReturnLobbyNative)
	{
		uFnReturnLobbyNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.ReturnLobbyNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execReturnLobbyNative_Params ReturnLobbyNative_Params;
	memset(&ReturnLobbyNative_Params, 0, sizeof(ReturnLobbyNative_Params));

	this->ProcessEvent(uFnReturnLobbyNative, &ReturnLobbyNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40652])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::UpdateDrawNative()
{
	static UFunction* uFnUpdateDrawNative = nullptr;

	if (!uFnUpdateDrawNative)
	{
		uFnUpdateDrawNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateDrawNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateDrawNative_Params UpdateDrawNative_Params;
	memset(&UpdateDrawNative_Params, 0, sizeof(UpdateDrawNative_Params));

	this->ProcessEvent(uFnUpdateDrawNative, &UpdateDrawNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinPasswordMissNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40735])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::UpdateJoinPasswordMissNative(bool bTrigger)
{
	static UFunction* uFnUpdateJoinPasswordMissNative = nullptr;

	if (!uFnUpdateJoinPasswordMissNative)
	{
		uFnUpdateJoinPasswordMissNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinPasswordMissNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateJoinPasswordMissNative_Params UpdateJoinPasswordMissNative_Params;
	memset(&UpdateJoinPasswordMissNative_Params, 0, sizeof(UpdateJoinPasswordMissNative_Params));
	UpdateJoinPasswordMissNative_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateJoinPasswordMissNative, &UpdateJoinPasswordMissNative_Params, nullptr);

	return UpdateJoinPasswordMissNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinPasswordNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40736])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsCancel                       (CPF_Parm | CPF_OutParm)
// int32_t                        IsMiss                         (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::UpdateJoinPasswordNative(bool bTrigger, int32_t& IsCancel, int32_t& IsMiss)
{
	static UFunction* uFnUpdateJoinPasswordNative = nullptr;

	if (!uFnUpdateJoinPasswordNative)
	{
		uFnUpdateJoinPasswordNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinPasswordNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateJoinPasswordNative_Params UpdateJoinPasswordNative_Params;
	memset(&UpdateJoinPasswordNative_Params, 0, sizeof(UpdateJoinPasswordNative_Params));
	UpdateJoinPasswordNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateJoinPasswordNative_Params.IsCancel, sizeof(UpdateJoinPasswordNative_Params.IsCancel), &IsCancel, sizeof(IsCancel));
	memcpy_s(&UpdateJoinPasswordNative_Params.IsMiss, sizeof(UpdateJoinPasswordNative_Params.IsMiss), &IsMiss, sizeof(IsMiss));

	this->ProcessEvent(uFnUpdateJoinPasswordNative, &UpdateJoinPasswordNative_Params, nullptr);

	memcpy_s(&IsCancel, sizeof(IsCancel), &UpdateJoinPasswordNative_Params.IsCancel, sizeof(UpdateJoinPasswordNative_Params.IsCancel));
	memcpy_s(&IsMiss, sizeof(IsMiss), &UpdateJoinPasswordNative_Params.IsMiss, sizeof(UpdateJoinPasswordNative_Params.IsMiss));

	return UpdateJoinPasswordNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinErrorNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40730])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::UpdateJoinErrorNative(bool bTrigger)
{
	static UFunction* uFnUpdateJoinErrorNative = nullptr;

	if (!uFnUpdateJoinErrorNative)
	{
		uFnUpdateJoinErrorNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinErrorNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateJoinErrorNative_Params UpdateJoinErrorNative_Params;
	memset(&UpdateJoinErrorNative_Params, 0, sizeof(UpdateJoinErrorNative_Params));
	UpdateJoinErrorNative_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateJoinErrorNative, &UpdateJoinErrorNative_Params, nullptr);

	return UpdateJoinErrorNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateReturnLobbyNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40827])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsCancel                       (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::UpdateReturnLobbyNative(bool bTrigger, int32_t& IsCancel)
{
	static UFunction* uFnUpdateReturnLobbyNative = nullptr;

	if (!uFnUpdateReturnLobbyNative)
	{
		uFnUpdateReturnLobbyNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateReturnLobbyNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateReturnLobbyNative_Params UpdateReturnLobbyNative_Params;
	memset(&UpdateReturnLobbyNative_Params, 0, sizeof(UpdateReturnLobbyNative_Params));
	UpdateReturnLobbyNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateReturnLobbyNative_Params.IsCancel, sizeof(UpdateReturnLobbyNative_Params.IsCancel), &IsCancel, sizeof(IsCancel));

	this->ProcessEvent(uFnUpdateReturnLobbyNative, &UpdateReturnLobbyNative_Params, nullptr);

	memcpy_s(&IsCancel, sizeof(IsCancel), &UpdateReturnLobbyNative_Params.IsCancel, sizeof(UpdateReturnLobbyNative_Params.IsCancel));

	return UpdateReturnLobbyNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinConfirmNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40728])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        IsCancel                       (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::UpdateJoinConfirmNative(bool bTrigger, int32_t& IsCancel)
{
	static UFunction* uFnUpdateJoinConfirmNative = nullptr;

	if (!uFnUpdateJoinConfirmNative)
	{
		uFnUpdateJoinConfirmNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateJoinConfirmNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateJoinConfirmNative_Params UpdateJoinConfirmNative_Params;
	memset(&UpdateJoinConfirmNative_Params, 0, sizeof(UpdateJoinConfirmNative_Params));
	UpdateJoinConfirmNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateJoinConfirmNative_Params.IsCancel, sizeof(UpdateJoinConfirmNative_Params.IsCancel), &IsCancel, sizeof(IsCancel));

	this->ProcessEvent(uFnUpdateJoinConfirmNative, &UpdateJoinConfirmNative_Params, nullptr);

	memcpy_s(&IsCancel, sizeof(IsCancel), &UpdateJoinConfirmNative_Params.IsCancel, sizeof(UpdateJoinConfirmNative_Params.IsCancel));

	return UpdateJoinConfirmNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateResultScroll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40824])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bUpHold                        (CPF_Parm)
// uint32_t                       bDownHold                      (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuNetworkSearch::UpdateResultScroll(bool bUpHold, bool bDownHold)
{
	static UFunction* uFnUpdateResultScroll = nullptr;

	if (!uFnUpdateResultScroll)
	{
		uFnUpdateResultScroll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.UpdateResultScroll");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execUpdateResultScroll_Params UpdateResultScroll_Params;
	memset(&UpdateResultScroll_Params, 0, sizeof(UpdateResultScroll_Params));
	UpdateResultScroll_Params.bUpHold = bUpHold;
	UpdateResultScroll_Params.bDownHold = bDownHold;

	this->ProcessEvent(uFnUpdateResultScroll, &UpdateResultScroll_Params, nullptr);

	return UpdateResultScroll_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OpenMOMKinshiMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38837])
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkSearch::OpenMOMKinshiMenu(int32_t Index)
{
	static UFunction* uFnOpenMOMKinshiMenu = nullptr;

	if (!uFnOpenMOMKinshiMenu)
	{
		uFnOpenMOMKinshiMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OpenMOMKinshiMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execOpenMOMKinshiMenu_Params OpenMOMKinshiMenu_Params;
	memset(&OpenMOMKinshiMenu_Params, 0, sizeof(OpenMOMKinshiMenu_Params));
	memcpy_s(&OpenMOMKinshiMenu_Params.Index, sizeof(OpenMOMKinshiMenu_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnOpenMOMKinshiMenu, &OpenMOMKinshiMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OpenRankMatchMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38841])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::OpenRankMatchMenu()
{
	static UFunction* uFnOpenRankMatchMenu = nullptr;

	if (!uFnOpenRankMatchMenu)
	{
		uFnOpenRankMatchMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.OpenRankMatchMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execOpenRankMatchMenu_Params OpenRankMatchMenu_Params;
	memset(&OpenRankMatchMenu_Params, 0, sizeof(OpenRankMatchMenu_Params));

	this->ProcessEvent(uFnOpenRankMatchMenu, &OpenRankMatchMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsQosLimitProcess
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37802])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::IsQosLimitProcess(int32_t Index)
{
	static UFunction* uFnIsQosLimitProcess = nullptr;

	if (!uFnIsQosLimitProcess)
	{
		uFnIsQosLimitProcess = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsQosLimitProcess");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execIsQosLimitProcess_Params IsQosLimitProcess_Params;
	memset(&IsQosLimitProcess_Params, 0, sizeof(IsQosLimitProcess_Params));
	memcpy_s(&IsQosLimitProcess_Params.Index, sizeof(IsQosLimitProcess_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIsQosLimitProcess, &IsQosLimitProcess_Params, nullptr);

	return IsQosLimitProcess_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsQosLimitClear
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37801])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::IsQosLimitClear(int32_t Index)
{
	static UFunction* uFnIsQosLimitClear = nullptr;

	if (!uFnIsQosLimitClear)
	{
		uFnIsQosLimitClear = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsQosLimitClear");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execIsQosLimitClear_Params IsQosLimitClear_Params;
	memset(&IsQosLimitClear_Params, 0, sizeof(IsQosLimitClear_Params));
	memcpy_s(&IsQosLimitClear_Params.Index, sizeof(IsQosLimitClear_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIsQosLimitClear, &IsQosLimitClear_Params, nullptr);

	return IsQosLimitClear_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsJoiningRoom
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37694])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::IsJoiningRoom(int32_t& isError)
{
	static UFunction* uFnIsJoiningRoom = nullptr;

	if (!uFnIsJoiningRoom)
	{
		uFnIsJoiningRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsJoiningRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execIsJoiningRoom_Params IsJoiningRoom_Params;
	memset(&IsJoiningRoom_Params, 0, sizeof(IsJoiningRoom_Params));
	memcpy_s(&IsJoiningRoom_Params.isError, sizeof(IsJoiningRoom_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsJoiningRoom, &IsJoiningRoom_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsJoiningRoom_Params.isError, sizeof(IsJoiningRoom_Params.isError));

	return IsJoiningRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.JoinRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37947])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::JoinRoom(int32_t Index)
{
	static UFunction* uFnJoinRoom = nullptr;

	if (!uFnJoinRoom)
	{
		uFnJoinRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.JoinRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execJoinRoom_Params JoinRoom_Params;
	memset(&JoinRoom_Params, 0, sizeof(JoinRoom_Params));
	memcpy_s(&JoinRoom_Params.Index, sizeof(JoinRoom_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnJoinRoom, &JoinRoom_Params, nullptr);

	return JoinRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsPasswordRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37766])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::IsPasswordRoom(int32_t Index)
{
	static UFunction* uFnIsPasswordRoom = nullptr;

	if (!uFnIsPasswordRoom)
	{
		uFnIsPasswordRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsPasswordRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execIsPasswordRoom_Params IsPasswordRoom_Params;
	memset(&IsPasswordRoom_Params, 0, sizeof(IsPasswordRoom_Params));
	memcpy_s(&IsPasswordRoom_Params.Index, sizeof(IsPasswordRoom_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIsPasswordRoom, &IsPasswordRoom_Params, nullptr);

	return IsPasswordRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.SetupResultList
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39852])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuNetworkSearch::SetupResultList()
{
	static UFunction* uFnSetupResultList = nullptr;

	if (!uFnSetupResultList)
	{
		uFnSetupResultList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.SetupResultList");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execSetupResultList_Params SetupResultList_Params;
	memset(&SetupResultList_Params, 0, sizeof(SetupResultList_Params));

	this->ProcessEvent(uFnSetupResultList, &SetupResultList_Params, nullptr);

	return SetupResultList_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsSearchingRoom
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37839])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::IsSearchingRoom(int32_t& isError)
{
	static UFunction* uFnIsSearchingRoom = nullptr;

	if (!uFnIsSearchingRoom)
	{
		uFnIsSearchingRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.IsSearchingRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execIsSearchingRoom_Params IsSearchingRoom_Params;
	memset(&IsSearchingRoom_Params, 0, sizeof(IsSearchingRoom_Params));
	memcpy_s(&IsSearchingRoom_Params.isError, sizeof(IsSearchingRoom_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsSearchingRoom, &IsSearchingRoom_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsSearchingRoom_Params.isError, sizeof(IsSearchingRoom_Params.isError));

	return IsSearchingRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.SearchRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39658])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkSearch::SearchRoom()
{
	static UFunction* uFnSearchRoom = nullptr;

	if (!uFnSearchRoom)
	{
		uFnSearchRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.SearchRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execSearchRoom_Params SearchRoom_Params;
	memset(&SearchRoom_Params, 0, sizeof(SearchRoom_Params));

	this->ProcessEvent(uFnSearchRoom, &SearchRoom_Params, nullptr);

	return SearchRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.FinalizeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36842])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::FinalizeNative()
{
	static UFunction* uFnFinalizeNative = nullptr;

	if (!uFnFinalizeNative)
	{
		uFnFinalizeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.FinalizeNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execFinalizeNative_Params FinalizeNative_Params;
	memset(&FinalizeNative_Params, 0, sizeof(FinalizeNative_Params));

	this->ProcessEvent(uFnFinalizeNative, &FinalizeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkSearch::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkSearch.InitializeNative");
	}

	UREDGfxMoviePlayer_MenuNetworkSearch_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OnDrawUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkTopMenu::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_Error
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_Error(bool bTrigger)
{
	static UFunction* uFnstateUpdate_Error = nullptr;

	if (!uFnstateUpdate_Error)
	{
		uFnstateUpdate_Error = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_Error");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_Error_Params stateUpdate_Error_Params;
	memset(&stateUpdate_Error_Params, 0, sizeof(stateUpdate_Error_Params));
	stateUpdate_Error_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_Error, &stateUpdate_Error_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_EntryAbort
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_EntryAbort(bool bTrigger)
{
	static UFunction* uFnstateUpdate_EntryAbort = nullptr;

	if (!uFnstateUpdate_EntryAbort)
	{
		uFnstateUpdate_EntryAbort = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_EntryAbort");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_EntryAbort_Params stateUpdate_EntryAbort_Params;
	memset(&stateUpdate_EntryAbort_Params, 0, sizeof(stateUpdate_EntryAbort_Params));
	stateUpdate_EntryAbort_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_EntryAbort, &stateUpdate_EntryAbort_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_EntryAbortConfirm
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_EntryAbortConfirm(bool bTrigger)
{
	static UFunction* uFnstateUpdate_EntryAbortConfirm = nullptr;

	if (!uFnstateUpdate_EntryAbortConfirm)
	{
		uFnstateUpdate_EntryAbortConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_EntryAbortConfirm");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_EntryAbortConfirm_Params stateUpdate_EntryAbortConfirm_Params;
	memset(&stateUpdate_EntryAbortConfirm_Params, 0, sizeof(stateUpdate_EntryAbortConfirm_Params));
	stateUpdate_EntryAbortConfirm_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_EntryAbortConfirm, &stateUpdate_EntryAbortConfirm_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_PlusCheck
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_PlusCheck(bool bTrigger)
{
	static UFunction* uFnstateUpdate_PlusCheck = nullptr;

	if (!uFnstateUpdate_PlusCheck)
	{
		uFnstateUpdate_PlusCheck = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_PlusCheck");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_PlusCheck_Params stateUpdate_PlusCheck_Params;
	memset(&stateUpdate_PlusCheck_Params, 0, sizeof(stateUpdate_PlusCheck_Params));
	stateUpdate_PlusCheck_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_PlusCheck, &stateUpdate_PlusCheck_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_PlayerMatchCreate
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_PlayerMatchCreate(bool bTrigger)
{
	static UFunction* uFnstateUpdate_PlayerMatchCreate = nullptr;

	if (!uFnstateUpdate_PlayerMatchCreate)
	{
		uFnstateUpdate_PlayerMatchCreate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_PlayerMatchCreate");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_PlayerMatchCreate_Params stateUpdate_PlayerMatchCreate_Params;
	memset(&stateUpdate_PlayerMatchCreate_Params, 0, sizeof(stateUpdate_PlayerMatchCreate_Params));
	stateUpdate_PlayerMatchCreate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_PlayerMatchCreate, &stateUpdate_PlayerMatchCreate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_PlayerMatch
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_PlayerMatch(bool bTrigger)
{
	static UFunction* uFnstateUpdate_PlayerMatch = nullptr;

	if (!uFnstateUpdate_PlayerMatch)
	{
		uFnstateUpdate_PlayerMatch = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_PlayerMatch");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_PlayerMatch_Params stateUpdate_PlayerMatch_Params;
	memset(&stateUpdate_PlayerMatch_Params, 0, sizeof(stateUpdate_PlayerMatch_Params));
	stateUpdate_PlayerMatch_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_PlayerMatch, &stateUpdate_PlayerMatch_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_RankMatch
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_RankMatch(bool bTrigger)
{
	static UFunction* uFnstateUpdate_RankMatch = nullptr;

	if (!uFnstateUpdate_RankMatch)
	{
		uFnstateUpdate_RankMatch = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_RankMatch");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_RankMatch_Params stateUpdate_RankMatch_Params;
	memset(&stateUpdate_RankMatch_Params, 0, sizeof(stateUpdate_RankMatch_Params));
	stateUpdate_RankMatch_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_RankMatch, &stateUpdate_RankMatch_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_Main
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_Main(bool bTrigger)
{
	static UFunction* uFnstateUpdate_Main = nullptr;

	if (!uFnstateUpdate_Main)
	{
		uFnstateUpdate_Main = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_Main");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_Main_Params stateUpdate_Main_Params;
	memset(&stateUpdate_Main_Params, 0, sizeof(stateUpdate_Main_Params));
	stateUpdate_Main_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_Main, &stateUpdate_Main_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_EndAnim
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_EndAnim(bool bTrigger)
{
	static UFunction* uFnstateUpdate_EndAnim = nullptr;

	if (!uFnstateUpdate_EndAnim)
	{
		uFnstateUpdate_EndAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_EndAnim");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_EndAnim_Params stateUpdate_EndAnim_Params;
	memset(&stateUpdate_EndAnim_Params, 0, sizeof(stateUpdate_EndAnim_Params));
	stateUpdate_EndAnim_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_EndAnim, &stateUpdate_EndAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_StartAnim
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::stateUpdate_StartAnim(bool bTrigger)
{
	static UFunction* uFnstateUpdate_StartAnim = nullptr;

	if (!uFnstateUpdate_StartAnim)
	{
		uFnstateUpdate_StartAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.stateUpdate_StartAnim");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execstateUpdate_StartAnim_Params stateUpdate_StartAnim_Params;
	memset(&stateUpdate_StartAnim_Params, 0, sizeof(stateUpdate_StartAnim_Params));
	stateUpdate_StartAnim_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_StartAnim, &stateUpdate_StartAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.UpdateDesc
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Cursor                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::UpdateDesc(int32_t Cursor)
{
	static UFunction* uFnUpdateDesc = nullptr;

	if (!uFnUpdateDesc)
	{
		uFnUpdateDesc = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.UpdateDesc");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execUpdateDesc_Params UpdateDesc_Params;
	memset(&UpdateDesc_Params, 0, sizeof(UpdateDesc_Params));
	memcpy_s(&UpdateDesc_Params.Cursor, sizeof(UpdateDesc_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnUpdateDesc, &UpdateDesc_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.ChangeFocus
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Cursor                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::ChangeFocus(int32_t Cursor)
{
	static UFunction* uFnChangeFocus = nullptr;

	if (!uFnChangeFocus)
	{
		uFnChangeFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.ChangeFocus");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execChangeFocus_Params ChangeFocus_Params;
	memset(&ChangeFocus_Params, 0, sizeof(ChangeFocus_Params));
	memcpy_s(&ChangeFocus_Params.Cursor, sizeof(ChangeFocus_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnChangeFocus, &ChangeFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.GetMenuResult
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuNetworkTopMenu::GetMenuResult()
{
	static UFunction* uFnGetMenuResult = nullptr;

	if (!uFnGetMenuResult)
	{
		uFnGetMenuResult = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.GetMenuResult");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execGetMenuResult_Params GetMenuResult_Params;
	memset(&GetMenuResult_Params, 0, sizeof(GetMenuResult_Params));

	this->ProcessEvent(uFnGetMenuResult, &GetMenuResult_Params, nullptr);

	return GetMenuResult_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkTopMenu::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkTopMenu::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.StartMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkTopMenu::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkTopMenu::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OnInitialize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkTopMenu::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkTopMenu::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.GetSavedCursor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37161])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuNetworkTopMenu::GetSavedCursor()
{
	static UFunction* uFnGetSavedCursor = nullptr;

	if (!uFnGetSavedCursor)
	{
		uFnGetSavedCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.GetSavedCursor");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execGetSavedCursor_Params GetSavedCursor_Params;
	memset(&GetSavedCursor_Params, 0, sizeof(GetSavedCursor_Params));

	this->ProcessEvent(uFnGetSavedCursor, &GetSavedCursor_Params, nullptr);

	return GetSavedCursor_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.SaveCursor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39457])
// Parameter Info:
// int32_t                        Cursor                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkTopMenu::SaveCursor(int32_t Cursor)
{
	static UFunction* uFnSaveCursor = nullptr;

	if (!uFnSaveCursor)
	{
		uFnSaveCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.SaveCursor");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execSaveCursor_Params SaveCursor_Params;
	memset(&SaveCursor_Params, 0, sizeof(SaveCursor_Params));
	memcpy_s(&SaveCursor_Params.Cursor, sizeof(SaveCursor_Params.Cursor), &Cursor, sizeof(Cursor));

	this->ProcessEvent(uFnSaveCursor, &SaveCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsCheckPlus
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37621])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkTopMenu::IsCheckPlus(int32_t& isError)
{
	static UFunction* uFnIsCheckPlus = nullptr;

	if (!uFnIsCheckPlus)
	{
		uFnIsCheckPlus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsCheckPlus");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execIsCheckPlus_Params IsCheckPlus_Params;
	memset(&IsCheckPlus_Params, 0, sizeof(IsCheckPlus_Params));
	memcpy_s(&IsCheckPlus_Params.isError, sizeof(IsCheckPlus_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsCheckPlus, &IsCheckPlus_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsCheckPlus_Params.isError, sizeof(IsCheckPlus_Params.isError));

	return IsCheckPlus_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.CheckPlus
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36205])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        IsNotNeed                      (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkTopMenu::CheckPlus(int32_t& IsNotNeed)
{
	static UFunction* uFnCheckPlus = nullptr;

	if (!uFnCheckPlus)
	{
		uFnCheckPlus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.CheckPlus");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execCheckPlus_Params CheckPlus_Params;
	memset(&CheckPlus_Params, 0, sizeof(CheckPlus_Params));
	memcpy_s(&CheckPlus_Params.IsNotNeed, sizeof(CheckPlus_Params.IsNotNeed), &IsNotNeed, sizeof(IsNotNeed));

	this->ProcessEvent(uFnCheckPlus, &CheckPlus_Params, nullptr);

	memcpy_s(&IsNotNeed, sizeof(IsNotNeed), &CheckPlus_Params.IsNotNeed, sizeof(CheckPlus_Params.IsNotNeed));

	return CheckPlus_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsCreatingRoom
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37635])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkTopMenu::IsCreatingRoom(int32_t& isError)
{
	static UFunction* uFnIsCreatingRoom = nullptr;

	if (!uFnIsCreatingRoom)
	{
		uFnIsCreatingRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsCreatingRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execIsCreatingRoom_Params IsCreatingRoom_Params;
	memset(&IsCreatingRoom_Params, 0, sizeof(IsCreatingRoom_Params));
	memcpy_s(&IsCreatingRoom_Params.isError, sizeof(IsCreatingRoom_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnIsCreatingRoom, &IsCreatingRoom_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &IsCreatingRoom_Params.isError, sizeof(IsCreatingRoom_Params.isError));

	return IsCreatingRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.CreateRoom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36337])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkTopMenu::CreateRoom()
{
	static UFunction* uFnCreateRoom = nullptr;

	if (!uFnCreateRoom)
	{
		uFnCreateRoom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.CreateRoom");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execCreateRoom_Params CreateRoom_Params;
	memset(&CreateRoom_Params, 0, sizeof(CreateRoom_Params));

	this->ProcessEvent(uFnCreateRoom, &CreateRoom_Params, nullptr);

	return CreateRoom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsPlayerMatchEnd
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37772])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        IsCreate                       (CPF_Parm | CPF_OutParm)
// int32_t                        IsSearch                       (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkTopMenu::IsPlayerMatchEnd(int32_t& IsCreate, int32_t& IsSearch)
{
	static UFunction* uFnIsPlayerMatchEnd = nullptr;

	if (!uFnIsPlayerMatchEnd)
	{
		uFnIsPlayerMatchEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsPlayerMatchEnd");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execIsPlayerMatchEnd_Params IsPlayerMatchEnd_Params;
	memset(&IsPlayerMatchEnd_Params, 0, sizeof(IsPlayerMatchEnd_Params));
	memcpy_s(&IsPlayerMatchEnd_Params.IsCreate, sizeof(IsPlayerMatchEnd_Params.IsCreate), &IsCreate, sizeof(IsCreate));
	memcpy_s(&IsPlayerMatchEnd_Params.IsSearch, sizeof(IsPlayerMatchEnd_Params.IsSearch), &IsSearch, sizeof(IsSearch));

	this->ProcessEvent(uFnIsPlayerMatchEnd, &IsPlayerMatchEnd_Params, nullptr);

	memcpy_s(&IsCreate, sizeof(IsCreate), &IsPlayerMatchEnd_Params.IsCreate, sizeof(IsPlayerMatchEnd_Params.IsCreate));
	memcpy_s(&IsSearch, sizeof(IsSearch), &IsPlayerMatchEnd_Params.IsSearch, sizeof(IsPlayerMatchEnd_Params.IsSearch));

	return IsPlayerMatchEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OpenPlayerMatch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38838])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkTopMenu::OpenPlayerMatch()
{
	static UFunction* uFnOpenPlayerMatch = nullptr;

	if (!uFnOpenPlayerMatch)
	{
		uFnOpenPlayerMatch = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OpenPlayerMatch");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execOpenPlayerMatch_Params OpenPlayerMatch_Params;
	memset(&OpenPlayerMatch_Params, 0, sizeof(OpenPlayerMatch_Params));

	this->ProcessEvent(uFnOpenPlayerMatch, &OpenPlayerMatch_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsRankMatchEnd
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37812])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        IsSearch                       (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkTopMenu::IsRankMatchEnd(int32_t& IsSearch)
{
	static UFunction* uFnIsRankMatchEnd = nullptr;

	if (!uFnIsRankMatchEnd)
	{
		uFnIsRankMatchEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.IsRankMatchEnd");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execIsRankMatchEnd_Params IsRankMatchEnd_Params;
	memset(&IsRankMatchEnd_Params, 0, sizeof(IsRankMatchEnd_Params));
	memcpy_s(&IsRankMatchEnd_Params.IsSearch, sizeof(IsRankMatchEnd_Params.IsSearch), &IsSearch, sizeof(IsSearch));

	this->ProcessEvent(uFnIsRankMatchEnd, &IsRankMatchEnd_Params, nullptr);

	memcpy_s(&IsSearch, sizeof(IsSearch), &IsRankMatchEnd_Params.IsSearch, sizeof(IsRankMatchEnd_Params.IsSearch));

	return IsRankMatchEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OpenRankMatch
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38840])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkTopMenu::OpenRankMatch()
{
	static UFunction* uFnOpenRankMatch = nullptr;

	if (!uFnOpenRankMatch)
	{
		uFnOpenRankMatch = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkTopMenu.OpenRankMatch");
	}

	UREDGfxMoviePlayer_MenuNetworkTopMenu_execOpenRankMatch_Params OpenRankMatch_Params;
	memset(&OpenRankMatch_Params, 0, sizeof(OpenRankMatch_Params));

	this->ProcessEvent(uFnOpenRankMatch, &OpenRankMatch_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkWelcome::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNetworkWelcome::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.IsEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuNetworkWelcome::IsEndMenu()
{
	static UFunction* uFnIsEndMenu = nullptr;

	if (!uFnIsEndMenu)
	{
		uFnIsEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.IsEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execIsEndMenu_Params IsEndMenu_Params;
	memset(&IsEndMenu_Params, 0, sizeof(IsEndMenu_Params));

	this->ProcessEvent(uFnIsEndMenu, &IsEndMenu_Params, nullptr);

	return IsEndMenu_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.ForceEndMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkWelcome::ForceEndMenu()
{
	static UFunction* uFnForceEndMenu = nullptr;

	if (!uFnForceEndMenu)
	{
		uFnForceEndMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.ForceEndMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execForceEndMenu_Params ForceEndMenu_Params;
	memset(&ForceEndMenu_Params, 0, sizeof(ForceEndMenu_Params));

	this->ProcessEvent(uFnForceEndMenu, &ForceEndMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.StartMenu
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkWelcome::StartMenu()
{
	static UFunction* uFnStartMenu = nullptr;

	if (!uFnStartMenu)
	{
		uFnStartMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.StartMenu");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execStartMenu_Params StartMenu_Params;
	memset(&StartMenu_Params, 0, sizeof(StartMenu_Params));

	this->ProcessEvent(uFnStartMenu, &StartMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkWelcome::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.OnClose");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkWelcome::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuNetworkWelcome::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.Start");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.DrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36603])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkWelcome::DrawNative()
{
	static UFunction* uFnDrawNative = nullptr;

	if (!uFnDrawNative)
	{
		uFnDrawNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.DrawNative");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execDrawNative_Params DrawNative_Params;
	memset(&DrawNative_Params, 0, sizeof(DrawNative_Params));

	this->ProcessEvent(uFnDrawNative, &DrawNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.UpdateNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40790])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        FromInvite                     (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuNetworkWelcome::UpdateNative(bool bTrigger, int32_t& FromInvite)
{
	static UFunction* uFnUpdateNative = nullptr;

	if (!uFnUpdateNative)
	{
		uFnUpdateNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.UpdateNative");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execUpdateNative_Params UpdateNative_Params;
	memset(&UpdateNative_Params, 0, sizeof(UpdateNative_Params));
	UpdateNative_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateNative_Params.FromInvite, sizeof(UpdateNative_Params.FromInvite), &FromInvite, sizeof(FromInvite));

	this->ProcessEvent(uFnUpdateNative, &UpdateNative_Params, nullptr);

	memcpy_s(&FromInvite, sizeof(FromInvite), &UpdateNative_Params.FromInvite, sizeof(UpdateNative_Params.FromInvite));

	return UpdateNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuNetworkWelcome::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNetworkWelcome.InitializeNative");
	}

	UREDGfxMoviePlayer_MenuNetworkWelcome_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_DiagramTextColor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Row                            (CPF_Parm)
// int32_t                        Col                            (CPF_Parm)
// int32_t                        SetColor                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::AS_DiagramTextColor(int32_t Row, int32_t Col, int32_t SetColor)
{
	static UFunction* uFnAS_DiagramTextColor = nullptr;

	if (!uFnAS_DiagramTextColor)
	{
		uFnAS_DiagramTextColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_DiagramTextColor");
	}

	UREDGfxMoviePlayer_MenuRanking_execAS_DiagramTextColor_Params AS_DiagramTextColor_Params;
	memset(&AS_DiagramTextColor_Params, 0, sizeof(AS_DiagramTextColor_Params));
	memcpy_s(&AS_DiagramTextColor_Params.Row, sizeof(AS_DiagramTextColor_Params.Row), &Row, sizeof(Row));
	memcpy_s(&AS_DiagramTextColor_Params.Col, sizeof(AS_DiagramTextColor_Params.Col), &Col, sizeof(Col));
	memcpy_s(&AS_DiagramTextColor_Params.SetColor, sizeof(AS_DiagramTextColor_Params.SetColor), &SetColor, sizeof(SetColor));

	this->ProcessEvent(uFnAS_DiagramTextColor, &AS_DiagramTextColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardMOMScore
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  Num                            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isScroll                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::AS_ReqRankBoardMOMScore(int32_t PosX, int32_t PosY, const class FString& PlayerName, int32_t Rank, const class FString& Num, const class FString& shopName, bool isScroll)
{
	static UFunction* uFnAS_ReqRankBoardMOMScore = nullptr;

	if (!uFnAS_ReqRankBoardMOMScore)
	{
		uFnAS_ReqRankBoardMOMScore = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardMOMScore");
	}

	UREDGfxMoviePlayer_MenuRanking_execAS_ReqRankBoardMOMScore_Params AS_ReqRankBoardMOMScore_Params;
	memset(&AS_ReqRankBoardMOMScore_Params, 0, sizeof(AS_ReqRankBoardMOMScore_Params));
	memcpy_s(&AS_ReqRankBoardMOMScore_Params.PosX, sizeof(AS_ReqRankBoardMOMScore_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&AS_ReqRankBoardMOMScore_Params.PosY, sizeof(AS_ReqRankBoardMOMScore_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&AS_ReqRankBoardMOMScore_Params.PlayerName, sizeof(AS_ReqRankBoardMOMScore_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&AS_ReqRankBoardMOMScore_Params.Rank, sizeof(AS_ReqRankBoardMOMScore_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&AS_ReqRankBoardMOMScore_Params.Num, sizeof(AS_ReqRankBoardMOMScore_Params.Num), &Num, sizeof(Num));
	memcpy_s(&AS_ReqRankBoardMOMScore_Params.shopName, sizeof(AS_ReqRankBoardMOMScore_Params.shopName), &shopName, sizeof(shopName));
	AS_ReqRankBoardMOMScore_Params.isScroll = isScroll;

	this->ProcessEvent(uFnAS_ReqRankBoardMOMScore, &AS_ReqRankBoardMOMScore_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardScore
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  Num                            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isScroll                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::AS_ReqRankBoardScore(int32_t PosX, int32_t PosY, const class FString& PlayerName, int32_t Rank, const class FString& Num, const class FString& shopName, const class FString& CharaID, bool isScroll)
{
	static UFunction* uFnAS_ReqRankBoardScore = nullptr;

	if (!uFnAS_ReqRankBoardScore)
	{
		uFnAS_ReqRankBoardScore = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardScore");
	}

	UREDGfxMoviePlayer_MenuRanking_execAS_ReqRankBoardScore_Params AS_ReqRankBoardScore_Params;
	memset(&AS_ReqRankBoardScore_Params, 0, sizeof(AS_ReqRankBoardScore_Params));
	memcpy_s(&AS_ReqRankBoardScore_Params.PosX, sizeof(AS_ReqRankBoardScore_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&AS_ReqRankBoardScore_Params.PosY, sizeof(AS_ReqRankBoardScore_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&AS_ReqRankBoardScore_Params.PlayerName, sizeof(AS_ReqRankBoardScore_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&AS_ReqRankBoardScore_Params.Rank, sizeof(AS_ReqRankBoardScore_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&AS_ReqRankBoardScore_Params.Num, sizeof(AS_ReqRankBoardScore_Params.Num), &Num, sizeof(Num));
	memcpy_s(&AS_ReqRankBoardScore_Params.shopName, sizeof(AS_ReqRankBoardScore_Params.shopName), &shopName, sizeof(shopName));
	memcpy_s(&AS_ReqRankBoardScore_Params.CharaID, sizeof(AS_ReqRankBoardScore_Params.CharaID), &CharaID, sizeof(CharaID));
	AS_ReqRankBoardScore_Params.isScroll = isScroll;

	this->ProcessEvent(uFnAS_ReqRankBoardScore, &AS_ReqRankBoardScore_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardStraightWins
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  Num                            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isScroll                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::AS_ReqRankBoardStraightWins(int32_t PosX, int32_t PosY, const class FString& PlayerName, int32_t Rank, const class FString& Num, const class FString& shopName, bool isScroll)
{
	static UFunction* uFnAS_ReqRankBoardStraightWins = nullptr;

	if (!uFnAS_ReqRankBoardStraightWins)
	{
		uFnAS_ReqRankBoardStraightWins = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardStraightWins");
	}

	UREDGfxMoviePlayer_MenuRanking_execAS_ReqRankBoardStraightWins_Params AS_ReqRankBoardStraightWins_Params;
	memset(&AS_ReqRankBoardStraightWins_Params, 0, sizeof(AS_ReqRankBoardStraightWins_Params));
	memcpy_s(&AS_ReqRankBoardStraightWins_Params.PosX, sizeof(AS_ReqRankBoardStraightWins_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&AS_ReqRankBoardStraightWins_Params.PosY, sizeof(AS_ReqRankBoardStraightWins_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&AS_ReqRankBoardStraightWins_Params.PlayerName, sizeof(AS_ReqRankBoardStraightWins_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&AS_ReqRankBoardStraightWins_Params.Rank, sizeof(AS_ReqRankBoardStraightWins_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&AS_ReqRankBoardStraightWins_Params.Num, sizeof(AS_ReqRankBoardStraightWins_Params.Num), &Num, sizeof(Num));
	memcpy_s(&AS_ReqRankBoardStraightWins_Params.shopName, sizeof(AS_ReqRankBoardStraightWins_Params.shopName), &shopName, sizeof(shopName));
	AS_ReqRankBoardStraightWins_Params.isScroll = isScroll;

	this->ProcessEvent(uFnAS_ReqRankBoardStraightWins, &AS_ReqRankBoardStraightWins_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardRR
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  Num                            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isScroll                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::AS_ReqRankBoardRR(int32_t PosX, int32_t PosY, const class FString& PlayerName, int32_t Rank, const class FString& Num, const class FString& shopName, const class FString& CharaID, bool isScroll)
{
	static UFunction* uFnAS_ReqRankBoardRR = nullptr;

	if (!uFnAS_ReqRankBoardRR)
	{
		uFnAS_ReqRankBoardRR = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardRR");
	}

	UREDGfxMoviePlayer_MenuRanking_execAS_ReqRankBoardRR_Params AS_ReqRankBoardRR_Params;
	memset(&AS_ReqRankBoardRR_Params, 0, sizeof(AS_ReqRankBoardRR_Params));
	memcpy_s(&AS_ReqRankBoardRR_Params.PosX, sizeof(AS_ReqRankBoardRR_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&AS_ReqRankBoardRR_Params.PosY, sizeof(AS_ReqRankBoardRR_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&AS_ReqRankBoardRR_Params.PlayerName, sizeof(AS_ReqRankBoardRR_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&AS_ReqRankBoardRR_Params.Rank, sizeof(AS_ReqRankBoardRR_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&AS_ReqRankBoardRR_Params.Num, sizeof(AS_ReqRankBoardRR_Params.Num), &Num, sizeof(Num));
	memcpy_s(&AS_ReqRankBoardRR_Params.shopName, sizeof(AS_ReqRankBoardRR_Params.shopName), &shopName, sizeof(shopName));
	memcpy_s(&AS_ReqRankBoardRR_Params.CharaID, sizeof(AS_ReqRankBoardRR_Params.CharaID), &CharaID, sizeof(CharaID));
	AS_ReqRankBoardRR_Params.isScroll = isScroll;

	this->ProcessEvent(uFnAS_ReqRankBoardRR, &AS_ReqRankBoardRR_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardWins
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  Num                            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isScroll                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::AS_ReqRankBoardWins(int32_t PosX, int32_t PosY, const class FString& PlayerName, int32_t Rank, const class FString& Num, const class FString& shopName, bool isScroll)
{
	static UFunction* uFnAS_ReqRankBoardWins = nullptr;

	if (!uFnAS_ReqRankBoardWins)
	{
		uFnAS_ReqRankBoardWins = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.AS_ReqRankBoardWins");
	}

	UREDGfxMoviePlayer_MenuRanking_execAS_ReqRankBoardWins_Params AS_ReqRankBoardWins_Params;
	memset(&AS_ReqRankBoardWins_Params, 0, sizeof(AS_ReqRankBoardWins_Params));
	memcpy_s(&AS_ReqRankBoardWins_Params.PosX, sizeof(AS_ReqRankBoardWins_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&AS_ReqRankBoardWins_Params.PosY, sizeof(AS_ReqRankBoardWins_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&AS_ReqRankBoardWins_Params.PlayerName, sizeof(AS_ReqRankBoardWins_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&AS_ReqRankBoardWins_Params.Rank, sizeof(AS_ReqRankBoardWins_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&AS_ReqRankBoardWins_Params.Num, sizeof(AS_ReqRankBoardWins_Params.Num), &Num, sizeof(Num));
	memcpy_s(&AS_ReqRankBoardWins_Params.shopName, sizeof(AS_ReqRankBoardWins_Params.shopName), &shopName, sizeof(shopName));
	AS_ReqRankBoardWins_Params.isScroll = isScroll;

	this->ProcessEvent(uFnAS_ReqRankBoardWins, &AS_ReqRankBoardWins_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuRanking_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateMOM
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateMOM(bool Trigger)
{
	static UFunction* uFnUpdateMOM = nullptr;

	if (!uFnUpdateMOM)
	{
		uFnUpdateMOM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateMOM");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateMOM_Params UpdateMOM_Params;
	memset(&UpdateMOM_Params, 0, sizeof(UpdateMOM_Params));
	UpdateMOM_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateMOM, &UpdateMOM_Params, nullptr);

	return UpdateMOM_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateQuest
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateQuest(bool Trigger)
{
	static UFunction* uFnUpdateQuest = nullptr;

	if (!uFnUpdateQuest)
	{
		uFnUpdateQuest = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateQuest");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateQuest_Params UpdateQuest_Params;
	memset(&UpdateQuest_Params, 0, sizeof(UpdateQuest_Params));
	UpdateQuest_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateQuest, &UpdateQuest_Params, nullptr);

	return UpdateQuest_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateStraightWins
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateStraightWins(bool Trigger)
{
	static UFunction* uFnUpdateStraightWins = nullptr;

	if (!uFnUpdateStraightWins)
	{
		uFnUpdateStraightWins = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateStraightWins");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateStraightWins_Params UpdateStraightWins_Params;
	memset(&UpdateStraightWins_Params, 0, sizeof(UpdateStraightWins_Params));
	UpdateStraightWins_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateStraightWins, &UpdateStraightWins_Params, nullptr);

	return UpdateStraightWins_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.RRIndividual_Sub
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Left                           (CPF_Parm)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Num                            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       leftOnly                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::RRIndividual_Sub(bool Left, int32_t Rank, const class FString& PlayerName, const class FString& Num, const class FString& shopName, bool leftOnly)
{
	static UFunction* uFnRRIndividual_Sub = nullptr;

	if (!uFnRRIndividual_Sub)
	{
		uFnRRIndividual_Sub = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.RRIndividual_Sub");
	}

	UREDGfxMoviePlayer_MenuRanking_execRRIndividual_Sub_Params RRIndividual_Sub_Params;
	memset(&RRIndividual_Sub_Params, 0, sizeof(RRIndividual_Sub_Params));
	RRIndividual_Sub_Params.Left = Left;
	memcpy_s(&RRIndividual_Sub_Params.Rank, sizeof(RRIndividual_Sub_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&RRIndividual_Sub_Params.PlayerName, sizeof(RRIndividual_Sub_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&RRIndividual_Sub_Params.Num, sizeof(RRIndividual_Sub_Params.Num), &Num, sizeof(Num));
	memcpy_s(&RRIndividual_Sub_Params.shopName, sizeof(RRIndividual_Sub_Params.shopName), &shopName, sizeof(shopName));
	RRIndividual_Sub_Params.leftOnly = leftOnly;

	this->ProcessEvent(uFnRRIndividual_Sub, &RRIndividual_Sub_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateRRIndividual
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateRRIndividual(bool Trigger)
{
	static UFunction* uFnUpdateRRIndividual = nullptr;

	if (!uFnUpdateRRIndividual)
	{
		uFnUpdateRRIndividual = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateRRIndividual");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateRRIndividual_Params UpdateRRIndividual_Params;
	memset(&UpdateRRIndividual_Params, 0, sizeof(UpdateRRIndividual_Params));
	UpdateRRIndividual_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateRRIndividual, &UpdateRRIndividual_Params, nullptr);

	return UpdateRRIndividual_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateRR
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateRR(bool Trigger)
{
	static UFunction* uFnUpdateRR = nullptr;

	if (!uFnUpdateRR)
	{
		uFnUpdateRR = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateRR");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateRR_Params UpdateRR_Params;
	memset(&UpdateRR_Params, 0, sizeof(UpdateRR_Params));
	UpdateRR_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateRR, &UpdateRR_Params, nullptr);

	return UpdateRR_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.WinNumIndividual_Sub
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Left                           (CPF_Parm)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Num                            (CPF_Parm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       leftOnly                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuRanking::WinNumIndividual_Sub(bool Left, int32_t Rank, const class FString& PlayerName, const class FString& Num, const class FString& shopName, bool leftOnly)
{
	static UFunction* uFnWinNumIndividual_Sub = nullptr;

	if (!uFnWinNumIndividual_Sub)
	{
		uFnWinNumIndividual_Sub = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.WinNumIndividual_Sub");
	}

	UREDGfxMoviePlayer_MenuRanking_execWinNumIndividual_Sub_Params WinNumIndividual_Sub_Params;
	memset(&WinNumIndividual_Sub_Params, 0, sizeof(WinNumIndividual_Sub_Params));
	WinNumIndividual_Sub_Params.Left = Left;
	memcpy_s(&WinNumIndividual_Sub_Params.Rank, sizeof(WinNumIndividual_Sub_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&WinNumIndividual_Sub_Params.PlayerName, sizeof(WinNumIndividual_Sub_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&WinNumIndividual_Sub_Params.Num, sizeof(WinNumIndividual_Sub_Params.Num), &Num, sizeof(Num));
	memcpy_s(&WinNumIndividual_Sub_Params.shopName, sizeof(WinNumIndividual_Sub_Params.shopName), &shopName, sizeof(shopName));
	WinNumIndividual_Sub_Params.leftOnly = leftOnly;

	this->ProcessEvent(uFnWinNumIndividual_Sub, &WinNumIndividual_Sub_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateWinNumIndividual
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateWinNumIndividual(bool Trigger)
{
	static UFunction* uFnUpdateWinNumIndividual = nullptr;

	if (!uFnUpdateWinNumIndividual)
	{
		uFnUpdateWinNumIndividual = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateWinNumIndividual");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateWinNumIndividual_Params UpdateWinNumIndividual_Params;
	memset(&UpdateWinNumIndividual_Params, 0, sizeof(UpdateWinNumIndividual_Params));
	UpdateWinNumIndividual_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateWinNumIndividual, &UpdateWinNumIndividual_Params, nullptr);

	return UpdateWinNumIndividual_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateWinNum
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateWinNum(bool Trigger)
{
	static UFunction* uFnUpdateWinNum = nullptr;

	if (!uFnUpdateWinNum)
	{
		uFnUpdateWinNum = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateWinNum");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateWinNum_Params UpdateWinNum_Params;
	memset(&UpdateWinNum_Params, 0, sizeof(UpdateWinNum_Params));
	UpdateWinNum_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateWinNum, &UpdateWinNum_Params, nullptr);

	return UpdateWinNum_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateDiagram
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateDiagram(bool Trigger)
{
	static UFunction* uFnUpdateDiagram = nullptr;

	if (!uFnUpdateDiagram)
	{
		uFnUpdateDiagram = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateDiagram");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateDiagram_Params UpdateDiagram_Params;
	memset(&UpdateDiagram_Params, 0, sizeof(UpdateDiagram_Params));
	UpdateDiagram_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateDiagram, &UpdateDiagram_Params, nullptr);

	return UpdateDiagram_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateUseRate
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateUseRate(bool Trigger)
{
	static UFunction* uFnUpdateUseRate = nullptr;

	if (!uFnUpdateUseRate)
	{
		uFnUpdateUseRate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateUseRate");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateUseRate_Params UpdateUseRate_Params;
	memset(&UpdateUseRate_Params, 0, sizeof(UpdateUseRate_Params));
	UpdateUseRate_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateUseRate, &UpdateUseRate_Params, nullptr);

	return UpdateUseRate_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateInit
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       Trigger                        (CPF_Parm)

bool UREDGfxMoviePlayer_MenuRanking::UpdateInit(bool Trigger)
{
	static UFunction* uFnUpdateInit = nullptr;

	if (!uFnUpdateInit)
	{
		uFnUpdateInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.UpdateInit");
	}

	UREDGfxMoviePlayer_MenuRanking_execUpdateInit_Params UpdateInit_Params;
	memset(&UpdateInit_Params, 0, sizeof(UpdateInit_Params));
	UpdateInit_Params.Trigger = Trigger;

	this->ProcessEvent(uFnUpdateInit, &UpdateInit_Params, nullptr);

	return UpdateInit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuRanking::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuRanking_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetStateList
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class TArray<uint8_t>          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class TArray<uint8_t> UREDGfxMoviePlayer_MenuRanking::GetStateList()
{
	static UFunction* uFnGetStateList = nullptr;

	if (!uFnGetStateList)
	{
		uFnGetStateList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetStateList");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetStateList_Params GetStateList_Params;
	memset(&GetStateList_Params, 0, sizeof(GetStateList_Params));

	this->ProcessEvent(uFnGetStateList, &GetStateList_Params, nullptr);

	return GetStateList_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.Debug_GetForceState
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36417])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_MenuRanking::Debug_GetForceState()
{
	static UFunction* uFnDebug_GetForceState = nullptr;

	if (!uFnDebug_GetForceState)
	{
		uFnDebug_GetForceState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.Debug_GetForceState");
	}

	UREDGfxMoviePlayer_MenuRanking_execDebug_GetForceState_Params Debug_GetForceState_Params;
	memset(&Debug_GetForceState_Params, 0, sizeof(Debug_GetForceState_Params));

	this->ProcessEvent(uFnDebug_GetForceState, &Debug_GetForceState_Params, nullptr);

	return Debug_GetForceState_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.SortRank
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39928])
// Parameter Info:
// class TArray<int32_t>          outIndexList                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class TArray<int32_t>          rankList                       (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuRanking::SortRank(class TArray<int32_t>& outIndexList, class TArray<int32_t>& rankList)
{
	static UFunction* uFnSortRank = nullptr;

	if (!uFnSortRank)
	{
		uFnSortRank = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.SortRank");
	}

	UREDGfxMoviePlayer_MenuRanking_execSortRank_Params SortRank_Params;
	memset(&SortRank_Params, 0, sizeof(SortRank_Params));
	memcpy_s(&SortRank_Params.outIndexList, sizeof(SortRank_Params.outIndexList), &outIndexList, sizeof(outIndexList));
	memcpy_s(&SortRank_Params.rankList, sizeof(SortRank_Params.rankList), &rankList, sizeof(rankList));

	this->ProcessEvent(uFnSortRank, &SortRank_Params, nullptr);

	memcpy_s(&outIndexList, sizeof(outIndexList), &SortRank_Params.outIndexList, sizeof(SortRank_Params.outIndexList));
	memcpy_s(&rankList, sizeof(rankList), &SortRank_Params.rankList, sizeof(SortRank_Params.rankList));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetRankingGroup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37149])
// Parameter Info:
// ERANKING_GROUP                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ERANKING_GROUP UREDGfxMoviePlayer_MenuRanking::GetRankingGroup()
{
	static UFunction* uFnGetRankingGroup = nullptr;

	if (!uFnGetRankingGroup)
	{
		uFnGetRankingGroup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetRankingGroup");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetRankingGroup_Params GetRankingGroup_Params;
	memset(&GetRankingGroup_Params, 0, sizeof(GetRankingGroup_Params));

	this->ProcessEvent(uFnGetRankingGroup, &GetRankingGroup_Params, nullptr);

	return static_cast<ERANKING_GROUP>(GetRankingGroup_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_QuestScore
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37046])
// Parameter Info:
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Score                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuRanking::GetData_QuestScore(int32_t Rank, class FString& PlayerName, class FString& Score, class FString& shopName)
{
	static UFunction* uFnGetData_QuestScore = nullptr;

	if (!uFnGetData_QuestScore)
	{
		uFnGetData_QuestScore = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_QuestScore");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_QuestScore_Params GetData_QuestScore_Params;
	memset(&GetData_QuestScore_Params, 0, sizeof(GetData_QuestScore_Params));
	memcpy_s(&GetData_QuestScore_Params.Rank, sizeof(GetData_QuestScore_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&GetData_QuestScore_Params.PlayerName, sizeof(GetData_QuestScore_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetData_QuestScore_Params.Score, sizeof(GetData_QuestScore_Params.Score), &Score, sizeof(Score));
	memcpy_s(&GetData_QuestScore_Params.shopName, sizeof(GetData_QuestScore_Params.shopName), &shopName, sizeof(shopName));

	this->ProcessEvent(uFnGetData_QuestScore, &GetData_QuestScore_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetData_QuestScore_Params.PlayerName, sizeof(GetData_QuestScore_Params.PlayerName));
	memcpy_s(&Score, sizeof(Score), &GetData_QuestScore_Params.Score, sizeof(GetData_QuestScore_Params.Score));
	memcpy_s(&shopName, sizeof(shopName), &GetData_QuestScore_Params.shopName, sizeof(GetData_QuestScore_Params.shopName));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_MOMScore
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37045])
// Parameter Info:
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Num                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  CharaID                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuRanking::GetData_MOMScore(int32_t Rank, class FString& PlayerName, class FString& Num, class FString& shopName, class FString& CharaID)
{
	static UFunction* uFnGetData_MOMScore = nullptr;

	if (!uFnGetData_MOMScore)
	{
		uFnGetData_MOMScore = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_MOMScore");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_MOMScore_Params GetData_MOMScore_Params;
	memset(&GetData_MOMScore_Params, 0, sizeof(GetData_MOMScore_Params));
	memcpy_s(&GetData_MOMScore_Params.Rank, sizeof(GetData_MOMScore_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&GetData_MOMScore_Params.PlayerName, sizeof(GetData_MOMScore_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetData_MOMScore_Params.Num, sizeof(GetData_MOMScore_Params.Num), &Num, sizeof(Num));
	memcpy_s(&GetData_MOMScore_Params.shopName, sizeof(GetData_MOMScore_Params.shopName), &shopName, sizeof(shopName));
	memcpy_s(&GetData_MOMScore_Params.CharaID, sizeof(GetData_MOMScore_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetData_MOMScore, &GetData_MOMScore_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetData_MOMScore_Params.PlayerName, sizeof(GetData_MOMScore_Params.PlayerName));
	memcpy_s(&Num, sizeof(Num), &GetData_MOMScore_Params.Num, sizeof(GetData_MOMScore_Params.Num));
	memcpy_s(&shopName, sizeof(shopName), &GetData_MOMScore_Params.shopName, sizeof(GetData_MOMScore_Params.shopName));
	memcpy_s(&CharaID, sizeof(CharaID), &GetData_MOMScore_Params.CharaID, sizeof(GetData_MOMScore_Params.CharaID));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_StraightWins
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37049])
// Parameter Info:
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Num                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuRanking::GetData_StraightWins(int32_t Rank, class FString& PlayerName, class FString& Num, class FString& shopName)
{
	static UFunction* uFnGetData_StraightWins = nullptr;

	if (!uFnGetData_StraightWins)
	{
		uFnGetData_StraightWins = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_StraightWins");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_StraightWins_Params GetData_StraightWins_Params;
	memset(&GetData_StraightWins_Params, 0, sizeof(GetData_StraightWins_Params));
	memcpy_s(&GetData_StraightWins_Params.Rank, sizeof(GetData_StraightWins_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&GetData_StraightWins_Params.PlayerName, sizeof(GetData_StraightWins_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetData_StraightWins_Params.Num, sizeof(GetData_StraightWins_Params.Num), &Num, sizeof(Num));
	memcpy_s(&GetData_StraightWins_Params.shopName, sizeof(GetData_StraightWins_Params.shopName), &shopName, sizeof(shopName));

	this->ProcessEvent(uFnGetData_StraightWins, &GetData_StraightWins_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetData_StraightWins_Params.PlayerName, sizeof(GetData_StraightWins_Params.PlayerName));
	memcpy_s(&Num, sizeof(Num), &GetData_StraightWins_Params.Num, sizeof(GetData_StraightWins_Params.Num));
	memcpy_s(&shopName, sizeof(shopName), &GetData_StraightWins_Params.shopName, sizeof(GetData_StraightWins_Params.shopName));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_RRChara
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37048])
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Num                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuRanking::GetData_RRChara(const class FString& CharaID, int32_t Rank, class FString& PlayerName, class FString& Num, class FString& shopName)
{
	static UFunction* uFnGetData_RRChara = nullptr;

	if (!uFnGetData_RRChara)
	{
		uFnGetData_RRChara = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_RRChara");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_RRChara_Params GetData_RRChara_Params;
	memset(&GetData_RRChara_Params, 0, sizeof(GetData_RRChara_Params));
	memcpy_s(&GetData_RRChara_Params.CharaID, sizeof(GetData_RRChara_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&GetData_RRChara_Params.Rank, sizeof(GetData_RRChara_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&GetData_RRChara_Params.PlayerName, sizeof(GetData_RRChara_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetData_RRChara_Params.Num, sizeof(GetData_RRChara_Params.Num), &Num, sizeof(Num));
	memcpy_s(&GetData_RRChara_Params.shopName, sizeof(GetData_RRChara_Params.shopName), &shopName, sizeof(shopName));

	this->ProcessEvent(uFnGetData_RRChara, &GetData_RRChara_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetData_RRChara_Params.PlayerName, sizeof(GetData_RRChara_Params.PlayerName));
	memcpy_s(&Num, sizeof(Num), &GetData_RRChara_Params.Num, sizeof(GetData_RRChara_Params.Num));
	memcpy_s(&shopName, sizeof(shopName), &GetData_RRChara_Params.shopName, sizeof(GetData_RRChara_Params.shopName));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_RRAll
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37047])
// Parameter Info:
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Num                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  CharaID                        (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuRanking::GetData_RRAll(int32_t Rank, class FString& PlayerName, class FString& Num, class FString& shopName, class FString& CharaID)
{
	static UFunction* uFnGetData_RRAll = nullptr;

	if (!uFnGetData_RRAll)
	{
		uFnGetData_RRAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_RRAll");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_RRAll_Params GetData_RRAll_Params;
	memset(&GetData_RRAll_Params, 0, sizeof(GetData_RRAll_Params));
	memcpy_s(&GetData_RRAll_Params.Rank, sizeof(GetData_RRAll_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&GetData_RRAll_Params.PlayerName, sizeof(GetData_RRAll_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetData_RRAll_Params.Num, sizeof(GetData_RRAll_Params.Num), &Num, sizeof(Num));
	memcpy_s(&GetData_RRAll_Params.shopName, sizeof(GetData_RRAll_Params.shopName), &shopName, sizeof(shopName));
	memcpy_s(&GetData_RRAll_Params.CharaID, sizeof(GetData_RRAll_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnGetData_RRAll, &GetData_RRAll_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetData_RRAll_Params.PlayerName, sizeof(GetData_RRAll_Params.PlayerName));
	memcpy_s(&Num, sizeof(Num), &GetData_RRAll_Params.Num, sizeof(GetData_RRAll_Params.Num));
	memcpy_s(&shopName, sizeof(shopName), &GetData_RRAll_Params.shopName, sizeof(GetData_RRAll_Params.shopName));
	memcpy_s(&CharaID, sizeof(CharaID), &GetData_RRAll_Params.CharaID, sizeof(GetData_RRAll_Params.CharaID));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_WinsChara
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37052])
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Num                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuRanking::GetData_WinsChara(const class FString& CharaID, int32_t Rank, class FString& PlayerName, class FString& Num, class FString& shopName)
{
	static UFunction* uFnGetData_WinsChara = nullptr;

	if (!uFnGetData_WinsChara)
	{
		uFnGetData_WinsChara = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_WinsChara");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_WinsChara_Params GetData_WinsChara_Params;
	memset(&GetData_WinsChara_Params, 0, sizeof(GetData_WinsChara_Params));
	memcpy_s(&GetData_WinsChara_Params.CharaID, sizeof(GetData_WinsChara_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&GetData_WinsChara_Params.Rank, sizeof(GetData_WinsChara_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&GetData_WinsChara_Params.PlayerName, sizeof(GetData_WinsChara_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetData_WinsChara_Params.Num, sizeof(GetData_WinsChara_Params.Num), &Num, sizeof(Num));
	memcpy_s(&GetData_WinsChara_Params.shopName, sizeof(GetData_WinsChara_Params.shopName), &shopName, sizeof(shopName));

	this->ProcessEvent(uFnGetData_WinsChara, &GetData_WinsChara_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetData_WinsChara_Params.PlayerName, sizeof(GetData_WinsChara_Params.PlayerName));
	memcpy_s(&Num, sizeof(Num), &GetData_WinsChara_Params.Num, sizeof(GetData_WinsChara_Params.Num));
	memcpy_s(&shopName, sizeof(shopName), &GetData_WinsChara_Params.shopName, sizeof(GetData_WinsChara_Params.shopName));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_WinsAll
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37051])
// Parameter Info:
// int32_t                        Rank                           (CPF_Parm)
// class FString                  PlayerName                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Num                            (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  shopName                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuRanking::GetData_WinsAll(int32_t Rank, class FString& PlayerName, class FString& Num, class FString& shopName)
{
	static UFunction* uFnGetData_WinsAll = nullptr;

	if (!uFnGetData_WinsAll)
	{
		uFnGetData_WinsAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_WinsAll");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_WinsAll_Params GetData_WinsAll_Params;
	memset(&GetData_WinsAll_Params, 0, sizeof(GetData_WinsAll_Params));
	memcpy_s(&GetData_WinsAll_Params.Rank, sizeof(GetData_WinsAll_Params.Rank), &Rank, sizeof(Rank));
	memcpy_s(&GetData_WinsAll_Params.PlayerName, sizeof(GetData_WinsAll_Params.PlayerName), &PlayerName, sizeof(PlayerName));
	memcpy_s(&GetData_WinsAll_Params.Num, sizeof(GetData_WinsAll_Params.Num), &Num, sizeof(Num));
	memcpy_s(&GetData_WinsAll_Params.shopName, sizeof(GetData_WinsAll_Params.shopName), &shopName, sizeof(shopName));

	this->ProcessEvent(uFnGetData_WinsAll, &GetData_WinsAll_Params, nullptr);

	memcpy_s(&PlayerName, sizeof(PlayerName), &GetData_WinsAll_Params.PlayerName, sizeof(GetData_WinsAll_Params.PlayerName));
	memcpy_s(&Num, sizeof(Num), &GetData_WinsAll_Params.Num, sizeof(GetData_WinsAll_Params.Num));
	memcpy_s(&shopName, sizeof(shopName), &GetData_WinsAll_Params.shopName, sizeof(GetData_WinsAll_Params.shopName));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_Diagram
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37044])
// Parameter Info:
// class FString                  CharaID1                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  CharaID2                       (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Rate                           (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuRanking::GetData_Diagram(const class FString& CharaID1, const class FString& CharaID2, int32_t& Rate)
{
	static UFunction* uFnGetData_Diagram = nullptr;

	if (!uFnGetData_Diagram)
	{
		uFnGetData_Diagram = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_Diagram");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_Diagram_Params GetData_Diagram_Params;
	memset(&GetData_Diagram_Params, 0, sizeof(GetData_Diagram_Params));
	memcpy_s(&GetData_Diagram_Params.CharaID1, sizeof(GetData_Diagram_Params.CharaID1), &CharaID1, sizeof(CharaID1));
	memcpy_s(&GetData_Diagram_Params.CharaID2, sizeof(GetData_Diagram_Params.CharaID2), &CharaID2, sizeof(CharaID2));
	memcpy_s(&GetData_Diagram_Params.Rate, sizeof(GetData_Diagram_Params.Rate), &Rate, sizeof(Rate));

	this->ProcessEvent(uFnGetData_Diagram, &GetData_Diagram_Params, nullptr);

	memcpy_s(&Rate, sizeof(Rate), &GetData_Diagram_Params.Rate, sizeof(GetData_Diagram_Params.Rate));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_UseCount
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37050])
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Count                          (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuRanking::GetData_UseCount(const class FString& CharaID, int32_t& Count)
{
	static UFunction* uFnGetData_UseCount = nullptr;

	if (!uFnGetData_UseCount)
	{
		uFnGetData_UseCount = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.GetData_UseCount");
	}

	UREDGfxMoviePlayer_MenuRanking_execGetData_UseCount_Params GetData_UseCount_Params;
	memset(&GetData_UseCount_Params, 0, sizeof(GetData_UseCount_Params));
	memcpy_s(&GetData_UseCount_Params.CharaID, sizeof(GetData_UseCount_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&GetData_UseCount_Params.Count, sizeof(GetData_UseCount_Params.Count), &Count, sizeof(Count));

	this->ProcessEvent(uFnGetData_UseCount, &GetData_UseCount_Params, nullptr);

	memcpy_s(&Count, sizeof(Count), &GetData_UseCount_Params.Count, sizeof(GetData_UseCount_Params.Count));
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.IsRankingAccessFinish
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37809])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuRanking::IsRankingAccessFinish()
{
	static UFunction* uFnIsRankingAccessFinish = nullptr;

	if (!uFnIsRankingAccessFinish)
	{
		uFnIsRankingAccessFinish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.IsRankingAccessFinish");
	}

	UREDGfxMoviePlayer_MenuRanking_execIsRankingAccessFinish_Params IsRankingAccessFinish_Params;
	memset(&IsRankingAccessFinish_Params, 0, sizeof(IsRankingAccessFinish_Params));

	this->ProcessEvent(uFnIsRankingAccessFinish, &IsRankingAccessFinish_Params, nullptr);

	return IsRankingAccessFinish_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.RequestRankingAccess
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39371])
// Parameter Info:

void UREDGfxMoviePlayer_MenuRanking::RequestRankingAccess()
{
	static UFunction* uFnRequestRankingAccess = nullptr;

	if (!uFnRequestRankingAccess)
	{
		uFnRequestRankingAccess = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.RequestRankingAccess");
	}

	UREDGfxMoviePlayer_MenuRanking_execRequestRankingAccess_Params RequestRankingAccess_Params;
	memset(&RequestRankingAccess_Params, 0, sizeof(RequestRankingAccess_Params));

	this->ProcessEvent(uFnRequestRankingAccess, &RequestRankingAccess_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuRanking.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UREDGfxMoviePlayer_MenuRanking::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuRanking.InitMenu");
	}

	UREDGfxMoviePlayer_MenuRanking_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.OnFinalize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::OnFinalize()
{
	static UFunction* uFnOnFinalize = nullptr;

	if (!uFnOnFinalize)
	{
		uFnOnFinalize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.OnFinalize");
	}

	UREDGfxMoviePlayer_MenuReplay_execOnFinalize_Params OnFinalize_Params;
	memset(&OnFinalize_Params, 0, sizeof(OnFinalize_Params));

	this->ProcessEvent(uFnOnFinalize, &OnFinalize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuReplay_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuReplay_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.funcPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::funcPlay(bool bTrigger)
{
	static UFunction* uFnfuncPlay = nullptr;

	if (!uFnfuncPlay)
	{
		uFnfuncPlay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.funcPlay");
	}

	UREDGfxMoviePlayer_MenuReplay_execfuncPlay_Params funcPlay_Params;
	memset(&funcPlay_Params, 0, sizeof(funcPlay_Params));
	funcPlay_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncPlay, &funcPlay_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.funcIdle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::funcIdle(bool bTrigger)
{
	static UFunction* uFnfuncIdle = nullptr;

	if (!uFnfuncIdle)
	{
		uFnfuncIdle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.funcIdle");
	}

	UREDGfxMoviePlayer_MenuReplay_execfuncIdle_Params funcIdle_Params;
	memset(&funcIdle_Params, 0, sizeof(funcIdle_Params));
	funcIdle_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnfuncIdle, &funcIdle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.UpdateFilterIcon
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::eventUpdateFilterIcon()
{
	static UFunction* uFnUpdateFilterIcon = nullptr;

	if (!uFnUpdateFilterIcon)
	{
		uFnUpdateFilterIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.UpdateFilterIcon");
	}

	UREDGfxMoviePlayer_MenuReplay_eventUpdateFilterIcon_Params UpdateFilterIcon_Params;
	memset(&UpdateFilterIcon_Params, 0, sizeof(UpdateFilterIcon_Params));

	this->ProcessEvent(uFnUpdateFilterIcon, &UpdateFilterIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.UpdateCategoryText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::UpdateCategoryText()
{
	static UFunction* uFnUpdateCategoryText = nullptr;

	if (!uFnUpdateCategoryText)
	{
		uFnUpdateCategoryText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.UpdateCategoryText");
	}

	UREDGfxMoviePlayer_MenuReplay_execUpdateCategoryText_Params UpdateCategoryText_Params;
	memset(&UpdateCategoryText_Params, 0, sizeof(UpdateCategoryText_Params));

	this->ProcessEvent(uFnUpdateCategoryText, &UpdateCategoryText_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.FactorDecision
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::FactorDecision()
{
	static UFunction* uFnFactorDecision = nullptr;

	if (!uFnFactorDecision)
	{
		uFnFactorDecision = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.FactorDecision");
	}

	UREDGfxMoviePlayer_MenuReplay_execFactorDecision_Params FactorDecision_Params;
	memset(&FactorDecision_Params, 0, sizeof(FactorDecision_Params));

	this->ProcessEvent(uFnFactorDecision, &FactorDecision_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.CategoryChenge
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Add                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::eventCategoryChenge(int32_t Add)
{
	static UFunction* uFnCategoryChenge = nullptr;

	if (!uFnCategoryChenge)
	{
		uFnCategoryChenge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.CategoryChenge");
	}

	UREDGfxMoviePlayer_MenuReplay_eventCategoryChenge_Params CategoryChenge_Params;
	memset(&CategoryChenge_Params, 0, sizeof(CategoryChenge_Params));
	memcpy_s(&CategoryChenge_Params.Add, sizeof(CategoryChenge_Params.Add), &Add, sizeof(Add));

	this->ProcessEvent(uFnCategoryChenge, &CategoryChenge_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.ReturnMainMenu
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::eventReturnMainMenu()
{
	static UFunction* uFnReturnMainMenu = nullptr;

	if (!uFnReturnMainMenu)
	{
		uFnReturnMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.ReturnMainMenu");
	}

	UREDGfxMoviePlayer_MenuReplay_eventReturnMainMenu_Params ReturnMainMenu_Params;
	memset(&ReturnMainMenu_Params, 0, sizeof(ReturnMainMenu_Params));

	this->ProcessEvent(uFnReturnMainMenu, &ReturnMainMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.OnClose");
	}

	UREDGfxMoviePlayer_MenuReplay_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuReplay_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.startReplayTheater
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::startReplayTheater()
{
	static UFunction* uFnstartReplayTheater = nullptr;

	if (!uFnstartReplayTheater)
	{
		uFnstartReplayTheater = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.startReplayTheater");
	}

	UREDGfxMoviePlayer_MenuReplay_execstartReplayTheater_Params startReplayTheater_Params;
	memset(&startReplayTheater_Params, 0, sizeof(startReplayTheater_Params));

	this->ProcessEvent(uFnstartReplayTheater, &startReplayTheater_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.setupStorageText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::setupStorageText()
{
	static UFunction* uFnsetupStorageText = nullptr;

	if (!uFnsetupStorageText)
	{
		uFnsetupStorageText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.setupStorageText");
	}

	UREDGfxMoviePlayer_MenuReplay_execsetupStorageText_Params setupStorageText_Params;
	memset(&setupStorageText_Params, 0, sizeof(setupStorageText_Params));

	this->ProcessEvent(uFnsetupStorageText, &setupStorageText_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.ChengeCreateSort
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36213])
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::ChengeCreateSort()
{
	static UFunction* uFnChengeCreateSort = nullptr;

	if (!uFnChengeCreateSort)
	{
		uFnChengeCreateSort = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.ChengeCreateSort");
	}

	UREDGfxMoviePlayer_MenuReplay_execChengeCreateSort_Params ChengeCreateSort_Params;
	memset(&ChengeCreateSort_Params, 0, sizeof(ChengeCreateSort_Params));

	this->ProcessEvent(uFnChengeCreateSort, &ChengeCreateSort_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.IsFilterChenge
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37665])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Filter                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuReplay::IsFilterChenge(int32_t Filter)
{
	static UFunction* uFnIsFilterChenge = nullptr;

	if (!uFnIsFilterChenge)
	{
		uFnIsFilterChenge = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.IsFilterChenge");
	}

	UREDGfxMoviePlayer_MenuReplay_execIsFilterChenge_Params IsFilterChenge_Params;
	memset(&IsFilterChenge_Params, 0, sizeof(IsFilterChenge_Params));
	memcpy_s(&IsFilterChenge_Params.Filter, sizeof(IsFilterChenge_Params.Filter), &Filter, sizeof(Filter));

	this->ProcessEvent(uFnIsFilterChenge, &IsFilterChenge_Params, nullptr);

	return IsFilterChenge_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.GetReplayListNum
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37155])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Category                       (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuReplay::GetReplayListNum(int32_t Category)
{
	static UFunction* uFnGetReplayListNum = nullptr;

	if (!uFnGetReplayListNum)
	{
		uFnGetReplayListNum = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.GetReplayListNum");
	}

	UREDGfxMoviePlayer_MenuReplay_execGetReplayListNum_Params GetReplayListNum_Params;
	memset(&GetReplayListNum_Params, 0, sizeof(GetReplayListNum_Params));
	memcpy_s(&GetReplayListNum_Params.Category, sizeof(GetReplayListNum_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnGetReplayListNum, &GetReplayListNum_Params, nullptr);

	return GetReplayListNum_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.IsOnlineStorageEnable
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37757])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuReplay::IsOnlineStorageEnable()
{
	static UFunction* uFnIsOnlineStorageEnable = nullptr;

	if (!uFnIsOnlineStorageEnable)
	{
		uFnIsOnlineStorageEnable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.IsOnlineStorageEnable");
	}

	UREDGfxMoviePlayer_MenuReplay_execIsOnlineStorageEnable_Params IsOnlineStorageEnable_Params;
	memset(&IsOnlineStorageEnable_Params, 0, sizeof(IsOnlineStorageEnable_Params));

	this->ProcessEvent(uFnIsOnlineStorageEnable, &IsOnlineStorageEnable_Params, nullptr);

	return IsOnlineStorageEnable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.IsLoadReplayList
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37706])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuReplay::IsLoadReplayList()
{
	static UFunction* uFnIsLoadReplayList = nullptr;

	if (!uFnIsLoadReplayList)
	{
		uFnIsLoadReplayList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.IsLoadReplayList");
	}

	UREDGfxMoviePlayer_MenuReplay_execIsLoadReplayList_Params IsLoadReplayList_Params;
	memset(&IsLoadReplayList_Params, 0, sizeof(IsLoadReplayList_Params));

	this->ProcessEvent(uFnIsLoadReplayList, &IsLoadReplayList_Params, nullptr);

	return IsLoadReplayList_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.SetResultVisible
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39803])
// Parameter Info:
// uint32_t                       flg                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::SetResultVisible(bool flg)
{
	static UFunction* uFnSetResultVisible = nullptr;

	if (!uFnSetResultVisible)
	{
		uFnSetResultVisible = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.SetResultVisible");
	}

	UREDGfxMoviePlayer_MenuReplay_execSetResultVisible_Params SetResultVisible_Params;
	memset(&SetResultVisible_Params, 0, sizeof(SetResultVisible_Params));
	SetResultVisible_Params.flg = flg;

	this->ProcessEvent(uFnSetResultVisible, &SetResultVisible_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.FilterReplayList
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36840])
// Parameter Info:
// int32_t                        Category                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::FilterReplayList(int32_t Category)
{
	static UFunction* uFnFilterReplayList = nullptr;

	if (!uFnFilterReplayList)
	{
		uFnFilterReplayList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.FilterReplayList");
	}

	UREDGfxMoviePlayer_MenuReplay_execFilterReplayList_Params FilterReplayList_Params;
	memset(&FilterReplayList_Params, 0, sizeof(FilterReplayList_Params));
	memcpy_s(&FilterReplayList_Params.Category, sizeof(FilterReplayList_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnFilterReplayList, &FilterReplayList_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.CheckCopyPopup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36191])
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::CheckCopyPopup()
{
	static UFunction* uFnCheckCopyPopup = nullptr;

	if (!uFnCheckCopyPopup)
	{
		uFnCheckCopyPopup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.CheckCopyPopup");
	}

	UREDGfxMoviePlayer_MenuReplay_execCheckCopyPopup_Params CheckCopyPopup_Params;
	memset(&CheckCopyPopup_Params, 0, sizeof(CheckCopyPopup_Params));

	this->ProcessEvent(uFnCheckCopyPopup, &CheckCopyPopup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.ReplayDataCopy
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39342])
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::ReplayDataCopy()
{
	static UFunction* uFnReplayDataCopy = nullptr;

	if (!uFnReplayDataCopy)
	{
		uFnReplayDataCopy = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.ReplayDataCopy");
	}

	UREDGfxMoviePlayer_MenuReplay_execReplayDataCopy_Params ReplayDataCopy_Params;
	memset(&ReplayDataCopy_Params, 0, sizeof(ReplayDataCopy_Params));

	this->ProcessEvent(uFnReplayDataCopy, &ReplayDataCopy_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.IsReplayDataPlayError
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37825])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuReplay::IsReplayDataPlayError()
{
	static UFunction* uFnIsReplayDataPlayError = nullptr;

	if (!uFnIsReplayDataPlayError)
	{
		uFnIsReplayDataPlayError = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.IsReplayDataPlayError");
	}

	UREDGfxMoviePlayer_MenuReplay_execIsReplayDataPlayError_Params IsReplayDataPlayError_Params;
	memset(&IsReplayDataPlayError_Params, 0, sizeof(IsReplayDataPlayError_Params));

	this->ProcessEvent(uFnIsReplayDataPlayError, &IsReplayDataPlayError_Params, nullptr);

	return IsReplayDataPlayError_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.ReplayDataPlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39343])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuReplay::ReplayDataPlay()
{
	static UFunction* uFnReplayDataPlay = nullptr;

	if (!uFnReplayDataPlay)
	{
		uFnReplayDataPlay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.ReplayDataPlay");
	}

	UREDGfxMoviePlayer_MenuReplay_execReplayDataPlay_Params ReplayDataPlay_Params;
	memset(&ReplayDataPlay_Params, 0, sizeof(ReplayDataPlay_Params));

	this->ProcessEvent(uFnReplayDataPlay, &ReplayDataPlay_Params, nullptr);

	return ReplayDataPlay_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.CheckSignOutPopup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36208])
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::CheckSignOutPopup()
{
	static UFunction* uFnCheckSignOutPopup = nullptr;

	if (!uFnCheckSignOutPopup)
	{
		uFnCheckSignOutPopup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.CheckSignOutPopup");
	}

	UREDGfxMoviePlayer_MenuReplay_execCheckSignOutPopup_Params CheckSignOutPopup_Params;
	memset(&CheckSignOutPopup_Params, 0, sizeof(CheckSignOutPopup_Params));

	this->ProcessEvent(uFnCheckSignOutPopup, &CheckSignOutPopup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.PopUpMenuInit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39072])
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::PopUpMenuInit(int32_t Type)
{
	static UFunction* uFnPopUpMenuInit = nullptr;

	if (!uFnPopUpMenuInit)
	{
		uFnPopUpMenuInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.PopUpMenuInit");
	}

	UREDGfxMoviePlayer_MenuReplay_execPopUpMenuInit_Params PopUpMenuInit_Params;
	memset(&PopUpMenuInit_Params, 0, sizeof(PopUpMenuInit_Params));
	memcpy_s(&PopUpMenuInit_Params.Type, sizeof(PopUpMenuInit_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnPopUpMenuInit, &PopUpMenuInit_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.execScrollBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36783])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::execScrollBar(int32_t State)
{
	static UFunction* uFnexecScrollBar = nullptr;

	if (!uFnexecScrollBar)
	{
		uFnexecScrollBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.execScrollBar");
	}

	UREDGfxMoviePlayer_MenuReplay_execexecScrollBar_Params execScrollBar_Params;
	memset(&execScrollBar_Params, 0, sizeof(execScrollBar_Params));
	memcpy_s(&execScrollBar_Params.State, sizeof(execScrollBar_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecScrollBar, &execScrollBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.execCtrlBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36775])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::execCtrlBar(int32_t State)
{
	static UFunction* uFnexecCtrlBar = nullptr;

	if (!uFnexecCtrlBar)
	{
		uFnexecCtrlBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.execCtrlBar");
	}

	UREDGfxMoviePlayer_MenuReplay_execexecCtrlBar_Params execCtrlBar_Params;
	memset(&execCtrlBar_Params, 0, sizeof(execCtrlBar_Params));
	memcpy_s(&execCtrlBar_Params.State, sizeof(execCtrlBar_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecCtrlBar, &execCtrlBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.execInfoBar
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36780])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)
// int32_t                        Category                       (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::execInfoBar(int32_t State, int32_t Category, int32_t Index)
{
	static UFunction* uFnexecInfoBar = nullptr;

	if (!uFnexecInfoBar)
	{
		uFnexecInfoBar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.execInfoBar");
	}

	UREDGfxMoviePlayer_MenuReplay_execexecInfoBar_Params execInfoBar_Params;
	memset(&execInfoBar_Params, 0, sizeof(execInfoBar_Params));
	memcpy_s(&execInfoBar_Params.State, sizeof(execInfoBar_Params.State), &State, sizeof(State));
	memcpy_s(&execInfoBar_Params.Category, sizeof(execInfoBar_Params.Category), &Category, sizeof(Category));
	memcpy_s(&execInfoBar_Params.Index, sizeof(execInfoBar_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnexecInfoBar, &execInfoBar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.execReplayList
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36782])
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::execReplayList()
{
	static UFunction* uFnexecReplayList = nullptr;

	if (!uFnexecReplayList)
	{
		uFnexecReplayList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.execReplayList");
	}

	UREDGfxMoviePlayer_MenuReplay_execexecReplayList_Params execReplayList_Params;
	memset(&execReplayList_Params, 0, sizeof(execReplayList_Params));

	this->ProcessEvent(uFnexecReplayList, &execReplayList_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.execFilterText
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36779])
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::execFilterText()
{
	static UFunction* uFnexecFilterText = nullptr;

	if (!uFnexecFilterText)
	{
		uFnexecFilterText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.execFilterText");
	}

	UREDGfxMoviePlayer_MenuReplay_execexecFilterText_Params execFilterText_Params;
	memset(&execFilterText_Params, 0, sizeof(execFilterText_Params));

	this->ProcessEvent(uFnexecFilterText, &execFilterText_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.execDrawNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36776])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::execDrawNative(int32_t State)
{
	static UFunction* uFnexecDrawNative = nullptr;

	if (!uFnexecDrawNative)
	{
		uFnexecDrawNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.execDrawNative");
	}

	UREDGfxMoviePlayer_MenuReplay_execexecDrawNative_Params execDrawNative_Params;
	memset(&execDrawNative_Params, 0, sizeof(execDrawNative_Params));
	memcpy_s(&execDrawNative_Params.State, sizeof(execDrawNative_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecDrawNative, &execDrawNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.execUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36784])
// Parameter Info:
// int32_t                        State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuReplay::execUpdateNative(int32_t State)
{
	static UFunction* uFnexecUpdateNative = nullptr;

	if (!uFnexecUpdateNative)
	{
		uFnexecUpdateNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.execUpdateNative");
	}

	UREDGfxMoviePlayer_MenuReplay_execexecUpdateNative_Params execUpdateNative_Params;
	memset(&execUpdateNative_Params, 0, sizeof(execUpdateNative_Params));
	memcpy_s(&execUpdateNative_Params.State, sizeof(execUpdateNative_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnexecUpdateNative, &execUpdateNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.FinalizeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36842])
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::FinalizeNative()
{
	static UFunction* uFnFinalizeNative = nullptr;

	if (!uFnFinalizeNative)
	{
		uFnFinalizeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.FinalizeNative");
	}

	UREDGfxMoviePlayer_MenuReplay_execFinalizeNative_Params FinalizeNative_Params;
	memset(&FinalizeNative_Params, 0, sizeof(FinalizeNative_Params));

	this->ProcessEvent(uFnFinalizeNative, &FinalizeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuReplay.InitializeNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37527])
// Parameter Info:

void UREDGfxMoviePlayer_MenuReplay::InitializeNative()
{
	static UFunction* uFnInitializeNative = nullptr;

	if (!uFnInitializeNative)
	{
		uFnInitializeNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuReplay.InitializeNative");
	}

	UREDGfxMoviePlayer_MenuReplay_execInitializeNative_Params InitializeNative_Params;
	memset(&InitializeNative_Params, 0, sizeof(InitializeNative_Params));

	this->ProcessEvent(uFnInitializeNative, &InitializeNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.IsEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuStaffRoll::IsEnd()
{
	static UFunction* uFnIsEnd = nullptr;

	if (!uFnIsEnd)
	{
		uFnIsEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.IsEnd");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execIsEnd_Params IsEnd_Params;
	memset(&IsEnd_Params, 0, sizeof(IsEnd_Params));

	this->ProcessEvent(uFnIsEnd, &IsEnd_Params, nullptr);

	return IsEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffI
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  leftTextJ                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  leftTextE                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightTextJ                     (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightTextE                     (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffI(int32_t PosX, int32_t PosY, const class FString& leftTextJ, const class FString& leftTextE, const class FString& rightTextJ, const class FString& rightTextE, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffI = nullptr;

	if (!uFnReqStaffI)
	{
		uFnReqStaffI = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffI");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffI_Params ReqStaffI_Params;
	memset(&ReqStaffI_Params, 0, sizeof(ReqStaffI_Params));
	memcpy_s(&ReqStaffI_Params.PosX, sizeof(ReqStaffI_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffI_Params.PosY, sizeof(ReqStaffI_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffI_Params.leftTextJ, sizeof(ReqStaffI_Params.leftTextJ), &leftTextJ, sizeof(leftTextJ));
	memcpy_s(&ReqStaffI_Params.leftTextE, sizeof(ReqStaffI_Params.leftTextE), &leftTextE, sizeof(leftTextE));
	memcpy_s(&ReqStaffI_Params.rightTextJ, sizeof(ReqStaffI_Params.rightTextJ), &rightTextJ, sizeof(rightTextJ));
	memcpy_s(&ReqStaffI_Params.rightTextE, sizeof(ReqStaffI_Params.rightTextE), &rightTextE, sizeof(rightTextE));
	memcpy_s(&ReqStaffI_Params.Speed, sizeof(ReqStaffI_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffI_Params.skipFrame, sizeof(ReqStaffI_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffI, &ReqStaffI_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffH
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  leftText                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightText                      (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffH(int32_t PosX, int32_t PosY, const class FString& leftText, const class FString& rightText, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffH = nullptr;

	if (!uFnReqStaffH)
	{
		uFnReqStaffH = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffH");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffH_Params ReqStaffH_Params;
	memset(&ReqStaffH_Params, 0, sizeof(ReqStaffH_Params));
	memcpy_s(&ReqStaffH_Params.PosX, sizeof(ReqStaffH_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffH_Params.PosY, sizeof(ReqStaffH_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffH_Params.leftText, sizeof(ReqStaffH_Params.leftText), &leftText, sizeof(leftText));
	memcpy_s(&ReqStaffH_Params.rightText, sizeof(ReqStaffH_Params.rightText), &rightText, sizeof(rightText));
	memcpy_s(&ReqStaffH_Params.Speed, sizeof(ReqStaffH_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffH_Params.skipFrame, sizeof(ReqStaffH_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffH, &ReqStaffH_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffG
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  titleTextJ                     (CPF_Parm | CPF_NeedCtorLink)
// class FString                  titleTextE                     (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffG(int32_t PosX, int32_t PosY, const class FString& titleTextJ, const class FString& titleTextE, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffG = nullptr;

	if (!uFnReqStaffG)
	{
		uFnReqStaffG = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffG");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffG_Params ReqStaffG_Params;
	memset(&ReqStaffG_Params, 0, sizeof(ReqStaffG_Params));
	memcpy_s(&ReqStaffG_Params.PosX, sizeof(ReqStaffG_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffG_Params.PosY, sizeof(ReqStaffG_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffG_Params.titleTextJ, sizeof(ReqStaffG_Params.titleTextJ), &titleTextJ, sizeof(titleTextJ));
	memcpy_s(&ReqStaffG_Params.titleTextE, sizeof(ReqStaffG_Params.titleTextE), &titleTextE, sizeof(titleTextE));
	memcpy_s(&ReqStaffG_Params.Speed, sizeof(ReqStaffG_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffG_Params.skipFrame, sizeof(ReqStaffG_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffG, &ReqStaffG_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffF
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  leftTextJ                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  leftTextE                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightTextJ                     (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightTextE                     (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffF(int32_t PosX, int32_t PosY, const class FString& leftTextJ, const class FString& leftTextE, const class FString& rightTextJ, const class FString& rightTextE, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffF = nullptr;

	if (!uFnReqStaffF)
	{
		uFnReqStaffF = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffF");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffF_Params ReqStaffF_Params;
	memset(&ReqStaffF_Params, 0, sizeof(ReqStaffF_Params));
	memcpy_s(&ReqStaffF_Params.PosX, sizeof(ReqStaffF_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffF_Params.PosY, sizeof(ReqStaffF_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffF_Params.leftTextJ, sizeof(ReqStaffF_Params.leftTextJ), &leftTextJ, sizeof(leftTextJ));
	memcpy_s(&ReqStaffF_Params.leftTextE, sizeof(ReqStaffF_Params.leftTextE), &leftTextE, sizeof(leftTextE));
	memcpy_s(&ReqStaffF_Params.rightTextJ, sizeof(ReqStaffF_Params.rightTextJ), &rightTextJ, sizeof(rightTextJ));
	memcpy_s(&ReqStaffF_Params.rightTextE, sizeof(ReqStaffF_Params.rightTextE), &rightTextE, sizeof(rightTextE));
	memcpy_s(&ReqStaffF_Params.Speed, sizeof(ReqStaffF_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffF_Params.skipFrame, sizeof(ReqStaffF_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffF, &ReqStaffF_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffE
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  logoText                       (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffE(int32_t PosX, int32_t PosY, const class FString& logoText, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffE = nullptr;

	if (!uFnReqStaffE)
	{
		uFnReqStaffE = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffE");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffE_Params ReqStaffE_Params;
	memset(&ReqStaffE_Params, 0, sizeof(ReqStaffE_Params));
	memcpy_s(&ReqStaffE_Params.PosX, sizeof(ReqStaffE_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffE_Params.PosY, sizeof(ReqStaffE_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffE_Params.logoText, sizeof(ReqStaffE_Params.logoText), &logoText, sizeof(logoText));
	memcpy_s(&ReqStaffE_Params.Speed, sizeof(ReqStaffE_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffE_Params.skipFrame, sizeof(ReqStaffE_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffE, &ReqStaffE_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffD
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  TitleText                      (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffD(int32_t PosX, int32_t PosY, const class FString& TitleText, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffD = nullptr;

	if (!uFnReqStaffD)
	{
		uFnReqStaffD = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffD");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffD_Params ReqStaffD_Params;
	memset(&ReqStaffD_Params, 0, sizeof(ReqStaffD_Params));
	memcpy_s(&ReqStaffD_Params.PosX, sizeof(ReqStaffD_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffD_Params.PosY, sizeof(ReqStaffD_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffD_Params.TitleText, sizeof(ReqStaffD_Params.TitleText), &TitleText, sizeof(TitleText));
	memcpy_s(&ReqStaffD_Params.Speed, sizeof(ReqStaffD_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffD_Params.skipFrame, sizeof(ReqStaffD_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffD, &ReqStaffD_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffC
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  TitleText                      (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffC(int32_t PosX, int32_t PosY, const class FString& TitleText, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffC = nullptr;

	if (!uFnReqStaffC)
	{
		uFnReqStaffC = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffC");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffC_Params ReqStaffC_Params;
	memset(&ReqStaffC_Params, 0, sizeof(ReqStaffC_Params));
	memcpy_s(&ReqStaffC_Params.PosX, sizeof(ReqStaffC_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffC_Params.PosY, sizeof(ReqStaffC_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffC_Params.TitleText, sizeof(ReqStaffC_Params.TitleText), &TitleText, sizeof(TitleText));
	memcpy_s(&ReqStaffC_Params.Speed, sizeof(ReqStaffC_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffC_Params.skipFrame, sizeof(ReqStaffC_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffC, &ReqStaffC_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffB
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  leftText                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightTextE                     (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffB(int32_t PosX, int32_t PosY, const class FString& leftText, const class FString& rightTextE, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffB = nullptr;

	if (!uFnReqStaffB)
	{
		uFnReqStaffB = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffB");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffB_Params ReqStaffB_Params;
	memset(&ReqStaffB_Params, 0, sizeof(ReqStaffB_Params));
	memcpy_s(&ReqStaffB_Params.PosX, sizeof(ReqStaffB_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffB_Params.PosY, sizeof(ReqStaffB_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffB_Params.leftText, sizeof(ReqStaffB_Params.leftText), &leftText, sizeof(leftText));
	memcpy_s(&ReqStaffB_Params.rightTextE, sizeof(ReqStaffB_Params.rightTextE), &rightTextE, sizeof(rightTextE));
	memcpy_s(&ReqStaffB_Params.Speed, sizeof(ReqStaffB_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffB_Params.skipFrame, sizeof(ReqStaffB_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffB, &ReqStaffB_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffA
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  leftText                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightTextJ                     (CPF_Parm | CPF_NeedCtorLink)
// class FString                  rightTextE                     (CPF_Parm | CPF_NeedCtorLink)
// float                          Speed                          (CPF_Parm)
// int32_t                        skipFrame                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::ReqStaffA(int32_t PosX, int32_t PosY, const class FString& leftText, const class FString& rightTextJ, const class FString& rightTextE, float Speed, int32_t skipFrame)
{
	static UFunction* uFnReqStaffA = nullptr;

	if (!uFnReqStaffA)
	{
		uFnReqStaffA = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqStaffA");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqStaffA_Params ReqStaffA_Params;
	memset(&ReqStaffA_Params, 0, sizeof(ReqStaffA_Params));
	memcpy_s(&ReqStaffA_Params.PosX, sizeof(ReqStaffA_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&ReqStaffA_Params.PosY, sizeof(ReqStaffA_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&ReqStaffA_Params.leftText, sizeof(ReqStaffA_Params.leftText), &leftText, sizeof(leftText));
	memcpy_s(&ReqStaffA_Params.rightTextJ, sizeof(ReqStaffA_Params.rightTextJ), &rightTextJ, sizeof(rightTextJ));
	memcpy_s(&ReqStaffA_Params.rightTextE, sizeof(ReqStaffA_Params.rightTextE), &rightTextE, sizeof(rightTextE));
	memcpy_s(&ReqStaffA_Params.Speed, sizeof(ReqStaffA_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&ReqStaffA_Params.skipFrame, sizeof(ReqStaffA_Params.skipFrame), &skipFrame, sizeof(skipFrame));

	this->ProcessEvent(uFnReqStaffA, &ReqStaffA_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateEnd
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::UpdateEnd(bool bTrigger)
{
	static UFunction* uFnUpdateEnd = nullptr;

	if (!uFnUpdateEnd)
	{
		uFnUpdateEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateEnd");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execUpdateEnd_Params UpdateEnd_Params;
	memset(&UpdateEnd_Params, 0, sizeof(UpdateEnd_Params));
	UpdateEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEnd, &UpdateEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateToBeContinue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::UpdateToBeContinue(bool bTrigger)
{
	static UFunction* uFnUpdateToBeContinue = nullptr;

	if (!uFnUpdateToBeContinue)
	{
		uFnUpdateToBeContinue = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateToBeContinue");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execUpdateToBeContinue_Params UpdateToBeContinue_Params;
	memset(&UpdateToBeContinue_Params, 0, sizeof(UpdateToBeContinue_Params));
	UpdateToBeContinue_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateToBeContinue, &UpdateToBeContinue_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateEndWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::UpdateEndWait(bool bTrigger)
{
	static UFunction* uFnUpdateEndWait = nullptr;

	if (!uFnUpdateEndWait)
	{
		uFnUpdateEndWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateEndWait");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execUpdateEndWait_Params UpdateEndWait_Params;
	memset(&UpdateEndWait_Params, 0, sizeof(UpdateEndWait_Params));
	UpdateEndWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEndWait, &UpdateEndWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateStaffRoll
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::UpdateStaffRoll(bool bTrigger)
{
	static UFunction* uFnUpdateStaffRoll = nullptr;

	if (!uFnUpdateStaffRoll)
	{
		uFnUpdateStaffRoll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateStaffRoll");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execUpdateStaffRoll_Params UpdateStaffRoll_Params;
	memset(&UpdateStaffRoll_Params, 0, sizeof(UpdateStaffRoll_Params));
	UpdateStaffRoll_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateStaffRoll, &UpdateStaffRoll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateResult
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::UpdateResult(bool bTrigger)
{
	static UFunction* uFnUpdateResult = nullptr;

	if (!uFnUpdateResult)
	{
		uFnUpdateResult = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateResult");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execUpdateResult_Params UpdateResult_Params;
	memset(&UpdateResult_Params, 0, sizeof(UpdateResult_Params));
	UpdateResult_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateResult, &UpdateResult_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateResultWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::UpdateResultWait(bool bTrigger)
{
	static UFunction* uFnUpdateResultWait = nullptr;

	if (!uFnUpdateResultWait)
	{
		uFnUpdateResultWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateResultWait");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execUpdateResultWait_Params UpdateResultWait_Params;
	memset(&UpdateResultWait_Params, 0, sizeof(UpdateResultWait_Params));
	UpdateResultWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateResultWait, &UpdateResultWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::UpdateWait(bool bTrigger)
{
	static UFunction* uFnUpdateWait = nullptr;

	if (!uFnUpdateWait)
	{
		uFnUpdateWait = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateWait");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execUpdateWait_Params UpdateWait_Params;
	memset(&UpdateWait_Params, 0, sizeof(UpdateWait_Params));
	UpdateWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateWait, &UpdateWait_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStaffRoll::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqResult
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStaffRoll::ReqResult()
{
	static UFunction* uFnReqResult = nullptr;

	if (!uFnReqResult)
	{
		uFnReqResult = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.ReqResult");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execReqResult_Params ReqResult_Params;
	memset(&ReqResult_Params, 0, sizeof(ReqResult_Params));

	this->ProcessEvent(uFnReqResult, &ReqResult_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.Skip
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bStafroll                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStaffRoll::Skip(bool bStafroll)
{
	static UFunction* uFnSkip = nullptr;

	if (!uFnSkip)
	{
		uFnSkip = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.Skip");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execSkip_Params Skip_Params;
	memset(&Skip_Params, 0, sizeof(Skip_Params));
	Skip_Params.bStafroll = bStafroll;

	this->ProcessEvent(uFnSkip, &Skip_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.CheckSkipInput
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuStaffRoll::CheckSkipInput()
{
	static UFunction* uFnCheckSkipInput = nullptr;

	if (!uFnCheckSkipInput)
	{
		uFnCheckSkipInput = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.CheckSkipInput");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execCheckSkipInput_Params CheckSkipInput_Params;
	memset(&CheckSkipInput_Params, 0, sizeof(CheckSkipInput_Params));

	this->ProcessEvent(uFnCheckSkipInput, &CheckSkipInput_Params, nullptr);

	return CheckSkipInput_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.IsSkipable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuStaffRoll::IsSkipable()
{
	static UFunction* uFnIsSkipable = nullptr;

	if (!uFnIsSkipable)
	{
		uFnIsSkipable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.IsSkipable");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execIsSkipable_Params IsSkipable_Params;
	memset(&IsSkipable_Params, 0, sizeof(IsSkipable_Params));

	this->ProcessEvent(uFnIsSkipable, &IsSkipable_Params, nullptr);

	return IsSkipable_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateToBeContinueNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40873])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        stFrame                        (CPF_Parm)
// int32_t                        cntFrame                       (CPF_Parm)
// int32_t                        endFrame                       (CPF_Parm)
// int32_t                        yoinFrame                      (CPF_Parm)
// int32_t                        PosX                           (CPF_Parm)
// int32_t                        PosY                           (CPF_Parm)
// class FString                  Str                            (CPF_Parm | CPF_NeedCtorLink)
// float                          Scale                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuStaffRoll::UpdateToBeContinueNative(int32_t stFrame, int32_t cntFrame, int32_t endFrame, int32_t yoinFrame, int32_t PosX, int32_t PosY, const class FString& Str, float Scale)
{
	static UFunction* uFnUpdateToBeContinueNative = nullptr;

	if (!uFnUpdateToBeContinueNative)
	{
		uFnUpdateToBeContinueNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.UpdateToBeContinueNative");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execUpdateToBeContinueNative_Params UpdateToBeContinueNative_Params;
	memset(&UpdateToBeContinueNative_Params, 0, sizeof(UpdateToBeContinueNative_Params));
	memcpy_s(&UpdateToBeContinueNative_Params.stFrame, sizeof(UpdateToBeContinueNative_Params.stFrame), &stFrame, sizeof(stFrame));
	memcpy_s(&UpdateToBeContinueNative_Params.cntFrame, sizeof(UpdateToBeContinueNative_Params.cntFrame), &cntFrame, sizeof(cntFrame));
	memcpy_s(&UpdateToBeContinueNative_Params.endFrame, sizeof(UpdateToBeContinueNative_Params.endFrame), &endFrame, sizeof(endFrame));
	memcpy_s(&UpdateToBeContinueNative_Params.yoinFrame, sizeof(UpdateToBeContinueNative_Params.yoinFrame), &yoinFrame, sizeof(yoinFrame));
	memcpy_s(&UpdateToBeContinueNative_Params.PosX, sizeof(UpdateToBeContinueNative_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&UpdateToBeContinueNative_Params.PosY, sizeof(UpdateToBeContinueNative_Params.PosY), &PosY, sizeof(PosY));
	memcpy_s(&UpdateToBeContinueNative_Params.Str, sizeof(UpdateToBeContinueNative_Params.Str), &Str, sizeof(Str));
	memcpy_s(&UpdateToBeContinueNative_Params.Scale, sizeof(UpdateToBeContinueNative_Params.Scale), &Scale, sizeof(Scale));

	this->ProcessEvent(uFnUpdateToBeContinueNative, &UpdateToBeContinueNative_Params, nullptr);

	return UpdateToBeContinueNative_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.DelayGarbageCollection
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36525])
// Parameter Info:

void UREDGfxMoviePlayer_MenuStaffRoll::DelayGarbageCollection()
{
	static UFunction* uFnDelayGarbageCollection = nullptr;

	if (!uFnDelayGarbageCollection)
	{
		uFnDelayGarbageCollection = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.DelayGarbageCollection");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execDelayGarbageCollection_Params DelayGarbageCollection_Params;
	memset(&DelayGarbageCollection_Params, 0, sizeof(DelayGarbageCollection_Params));

	this->ProcessEvent(uFnDelayGarbageCollection, &DelayGarbageCollection_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.GetRecordAll
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37151])
// Parameter Info:
// class FString                  BadgeNum                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Score                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// int32_t                        BadgeNewRecord                 (CPF_Parm | CPF_OutParm)
// int32_t                        ScoreNewRecord                 (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuStaffRoll::GetRecordAll(class FString& BadgeNum, class FString& Score, int32_t& BadgeNewRecord, int32_t& ScoreNewRecord)
{
	static UFunction* uFnGetRecordAll = nullptr;

	if (!uFnGetRecordAll)
	{
		uFnGetRecordAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.GetRecordAll");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execGetRecordAll_Params GetRecordAll_Params;
	memset(&GetRecordAll_Params, 0, sizeof(GetRecordAll_Params));
	memcpy_s(&GetRecordAll_Params.BadgeNum, sizeof(GetRecordAll_Params.BadgeNum), &BadgeNum, sizeof(BadgeNum));
	memcpy_s(&GetRecordAll_Params.Score, sizeof(GetRecordAll_Params.Score), &Score, sizeof(Score));
	memcpy_s(&GetRecordAll_Params.BadgeNewRecord, sizeof(GetRecordAll_Params.BadgeNewRecord), &BadgeNewRecord, sizeof(BadgeNewRecord));
	memcpy_s(&GetRecordAll_Params.ScoreNewRecord, sizeof(GetRecordAll_Params.ScoreNewRecord), &ScoreNewRecord, sizeof(ScoreNewRecord));

	this->ProcessEvent(uFnGetRecordAll, &GetRecordAll_Params, nullptr);

	memcpy_s(&BadgeNum, sizeof(BadgeNum), &GetRecordAll_Params.BadgeNum, sizeof(GetRecordAll_Params.BadgeNum));
	memcpy_s(&Score, sizeof(Score), &GetRecordAll_Params.Score, sizeof(GetRecordAll_Params.Score));
	memcpy_s(&BadgeNewRecord, sizeof(BadgeNewRecord), &GetRecordAll_Params.BadgeNewRecord, sizeof(GetRecordAll_Params.BadgeNewRecord));
	memcpy_s(&ScoreNewRecord, sizeof(ScoreNewRecord), &GetRecordAll_Params.ScoreNewRecord, sizeof(GetRecordAll_Params.ScoreNewRecord));
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.GetStageRecord
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37176])
// Parameter Info:
// int32_t                        stage                          (CPF_Parm)
// class FString                  BadgeNum                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// class FString                  Score                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuStaffRoll::GetStageRecord(int32_t stage, class FString& BadgeNum, class FString& Score)
{
	static UFunction* uFnGetStageRecord = nullptr;

	if (!uFnGetStageRecord)
	{
		uFnGetStageRecord = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll.GetStageRecord");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_execGetStageRecord_Params GetStageRecord_Params;
	memset(&GetStageRecord_Params, 0, sizeof(GetStageRecord_Params));
	memcpy_s(&GetStageRecord_Params.stage, sizeof(GetStageRecord_Params.stage), &stage, sizeof(stage));
	memcpy_s(&GetStageRecord_Params.BadgeNum, sizeof(GetStageRecord_Params.BadgeNum), &BadgeNum, sizeof(BadgeNum));
	memcpy_s(&GetStageRecord_Params.Score, sizeof(GetStageRecord_Params.Score), &Score, sizeof(Score));

	this->ProcessEvent(uFnGetStageRecord, &GetStageRecord_Params, nullptr);

	memcpy_s(&BadgeNum, sizeof(BadgeNum), &GetStageRecord_Params.BadgeNum, sizeof(GetStageRecord_Params.BadgeNum));
	memcpy_s(&Score, sizeof(Score), &GetStageRecord_Params.Score, sizeof(GetStageRecord_Params.Score));
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll25.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStaffRoll25::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll25.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuStaffRoll25_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStory::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuStory_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStory::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuStory_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStory::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuStory_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.SetItemFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ItemIndex                      (CPF_Parm)

void UREDGfxMoviePlayer_MenuStory::SetItemFocus(int32_t ItemIndex)
{
	static UFunction* uFnSetItemFocus = nullptr;

	if (!uFnSetItemFocus)
	{
		uFnSetItemFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.SetItemFocus");
	}

	UREDGfxMoviePlayer_MenuStory_execSetItemFocus_Params SetItemFocus_Params;
	memset(&SetItemFocus_Params, 0, sizeof(SetItemFocus_Params));
	memcpy_s(&SetItemFocus_Params.ItemIndex, sizeof(SetItemFocus_Params.ItemIndex), &ItemIndex, sizeof(ItemIndex));

	this->ProcessEvent(uFnSetItemFocus, &SetItemFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.MenuStart
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStory::eventMenuStart()
{
	static UFunction* uFnMenuStart = nullptr;

	if (!uFnMenuStart)
	{
		uFnMenuStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.MenuStart");
	}

	UREDGfxMoviePlayer_MenuStory_eventMenuStart_Params MenuStart_Params;
	memset(&MenuStart_Params, 0, sizeof(MenuStart_Params));

	this->ProcessEvent(uFnMenuStart, &MenuStart_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.PlayBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStory::eventPlayBGM()
{
	static UFunction* uFnPlayBGM = nullptr;

	if (!uFnPlayBGM)
	{
		uFnPlayBGM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.PlayBGM");
	}

	UREDGfxMoviePlayer_MenuStory_eventPlayBGM_Params PlayBGM_Params;
	memset(&PlayBGM_Params, 0, sizeof(PlayBGM_Params));

	this->ProcessEvent(uFnPlayBGM, &PlayBGM_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.IsStartAnimEnd
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuStory::eventIsStartAnimEnd()
{
	static UFunction* uFnIsStartAnimEnd = nullptr;

	if (!uFnIsStartAnimEnd)
	{
		uFnIsStartAnimEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.IsStartAnimEnd");
	}

	UREDGfxMoviePlayer_MenuStory_eventIsStartAnimEnd_Params IsStartAnimEnd_Params;
	memset(&IsStartAnimEnd_Params, 0, sizeof(IsStartAnimEnd_Params));

	this->ProcessEvent(uFnIsStartAnimEnd, &IsStartAnimEnd_Params, nullptr);

	return IsStartAnimEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.GetReadRatioString
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37150])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDGfxMoviePlayer_MenuStory::GetReadRatioString()
{
	static UFunction* uFnGetReadRatioString = nullptr;

	if (!uFnGetReadRatioString)
	{
		uFnGetReadRatioString = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.GetReadRatioString");
	}

	UREDGfxMoviePlayer_MenuStory_execGetReadRatioString_Params GetReadRatioString_Params;
	memset(&GetReadRatioString_Params, 0, sizeof(GetReadRatioString_Params));

	this->ProcessEvent(uFnGetReadRatioString, &GetReadRatioString_Params, nullptr);

	return GetReadRatioString_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.UpdateDrawMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40651])
// Parameter Info:

void UREDGfxMoviePlayer_MenuStory::UpdateDrawMenu()
{
	static UFunction* uFnUpdateDrawMenu = nullptr;

	if (!uFnUpdateDrawMenu)
	{
		uFnUpdateDrawMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.UpdateDrawMenu");
	}

	UREDGfxMoviePlayer_MenuStory_execUpdateDrawMenu_Params UpdateDrawMenu_Params;
	memset(&UpdateDrawMenu_Params, 0, sizeof(UpdateDrawMenu_Params));

	this->ProcessEvent(uFnUpdateDrawMenu, &UpdateDrawMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.UpdateMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40782])
// Parameter Info:

void UREDGfxMoviePlayer_MenuStory::UpdateMenu()
{
	static UFunction* uFnUpdateMenu = nullptr;

	if (!uFnUpdateMenu)
	{
		uFnUpdateMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.UpdateMenu");
	}

	UREDGfxMoviePlayer_MenuStory_execUpdateMenu_Params UpdateMenu_Params;
	memset(&UpdateMenu_Params, 0, sizeof(UpdateMenu_Params));

	this->ProcessEvent(uFnUpdateMenu, &UpdateMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStory.InitMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37538])
// Parameter Info:

void UREDGfxMoviePlayer_MenuStory::InitMenu()
{
	static UFunction* uFnInitMenu = nullptr;

	if (!uFnInitMenu)
	{
		uFnInitMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStory.InitMenu");
	}

	UREDGfxMoviePlayer_MenuStory_execInitMenu_Params InitMenu_Params;
	memset(&InitMenu_Params, 0, sizeof(InitMenu_Params));

	this->ProcessEvent(uFnInitMenu, &InitMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.AS_LabelStop
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTitle::AS_LabelStop(const class FString& Label)
{
	static UFunction* uFnAS_LabelStop = nullptr;

	if (!uFnAS_LabelStop)
	{
		uFnAS_LabelStop = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.AS_LabelStop");
	}

	UREDGfxMoviePlayer_MenuTitle_execAS_LabelStop_Params AS_LabelStop_Params;
	memset(&AS_LabelStop_Params, 0, sizeof(AS_LabelStop_Params));
	memcpy_s(&AS_LabelStop_Params.Label, sizeof(AS_LabelStop_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_LabelStop, &AS_LabelStop_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.AS_Label
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTitle::AS_Label(const class FString& Label)
{
	static UFunction* uFnAS_Label = nullptr;

	if (!uFnAS_Label)
	{
		uFnAS_Label = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.AS_Label");
	}

	UREDGfxMoviePlayer_MenuTitle_execAS_Label_Params AS_Label_Params;
	memset(&AS_Label_Params, 0, sizeof(AS_Label_Params));
	memcpy_s(&AS_Label_Params.Label, sizeof(AS_Label_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_Label, &AS_Label_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuTitle_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuTitle::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuTitle_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateScreenTex_Sub
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)
// int32_t                        dispframe                      (CPF_Parm)
// int32_t                        minframe                       (CPF_Parm)
// class FString                  texPath                        (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       skipToTitle                    (CPF_Parm)

bool UREDGfxMoviePlayer_MenuTitle::UpdateScreenTex_Sub(bool bTrigger, int32_t dispframe, int32_t minframe, const class FString& texPath, bool skipToTitle)
{
	static UFunction* uFnUpdateScreenTex_Sub = nullptr;

	if (!uFnUpdateScreenTex_Sub)
	{
		uFnUpdateScreenTex_Sub = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateScreenTex_Sub");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdateScreenTex_Sub_Params UpdateScreenTex_Sub_Params;
	memset(&UpdateScreenTex_Sub_Params, 0, sizeof(UpdateScreenTex_Sub_Params));
	UpdateScreenTex_Sub_Params.bTrigger = bTrigger;
	memcpy_s(&UpdateScreenTex_Sub_Params.dispframe, sizeof(UpdateScreenTex_Sub_Params.dispframe), &dispframe, sizeof(dispframe));
	memcpy_s(&UpdateScreenTex_Sub_Params.minframe, sizeof(UpdateScreenTex_Sub_Params.minframe), &minframe, sizeof(minframe));
	memcpy_s(&UpdateScreenTex_Sub_Params.texPath, sizeof(UpdateScreenTex_Sub_Params.texPath), &texPath, sizeof(texPath));
	UpdateScreenTex_Sub_Params.skipToTitle = skipToTitle;

	this->ProcessEvent(uFnUpdateScreenTex_Sub, &UpdateScreenTex_Sub_Params, nullptr);

	return UpdateScreenTex_Sub_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuTitle::UpdateEnd(bool bTrigger)
{
	static UFunction* uFnUpdateEnd = nullptr;

	if (!uFnUpdateEnd)
	{
		uFnUpdateEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateEnd");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdateEnd_Params UpdateEnd_Params;
	memset(&UpdateEnd_Params, 0, sizeof(UpdateEnd_Params));
	UpdateEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEnd, &UpdateEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateOpeningMovie
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuTitle::UpdateOpeningMovie(bool bTrigger)
{
	static UFunction* uFnUpdateOpeningMovie = nullptr;

	if (!uFnUpdateOpeningMovie)
	{
		uFnUpdateOpeningMovie = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateOpeningMovie");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdateOpeningMovie_Params UpdateOpeningMovie_Params;
	memset(&UpdateOpeningMovie_Params, 0, sizeof(UpdateOpeningMovie_Params));
	UpdateOpeningMovie_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateOpeningMovie, &UpdateOpeningMovie_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdatePSPlusTrial
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuTitle::UpdatePSPlusTrial(bool bTrigger)
{
	static UFunction* uFnUpdatePSPlusTrial = nullptr;

	if (!uFnUpdatePSPlusTrial)
	{
		uFnUpdatePSPlusTrial = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdatePSPlusTrial");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdatePSPlusTrial_Params UpdatePSPlusTrial_Params;
	memset(&UpdatePSPlusTrial_Params, 0, sizeof(UpdatePSPlusTrial_Params));
	UpdatePSPlusTrial_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdatePSPlusTrial, &UpdatePSPlusTrial_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateTitle
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuTitle::UpdateTitle(bool bTrigger)
{
	static UFunction* uFnUpdateTitle = nullptr;

	if (!uFnUpdateTitle)
	{
		uFnUpdateTitle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateTitle");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdateTitle_Params UpdateTitle_Params;
	memset(&UpdateTitle_Params, 0, sizeof(UpdateTitle_Params));
	UpdateTitle_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateTitle, &UpdateTitle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateCompanyLogo
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuTitle::UpdateCompanyLogo(bool bTrigger)
{
	static UFunction* uFnUpdateCompanyLogo = nullptr;

	if (!uFnUpdateCompanyLogo)
	{
		uFnUpdateCompanyLogo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateCompanyLogo");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdateCompanyLogo_Params UpdateCompanyLogo_Params;
	memset(&UpdateCompanyLogo_Params, 0, sizeof(UpdateCompanyLogo_Params));
	UpdateCompanyLogo_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateCompanyLogo, &UpdateCompanyLogo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.OnClose");
	}

	UREDGfxMoviePlayer_MenuTitle_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuTitle_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.TitleStart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::TitleStart()
{
	static UFunction* uFnTitleStart = nullptr;

	if (!uFnTitleStart)
	{
		uFnTitleStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.TitleStart");
	}

	UREDGfxMoviePlayer_MenuTitle_execTitleStart_Params TitleStart_Params;
	memset(&TitleStart_Params, 0, sizeof(TitleStart_Params));

	this->ProcessEvent(uFnTitleStart, &TitleStart_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.OnCloseNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38813])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::OnCloseNative()
{
	static UFunction* uFnOnCloseNative = nullptr;

	if (!uFnOnCloseNative)
	{
		uFnOnCloseNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.OnCloseNative");
	}

	UREDGfxMoviePlayer_MenuTitle_execOnCloseNative_Params OnCloseNative_Params;
	memset(&OnCloseNative_Params, 0, sizeof(OnCloseNative_Params));

	this->ProcessEvent(uFnOnCloseNative, &OnCloseNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.OnUpdateNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38825])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::OnUpdateNative()
{
	static UFunction* uFnOnUpdateNative = nullptr;

	if (!uFnOnUpdateNative)
	{
		uFnOnUpdateNative = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.OnUpdateNative");
	}

	UREDGfxMoviePlayer_MenuTitle_execOnUpdateNative_Params OnUpdateNative_Params;
	memset(&OnUpdateNative_Params, 0, sizeof(OnUpdateNative_Params));

	this->ProcessEvent(uFnOnUpdateNative, &OnUpdateNative_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.OnTitleStart
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38823])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::OnTitleStart()
{
	static UFunction* uFnOnTitleStart = nullptr;

	if (!uFnOnTitleStart)
	{
		uFnOnTitleStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.OnTitleStart");
	}

	UREDGfxMoviePlayer_MenuTitle_execOnTitleStart_Params OnTitleStart_Params;
	memset(&OnTitleStart_Params, 0, sizeof(OnTitleStart_Params));

	this->ProcessEvent(uFnOnTitleStart, &OnTitleStart_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.IsUSRom
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37927])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTitle::IsUSRom()
{
	static UFunction* uFnIsUSRom = nullptr;

	if (!uFnIsUSRom)
	{
		uFnIsUSRom = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.IsUSRom");
	}

	UREDGfxMoviePlayer_MenuTitle_execIsUSRom_Params IsUSRom_Params;
	memset(&IsUSRom_Params, 0, sizeof(IsUSRom_Params));

	this->ProcessEvent(uFnIsUSRom, &IsUSRom_Params, nullptr);

	return IsUSRom_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.IsOpenPSPlusTrialMenuCancel
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37762])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTitle::IsOpenPSPlusTrialMenuCancel()
{
	static UFunction* uFnIsOpenPSPlusTrialMenuCancel = nullptr;

	if (!uFnIsOpenPSPlusTrialMenuCancel)
	{
		uFnIsOpenPSPlusTrialMenuCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.IsOpenPSPlusTrialMenuCancel");
	}

	UREDGfxMoviePlayer_MenuTitle_execIsOpenPSPlusTrialMenuCancel_Params IsOpenPSPlusTrialMenuCancel_Params;
	memset(&IsOpenPSPlusTrialMenuCancel_Params, 0, sizeof(IsOpenPSPlusTrialMenuCancel_Params));

	this->ProcessEvent(uFnIsOpenPSPlusTrialMenuCancel, &IsOpenPSPlusTrialMenuCancel_Params, nullptr);

	return IsOpenPSPlusTrialMenuCancel_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.OpenPSPlusTrialMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38839])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::OpenPSPlusTrialMenu()
{
	static UFunction* uFnOpenPSPlusTrialMenu = nullptr;

	if (!uFnOpenPSPlusTrialMenu)
	{
		uFnOpenPSPlusTrialMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.OpenPSPlusTrialMenu");
	}

	UREDGfxMoviePlayer_MenuTitle_execOpenPSPlusTrialMenu_Params OpenPSPlusTrialMenu_Params;
	memset(&OpenPSPlusTrialMenu_Params, 0, sizeof(OpenPSPlusTrialMenu_Params));

	this->ProcessEvent(uFnOpenPSPlusTrialMenu, &OpenPSPlusTrialMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateTrial
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40878])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTitle::UpdateTrial()
{
	static UFunction* uFnUpdateTrial = nullptr;

	if (!uFnUpdateTrial)
	{
		uFnUpdateTrial = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateTrial");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdateTrial_Params UpdateTrial_Params;
	memset(&UpdateTrial_Params, 0, sizeof(UpdateTrial_Params));

	this->ProcessEvent(uFnUpdateTrial, &UpdateTrial_Params, nullptr);

	return UpdateTrial_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.GetCompanyLogoMovieName
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37029])
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// class FString                  MovieName                      (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTitle::GetCompanyLogoMovieName(int32_t Index, class FString& MovieName)
{
	static UFunction* uFnGetCompanyLogoMovieName = nullptr;

	if (!uFnGetCompanyLogoMovieName)
	{
		uFnGetCompanyLogoMovieName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.GetCompanyLogoMovieName");
	}

	UREDGfxMoviePlayer_MenuTitle_execGetCompanyLogoMovieName_Params GetCompanyLogoMovieName_Params;
	memset(&GetCompanyLogoMovieName_Params, 0, sizeof(GetCompanyLogoMovieName_Params));
	memcpy_s(&GetCompanyLogoMovieName_Params.Index, sizeof(GetCompanyLogoMovieName_Params.Index), &Index, sizeof(Index));
	memcpy_s(&GetCompanyLogoMovieName_Params.MovieName, sizeof(GetCompanyLogoMovieName_Params.MovieName), &MovieName, sizeof(MovieName));

	this->ProcessEvent(uFnGetCompanyLogoMovieName, &GetCompanyLogoMovieName_Params, nullptr);

	memcpy_s(&MovieName, sizeof(MovieName), &GetCompanyLogoMovieName_Params.MovieName, sizeof(GetCompanyLogoMovieName_Params.MovieName));
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.IsSkipOpeningMovie
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37862])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTitle::IsSkipOpeningMovie()
{
	static UFunction* uFnIsSkipOpeningMovie = nullptr;

	if (!uFnIsSkipOpeningMovie)
	{
		uFnIsSkipOpeningMovie = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.IsSkipOpeningMovie");
	}

	UREDGfxMoviePlayer_MenuTitle_execIsSkipOpeningMovie_Params IsSkipOpeningMovie_Params;
	memset(&IsSkipOpeningMovie_Params, 0, sizeof(IsSkipOpeningMovie_Params));

	this->ProcessEvent(uFnIsSkipOpeningMovie, &IsSkipOpeningMovie_Params, nullptr);

	return IsSkipOpeningMovie_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.IsSkipCompanyLogo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37861])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTitle::IsSkipCompanyLogo()
{
	static UFunction* uFnIsSkipCompanyLogo = nullptr;

	if (!uFnIsSkipCompanyLogo)
	{
		uFnIsSkipCompanyLogo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.IsSkipCompanyLogo");
	}

	UREDGfxMoviePlayer_MenuTitle_execIsSkipCompanyLogo_Params IsSkipCompanyLogo_Params;
	memset(&IsSkipCompanyLogo_Params, 0, sizeof(IsSkipCompanyLogo_Params));

	this->ProcessEvent(uFnIsSkipCompanyLogo, &IsSkipCompanyLogo_Params, nullptr);

	return IsSkipCompanyLogo_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.IsNoCard
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37752])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTitle::IsNoCard()
{
	static UFunction* uFnIsNoCard = nullptr;

	if (!uFnIsNoCard)
	{
		uFnIsNoCard = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.IsNoCard");
	}

	UREDGfxMoviePlayer_MenuTitle_execIsNoCard_Params IsNoCard_Params;
	memset(&IsNoCard_Params, 0, sizeof(IsNoCard_Params));

	this->ProcessEvent(uFnIsNoCard, &IsNoCard_Params, nullptr);

	return IsNoCard_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.SetDispRankingGroup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39732])
// Parameter Info:
// ERANKING_GROUP                 Group                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuTitle::SetDispRankingGroup(ERANKING_GROUP Group)
{
	static UFunction* uFnSetDispRankingGroup = nullptr;

	if (!uFnSetDispRankingGroup)
	{
		uFnSetDispRankingGroup = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.SetDispRankingGroup");
	}

	UREDGfxMoviePlayer_MenuTitle_execSetDispRankingGroup_Params SetDispRankingGroup_Params;
	memset(&SetDispRankingGroup_Params, 0, sizeof(SetDispRankingGroup_Params));
	memcpy_s(&SetDispRankingGroup_Params.Group, sizeof(SetDispRankingGroup_Params.Group), &Group, sizeof(Group));

	this->ProcessEvent(uFnSetDispRankingGroup, &SetDispRankingGroup_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.StepNextScene
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40092])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::StepNextScene()
{
	static UFunction* uFnStepNextScene = nullptr;

	if (!uFnStepNextScene)
	{
		uFnStepNextScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.StepNextScene");
	}

	UREDGfxMoviePlayer_MenuTitle_execStepNextScene_Params StepNextScene_Params;
	memset(&StepNextScene_Params, 0, sizeof(StepNextScene_Params));

	this->ProcessEvent(uFnStepNextScene, &StepNextScene_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.GetNextScene
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37120])
// Parameter Info:
// ETITLE_NEXTSCENE               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

ETITLE_NEXTSCENE UREDGfxMoviePlayer_MenuTitle::GetNextScene()
{
	static UFunction* uFnGetNextScene = nullptr;

	if (!uFnGetNextScene)
	{
		uFnGetNextScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.GetNextScene");
	}

	UREDGfxMoviePlayer_MenuTitle_execGetNextScene_Params GetNextScene_Params;
	memset(&GetNextScene_Params, 0, sizeof(GetNextScene_Params));

	this->ProcessEvent(uFnGetNextScene, &GetNextScene_Params, nullptr);

	return static_cast<ETITLE_NEXTSCENE>(GetNextScene_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.StopMovie
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[28957])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::StopMovie()
{
	static UFunction* uFnStopMovie = nullptr;

	if (!uFnStopMovie)
	{
		uFnStopMovie = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.StopMovie");
	}

	UREDGfxMoviePlayer_MenuTitle_execStopMovie_Params StopMovie_Params;
	memset(&StopMovie_Params, 0, sizeof(StopMovie_Params));

	this->ProcessEvent(uFnStopMovie, &StopMovie_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.IsMoviePlaying
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37739])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_MenuTitle::IsMoviePlaying(const class FString& MovieName)
{
	static UFunction* uFnIsMoviePlaying = nullptr;

	if (!uFnIsMoviePlaying)
	{
		uFnIsMoviePlaying = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.IsMoviePlaying");
	}

	UREDGfxMoviePlayer_MenuTitle_execIsMoviePlaying_Params IsMoviePlaying_Params;
	memset(&IsMoviePlaying_Params, 0, sizeof(IsMoviePlaying_Params));
	memcpy_s(&IsMoviePlaying_Params.MovieName, sizeof(IsMoviePlaying_Params.MovieName), &MovieName, sizeof(MovieName));

	this->ProcessEvent(uFnIsMoviePlaying, &IsMoviePlaying_Params, nullptr);

	return IsMoviePlaying_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.IsMovieFinish
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37738])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)

bool UREDGfxMoviePlayer_MenuTitle::IsMovieFinish(const class FString& MovieName)
{
	static UFunction* uFnIsMovieFinish = nullptr;

	if (!uFnIsMovieFinish)
	{
		uFnIsMovieFinish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.IsMovieFinish");
	}

	UREDGfxMoviePlayer_MenuTitle_execIsMovieFinish_Params IsMovieFinish_Params;
	memset(&IsMovieFinish_Params, 0, sizeof(IsMovieFinish_Params));
	memcpy_s(&IsMovieFinish_Params.MovieName, sizeof(IsMovieFinish_Params.MovieName), &MovieName, sizeof(MovieName));

	this->ProcessEvent(uFnIsMovieFinish, &IsMovieFinish_Params, nullptr);

	return IsMovieFinish_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.StartMovie
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40026])
// Parameter Info:
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTitle::StartMovie(const class FString& MovieName)
{
	static UFunction* uFnStartMovie = nullptr;

	if (!uFnStartMovie)
	{
		uFnStartMovie = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.StartMovie");
	}

	UREDGfxMoviePlayer_MenuTitle_execStartMovie_Params StartMovie_Params;
	memset(&StartMovie_Params, 0, sizeof(StartMovie_Params));
	memcpy_s(&StartMovie_Params.MovieName, sizeof(StartMovie_Params.MovieName), &MovieName, sizeof(MovieName));

	this->ProcessEvent(uFnStartMovie, &StartMovie_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateCardDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40614])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTitle::UpdateCardDisp()
{
	static UFunction* uFnUpdateCardDisp = nullptr;

	if (!uFnUpdateCardDisp)
	{
		uFnUpdateCardDisp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateCardDisp");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdateCardDisp_Params UpdateCardDisp_Params;
	memset(&UpdateCardDisp_Params, 0, sizeof(UpdateCardDisp_Params));

	this->ProcessEvent(uFnUpdateCardDisp, &UpdateCardDisp_Params, nullptr);

	return UpdateCardDisp_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateMenuTitleDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40783])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::UpdateMenuTitleDraw()
{
	static UFunction* uFnUpdateMenuTitleDraw = nullptr;

	if (!uFnUpdateMenuTitleDraw)
	{
		uFnUpdateMenuTitleDraw = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.UpdateMenuTitleDraw");
	}

	UREDGfxMoviePlayer_MenuTitle_execUpdateMenuTitleDraw_Params UpdateMenuTitleDraw_Params;
	memset(&UpdateMenuTitleDraw_Params, 0, sizeof(UpdateMenuTitleDraw_Params));

	this->ProcessEvent(uFnUpdateMenuTitleDraw, &UpdateMenuTitleDraw_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTitle.InitMenuTitle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37539])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTitle::InitMenuTitle()
{
	static UFunction* uFnInitMenuTitle = nullptr;

	if (!uFnInitMenuTitle)
	{
		uFnInitMenuTitle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTitle.InitMenuTitle");
	}

	UREDGfxMoviePlayer_MenuTitle_execInitMenuTitle_Params InitMenuTitle_Params;
	memset(&InitMenuTitle_Params, 0, sizeof(InitMenuTitle_Params));

	this->ProcessEvent(uFnInitMenuTitle, &InitMenuTitle_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.OnUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuTournamentList::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuTournamentList_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.CloseTournamentList
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTournamentList::eventCloseTournamentList()
{
	static UFunction* uFnCloseTournamentList = nullptr;

	if (!uFnCloseTournamentList)
	{
		uFnCloseTournamentList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.CloseTournamentList");
	}

	UREDGfxMoviePlayer_MenuTournamentList_eventCloseTournamentList_Params CloseTournamentList_Params;
	memset(&CloseTournamentList_Params, 0, sizeof(CloseTournamentList_Params));

	this->ProcessEvent(uFnCloseTournamentList, &CloseTournamentList_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.ShowTournamentList2
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTournamentList::eventShowTournamentList2()
{
	static UFunction* uFnShowTournamentList2 = nullptr;

	if (!uFnShowTournamentList2)
	{
		uFnShowTournamentList2 = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.ShowTournamentList2");
	}

	UREDGfxMoviePlayer_MenuTournamentList_eventShowTournamentList2_Params ShowTournamentList2_Params;
	memset(&ShowTournamentList2_Params, 0, sizeof(ShowTournamentList2_Params));

	this->ProcessEvent(uFnShowTournamentList2, &ShowTournamentList2_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.ShowTournamentList
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Num                            (CPF_Parm)

void UREDGfxMoviePlayer_MenuTournamentList::eventShowTournamentList(int32_t Num)
{
	static UFunction* uFnShowTournamentList = nullptr;

	if (!uFnShowTournamentList)
	{
		uFnShowTournamentList = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.ShowTournamentList");
	}

	UREDGfxMoviePlayer_MenuTournamentList_eventShowTournamentList_Params ShowTournamentList_Params;
	memset(&ShowTournamentList_Params, 0, sizeof(ShowTournamentList_Params));
	memcpy_s(&ShowTournamentList_Params.Num, sizeof(ShowTournamentList_Params.Num), &Num, sizeof(Num));

	this->ProcessEvent(uFnShowTournamentList, &ShowTournamentList_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.SetTitleName
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  titleName                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTournamentList::eventSetTitleName(const class FString& titleName)
{
	static UFunction* uFnSetTitleName = nullptr;

	if (!uFnSetTitleName)
	{
		uFnSetTitleName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.SetTitleName");
	}

	UREDGfxMoviePlayer_MenuTournamentList_eventSetTitleName_Params SetTitleName_Params;
	memset(&SetTitleName_Params, 0, sizeof(SetTitleName_Params));
	memcpy_s(&SetTitleName_Params.titleName, sizeof(SetTitleName_Params.titleName), &titleName, sizeof(titleName));

	this->ProcessEvent(uFnSetTitleName, &SetTitleName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.SetStatusName
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  StatName                       (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTournamentList::eventSetStatusName(const class FString& StatName)
{
	static UFunction* uFnSetStatusName = nullptr;

	if (!uFnSetStatusName)
	{
		uFnSetStatusName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.SetStatusName");
	}

	UREDGfxMoviePlayer_MenuTournamentList_eventSetStatusName_Params SetStatusName_Params;
	memset(&SetStatusName_Params, 0, sizeof(SetStatusName_Params));
	memcpy_s(&SetStatusName_Params.StatName, sizeof(SetStatusName_Params.StatName), &StatName, sizeof(StatName));

	this->ProcessEvent(uFnSetStatusName, &SetStatusName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.SetGroupName
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  GroupName                      (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTournamentList::eventSetGroupName(const class FString& GroupName)
{
	static UFunction* uFnSetGroupName = nullptr;

	if (!uFnSetGroupName)
	{
		uFnSetGroupName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.SetGroupName");
	}

	UREDGfxMoviePlayer_MenuTournamentList_eventSetGroupName_Params SetGroupName_Params;
	memset(&SetGroupName_Params, 0, sizeof(SetGroupName_Params));
	memcpy_s(&SetGroupName_Params.GroupName, sizeof(SetGroupName_Params.GroupName), &GroupName, sizeof(GroupName));

	this->ProcessEvent(uFnSetGroupName, &SetGroupName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.OnInitialize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTournamentList::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuTournamentList_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentList.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuTournamentList::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentList.Start");
	}

	UREDGfxMoviePlayer_MenuTournamentList_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuTournamentMisc::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.StopShowRanking
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTournamentMisc::eventStopShowRanking()
{
	static UFunction* uFnStopShowRanking = nullptr;

	if (!uFnStopShowRanking)
	{
		uFnStopShowRanking = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.StopShowRanking");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_eventStopShowRanking_Params StopShowRanking_Params;
	memset(&StopShowRanking_Params, 0, sizeof(StopShowRanking_Params));

	this->ProcessEvent(uFnStopShowRanking, &StopShowRanking_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.ShowRankingEnd
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39903])
// Parameter Info:

void UREDGfxMoviePlayer_MenuTournamentMisc::ShowRankingEnd()
{
	static UFunction* uFnShowRankingEnd = nullptr;

	if (!uFnShowRankingEnd)
	{
		uFnShowRankingEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.ShowRankingEnd");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_execShowRankingEnd_Params ShowRankingEnd_Params;
	memset(&ShowRankingEnd_Params, 0, sizeof(ShowRankingEnd_Params));

	this->ProcessEvent(uFnShowRankingEnd, &ShowRankingEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.IsShowRanking
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTournamentMisc::eventIsShowRanking()
{
	static UFunction* uFnIsShowRanking = nullptr;

	if (!uFnIsShowRanking)
	{
		uFnIsShowRanking = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.IsShowRanking");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_eventIsShowRanking_Params IsShowRanking_Params;
	memset(&IsShowRanking_Params, 0, sizeof(IsShowRanking_Params));

	this->ProcessEvent(uFnIsShowRanking, &IsShowRanking_Params, nullptr);

	return IsShowRanking_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.ShowRanking
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        rank1                          (CPF_Parm)
// class FString                  rankName1                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        rank2                          (CPF_Parm)
// class FString                  rankName2                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        rank3                          (CPF_Parm)
// class FString                  rankName3                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        rank4                          (CPF_Parm)
// class FString                  rankName4                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Grade                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTournamentMisc::eventShowRanking(int32_t rank1, const class FString& rankName1, int32_t rank2, const class FString& rankName2, int32_t rank3, const class FString& rankName3, int32_t rank4, const class FString& rankName4, const class FString& Grade, const class FString& Title)
{
	static UFunction* uFnShowRanking = nullptr;

	if (!uFnShowRanking)
	{
		uFnShowRanking = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.ShowRanking");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_eventShowRanking_Params ShowRanking_Params;
	memset(&ShowRanking_Params, 0, sizeof(ShowRanking_Params));
	memcpy_s(&ShowRanking_Params.rank1, sizeof(ShowRanking_Params.rank1), &rank1, sizeof(rank1));
	memcpy_s(&ShowRanking_Params.rankName1, sizeof(ShowRanking_Params.rankName1), &rankName1, sizeof(rankName1));
	memcpy_s(&ShowRanking_Params.rank2, sizeof(ShowRanking_Params.rank2), &rank2, sizeof(rank2));
	memcpy_s(&ShowRanking_Params.rankName2, sizeof(ShowRanking_Params.rankName2), &rankName2, sizeof(rankName2));
	memcpy_s(&ShowRanking_Params.rank3, sizeof(ShowRanking_Params.rank3), &rank3, sizeof(rank3));
	memcpy_s(&ShowRanking_Params.rankName3, sizeof(ShowRanking_Params.rankName3), &rankName3, sizeof(rankName3));
	memcpy_s(&ShowRanking_Params.rank4, sizeof(ShowRanking_Params.rank4), &rank4, sizeof(rank4));
	memcpy_s(&ShowRanking_Params.rankName4, sizeof(ShowRanking_Params.rankName4), &rankName4, sizeof(rankName4));
	memcpy_s(&ShowRanking_Params.Grade, sizeof(ShowRanking_Params.Grade), &Grade, sizeof(Grade));
	memcpy_s(&ShowRanking_Params.Title, sizeof(ShowRanking_Params.Title), &Title, sizeof(Title));

	this->ProcessEvent(uFnShowRanking, &ShowRanking_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.IsShowBattler
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuTournamentMisc::eventIsShowBattler()
{
	static UFunction* uFnIsShowBattler = nullptr;

	if (!uFnIsShowBattler)
	{
		uFnIsShowBattler = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.IsShowBattler");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_eventIsShowBattler_Params IsShowBattler_Params;
	memset(&IsShowBattler_Params, 0, sizeof(IsShowBattler_Params));

	this->ProcessEvent(uFnIsShowBattler, &IsShowBattler_Params, nullptr);

	return IsShowBattler_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.ShowBattler
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Title                          (CPF_Parm | CPF_NeedCtorLink)
// class FString                  playerName1                    (CPF_Parm | CPF_NeedCtorLink)
// class FString                  playerName2                    (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuTournamentMisc::eventShowBattler(const class FString& Title, const class FString& playerName1, const class FString& playerName2)
{
	static UFunction* uFnShowBattler = nullptr;

	if (!uFnShowBattler)
	{
		uFnShowBattler = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.ShowBattler");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_eventShowBattler_Params ShowBattler_Params;
	memset(&ShowBattler_Params, 0, sizeof(ShowBattler_Params));
	memcpy_s(&ShowBattler_Params.Title, sizeof(ShowBattler_Params.Title), &Title, sizeof(Title));
	memcpy_s(&ShowBattler_Params.playerName1, sizeof(ShowBattler_Params.playerName1), &playerName1, sizeof(playerName1));
	memcpy_s(&ShowBattler_Params.playerName2, sizeof(ShowBattler_Params.playerName2), &playerName2, sizeof(playerName2));

	this->ProcessEvent(uFnShowBattler, &ShowBattler_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.OnInitialize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuTournamentMisc::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuTournamentMisc::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuTournamentMisc.Start");
	}

	UREDGfxMoviePlayer_MenuTournamentMisc_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_NewChallenger.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_NewChallenger::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_NewChallenger.Start");
	}

	UREDGfxMoviePlayer_NewChallenger_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDHUD.FinishModeSelect
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD::eventFinishModeSelect()
{
	static UFunction* uFnFinishModeSelect = nullptr;

	if (!uFnFinishModeSelect)
	{
		uFnFinishModeSelect = UFunction::FindFunction("Function REDGame.REDHUD.FinishModeSelect");
	}

	AREDHUD_eventFinishModeSelect_Params FinishModeSelect_Params;
	memset(&FinishModeSelect_Params, 0, sizeof(FinishModeSelect_Params));

	this->ProcessEvent(uFnFinishModeSelect, &FinishModeSelect_Params, nullptr);
};

// Function REDGame.REDHUD.IsModeSelect
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDHUD::eventIsModeSelect()
{
	static UFunction* uFnIsModeSelect = nullptr;

	if (!uFnIsModeSelect)
	{
		uFnIsModeSelect = UFunction::FindFunction("Function REDGame.REDHUD.IsModeSelect");
	}

	AREDHUD_eventIsModeSelect_Params IsModeSelect_Params;
	memset(&IsModeSelect_Params, 0, sizeof(IsModeSelect_Params));

	this->ProcessEvent(uFnIsModeSelect, &IsModeSelect_Params, nullptr);

	return IsModeSelect_Params.ReturnValue;
};

// Function REDGame.REDHUD.StartModeSelect
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        MySetGameModeIndex             (CPF_OptionalParm | CPF_Parm)

void AREDHUD::eventStartModeSelect(int32_t MySetGameModeIndex)
{
	static UFunction* uFnStartModeSelect = nullptr;

	if (!uFnStartModeSelect)
	{
		uFnStartModeSelect = UFunction::FindFunction("Function REDGame.REDHUD.StartModeSelect");
	}

	AREDHUD_eventStartModeSelect_Params StartModeSelect_Params;
	memset(&StartModeSelect_Params, 0, sizeof(StartModeSelect_Params));
	memcpy_s(&StartModeSelect_Params.MySetGameModeIndex, sizeof(StartModeSelect_Params.MySetGameModeIndex), &MySetGameModeIndex, sizeof(MySetGameModeIndex));

	this->ProcessEvent(uFnStartModeSelect, &StartModeSelect_Params, nullptr);
};

// Function REDGame.REDHUD.ReleaseGfxMovie
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDGfxMoviePlayer*      Movie                          (CPF_Parm)

void AREDHUD::eventReleaseGfxMovie(class UREDGfxMoviePlayer* Movie)
{
	static UFunction* uFnReleaseGfxMovie = nullptr;

	if (!uFnReleaseGfxMovie)
	{
		uFnReleaseGfxMovie = UFunction::FindFunction("Function REDGame.REDHUD.ReleaseGfxMovie");
	}

	AREDHUD_eventReleaseGfxMovie_Params ReleaseGfxMovie_Params;
	memset(&ReleaseGfxMovie_Params, 0, sizeof(ReleaseGfxMovie_Params));
	ReleaseGfxMovie_Params.Movie = Movie;

	this->ProcessEvent(uFnReleaseGfxMovie, &ReleaseGfxMovie_Params, nullptr);
};

// Function REDGame.REDHUD.CreateOneshotGfxMovie
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Param0                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param1                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param2                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param3                         (CPF_OptionalParm | CPF_Parm)

void AREDHUD::eventCreateOneshotGfxMovie(const class FString& MovieName, int32_t Param0, int32_t Param1, int32_t Param2, int32_t Param3)
{
	static UFunction* uFnCreateOneshotGfxMovie = nullptr;

	if (!uFnCreateOneshotGfxMovie)
	{
		uFnCreateOneshotGfxMovie = UFunction::FindFunction("Function REDGame.REDHUD.CreateOneshotGfxMovie");
	}

	AREDHUD_eventCreateOneshotGfxMovie_Params CreateOneshotGfxMovie_Params;
	memset(&CreateOneshotGfxMovie_Params, 0, sizeof(CreateOneshotGfxMovie_Params));
	memcpy_s(&CreateOneshotGfxMovie_Params.MovieName, sizeof(CreateOneshotGfxMovie_Params.MovieName), &MovieName, sizeof(MovieName));
	memcpy_s(&CreateOneshotGfxMovie_Params.Param0, sizeof(CreateOneshotGfxMovie_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&CreateOneshotGfxMovie_Params.Param1, sizeof(CreateOneshotGfxMovie_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&CreateOneshotGfxMovie_Params.Param2, sizeof(CreateOneshotGfxMovie_Params.Param2), &Param2, sizeof(Param2));
	memcpy_s(&CreateOneshotGfxMovie_Params.Param3, sizeof(CreateOneshotGfxMovie_Params.Param3), &Param3, sizeof(Param3));

	this->ProcessEvent(uFnCreateOneshotGfxMovie, &CreateOneshotGfxMovie_Params, nullptr);
};

// Function REDGame.REDHUD.CreateGfxMovie
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDGfxMoviePlayer*      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  MovieName                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Param0                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param1                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param2                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param3                         (CPF_OptionalParm | CPF_Parm)

class UREDGfxMoviePlayer* AREDHUD::eventCreateGfxMovie(const class FString& MovieName, int32_t Param0, int32_t Param1, int32_t Param2, int32_t Param3)
{
	static UFunction* uFnCreateGfxMovie = nullptr;

	if (!uFnCreateGfxMovie)
	{
		uFnCreateGfxMovie = UFunction::FindFunction("Function REDGame.REDHUD.CreateGfxMovie");
	}

	AREDHUD_eventCreateGfxMovie_Params CreateGfxMovie_Params;
	memset(&CreateGfxMovie_Params, 0, sizeof(CreateGfxMovie_Params));
	memcpy_s(&CreateGfxMovie_Params.MovieName, sizeof(CreateGfxMovie_Params.MovieName), &MovieName, sizeof(MovieName));
	memcpy_s(&CreateGfxMovie_Params.Param0, sizeof(CreateGfxMovie_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&CreateGfxMovie_Params.Param1, sizeof(CreateGfxMovie_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&CreateGfxMovie_Params.Param2, sizeof(CreateGfxMovie_Params.Param2), &Param2, sizeof(Param2));
	memcpy_s(&CreateGfxMovie_Params.Param3, sizeof(CreateGfxMovie_Params.Param3), &Param3, sizeof(Param3));

	this->ProcessEvent(uFnCreateGfxMovie, &CreateGfxMovie_Params, nullptr);

	return CreateGfxMovie_Params.ReturnValue;
};

// Function REDGame.REDHUD.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDHUD::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDHUD.Tick");
	}

	AREDHUD_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDHUD.PostRender
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD::PostRender()
{
	static UFunction* uFnPostRender = nullptr;

	if (!uFnPostRender)
	{
		uFnPostRender = UFunction::FindFunction("Function REDGame.REDHUD.PostRender");
	}

	AREDHUD_execPostRender_Params PostRender_Params;
	memset(&PostRender_Params, 0, sizeof(PostRender_Params));

	this->ProcessEvent(uFnPostRender, &PostRender_Params, nullptr);
};

// Function REDGame.REDHUD.PostBeginPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function REDGame.REDHUD.PostBeginPlay");
	}

	AREDHUD_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function REDGame.REDHUD.IsFadeEnd
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDHUD::eventIsFadeEnd()
{
	static UFunction* uFnIsFadeEnd = nullptr;

	if (!uFnIsFadeEnd)
	{
		uFnIsFadeEnd = UFunction::FindFunction("Function REDGame.REDHUD.IsFadeEnd");
	}

	AREDHUD_eventIsFadeEnd_Params IsFadeEnd_Params;
	memset(&IsFadeEnd_Params, 0, sizeof(IsFadeEnd_Params));

	this->ProcessEvent(uFnIsFadeEnd, &IsFadeEnd_Params, nullptr);

	return IsFadeEnd_Params.ReturnValue;
};

// Function REDGame.REDHUD.AdvanceFadeFrame
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void AREDHUD::eventAdvanceFadeFrame(int32_t frame)
{
	static UFunction* uFnAdvanceFadeFrame = nullptr;

	if (!uFnAdvanceFadeFrame)
	{
		uFnAdvanceFadeFrame = UFunction::FindFunction("Function REDGame.REDHUD.AdvanceFadeFrame");
	}

	AREDHUD_eventAdvanceFadeFrame_Params AdvanceFadeFrame_Params;
	memset(&AdvanceFadeFrame_Params, 0, sizeof(AdvanceFadeFrame_Params));
	memcpy_s(&AdvanceFadeFrame_Params.frame, sizeof(AdvanceFadeFrame_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnAdvanceFadeFrame, &AdvanceFadeFrame_Params, nullptr);
};

// Function REDGame.REDHUD.QuickFadeEnd
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD::eventQuickFadeEnd()
{
	static UFunction* uFnQuickFadeEnd = nullptr;

	if (!uFnQuickFadeEnd)
	{
		uFnQuickFadeEnd = UFunction::FindFunction("Function REDGame.REDHUD.QuickFadeEnd");
	}

	AREDHUD_eventQuickFadeEnd_Params QuickFadeEnd_Params;
	memset(&QuickFadeEnd_Params, 0, sizeof(QuickFadeEnd_Params));

	this->ProcessEvent(uFnQuickFadeEnd, &QuickFadeEnd_Params, nullptr);
};

// Function REDGame.REDHUD.FadeOutFast
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD::eventFadeOutFast()
{
	static UFunction* uFnFadeOutFast = nullptr;

	if (!uFnFadeOutFast)
	{
		uFnFadeOutFast = UFunction::FindFunction("Function REDGame.REDHUD.FadeOutFast");
	}

	AREDHUD_eventFadeOutFast_Params FadeOutFast_Params;
	memset(&FadeOutFast_Params, 0, sizeof(FadeOutFast_Params));

	this->ProcessEvent(uFnFadeOutFast, &FadeOutFast_Params, nullptr);
};

// Function REDGame.REDHUD.FadeOut
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        frame                          (CPF_OptionalParm | CPF_Parm)

void AREDHUD::eventFadeOut(int32_t frame)
{
	static UFunction* uFnFadeOut = nullptr;

	if (!uFnFadeOut)
	{
		uFnFadeOut = UFunction::FindFunction("Function REDGame.REDHUD.FadeOut");
	}

	AREDHUD_eventFadeOut_Params FadeOut_Params;
	memset(&FadeOut_Params, 0, sizeof(FadeOut_Params));
	memcpy_s(&FadeOut_Params.frame, sizeof(FadeOut_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnFadeOut, &FadeOut_Params, nullptr);
};

// Function REDGame.REDHUD.FadeIn
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        frame                          (CPF_OptionalParm | CPF_Parm)

void AREDHUD::eventFadeIn(int32_t frame)
{
	static UFunction* uFnFadeIn = nullptr;

	if (!uFnFadeIn)
	{
		uFnFadeIn = UFunction::FindFunction("Function REDGame.REDHUD.FadeIn");
	}

	AREDHUD_eventFadeIn_Params FadeIn_Params;
	memset(&FadeIn_Params, 0, sizeof(FadeIn_Params));
	memcpy_s(&FadeIn_Params.frame, sizeof(FadeIn_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnFadeIn, &FadeIn_Params, nullptr);
};

// Function REDGame.REDHUD.ChangeFadeColor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        inFadeColor                    (CPF_Parm)

void AREDHUD::eventChangeFadeColor(int32_t inFadeColor)
{
	static UFunction* uFnChangeFadeColor = nullptr;

	if (!uFnChangeFadeColor)
	{
		uFnChangeFadeColor = UFunction::FindFunction("Function REDGame.REDHUD.ChangeFadeColor");
	}

	AREDHUD_eventChangeFadeColor_Params ChangeFadeColor_Params;
	memset(&ChangeFadeColor_Params, 0, sizeof(ChangeFadeColor_Params));
	memcpy_s(&ChangeFadeColor_Params.inFadeColor, sizeof(ChangeFadeColor_Params.inFadeColor), &inFadeColor, sizeof(inFadeColor));

	this->ProcessEvent(uFnChangeFadeColor, &ChangeFadeColor_Params, nullptr);
};

// Function REDGame.REDHUD.UnPauseGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD::UnPauseGame()
{
	static UFunction* uFnUnPauseGame = nullptr;

	if (!uFnUnPauseGame)
	{
		uFnUnPauseGame = UFunction::FindFunction("Function REDGame.REDHUD.UnPauseGame");
	}

	AREDHUD_execUnPauseGame_Params UnPauseGame_Params;
	memset(&UnPauseGame_Params, 0, sizeof(UnPauseGame_Params));

	this->ProcessEvent(uFnUnPauseGame, &UnPauseGame_Params, nullptr);
};

// Function REDGame.REDHUD.PauseGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD::PauseGame()
{
	static UFunction* uFnPauseGame = nullptr;

	if (!uFnPauseGame)
	{
		uFnPauseGame = UFunction::FindFunction("Function REDGame.REDHUD.PauseGame");
	}

	AREDHUD_execPauseGame_Params PauseGame_Params;
	memset(&PauseGame_Params, 0, sizeof(PauseGame_Params));

	this->ProcessEvent(uFnPauseGame, &PauseGame_Params, nullptr);
};

// Function REDGame.REDHUD.CleanUIForPauseScreen
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD::CleanUIForPauseScreen()
{
	static UFunction* uFnCleanUIForPauseScreen = nullptr;

	if (!uFnCleanUIForPauseScreen)
	{
		uFnCleanUIForPauseScreen = UFunction::FindFunction("Function REDGame.REDHUD.CleanUIForPauseScreen");
	}

	AREDHUD_execCleanUIForPauseScreen_Params CleanUIForPauseScreen_Params;
	memset(&CleanUIForPauseScreen_Params, 0, sizeof(CleanUIForPauseScreen_Params));

	this->ProcessEvent(uFnCleanUIForPauseScreen, &CleanUIForPauseScreen_Params, nullptr);
};

// Function REDGame.REDHUD.GetGameViewportClient
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[31963])
// Parameter Info:
// class UGameViewportClient*     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UGameViewportClient* AREDHUD::GetGameViewportClient()
{
	static UFunction* uFnGetGameViewportClient = nullptr;

	if (!uFnGetGameViewportClient)
	{
		uFnGetGameViewportClient = UFunction::FindFunction("Function REDGame.REDHUD.GetGameViewportClient");
	}

	AREDHUD_execGetGameViewportClient_Params GetGameViewportClient_Params;
	memset(&GetGameViewportClient_Params, 0, sizeof(GetGameViewportClient_Params));

	this->ProcessEvent(uFnGetGameViewportClient, &GetGameViewportClient_Params, nullptr);

	return GetGameViewportClient_Params.ReturnValue;
};

// Function REDGame.REDHUD.PostDispRoot
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39083])
// Parameter Info:

void AREDHUD::PostDispRoot()
{
	static UFunction* uFnPostDispRoot = nullptr;

	if (!uFnPostDispRoot)
	{
		uFnPostDispRoot = UFunction::FindFunction("Function REDGame.REDHUD.PostDispRoot");
	}

	AREDHUD_execPostDispRoot_Params PostDispRoot_Params;
	memset(&PostDispRoot_Params, 0, sizeof(PostDispRoot_Params));

	this->ProcessEvent(uFnPostDispRoot, &PostDispRoot_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.RVNBlinkEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13390])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void AREDHUD_Battle::RVNBlinkEffect(int32_t Player)
{
	static UFunction* uFnRVNBlinkEffect = nullptr;

	if (!uFnRVNBlinkEffect)
	{
		uFnRVNBlinkEffect = UFunction::FindFunction("Function REDGame.REDHUD_Battle.RVNBlinkEffect");
	}

	AREDHUD_Battle_execRVNBlinkEffect_Params RVNBlinkEffect_Params;
	memset(&RVNBlinkEffect_Params, 0, sizeof(RVNBlinkEffect_Params));
	memcpy_s(&RVNBlinkEffect_Params.Player, sizeof(RVNBlinkEffect_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnRVNBlinkEffect, &RVNBlinkEffect_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.RVNRiseEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13391])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void AREDHUD_Battle::RVNRiseEffect(int32_t Player)
{
	static UFunction* uFnRVNRiseEffect = nullptr;

	if (!uFnRVNRiseEffect)
	{
		uFnRVNRiseEffect = UFunction::FindFunction("Function REDGame.REDHUD_Battle.RVNRiseEffect");
	}

	AREDHUD_Battle_execRVNRiseEffect_Params RVNRiseEffect_Params;
	memset(&RVNRiseEffect_Params, 0, sizeof(RVNRiseEffect_Params));
	memcpy_s(&RVNRiseEffect_Params.Player, sizeof(RVNRiseEffect_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnRVNRiseEffect, &RVNRiseEffect_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.JKOGhostGaugeDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37941])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        ColorID                        (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// uint32_t                       hide                           (CPF_Parm)
// int32_t                        lv                             (CPF_Parm)
// float                          gauge                          (CPF_Parm)

void AREDHUD_Battle::JKOGhostGaugeDisp(int32_t Player, int32_t ColorID, int32_t Type, bool hide, int32_t lv, float gauge)
{
	static UFunction* uFnJKOGhostGaugeDisp = nullptr;

	if (!uFnJKOGhostGaugeDisp)
	{
		uFnJKOGhostGaugeDisp = UFunction::FindFunction("Function REDGame.REDHUD_Battle.JKOGhostGaugeDisp");
	}

	AREDHUD_Battle_execJKOGhostGaugeDisp_Params JKOGhostGaugeDisp_Params;
	memset(&JKOGhostGaugeDisp_Params, 0, sizeof(JKOGhostGaugeDisp_Params));
	memcpy_s(&JKOGhostGaugeDisp_Params.Player, sizeof(JKOGhostGaugeDisp_Params.Player), &Player, sizeof(Player));
	memcpy_s(&JKOGhostGaugeDisp_Params.ColorID, sizeof(JKOGhostGaugeDisp_Params.ColorID), &ColorID, sizeof(ColorID));
	memcpy_s(&JKOGhostGaugeDisp_Params.Type, sizeof(JKOGhostGaugeDisp_Params.Type), &Type, sizeof(Type));
	JKOGhostGaugeDisp_Params.hide = hide;
	memcpy_s(&JKOGhostGaugeDisp_Params.lv, sizeof(JKOGhostGaugeDisp_Params.lv), &lv, sizeof(lv));
	memcpy_s(&JKOGhostGaugeDisp_Params.gauge, sizeof(JKOGhostGaugeDisp_Params.gauge), &gauge, sizeof(gauge));

	this->ProcessEvent(uFnJKOGhostGaugeDisp, &JKOGhostGaugeDisp_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.BurstKakuseiEff
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13230])
// Parameter Info:
// int32_t                        Dir                            (CPF_Parm)

void AREDHUD_Battle::BurstKakuseiEff(int32_t Dir)
{
	static UFunction* uFnBurstKakuseiEff = nullptr;

	if (!uFnBurstKakuseiEff)
	{
		uFnBurstKakuseiEff = UFunction::FindFunction("Function REDGame.REDHUD_Battle.BurstKakuseiEff");
	}

	AREDHUD_Battle_execBurstKakuseiEff_Params BurstKakuseiEff_Params;
	memset(&BurstKakuseiEff_Params, 0, sizeof(BurstKakuseiEff_Params));
	memcpy_s(&BurstKakuseiEff_Params.Dir, sizeof(BurstKakuseiEff_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnBurstKakuseiEff, &BurstKakuseiEff_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.BurstShake
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13231])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void AREDHUD_Battle::BurstShake(int32_t Player)
{
	static UFunction* uFnBurstShake = nullptr;

	if (!uFnBurstShake)
	{
		uFnBurstShake = UFunction::FindFunction("Function REDGame.REDHUD_Battle.BurstShake");
	}

	AREDHUD_Battle_execBurstShake_Params BurstShake_Params;
	memset(&BurstShake_Params, 0, sizeof(BurstShake_Params));
	memcpy_s(&BurstShake_Params.Player, sizeof(BurstShake_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnBurstShake, &BurstShake_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.RequestBattleInfo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39368])
// Parameter Info:
// int32_t                        TextID                         (CPF_Parm)
// int32_t                        Player                         (CPF_Parm)
// int32_t                        subID1                         (CPF_Parm)
// int32_t                        subID2                         (CPF_Parm)

void AREDHUD_Battle::RequestBattleInfo(int32_t TextID, int32_t Player, int32_t subID1, int32_t subID2)
{
	static UFunction* uFnRequestBattleInfo = nullptr;

	if (!uFnRequestBattleInfo)
	{
		uFnRequestBattleInfo = UFunction::FindFunction("Function REDGame.REDHUD_Battle.RequestBattleInfo");
	}

	AREDHUD_Battle_execRequestBattleInfo_Params RequestBattleInfo_Params;
	memset(&RequestBattleInfo_Params, 0, sizeof(RequestBattleInfo_Params));
	memcpy_s(&RequestBattleInfo_Params.TextID, sizeof(RequestBattleInfo_Params.TextID), &TextID, sizeof(TextID));
	memcpy_s(&RequestBattleInfo_Params.Player, sizeof(RequestBattleInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&RequestBattleInfo_Params.subID1, sizeof(RequestBattleInfo_Params.subID1), &subID1, sizeof(subID1));
	memcpy_s(&RequestBattleInfo_Params.subID2, sizeof(RequestBattleInfo_Params.subID2), &subID2, sizeof(subID2));

	this->ProcessEvent(uFnRequestBattleInfo, &RequestBattleInfo_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.Guardmiss_m
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37415])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)

void AREDHUD_Battle::Guardmiss_m(int32_t Player, int32_t X, int32_t Y, int32_t Dir)
{
	static UFunction* uFnGuardmiss_m = nullptr;

	if (!uFnGuardmiss_m)
	{
		uFnGuardmiss_m = UFunction::FindFunction("Function REDGame.REDHUD_Battle.Guardmiss_m");
	}

	AREDHUD_Battle_execGuardmiss_m_Params Guardmiss_m_Params;
	memset(&Guardmiss_m_Params, 0, sizeof(Guardmiss_m_Params));
	memcpy_s(&Guardmiss_m_Params.Player, sizeof(Guardmiss_m_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Guardmiss_m_Params.X, sizeof(Guardmiss_m_Params.X), &X, sizeof(X));
	memcpy_s(&Guardmiss_m_Params.Y, sizeof(Guardmiss_m_Params.Y), &Y, sizeof(Y));
	memcpy_s(&Guardmiss_m_Params.Dir, sizeof(Guardmiss_m_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnGuardmiss_m, &Guardmiss_m_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.Guardmiss_u
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37416])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)

void AREDHUD_Battle::Guardmiss_u(int32_t Player, int32_t X, int32_t Y, int32_t Dir)
{
	static UFunction* uFnGuardmiss_u = nullptr;

	if (!uFnGuardmiss_u)
	{
		uFnGuardmiss_u = UFunction::FindFunction("Function REDGame.REDHUD_Battle.Guardmiss_u");
	}

	AREDHUD_Battle_execGuardmiss_u_Params Guardmiss_u_Params;
	memset(&Guardmiss_u_Params, 0, sizeof(Guardmiss_u_Params));
	memcpy_s(&Guardmiss_u_Params.Player, sizeof(Guardmiss_u_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Guardmiss_u_Params.X, sizeof(Guardmiss_u_Params.X), &X, sizeof(X));
	memcpy_s(&Guardmiss_u_Params.Y, sizeof(Guardmiss_u_Params.Y), &Y, sizeof(Y));
	memcpy_s(&Guardmiss_u_Params.Dir, sizeof(Guardmiss_u_Params.Dir), &Dir, sizeof(Dir));

	this->ProcessEvent(uFnGuardmiss_u, &Guardmiss_u_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.ShinSousaiDamage
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39882])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        shakeFrame                     (CPF_Parm)

void AREDHUD_Battle::ShinSousaiDamage(int32_t Player, int32_t shakeFrame)
{
	static UFunction* uFnShinSousaiDamage = nullptr;

	if (!uFnShinSousaiDamage)
	{
		uFnShinSousaiDamage = UFunction::FindFunction("Function REDGame.REDHUD_Battle.ShinSousaiDamage");
	}

	AREDHUD_Battle_execShinSousaiDamage_Params ShinSousaiDamage_Params;
	memset(&ShinSousaiDamage_Params, 0, sizeof(ShinSousaiDamage_Params));
	memcpy_s(&ShinSousaiDamage_Params.Player, sizeof(ShinSousaiDamage_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ShinSousaiDamage_Params.shakeFrame, sizeof(ShinSousaiDamage_Params.shakeFrame), &shakeFrame, sizeof(shakeFrame));

	this->ProcessEvent(uFnShinSousaiDamage, &ShinSousaiDamage_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.ShinSousai
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39881])
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void AREDHUD_Battle::ShinSousai(int32_t frame)
{
	static UFunction* uFnShinSousai = nullptr;

	if (!uFnShinSousai)
	{
		uFnShinSousai = UFunction::FindFunction("Function REDGame.REDHUD_Battle.ShinSousai");
	}

	AREDHUD_Battle_execShinSousai_Params ShinSousai_Params;
	memset(&ShinSousai_Params, 0, sizeof(ShinSousai_Params));
	memcpy_s(&ShinSousai_Params.frame, sizeof(ShinSousai_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnShinSousai, &ShinSousai_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.DispCockpitAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36552])
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)

void AREDHUD_Battle::DispCockpitAll(bool disp)
{
	static UFunction* uFnDispCockpitAll = nullptr;

	if (!uFnDispCockpitAll)
	{
		uFnDispCockpitAll = UFunction::FindFunction("Function REDGame.REDHUD_Battle.DispCockpitAll");
	}

	AREDHUD_Battle_execDispCockpitAll_Params DispCockpitAll_Params;
	memset(&DispCockpitAll_Params, 0, sizeof(DispCockpitAll_Params));
	DispCockpitAll_Params.disp = disp;

	this->ProcessEvent(uFnDispCockpitAll, &DispCockpitAll_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.DispCockpit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36551])
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)

void AREDHUD_Battle::DispCockpit(bool disp)
{
	static UFunction* uFnDispCockpit = nullptr;

	if (!uFnDispCockpit)
	{
		uFnDispCockpit = UFunction::FindFunction("Function REDGame.REDHUD_Battle.DispCockpit");
	}

	AREDHUD_Battle_execDispCockpit_Params DispCockpit_Params;
	memset(&DispCockpit_Params, 0, sizeof(DispCockpit_Params));
	DispCockpit_Params.disp = disp;

	this->ProcessEvent(uFnDispCockpit, &DispCockpit_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.NegaPena
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38529])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void AREDHUD_Battle::NegaPena(int32_t Player)
{
	static UFunction* uFnNegaPena = nullptr;

	if (!uFnNegaPena)
	{
		uFnNegaPena = UFunction::FindFunction("Function REDGame.REDHUD_Battle.NegaPena");
	}

	AREDHUD_Battle_execNegaPena_Params NegaPena_Params;
	memset(&NegaPena_Params, 0, sizeof(NegaPena_Params));
	memcpy_s(&NegaPena_Params.Player, sizeof(NegaPena_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnNegaPena, &NegaPena_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.ButtonRenda
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36031])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        timePer                        (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)

void AREDHUD_Battle::ButtonRenda(int32_t Player, int32_t timePer, int32_t X, int32_t Y, bool disp)
{
	static UFunction* uFnButtonRenda = nullptr;

	if (!uFnButtonRenda)
	{
		uFnButtonRenda = UFunction::FindFunction("Function REDGame.REDHUD_Battle.ButtonRenda");
	}

	AREDHUD_Battle_execButtonRenda_Params ButtonRenda_Params;
	memset(&ButtonRenda_Params, 0, sizeof(ButtonRenda_Params));
	memcpy_s(&ButtonRenda_Params.Player, sizeof(ButtonRenda_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ButtonRenda_Params.timePer, sizeof(ButtonRenda_Params.timePer), &timePer, sizeof(timePer));
	memcpy_s(&ButtonRenda_Params.X, sizeof(ButtonRenda_Params.X), &X, sizeof(X));
	memcpy_s(&ButtonRenda_Params.Y, sizeof(ButtonRenda_Params.Y), &Y, sizeof(Y));
	ButtonRenda_Params.disp = disp;

	this->ProcessEvent(uFnButtonRenda, &ButtonRenda_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.LeverGacha
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37995])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        timePer                        (CPF_Parm)
// int32_t                        X                              (CPF_Parm)
// int32_t                        Y                              (CPF_Parm)
// uint32_t                       disp                           (CPF_Parm)

void AREDHUD_Battle::LeverGacha(int32_t Player, int32_t timePer, int32_t X, int32_t Y, bool disp)
{
	static UFunction* uFnLeverGacha = nullptr;

	if (!uFnLeverGacha)
	{
		uFnLeverGacha = UFunction::FindFunction("Function REDGame.REDHUD_Battle.LeverGacha");
	}

	AREDHUD_Battle_execLeverGacha_Params LeverGacha_Params;
	memset(&LeverGacha_Params, 0, sizeof(LeverGacha_Params));
	memcpy_s(&LeverGacha_Params.Player, sizeof(LeverGacha_Params.Player), &Player, sizeof(Player));
	memcpy_s(&LeverGacha_Params.timePer, sizeof(LeverGacha_Params.timePer), &timePer, sizeof(timePer));
	memcpy_s(&LeverGacha_Params.X, sizeof(LeverGacha_Params.X), &X, sizeof(X));
	memcpy_s(&LeverGacha_Params.Y, sizeof(LeverGacha_Params.Y), &Y, sizeof(Y));
	LeverGacha_Params.disp = disp;

	this->ProcessEvent(uFnLeverGacha, &LeverGacha_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.SetTensGaugeColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13425])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        mulCol                         (CPF_Parm)
// int32_t                        addCol                         (CPF_Parm)

void AREDHUD_Battle::SetTensGaugeColor(int32_t Player, int32_t mulCol, int32_t addCol)
{
	static UFunction* uFnSetTensGaugeColor = nullptr;

	if (!uFnSetTensGaugeColor)
	{
		uFnSetTensGaugeColor = UFunction::FindFunction("Function REDGame.REDHUD_Battle.SetTensGaugeColor");
	}

	AREDHUD_Battle_execSetTensGaugeColor_Params SetTensGaugeColor_Params;
	memset(&SetTensGaugeColor_Params, 0, sizeof(SetTensGaugeColor_Params));
	memcpy_s(&SetTensGaugeColor_Params.Player, sizeof(SetTensGaugeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetTensGaugeColor_Params.mulCol, sizeof(SetTensGaugeColor_Params.mulCol), &mulCol, sizeof(mulCol));
	memcpy_s(&SetTensGaugeColor_Params.addCol, sizeof(SetTensGaugeColor_Params.addCol), &addCol, sizeof(addCol));

	this->ProcessEvent(uFnSetTensGaugeColor, &SetTensGaugeColor_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.SetHPGaugeColor
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13411])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        mulCol                         (CPF_Parm)
// int32_t                        addCol                         (CPF_Parm)

void AREDHUD_Battle::SetHPGaugeColor(int32_t Player, int32_t mulCol, int32_t addCol)
{
	static UFunction* uFnSetHPGaugeColor = nullptr;

	if (!uFnSetHPGaugeColor)
	{
		uFnSetHPGaugeColor = UFunction::FindFunction("Function REDGame.REDHUD_Battle.SetHPGaugeColor");
	}

	AREDHUD_Battle_execSetHPGaugeColor_Params SetHPGaugeColor_Params;
	memset(&SetHPGaugeColor_Params, 0, sizeof(SetHPGaugeColor_Params));
	memcpy_s(&SetHPGaugeColor_Params.Player, sizeof(SetHPGaugeColor_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetHPGaugeColor_Params.mulCol, sizeof(SetHPGaugeColor_Params.mulCol), &mulCol, sizeof(mulCol));
	memcpy_s(&SetHPGaugeColor_Params.addCol, sizeof(SetHPGaugeColor_Params.addCol), &addCol, sizeof(addCol));

	this->ProcessEvent(uFnSetHPGaugeColor, &SetHPGaugeColor_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.UpdateRoundWin
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13486])
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        roundNum                       (CPF_Parm)

void AREDHUD_Battle::UpdateRoundWin(int32_t Player, int32_t roundNum)
{
	static UFunction* uFnUpdateRoundWin = nullptr;

	if (!uFnUpdateRoundWin)
	{
		uFnUpdateRoundWin = UFunction::FindFunction("Function REDGame.REDHUD_Battle.UpdateRoundWin");
	}

	AREDHUD_Battle_execUpdateRoundWin_Params UpdateRoundWin_Params;
	memset(&UpdateRoundWin_Params, 0, sizeof(UpdateRoundWin_Params));
	memcpy_s(&UpdateRoundWin_Params.Player, sizeof(UpdateRoundWin_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateRoundWin_Params.roundNum, sizeof(UpdateRoundWin_Params.roundNum), &roundNum, sizeof(roundNum));

	this->ProcessEvent(uFnUpdateRoundWin, &UpdateRoundWin_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.SetupRoundNum
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13429])
// Parameter Info:
// int32_t                        round1P                        (CPF_Parm)
// int32_t                        round2P                        (CPF_Parm)

void AREDHUD_Battle::SetupRoundNum(int32_t round1P, int32_t round2P)
{
	static UFunction* uFnSetupRoundNum = nullptr;

	if (!uFnSetupRoundNum)
	{
		uFnSetupRoundNum = UFunction::FindFunction("Function REDGame.REDHUD_Battle.SetupRoundNum");
	}

	AREDHUD_Battle_execSetupRoundNum_Params SetupRoundNum_Params;
	memset(&SetupRoundNum_Params, 0, sizeof(SetupRoundNum_Params));
	memcpy_s(&SetupRoundNum_Params.round1P, sizeof(SetupRoundNum_Params.round1P), &round1P, sizeof(round1P));
	memcpy_s(&SetupRoundNum_Params.round2P, sizeof(SetupRoundNum_Params.round2P), &round2P, sizeof(round2P));

	this->ProcessEvent(uFnSetupRoundNum, &SetupRoundNum_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.HaikuRsset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)

void AREDHUD_Battle::eventHaikuRsset(int32_t LRpos)
{
	static UFunction* uFnHaikuRsset = nullptr;

	if (!uFnHaikuRsset)
	{
		uFnHaikuRsset = UFunction::FindFunction("Function REDGame.REDHUD_Battle.HaikuRsset");
	}

	AREDHUD_Battle_eventHaikuRsset_Params HaikuRsset_Params;
	memset(&HaikuRsset_Params, 0, sizeof(HaikuRsset_Params));
	memcpy_s(&HaikuRsset_Params.LRpos, sizeof(HaikuRsset_Params.LRpos), &LRpos, sizeof(LRpos));

	this->ProcessEvent(uFnHaikuRsset, &HaikuRsset_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.HaikuEnd
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)

void AREDHUD_Battle::eventHaikuEnd(int32_t LRpos)
{
	static UFunction* uFnHaikuEnd = nullptr;

	if (!uFnHaikuEnd)
	{
		uFnHaikuEnd = UFunction::FindFunction("Function REDGame.REDHUD_Battle.HaikuEnd");
	}

	AREDHUD_Battle_eventHaikuEnd_Params HaikuEnd_Params;
	memset(&HaikuEnd_Params, 0, sizeof(HaikuEnd_Params));
	memcpy_s(&HaikuEnd_Params.LRpos, sizeof(HaikuEnd_Params.LRpos), &LRpos, sizeof(LRpos));

	this->ProcessEvent(uFnHaikuEnd, &HaikuEnd_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.HaikuStart03
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)
// class FString                  ku                             (CPF_Parm | CPF_NeedCtorLink)

void AREDHUD_Battle::eventHaikuStart03(int32_t LRpos, const class FString& ku)
{
	static UFunction* uFnHaikuStart03 = nullptr;

	if (!uFnHaikuStart03)
	{
		uFnHaikuStart03 = UFunction::FindFunction("Function REDGame.REDHUD_Battle.HaikuStart03");
	}

	AREDHUD_Battle_eventHaikuStart03_Params HaikuStart03_Params;
	memset(&HaikuStart03_Params, 0, sizeof(HaikuStart03_Params));
	memcpy_s(&HaikuStart03_Params.LRpos, sizeof(HaikuStart03_Params.LRpos), &LRpos, sizeof(LRpos));
	memcpy_s(&HaikuStart03_Params.ku, sizeof(HaikuStart03_Params.ku), &ku, sizeof(ku));

	this->ProcessEvent(uFnHaikuStart03, &HaikuStart03_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.HaikuStart02
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)
// class FString                  ku                             (CPF_Parm | CPF_NeedCtorLink)

void AREDHUD_Battle::eventHaikuStart02(int32_t LRpos, const class FString& ku)
{
	static UFunction* uFnHaikuStart02 = nullptr;

	if (!uFnHaikuStart02)
	{
		uFnHaikuStart02 = UFunction::FindFunction("Function REDGame.REDHUD_Battle.HaikuStart02");
	}

	AREDHUD_Battle_eventHaikuStart02_Params HaikuStart02_Params;
	memset(&HaikuStart02_Params, 0, sizeof(HaikuStart02_Params));
	memcpy_s(&HaikuStart02_Params.LRpos, sizeof(HaikuStart02_Params.LRpos), &LRpos, sizeof(LRpos));
	memcpy_s(&HaikuStart02_Params.ku, sizeof(HaikuStart02_Params.ku), &ku, sizeof(ku));

	this->ProcessEvent(uFnHaikuStart02, &HaikuStart02_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.HaikuStart01
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        LRpos                          (CPF_Parm)
// class FString                  ku                             (CPF_Parm | CPF_NeedCtorLink)

void AREDHUD_Battle::eventHaikuStart01(int32_t LRpos, const class FString& ku)
{
	static UFunction* uFnHaikuStart01 = nullptr;

	if (!uFnHaikuStart01)
	{
		uFnHaikuStart01 = UFunction::FindFunction("Function REDGame.REDHUD_Battle.HaikuStart01");
	}

	AREDHUD_Battle_eventHaikuStart01_Params HaikuStart01_Params;
	memset(&HaikuStart01_Params, 0, sizeof(HaikuStart01_Params));
	memcpy_s(&HaikuStart01_Params.LRpos, sizeof(HaikuStart01_Params.LRpos), &LRpos, sizeof(LRpos));
	memcpy_s(&HaikuStart01_Params.ku, sizeof(HaikuStart01_Params.ku), &ku, sizeof(ku));

	this->ProcessEvent(uFnHaikuStart01, &HaikuStart01_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.FinishContinue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDHUD_Battle::FinishContinue()
{
	static UFunction* uFnFinishContinue = nullptr;

	if (!uFnFinishContinue)
	{
		uFnFinishContinue = UFunction::FindFunction("Function REDGame.REDHUD_Battle.FinishContinue");
	}

	AREDHUD_Battle_execFinishContinue_Params FinishContinue_Params;
	memset(&FinishContinue_Params, 0, sizeof(FinishContinue_Params));

	this->ProcessEvent(uFnFinishContinue, &FinishContinue_Params, nullptr);

	return FinishContinue_Params.ReturnValue;
};

// Function REDGame.REDHUD_Battle.IsContinueLoop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDHUD_Battle::IsContinueLoop()
{
	static UFunction* uFnIsContinueLoop = nullptr;

	if (!uFnIsContinueLoop)
	{
		uFnIsContinueLoop = UFunction::FindFunction("Function REDGame.REDHUD_Battle.IsContinueLoop");
	}

	AREDHUD_Battle_execIsContinueLoop_Params IsContinueLoop_Params;
	memset(&IsContinueLoop_Params, 0, sizeof(IsContinueLoop_Params));

	this->ProcessEvent(uFnIsContinueLoop, &IsContinueLoop_Params, nullptr);

	return IsContinueLoop_Params.ReturnValue;
};

// Function REDGame.REDHUD_Battle.StartContinue
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::StartContinue()
{
	static UFunction* uFnStartContinue = nullptr;

	if (!uFnStartContinue)
	{
		uFnStartContinue = UFunction::FindFunction("Function REDGame.REDHUD_Battle.StartContinue");
	}

	AREDHUD_Battle_execStartContinue_Params StartContinue_Params;
	memset(&StartContinue_Params, 0, sizeof(StartContinue_Params));

	this->ProcessEvent(uFnStartContinue, &StartContinue_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.MatchResultWindow_AddQuestInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  questName                      (CPF_Parm | CPF_NeedCtorLink)
// float                          Rate                           (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// class FString                  rewordStr                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        rewordType                     (CPF_Parm)

void AREDHUD_Battle::MatchResultWindow_AddQuestInfo(int32_t Player, const class FString& questName, float Rate, int32_t Type, const class FString& rewordStr, int32_t rewordType)
{
	static UFunction* uFnMatchResultWindow_AddQuestInfo = nullptr;

	if (!uFnMatchResultWindow_AddQuestInfo)
	{
		uFnMatchResultWindow_AddQuestInfo = UFunction::FindFunction("Function REDGame.REDHUD_Battle.MatchResultWindow_AddQuestInfo");
	}

	AREDHUD_Battle_execMatchResultWindow_AddQuestInfo_Params MatchResultWindow_AddQuestInfo_Params;
	memset(&MatchResultWindow_AddQuestInfo_Params, 0, sizeof(MatchResultWindow_AddQuestInfo_Params));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.Player, sizeof(MatchResultWindow_AddQuestInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.questName, sizeof(MatchResultWindow_AddQuestInfo_Params.questName), &questName, sizeof(questName));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.Rate, sizeof(MatchResultWindow_AddQuestInfo_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.Type, sizeof(MatchResultWindow_AddQuestInfo_Params.Type), &Type, sizeof(Type));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.rewordStr, sizeof(MatchResultWindow_AddQuestInfo_Params.rewordStr), &rewordStr, sizeof(rewordStr));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.rewordType, sizeof(MatchResultWindow_AddQuestInfo_Params.rewordType), &rewordType, sizeof(rewordType));

	this->ProcessEvent(uFnMatchResultWindow_AddQuestInfo, &MatchResultWindow_AddQuestInfo_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.MatchResultWindow_AddMedalInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  medalName                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  medalDesc                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Grade                          (CPF_Parm)

void AREDHUD_Battle::MatchResultWindow_AddMedalInfo(int32_t Player, const class FString& medalName, const class FString& medalDesc, int32_t Grade)
{
	static UFunction* uFnMatchResultWindow_AddMedalInfo = nullptr;

	if (!uFnMatchResultWindow_AddMedalInfo)
	{
		uFnMatchResultWindow_AddMedalInfo = UFunction::FindFunction("Function REDGame.REDHUD_Battle.MatchResultWindow_AddMedalInfo");
	}

	AREDHUD_Battle_execMatchResultWindow_AddMedalInfo_Params MatchResultWindow_AddMedalInfo_Params;
	memset(&MatchResultWindow_AddMedalInfo_Params, 0, sizeof(MatchResultWindow_AddMedalInfo_Params));
	memcpy_s(&MatchResultWindow_AddMedalInfo_Params.Player, sizeof(MatchResultWindow_AddMedalInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&MatchResultWindow_AddMedalInfo_Params.medalName, sizeof(MatchResultWindow_AddMedalInfo_Params.medalName), &medalName, sizeof(medalName));
	memcpy_s(&MatchResultWindow_AddMedalInfo_Params.medalDesc, sizeof(MatchResultWindow_AddMedalInfo_Params.medalDesc), &medalDesc, sizeof(medalDesc));
	memcpy_s(&MatchResultWindow_AddMedalInfo_Params.Grade, sizeof(MatchResultWindow_AddMedalInfo_Params.Grade), &Grade, sizeof(Grade));

	this->ProcessEvent(uFnMatchResultWindow_AddMedalInfo, &MatchResultWindow_AddMedalInfo_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.MatchResultWindow_Release
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::MatchResultWindow_Release()
{
	static UFunction* uFnMatchResultWindow_Release = nullptr;

	if (!uFnMatchResultWindow_Release)
	{
		uFnMatchResultWindow_Release = UFunction::FindFunction("Function REDGame.REDHUD_Battle.MatchResultWindow_Release");
	}

	AREDHUD_Battle_execMatchResultWindow_Release_Params MatchResultWindow_Release_Params;
	memset(&MatchResultWindow_Release_Params, 0, sizeof(MatchResultWindow_Release_Params));

	this->ProcessEvent(uFnMatchResultWindow_Release, &MatchResultWindow_Release_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.MatchResultWindow_PauseKey
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Pause                          (CPF_Parm)

void AREDHUD_Battle::MatchResultWindow_PauseKey(bool Pause)
{
	static UFunction* uFnMatchResultWindow_PauseKey = nullptr;

	if (!uFnMatchResultWindow_PauseKey)
	{
		uFnMatchResultWindow_PauseKey = UFunction::FindFunction("Function REDGame.REDHUD_Battle.MatchResultWindow_PauseKey");
	}

	AREDHUD_Battle_execMatchResultWindow_PauseKey_Params MatchResultWindow_PauseKey_Params;
	memset(&MatchResultWindow_PauseKey_Params, 0, sizeof(MatchResultWindow_PauseKey_Params));
	MatchResultWindow_PauseKey_Params.Pause = Pause;

	this->ProcessEvent(uFnMatchResultWindow_PauseKey, &MatchResultWindow_PauseKey_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.MatchResultWindow_SkipShowAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::MatchResultWindow_SkipShowAnim()
{
	static UFunction* uFnMatchResultWindow_SkipShowAnim = nullptr;

	if (!uFnMatchResultWindow_SkipShowAnim)
	{
		uFnMatchResultWindow_SkipShowAnim = UFunction::FindFunction("Function REDGame.REDHUD_Battle.MatchResultWindow_SkipShowAnim");
	}

	AREDHUD_Battle_execMatchResultWindow_SkipShowAnim_Params MatchResultWindow_SkipShowAnim_Params;
	memset(&MatchResultWindow_SkipShowAnim_Params, 0, sizeof(MatchResultWindow_SkipShowAnim_Params));

	this->ProcessEvent(uFnMatchResultWindow_SkipShowAnim, &MatchResultWindow_SkipShowAnim_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.MatchResultWindow_IsShowAnimEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDHUD_Battle::MatchResultWindow_IsShowAnimEnd()
{
	static UFunction* uFnMatchResultWindow_IsShowAnimEnd = nullptr;

	if (!uFnMatchResultWindow_IsShowAnimEnd)
	{
		uFnMatchResultWindow_IsShowAnimEnd = UFunction::FindFunction("Function REDGame.REDHUD_Battle.MatchResultWindow_IsShowAnimEnd");
	}

	AREDHUD_Battle_execMatchResultWindow_IsShowAnimEnd_Params MatchResultWindow_IsShowAnimEnd_Params;
	memset(&MatchResultWindow_IsShowAnimEnd_Params, 0, sizeof(MatchResultWindow_IsShowAnimEnd_Params));

	this->ProcessEvent(uFnMatchResultWindow_IsShowAnimEnd, &MatchResultWindow_IsShowAnimEnd_Params, nullptr);

	return MatchResultWindow_IsShowAnimEnd_Params.ReturnValue;
};

// Function REDGame.REDHUD_Battle.MatchResultWindow_StartShow
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FMatchResultWindowArg   arg1P                          (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// struct FMatchResultWindowArg   arg2P                          (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDHUD_Battle::MatchResultWindow_StartShow(struct FMatchResultWindowArg& arg1P, struct FMatchResultWindowArg& arg2P)
{
	static UFunction* uFnMatchResultWindow_StartShow = nullptr;

	if (!uFnMatchResultWindow_StartShow)
	{
		uFnMatchResultWindow_StartShow = UFunction::FindFunction("Function REDGame.REDHUD_Battle.MatchResultWindow_StartShow");
	}

	AREDHUD_Battle_execMatchResultWindow_StartShow_Params MatchResultWindow_StartShow_Params;
	memset(&MatchResultWindow_StartShow_Params, 0, sizeof(MatchResultWindow_StartShow_Params));
	memcpy_s(&MatchResultWindow_StartShow_Params.arg1P, sizeof(MatchResultWindow_StartShow_Params.arg1P), &arg1P, sizeof(arg1P));
	memcpy_s(&MatchResultWindow_StartShow_Params.arg2P, sizeof(MatchResultWindow_StartShow_Params.arg2P), &arg2P, sizeof(arg2P));

	this->ProcessEvent(uFnMatchResultWindow_StartShow, &MatchResultWindow_StartShow_Params, nullptr);

	memcpy_s(&arg1P, sizeof(arg1P), &MatchResultWindow_StartShow_Params.arg1P, sizeof(MatchResultWindow_StartShow_Params.arg1P));
	memcpy_s(&arg2P, sizeof(arg2P), &MatchResultWindow_StartShow_Params.arg2P, sizeof(MatchResultWindow_StartShow_Params.arg2P));
};

// Function REDGame.REDHUD_Battle.UpdateCombo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40622])
// Parameter Info:
// class AREDPawn*                player1                        (CPF_Parm)
// class AREDPawn*                player2                        (CPF_Parm)

void AREDHUD_Battle::UpdateCombo(class AREDPawn* player1, class AREDPawn* player2)
{
	static UFunction* uFnUpdateCombo = nullptr;

	if (!uFnUpdateCombo)
	{
		uFnUpdateCombo = UFunction::FindFunction("Function REDGame.REDHUD_Battle.UpdateCombo");
	}

	AREDHUD_Battle_execUpdateCombo_Params UpdateCombo_Params;
	memset(&UpdateCombo_Params, 0, sizeof(UpdateCombo_Params));
	UpdateCombo_Params.player1 = player1;
	UpdateCombo_Params.player2 = player2;

	this->ProcessEvent(uFnUpdateCombo, &UpdateCombo_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.Update_Tick
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40594])
// Parameter Info:

void AREDHUD_Battle::Update_Tick()
{
	static UFunction* uFnUpdate_Tick = nullptr;

	if (!uFnUpdate_Tick)
	{
		uFnUpdate_Tick = UFunction::FindFunction("Function REDGame.REDHUD_Battle.Update_Tick");
	}

	AREDHUD_Battle_execUpdate_Tick_Params Update_Tick_Params;
	memset(&Update_Tick_Params, 0, sizeof(Update_Tick_Params));

	this->ProcessEvent(uFnUpdate_Tick, &Update_Tick_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.UpdateAll
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40595])
// Parameter Info:

void AREDHUD_Battle::UpdateAll()
{
	static UFunction* uFnUpdateAll = nullptr;

	if (!uFnUpdateAll)
	{
		uFnUpdateAll = UFunction::FindFunction("Function REDGame.REDHUD_Battle.UpdateAll");
	}

	AREDHUD_Battle_execUpdateAll_Params UpdateAll_Params;
	memset(&UpdateAll_Params, 0, sizeof(UpdateAll_Params));

	this->ProcessEvent(uFnUpdateAll, &UpdateAll_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.PostRender
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::PostRender()
{
	static UFunction* uFnPostRender = nullptr;

	if (!uFnPostRender)
	{
		uFnPostRender = UFunction::FindFunction("Function REDGame.REDHUD_Battle.PostRender");
	}

	AREDHUD_Battle_execPostRender_Params PostRender_Params;
	memset(&PostRender_Params, 0, sizeof(PostRender_Params));

	this->ProcessEvent(uFnPostRender, &PostRender_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.ResetCardInfo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::eventResetCardInfo()
{
	static UFunction* uFnResetCardInfo = nullptr;

	if (!uFnResetCardInfo)
	{
		uFnResetCardInfo = UFunction::FindFunction("Function REDGame.REDHUD_Battle.ResetCardInfo");
	}

	AREDHUD_Battle_eventResetCardInfo_Params ResetCardInfo_Params;
	memset(&ResetCardInfo_Params, 0, sizeof(ResetCardInfo_Params));

	this->ProcessEvent(uFnResetCardInfo, &ResetCardInfo_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.ResetOnRound
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::eventResetOnRound()
{
	static UFunction* uFnResetOnRound = nullptr;

	if (!uFnResetOnRound)
	{
		uFnResetOnRound = UFunction::FindFunction("Function REDGame.REDHUD_Battle.ResetOnRound");
	}

	AREDHUD_Battle_eventResetOnRound_Params ResetOnRound_Params;
	memset(&ResetOnRound_Params, 0, sizeof(ResetOnRound_Params));

	this->ProcessEvent(uFnResetOnRound, &ResetOnRound_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDHUD_Battle::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDHUD_Battle.Tick");
	}

	AREDHUD_Battle_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.SetupCardInfo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::eventSetupCardInfo()
{
	static UFunction* uFnSetupCardInfo = nullptr;

	if (!uFnSetupCardInfo)
	{
		uFnSetupCardInfo = UFunction::FindFunction("Function REDGame.REDHUD_Battle.SetupCardInfo");
	}

	AREDHUD_Battle_eventSetupCardInfo_Params SetupCardInfo_Params;
	memset(&SetupCardInfo_Params, 0, sizeof(SetupCardInfo_Params));

	this->ProcessEvent(uFnSetupCardInfo, &SetupCardInfo_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.PostBeginPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function REDGame.REDHUD_Battle.PostBeginPlay");
	}

	AREDHUD_Battle_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDHUD_Battle::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function REDGame.REDHUD_Battle.PreBeginPlay");
	}

	AREDHUD_Battle_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.IsMapCycleTransitioning
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDHUD_Battle::IsMapCycleTransitioning()
{
	static UFunction* uFnIsMapCycleTransitioning = nullptr;

	if (!uFnIsMapCycleTransitioning)
	{
		uFnIsMapCycleTransitioning = UFunction::FindFunction("Function REDGame.REDHUD_Battle.IsMapCycleTransitioning");
	}

	AREDHUD_Battle_execIsMapCycleTransitioning_Params IsMapCycleTransitioning_Params;
	memset(&IsMapCycleTransitioning_Params, 0, sizeof(IsMapCycleTransitioning_Params));

	this->ProcessEvent(uFnIsMapCycleTransitioning, &IsMapCycleTransitioning_Params, nullptr);

	return IsMapCycleTransitioning_Params.ReturnValue;
};

// Function REDGame.REDHUD_Battle.SetupBeginPlay
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39820])
// Parameter Info:

void AREDHUD_Battle::SetupBeginPlay()
{
	static UFunction* uFnSetupBeginPlay = nullptr;

	if (!uFnSetupBeginPlay)
	{
		uFnSetupBeginPlay = UFunction::FindFunction("Function REDGame.REDHUD_Battle.SetupBeginPlay");
	}

	AREDHUD_Battle_execSetupBeginPlay_Params SetupBeginPlay_Params;
	memset(&SetupBeginPlay_Params, 0, sizeof(SetupBeginPlay_Params));

	this->ProcessEvent(uFnSetupBeginPlay, &SetupBeginPlay_Params, nullptr);
};

// Function REDGame.REDHUD_Battle.GetGameVersionString
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37065])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AREDHUD_Battle::GetGameVersionString()
{
	static UFunction* uFnGetGameVersionString = nullptr;

	if (!uFnGetGameVersionString)
	{
		uFnGetGameVersionString = UFunction::FindFunction("Function REDGame.REDHUD_Battle.GetGameVersionString");
	}

	AREDHUD_Battle_execGetGameVersionString_Params GetGameVersionString_Params;
	memset(&GetGameVersionString_Params, 0, sizeof(GetGameVersionString_Params));

	this->ProcessEvent(uFnGetGameVersionString, &GetGameVersionString_Params, nullptr);

	return GetGameVersionString_Params.ReturnValue;
};

// Function REDGame.REDHUD_Battle.GetDanToString
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37043])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        Dan                            (CPF_Parm)

class FString AREDHUD_Battle::GetDanToString(int32_t Dan)
{
	static UFunction* uFnGetDanToString = nullptr;

	if (!uFnGetDanToString)
	{
		uFnGetDanToString = UFunction::FindFunction("Function REDGame.REDHUD_Battle.GetDanToString");
	}

	AREDHUD_Battle_execGetDanToString_Params GetDanToString_Params;
	memset(&GetDanToString_Params, 0, sizeof(GetDanToString_Params));
	memcpy_s(&GetDanToString_Params.Dan, sizeof(GetDanToString_Params.Dan), &Dan, sizeof(Dan));

	this->ProcessEvent(uFnGetDanToString, &GetDanToString_Params, nullptr);

	return GetDanToString_Params.ReturnValue;
};

// Function REDGame.REDMaterialSetArray.GetMaterialDataIndexFromMeshName
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37095])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    MeshName                       (CPF_Parm)

int32_t UREDMaterialSetArray::GetMaterialDataIndexFromMeshName(const class FName& MeshName)
{
	static UFunction* uFnGetMaterialDataIndexFromMeshName = nullptr;

	if (!uFnGetMaterialDataIndexFromMeshName)
	{
		uFnGetMaterialDataIndexFromMeshName = UFunction::FindFunction("Function REDGame.REDMaterialSetArray.GetMaterialDataIndexFromMeshName");
	}

	UREDMaterialSetArray_execGetMaterialDataIndexFromMeshName_Params GetMaterialDataIndexFromMeshName_Params;
	memset(&GetMaterialDataIndexFromMeshName_Params, 0, sizeof(GetMaterialDataIndexFromMeshName_Params));
	memcpy_s(&GetMaterialDataIndexFromMeshName_Params.MeshName, sizeof(GetMaterialDataIndexFromMeshName_Params.MeshName), &MeshName, sizeof(MeshName));

	this->ProcessEvent(uFnGetMaterialDataIndexFromMeshName, &GetMaterialDataIndexFromMeshName_Params, nullptr);

	return GetMaterialDataIndexFromMeshName_Params.ReturnValue;
};

// Function REDGame.REDMeshPool.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void UREDMeshPool::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDMeshPool.DisplayDebug");
	}

	UREDMeshPool_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDMeshPool.ResetPool
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39387])
// Parameter Info:

void UREDMeshPool::ResetPool()
{
	static UFunction* uFnResetPool = nullptr;

	if (!uFnResetPool)
	{
		uFnResetPool = UFunction::FindFunction("Function REDGame.REDMeshPool.ResetPool");
	}

	UREDMeshPool_execResetPool_Params ResetPool_Params;
	memset(&ResetPool_Params, 0, sizeof(ResetPool_Params));

	this->ProcessEvent(uFnResetPool, &ResetPool_Params, nullptr);
};

// Function REDGame.REDMeshPool.InitPool
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37542])
// Parameter Info:

void UREDMeshPool::InitPool()
{
	static UFunction* uFnInitPool = nullptr;

	if (!uFnInitPool)
	{
		uFnInitPool = UFunction::FindFunction("Function REDGame.REDMeshPool.InitPool");
	}

	UREDMeshPool_execInitPool_Params InitPool_Params;
	memset(&InitPool_Params, 0, sizeof(InitPool_Params));

	this->ProcessEvent(uFnInitPool, &InitPool_Params, nullptr);
};

// Function REDGame.REDMeshPool.GetFreeMaterialInstanceConstant
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37062])
// Parameter Info:
// class UMaterialInstanceConstant* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bCreateNewObject               (CPF_OptionalParm | CPF_Parm)

class UMaterialInstanceConstant* UREDMeshPool::GetFreeMaterialInstanceConstant(bool bCreateNewObject)
{
	static UFunction* uFnGetFreeMaterialInstanceConstant = nullptr;

	if (!uFnGetFreeMaterialInstanceConstant)
	{
		uFnGetFreeMaterialInstanceConstant = UFunction::FindFunction("Function REDGame.REDMeshPool.GetFreeMaterialInstanceConstant");
	}

	UREDMeshPool_execGetFreeMaterialInstanceConstant_Params GetFreeMaterialInstanceConstant_Params;
	memset(&GetFreeMaterialInstanceConstant_Params, 0, sizeof(GetFreeMaterialInstanceConstant_Params));
	GetFreeMaterialInstanceConstant_Params.bCreateNewObject = bCreateNewObject;

	this->ProcessEvent(uFnGetFreeMaterialInstanceConstant, &GetFreeMaterialInstanceConstant_Params, nullptr);

	return GetFreeMaterialInstanceConstant_Params.ReturnValue;
};

// Function REDGame.REDMeshPool.GetFreeSkeletalMeshComponent
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37063])
// Parameter Info:
// class USkeletalMeshComponent*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// uint32_t                       bCreateNewObject               (CPF_OptionalParm | CPF_Parm)

class USkeletalMeshComponent* UREDMeshPool::GetFreeSkeletalMeshComponent(bool bCreateNewObject)
{
	static UFunction* uFnGetFreeSkeletalMeshComponent = nullptr;

	if (!uFnGetFreeSkeletalMeshComponent)
	{
		uFnGetFreeSkeletalMeshComponent = UFunction::FindFunction("Function REDGame.REDMeshPool.GetFreeSkeletalMeshComponent");
	}

	UREDMeshPool_execGetFreeSkeletalMeshComponent_Params GetFreeSkeletalMeshComponent_Params;
	memset(&GetFreeSkeletalMeshComponent_Params, 0, sizeof(GetFreeSkeletalMeshComponent_Params));
	GetFreeSkeletalMeshComponent_Params.bCreateNewObject = bCreateNewObject;

	this->ProcessEvent(uFnGetFreeSkeletalMeshComponent, &GetFreeSkeletalMeshComponent_Params, nullptr);

	return GetFreeSkeletalMeshComponent_Params.ReturnValue;
};

// Function REDGame.REDMeshPool.ReturnToMaterialInstanceFromPawn
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39406])
// Parameter Info:
// class AREDPawn*                ReleasePawn                    (CPF_Parm)

void UREDMeshPool::ReturnToMaterialInstanceFromPawn(class AREDPawn* ReleasePawn)
{
	static UFunction* uFnReturnToMaterialInstanceFromPawn = nullptr;

	if (!uFnReturnToMaterialInstanceFromPawn)
	{
		uFnReturnToMaterialInstanceFromPawn = UFunction::FindFunction("Function REDGame.REDMeshPool.ReturnToMaterialInstanceFromPawn");
	}

	UREDMeshPool_execReturnToMaterialInstanceFromPawn_Params ReturnToMaterialInstanceFromPawn_Params;
	memset(&ReturnToMaterialInstanceFromPawn_Params, 0, sizeof(ReturnToMaterialInstanceFromPawn_Params));
	ReturnToMaterialInstanceFromPawn_Params.ReleasePawn = ReleasePawn;

	this->ProcessEvent(uFnReturnToMaterialInstanceFromPawn, &ReturnToMaterialInstanceFromPawn_Params, nullptr);
};

// Function REDGame.REDMeshPool.ReturnToSkeletalMeshComponentFromPawn
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39407])
// Parameter Info:
// class AREDPawn*                ReleasePawn                    (CPF_Parm)

void UREDMeshPool::ReturnToSkeletalMeshComponentFromPawn(class AREDPawn* ReleasePawn)
{
	static UFunction* uFnReturnToSkeletalMeshComponentFromPawn = nullptr;

	if (!uFnReturnToSkeletalMeshComponentFromPawn)
	{
		uFnReturnToSkeletalMeshComponentFromPawn = UFunction::FindFunction("Function REDGame.REDMeshPool.ReturnToSkeletalMeshComponentFromPawn");
	}

	UREDMeshPool_execReturnToSkeletalMeshComponentFromPawn_Params ReturnToSkeletalMeshComponentFromPawn_Params;
	memset(&ReturnToSkeletalMeshComponentFromPawn_Params, 0, sizeof(ReturnToSkeletalMeshComponentFromPawn_Params));
	ReturnToSkeletalMeshComponentFromPawn_Params.ReleasePawn = ReleasePawn;

	this->ProcessEvent(uFnReturnToSkeletalMeshComponentFromPawn, &ReturnToSkeletalMeshComponentFromPawn_Params, nullptr);
};

// Function REDGame.REDMeshPool.FreeMaterialInstanceConstant
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36910])
// Parameter Info:
// class UMaterialInstanceConstant* MIC                            (CPF_Parm)

void UREDMeshPool::FreeMaterialInstanceConstant(class UMaterialInstanceConstant* MIC)
{
	static UFunction* uFnFreeMaterialInstanceConstant = nullptr;

	if (!uFnFreeMaterialInstanceConstant)
	{
		uFnFreeMaterialInstanceConstant = UFunction::FindFunction("Function REDGame.REDMeshPool.FreeMaterialInstanceConstant");
	}

	UREDMeshPool_execFreeMaterialInstanceConstant_Params FreeMaterialInstanceConstant_Params;
	memset(&FreeMaterialInstanceConstant_Params, 0, sizeof(FreeMaterialInstanceConstant_Params));
	FreeMaterialInstanceConstant_Params.MIC = MIC;

	this->ProcessEvent(uFnFreeMaterialInstanceConstant, &FreeMaterialInstanceConstant_Params, nullptr);
};

// Function REDGame.REDMeshPool.FreeSkeletalMeshComponent
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36911])
// Parameter Info:
// class USkeletalMeshComponent*  SKMeshComponent                (CPF_Parm | CPF_EditInline)

void UREDMeshPool::FreeSkeletalMeshComponent(class USkeletalMeshComponent* SKMeshComponent)
{
	static UFunction* uFnFreeSkeletalMeshComponent = nullptr;

	if (!uFnFreeSkeletalMeshComponent)
	{
		uFnFreeSkeletalMeshComponent = UFunction::FindFunction("Function REDGame.REDMeshPool.FreeSkeletalMeshComponent");
	}

	UREDMeshPool_execFreeSkeletalMeshComponent_Params FreeSkeletalMeshComponent_Params;
	memset(&FreeSkeletalMeshComponent_Params, 0, sizeof(FreeSkeletalMeshComponent_Params));
	FreeSkeletalMeshComponent_Params.SKMeshComponent = SKMeshComponent;

	this->ProcessEvent(uFnFreeSkeletalMeshComponent, &FreeSkeletalMeshComponent_Params, nullptr);
};

// Function REDGame.REDParticle.CreateParticle
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36336])
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class AActor*                  Actor                          (CPF_Parm)
// struct FParticleArg            Arg                            (CPF_Const | CPF_Parm | CPF_OutParm)

class UParticleSystemComponent* UREDParticle::CreateParticle(class AActor* Actor, struct FParticleArg& Arg)
{
	static UFunction* uFnCreateParticle = nullptr;

	if (!uFnCreateParticle)
	{
		uFnCreateParticle = UFunction::FindFunction("Function REDGame.REDParticle.CreateParticle");
	}

	UREDParticle_execCreateParticle_Params CreateParticle_Params;
	memset(&CreateParticle_Params, 0, sizeof(CreateParticle_Params));
	CreateParticle_Params.Actor = Actor;
	memcpy_s(&CreateParticle_Params.Arg, sizeof(CreateParticle_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnCreateParticle, &CreateParticle_Params, nullptr);

	memcpy_s(&Arg, sizeof(Arg), &CreateParticle_Params.Arg, sizeof(CreateParticle_Params.Arg));

	return CreateParticle_Params.ReturnValue;
};

// Function REDGame.REDParticleMaterialInfo.Setup
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[28188])
// Parameter Info:
// class AREDPawn*                ParentPawn                     (CPF_Parm)
// class UREDParticleColorInfo*   SetColorInfo                   (CPF_Parm)

void UREDParticleMaterialInfo::Setup(class AREDPawn* ParentPawn, class UREDParticleColorInfo* SetColorInfo)
{
	static UFunction* uFnSetup = nullptr;

	if (!uFnSetup)
	{
		uFnSetup = UFunction::FindFunction("Function REDGame.REDParticleMaterialInfo.Setup");
	}

	UREDParticleMaterialInfo_execSetup_Params Setup_Params;
	memset(&Setup_Params, 0, sizeof(Setup_Params));
	Setup_Params.ParentPawn = ParentPawn;
	Setup_Params.SetColorInfo = SetColorInfo;

	this->ProcessEvent(uFnSetup, &Setup_Params, nullptr);
};

// Function REDGame.REDPawnMaterials.GetMaterialSetArrayFromPatternName
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37096])
// Parameter Info:
// class UREDMaterialSetArray*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    PatternName                    (CPF_OptionalParm | CPF_Parm)

class UREDMaterialSetArray* UREDPawnMaterials::GetMaterialSetArrayFromPatternName(const class FName& PatternName)
{
	static UFunction* uFnGetMaterialSetArrayFromPatternName = nullptr;

	if (!uFnGetMaterialSetArrayFromPatternName)
	{
		uFnGetMaterialSetArrayFromPatternName = UFunction::FindFunction("Function REDGame.REDPawnMaterials.GetMaterialSetArrayFromPatternName");
	}

	UREDPawnMaterials_execGetMaterialSetArrayFromPatternName_Params GetMaterialSetArrayFromPatternName_Params;
	memset(&GetMaterialSetArrayFromPatternName_Params, 0, sizeof(GetMaterialSetArrayFromPatternName_Params));
	memcpy_s(&GetMaterialSetArrayFromPatternName_Params.PatternName, sizeof(GetMaterialSetArrayFromPatternName_Params.PatternName), &PatternName, sizeof(PatternName));

	this->ProcessEvent(uFnGetMaterialSetArrayFromPatternName, &GetMaterialSetArrayFromPatternName_Params, nullptr);

	return GetMaterialSetArrayFromPatternName_Params.ReturnValue;
};

// Function REDGame.REDPlayerController.InitREDPlayerController
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController::InitREDPlayerController()
{
	static UFunction* uFnInitREDPlayerController = nullptr;

	if (!uFnInitREDPlayerController)
	{
		uFnInitREDPlayerController = UFunction::FindFunction("Function REDGame.REDPlayerController.InitREDPlayerController");
	}

	AREDPlayerController_execInitREDPlayerController_Params InitREDPlayerController_Params;
	memset(&InitREDPlayerController_Params, 0, sizeof(InitREDPlayerController_Params));

	this->ProcessEvent(uFnInitREDPlayerController, &InitREDPlayerController_Params, nullptr);
};

// Function REDGame.REDPlayerController.ClientSetHUD
// [0x010201C2] (FUNC_Defined | FUNC_Net | FUNC_NetReliable | FUNC_Simulated | FUNC_Public | FUNC_NetClient | FUNC_AllFlags)
// Parameter Info:
// class UClass*                  newHUDType                     (CPF_Parm)

void AREDPlayerController::ClientSetHUD(class UClass* newHUDType)
{
	static UFunction* uFnClientSetHUD = nullptr;

	if (!uFnClientSetHUD)
	{
		uFnClientSetHUD = UFunction::FindFunction("Function REDGame.REDPlayerController.ClientSetHUD");
	}

	AREDPlayerController_execClientSetHUD_Params ClientSetHUD_Params;
	memset(&ClientSetHUD_Params, 0, sizeof(ClientSetHUD_Params));
	ClientSetHUD_Params.newHUDType = newHUDType;

	this->ProcessEvent(uFnClientSetHUD, &ClientSetHUD_Params, nullptr);
};

// Function REDGame.REDPlayerController.UpdateRotation
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDPlayerController::UpdateRotation(float DeltaTime)
{
	static UFunction* uFnUpdateRotation = nullptr;

	if (!uFnUpdateRotation)
	{
		uFnUpdateRotation = UFunction::FindFunction("Function REDGame.REDPlayerController.UpdateRotation");
	}

	AREDPlayerController_execUpdateRotation_Params UpdateRotation_Params;
	memset(&UpdateRotation_Params, 0, sizeof(UpdateRotation_Params));
	memcpy_s(&UpdateRotation_Params.DeltaTime, sizeof(UpdateRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateRotation, &UpdateRotation_Params, nullptr);
};

// Function REDGame.REDPlayerController.PostBeginPlay
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function REDGame.REDPlayerController.PostBeginPlay");
	}

	AREDPlayerController_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function REDGame.REDPlayerController.StartFire
// [0x00024200] (FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint8_t                        FireModeNum                    (CPF_OptionalParm | CPF_Parm)

void AREDPlayerController::StartFire(uint8_t FireModeNum)
{
	static UFunction* uFnStartFire = nullptr;

	if (!uFnStartFire)
	{
		uFnStartFire = UFunction::FindFunction("Function REDGame.REDPlayerController.StartFire");
	}

	AREDPlayerController_execStartFire_Params StartFire_Params;
	memset(&StartFire_Params, 0, sizeof(StartFire_Params));
	memcpy_s(&StartFire_Params.FireModeNum, sizeof(StartFire_Params.FireModeNum), &FireModeNum, sizeof(FireModeNum));

	this->ProcessEvent(uFnStartFire, &StartFire_Params, nullptr);
};

// Function REDGame.REDPlayerController.Pause
// [0x00020200] (FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController::Pause()
{
	static UFunction* uFnPause = nullptr;

	if (!uFnPause)
	{
		uFnPause = UFunction::FindFunction("Function REDGame.REDPlayerController.Pause");
	}

	AREDPlayerController_execPause_Params Pause_Params;
	memset(&Pause_Params, 0, sizeof(Pause_Params));

	this->ProcessEvent(uFnPause, &Pause_Params, nullptr);
};

// Function REDGame.REDPlayerController.ZoomOut
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController::ZoomOut()
{
	static UFunction* uFnZoomOut = nullptr;

	if (!uFnZoomOut)
	{
		uFnZoomOut = UFunction::FindFunction("Function REDGame.REDPlayerController.ZoomOut");
	}

	AREDPlayerController_execZoomOut_Params ZoomOut_Params;
	memset(&ZoomOut_Params, 0, sizeof(ZoomOut_Params));

	this->ProcessEvent(uFnZoomOut, &ZoomOut_Params, nullptr);
};

// Function REDGame.REDPlayerController.ZoomIn
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController::ZoomIn()
{
	static UFunction* uFnZoomIn = nullptr;

	if (!uFnZoomIn)
	{
		uFnZoomIn = UFunction::FindFunction("Function REDGame.REDPlayerController.ZoomIn");
	}

	AREDPlayerController_execZoomIn_Params ZoomIn_Params;
	memset(&ZoomIn_Params, 0, sizeof(ZoomIn_Params));

	this->ProcessEvent(uFnZoomIn, &ZoomIn_Params, nullptr);
};

// Function REDGame.REDPlayerController.ChangeCamera
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ClassName                      (CPF_Parm | CPF_NeedCtorLink)

void AREDPlayerController::ChangeCamera(const class FString& ClassName)
{
	static UFunction* uFnChangeCamera = nullptr;

	if (!uFnChangeCamera)
	{
		uFnChangeCamera = UFunction::FindFunction("Function REDGame.REDPlayerController.ChangeCamera");
	}

	AREDPlayerController_execChangeCamera_Params ChangeCamera_Params;
	memset(&ChangeCamera_Params, 0, sizeof(ChangeCamera_Params));
	memcpy_s(&ChangeCamera_Params.ClassName, sizeof(ChangeCamera_Params.ClassName), &ClassName, sizeof(ClassName));

	this->ProcessEvent(uFnChangeCamera, &ChangeCamera_Params, nullptr);
};

// Function REDGame.REDPlayerController.ChangeControls
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ClassName                      (CPF_Parm | CPF_NeedCtorLink)

void AREDPlayerController::ChangeControls(const class FString& ClassName)
{
	static UFunction* uFnChangeControls = nullptr;

	if (!uFnChangeControls)
	{
		uFnChangeControls = UFunction::FindFunction("Function REDGame.REDPlayerController.ChangeControls");
	}

	AREDPlayerController_execChangeControls_Params ChangeControls_Params;
	memset(&ChangeControls_Params, 0, sizeof(ChangeControls_Params));
	memcpy_s(&ChangeControls_Params.ClassName, sizeof(ChangeControls_Params.ClassName), &ClassName, sizeof(ClassName));

	this->ProcessEvent(uFnChangeControls, &ChangeControls_Params, nullptr);
};

// Function REDGame.REDPlayerController.PauseGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController::PauseGame()
{
	static UFunction* uFnPauseGame = nullptr;

	if (!uFnPauseGame)
	{
		uFnPauseGame = UFunction::FindFunction("Function REDGame.REDPlayerController.PauseGame");
	}

	AREDPlayerController_execPauseGame_Params PauseGame_Params;
	memset(&PauseGame_Params, 0, sizeof(PauseGame_Params));

	this->ProcessEvent(uFnPauseGame, &PauseGame_Params, nullptr);
};

// Function REDGame.REDPlayerController.CanPauseGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AREDPlayerController*    PC                             (CPF_Parm)

bool AREDPlayerController::CanPauseGame(class AREDPlayerController* PC)
{
	static UFunction* uFnCanPauseGame = nullptr;

	if (!uFnCanPauseGame)
	{
		uFnCanPauseGame = UFunction::FindFunction("Function REDGame.REDPlayerController.CanPauseGame");
	}

	AREDPlayerController_execCanPauseGame_Params CanPauseGame_Params;
	memset(&CanPauseGame_Params, 0, sizeof(CanPauseGame_Params));
	CanPauseGame_Params.PC = PC;

	this->ProcessEvent(uFnCanPauseGame, &CanPauseGame_Params, nullptr);

	return CanPauseGame_Params.ReturnValue;
};

// Function REDGame.REDPlayerController.ConditionalPauseGame
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        InputID                        (CPF_OptionalParm | CPF_Parm)

void AREDPlayerController::eventConditionalPauseGame(int32_t InputID)
{
	static UFunction* uFnConditionalPauseGame = nullptr;

	if (!uFnConditionalPauseGame)
	{
		uFnConditionalPauseGame = UFunction::FindFunction("Function REDGame.REDPlayerController.ConditionalPauseGame");
	}

	AREDPlayerController_eventConditionalPauseGame_Params ConditionalPauseGame_Params;
	memset(&ConditionalPauseGame_Params, 0, sizeof(ConditionalPauseGame_Params));
	memcpy_s(&ConditionalPauseGame_Params.InputID, sizeof(ConditionalPauseGame_Params.InputID), &InputID, sizeof(InputID));

	this->ProcessEvent(uFnConditionalPauseGame, &ConditionalPauseGame_Params, nullptr);
};

// Function REDGame.REDPlayerController.ShowMenu
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController::ShowMenu()
{
	static UFunction* uFnShowMenu = nullptr;

	if (!uFnShowMenu)
	{
		uFnShowMenu = UFunction::FindFunction("Function REDGame.REDPlayerController.ShowMenu");
	}

	AREDPlayerController_execShowMenu_Params ShowMenu_Params;
	memset(&ShowMenu_Params, 0, sizeof(ShowMenu_Params));

	this->ProcessEvent(uFnShowMenu, &ShowMenu_Params, nullptr);
};

// Function REDGame.REDPlayerController.IsOnlineRollback
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[22938])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPlayerController::IsOnlineRollback()
{
	static UFunction* uFnIsOnlineRollback = nullptr;

	if (!uFnIsOnlineRollback)
	{
		uFnIsOnlineRollback = UFunction::FindFunction("Function REDGame.REDPlayerController.IsOnlineRollback");
	}

	AREDPlayerController_execIsOnlineRollback_Params IsOnlineRollback_Params;
	memset(&IsOnlineRollback_Params, 0, sizeof(IsOnlineRollback_Params));

	this->ProcessEvent(uFnIsOnlineRollback, &IsOnlineRollback_Params, nullptr);

	return IsOnlineRollback_Params.ReturnValue;
};

// Function REDGame.REDPlayerController_Adv.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController_Adv::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function REDGame.REDPlayerController_Adv.PreBeginPlay");
	}

	AREDPlayerController_Adv_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function REDGame.REDPlayerController_Adv.InitPlayerController_Adv
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37540])
// Parameter Info:

void AREDPlayerController_Adv::InitPlayerController_Adv()
{
	static UFunction* uFnInitPlayerController_Adv = nullptr;

	if (!uFnInitPlayerController_Adv)
	{
		uFnInitPlayerController_Adv = UFunction::FindFunction("Function REDGame.REDPlayerController_Adv.InitPlayerController_Adv");
	}

	AREDPlayerController_Adv_execInitPlayerController_Adv_Params InitPlayerController_Adv_Params;
	memset(&InitPlayerController_Adv_Params, 0, sizeof(InitPlayerController_Adv_Params));

	this->ProcessEvent(uFnInitPlayerController_Adv, &InitPlayerController_Adv_Params, nullptr);
};

// Function REDGame.REDPlayerController_DigitalFigure.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController_DigitalFigure::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function REDGame.REDPlayerController_DigitalFigure.PreBeginPlay");
	}

	AREDPlayerController_DigitalFigure_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function REDGame.REDPlayerController_DigitalFigure.InitPlayerController_DigitalFigure
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37541])
// Parameter Info:

void AREDPlayerController_DigitalFigure::InitPlayerController_DigitalFigure()
{
	static UFunction* uFnInitPlayerController_DigitalFigure = nullptr;

	if (!uFnInitPlayerController_DigitalFigure)
	{
		uFnInitPlayerController_DigitalFigure = UFunction::FindFunction("Function REDGame.REDPlayerController_DigitalFigure.InitPlayerController_DigitalFigure");
	}

	AREDPlayerController_DigitalFigure_execInitPlayerController_DigitalFigure_Params InitPlayerController_DigitalFigure_Params;
	memset(&InitPlayerController_DigitalFigure_Params, 0, sizeof(InitPlayerController_DigitalFigure_Params));

	this->ProcessEvent(uFnInitPlayerController_DigitalFigure, &InitPlayerController_DigitalFigure_Params, nullptr);
};

// Function REDGame.REDPointLightManager.DebugDisp
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AGameInfo*               Info                           (CPF_Parm)
// uint32_t                       bDisp                          (CPF_Parm)

void UREDPointLightManager::eventDebugDisp(class AGameInfo* Info, bool bDisp)
{
	static UFunction* uFnDebugDisp = nullptr;

	if (!uFnDebugDisp)
	{
		uFnDebugDisp = UFunction::FindFunction("Function REDGame.REDPointLightManager.DebugDisp");
	}

	UREDPointLightManager_eventDebugDisp_Params DebugDisp_Params;
	memset(&DebugDisp_Params, 0, sizeof(DebugDisp_Params));
	DebugDisp_Params.Info = Info;
	DebugDisp_Params.bDisp = bDisp;

	this->ProcessEvent(uFnDebugDisp, &DebugDisp_Params, nullptr);
};

// Function REDGame.REDPointLightManager.PostUpdate
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[26347])
// Parameter Info:

void UREDPointLightManager::PostUpdate()
{
	static UFunction* uFnPostUpdate = nullptr;

	if (!uFnPostUpdate)
	{
		uFnPostUpdate = UFunction::FindFunction("Function REDGame.REDPointLightManager.PostUpdate");
	}

	UREDPointLightManager_execPostUpdate_Params PostUpdate_Params;
	memset(&PostUpdate_Params, 0, sizeof(PostUpdate_Params));

	this->ProcessEvent(uFnPostUpdate, &PostUpdate_Params, nullptr);
};

// Function REDGame.REDPointLightManager.UpdateCalledOn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40610])
// Parameter Info:
// int32_t                        Id                             (CPF_Parm)

void UREDPointLightManager::UpdateCalledOn(int32_t Id)
{
	static UFunction* uFnUpdateCalledOn = nullptr;

	if (!uFnUpdateCalledOn)
	{
		uFnUpdateCalledOn = UFunction::FindFunction("Function REDGame.REDPointLightManager.UpdateCalledOn");
	}

	UREDPointLightManager_execUpdateCalledOn_Params UpdateCalledOn_Params;
	memset(&UpdateCalledOn_Params, 0, sizeof(UpdateCalledOn_Params));
	memcpy_s(&UpdateCalledOn_Params.Id, sizeof(UpdateCalledOn_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnUpdateCalledOn, &UpdateCalledOn_Params, nullptr);
};

// Function REDGame.REDPointLightManager.NativeDebugDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38512])
// Parameter Info:
// uint32_t                       bDisp                          (CPF_Parm)

void UREDPointLightManager::NativeDebugDisp(bool bDisp)
{
	static UFunction* uFnNativeDebugDisp = nullptr;

	if (!uFnNativeDebugDisp)
	{
		uFnNativeDebugDisp = UFunction::FindFunction("Function REDGame.REDPointLightManager.NativeDebugDisp");
	}

	UREDPointLightManager_execNativeDebugDisp_Params NativeDebugDisp_Params;
	memset(&NativeDebugDisp_Params, 0, sizeof(NativeDebugDisp_Params));
	NativeDebugDisp_Params.bDisp = bDisp;

	this->ProcessEvent(uFnNativeDebugDisp, &NativeDebugDisp_Params, nullptr);
};

// Function REDGame.REDPointLightManager.Tick
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[317])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDPointLightManager::Tick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDPointLightManager.Tick");
	}

	UREDPointLightManager_execTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDPointLightManager.GetClosestPointLight
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37021])
// Parameter Info:
// struct FVector                 Location                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FLinearColor            LightPositionAndCutoff         (CPF_Parm | CPF_OutParm)
// struct FLinearColor            LightColor                     (CPF_Parm | CPF_OutParm)

void UREDPointLightManager::GetClosestPointLight(struct FVector& Location, struct FLinearColor& LightPositionAndCutoff, struct FLinearColor& LightColor)
{
	static UFunction* uFnGetClosestPointLight = nullptr;

	if (!uFnGetClosestPointLight)
	{
		uFnGetClosestPointLight = UFunction::FindFunction("Function REDGame.REDPointLightManager.GetClosestPointLight");
	}

	UREDPointLightManager_execGetClosestPointLight_Params GetClosestPointLight_Params;
	memset(&GetClosestPointLight_Params, 0, sizeof(GetClosestPointLight_Params));
	memcpy_s(&GetClosestPointLight_Params.Location, sizeof(GetClosestPointLight_Params.Location), &Location, sizeof(Location));
	memcpy_s(&GetClosestPointLight_Params.LightPositionAndCutoff, sizeof(GetClosestPointLight_Params.LightPositionAndCutoff), &LightPositionAndCutoff, sizeof(LightPositionAndCutoff));
	memcpy_s(&GetClosestPointLight_Params.LightColor, sizeof(GetClosestPointLight_Params.LightColor), &LightColor, sizeof(LightColor));

	this->ProcessEvent(uFnGetClosestPointLight, &GetClosestPointLight_Params, nullptr);

	memcpy_s(&Location, sizeof(Location), &GetClosestPointLight_Params.Location, sizeof(GetClosestPointLight_Params.Location));
	memcpy_s(&LightPositionAndCutoff, sizeof(LightPositionAndCutoff), &GetClosestPointLight_Params.LightPositionAndCutoff, sizeof(GetClosestPointLight_Params.LightPositionAndCutoff));
	memcpy_s(&LightColor, sizeof(LightColor), &GetClosestPointLight_Params.LightColor, sizeof(GetClosestPointLight_Params.LightColor));
};

// Function REDGame.REDPointLightManager.UnregistLight
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40588])
// Parameter Info:
// int32_t                        Id                             (CPF_Parm)

void UREDPointLightManager::UnregistLight(int32_t Id)
{
	static UFunction* uFnUnregistLight = nullptr;

	if (!uFnUnregistLight)
	{
		uFnUnregistLight = UFunction::FindFunction("Function REDGame.REDPointLightManager.UnregistLight");
	}

	UREDPointLightManager_execUnregistLight_Params UnregistLight_Params;
	memset(&UnregistLight_Params, 0, sizeof(UnregistLight_Params));
	memcpy_s(&UnregistLight_Params.Id, sizeof(UnregistLight_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnUnregistLight, &UnregistLight_Params, nullptr);
};

// Function REDGame.REDPointLightManager.UpdateLight
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40749])
// Parameter Info:
// int32_t                        Id                             (CPF_Parm)
// struct FVector                 NewLocation                    (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FLinearColor            NewLightColor                  (CPF_Const | CPF_Parm | CPF_OutParm)

void UREDPointLightManager::UpdateLight(int32_t Id, struct FVector& NewLocation, struct FLinearColor& NewLightColor)
{
	static UFunction* uFnUpdateLight = nullptr;

	if (!uFnUpdateLight)
	{
		uFnUpdateLight = UFunction::FindFunction("Function REDGame.REDPointLightManager.UpdateLight");
	}

	UREDPointLightManager_execUpdateLight_Params UpdateLight_Params;
	memset(&UpdateLight_Params, 0, sizeof(UpdateLight_Params));
	memcpy_s(&UpdateLight_Params.Id, sizeof(UpdateLight_Params.Id), &Id, sizeof(Id));
	memcpy_s(&UpdateLight_Params.NewLocation, sizeof(UpdateLight_Params.NewLocation), &NewLocation, sizeof(NewLocation));
	memcpy_s(&UpdateLight_Params.NewLightColor, sizeof(UpdateLight_Params.NewLightColor), &NewLightColor, sizeof(NewLightColor));

	this->ProcessEvent(uFnUpdateLight, &UpdateLight_Params, nullptr);

	memcpy_s(&NewLocation, sizeof(NewLocation), &UpdateLight_Params.NewLocation, sizeof(UpdateLight_Params.NewLocation));
	memcpy_s(&NewLightColor, sizeof(NewLightColor), &UpdateLight_Params.NewLightColor, sizeof(UpdateLight_Params.NewLightColor));
};

// Function REDGame.REDPointLightManager.UpdateLightDebug
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40750])
// Parameter Info:
// int32_t                        Id                             (CPF_Parm)
// float                          amp                            (CPF_Parm)
// float                          Freq                           (CPF_Parm)
// float                          Amplify                        (CPF_Parm)
// float                          Attenuation                    (CPF_Parm)
// float                          Range                          (CPF_Parm)
// float                          Cutoff                         (CPF_Parm)
// float                          distanceMultiply               (CPF_Parm)
// struct FVector                 NewLocation                    (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FLinearColor            NewLightColor                  (CPF_Const | CPF_Parm | CPF_OutParm)

void UREDPointLightManager::UpdateLightDebug(int32_t Id, float amp, float Freq, float Amplify, float Attenuation, float Range, float Cutoff, float distanceMultiply, struct FVector& NewLocation, struct FLinearColor& NewLightColor)
{
	static UFunction* uFnUpdateLightDebug = nullptr;

	if (!uFnUpdateLightDebug)
	{
		uFnUpdateLightDebug = UFunction::FindFunction("Function REDGame.REDPointLightManager.UpdateLightDebug");
	}

	UREDPointLightManager_execUpdateLightDebug_Params UpdateLightDebug_Params;
	memset(&UpdateLightDebug_Params, 0, sizeof(UpdateLightDebug_Params));
	memcpy_s(&UpdateLightDebug_Params.Id, sizeof(UpdateLightDebug_Params.Id), &Id, sizeof(Id));
	memcpy_s(&UpdateLightDebug_Params.amp, sizeof(UpdateLightDebug_Params.amp), &amp, sizeof(amp));
	memcpy_s(&UpdateLightDebug_Params.Freq, sizeof(UpdateLightDebug_Params.Freq), &Freq, sizeof(Freq));
	memcpy_s(&UpdateLightDebug_Params.Amplify, sizeof(UpdateLightDebug_Params.Amplify), &Amplify, sizeof(Amplify));
	memcpy_s(&UpdateLightDebug_Params.Attenuation, sizeof(UpdateLightDebug_Params.Attenuation), &Attenuation, sizeof(Attenuation));
	memcpy_s(&UpdateLightDebug_Params.Range, sizeof(UpdateLightDebug_Params.Range), &Range, sizeof(Range));
	memcpy_s(&UpdateLightDebug_Params.Cutoff, sizeof(UpdateLightDebug_Params.Cutoff), &Cutoff, sizeof(Cutoff));
	memcpy_s(&UpdateLightDebug_Params.distanceMultiply, sizeof(UpdateLightDebug_Params.distanceMultiply), &distanceMultiply, sizeof(distanceMultiply));
	memcpy_s(&UpdateLightDebug_Params.NewLocation, sizeof(UpdateLightDebug_Params.NewLocation), &NewLocation, sizeof(NewLocation));
	memcpy_s(&UpdateLightDebug_Params.NewLightColor, sizeof(UpdateLightDebug_Params.NewLightColor), &NewLightColor, sizeof(NewLightColor));

	this->ProcessEvent(uFnUpdateLightDebug, &UpdateLightDebug_Params, nullptr);

	memcpy_s(&NewLocation, sizeof(NewLocation), &UpdateLightDebug_Params.NewLocation, sizeof(UpdateLightDebug_Params.NewLocation));
	memcpy_s(&NewLightColor, sizeof(NewLightColor), &UpdateLightDebug_Params.NewLightColor, sizeof(UpdateLightDebug_Params.NewLightColor));
};

// Function REDGame.REDPointLightManager.RegistLight
// [0x00424400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39324])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          amp                            (CPF_Parm)
// float                          Freq                           (CPF_Parm)
// float                          Amplify                        (CPF_Parm)
// float                          Attenuation                    (CPF_Parm)
// float                          Range                          (CPF_Parm)
// float                          Cutoff                         (CPF_Parm)
// float                          distanceMultiply               (CPF_Parm)
// uint32_t                       isBGParticle                   (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Location                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FLinearColor            LightColor                     (CPF_Const | CPF_Parm | CPF_OutParm)

int32_t UREDPointLightManager::RegistLight(float amp, float Freq, float Amplify, float Attenuation, float Range, float Cutoff, float distanceMultiply, bool isBGParticle, struct FVector& Location, struct FLinearColor& LightColor)
{
	static UFunction* uFnRegistLight = nullptr;

	if (!uFnRegistLight)
	{
		uFnRegistLight = UFunction::FindFunction("Function REDGame.REDPointLightManager.RegistLight");
	}

	UREDPointLightManager_execRegistLight_Params RegistLight_Params;
	memset(&RegistLight_Params, 0, sizeof(RegistLight_Params));
	memcpy_s(&RegistLight_Params.amp, sizeof(RegistLight_Params.amp), &amp, sizeof(amp));
	memcpy_s(&RegistLight_Params.Freq, sizeof(RegistLight_Params.Freq), &Freq, sizeof(Freq));
	memcpy_s(&RegistLight_Params.Amplify, sizeof(RegistLight_Params.Amplify), &Amplify, sizeof(Amplify));
	memcpy_s(&RegistLight_Params.Attenuation, sizeof(RegistLight_Params.Attenuation), &Attenuation, sizeof(Attenuation));
	memcpy_s(&RegistLight_Params.Range, sizeof(RegistLight_Params.Range), &Range, sizeof(Range));
	memcpy_s(&RegistLight_Params.Cutoff, sizeof(RegistLight_Params.Cutoff), &Cutoff, sizeof(Cutoff));
	memcpy_s(&RegistLight_Params.distanceMultiply, sizeof(RegistLight_Params.distanceMultiply), &distanceMultiply, sizeof(distanceMultiply));
	RegistLight_Params.isBGParticle = isBGParticle;
	memcpy_s(&RegistLight_Params.Location, sizeof(RegistLight_Params.Location), &Location, sizeof(Location));
	memcpy_s(&RegistLight_Params.LightColor, sizeof(RegistLight_Params.LightColor), &LightColor, sizeof(LightColor));

	this->ProcessEvent(uFnRegistLight, &RegistLight_Params, nullptr);

	memcpy_s(&Location, sizeof(Location), &RegistLight_Params.Location, sizeof(RegistLight_Params.Location));
	memcpy_s(&LightColor, sizeof(LightColor), &RegistLight_Params.LightColor, sizeof(RegistLight_Params.LightColor));

	return RegistLight_Params.ReturnValue;
};

// Function REDGame.REDPointLightManager.EnableLight
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36669])
// Parameter Info:
// uint32_t                       bEnable                        (CPF_Parm)

void UREDPointLightManager::EnableLight(bool bEnable)
{
	static UFunction* uFnEnableLight = nullptr;

	if (!uFnEnableLight)
	{
		uFnEnableLight = UFunction::FindFunction("Function REDGame.REDPointLightManager.EnableLight");
	}

	UREDPointLightManager_execEnableLight_Params EnableLight_Params;
	memset(&EnableLight_Params, 0, sizeof(EnableLight_Params));
	EnableLight_Params.bEnable = bEnable;

	this->ProcessEvent(uFnEnableLight, &EnableLight_Params, nullptr);
};

// Function REDGame.REDPointLightManager.Reset
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[12929])
// Parameter Info:
// uint32_t                       bWithBG                        (CPF_OptionalParm | CPF_Parm)

void UREDPointLightManager::Reset(bool bWithBG)
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function REDGame.REDPointLightManager.Reset");
	}

	UREDPointLightManager_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));
	Reset_Params.bWithBG = bWithBG;

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function REDGame.REDPointLightManager.Initialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13305])
// Parameter Info:

void UREDPointLightManager::Initialize()
{
	static UFunction* uFnInitialize = nullptr;

	if (!uFnInitialize)
	{
		uFnInitialize = UFunction::FindFunction("Function REDGame.REDPointLightManager.Initialize");
	}

	UREDPointLightManager_execInitialize_Params Initialize_Params;
	memset(&Initialize_Params, 0, sizeof(Initialize_Params));

	this->ProcessEvent(uFnInitialize, &Initialize_Params, nullptr);
};

// Function REDGame.REDSeqAct_BGFloorAttribute.GetAttributeName
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDSeqAct_BGFloorAttribute::eventGetAttributeName()
{
	static UFunction* uFnGetAttributeName = nullptr;

	if (!uFnGetAttributeName)
	{
		uFnGetAttributeName = UFunction::FindFunction("Function REDGame.REDSeqAct_BGFloorAttribute.GetAttributeName");
	}

	UREDSeqAct_BGFloorAttribute_eventGetAttributeName_Params GetAttributeName_Params;
	memset(&GetAttributeName_Params, 0, sizeof(GetAttributeName_Params));

	this->ProcessEvent(uFnGetAttributeName, &GetAttributeName_Params, nullptr);

	return GetAttributeName_Params.ReturnValue;
};

// Function REDGame.REDSeqAct_ChangeAnimNodeLookAtBattle.ActivateFunc
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDSeqAct_ChangeAnimNodeLookAtBattle::eventActivateFunc()
{
	static UFunction* uFnActivateFunc = nullptr;

	if (!uFnActivateFunc)
	{
		uFnActivateFunc = UFunction::FindFunction("Function REDGame.REDSeqAct_ChangeAnimNodeLookAtBattle.ActivateFunc");
	}

	UREDSeqAct_ChangeAnimNodeLookAtBattle_eventActivateFunc_Params ActivateFunc_Params;
	memset(&ActivateFunc_Params, 0, sizeof(ActivateFunc_Params));

	this->ProcessEvent(uFnActivateFunc, &ActivateFunc_Params, nullptr);
};

// Function REDGame.REDSeqAct_SetCharaToLookAtBattle.GetCharaPawn
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37020])
// Parameter Info:
// class APawn*                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  _CharaID                       (CPF_Parm | CPF_NeedCtorLink)

class APawn* UREDSeqAct_SetCharaToLookAtBattle::GetCharaPawn(const class FString& _CharaID)
{
	static UFunction* uFnGetCharaPawn = nullptr;

	if (!uFnGetCharaPawn)
	{
		uFnGetCharaPawn = UFunction::FindFunction("Function REDGame.REDSeqAct_SetCharaToLookAtBattle.GetCharaPawn");
	}

	UREDSeqAct_SetCharaToLookAtBattle_execGetCharaPawn_Params GetCharaPawn_Params;
	memset(&GetCharaPawn_Params, 0, sizeof(GetCharaPawn_Params));
	memcpy_s(&GetCharaPawn_Params._CharaID, sizeof(GetCharaPawn_Params._CharaID), &_CharaID, sizeof(_CharaID));

	this->ProcessEvent(uFnGetCharaPawn, &GetCharaPawn_Params, nullptr);

	return GetCharaPawn_Params.ReturnValue;
};

// Function REDGame.REDSeqAct_SetCharaToLookAtBattle.ActivateFunc
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDSeqAct_SetCharaToLookAtBattle::eventActivateFunc()
{
	static UFunction* uFnActivateFunc = nullptr;

	if (!uFnActivateFunc)
	{
		uFnActivateFunc = UFunction::FindFunction("Function REDGame.REDSeqAct_SetCharaToLookAtBattle.ActivateFunc");
	}

	UREDSeqAct_SetCharaToLookAtBattle_eventActivateFunc_Params ActivateFunc_Params;
	memset(&ActivateFunc_Params, 0, sizeof(ActivateFunc_Params));

	this->ProcessEvent(uFnActivateFunc, &ActivateFunc_Params, nullptr);
};

// Function REDGame.REDSeqAct_SetPawnToLookAtBattle.ActivateFunc
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDSeqAct_SetPawnToLookAtBattle::eventActivateFunc()
{
	static UFunction* uFnActivateFunc = nullptr;

	if (!uFnActivateFunc)
	{
		uFnActivateFunc = UFunction::FindFunction("Function REDGame.REDSeqAct_SetPawnToLookAtBattle.ActivateFunc");
	}

	UREDSeqAct_SetPawnToLookAtBattle_eventActivateFunc_Params ActivateFunc_Params;
	memset(&ActivateFunc_Params, 0, sizeof(ActivateFunc_Params));

	this->ProcessEvent(uFnActivateFunc, &ActivateFunc_Params, nullptr);
};

// Function REDGame.REDSeqCond_CharaCheck.GetCharaID
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDSeqCond_CharaCheck::eventGetCharaID()
{
	static UFunction* uFnGetCharaID = nullptr;

	if (!uFnGetCharaID)
	{
		uFnGetCharaID = UFunction::FindFunction("Function REDGame.REDSeqCond_CharaCheck.GetCharaID");
	}

	UREDSeqCond_CharaCheck_eventGetCharaID_Params GetCharaID_Params;
	memset(&GetCharaID_Params, 0, sizeof(GetCharaID_Params));

	this->ProcessEvent(uFnGetCharaID, &GetCharaID_Params, nullptr);

	return GetCharaID_Params.ReturnValue;
};

// Function REDGame.REDSeqCond_CharaCheck2.GetCharaID
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UREDSeqCond_CharaCheck2::eventGetCharaID()
{
	static UFunction* uFnGetCharaID = nullptr;

	if (!uFnGetCharaID)
	{
		uFnGetCharaID = UFunction::FindFunction("Function REDGame.REDSeqCond_CharaCheck2.GetCharaID");
	}

	UREDSeqCond_CharaCheck2_eventGetCharaID_Params GetCharaID_Params;
	memset(&GetCharaID_Params, 0, sizeof(GetCharaID_Params));

	this->ProcessEvent(uFnGetCharaID, &GetCharaID_Params, nullptr);

	return GetCharaID_Params.ReturnValue;
};

// Function REDGame.REDSeqCond_EntryEventCharaCheck.GetCharaID
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// uint32_t                       isEnemy                        (CPF_Parm)

class FString UREDSeqCond_EntryEventCharaCheck::eventGetCharaID(bool isEnemy)
{
	static UFunction* uFnGetCharaID = nullptr;

	if (!uFnGetCharaID)
	{
		uFnGetCharaID = UFunction::FindFunction("Function REDGame.REDSeqCond_EntryEventCharaCheck.GetCharaID");
	}

	UREDSeqCond_EntryEventCharaCheck_eventGetCharaID_Params GetCharaID_Params;
	memset(&GetCharaID_Params, 0, sizeof(GetCharaID_Params));
	GetCharaID_Params.isEnemy = isEnemy;

	this->ProcessEvent(uFnGetCharaID, &GetCharaID_Params, nullptr);

	return GetCharaID_Params.ReturnValue;
};

// Function REDGame.REDSeqCond_PawnMainPlayerCheck.Check
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDSeqCond_PawnMainPlayerCheck::eventCheck()
{
	static UFunction* uFnCheck = nullptr;

	if (!uFnCheck)
	{
		uFnCheck = UFunction::FindFunction("Function REDGame.REDSeqCond_PawnMainPlayerCheck.Check");
	}

	UREDSeqCond_PawnMainPlayerCheck_eventCheck_Params Check_Params;
	memset(&Check_Params, 0, sizeof(Check_Params));

	this->ProcessEvent(uFnCheck, &Check_Params, nullptr);

	return Check_Params.ReturnValue;
};

// Function REDGame.REDSeqCond_SwitchEventMainPlayer.GetEventMainPlayerID
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_PLAYER_ID UREDSeqCond_SwitchEventMainPlayer::eventGetEventMainPlayerID()
{
	static UFunction* uFnGetEventMainPlayerID = nullptr;

	if (!uFnGetEventMainPlayerID)
	{
		uFnGetEventMainPlayerID = UFunction::FindFunction("Function REDGame.REDSeqCond_SwitchEventMainPlayer.GetEventMainPlayerID");
	}

	UREDSeqCond_SwitchEventMainPlayer_eventGetEventMainPlayerID_Params GetEventMainPlayerID_Params;
	memset(&GetEventMainPlayerID_Params, 0, sizeof(GetEventMainPlayerID_Params));

	this->ProcessEvent(uFnGetEventMainPlayerID, &GetEventMainPlayerID_Params, nullptr);

	return static_cast<EUE_PLAYER_ID>(GetEventMainPlayerID_Params.ReturnValue);
};

// Function REDGame.REDSeqEvent_BGEffect.ActivateFunction
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  InOriginator                   (CPF_Parm)
// uint32_t                       bActivate                      (CPF_Parm)

bool UREDSeqEvent_BGEffect::ActivateFunction(class AActor* InOriginator, bool bActivate)
{
	static UFunction* uFnActivateFunction = nullptr;

	if (!uFnActivateFunction)
	{
		uFnActivateFunction = UFunction::FindFunction("Function REDGame.REDSeqEvent_BGEffect.ActivateFunction");
	}

	UREDSeqEvent_BGEffect_execActivateFunction_Params ActivateFunction_Params;
	memset(&ActivateFunction_Params, 0, sizeof(ActivateFunction_Params));
	ActivateFunction_Params.InOriginator = InOriginator;
	ActivateFunction_Params.bActivate = bActivate;

	this->ProcessEvent(uFnActivateFunction, &ActivateFunction_Params, nullptr);

	return ActivateFunction_Params.ReturnValue;
};

// Function REDGame.REDSeqEvent_BGEffect.GetHitRect
// [0x00C20802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          startX                         (CPF_Parm | CPF_OutParm)
// float                          endX                           (CPF_Parm | CPF_OutParm)
// float                          startZ                         (CPF_Parm | CPF_OutParm)
// float                          endZ                           (CPF_Parm | CPF_OutParm)
// float                          PosY                           (CPF_Parm | CPF_OutParm)

void UREDSeqEvent_BGEffect::eventGetHitRect(float& startX, float& endX, float& startZ, float& endZ, float& PosY)
{
	static UFunction* uFnGetHitRect = nullptr;

	if (!uFnGetHitRect)
	{
		uFnGetHitRect = UFunction::FindFunction("Function REDGame.REDSeqEvent_BGEffect.GetHitRect");
	}

	UREDSeqEvent_BGEffect_eventGetHitRect_Params GetHitRect_Params;
	memset(&GetHitRect_Params, 0, sizeof(GetHitRect_Params));
	memcpy_s(&GetHitRect_Params.startX, sizeof(GetHitRect_Params.startX), &startX, sizeof(startX));
	memcpy_s(&GetHitRect_Params.endX, sizeof(GetHitRect_Params.endX), &endX, sizeof(endX));
	memcpy_s(&GetHitRect_Params.startZ, sizeof(GetHitRect_Params.startZ), &startZ, sizeof(startZ));
	memcpy_s(&GetHitRect_Params.endZ, sizeof(GetHitRect_Params.endZ), &endZ, sizeof(endZ));
	memcpy_s(&GetHitRect_Params.PosY, sizeof(GetHitRect_Params.PosY), &PosY, sizeof(PosY));

	this->ProcessEvent(uFnGetHitRect, &GetHitRect_Params, nullptr);

	memcpy_s(&startX, sizeof(startX), &GetHitRect_Params.startX, sizeof(GetHitRect_Params.startX));
	memcpy_s(&endX, sizeof(endX), &GetHitRect_Params.endX, sizeof(GetHitRect_Params.endX));
	memcpy_s(&startZ, sizeof(startZ), &GetHitRect_Params.startZ, sizeof(GetHitRect_Params.startZ));
	memcpy_s(&endZ, sizeof(endZ), &GetHitRect_Params.endZ, sizeof(GetHitRect_Params.endZ));
	memcpy_s(&PosY, sizeof(PosY), &GetHitRect_Params.PosY, sizeof(GetHitRect_Params.PosY));
};

// Function REDGame.REDSeqEvent_BGEffect.GetOffset
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FVector UREDSeqEvent_BGEffect::GetOffset()
{
	static UFunction* uFnGetOffset = nullptr;

	if (!uFnGetOffset)
	{
		uFnGetOffset = UFunction::FindFunction("Function REDGame.REDSeqEvent_BGEffect.GetOffset");
	}

	UREDSeqEvent_BGEffect_execGetOffset_Params GetOffset_Params;
	memset(&GetOffset_Params, 0, sizeof(GetOffset_Params));

	this->ProcessEvent(uFnGetOffset, &GetOffset_Params, nullptr);

	return GetOffset_Params.ReturnValue;
};

// Function REDGame.REDSeqEventManager.RequestEventPlayer
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EventName                      (CPF_Parm)
// class APawn*                   PlayerPawn                     (CPF_Parm)
// class APawn*                   EnemyPawn                      (CPF_Parm)
// int32_t                        Param0                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param1                         (CPF_OptionalParm | CPF_Parm)
// int32_t                        Param2                         (CPF_OptionalParm | CPF_Parm)

bool AREDSeqEventManager::RequestEventPlayer(const class FName& EventName, class APawn* PlayerPawn, class APawn* EnemyPawn, int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnRequestEventPlayer = nullptr;

	if (!uFnRequestEventPlayer)
	{
		uFnRequestEventPlayer = UFunction::FindFunction("Function REDGame.REDSeqEventManager.RequestEventPlayer");
	}

	AREDSeqEventManager_execRequestEventPlayer_Params RequestEventPlayer_Params;
	memset(&RequestEventPlayer_Params, 0, sizeof(RequestEventPlayer_Params));
	memcpy_s(&RequestEventPlayer_Params.EventName, sizeof(RequestEventPlayer_Params.EventName), &EventName, sizeof(EventName));
	RequestEventPlayer_Params.PlayerPawn = PlayerPawn;
	RequestEventPlayer_Params.EnemyPawn = EnemyPawn;
	memcpy_s(&RequestEventPlayer_Params.Param0, sizeof(RequestEventPlayer_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&RequestEventPlayer_Params.Param1, sizeof(RequestEventPlayer_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&RequestEventPlayer_Params.Param2, sizeof(RequestEventPlayer_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnRequestEventPlayer, &RequestEventPlayer_Params, nullptr);

	return RequestEventPlayer_Params.ReturnValue;
};

// Function REDGame.REDSeqEventManager.DisplayDebugBGAttribute
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)

void AREDSeqEventManager::DisplayDebugBGAttribute(class AHUD* HUD)
{
	static UFunction* uFnDisplayDebugBGAttribute = nullptr;

	if (!uFnDisplayDebugBGAttribute)
	{
		uFnDisplayDebugBGAttribute = UFunction::FindFunction("Function REDGame.REDSeqEventManager.DisplayDebugBGAttribute");
	}

	AREDSeqEventManager_execDisplayDebugBGAttribute_Params DisplayDebugBGAttribute_Params;
	memset(&DisplayDebugBGAttribute_Params, 0, sizeof(DisplayDebugBGAttribute_Params));
	DisplayDebugBGAttribute_Params.HUD = HUD;

	this->ProcessEvent(uFnDisplayDebugBGAttribute, &DisplayDebugBGAttribute_Params, nullptr);
};

// Function REDGame.REDSeqEventManager.GetBGFloorAttribute
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          PosX                           (CPF_Parm)

int32_t AREDSeqEventManager::GetBGFloorAttribute(float PosX)
{
	static UFunction* uFnGetBGFloorAttribute = nullptr;

	if (!uFnGetBGFloorAttribute)
	{
		uFnGetBGFloorAttribute = UFunction::FindFunction("Function REDGame.REDSeqEventManager.GetBGFloorAttribute");
	}

	AREDSeqEventManager_execGetBGFloorAttribute_Params GetBGFloorAttribute_Params;
	memset(&GetBGFloorAttribute_Params, 0, sizeof(GetBGFloorAttribute_Params));
	memcpy_s(&GetBGFloorAttribute_Params.PosX, sizeof(GetBGFloorAttribute_Params.PosX), &PosX, sizeof(PosX));

	this->ProcessEvent(uFnGetBGFloorAttribute, &GetBGFloorAttribute_Params, nullptr);

	return GetBGFloorAttribute_Params.ReturnValue;
};

// Function REDGame.REDSeqEventManager.DisplayDebugBGEffectSub
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// class USequence*               GameSequence                   (CPF_Parm)
// int32_t                        Index                          (CPF_Parm)

void AREDSeqEventManager::DisplayDebugBGEffectSub(class AHUD* HUD, class USequence* GameSequence, int32_t Index)
{
	static UFunction* uFnDisplayDebugBGEffectSub = nullptr;

	if (!uFnDisplayDebugBGEffectSub)
	{
		uFnDisplayDebugBGEffectSub = UFunction::FindFunction("Function REDGame.REDSeqEventManager.DisplayDebugBGEffectSub");
	}

	AREDSeqEventManager_execDisplayDebugBGEffectSub_Params DisplayDebugBGEffectSub_Params;
	memset(&DisplayDebugBGEffectSub_Params, 0, sizeof(DisplayDebugBGEffectSub_Params));
	DisplayDebugBGEffectSub_Params.HUD = HUD;
	DisplayDebugBGEffectSub_Params.GameSequence = GameSequence;
	memcpy_s(&DisplayDebugBGEffectSub_Params.Index, sizeof(DisplayDebugBGEffectSub_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnDisplayDebugBGEffectSub, &DisplayDebugBGEffectSub_Params, nullptr);
};

// Function REDGame.REDSeqEventManager.DisplayDebugBGEffect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)

void AREDSeqEventManager::DisplayDebugBGEffect(class AHUD* HUD)
{
	static UFunction* uFnDisplayDebugBGEffect = nullptr;

	if (!uFnDisplayDebugBGEffect)
	{
		uFnDisplayDebugBGEffect = UFunction::FindFunction("Function REDGame.REDSeqEventManager.DisplayDebugBGEffect");
	}

	AREDSeqEventManager_execDisplayDebugBGEffect_Params DisplayDebugBGEffect_Params;
	memset(&DisplayDebugBGEffect_Params, 0, sizeof(DisplayDebugBGEffect_Params));
	DisplayDebugBGEffect_Params.HUD = HUD;

	this->ProcessEvent(uFnDisplayDebugBGEffect, &DisplayDebugBGEffect_Params, nullptr);
};

// Function REDGame.REDSeqEventManager.RequestEventBGEffect
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EventName                      (CPF_Parm)
// float                          posX1                          (CPF_Parm)
// float                          posX2                          (CPF_Parm)
// float                          posZ1                          (CPF_Parm)
// float                          posZ2                          (CPF_Parm)
// int32_t                        Dir                            (CPF_Parm)
// int32_t                        AttackLv                       (CPF_Parm)
// int32_t                        atkType                        (CPF_Parm)
// int32_t                        AttackDamage                   (CPF_Parm)
// class APawn*                   PlayerPawn                     (CPF_Parm)
// class APawn*                   EnemyPawn                      (CPF_Parm)
// class TArray<class UREDSeqEvent_BGEffect*> doneList                       (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

bool AREDSeqEventManager::RequestEventBGEffect(const class FName& EventName, float posX1, float posX2, float posZ1, float posZ2, int32_t Dir, int32_t AttackLv, int32_t atkType, int32_t AttackDamage, class APawn* PlayerPawn, class APawn* EnemyPawn, class TArray<class UREDSeqEvent_BGEffect*>& doneList)
{
	static UFunction* uFnRequestEventBGEffect = nullptr;

	if (!uFnRequestEventBGEffect)
	{
		uFnRequestEventBGEffect = UFunction::FindFunction("Function REDGame.REDSeqEventManager.RequestEventBGEffect");
	}

	AREDSeqEventManager_execRequestEventBGEffect_Params RequestEventBGEffect_Params;
	memset(&RequestEventBGEffect_Params, 0, sizeof(RequestEventBGEffect_Params));
	memcpy_s(&RequestEventBGEffect_Params.EventName, sizeof(RequestEventBGEffect_Params.EventName), &EventName, sizeof(EventName));
	memcpy_s(&RequestEventBGEffect_Params.posX1, sizeof(RequestEventBGEffect_Params.posX1), &posX1, sizeof(posX1));
	memcpy_s(&RequestEventBGEffect_Params.posX2, sizeof(RequestEventBGEffect_Params.posX2), &posX2, sizeof(posX2));
	memcpy_s(&RequestEventBGEffect_Params.posZ1, sizeof(RequestEventBGEffect_Params.posZ1), &posZ1, sizeof(posZ1));
	memcpy_s(&RequestEventBGEffect_Params.posZ2, sizeof(RequestEventBGEffect_Params.posZ2), &posZ2, sizeof(posZ2));
	memcpy_s(&RequestEventBGEffect_Params.Dir, sizeof(RequestEventBGEffect_Params.Dir), &Dir, sizeof(Dir));
	memcpy_s(&RequestEventBGEffect_Params.AttackLv, sizeof(RequestEventBGEffect_Params.AttackLv), &AttackLv, sizeof(AttackLv));
	memcpy_s(&RequestEventBGEffect_Params.atkType, sizeof(RequestEventBGEffect_Params.atkType), &atkType, sizeof(atkType));
	memcpy_s(&RequestEventBGEffect_Params.AttackDamage, sizeof(RequestEventBGEffect_Params.AttackDamage), &AttackDamage, sizeof(AttackDamage));
	RequestEventBGEffect_Params.PlayerPawn = PlayerPawn;
	RequestEventBGEffect_Params.EnemyPawn = EnemyPawn;
	memcpy_s(&RequestEventBGEffect_Params.doneList, sizeof(RequestEventBGEffect_Params.doneList), &doneList, sizeof(doneList));

	this->ProcessEvent(uFnRequestEventBGEffect, &RequestEventBGEffect_Params, nullptr);

	memcpy_s(&doneList, sizeof(doneList), &RequestEventBGEffect_Params.doneList, sizeof(RequestEventBGEffect_Params.doneList));

	return RequestEventBGEffect_Params.ReturnValue;
};

// Function REDGame.REDSeqEventManager.DrawBGAttributeRect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36598])
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          X1                             (CPF_Parm)
// float                          X2                             (CPF_Parm)
// int32_t                        Attr                           (CPF_Parm)
// class FString                  Comment                        (CPF_Parm | CPF_NeedCtorLink)

void AREDSeqEventManager::DrawBGAttributeRect(class AHUD* HUD, float X1, float X2, int32_t Attr, const class FString& Comment)
{
	static UFunction* uFnDrawBGAttributeRect = nullptr;

	if (!uFnDrawBGAttributeRect)
	{
		uFnDrawBGAttributeRect = UFunction::FindFunction("Function REDGame.REDSeqEventManager.DrawBGAttributeRect");
	}

	AREDSeqEventManager_execDrawBGAttributeRect_Params DrawBGAttributeRect_Params;
	memset(&DrawBGAttributeRect_Params, 0, sizeof(DrawBGAttributeRect_Params));
	DrawBGAttributeRect_Params.HUD = HUD;
	memcpy_s(&DrawBGAttributeRect_Params.X1, sizeof(DrawBGAttributeRect_Params.X1), &X1, sizeof(X1));
	memcpy_s(&DrawBGAttributeRect_Params.X2, sizeof(DrawBGAttributeRect_Params.X2), &X2, sizeof(X2));
	memcpy_s(&DrawBGAttributeRect_Params.Attr, sizeof(DrawBGAttributeRect_Params.Attr), &Attr, sizeof(Attr));
	memcpy_s(&DrawBGAttributeRect_Params.Comment, sizeof(DrawBGAttributeRect_Params.Comment), &Comment, sizeof(Comment));

	this->ProcessEvent(uFnDrawBGAttributeRect, &DrawBGAttributeRect_Params, nullptr);
};

// Function REDGame.REDSeqEventManager.DrawBGEffectRect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36599])
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// class UREDSeqEvent_BGEffect*   eff                            (CPF_Parm)
// class FString                  effName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  Comment                        (CPF_Parm | CPF_NeedCtorLink)

void AREDSeqEventManager::DrawBGEffectRect(class AHUD* HUD, class UREDSeqEvent_BGEffect* eff, const class FString& effName, const class FString& Comment)
{
	static UFunction* uFnDrawBGEffectRect = nullptr;

	if (!uFnDrawBGEffectRect)
	{
		uFnDrawBGEffectRect = UFunction::FindFunction("Function REDGame.REDSeqEventManager.DrawBGEffectRect");
	}

	AREDSeqEventManager_execDrawBGEffectRect_Params DrawBGEffectRect_Params;
	memset(&DrawBGEffectRect_Params, 0, sizeof(DrawBGEffectRect_Params));
	DrawBGEffectRect_Params.HUD = HUD;
	DrawBGEffectRect_Params.eff = eff;
	memcpy_s(&DrawBGEffectRect_Params.effName, sizeof(DrawBGEffectRect_Params.effName), &effName, sizeof(effName));
	memcpy_s(&DrawBGEffectRect_Params.Comment, sizeof(DrawBGEffectRect_Params.Comment), &Comment, sizeof(Comment));

	this->ProcessEvent(uFnDrawBGEffectRect, &DrawBGEffectRect_Params, nullptr);
};

// Function REDGame.REDSeqEventManager.ToUEPos
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40274])
// Parameter Info:
// struct FVector                 Loc                            (CPF_Parm | CPF_OutParm)

void AREDSeqEventManager::ToUEPos(struct FVector& Loc)
{
	static UFunction* uFnToUEPos = nullptr;

	if (!uFnToUEPos)
	{
		uFnToUEPos = UFunction::FindFunction("Function REDGame.REDSeqEventManager.ToUEPos");
	}

	AREDSeqEventManager_execToUEPos_Params ToUEPos_Params;
	memset(&ToUEPos_Params, 0, sizeof(ToUEPos_Params));
	memcpy_s(&ToUEPos_Params.Loc, sizeof(ToUEPos_Params.Loc), &Loc, sizeof(Loc));

	this->ProcessEvent(uFnToUEPos, &ToUEPos_Params, nullptr);

	memcpy_s(&Loc, sizeof(Loc), &ToUEPos_Params.Loc, sizeof(ToUEPos_Params.Loc));
};

// Function REDGame.REDSeqEventManager.IsBGEffectHit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37606])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          X1                             (CPF_Parm)
// float                          X2                             (CPF_Parm)
// float                          Y1                             (CPF_Parm)
// float                          Y2                             (CPF_Parm)
// class UREDSeqEvent_BGEffect*   eff                            (CPF_Parm)

bool AREDSeqEventManager::IsBGEffectHit(float X1, float X2, float Y1, float Y2, class UREDSeqEvent_BGEffect* eff)
{
	static UFunction* uFnIsBGEffectHit = nullptr;

	if (!uFnIsBGEffectHit)
	{
		uFnIsBGEffectHit = UFunction::FindFunction("Function REDGame.REDSeqEventManager.IsBGEffectHit");
	}

	AREDSeqEventManager_execIsBGEffectHit_Params IsBGEffectHit_Params;
	memset(&IsBGEffectHit_Params, 0, sizeof(IsBGEffectHit_Params));
	memcpy_s(&IsBGEffectHit_Params.X1, sizeof(IsBGEffectHit_Params.X1), &X1, sizeof(X1));
	memcpy_s(&IsBGEffectHit_Params.X2, sizeof(IsBGEffectHit_Params.X2), &X2, sizeof(X2));
	memcpy_s(&IsBGEffectHit_Params.Y1, sizeof(IsBGEffectHit_Params.Y1), &Y1, sizeof(Y1));
	memcpy_s(&IsBGEffectHit_Params.Y2, sizeof(IsBGEffectHit_Params.Y2), &Y2, sizeof(Y2));
	IsBGEffectHit_Params.eff = eff;

	this->ProcessEvent(uFnIsBGEffectHit, &IsBGEffectHit_Params, nullptr);

	return IsBGEffectHit_Params.ReturnValue;
};

// Function REDGame.REDSoundLipsyncArray.GetLipsync
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37086])
// Parameter Info:
// class UREDAssetLipSync*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    Key                            (CPF_Parm)

class UREDAssetLipSync* UREDSoundLipsyncArray::GetLipsync(const class FName& Key)
{
	static UFunction* uFnGetLipsync = nullptr;

	if (!uFnGetLipsync)
	{
		uFnGetLipsync = UFunction::FindFunction("Function REDGame.REDSoundLipsyncArray.GetLipsync");
	}

	UREDSoundLipsyncArray_execGetLipsync_Params GetLipsync_Params;
	memset(&GetLipsync_Params, 0, sizeof(GetLipsync_Params));
	memcpy_s(&GetLipsync_Params.Key, sizeof(GetLipsync_Params.Key), &Key, sizeof(Key));

	this->ProcessEvent(uFnGetLipsync, &GetLipsync_Params, nullptr);

	return GetLipsync_Params.ReturnValue;
};

// Function REDGame.REDSoundPlayer.PlayStaticSoundWithPos
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39047])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// struct FVector                 Location                       (CPF_Parm | CPF_OutParm)

void UREDSoundPlayer::PlayStaticSoundWithPos(const class FName& cueName, struct FVector& Location)
{
	static UFunction* uFnPlayStaticSoundWithPos = nullptr;

	if (!uFnPlayStaticSoundWithPos)
	{
		uFnPlayStaticSoundWithPos = UFunction::FindFunction("Function REDGame.REDSoundPlayer.PlayStaticSoundWithPos");
	}

	UREDSoundPlayer_execPlayStaticSoundWithPos_Params PlayStaticSoundWithPos_Params;
	memset(&PlayStaticSoundWithPos_Params, 0, sizeof(PlayStaticSoundWithPos_Params));
	memcpy_s(&PlayStaticSoundWithPos_Params.cueName, sizeof(PlayStaticSoundWithPos_Params.cueName), &cueName, sizeof(cueName));
	memcpy_s(&PlayStaticSoundWithPos_Params.Location, sizeof(PlayStaticSoundWithPos_Params.Location), &Location, sizeof(Location));

	this->ProcessEvent(uFnPlayStaticSoundWithPos, &PlayStaticSoundWithPos_Params, nullptr);

	memcpy_s(&Location, sizeof(Location), &PlayStaticSoundWithPos_Params.Location, sizeof(PlayStaticSoundWithPos_Params.Location));
};

// Function REDGame.REDSoundPlayer.PlayStaticSound
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39046])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)

void UREDSoundPlayer::PlayStaticSound(const class FName& cueName)
{
	static UFunction* uFnPlayStaticSound = nullptr;

	if (!uFnPlayStaticSound)
	{
		uFnPlayStaticSound = UFunction::FindFunction("Function REDGame.REDSoundPlayer.PlayStaticSound");
	}

	UREDSoundPlayer_execPlayStaticSound_Params PlayStaticSound_Params;
	memset(&PlayStaticSound_Params, 0, sizeof(PlayStaticSound_Params));
	memcpy_s(&PlayStaticSound_Params.cueName, sizeof(PlayStaticSound_Params.cueName), &cueName, sizeof(cueName));

	this->ProcessEvent(uFnPlayStaticSound, &PlayStaticSound_Params, nullptr);
};

// Function REDGame.REDSoundPlayer.PlaySound
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13363])
// Parameter Info:
// class AActor*                  Actor                          (CPF_Parm)
// class FName                    cueName                        (CPF_Parm)

void UREDSoundPlayer::PlaySound(class AActor* Actor, const class FName& cueName)
{
	static UFunction* uFnPlaySound = nullptr;

	if (!uFnPlaySound)
	{
		uFnPlaySound = UFunction::FindFunction("Function REDGame.REDSoundPlayer.PlaySound");
	}

	UREDSoundPlayer_execPlaySound_Params PlaySound_Params;
	memset(&PlaySound_Params, 0, sizeof(PlaySound_Params));
	PlaySound_Params.Actor = Actor;
	memcpy_s(&PlaySound_Params.cueName, sizeof(PlaySound_Params.cueName), &cueName, sizeof(cueName));

	this->ProcessEvent(uFnPlaySound, &PlaySound_Params, nullptr);
};

// Function REDGame.REDSoundPlayer.GetSoundCue
// [0x00080400] (FUNC_Native | FUNC_Protected | FUNC_AllFlags) (iNative[37171])
// Parameter Info:
// class USoundCue*               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    cueName                        (CPF_Parm)

class USoundCue* UREDSoundPlayer::GetSoundCue(const class FName& cueName)
{
	static UFunction* uFnGetSoundCue = nullptr;

	if (!uFnGetSoundCue)
	{
		uFnGetSoundCue = UFunction::FindFunction("Function REDGame.REDSoundPlayer.GetSoundCue");
	}

	UREDSoundPlayer_execGetSoundCue_Params GetSoundCue_Params;
	memset(&GetSoundCue_Params, 0, sizeof(GetSoundCue_Params));
	memcpy_s(&GetSoundCue_Params.cueName, sizeof(GetSoundCue_Params.cueName), &cueName, sizeof(cueName));

	this->ProcessEvent(uFnGetSoundCue, &GetSoundCue_Params, nullptr);

	return GetSoundCue_Params.ReturnValue;
};

// Function REDGame.REDSoundPlayerUnique.IsPlayingUniqueSound
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[37776])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        ch                             (CPF_OptionalParm | CPF_Parm)

bool UREDSoundPlayerUnique::IsPlayingUniqueSound(int32_t ch)
{
	static UFunction* uFnIsPlayingUniqueSound = nullptr;

	if (!uFnIsPlayingUniqueSound)
	{
		uFnIsPlayingUniqueSound = UFunction::FindFunction("Function REDGame.REDSoundPlayerUnique.IsPlayingUniqueSound");
	}

	UREDSoundPlayerUnique_execIsPlayingUniqueSound_Params IsPlayingUniqueSound_Params;
	memset(&IsPlayingUniqueSound_Params, 0, sizeof(IsPlayingUniqueSound_Params));
	memcpy_s(&IsPlayingUniqueSound_Params.ch, sizeof(IsPlayingUniqueSound_Params.ch), &ch, sizeof(ch));

	this->ProcessEvent(uFnIsPlayingUniqueSound, &IsPlayingUniqueSound_Params, nullptr);

	return IsPlayingUniqueSound_Params.ReturnValue;
};

// Function REDGame.REDSoundPlayerUnique.StopUniqueSound
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[40109])
// Parameter Info:
// int32_t                        ch                             (CPF_OptionalParm | CPF_Parm)

void UREDSoundPlayerUnique::StopUniqueSound(int32_t ch)
{
	static UFunction* uFnStopUniqueSound = nullptr;

	if (!uFnStopUniqueSound)
	{
		uFnStopUniqueSound = UFunction::FindFunction("Function REDGame.REDSoundPlayerUnique.StopUniqueSound");
	}

	UREDSoundPlayerUnique_execStopUniqueSound_Params StopUniqueSound_Params;
	memset(&StopUniqueSound_Params, 0, sizeof(StopUniqueSound_Params));
	memcpy_s(&StopUniqueSound_Params.ch, sizeof(StopUniqueSound_Params.ch), &ch, sizeof(ch));

	this->ProcessEvent(uFnStopUniqueSound, &StopUniqueSound_Params, nullptr);
};

// Function REDGame.REDSoundPlayerUnique.PlayUniqueSound
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39050])
// Parameter Info:
// class AActor*                  Actor                          (CPF_Parm)
// class FName                    cueName                        (CPF_Parm)
// uint32_t                       isOverWrite                    (CPF_OptionalParm | CPF_Parm)
// float                          pitchMultiply                  (CPF_OptionalParm | CPF_Parm)
// int32_t                        ch                             (CPF_OptionalParm | CPF_Parm)

void UREDSoundPlayerUnique::PlayUniqueSound(class AActor* Actor, const class FName& cueName, bool isOverWrite, float pitchMultiply, int32_t ch)
{
	static UFunction* uFnPlayUniqueSound = nullptr;

	if (!uFnPlayUniqueSound)
	{
		uFnPlayUniqueSound = UFunction::FindFunction("Function REDGame.REDSoundPlayerUnique.PlayUniqueSound");
	}

	UREDSoundPlayerUnique_execPlayUniqueSound_Params PlayUniqueSound_Params;
	memset(&PlayUniqueSound_Params, 0, sizeof(PlayUniqueSound_Params));
	PlayUniqueSound_Params.Actor = Actor;
	memcpy_s(&PlayUniqueSound_Params.cueName, sizeof(PlayUniqueSound_Params.cueName), &cueName, sizeof(cueName));
	PlayUniqueSound_Params.isOverWrite = isOverWrite;
	memcpy_s(&PlayUniqueSound_Params.pitchMultiply, sizeof(PlayUniqueSound_Params.pitchMultiply), &pitchMultiply, sizeof(pitchMultiply));
	memcpy_s(&PlayUniqueSound_Params.ch, sizeof(PlayUniqueSound_Params.ch), &ch, sizeof(ch));

	this->ProcessEvent(uFnPlayUniqueSound, &PlayUniqueSound_Params, nullptr);
};

// Function REDGame.REDSoundPlayerUnique.AttachComponent
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[15083])
// Parameter Info:
// class AActor*                  Actor                          (CPF_Parm)

void UREDSoundPlayerUnique::AttachComponent(class AActor* Actor)
{
	static UFunction* uFnAttachComponent = nullptr;

	if (!uFnAttachComponent)
	{
		uFnAttachComponent = UFunction::FindFunction("Function REDGame.REDSoundPlayerUnique.AttachComponent");
	}

	UREDSoundPlayerUnique_execAttachComponent_Params AttachComponent_Params;
	memset(&AttachComponent_Params, 0, sizeof(AttachComponent_Params));
	AttachComponent_Params.Actor = Actor;

	this->ProcessEvent(uFnAttachComponent, &AttachComponent_Params, nullptr);
};

// Function REDGame.REDSoundPlayerUnique.CreateAudioComponent
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDSoundPlayerUnique::eventCreateAudioComponent()
{
	static UFunction* uFnCreateAudioComponent = nullptr;

	if (!uFnCreateAudioComponent)
	{
		uFnCreateAudioComponent = UFunction::FindFunction("Function REDGame.REDSoundPlayerUnique.CreateAudioComponent");
	}

	UREDSoundPlayerUnique_eventCreateAudioComponent_Params CreateAudioComponent_Params;
	memset(&CreateAudioComponent_Params, 0, sizeof(CreateAudioComponent_Params));

	this->ProcessEvent(uFnCreateAudioComponent, &CreateAudioComponent_Params, nullptr);
};

// Function REDGame.REDTexture2DArray.GetTexture2D
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37187])
// Parameter Info:
// class UTexture2D*              ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    texName                        (CPF_Parm)

class UTexture2D* UREDTexture2DArray::GetTexture2D(const class FName& texName)
{
	static UFunction* uFnGetTexture2D = nullptr;

	if (!uFnGetTexture2D)
	{
		uFnGetTexture2D = UFunction::FindFunction("Function REDGame.REDTexture2DArray.GetTexture2D");
	}

	UREDTexture2DArray_execGetTexture2D_Params GetTexture2D_Params;
	memset(&GetTexture2D_Params, 0, sizeof(GetTexture2D_Params));
	memcpy_s(&GetTexture2D_Params.texName, sizeof(GetTexture2D_Params.texName), &texName, sizeof(texName));

	this->ProcessEvent(uFnGetTexture2D, &GetTexture2D_Params, nullptr);

	return GetTexture2D_Params.ReturnValue;
};

// Function REDGame.REDTMSConfig.DispData
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDTMSConfig::eventDispData()
{
	static UFunction* uFnDispData = nullptr;

	if (!uFnDispData)
	{
		uFnDispData = UFunction::FindFunction("Function REDGame.REDTMSConfig.DispData");
	}

	UREDTMSConfig_eventDispData_Params DispData_Params;
	memset(&DispData_Params, 0, sizeof(DispData_Params));

	this->ProcessEvent(uFnDispData, &DispData_Params, nullptr);
};

// Function REDGame.REDAnimArray.GetAnimSet
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37000])
// Parameter Info:
// class UAnimSet*                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DataName                       (CPF_Parm)

class UAnimSet* UREDAnimArray::GetAnimSet(const class FName& DataName)
{
	static UFunction* uFnGetAnimSet = nullptr;

	if (!uFnGetAnimSet)
	{
		uFnGetAnimSet = UFunction::FindFunction("Function REDGame.REDAnimArray.GetAnimSet");
	}

	UREDAnimArray_execGetAnimSet_Params GetAnimSet_Params;
	memset(&GetAnimSet_Params, 0, sizeof(GetAnimSet_Params));
	memcpy_s(&GetAnimSet_Params.DataName, sizeof(GetAnimSet_Params.DataName), &DataName, sizeof(DataName));

	this->ProcessEvent(uFnGetAnimSet, &GetAnimSet_Params, nullptr);

	return GetAnimSet_Params.ReturnValue;
};

// Function REDGame.REDAnimArray.GetAnimTree
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37001])
// Parameter Info:
// class UREDAnimTree*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DataName                       (CPF_Parm)

class UREDAnimTree* UREDAnimArray::GetAnimTree(const class FName& DataName)
{
	static UFunction* uFnGetAnimTree = nullptr;

	if (!uFnGetAnimTree)
	{
		uFnGetAnimTree = UFunction::FindFunction("Function REDGame.REDAnimArray.GetAnimTree");
	}

	UREDAnimArray_execGetAnimTree_Params GetAnimTree_Params;
	memset(&GetAnimTree_Params, 0, sizeof(GetAnimTree_Params));
	memcpy_s(&GetAnimTree_Params.DataName, sizeof(GetAnimTree_Params.DataName), &DataName, sizeof(DataName));

	this->ProcessEvent(uFnGetAnimTree, &GetAnimTree_Params, nullptr);

	return GetAnimTree_Params.ReturnValue;
};

// Function REDGame.REDAnimArray.GetAnimDataIndex
// [0x00440401] (FUNC_Final | FUNC_Native | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36999])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    DataName                       (CPF_Parm | CPF_OutParm)

int32_t UREDAnimArray::GetAnimDataIndex(class FName& DataName)
{
	static UFunction* uFnGetAnimDataIndex = nullptr;

	if (!uFnGetAnimDataIndex)
	{
		uFnGetAnimDataIndex = UFunction::FindFunction("Function REDGame.REDAnimArray.GetAnimDataIndex");
	}

	UREDAnimArray_execGetAnimDataIndex_Params GetAnimDataIndex_Params;
	memset(&GetAnimDataIndex_Params, 0, sizeof(GetAnimDataIndex_Params));
	memcpy_s(&GetAnimDataIndex_Params.DataName, sizeof(GetAnimDataIndex_Params.DataName), &DataName, sizeof(DataName));

	this->ProcessEvent(uFnGetAnimDataIndex, &GetAnimDataIndex_Params, nullptr);

	memcpy_s(&DataName, sizeof(DataName), &GetAnimDataIndex_Params.DataName, sizeof(GetAnimDataIndex_Params.DataName));

	return GetAnimDataIndex_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDGameInfo_Battle::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.DisplayDebug");
	}

	AREDGameInfo_Battle_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDGameInfo_Battle.SetDispCockpit
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       disp                           (CPF_Parm)
// uint32_t                       isAnime                        (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Battle::eventSetDispCockpit(bool disp, bool isAnime)
{
	static UFunction* uFnSetDispCockpit = nullptr;

	if (!uFnSetDispCockpit)
	{
		uFnSetDispCockpit = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SetDispCockpit");
	}

	AREDGameInfo_Battle_eventSetDispCockpit_Params SetDispCockpit_Params;
	memset(&SetDispCockpit_Params, 0, sizeof(SetDispCockpit_Params));
	SetDispCockpit_Params.disp = disp;
	SetDispCockpit_Params.isAnime = isAnime;

	this->ProcessEvent(uFnSetDispCockpit, &SetDispCockpit_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.IsRequestEventSkip
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::eventIsRequestEventSkip()
{
	static UFunction* uFnIsRequestEventSkip = nullptr;

	if (!uFnIsRequestEventSkip)
	{
		uFnIsRequestEventSkip = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.IsRequestEventSkip");
	}

	AREDGameInfo_Battle_eventIsRequestEventSkip_Params IsRequestEventSkip_Params;
	memset(&IsRequestEventSkip_Params, 0, sizeof(IsRequestEventSkip_Params));

	this->ProcessEvent(uFnIsRequestEventSkip, &IsRequestEventSkip_Params, nullptr);

	return IsRequestEventSkip_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.RequestEventSkip
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventRequestEventSkip()
{
	static UFunction* uFnRequestEventSkip = nullptr;

	if (!uFnRequestEventSkip)
	{
		uFnRequestEventSkip = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.RequestEventSkip");
	}

	AREDGameInfo_Battle_eventRequestEventSkip_Params RequestEventSkip_Params;
	memset(&RequestEventSkip_Params, 0, sizeof(RequestEventSkip_Params));

	this->ProcessEvent(uFnRequestEventSkip, &RequestEventSkip_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.IsBGEventFinish
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::eventIsBGEventFinish()
{
	static UFunction* uFnIsBGEventFinish = nullptr;

	if (!uFnIsBGEventFinish)
	{
		uFnIsBGEventFinish = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.IsBGEventFinish");
	}

	AREDGameInfo_Battle_eventIsBGEventFinish_Params IsBGEventFinish_Params;
	memset(&IsBGEventFinish_Params, 0, sizeof(IsBGEventFinish_Params));

	this->ProcessEvent(uFnIsBGEventFinish, &IsBGEventFinish_Params, nullptr);

	return IsBGEventFinish_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.BGEventFinish
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventBGEventFinish()
{
	static UFunction* uFnBGEventFinish = nullptr;

	if (!uFnBGEventFinish)
	{
		uFnBGEventFinish = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGEventFinish");
	}

	AREDGameInfo_Battle_eventBGEventFinish_Params BGEventFinish_Params;
	memset(&BGEventFinish_Params, 0, sizeof(BGEventFinish_Params));

	this->ProcessEvent(uFnBGEventFinish, &BGEventFinish_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.BGEventStart
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::eventBGEventStart()
{
	static UFunction* uFnBGEventStart = nullptr;

	if (!uFnBGEventStart)
	{
		uFnBGEventStart = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGEventStart");
	}

	AREDGameInfo_Battle_eventBGEventStart_Params BGEventStart_Params;
	memset(&BGEventStart_Params, 0, sizeof(BGEventStart_Params));

	this->ProcessEvent(uFnBGEventStart, &BGEventStart_Params, nullptr);

	return BGEventStart_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.IsEntryEventFinish
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::eventIsEntryEventFinish()
{
	static UFunction* uFnIsEntryEventFinish = nullptr;

	if (!uFnIsEntryEventFinish)
	{
		uFnIsEntryEventFinish = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.IsEntryEventFinish");
	}

	AREDGameInfo_Battle_eventIsEntryEventFinish_Params IsEntryEventFinish_Params;
	memset(&IsEntryEventFinish_Params, 0, sizeof(IsEntryEventFinish_Params));

	this->ProcessEvent(uFnIsEntryEventFinish, &IsEntryEventFinish_Params, nullptr);

	return IsEntryEventFinish_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.EntryEventFinish
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventEntryEventFinish()
{
	static UFunction* uFnEntryEventFinish = nullptr;

	if (!uFnEntryEventFinish)
	{
		uFnEntryEventFinish = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.EntryEventFinish");
	}

	AREDGameInfo_Battle_eventEntryEventFinish_Params EntryEventFinish_Params;
	memset(&EntryEventFinish_Params, 0, sizeof(EntryEventFinish_Params));

	this->ProcessEvent(uFnEntryEventFinish, &EntryEventFinish_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.EntryEventStart
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::eventEntryEventStart()
{
	static UFunction* uFnEntryEventStart = nullptr;

	if (!uFnEntryEventStart)
	{
		uFnEntryEventStart = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.EntryEventStart");
	}

	AREDGameInfo_Battle_eventEntryEventStart_Params EntryEventStart_Params;
	memset(&EntryEventStart_Params, 0, sizeof(EntryEventStart_Params));

	this->ProcessEvent(uFnEntryEventStart, &EntryEventStart_Params, nullptr);

	return EntryEventStart_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.UpdateWaitAsyncLoading
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::UpdateWaitAsyncLoading()
{
	static UFunction* uFnUpdateWaitAsyncLoading = nullptr;

	if (!uFnUpdateWaitAsyncLoading)
	{
		uFnUpdateWaitAsyncLoading = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.UpdateWaitAsyncLoading");
	}

	AREDGameInfo_Battle_execUpdateWaitAsyncLoading_Params UpdateWaitAsyncLoading_Params;
	memset(&UpdateWaitAsyncLoading_Params, 0, sizeof(UpdateWaitAsyncLoading_Params));

	this->ProcessEvent(uFnUpdateWaitAsyncLoading, &UpdateWaitAsyncLoading_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.RenderUpdate2D
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39327])
// Parameter Info:
// class UCanvas*                 Canvas                         (CPF_Parm)

void AREDGameInfo_Battle::RenderUpdate2D(class UCanvas* Canvas)
{
	static UFunction* uFnRenderUpdate2D = nullptr;

	if (!uFnRenderUpdate2D)
	{
		uFnRenderUpdate2D = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.RenderUpdate2D");
	}

	AREDGameInfo_Battle_execRenderUpdate2D_Params RenderUpdate2D_Params;
	memset(&RenderUpdate2D_Params, 0, sizeof(RenderUpdate2D_Params));
	RenderUpdate2D_Params.Canvas = Canvas;

	this->ProcessEvent(uFnRenderUpdate2D, &RenderUpdate2D_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_Battle::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.Tick");
	}

	AREDGameInfo_Battle_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.SetBackwordBattleHUDOffset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 offset                         (CPF_Parm)

void AREDGameInfo_Battle::eventSetBackwordBattleHUDOffset(const struct FVector& offset)
{
	static UFunction* uFnSetBackwordBattleHUDOffset = nullptr;

	if (!uFnSetBackwordBattleHUDOffset)
	{
		uFnSetBackwordBattleHUDOffset = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SetBackwordBattleHUDOffset");
	}

	AREDGameInfo_Battle_eventSetBackwordBattleHUDOffset_Params SetBackwordBattleHUDOffset_Params;
	memset(&SetBackwordBattleHUDOffset_Params, 0, sizeof(SetBackwordBattleHUDOffset_Params));
	memcpy_s(&SetBackwordBattleHUDOffset_Params.offset, sizeof(SetBackwordBattleHUDOffset_Params.offset), &offset, sizeof(offset));

	this->ProcessEvent(uFnSetBackwordBattleHUDOffset, &SetBackwordBattleHUDOffset_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.FinishContinue
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::eventFinishContinue()
{
	static UFunction* uFnFinishContinue = nullptr;

	if (!uFnFinishContinue)
	{
		uFnFinishContinue = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.FinishContinue");
	}

	AREDGameInfo_Battle_eventFinishContinue_Params FinishContinue_Params;
	memset(&FinishContinue_Params, 0, sizeof(FinishContinue_Params));

	this->ProcessEvent(uFnFinishContinue, &FinishContinue_Params, nullptr);

	return FinishContinue_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.IsContinueLoop
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::eventIsContinueLoop()
{
	static UFunction* uFnIsContinueLoop = nullptr;

	if (!uFnIsContinueLoop)
	{
		uFnIsContinueLoop = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.IsContinueLoop");
	}

	AREDGameInfo_Battle_eventIsContinueLoop_Params IsContinueLoop_Params;
	memset(&IsContinueLoop_Params, 0, sizeof(IsContinueLoop_Params));

	this->ProcessEvent(uFnIsContinueLoop, &IsContinueLoop_Params, nullptr);

	return IsContinueLoop_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.StartContinue
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventStartContinue()
{
	static UFunction* uFnStartContinue = nullptr;

	if (!uFnStartContinue)
	{
		uFnStartContinue = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.StartContinue");
	}

	AREDGameInfo_Battle_eventStartContinue_Params StartContinue_Params;
	memset(&StartContinue_Params, 0, sizeof(StartContinue_Params));

	this->ProcessEvent(uFnStartContinue, &StartContinue_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.MatchResultWindow_AddQuestInfo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  questName                      (CPF_Parm | CPF_NeedCtorLink)
// float                          Rate                           (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)
// class FString                  rewordStr                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        rewordType                     (CPF_Parm)

void AREDGameInfo_Battle::eventMatchResultWindow_AddQuestInfo(int32_t Player, const class FString& questName, float Rate, int32_t Type, const class FString& rewordStr, int32_t rewordType)
{
	static UFunction* uFnMatchResultWindow_AddQuestInfo = nullptr;

	if (!uFnMatchResultWindow_AddQuestInfo)
	{
		uFnMatchResultWindow_AddQuestInfo = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.MatchResultWindow_AddQuestInfo");
	}

	AREDGameInfo_Battle_eventMatchResultWindow_AddQuestInfo_Params MatchResultWindow_AddQuestInfo_Params;
	memset(&MatchResultWindow_AddQuestInfo_Params, 0, sizeof(MatchResultWindow_AddQuestInfo_Params));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.Player, sizeof(MatchResultWindow_AddQuestInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.questName, sizeof(MatchResultWindow_AddQuestInfo_Params.questName), &questName, sizeof(questName));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.Rate, sizeof(MatchResultWindow_AddQuestInfo_Params.Rate), &Rate, sizeof(Rate));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.Type, sizeof(MatchResultWindow_AddQuestInfo_Params.Type), &Type, sizeof(Type));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.rewordStr, sizeof(MatchResultWindow_AddQuestInfo_Params.rewordStr), &rewordStr, sizeof(rewordStr));
	memcpy_s(&MatchResultWindow_AddQuestInfo_Params.rewordType, sizeof(MatchResultWindow_AddQuestInfo_Params.rewordType), &rewordType, sizeof(rewordType));

	this->ProcessEvent(uFnMatchResultWindow_AddQuestInfo, &MatchResultWindow_AddQuestInfo_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.MatchResultWindow_AddMedalInfo
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// class FString                  medalName                      (CPF_Parm | CPF_NeedCtorLink)
// class FString                  medalDesc                      (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Grade                          (CPF_Parm)

void AREDGameInfo_Battle::eventMatchResultWindow_AddMedalInfo(int32_t Player, const class FString& medalName, const class FString& medalDesc, int32_t Grade)
{
	static UFunction* uFnMatchResultWindow_AddMedalInfo = nullptr;

	if (!uFnMatchResultWindow_AddMedalInfo)
	{
		uFnMatchResultWindow_AddMedalInfo = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.MatchResultWindow_AddMedalInfo");
	}

	AREDGameInfo_Battle_eventMatchResultWindow_AddMedalInfo_Params MatchResultWindow_AddMedalInfo_Params;
	memset(&MatchResultWindow_AddMedalInfo_Params, 0, sizeof(MatchResultWindow_AddMedalInfo_Params));
	memcpy_s(&MatchResultWindow_AddMedalInfo_Params.Player, sizeof(MatchResultWindow_AddMedalInfo_Params.Player), &Player, sizeof(Player));
	memcpy_s(&MatchResultWindow_AddMedalInfo_Params.medalName, sizeof(MatchResultWindow_AddMedalInfo_Params.medalName), &medalName, sizeof(medalName));
	memcpy_s(&MatchResultWindow_AddMedalInfo_Params.medalDesc, sizeof(MatchResultWindow_AddMedalInfo_Params.medalDesc), &medalDesc, sizeof(medalDesc));
	memcpy_s(&MatchResultWindow_AddMedalInfo_Params.Grade, sizeof(MatchResultWindow_AddMedalInfo_Params.Grade), &Grade, sizeof(Grade));

	this->ProcessEvent(uFnMatchResultWindow_AddMedalInfo, &MatchResultWindow_AddMedalInfo_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.MatchResultWindow_Release
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventMatchResultWindow_Release()
{
	static UFunction* uFnMatchResultWindow_Release = nullptr;

	if (!uFnMatchResultWindow_Release)
	{
		uFnMatchResultWindow_Release = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.MatchResultWindow_Release");
	}

	AREDGameInfo_Battle_eventMatchResultWindow_Release_Params MatchResultWindow_Release_Params;
	memset(&MatchResultWindow_Release_Params, 0, sizeof(MatchResultWindow_Release_Params));

	this->ProcessEvent(uFnMatchResultWindow_Release, &MatchResultWindow_Release_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.MatchResultWindow_PauseKey
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Pause                          (CPF_Parm)

void AREDGameInfo_Battle::eventMatchResultWindow_PauseKey(bool Pause)
{
	static UFunction* uFnMatchResultWindow_PauseKey = nullptr;

	if (!uFnMatchResultWindow_PauseKey)
	{
		uFnMatchResultWindow_PauseKey = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.MatchResultWindow_PauseKey");
	}

	AREDGameInfo_Battle_eventMatchResultWindow_PauseKey_Params MatchResultWindow_PauseKey_Params;
	memset(&MatchResultWindow_PauseKey_Params, 0, sizeof(MatchResultWindow_PauseKey_Params));
	MatchResultWindow_PauseKey_Params.Pause = Pause;

	this->ProcessEvent(uFnMatchResultWindow_PauseKey, &MatchResultWindow_PauseKey_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.MatchResultWindow_SkipShowAnim
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventMatchResultWindow_SkipShowAnim()
{
	static UFunction* uFnMatchResultWindow_SkipShowAnim = nullptr;

	if (!uFnMatchResultWindow_SkipShowAnim)
	{
		uFnMatchResultWindow_SkipShowAnim = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.MatchResultWindow_SkipShowAnim");
	}

	AREDGameInfo_Battle_eventMatchResultWindow_SkipShowAnim_Params MatchResultWindow_SkipShowAnim_Params;
	memset(&MatchResultWindow_SkipShowAnim_Params, 0, sizeof(MatchResultWindow_SkipShowAnim_Params));

	this->ProcessEvent(uFnMatchResultWindow_SkipShowAnim, &MatchResultWindow_SkipShowAnim_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.MatchResultWindow_IsShowAnimEnd
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::eventMatchResultWindow_IsShowAnimEnd()
{
	static UFunction* uFnMatchResultWindow_IsShowAnimEnd = nullptr;

	if (!uFnMatchResultWindow_IsShowAnimEnd)
	{
		uFnMatchResultWindow_IsShowAnimEnd = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.MatchResultWindow_IsShowAnimEnd");
	}

	AREDGameInfo_Battle_eventMatchResultWindow_IsShowAnimEnd_Params MatchResultWindow_IsShowAnimEnd_Params;
	memset(&MatchResultWindow_IsShowAnimEnd_Params, 0, sizeof(MatchResultWindow_IsShowAnimEnd_Params));

	this->ProcessEvent(uFnMatchResultWindow_IsShowAnimEnd, &MatchResultWindow_IsShowAnimEnd_Params, nullptr);

	return MatchResultWindow_IsShowAnimEnd_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.MatchResultWindow_StartShow
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FMatchResultWindowArg   arg1P                          (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// struct FMatchResultWindowArg   arg2P                          (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Battle::eventMatchResultWindow_StartShow(struct FMatchResultWindowArg& arg1P, struct FMatchResultWindowArg& arg2P)
{
	static UFunction* uFnMatchResultWindow_StartShow = nullptr;

	if (!uFnMatchResultWindow_StartShow)
	{
		uFnMatchResultWindow_StartShow = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.MatchResultWindow_StartShow");
	}

	AREDGameInfo_Battle_eventMatchResultWindow_StartShow_Params MatchResultWindow_StartShow_Params;
	memset(&MatchResultWindow_StartShow_Params, 0, sizeof(MatchResultWindow_StartShow_Params));
	memcpy_s(&MatchResultWindow_StartShow_Params.arg1P, sizeof(MatchResultWindow_StartShow_Params.arg1P), &arg1P, sizeof(arg1P));
	memcpy_s(&MatchResultWindow_StartShow_Params.arg2P, sizeof(MatchResultWindow_StartShow_Params.arg2P), &arg2P, sizeof(arg2P));

	this->ProcessEvent(uFnMatchResultWindow_StartShow, &MatchResultWindow_StartShow_Params, nullptr);

	memcpy_s(&arg1P, sizeof(arg1P), &MatchResultWindow_StartShow_Params.arg1P, sizeof(MatchResultWindow_StartShow_Params.arg1P));
	memcpy_s(&arg2P, sizeof(arg2P), &MatchResultWindow_StartShow_Params.arg2P, sizeof(MatchResultWindow_StartShow_Params.arg2P));
};

// Function REDGame.REDGameInfo_Battle.SetBGPause
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bPause                         (CPF_Parm)

void AREDGameInfo_Battle::eventSetBGPause(bool bPause)
{
	static UFunction* uFnSetBGPause = nullptr;

	if (!uFnSetBGPause)
	{
		uFnSetBGPause = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SetBGPause");
	}

	AREDGameInfo_Battle_eventSetBGPause_Params SetBGPause_Params;
	memset(&SetBGPause_Params, 0, sizeof(SetBGPause_Params));
	SetBGPause_Params.bPause = bPause;

	this->ProcessEvent(uFnSetBGPause, &SetBGPause_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.BGFade
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Brightness                     (CPF_Parm)

void AREDGameInfo_Battle::eventBGFade(float Brightness)
{
	static UFunction* uFnBGFade = nullptr;

	if (!uFnBGFade)
	{
		uFnBGFade = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGFade");
	}

	AREDGameInfo_Battle_eventBGFade_Params BGFade_Params;
	memset(&BGFade_Params, 0, sizeof(BGFade_Params));
	memcpy_s(&BGFade_Params.Brightness, sizeof(BGFade_Params.Brightness), &Brightness, sizeof(Brightness));

	this->ProcessEvent(uFnBGFade, &BGFade_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.BGFadeOut
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)
// float                          Brightness                     (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Battle::eventBGFadeOut(int32_t frame, float Brightness)
{
	static UFunction* uFnBGFadeOut = nullptr;

	if (!uFnBGFadeOut)
	{
		uFnBGFadeOut = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGFadeOut");
	}

	AREDGameInfo_Battle_eventBGFadeOut_Params BGFadeOut_Params;
	memset(&BGFadeOut_Params, 0, sizeof(BGFadeOut_Params));
	memcpy_s(&BGFadeOut_Params.frame, sizeof(BGFadeOut_Params.frame), &frame, sizeof(frame));
	memcpy_s(&BGFadeOut_Params.Brightness, sizeof(BGFadeOut_Params.Brightness), &Brightness, sizeof(Brightness));

	this->ProcessEvent(uFnBGFadeOut, &BGFadeOut_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.BGFadeIn
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void AREDGameInfo_Battle::eventBGFadeIn(int32_t frame)
{
	static UFunction* uFnBGFadeIn = nullptr;

	if (!uFnBGFadeIn)
	{
		uFnBGFadeIn = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGFadeIn");
	}

	AREDGameInfo_Battle_eventBGFadeIn_Params BGFadeIn_Params;
	memset(&BGFadeIn_Params, 0, sizeof(BGFadeIn_Params));
	memcpy_s(&BGFadeIn_Params.frame, sizeof(BGFadeIn_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnBGFadeIn, &BGFadeIn_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.SetResultCamera
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39802])
// Parameter Info:
// EUE_PLAYER_ID                  Winner                         (CPF_Parm)

void AREDGameInfo_Battle::SetResultCamera(EUE_PLAYER_ID Winner)
{
	static UFunction* uFnSetResultCamera = nullptr;

	if (!uFnSetResultCamera)
	{
		uFnSetResultCamera = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SetResultCamera");
	}

	AREDGameInfo_Battle_execSetResultCamera_Params SetResultCamera_Params;
	memset(&SetResultCamera_Params, 0, sizeof(SetResultCamera_Params));
	memcpy_s(&SetResultCamera_Params.Winner, sizeof(SetResultCamera_Params.Winner), &Winner, sizeof(Winner));

	this->ProcessEvent(uFnSetResultCamera, &SetResultCamera_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.UpdatePawnLightVector
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40806])
// Parameter Info:

void AREDGameInfo_Battle::UpdatePawnLightVector()
{
	static UFunction* uFnUpdatePawnLightVector = nullptr;

	if (!uFnUpdatePawnLightVector)
	{
		uFnUpdatePawnLightVector = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.UpdatePawnLightVector");
	}

	AREDGameInfo_Battle_execUpdatePawnLightVector_Params UpdatePawnLightVector_Params;
	memset(&UpdatePawnLightVector_Params, 0, sizeof(UpdatePawnLightVector_Params));

	this->ProcessEvent(uFnUpdatePawnLightVector, &UpdatePawnLightVector_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.UpdatePawnMaterialInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40807])
// Parameter Info:

void AREDGameInfo_Battle::UpdatePawnMaterialInstance()
{
	static UFunction* uFnUpdatePawnMaterialInstance = nullptr;

	if (!uFnUpdatePawnMaterialInstance)
	{
		uFnUpdatePawnMaterialInstance = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.UpdatePawnMaterialInstance");
	}

	AREDGameInfo_Battle_execUpdatePawnMaterialInstance_Params UpdatePawnMaterialInstance_Params;
	memset(&UpdatePawnMaterialInstance_Params, 0, sizeof(UpdatePawnMaterialInstance_Params));

	this->ProcessEvent(uFnUpdatePawnMaterialInstance, &UpdatePawnMaterialInstance_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.StopSound
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventStopSound()
{
	static UFunction* uFnStopSound = nullptr;

	if (!uFnStopSound)
	{
		uFnStopSound = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.StopSound");
	}

	AREDGameInfo_Battle_eventStopSound_Params StopSound_Params;
	memset(&StopSound_Params, 0, sizeof(StopSound_Params));

	this->ProcessEvent(uFnStopSound, &StopSound_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.StopSoundLocal
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class AActor*                  Actor                          (CPF_Parm)

void AREDGameInfo_Battle::StopSoundLocal(class AActor* Actor)
{
	static UFunction* uFnStopSoundLocal = nullptr;

	if (!uFnStopSoundLocal)
	{
		uFnStopSoundLocal = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.StopSoundLocal");
	}

	AREDGameInfo_Battle_execStopSoundLocal_Params StopSoundLocal_Params;
	memset(&StopSoundLocal_Params, 0, sizeof(StopSoundLocal_Params));
	StopSoundLocal_Params.Actor = Actor;

	this->ProcessEvent(uFnStopSoundLocal, &StopSoundLocal_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.RoundReset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventRoundReset()
{
	static UFunction* uFnRoundReset = nullptr;

	if (!uFnRoundReset)
	{
		uFnRoundReset = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.RoundReset");
	}

	AREDGameInfo_Battle_eventRoundReset_Params RoundReset_Params;
	memset(&RoundReset_Params, 0, sizeof(RoundReset_Params));

	this->ProcessEvent(uFnRoundReset, &RoundReset_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.RoundResetCommonPawn
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39449])
// Parameter Info:

void AREDGameInfo_Battle::RoundResetCommonPawn()
{
	static UFunction* uFnRoundResetCommonPawn = nullptr;

	if (!uFnRoundResetCommonPawn)
	{
		uFnRoundResetCommonPawn = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.RoundResetCommonPawn");
	}

	AREDGameInfo_Battle_execRoundResetCommonPawn_Params RoundResetCommonPawn_Params;
	memset(&RoundResetCommonPawn_Params, 0, sizeof(RoundResetCommonPawn_Params));

	this->ProcessEvent(uFnRoundResetCommonPawn, &RoundResetCommonPawn_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PostSeamlessTravel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventPostSeamlessTravel()
{
	static UFunction* uFnPostSeamlessTravel = nullptr;

	if (!uFnPostSeamlessTravel)
	{
		uFnPostSeamlessTravel = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PostSeamlessTravel");
	}

	AREDGameInfo_Battle_eventPostSeamlessTravel_Params PostSeamlessTravel_Params;
	memset(&PostSeamlessTravel_Params, 0, sizeof(PostSeamlessTravel_Params));

	this->ProcessEvent(uFnPostSeamlessTravel, &PostSeamlessTravel_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PostLogin
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       NewPlayer                      (CPF_Parm)

void AREDGameInfo_Battle::eventPostLogin(class APlayerController* NewPlayer)
{
	static UFunction* uFnPostLogin = nullptr;

	if (!uFnPostLogin)
	{
		uFnPostLogin = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PostLogin");
	}

	AREDGameInfo_Battle_eventPostLogin_Params PostLogin_Params;
	memset(&PostLogin_Params, 0, sizeof(PostLogin_Params));
	PostLogin_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnPostLogin, &PostLogin_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PostLoginCommon
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       NewPlayer                      (CPF_Parm)

void AREDGameInfo_Battle::PostLoginCommon(class APlayerController* NewPlayer)
{
	static UFunction* uFnPostLoginCommon = nullptr;

	if (!uFnPostLoginCommon)
	{
		uFnPostLoginCommon = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PostLoginCommon");
	}

	AREDGameInfo_Battle_execPostLoginCommon_Params PostLoginCommon_Params;
	memset(&PostLoginCommon_Params, 0, sizeof(PostLoginCommon_Params));
	PostLoginCommon_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnPostLoginCommon, &PostLoginCommon_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PostBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PostBeginPlay");
	}

	AREDGameInfo_Battle_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PreBeginPlay");
	}

	AREDGameInfo_Battle_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Battle::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.InitGame");
	}

	AREDGameInfo_Battle_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_Battle.BGMVolume
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        DurationFrame                  (CPF_Parm)
// float                          Volume                         (CPF_Parm)

void AREDGameInfo_Battle::eventBGMVolume(int32_t DurationFrame, float Volume)
{
	static UFunction* uFnBGMVolume = nullptr;

	if (!uFnBGMVolume)
	{
		uFnBGMVolume = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGMVolume");
	}

	AREDGameInfo_Battle_eventBGMVolume_Params BGMVolume_Params;
	memset(&BGMVolume_Params, 0, sizeof(BGMVolume_Params));
	memcpy_s(&BGMVolume_Params.DurationFrame, sizeof(BGMVolume_Params.DurationFrame), &DurationFrame, sizeof(DurationFrame));
	memcpy_s(&BGMVolume_Params.Volume, sizeof(BGMVolume_Params.Volume), &Volume, sizeof(Volume));

	this->ProcessEvent(uFnBGMVolume, &BGMVolume_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.BGMStop
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        fadeOutFrame                   (CPF_Parm)

void AREDGameInfo_Battle::eventBGMStop(int32_t fadeOutFrame)
{
	static UFunction* uFnBGMStop = nullptr;

	if (!uFnBGMStop)
	{
		uFnBGMStop = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGMStop");
	}

	AREDGameInfo_Battle_eventBGMStop_Params BGMStop_Params;
	memset(&BGMStop_Params, 0, sizeof(BGMStop_Params));
	memcpy_s(&BGMStop_Params.fadeOutFrame, sizeof(BGMStop_Params.fadeOutFrame), &fadeOutFrame, sizeof(fadeOutFrame));

	this->ProcessEvent(uFnBGMStop, &BGMStop_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PlayMainBGM
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          FadeInTime                     (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Battle::eventPlayMainBGM(float FadeInTime)
{
	static UFunction* uFnPlayMainBGM = nullptr;

	if (!uFnPlayMainBGM)
	{
		uFnPlayMainBGM = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PlayMainBGM");
	}

	AREDGameInfo_Battle_eventPlayMainBGM_Params PlayMainBGM_Params;
	memset(&PlayMainBGM_Params, 0, sizeof(PlayMainBGM_Params));
	memcpy_s(&PlayMainBGM_Params.FadeInTime, sizeof(PlayMainBGM_Params.FadeInTime), &FadeInTime, sizeof(FadeInTime));

	this->ProcessEvent(uFnPlayMainBGM, &PlayMainBGM_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.ResetMainBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventResetMainBGM()
{
	static UFunction* uFnResetMainBGM = nullptr;

	if (!uFnResetMainBGM)
	{
		uFnResetMainBGM = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.ResetMainBGM");
	}

	AREDGameInfo_Battle_eventResetMainBGM_Params ResetMainBGM_Params;
	memset(&ResetMainBGM_Params, 0, sizeof(ResetMainBGM_Params));

	this->ProcessEvent(uFnResetMainBGM, &ResetMainBGM_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.ChangeMainBGM
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USoundCue*               Cue                            (CPF_Parm)
// uint32_t                       bPlay                          (CPF_Parm)

void AREDGameInfo_Battle::eventChangeMainBGM(class USoundCue* Cue, bool bPlay)
{
	static UFunction* uFnChangeMainBGM = nullptr;

	if (!uFnChangeMainBGM)
	{
		uFnChangeMainBGM = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.ChangeMainBGM");
	}

	AREDGameInfo_Battle_eventChangeMainBGM_Params ChangeMainBGM_Params;
	memset(&ChangeMainBGM_Params, 0, sizeof(ChangeMainBGM_Params));
	ChangeMainBGM_Params.Cue = Cue;
	ChangeMainBGM_Params.bPlay = bPlay;

	this->ProcessEvent(uFnChangeMainBGM, &ChangeMainBGM_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.BGMRequest
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  cueName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  PackageName                    (CPF_Parm | CPF_NeedCtorLink)
// EBGM_PRIORITY                  InRequestPriority              (CPF_Parm)
// float                          FadeInTime                     (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Battle::eventBGMRequest(const class FString& cueName, const class FString& PackageName, EBGM_PRIORITY InRequestPriority, float FadeInTime)
{
	static UFunction* uFnBGMRequest = nullptr;

	if (!uFnBGMRequest)
	{
		uFnBGMRequest = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGMRequest");
	}

	AREDGameInfo_Battle_eventBGMRequest_Params BGMRequest_Params;
	memset(&BGMRequest_Params, 0, sizeof(BGMRequest_Params));
	memcpy_s(&BGMRequest_Params.cueName, sizeof(BGMRequest_Params.cueName), &cueName, sizeof(cueName));
	memcpy_s(&BGMRequest_Params.PackageName, sizeof(BGMRequest_Params.PackageName), &PackageName, sizeof(PackageName));
	memcpy_s(&BGMRequest_Params.InRequestPriority, sizeof(BGMRequest_Params.InRequestPriority), &InRequestPriority, sizeof(InRequestPriority));
	memcpy_s(&BGMRequest_Params.FadeInTime, sizeof(BGMRequest_Params.FadeInTime), &FadeInTime, sizeof(FadeInTime));

	this->ProcessEvent(uFnBGMRequest, &BGMRequest_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.BGMRequestFromCue
// [0x00824802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class USoundCue*               Cue                            (CPF_Parm)
// EBGM_PRIORITY                  InRequestPriority              (CPF_Parm)
// float                          FadeInTime                     (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Battle::eventBGMRequestFromCue(class USoundCue* Cue, EBGM_PRIORITY InRequestPriority, float FadeInTime)
{
	static UFunction* uFnBGMRequestFromCue = nullptr;

	if (!uFnBGMRequestFromCue)
	{
		uFnBGMRequestFromCue = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.BGMRequestFromCue");
	}

	AREDGameInfo_Battle_eventBGMRequestFromCue_Params BGMRequestFromCue_Params;
	memset(&BGMRequestFromCue_Params, 0, sizeof(BGMRequestFromCue_Params));
	BGMRequestFromCue_Params.Cue = Cue;
	memcpy_s(&BGMRequestFromCue_Params.InRequestPriority, sizeof(BGMRequestFromCue_Params.InRequestPriority), &InRequestPriority, sizeof(InRequestPriority));
	memcpy_s(&BGMRequestFromCue_Params.FadeInTime, sizeof(BGMRequestFromCue_Params.FadeInTime), &FadeInTime, sizeof(FadeInTime));

	this->ProcessEvent(uFnBGMRequestFromCue, &BGMRequestFromCue_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.ResetBGMRequestPriority
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventResetBGMRequestPriority()
{
	static UFunction* uFnResetBGMRequestPriority = nullptr;

	if (!uFnResetBGMRequestPriority)
	{
		uFnResetBGMRequestPriority = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.ResetBGMRequestPriority");
	}

	AREDGameInfo_Battle_eventResetBGMRequestPriority_Params ResetBGMRequestPriority_Params;
	memset(&ResetBGMRequestPriority_Params, 0, sizeof(ResetBGMRequestPriority_Params));

	this->ProcessEvent(uFnResetBGMRequestPriority, &ResetBGMRequestPriority_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Battle::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.GameEnding");
	}

	AREDGameInfo_Battle_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.IsDispCockpit
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37640])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDGameInfo_Battle::IsDispCockpit()
{
	static UFunction* uFnIsDispCockpit = nullptr;

	if (!uFnIsDispCockpit)
	{
		uFnIsDispCockpit = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.IsDispCockpit");
	}

	AREDGameInfo_Battle_execIsDispCockpit_Params IsDispCockpit_Params;
	memset(&IsDispCockpit_Params, 0, sizeof(IsDispCockpit_Params));

	this->ProcessEvent(uFnIsDispCockpit, &IsDispCockpit_Params, nullptr);

	return IsDispCockpit_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.SetupDramaEffect
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39835])
// Parameter Info:
// class TArray<class FString>    ExPackagenames                 (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Battle::SetupDramaEffect(class TArray<class FString>& ExPackagenames)
{
	static UFunction* uFnSetupDramaEffect = nullptr;

	if (!uFnSetupDramaEffect)
	{
		uFnSetupDramaEffect = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SetupDramaEffect");
	}

	AREDGameInfo_Battle_execSetupDramaEffect_Params SetupDramaEffect_Params;
	memset(&SetupDramaEffect_Params, 0, sizeof(SetupDramaEffect_Params));
	memcpy_s(&SetupDramaEffect_Params.ExPackagenames, sizeof(SetupDramaEffect_Params.ExPackagenames), &ExPackagenames, sizeof(ExPackagenames));

	this->ProcessEvent(uFnSetupDramaEffect, &SetupDramaEffect_Params, nullptr);

	memcpy_s(&ExPackagenames, sizeof(ExPackagenames), &SetupDramaEffect_Params.ExPackagenames, sizeof(SetupDramaEffect_Params.ExPackagenames));
};

// Function REDGame.REDGameInfo_Battle.SetupMOMEffect
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39849])
// Parameter Info:
// class TArray<struct FSpawnPlayerInfo> PlayerInfo                     (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Battle::SetupMOMEffect(class TArray<struct FSpawnPlayerInfo>& PlayerInfo)
{
	static UFunction* uFnSetupMOMEffect = nullptr;

	if (!uFnSetupMOMEffect)
	{
		uFnSetupMOMEffect = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SetupMOMEffect");
	}

	AREDGameInfo_Battle_execSetupMOMEffect_Params SetupMOMEffect_Params;
	memset(&SetupMOMEffect_Params, 0, sizeof(SetupMOMEffect_Params));
	memcpy_s(&SetupMOMEffect_Params.PlayerInfo, sizeof(SetupMOMEffect_Params.PlayerInfo), &PlayerInfo, sizeof(PlayerInfo));

	this->ProcessEvent(uFnSetupMOMEffect, &SetupMOMEffect_Params, nullptr);

	memcpy_s(&PlayerInfo, sizeof(PlayerInfo), &SetupMOMEffect_Params.PlayerInfo, sizeof(SetupMOMEffect_Params.PlayerInfo));
};

// Function REDGame.REDGameInfo_Battle.GetBattleTimer
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37004])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDGameInfo_Battle::GetBattleTimer()
{
	static UFunction* uFnGetBattleTimer = nullptr;

	if (!uFnGetBattleTimer)
	{
		uFnGetBattleTimer = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.GetBattleTimer");
	}

	AREDGameInfo_Battle_execGetBattleTimer_Params GetBattleTimer_Params;
	memset(&GetBattleTimer_Params, 0, sizeof(GetBattleTimer_Params));

	this->ProcessEvent(uFnGetBattleTimer, &GetBattleTimer_Params, nullptr);

	return GetBattleTimer_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Battle.SceneFinalize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39471])
// Parameter Info:

void AREDGameInfo_Battle::SceneFinalize()
{
	static UFunction* uFnSceneFinalize = nullptr;

	if (!uFnSceneFinalize)
	{
		uFnSceneFinalize = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SceneFinalize");
	}

	AREDGameInfo_Battle_execSceneFinalize_Params SceneFinalize_Params;
	memset(&SceneFinalize_Params, 0, sizeof(SceneFinalize_Params));

	this->ProcessEvent(uFnSceneFinalize, &SceneFinalize_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.SceneInitialize
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39473])
// Parameter Info:

void AREDGameInfo_Battle::SceneInitialize()
{
	static UFunction* uFnSceneInitialize = nullptr;

	if (!uFnSceneInitialize)
	{
		uFnSceneInitialize = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SceneInitialize");
	}

	AREDGameInfo_Battle_execSceneInitialize_Params SceneInitialize_Params;
	memset(&SceneInitialize_Params, 0, sizeof(SceneInitialize_Params));

	this->ProcessEvent(uFnSceneInitialize, &SceneInitialize_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.UpdateNetworkError
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40792])
// Parameter Info:

void AREDGameInfo_Battle::UpdateNetworkError()
{
	static UFunction* uFnUpdateNetworkError = nullptr;

	if (!uFnUpdateNetworkError)
	{
		uFnUpdateNetworkError = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.UpdateNetworkError");
	}

	AREDGameInfo_Battle_execUpdateNetworkError_Params UpdateNetworkError_Params;
	memset(&UpdateNetworkError_Params, 0, sizeof(UpdateNetworkError_Params));

	this->ProcessEvent(uFnUpdateNetworkError, &UpdateNetworkError_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.UpdateBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40599])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_Battle::UpdateBattle(float DeltaTime)
{
	static UFunction* uFnUpdateBattle = nullptr;

	if (!uFnUpdateBattle)
	{
		uFnUpdateBattle = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.UpdateBattle");
	}

	AREDGameInfo_Battle_execUpdateBattle_Params UpdateBattle_Params;
	memset(&UpdateBattle_Params, 0, sizeof(UpdateBattle_Params));
	memcpy_s(&UpdateBattle_Params.DeltaTime, sizeof(UpdateBattle_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateBattle, &UpdateBattle_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.EndBattle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36677])
// Parameter Info:

void AREDGameInfo_Battle::EndBattle()
{
	static UFunction* uFnEndBattle = nullptr;

	if (!uFnEndBattle)
	{
		uFnEndBattle = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.EndBattle");
	}

	AREDGameInfo_Battle_execEndBattle_Params EndBattle_Params;
	memset(&EndBattle_Params, 0, sizeof(EndBattle_Params));

	this->ProcessEvent(uFnEndBattle, &EndBattle_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.CleanupBattleInfo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36220])
// Parameter Info:

void AREDGameInfo_Battle::CleanupBattleInfo()
{
	static UFunction* uFnCleanupBattleInfo = nullptr;

	if (!uFnCleanupBattleInfo)
	{
		uFnCleanupBattleInfo = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.CleanupBattleInfo");
	}

	AREDGameInfo_Battle_execCleanupBattleInfo_Params CleanupBattleInfo_Params;
	memset(&CleanupBattleInfo_Params, 0, sizeof(CleanupBattleInfo_Params));

	this->ProcessEvent(uFnCleanupBattleInfo, &CleanupBattleInfo_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PostLogin_Internal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39085])
// Parameter Info:
// class APlayerController*       NewPlayer                      (CPF_Parm)

void AREDGameInfo_Battle::PostLogin_Internal(class APlayerController* NewPlayer)
{
	static UFunction* uFnPostLogin_Internal = nullptr;

	if (!uFnPostLogin_Internal)
	{
		uFnPostLogin_Internal = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PostLogin_Internal");
	}

	AREDGameInfo_Battle_execPostLogin_Internal_Params PostLogin_Internal_Params;
	memset(&PostLogin_Internal_Params, 0, sizeof(PostLogin_Internal_Params));
	PostLogin_Internal_Params.NewPlayer = NewPlayer;

	this->ProcessEvent(uFnPostLogin_Internal, &PostLogin_Internal_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PostBeginPlay_Internal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39082])
// Parameter Info:

void AREDGameInfo_Battle::PostBeginPlay_Internal()
{
	static UFunction* uFnPostBeginPlay_Internal = nullptr;

	if (!uFnPostBeginPlay_Internal)
	{
		uFnPostBeginPlay_Internal = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PostBeginPlay_Internal");
	}

	AREDGameInfo_Battle_execPostBeginPlay_Internal_Params PostBeginPlay_Internal_Params;
	memset(&PostBeginPlay_Internal_Params, 0, sizeof(PostBeginPlay_Internal_Params));

	this->ProcessEvent(uFnPostBeginPlay_Internal, &PostBeginPlay_Internal_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PreBeginPlay_Internal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39099])
// Parameter Info:

void AREDGameInfo_Battle::PreBeginPlay_Internal()
{
	static UFunction* uFnPreBeginPlay_Internal = nullptr;

	if (!uFnPreBeginPlay_Internal)
	{
		uFnPreBeginPlay_Internal = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PreBeginPlay_Internal");
	}

	AREDGameInfo_Battle_execPreBeginPlay_Internal_Params PreBeginPlay_Internal_Params;
	memset(&PreBeginPlay_Internal_Params, 0, sizeof(PreBeginPlay_Internal_Params));

	this->ProcessEvent(uFnPreBeginPlay_Internal, &PreBeginPlay_Internal_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.SetupBattleInfo
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39819])
// Parameter Info:

void AREDGameInfo_Battle::SetupBattleInfo()
{
	static UFunction* uFnSetupBattleInfo = nullptr;

	if (!uFnSetupBattleInfo)
	{
		uFnSetupBattleInfo = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.SetupBattleInfo");
	}

	AREDGameInfo_Battle_execSetupBattleInfo_Params SetupBattleInfo_Params;
	memset(&SetupBattleInfo_Params, 0, sizeof(SetupBattleInfo_Params));

	this->ProcessEvent(uFnSetupBattleInfo, &SetupBattleInfo_Params, nullptr);
};

// Function REDGame.REDGameInfo_Battle.PostDispRoot
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39083])
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)

void AREDGameInfo_Battle::PostDispRoot(class AHUD* HUD)
{
	static UFunction* uFnPostDispRoot = nullptr;

	if (!uFnPostDispRoot)
	{
		uFnPostDispRoot = UFunction::FindFunction("Function REDGame.REDGameInfo_Battle.PostDispRoot");
	}

	AREDGameInfo_Battle_execPostDispRoot_Params PostDispRoot_Params;
	memset(&PostDispRoot_Params, 0, sizeof(PostDispRoot_Params));
	PostDispRoot_Params.HUD = HUD;

	this->ProcessEvent(uFnPostDispRoot, &PostDispRoot_Params, nullptr);
};

// Function REDGame.REDPawn.SetMeshDamageLevel
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39776])
// Parameter Info:
// int32_t                        Level                          (CPF_Parm)

void AREDPawn::SetMeshDamageLevel(int32_t Level)
{
	static UFunction* uFnSetMeshDamageLevel = nullptr;

	if (!uFnSetMeshDamageLevel)
	{
		uFnSetMeshDamageLevel = UFunction::FindFunction("Function REDGame.REDPawn.SetMeshDamageLevel");
	}

	AREDPawn_execSetMeshDamageLevel_Params SetMeshDamageLevel_Params;
	memset(&SetMeshDamageLevel_Params, 0, sizeof(SetMeshDamageLevel_Params));
	memcpy_s(&SetMeshDamageLevel_Params.Level, sizeof(SetMeshDamageLevel_Params.Level), &Level, sizeof(Level));

	this->ProcessEvent(uFnSetMeshDamageLevel, &SetMeshDamageLevel_Params, nullptr);
};

// Function REDGame.REDPawn.GetExGaugeParam
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37060])
// Parameter Info:
// int32_t                        Id                             (CPF_Parm)
// struct FPlayerExGaugeParam     Param                          (CPF_Parm | CPF_OutParm)

void AREDPawn::GetExGaugeParam(int32_t Id, struct FPlayerExGaugeParam& Param)
{
	static UFunction* uFnGetExGaugeParam = nullptr;

	if (!uFnGetExGaugeParam)
	{
		uFnGetExGaugeParam = UFunction::FindFunction("Function REDGame.REDPawn.GetExGaugeParam");
	}

	AREDPawn_execGetExGaugeParam_Params GetExGaugeParam_Params;
	memset(&GetExGaugeParam_Params, 0, sizeof(GetExGaugeParam_Params));
	memcpy_s(&GetExGaugeParam_Params.Id, sizeof(GetExGaugeParam_Params.Id), &Id, sizeof(Id));
	memcpy_s(&GetExGaugeParam_Params.Param, sizeof(GetExGaugeParam_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnGetExGaugeParam, &GetExGaugeParam_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &GetExGaugeParam_Params.Param, sizeof(GetExGaugeParam_Params.Param));
};

// Function REDGame.REDPawn.GetOffscreenParam
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37122])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        PosX                           (CPF_Parm | CPF_OutParm)
// int32_t                        Direction                      (CPF_Parm | CPF_OutParm)

bool AREDPawn::GetOffscreenParam(int32_t& PosX, int32_t& Direction)
{
	static UFunction* uFnGetOffscreenParam = nullptr;

	if (!uFnGetOffscreenParam)
	{
		uFnGetOffscreenParam = UFunction::FindFunction("Function REDGame.REDPawn.GetOffscreenParam");
	}

	AREDPawn_execGetOffscreenParam_Params GetOffscreenParam_Params;
	memset(&GetOffscreenParam_Params, 0, sizeof(GetOffscreenParam_Params));
	memcpy_s(&GetOffscreenParam_Params.PosX, sizeof(GetOffscreenParam_Params.PosX), &PosX, sizeof(PosX));
	memcpy_s(&GetOffscreenParam_Params.Direction, sizeof(GetOffscreenParam_Params.Direction), &Direction, sizeof(Direction));

	this->ProcessEvent(uFnGetOffscreenParam, &GetOffscreenParam_Params, nullptr);

	memcpy_s(&PosX, sizeof(PosX), &GetOffscreenParam_Params.PosX, sizeof(GetOffscreenParam_Params.PosX));
	memcpy_s(&Direction, sizeof(Direction), &GetOffscreenParam_Params.Direction, sizeof(GetOffscreenParam_Params.Direction));

	return GetOffscreenParam_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetNegativeVal
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37117])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetNegativeVal()
{
	static UFunction* uFnGetNegativeVal = nullptr;

	if (!uFnGetNegativeVal)
	{
		uFnGetNegativeVal = UFunction::FindFunction("Function REDGame.REDPawn.GetNegativeVal");
	}

	AREDPawn_execGetNegativeVal_Params GetNegativeVal_Params;
	memset(&GetNegativeVal_Params, 0, sizeof(GetNegativeVal_Params));

	this->ProcessEvent(uFnGetNegativeVal, &GetNegativeVal_Params, nullptr);

	return GetNegativeVal_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetTensionBalanceSpeed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37184])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetTensionBalanceSpeed()
{
	static UFunction* uFnGetTensionBalanceSpeed = nullptr;

	if (!uFnGetTensionBalanceSpeed)
	{
		uFnGetTensionBalanceSpeed = UFunction::FindFunction("Function REDGame.REDPawn.GetTensionBalanceSpeed");
	}

	AREDPawn_execGetTensionBalanceSpeed_Params GetTensionBalanceSpeed_Params;
	memset(&GetTensionBalanceSpeed_Params, 0, sizeof(GetTensionBalanceSpeed_Params));

	this->ProcessEvent(uFnGetTensionBalanceSpeed, &GetTensionBalanceSpeed_Params, nullptr);

	return GetTensionBalanceSpeed_Params.ReturnValue;
};

// Function REDGame.REDPawn.IsCounterHitByGuardBalance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37631])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPawn::IsCounterHitByGuardBalance()
{
	static UFunction* uFnIsCounterHitByGuardBalance = nullptr;

	if (!uFnIsCounterHitByGuardBalance)
	{
		uFnIsCounterHitByGuardBalance = UFunction::FindFunction("Function REDGame.REDPawn.IsCounterHitByGuardBalance");
	}

	AREDPawn_execIsCounterHitByGuardBalance_Params IsCounterHitByGuardBalance_Params;
	memset(&IsCounterHitByGuardBalance_Params, 0, sizeof(IsCounterHitByGuardBalance_Params));

	this->ProcessEvent(uFnIsCounterHitByGuardBalance, &IsCounterHitByGuardBalance_Params, nullptr);

	return IsCounterHitByGuardBalance_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetGuardBalanceRed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37067])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetGuardBalanceRed()
{
	static UFunction* uFnGetGuardBalanceRed = nullptr;

	if (!uFnGetGuardBalanceRed)
	{
		uFnGetGuardBalanceRed = UFunction::FindFunction("Function REDGame.REDPawn.GetGuardBalanceRed");
	}

	AREDPawn_execGetGuardBalanceRed_Params GetGuardBalanceRed_Params;
	memset(&GetGuardBalanceRed_Params, 0, sizeof(GetGuardBalanceRed_Params));

	this->ProcessEvent(uFnGetGuardBalanceRed, &GetGuardBalanceRed_Params, nullptr);

	return GetGuardBalanceRed_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetGuardBalance
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37066])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetGuardBalance()
{
	static UFunction* uFnGetGuardBalance = nullptr;

	if (!uFnGetGuardBalance)
	{
		uFnGetGuardBalance = UFunction::FindFunction("Function REDGame.REDPawn.GetGuardBalance");
	}

	AREDPawn_execGetGuardBalance_Params GetGuardBalance_Params;
	memset(&GetGuardBalance_Params, 0, sizeof(GetGuardBalance_Params));

	this->ProcessEvent(uFnGetGuardBalance, &GetGuardBalance_Params, nullptr);

	return GetGuardBalance_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetImperfectComboLog
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37072])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

int32_t AREDPawn::GetImperfectComboLog(int32_t Index)
{
	static UFunction* uFnGetImperfectComboLog = nullptr;

	if (!uFnGetImperfectComboLog)
	{
		uFnGetImperfectComboLog = UFunction::FindFunction("Function REDGame.REDPawn.GetImperfectComboLog");
	}

	AREDPawn_execGetImperfectComboLog_Params GetImperfectComboLog_Params;
	memset(&GetImperfectComboLog_Params, 0, sizeof(GetImperfectComboLog_Params));
	memcpy_s(&GetImperfectComboLog_Params.Index, sizeof(GetImperfectComboLog_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnGetImperfectComboLog, &GetImperfectComboLog_Params, nullptr);

	return GetImperfectComboLog_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetComboDamage
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37028])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn::GetComboDamage()
{
	static UFunction* uFnGetComboDamage = nullptr;

	if (!uFnGetComboDamage)
	{
		uFnGetComboDamage = UFunction::FindFunction("Function REDGame.REDPawn.GetComboDamage");
	}

	AREDPawn_execGetComboDamage_Params GetComboDamage_Params;
	memset(&GetComboDamage_Params, 0, sizeof(GetComboDamage_Params));

	this->ProcessEvent(uFnGetComboDamage, &GetComboDamage_Params, nullptr);

	return GetComboDamage_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetComboCount
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37026])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn::GetComboCount()
{
	static UFunction* uFnGetComboCount = nullptr;

	if (!uFnGetComboCount)
	{
		uFnGetComboCount = UFunction::FindFunction("Function REDGame.REDPawn.GetComboCount");
	}

	AREDPawn_execGetComboCount_Params GetComboCount_Params;
	memset(&GetComboCount_Params, 0, sizeof(GetComboCount_Params));

	this->ProcessEvent(uFnGetComboCount, &GetComboCount_Params, nullptr);

	return GetComboCount_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetComboCountAddTime
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37027])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn::GetComboCountAddTime()
{
	static UFunction* uFnGetComboCountAddTime = nullptr;

	if (!uFnGetComboCountAddTime)
	{
		uFnGetComboCountAddTime = UFunction::FindFunction("Function REDGame.REDPawn.GetComboCountAddTime");
	}

	AREDPawn_execGetComboCountAddTime_Params GetComboCountAddTime_Params;
	memset(&GetComboCountAddTime_Params, 0, sizeof(GetComboCountAddTime_Params));

	this->ProcessEvent(uFnGetComboCountAddTime, &GetComboCountAddTime_Params, nullptr);

	return GetComboCountAddTime_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetComboBreakTime
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37025])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn::GetComboBreakTime()
{
	static UFunction* uFnGetComboBreakTime = nullptr;

	if (!uFnGetComboBreakTime)
	{
		uFnGetComboBreakTime = UFunction::FindFunction("Function REDGame.REDPawn.GetComboBreakTime");
	}

	AREDPawn_execGetComboBreakTime_Params GetComboBreakTime_Params;
	memset(&GetComboBreakTime_Params, 0, sizeof(GetComboBreakTime_Params));

	this->ProcessEvent(uFnGetComboBreakTime, &GetComboBreakTime_Params, nullptr);

	return GetComboBreakTime_Params.ReturnValue;
};

// Function REDGame.REDPawn.IsComboImperfect
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37623])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPawn::IsComboImperfect()
{
	static UFunction* uFnIsComboImperfect = nullptr;

	if (!uFnIsComboImperfect)
	{
		uFnIsComboImperfect = UFunction::FindFunction("Function REDGame.REDPawn.IsComboImperfect");
	}

	AREDPawn_execIsComboImperfect_Params IsComboImperfect_Params;
	memset(&IsComboImperfect_Params, 0, sizeof(IsComboImperfect_Params));

	this->ProcessEvent(uFnIsComboImperfect, &IsComboImperfect_Params, nullptr);

	return IsComboImperfect_Params.ReturnValue;
};

// Function REDGame.REDPawn.IsComboTrigger
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37624])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPawn::IsComboTrigger()
{
	static UFunction* uFnIsComboTrigger = nullptr;

	if (!uFnIsComboTrigger)
	{
		uFnIsComboTrigger = UFunction::FindFunction("Function REDGame.REDPawn.IsComboTrigger");
	}

	AREDPawn_execIsComboTrigger_Params IsComboTrigger_Params;
	memset(&IsComboTrigger_Params, 0, sizeof(IsComboTrigger_Params));

	this->ProcessEvent(uFnIsComboTrigger, &IsComboTrigger_Params, nullptr);

	return IsComboTrigger_Params.ReturnValue;
};

// Function REDGame.REDPawn.IsBurstSealed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37613])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn::IsBurstSealed()
{
	static UFunction* uFnIsBurstSealed = nullptr;

	if (!uFnIsBurstSealed)
	{
		uFnIsBurstSealed = UFunction::FindFunction("Function REDGame.REDPawn.IsBurstSealed");
	}

	AREDPawn_execIsBurstSealed_Params IsBurstSealed_Params;
	memset(&IsBurstSealed_Params, 0, sizeof(IsBurstSealed_Params));

	this->ProcessEvent(uFnIsBurstSealed, &IsBurstSealed_Params, nullptr);

	return IsBurstSealed_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetBurstVal
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37012])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetBurstVal()
{
	static UFunction* uFnGetBurstVal = nullptr;

	if (!uFnGetBurstVal)
	{
		uFnGetBurstVal = UFunction::FindFunction("Function REDGame.REDPawn.GetBurstVal");
	}

	AREDPawn_execGetBurstVal_Params GetBurstVal_Params;
	memset(&GetBurstVal_Params, 0, sizeof(GetBurstVal_Params));

	this->ProcessEvent(uFnGetBurstVal, &GetBurstVal_Params, nullptr);

	return GetBurstVal_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetTensionState
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37186])
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString AREDPawn::GetTensionState()
{
	static UFunction* uFnGetTensionState = nullptr;

	if (!uFnGetTensionState)
	{
		uFnGetTensionState = UFunction::FindFunction("Function REDGame.REDPawn.GetTensionState");
	}

	AREDPawn_execGetTensionState_Params GetTensionState_Params;
	memset(&GetTensionState_Params, 0, sizeof(GetTensionState_Params));

	this->ProcessEvent(uFnGetTensionState, &GetTensionState_Params, nullptr);

	return GetTensionState_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetTensionColorIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37185])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn::GetTensionColorIndex()
{
	static UFunction* uFnGetTensionColorIndex = nullptr;

	if (!uFnGetTensionColorIndex)
	{
		uFnGetTensionColorIndex = UFunction::FindFunction("Function REDGame.REDPawn.GetTensionColorIndex");
	}

	AREDPawn_execGetTensionColorIndex_Params GetTensionColorIndex_Params;
	memset(&GetTensionColorIndex_Params, 0, sizeof(GetTensionColorIndex_Params));

	this->ProcessEvent(uFnGetTensionColorIndex, &GetTensionColorIndex_Params, nullptr);

	return GetTensionColorIndex_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetTension
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37183])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetTension()
{
	static UFunction* uFnGetTension = nullptr;

	if (!uFnGetTension)
	{
		uFnGetTension = UFunction::FindFunction("Function REDGame.REDPawn.GetTension");
	}

	AREDPawn_execGetTension_Params GetTension_Params;
	memset(&GetTension_Params, 0, sizeof(GetTension_Params));

	this->ProcessEvent(uFnGetTension, &GetTension_Params, nullptr);

	return GetTension_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetHitPointWhite
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37070])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetHitPointWhite()
{
	static UFunction* uFnGetHitPointWhite = nullptr;

	if (!uFnGetHitPointWhite)
	{
		uFnGetHitPointWhite = UFunction::FindFunction("Function REDGame.REDPawn.GetHitPointWhite");
	}

	AREDPawn_execGetHitPointWhite_Params GetHitPointWhite_Params;
	memset(&GetHitPointWhite_Params, 0, sizeof(GetHitPointWhite_Params));

	this->ProcessEvent(uFnGetHitPointWhite, &GetHitPointWhite_Params, nullptr);

	return GetHitPointWhite_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetHitPointRed
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37069])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetHitPointRed()
{
	static UFunction* uFnGetHitPointRed = nullptr;

	if (!uFnGetHitPointRed)
	{
		uFnGetHitPointRed = UFunction::FindFunction("Function REDGame.REDPawn.GetHitPointRed");
	}

	AREDPawn_execGetHitPointRed_Params GetHitPointRed_Params;
	memset(&GetHitPointRed_Params, 0, sizeof(GetHitPointRed_Params));

	this->ProcessEvent(uFnGetHitPointRed, &GetHitPointRed_Params, nullptr);

	return GetHitPointRed_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetHitPoint
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37068])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetHitPoint()
{
	static UFunction* uFnGetHitPoint = nullptr;

	if (!uFnGetHitPoint)
	{
		uFnGetHitPoint = UFunction::FindFunction("Function REDGame.REDPawn.GetHitPoint");
	}

	AREDPawn_execGetHitPoint_Params GetHitPoint_Params;
	memset(&GetHitPoint_Params, 0, sizeof(GetHitPoint_Params));

	this->ProcessEvent(uFnGetHitPoint, &GetHitPoint_Params, nullptr);

	return GetHitPoint_Params.ReturnValue;
};

// Function REDGame.REDPawn.UpdateExGauge
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDGfxMovieManager_BattleHUD* man                            (CPF_Parm)

void AREDPawn::eventUpdateExGauge(class UREDGfxMovieManager_BattleHUD* man)
{
	static UFunction* uFnUpdateExGauge = nullptr;

	if (!uFnUpdateExGauge)
	{
		uFnUpdateExGauge = UFunction::FindFunction("Function REDGame.REDPawn.UpdateExGauge");
	}

	AREDPawn_eventUpdateExGauge_Params UpdateExGauge_Params;
	memset(&UpdateExGauge_Params, 0, sizeof(UpdateExGauge_Params));
	UpdateExGauge_Params.man = man;

	this->ProcessEvent(uFnUpdateExGauge, &UpdateExGauge_Params, nullptr);
};

// Function REDGame.REDPawn.SetAnimPosition
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    SlotName                       (CPF_Parm)
// int32_t                        ChannelIndex                   (CPF_Parm)
// class FName                    InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// uint32_t                       bFireNotifies                  (CPF_Parm)
// uint32_t                       bLooping                       (CPF_Parm)
// uint32_t                       bEnableRootMotion              (CPF_Parm)

void AREDPawn::eventSetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static UFunction* uFnSetAnimPosition = nullptr;

	if (!uFnSetAnimPosition)
	{
		uFnSetAnimPosition = UFunction::FindFunction("Function REDGame.REDPawn.SetAnimPosition");
	}

	AREDPawn_eventSetAnimPosition_Params SetAnimPosition_Params;
	memset(&SetAnimPosition_Params, 0, sizeof(SetAnimPosition_Params));
	memcpy_s(&SetAnimPosition_Params.SlotName, sizeof(SetAnimPosition_Params.SlotName), &SlotName, sizeof(SlotName));
	memcpy_s(&SetAnimPosition_Params.ChannelIndex, sizeof(SetAnimPosition_Params.ChannelIndex), &ChannelIndex, sizeof(ChannelIndex));
	memcpy_s(&SetAnimPosition_Params.InAnimSeqName, sizeof(SetAnimPosition_Params.InAnimSeqName), &InAnimSeqName, sizeof(InAnimSeqName));
	memcpy_s(&SetAnimPosition_Params.InPosition, sizeof(SetAnimPosition_Params.InPosition), &InPosition, sizeof(InPosition));
	SetAnimPosition_Params.bFireNotifies = bFireNotifies;
	SetAnimPosition_Params.bLooping = bLooping;
	SetAnimPosition_Params.bEnableRootMotion = bEnableRootMotion;

	this->ProcessEvent(uFnSetAnimPosition, &SetAnimPosition_Params, nullptr);
};

// Function REDGame.REDPawn.FinishAnimControl
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AREDPawn::eventFinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* uFnFinishAnimControl = nullptr;

	if (!uFnFinishAnimControl)
	{
		uFnFinishAnimControl = UFunction::FindFunction("Function REDGame.REDPawn.FinishAnimControl");
	}

	AREDPawn_eventFinishAnimControl_Params FinishAnimControl_Params;
	memset(&FinishAnimControl_Params, 0, sizeof(FinishAnimControl_Params));
	FinishAnimControl_Params.InInterpGroup = InInterpGroup;

	this->ProcessEvent(uFnFinishAnimControl, &FinishAnimControl_Params, nullptr);
};

// Function REDGame.REDPawn.BeginAnimControl
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AREDPawn::eventBeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* uFnBeginAnimControl = nullptr;

	if (!uFnBeginAnimControl)
	{
		uFnBeginAnimControl = UFunction::FindFunction("Function REDGame.REDPawn.BeginAnimControl");
	}

	AREDPawn_eventBeginAnimControl_Params BeginAnimControl_Params;
	memset(&BeginAnimControl_Params, 0, sizeof(BeginAnimControl_Params));
	BeginAnimControl_Params.InInterpGroup = InInterpGroup;

	this->ProcessEvent(uFnBeginAnimControl, &BeginAnimControl_Params, nullptr);
};

// Function REDGame.REDPawn.StopCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        outFrame                       (CPF_Parm)

void AREDPawn::eventStopCamera(int32_t outFrame)
{
	static UFunction* uFnStopCamera = nullptr;

	if (!uFnStopCamera)
	{
		uFnStopCamera = UFunction::FindFunction("Function REDGame.REDPawn.StopCamera");
	}

	AREDPawn_eventStopCamera_Params StopCamera_Params;
	memset(&StopCamera_Params, 0, sizeof(StopCamera_Params));
	memcpy_s(&StopCamera_Params.outFrame, sizeof(StopCamera_Params.outFrame), &outFrame, sizeof(outFrame));

	this->ProcessEvent(uFnStopCamera, &StopCamera_Params, nullptr);
};

// Function REDGame.REDPawn.LookAtCamera
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[38090])
// Parameter Info:
// class AREDPawn*                BasePawn                       (CPF_Parm)
// class AREDPawn*                LookAtPawn                     (CPF_Parm)
// float                          Dist                           (CPF_Parm)
// float                          FOV                            (CPF_Parm)
// float                          distPercent                    (CPF_Parm)
// int32_t                        inFrame                        (CPF_Parm)
// int32_t                        stayFrame                      (CPF_Parm)
// int32_t                        outFrame                       (CPF_Parm)
// int32_t                        FreezeFrame                    (CPF_Parm)
// int32_t                        InInterpType                   (CPF_Parm)
// int32_t                        OutInterpType                  (CPF_Parm)
// uint32_t                       MirrorX                        (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bUpdateOrthoBlend              (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOrthoBlendTransversal         (CPF_OptionalParm | CPF_Parm)
// struct FVector                 baseOfs                        (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 targetOfs                      (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn::LookAtCamera(class AREDPawn* BasePawn, class AREDPawn* LookAtPawn, float Dist, float FOV, float distPercent, int32_t inFrame, int32_t stayFrame, int32_t outFrame, int32_t FreezeFrame, int32_t InInterpType, int32_t OutInterpType, bool MirrorX, bool bUpdateOrthoBlend, bool bOrthoBlendTransversal, struct FVector& baseOfs, struct FVector& targetOfs)
{
	static UFunction* uFnLookAtCamera = nullptr;

	if (!uFnLookAtCamera)
	{
		uFnLookAtCamera = UFunction::FindFunction("Function REDGame.REDPawn.LookAtCamera");
	}

	AREDPawn_execLookAtCamera_Params LookAtCamera_Params;
	memset(&LookAtCamera_Params, 0, sizeof(LookAtCamera_Params));
	LookAtCamera_Params.BasePawn = BasePawn;
	LookAtCamera_Params.LookAtPawn = LookAtPawn;
	memcpy_s(&LookAtCamera_Params.Dist, sizeof(LookAtCamera_Params.Dist), &Dist, sizeof(Dist));
	memcpy_s(&LookAtCamera_Params.FOV, sizeof(LookAtCamera_Params.FOV), &FOV, sizeof(FOV));
	memcpy_s(&LookAtCamera_Params.distPercent, sizeof(LookAtCamera_Params.distPercent), &distPercent, sizeof(distPercent));
	memcpy_s(&LookAtCamera_Params.inFrame, sizeof(LookAtCamera_Params.inFrame), &inFrame, sizeof(inFrame));
	memcpy_s(&LookAtCamera_Params.stayFrame, sizeof(LookAtCamera_Params.stayFrame), &stayFrame, sizeof(stayFrame));
	memcpy_s(&LookAtCamera_Params.outFrame, sizeof(LookAtCamera_Params.outFrame), &outFrame, sizeof(outFrame));
	memcpy_s(&LookAtCamera_Params.FreezeFrame, sizeof(LookAtCamera_Params.FreezeFrame), &FreezeFrame, sizeof(FreezeFrame));
	memcpy_s(&LookAtCamera_Params.InInterpType, sizeof(LookAtCamera_Params.InInterpType), &InInterpType, sizeof(InInterpType));
	memcpy_s(&LookAtCamera_Params.OutInterpType, sizeof(LookAtCamera_Params.OutInterpType), &OutInterpType, sizeof(OutInterpType));
	LookAtCamera_Params.MirrorX = MirrorX;
	LookAtCamera_Params.bUpdateOrthoBlend = bUpdateOrthoBlend;
	LookAtCamera_Params.bOrthoBlendTransversal = bOrthoBlendTransversal;
	memcpy_s(&LookAtCamera_Params.baseOfs, sizeof(LookAtCamera_Params.baseOfs), &baseOfs, sizeof(baseOfs));
	memcpy_s(&LookAtCamera_Params.targetOfs, sizeof(LookAtCamera_Params.targetOfs), &targetOfs, sizeof(targetOfs));

	this->ProcessEvent(uFnLookAtCamera, &LookAtCamera_Params, nullptr);

	memcpy_s(&baseOfs, sizeof(baseOfs), &LookAtCamera_Params.baseOfs, sizeof(LookAtCamera_Params.baseOfs));
	memcpy_s(&targetOfs, sizeof(targetOfs), &LookAtCamera_Params.targetOfs, sizeof(LookAtCamera_Params.targetOfs));
};

// Function REDGame.REDPawn.MoveCamera
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[13348])
// Parameter Info:
// class AREDPawn*                BasePawn                       (CPF_Parm)
// float                          FOV                            (CPF_Parm)
// int32_t                        inFrame                        (CPF_Parm)
// int32_t                        stayFrame                      (CPF_Parm)
// int32_t                        outFrame                       (CPF_Parm)
// int32_t                        FreezeFrame                    (CPF_Parm)
// int32_t                        InInterpType                   (CPF_Parm)
// int32_t                        OutInterpType                  (CPF_Parm)
// uint32_t                       MirrorX                        (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bUpdateOrthoBlend              (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bOrthoBlendTransversal         (CPF_OptionalParm | CPF_Parm)
// struct FVector                 pos                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                Rot                            (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn::MoveCamera(class AREDPawn* BasePawn, float FOV, int32_t inFrame, int32_t stayFrame, int32_t outFrame, int32_t FreezeFrame, int32_t InInterpType, int32_t OutInterpType, bool MirrorX, bool bUpdateOrthoBlend, bool bOrthoBlendTransversal, struct FVector& pos, struct FRotator& Rot)
{
	static UFunction* uFnMoveCamera = nullptr;

	if (!uFnMoveCamera)
	{
		uFnMoveCamera = UFunction::FindFunction("Function REDGame.REDPawn.MoveCamera");
	}

	AREDPawn_execMoveCamera_Params MoveCamera_Params;
	memset(&MoveCamera_Params, 0, sizeof(MoveCamera_Params));
	MoveCamera_Params.BasePawn = BasePawn;
	memcpy_s(&MoveCamera_Params.FOV, sizeof(MoveCamera_Params.FOV), &FOV, sizeof(FOV));
	memcpy_s(&MoveCamera_Params.inFrame, sizeof(MoveCamera_Params.inFrame), &inFrame, sizeof(inFrame));
	memcpy_s(&MoveCamera_Params.stayFrame, sizeof(MoveCamera_Params.stayFrame), &stayFrame, sizeof(stayFrame));
	memcpy_s(&MoveCamera_Params.outFrame, sizeof(MoveCamera_Params.outFrame), &outFrame, sizeof(outFrame));
	memcpy_s(&MoveCamera_Params.FreezeFrame, sizeof(MoveCamera_Params.FreezeFrame), &FreezeFrame, sizeof(FreezeFrame));
	memcpy_s(&MoveCamera_Params.InInterpType, sizeof(MoveCamera_Params.InInterpType), &InInterpType, sizeof(InInterpType));
	memcpy_s(&MoveCamera_Params.OutInterpType, sizeof(MoveCamera_Params.OutInterpType), &OutInterpType, sizeof(OutInterpType));
	MoveCamera_Params.MirrorX = MirrorX;
	MoveCamera_Params.bUpdateOrthoBlend = bUpdateOrthoBlend;
	MoveCamera_Params.bOrthoBlendTransversal = bOrthoBlendTransversal;
	memcpy_s(&MoveCamera_Params.pos, sizeof(MoveCamera_Params.pos), &pos, sizeof(pos));
	memcpy_s(&MoveCamera_Params.Rot, sizeof(MoveCamera_Params.Rot), &Rot, sizeof(Rot));

	this->ProcessEvent(uFnMoveCamera, &MoveCamera_Params, nullptr);

	memcpy_s(&pos, sizeof(pos), &MoveCamera_Params.pos, sizeof(MoveCamera_Params.pos));
	memcpy_s(&Rot, sizeof(Rot), &MoveCamera_Params.Rot, sizeof(MoveCamera_Params.Rot));
};

// Function REDGame.REDPawn.MoveCameraPreset
// [0x00024800] (FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PresetName                     (CPF_Parm)
// uint32_t                       MirrorX                        (CPF_OptionalParm | CPF_Parm)

void AREDPawn::eventMoveCameraPreset(const class FName& PresetName, bool MirrorX)
{
	static UFunction* uFnMoveCameraPreset = nullptr;

	if (!uFnMoveCameraPreset)
	{
		uFnMoveCameraPreset = UFunction::FindFunction("Function REDGame.REDPawn.MoveCameraPreset");
	}

	AREDPawn_eventMoveCameraPreset_Params MoveCameraPreset_Params;
	memset(&MoveCameraPreset_Params, 0, sizeof(MoveCameraPreset_Params));
	memcpy_s(&MoveCameraPreset_Params.PresetName, sizeof(MoveCameraPreset_Params.PresetName), &PresetName, sizeof(PresetName));
	MoveCameraPreset_Params.MirrorX = MirrorX;

	this->ProcessEvent(uFnMoveCameraPreset, &MoveCameraPreset_Params, nullptr);
};

// Function REDGame.REDPawn.CommonSE
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[36277])
// Parameter Info:
// class FName                    cueName                        (CPF_Parm)
// uint32_t                       onCenter                       (CPF_OptionalParm | CPF_Parm)

void AREDPawn::CommonSE(const class FName& cueName, bool onCenter)
{
	static UFunction* uFnCommonSE = nullptr;

	if (!uFnCommonSE)
	{
		uFnCommonSE = UFunction::FindFunction("Function REDGame.REDPawn.CommonSE");
	}

	AREDPawn_execCommonSE_Params CommonSE_Params;
	memset(&CommonSE_Params, 0, sizeof(CommonSE_Params));
	memcpy_s(&CommonSE_Params.cueName, sizeof(CommonSE_Params.cueName), &cueName, sizeof(cueName));
	CommonSE_Params.onCenter = onCenter;

	this->ProcessEvent(uFnCommonSE, &CommonSE_Params, nullptr);
};

// Function REDGame.REDPawn.GetSoundPlayLocation
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37172])
// Parameter Info:
// struct FVector                 Loc                            (CPF_Parm | CPF_OutParm)

void AREDPawn::GetSoundPlayLocation(struct FVector& Loc)
{
	static UFunction* uFnGetSoundPlayLocation = nullptr;

	if (!uFnGetSoundPlayLocation)
	{
		uFnGetSoundPlayLocation = UFunction::FindFunction("Function REDGame.REDPawn.GetSoundPlayLocation");
	}

	AREDPawn_execGetSoundPlayLocation_Params GetSoundPlayLocation_Params;
	memset(&GetSoundPlayLocation_Params, 0, sizeof(GetSoundPlayLocation_Params));
	memcpy_s(&GetSoundPlayLocation_Params.Loc, sizeof(GetSoundPlayLocation_Params.Loc), &Loc, sizeof(Loc));

	this->ProcessEvent(uFnGetSoundPlayLocation, &GetSoundPlayLocation_Params, nullptr);

	memcpy_s(&Loc, sizeof(Loc), &GetSoundPlayLocation_Params.Loc, sizeof(GetSoundPlayLocation_Params.Loc));
};

// Function REDGame.REDPawn.CreateCommonParticle
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36330])
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// struct FParticleArg            Arg                            (CPF_Const | CPF_Parm | CPF_OutParm)

class UParticleSystemComponent* AREDPawn::CreateCommonParticle(struct FParticleArg& Arg)
{
	static UFunction* uFnCreateCommonParticle = nullptr;

	if (!uFnCreateCommonParticle)
	{
		uFnCreateCommonParticle = UFunction::FindFunction("Function REDGame.REDPawn.CreateCommonParticle");
	}

	AREDPawn_execCreateCommonParticle_Params CreateCommonParticle_Params;
	memset(&CreateCommonParticle_Params, 0, sizeof(CreateCommonParticle_Params));
	memcpy_s(&CreateCommonParticle_Params.Arg, sizeof(CreateCommonParticle_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnCreateCommonParticle, &CreateCommonParticle_Params, nullptr);

	memcpy_s(&Arg, sizeof(Arg), &CreateCommonParticle_Params.Arg, sizeof(CreateCommonParticle_Params.Arg));

	return CreateCommonParticle_Params.ReturnValue;
};

// Function REDGame.REDPawn.ParticleMoveToSocket
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[38892])
// Parameter Info:
// class UParticleSystemComponent* PSC                            (CPF_Parm | CPF_EditInline)
// uint32_t                       bWithRotation                  (CPF_Parm)
// class FName                    SocketName                     (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn::ParticleMoveToSocket(class UParticleSystemComponent* PSC, bool bWithRotation, class FName& SocketName)
{
	static UFunction* uFnParticleMoveToSocket = nullptr;

	if (!uFnParticleMoveToSocket)
	{
		uFnParticleMoveToSocket = UFunction::FindFunction("Function REDGame.REDPawn.ParticleMoveToSocket");
	}

	AREDPawn_execParticleMoveToSocket_Params ParticleMoveToSocket_Params;
	memset(&ParticleMoveToSocket_Params, 0, sizeof(ParticleMoveToSocket_Params));
	ParticleMoveToSocket_Params.PSC = PSC;
	ParticleMoveToSocket_Params.bWithRotation = bWithRotation;
	memcpy_s(&ParticleMoveToSocket_Params.SocketName, sizeof(ParticleMoveToSocket_Params.SocketName), &SocketName, sizeof(SocketName));

	this->ProcessEvent(uFnParticleMoveToSocket, &ParticleMoveToSocket_Params, nullptr);

	memcpy_s(&SocketName, sizeof(SocketName), &ParticleMoveToSocket_Params.SocketName, sizeof(ParticleMoveToSocket_Params.SocketName));
};

// Function REDGame.REDPawn.GetSocketLocationAndRotation
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37170])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    SocketName                     (CPF_Parm)
// struct FVector                 Loc                            (CPF_Parm | CPF_OutParm)
// struct FRotator                Rot                            (CPF_OptionalParm | CPF_Parm | CPF_OutParm)

bool AREDPawn::GetSocketLocationAndRotation(const class FName& SocketName, struct FVector& Loc, struct FRotator& Rot)
{
	static UFunction* uFnGetSocketLocationAndRotation = nullptr;

	if (!uFnGetSocketLocationAndRotation)
	{
		uFnGetSocketLocationAndRotation = UFunction::FindFunction("Function REDGame.REDPawn.GetSocketLocationAndRotation");
	}

	AREDPawn_execGetSocketLocationAndRotation_Params GetSocketLocationAndRotation_Params;
	memset(&GetSocketLocationAndRotation_Params, 0, sizeof(GetSocketLocationAndRotation_Params));
	memcpy_s(&GetSocketLocationAndRotation_Params.SocketName, sizeof(GetSocketLocationAndRotation_Params.SocketName), &SocketName, sizeof(SocketName));
	memcpy_s(&GetSocketLocationAndRotation_Params.Loc, sizeof(GetSocketLocationAndRotation_Params.Loc), &Loc, sizeof(Loc));
	memcpy_s(&GetSocketLocationAndRotation_Params.Rot, sizeof(GetSocketLocationAndRotation_Params.Rot), &Rot, sizeof(Rot));

	this->ProcessEvent(uFnGetSocketLocationAndRotation, &GetSocketLocationAndRotation_Params, nullptr);

	memcpy_s(&Loc, sizeof(Loc), &GetSocketLocationAndRotation_Params.Loc, sizeof(GetSocketLocationAndRotation_Params.Loc));
	memcpy_s(&Rot, sizeof(Rot), &GetSocketLocationAndRotation_Params.Rot, sizeof(GetSocketLocationAndRotation_Params.Rot));

	return GetSocketLocationAndRotation_Params.ReturnValue;
};

// Function REDGame.REDPawn.Tick
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDPawn::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDPawn.Tick");
	}

	AREDPawn_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDPawn.NativeTick
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38513])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDPawn::NativeTick(float DeltaTime)
{
	static UFunction* uFnNativeTick = nullptr;

	if (!uFnNativeTick)
	{
		uFnNativeTick = UFunction::FindFunction("Function REDGame.REDPawn.NativeTick");
	}

	AREDPawn_execNativeTick_Params NativeTick_Params;
	memset(&NativeTick_Params, 0, sizeof(NativeTick_Params));
	memcpy_s(&NativeTick_Params.DeltaTime, sizeof(NativeTick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnNativeTick, &NativeTick_Params, nullptr);
};

// Function REDGame.REDPawn.DebugTick
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36431])
// Parameter Info:

void AREDPawn::DebugTick()
{
	static UFunction* uFnDebugTick = nullptr;

	if (!uFnDebugTick)
	{
		uFnDebugTick = UFunction::FindFunction("Function REDGame.REDPawn.DebugTick");
	}

	AREDPawn_execDebugTick_Params DebugTick_Params;
	memset(&DebugTick_Params, 0, sizeof(DebugTick_Params));

	this->ProcessEvent(uFnDebugTick, &DebugTick_Params, nullptr);
};

// Function REDGame.REDPawn.UpdateBlendAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40604])
// Parameter Info:

void AREDPawn::UpdateBlendAnim()
{
	static UFunction* uFnUpdateBlendAnim = nullptr;

	if (!uFnUpdateBlendAnim)
	{
		uFnUpdateBlendAnim = UFunction::FindFunction("Function REDGame.REDPawn.UpdateBlendAnim");
	}

	AREDPawn_execUpdateBlendAnim_Params UpdateBlendAnim_Params;
	memset(&UpdateBlendAnim_Params, 0, sizeof(UpdateBlendAnim_Params));

	this->ProcessEvent(uFnUpdateBlendAnim, &UpdateBlendAnim_Params, nullptr);
};

// Function REDGame.REDPawn.SetAutoUpdateBlendAnime
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bAutoUpdate                    (CPF_Parm)

void AREDPawn::eventSetAutoUpdateBlendAnime(bool bAutoUpdate)
{
	static UFunction* uFnSetAutoUpdateBlendAnime = nullptr;

	if (!uFnSetAutoUpdateBlendAnime)
	{
		uFnSetAutoUpdateBlendAnime = UFunction::FindFunction("Function REDGame.REDPawn.SetAutoUpdateBlendAnime");
	}

	AREDPawn_eventSetAutoUpdateBlendAnime_Params SetAutoUpdateBlendAnime_Params;
	memset(&SetAutoUpdateBlendAnime_Params, 0, sizeof(SetAutoUpdateBlendAnime_Params));
	SetAutoUpdateBlendAnime_Params.bAutoUpdate = bAutoUpdate;

	this->ProcessEvent(uFnSetAutoUpdateBlendAnime, &SetAutoUpdateBlendAnime_Params, nullptr);
};

// Function REDGame.REDPawn.GetModelDir
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37110])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn::GetModelDir()
{
	static UFunction* uFnGetModelDir = nullptr;

	if (!uFnGetModelDir)
	{
		uFnGetModelDir = UFunction::FindFunction("Function REDGame.REDPawn.GetModelDir");
	}

	AREDPawn_execGetModelDir_Params GetModelDir_Params;
	memset(&GetModelDir_Params, 0, sizeof(GetModelDir_Params));

	this->ProcessEvent(uFnGetModelDir, &GetModelDir_Params, nullptr);

	return GetModelDir_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetBaseAimRotation
// [0x00820922] (FUNC_Defined | FUNC_Singular | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator AREDPawn::eventGetBaseAimRotation()
{
	static UFunction* uFnGetBaseAimRotation = nullptr;

	if (!uFnGetBaseAimRotation)
	{
		uFnGetBaseAimRotation = UFunction::FindFunction("Function REDGame.REDPawn.GetBaseAimRotation");
	}

	AREDPawn_eventGetBaseAimRotation_Params GetBaseAimRotation_Params;
	memset(&GetBaseAimRotation_Params, 0, sizeof(GetBaseAimRotation_Params));

	this->ProcessEvent(uFnGetBaseAimRotation, &GetBaseAimRotation_Params, nullptr);

	return GetBaseAimRotation_Params.ReturnValue;
};

// Function REDGame.REDPawn.BecomeViewTarget
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void AREDPawn::eventBecomeViewTarget(class APlayerController* PC)
{
	static UFunction* uFnBecomeViewTarget = nullptr;

	if (!uFnBecomeViewTarget)
	{
		uFnBecomeViewTarget = UFunction::FindFunction("Function REDGame.REDPawn.BecomeViewTarget");
	}

	AREDPawn_eventBecomeViewTarget_Params BecomeViewTarget_Params;
	memset(&BecomeViewTarget_Params, 0, sizeof(BecomeViewTarget_Params));
	BecomeViewTarget_Params.PC = PC;

	this->ProcessEvent(uFnBecomeViewTarget, &BecomeViewTarget_Params, nullptr);
};

// Function REDGame.REDPawn.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function REDGame.REDPawn.PostBeginPlay");
	}

	AREDPawn_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function REDGame.REDPawn.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function REDGame.REDPawn.PreBeginPlay");
	}

	AREDPawn_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function REDGame.REDPawn.StopEyeBlink
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn::eventStopEyeBlink()
{
	static UFunction* uFnStopEyeBlink = nullptr;

	if (!uFnStopEyeBlink)
	{
		uFnStopEyeBlink = UFunction::FindFunction("Function REDGame.REDPawn.StopEyeBlink");
	}

	AREDPawn_eventStopEyeBlink_Params StopEyeBlink_Params;
	memset(&StopEyeBlink_Params, 0, sizeof(StopEyeBlink_Params));

	this->ProcessEvent(uFnStopEyeBlink, &StopEyeBlink_Params, nullptr);
};

// Function REDGame.REDPawn.StartEyeBlink
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       isLinear                       (CPF_OptionalParm | CPF_Parm)
// float                          Speed                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        frame                          (CPF_OptionalParm | CPF_Parm)

void AREDPawn::eventStartEyeBlink(bool isLinear, float Speed, int32_t frame)
{
	static UFunction* uFnStartEyeBlink = nullptr;

	if (!uFnStartEyeBlink)
	{
		uFnStartEyeBlink = UFunction::FindFunction("Function REDGame.REDPawn.StartEyeBlink");
	}

	AREDPawn_eventStartEyeBlink_Params StartEyeBlink_Params;
	memset(&StartEyeBlink_Params, 0, sizeof(StartEyeBlink_Params));
	StartEyeBlink_Params.isLinear = isLinear;
	memcpy_s(&StartEyeBlink_Params.Speed, sizeof(StartEyeBlink_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&StartEyeBlink_Params.frame, sizeof(StartEyeBlink_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnStartEyeBlink, &StartEyeBlink_Params, nullptr);
};

// Function REDGame.REDPawn.CloseMouth
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn::eventCloseMouth()
{
	static UFunction* uFnCloseMouth = nullptr;

	if (!uFnCloseMouth)
	{
		uFnCloseMouth = UFunction::FindFunction("Function REDGame.REDPawn.CloseMouth");
	}

	AREDPawn_eventCloseMouth_Params CloseMouth_Params;
	memset(&CloseMouth_Params, 0, sizeof(CloseMouth_Params));

	this->ProcessEvent(uFnCloseMouth, &CloseMouth_Params, nullptr);
};

// Function REDGame.REDPawn.ChangeMouth
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36101])
// Parameter Info:
// class FName                    MouthNodeName                  (CPF_Parm)

void AREDPawn::ChangeMouth(const class FName& MouthNodeName)
{
	static UFunction* uFnChangeMouth = nullptr;

	if (!uFnChangeMouth)
	{
		uFnChangeMouth = UFunction::FindFunction("Function REDGame.REDPawn.ChangeMouth");
	}

	AREDPawn_execChangeMouth_Params ChangeMouth_Params;
	memset(&ChangeMouth_Params, 0, sizeof(ChangeMouth_Params));
	memcpy_s(&ChangeMouth_Params.MouthNodeName, sizeof(ChangeMouth_Params.MouthNodeName), &MouthNodeName, sizeof(MouthNodeName));

	this->ProcessEvent(uFnChangeMouth, &ChangeMouth_Params, nullptr);
};

// Function REDGame.REDPawn.OpenMouth
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_OptionalParm | CPF_Parm)

void AREDPawn::eventOpenMouth(int32_t Type)
{
	static UFunction* uFnOpenMouth = nullptr;

	if (!uFnOpenMouth)
	{
		uFnOpenMouth = UFunction::FindFunction("Function REDGame.REDPawn.OpenMouth");
	}

	AREDPawn_eventOpenMouth_Params OpenMouth_Params;
	memset(&OpenMouth_Params, 0, sizeof(OpenMouth_Params));
	memcpy_s(&OpenMouth_Params.Type, sizeof(OpenMouth_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnOpenMouth, &OpenMouth_Params, nullptr);
};

// Function REDGame.REDPawn.StopLip
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       Linear                         (CPF_OptionalParm | CPF_Parm)

void AREDPawn::eventStopLip(bool Linear)
{
	static UFunction* uFnStopLip = nullptr;

	if (!uFnStopLip)
	{
		uFnStopLip = UFunction::FindFunction("Function REDGame.REDPawn.StopLip");
	}

	AREDPawn_eventStopLip_Params StopLip_Params;
	memset(&StopLip_Params, 0, sizeof(StopLip_Params));
	StopLip_Params.Linear = Linear;

	this->ProcessEvent(uFnStopLip, &StopLip_Params, nullptr);
};

// Function REDGame.REDPawn.StartLip
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Type                           (CPF_Parm)
// uint32_t                       isLinear                       (CPF_OptionalParm | CPF_Parm)
// float                          Speed                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        frame                          (CPF_OptionalParm | CPF_Parm)

void AREDPawn::eventStartLip(int32_t Type, bool isLinear, float Speed, int32_t frame)
{
	static UFunction* uFnStartLip = nullptr;

	if (!uFnStartLip)
	{
		uFnStartLip = UFunction::FindFunction("Function REDGame.REDPawn.StartLip");
	}

	AREDPawn_eventStartLip_Params StartLip_Params;
	memset(&StartLip_Params, 0, sizeof(StartLip_Params));
	memcpy_s(&StartLip_Params.Type, sizeof(StartLip_Params.Type), &Type, sizeof(Type));
	StartLip_Params.isLinear = isLinear;
	memcpy_s(&StartLip_Params.Speed, sizeof(StartLip_Params.Speed), &Speed, sizeof(Speed));
	memcpy_s(&StartLip_Params.frame, sizeof(StartLip_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnStartLip, &StartLip_Params, nullptr);
};

// Function REDGame.REDPawn.SetNonStepAnimUseDeltaSeconds
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39785])
// Parameter Info:
// uint32_t                       On                             (CPF_Parm)

void AREDPawn::SetNonStepAnimUseDeltaSeconds(bool On)
{
	static UFunction* uFnSetNonStepAnimUseDeltaSeconds = nullptr;

	if (!uFnSetNonStepAnimUseDeltaSeconds)
	{
		uFnSetNonStepAnimUseDeltaSeconds = UFunction::FindFunction("Function REDGame.REDPawn.SetNonStepAnimUseDeltaSeconds");
	}

	AREDPawn_execSetNonStepAnimUseDeltaSeconds_Params SetNonStepAnimUseDeltaSeconds_Params;
	memset(&SetNonStepAnimUseDeltaSeconds_Params, 0, sizeof(SetNonStepAnimUseDeltaSeconds_Params));
	SetNonStepAnimUseDeltaSeconds_Params.On = On;

	this->ProcessEvent(uFnSetNonStepAnimUseDeltaSeconds, &SetNonStepAnimUseDeltaSeconds_Params, nullptr);
};

// Function REDGame.REDPawn.IsAnimeEnd
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[13308])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPawn::IsAnimeEnd()
{
	static UFunction* uFnIsAnimeEnd = nullptr;

	if (!uFnIsAnimeEnd)
	{
		uFnIsAnimeEnd = UFunction::FindFunction("Function REDGame.REDPawn.IsAnimeEnd");
	}

	AREDPawn_execIsAnimeEnd_Params IsAnimeEnd_Params;
	memset(&IsAnimeEnd_Params, 0, sizeof(IsAnimeEnd_Params));

	this->ProcessEvent(uFnIsAnimeEnd, &IsAnimeEnd_Params, nullptr);

	return IsAnimeEnd_Params.ReturnValue;
};

// Function REDGame.REDPawn.SetStepAnimeMode
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39814])
// Parameter Info:
// uint32_t                       On                             (CPF_Parm)

void AREDPawn::SetStepAnimeMode(bool On)
{
	static UFunction* uFnSetStepAnimeMode = nullptr;

	if (!uFnSetStepAnimeMode)
	{
		uFnSetStepAnimeMode = UFunction::FindFunction("Function REDGame.REDPawn.SetStepAnimeMode");
	}

	AREDPawn_execSetStepAnimeMode_Params SetStepAnimeMode_Params;
	memset(&SetStepAnimeMode_Params, 0, sizeof(SetStepAnimeMode_Params));
	SetStepAnimeMode_Params.On = On;

	this->ProcessEvent(uFnSetStepAnimeMode, &SetStepAnimeMode_Params, nullptr);
};

// Function REDGame.REDPawn.SetNonStepAnimeFrame
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39784])
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void AREDPawn::SetNonStepAnimeFrame(int32_t frame)
{
	static UFunction* uFnSetNonStepAnimeFrame = nullptr;

	if (!uFnSetNonStepAnimeFrame)
	{
		uFnSetNonStepAnimeFrame = UFunction::FindFunction("Function REDGame.REDPawn.SetNonStepAnimeFrame");
	}

	AREDPawn_execSetNonStepAnimeFrame_Params SetNonStepAnimeFrame_Params;
	memset(&SetNonStepAnimeFrame_Params, 0, sizeof(SetNonStepAnimeFrame_Params));
	memcpy_s(&SetNonStepAnimeFrame_Params.frame, sizeof(SetNonStepAnimeFrame_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetNonStepAnimeFrame, &SetNonStepAnimeFrame_Params, nullptr);
};

// Function REDGame.REDPawn.SetAnimeFrame
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39690])
// Parameter Info:
// int32_t                        frame                          (CPF_Parm)

void AREDPawn::SetAnimeFrame(int32_t frame)
{
	static UFunction* uFnSetAnimeFrame = nullptr;

	if (!uFnSetAnimeFrame)
	{
		uFnSetAnimeFrame = UFunction::FindFunction("Function REDGame.REDPawn.SetAnimeFrame");
	}

	AREDPawn_execSetAnimeFrame_Params SetAnimeFrame_Params;
	memset(&SetAnimeFrame_Params, 0, sizeof(SetAnimeFrame_Params));
	memcpy_s(&SetAnimeFrame_Params.frame, sizeof(SetAnimeFrame_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnSetAnimeFrame, &SetAnimeFrame_Params, nullptr);
};

// Function REDGame.REDPawn.StepAnime
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[40090])
// Parameter Info:
// int32_t                        StepFrame                      (CPF_OptionalParm | CPF_Parm)

void AREDPawn::StepAnime(int32_t StepFrame)
{
	static UFunction* uFnStepAnime = nullptr;

	if (!uFnStepAnime)
	{
		uFnStepAnime = UFunction::FindFunction("Function REDGame.REDPawn.StepAnime");
	}

	AREDPawn_execStepAnime_Params StepAnime_Params;
	memset(&StepAnime_Params, 0, sizeof(StepAnime_Params));
	memcpy_s(&StepAnime_Params.StepFrame, sizeof(StepAnime_Params.StepFrame), &StepFrame, sizeof(StepFrame));

	this->ProcessEvent(uFnStepAnime, &StepAnime_Params, nullptr);
};

// Function REDGame.REDPawn.StopAnimeSectionLoop
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40098])
// Parameter Info:

void AREDPawn::StopAnimeSectionLoop()
{
	static UFunction* uFnStopAnimeSectionLoop = nullptr;

	if (!uFnStopAnimeSectionLoop)
	{
		uFnStopAnimeSectionLoop = UFunction::FindFunction("Function REDGame.REDPawn.StopAnimeSectionLoop");
	}

	AREDPawn_execStopAnimeSectionLoop_Params StopAnimeSectionLoop_Params;
	memset(&StopAnimeSectionLoop_Params, 0, sizeof(StopAnimeSectionLoop_Params));

	this->ProcessEvent(uFnStopAnimeSectionLoop, &StopAnimeSectionLoop_Params, nullptr);
};

// Function REDGame.REDPawn.SetAnimeLoop
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39691])
// Parameter Info:
// uint32_t                       flag                           (CPF_Parm)

void AREDPawn::SetAnimeLoop(bool flag)
{
	static UFunction* uFnSetAnimeLoop = nullptr;

	if (!uFnSetAnimeLoop)
	{
		uFnSetAnimeLoop = UFunction::FindFunction("Function REDGame.REDPawn.SetAnimeLoop");
	}

	AREDPawn_execSetAnimeLoop_Params SetAnimeLoop_Params;
	memset(&SetAnimeLoop_Params, 0, sizeof(SetAnimeLoop_Params));
	SetAnimeLoop_Params.flag = flag;

	this->ProcessEvent(uFnSetAnimeLoop, &SetAnimeLoop_Params, nullptr);
};

// Function REDGame.REDPawn.PlayCutSceneAnime
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38969])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimSeqName                    (CPF_Parm)
// float                          StartTime                      (CPF_Parm)

bool AREDPawn::PlayCutSceneAnime(const class FName& AnimSeqName, float StartTime)
{
	static UFunction* uFnPlayCutSceneAnime = nullptr;

	if (!uFnPlayCutSceneAnime)
	{
		uFnPlayCutSceneAnime = UFunction::FindFunction("Function REDGame.REDPawn.PlayCutSceneAnime");
	}

	AREDPawn_execPlayCutSceneAnime_Params PlayCutSceneAnime_Params;
	memset(&PlayCutSceneAnime_Params, 0, sizeof(PlayCutSceneAnime_Params));
	memcpy_s(&PlayCutSceneAnime_Params.AnimSeqName, sizeof(PlayCutSceneAnime_Params.AnimSeqName), &AnimSeqName, sizeof(AnimSeqName));
	memcpy_s(&PlayCutSceneAnime_Params.StartTime, sizeof(PlayCutSceneAnime_Params.StartTime), &StartTime, sizeof(StartTime));

	this->ProcessEvent(uFnPlayCutSceneAnime, &PlayCutSceneAnime_Params, nullptr);

	return PlayCutSceneAnime_Params.ReturnValue;
};

// Function REDGame.REDPawn.ChangeAnime
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36087])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimSeqName                    (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)
// float                          StartTime                      (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

bool AREDPawn::ChangeAnime(const class FName& AnimSeqName, bool isLoop, float StartTime, float BlendTime)
{
	static UFunction* uFnChangeAnime = nullptr;

	if (!uFnChangeAnime)
	{
		uFnChangeAnime = UFunction::FindFunction("Function REDGame.REDPawn.ChangeAnime");
	}

	AREDPawn_execChangeAnime_Params ChangeAnime_Params;
	memset(&ChangeAnime_Params, 0, sizeof(ChangeAnime_Params));
	memcpy_s(&ChangeAnime_Params.AnimSeqName, sizeof(ChangeAnime_Params.AnimSeqName), &AnimSeqName, sizeof(AnimSeqName));
	ChangeAnime_Params.isLoop = isLoop;
	memcpy_s(&ChangeAnime_Params.StartTime, sizeof(ChangeAnime_Params.StartTime), &StartTime, sizeof(StartTime));
	memcpy_s(&ChangeAnime_Params.BlendTime, sizeof(ChangeAnime_Params.BlendTime), &BlendTime, sizeof(BlendTime));

	this->ProcessEvent(uFnChangeAnime, &ChangeAnime_Params, nullptr);

	return ChangeAnime_Params.ReturnValue;
};

// Function REDGame.REDPawn.UpdateNonStepAnime
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40795])
// Parameter Info:

void AREDPawn::UpdateNonStepAnime()
{
	static UFunction* uFnUpdateNonStepAnime = nullptr;

	if (!uFnUpdateNonStepAnime)
	{
		uFnUpdateNonStepAnime = UFunction::FindFunction("Function REDGame.REDPawn.UpdateNonStepAnime");
	}

	AREDPawn_execUpdateNonStepAnime_Params UpdateNonStepAnime_Params;
	memset(&UpdateNonStepAnime_Params, 0, sizeof(UpdateNonStepAnime_Params));

	this->ProcessEvent(uFnUpdateNonStepAnime, &UpdateNonStepAnime_Params, nullptr);
};

// Function REDGame.REDPawn.OnActionChange
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38810])
// Parameter Info:

void AREDPawn::OnActionChange()
{
	static UFunction* uFnOnActionChange = nullptr;

	if (!uFnOnActionChange)
	{
		uFnOnActionChange = UFunction::FindFunction("Function REDGame.REDPawn.OnActionChange");
	}

	AREDPawn_execOnActionChange_Params OnActionChange_Params;
	memset(&OnActionChange_Params, 0, sizeof(OnActionChange_Params));

	this->ProcessEvent(uFnOnActionChange, &OnActionChange_Params, nullptr);
};

// Function REDGame.REDPawn.GetMeshFromIndex
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMeshComponent*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// int32_t                        Index                          (CPF_Parm)

class USkeletalMeshComponent* AREDPawn::GetMeshFromIndex(int32_t Index)
{
	static UFunction* uFnGetMeshFromIndex = nullptr;

	if (!uFnGetMeshFromIndex)
	{
		uFnGetMeshFromIndex = UFunction::FindFunction("Function REDGame.REDPawn.GetMeshFromIndex");
	}

	AREDPawn_execGetMeshFromIndex_Params GetMeshFromIndex_Params;
	memset(&GetMeshFromIndex_Params, 0, sizeof(GetMeshFromIndex_Params));
	memcpy_s(&GetMeshFromIndex_Params.Index, sizeof(GetMeshFromIndex_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnGetMeshFromIndex, &GetMeshFromIndex_Params, nullptr);

	return GetMeshFromIndex_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetMeshFromName
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMeshComponent*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// class FName                    MeshName                       (CPF_OptionalParm | CPF_Parm)

class USkeletalMeshComponent* AREDPawn::GetMeshFromName(const class FName& MeshName)
{
	static UFunction* uFnGetMeshFromName = nullptr;

	if (!uFnGetMeshFromName)
	{
		uFnGetMeshFromName = UFunction::FindFunction("Function REDGame.REDPawn.GetMeshFromName");
	}

	AREDPawn_execGetMeshFromName_Params GetMeshFromName_Params;
	memset(&GetMeshFromName_Params, 0, sizeof(GetMeshFromName_Params));
	memcpy_s(&GetMeshFromName_Params.MeshName, sizeof(GetMeshFromName_Params.MeshName), &MeshName, sizeof(MeshName));

	this->ProcessEvent(uFnGetMeshFromName, &GetMeshFromName_Params, nullptr);

	return GetMeshFromName_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetCurrentAnimSeqAny
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDAnimNodeSequence*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class UREDAnimNodeSequence* AREDPawn::GetCurrentAnimSeqAny()
{
	static UFunction* uFnGetCurrentAnimSeqAny = nullptr;

	if (!uFnGetCurrentAnimSeqAny)
	{
		uFnGetCurrentAnimSeqAny = UFunction::FindFunction("Function REDGame.REDPawn.GetCurrentAnimSeqAny");
	}

	AREDPawn_execGetCurrentAnimSeqAny_Params GetCurrentAnimSeqAny_Params;
	memset(&GetCurrentAnimSeqAny_Params, 0, sizeof(GetCurrentAnimSeqAny_Params));

	this->ProcessEvent(uFnGetCurrentAnimSeqAny, &GetCurrentAnimSeqAny_Params, nullptr);

	return GetCurrentAnimSeqAny_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetCurrentAnimSeq
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDAnimNodeSequence*    ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    MeshName                       (CPF_OptionalParm | CPF_Parm)

class UREDAnimNodeSequence* AREDPawn::GetCurrentAnimSeq(const class FName& MeshName)
{
	static UFunction* uFnGetCurrentAnimSeq = nullptr;

	if (!uFnGetCurrentAnimSeq)
	{
		uFnGetCurrentAnimSeq = UFunction::FindFunction("Function REDGame.REDPawn.GetCurrentAnimSeq");
	}

	AREDPawn_execGetCurrentAnimSeq_Params GetCurrentAnimSeq_Params;
	memset(&GetCurrentAnimSeq_Params, 0, sizeof(GetCurrentAnimSeq_Params));
	memcpy_s(&GetCurrentAnimSeq_Params.MeshName, sizeof(GetCurrentAnimSeq_Params.MeshName), &MeshName, sizeof(MeshName));

	this->ProcessEvent(uFnGetCurrentAnimSeq, &GetCurrentAnimSeq_Params, nullptr);

	return GetCurrentAnimSeq_Params.ReturnValue;
};

// Function REDGame.REDPawn.CalcCamera
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          fDeltaTime                     (CPF_Parm)
// struct FVector                 out_CamLoc                     (CPF_Parm | CPF_OutParm)
// struct FRotator                out_CamRot                     (CPF_Parm | CPF_OutParm)
// float                          out_FOV                        (CPF_Parm | CPF_OutParm)

bool AREDPawn::CalcCamera(float fDeltaTime, struct FVector& out_CamLoc, struct FRotator& out_CamRot, float& out_FOV)
{
	static UFunction* uFnCalcCamera = nullptr;

	if (!uFnCalcCamera)
	{
		uFnCalcCamera = UFunction::FindFunction("Function REDGame.REDPawn.CalcCamera");
	}

	AREDPawn_execCalcCamera_Params CalcCamera_Params;
	memset(&CalcCamera_Params, 0, sizeof(CalcCamera_Params));
	memcpy_s(&CalcCamera_Params.fDeltaTime, sizeof(CalcCamera_Params.fDeltaTime), &fDeltaTime, sizeof(fDeltaTime));
	memcpy_s(&CalcCamera_Params.out_CamLoc, sizeof(CalcCamera_Params.out_CamLoc), &out_CamLoc, sizeof(out_CamLoc));
	memcpy_s(&CalcCamera_Params.out_CamRot, sizeof(CalcCamera_Params.out_CamRot), &out_CamRot, sizeof(out_CamRot));
	memcpy_s(&CalcCamera_Params.out_FOV, sizeof(CalcCamera_Params.out_FOV), &out_FOV, sizeof(out_FOV));

	this->ProcessEvent(uFnCalcCamera, &CalcCamera_Params, nullptr);

	memcpy_s(&out_CamLoc, sizeof(out_CamLoc), &CalcCamera_Params.out_CamLoc, sizeof(CalcCamera_Params.out_CamLoc));
	memcpy_s(&out_CamRot, sizeof(out_CamRot), &CalcCamera_Params.out_CamRot, sizeof(CalcCamera_Params.out_CamRot));
	memcpy_s(&out_FOV, sizeof(out_FOV), &CalcCamera_Params.out_FOV, sizeof(CalcCamera_Params.out_FOV));

	return CalcCamera_Params.ReturnValue;
};

// Function REDGame.REDPawn.SetMaterialParamFloat
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39772])
// Parameter Info:
// class FName                    ParamName                      (CPF_Const | CPF_Parm)
// float                          Param                          (CPF_Parm)
// EMaterialCategory              Category                       (CPF_OptionalParm | CPF_Parm)

void AREDPawn::SetMaterialParamFloat(const class FName& ParamName, float Param, EMaterialCategory Category)
{
	static UFunction* uFnSetMaterialParamFloat = nullptr;

	if (!uFnSetMaterialParamFloat)
	{
		uFnSetMaterialParamFloat = UFunction::FindFunction("Function REDGame.REDPawn.SetMaterialParamFloat");
	}

	AREDPawn_execSetMaterialParamFloat_Params SetMaterialParamFloat_Params;
	memset(&SetMaterialParamFloat_Params, 0, sizeof(SetMaterialParamFloat_Params));
	memcpy_s(&SetMaterialParamFloat_Params.ParamName, sizeof(SetMaterialParamFloat_Params.ParamName), &ParamName, sizeof(ParamName));
	memcpy_s(&SetMaterialParamFloat_Params.Param, sizeof(SetMaterialParamFloat_Params.Param), &Param, sizeof(Param));
	memcpy_s(&SetMaterialParamFloat_Params.Category, sizeof(SetMaterialParamFloat_Params.Category), &Category, sizeof(Category));

	this->ProcessEvent(uFnSetMaterialParamFloat, &SetMaterialParamFloat_Params, nullptr);
};

// Function REDGame.REDPawn.SetMaterialParamVector
// [0x00424401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39773])
// Parameter Info:
// class FName                    ParamName                      (CPF_Const | CPF_Parm)
// EMaterialCategory              Category                       (CPF_OptionalParm | CPF_Parm)
// struct FLinearColor            Param                          (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn::SetMaterialParamVector(const class FName& ParamName, EMaterialCategory Category, struct FLinearColor& Param)
{
	static UFunction* uFnSetMaterialParamVector = nullptr;

	if (!uFnSetMaterialParamVector)
	{
		uFnSetMaterialParamVector = UFunction::FindFunction("Function REDGame.REDPawn.SetMaterialParamVector");
	}

	AREDPawn_execSetMaterialParamVector_Params SetMaterialParamVector_Params;
	memset(&SetMaterialParamVector_Params, 0, sizeof(SetMaterialParamVector_Params));
	memcpy_s(&SetMaterialParamVector_Params.ParamName, sizeof(SetMaterialParamVector_Params.ParamName), &ParamName, sizeof(ParamName));
	memcpy_s(&SetMaterialParamVector_Params.Category, sizeof(SetMaterialParamVector_Params.Category), &Category, sizeof(Category));
	memcpy_s(&SetMaterialParamVector_Params.Param, sizeof(SetMaterialParamVector_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnSetMaterialParamVector, &SetMaterialParamVector_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &SetMaterialParamVector_Params.Param, sizeof(SetMaterialParamVector_Params.Param));
};

// Function REDGame.REDPawn.AddExtraAnimArray
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35385])
// Parameter Info:
// class UREDAnimArray*           AnimInfo                       (CPF_Parm)

void AREDPawn::AddExtraAnimArray(class UREDAnimArray* AnimInfo)
{
	static UFunction* uFnAddExtraAnimArray = nullptr;

	if (!uFnAddExtraAnimArray)
	{
		uFnAddExtraAnimArray = UFunction::FindFunction("Function REDGame.REDPawn.AddExtraAnimArray");
	}

	AREDPawn_execAddExtraAnimArray_Params AddExtraAnimArray_Params;
	memset(&AddExtraAnimArray_Params, 0, sizeof(AddExtraAnimArray_Params));
	AddExtraAnimArray_Params.AnimInfo = AnimInfo;

	this->ProcessEvent(uFnAddExtraAnimArray, &AddExtraAnimArray_Params, nullptr);
};

// Function REDGame.REDPawn.SetupMeshInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39847])
// Parameter Info:
// class UREDMeshArray*           MeshInfo                       (CPF_Parm)
// class UREDAnimArray*           AnimInfo                       (CPF_Parm)
// class UREDPawnMaterials*       Materials                      (CPF_Parm)

void AREDPawn::SetupMeshInstance(class UREDMeshArray* MeshInfo, class UREDAnimArray* AnimInfo, class UREDPawnMaterials* Materials)
{
	static UFunction* uFnSetupMeshInstance = nullptr;

	if (!uFnSetupMeshInstance)
	{
		uFnSetupMeshInstance = UFunction::FindFunction("Function REDGame.REDPawn.SetupMeshInstance");
	}

	AREDPawn_execSetupMeshInstance_Params SetupMeshInstance_Params;
	memset(&SetupMeshInstance_Params, 0, sizeof(SetupMeshInstance_Params));
	SetupMeshInstance_Params.MeshInfo = MeshInfo;
	SetupMeshInstance_Params.AnimInfo = AnimInfo;
	SetupMeshInstance_Params.Materials = Materials;

	this->ProcessEvent(uFnSetupMeshInstance, &SetupMeshInstance_Params, nullptr);
};

// Function REDGame.REDPawn.SetupMaterialsForAdv
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39846])
// Parameter Info:

void AREDPawn::SetupMaterialsForAdv()
{
	static UFunction* uFnSetupMaterialsForAdv = nullptr;

	if (!uFnSetupMaterialsForAdv)
	{
		uFnSetupMaterialsForAdv = UFunction::FindFunction("Function REDGame.REDPawn.SetupMaterialsForAdv");
	}

	AREDPawn_execSetupMaterialsForAdv_Params SetupMaterialsForAdv_Params;
	memset(&SetupMaterialsForAdv_Params, 0, sizeof(SetupMaterialsForAdv_Params));

	this->ProcessEvent(uFnSetupMaterialsForAdv, &SetupMaterialsForAdv_Params, nullptr);
};

// Function REDGame.REDPawn.SetLoadingMaterials
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39768])
// Parameter Info:
// class UREDPawnMaterials*       Materials                      (CPF_Parm)

void AREDPawn::SetLoadingMaterials(class UREDPawnMaterials* Materials)
{
	static UFunction* uFnSetLoadingMaterials = nullptr;

	if (!uFnSetLoadingMaterials)
	{
		uFnSetLoadingMaterials = UFunction::FindFunction("Function REDGame.REDPawn.SetLoadingMaterials");
	}

	AREDPawn_execSetLoadingMaterials_Params SetLoadingMaterials_Params;
	memset(&SetLoadingMaterials_Params, 0, sizeof(SetLoadingMaterials_Params));
	SetLoadingMaterials_Params.Materials = Materials;

	this->ProcessEvent(uFnSetLoadingMaterials, &SetLoadingMaterials_Params, nullptr);
};

// Function REDGame.REDPawn.SetupMaterials
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39845])
// Parameter Info:
// class FName                    Typename                       (CPF_OptionalParm | CPF_Parm)
// uint32_t                       ForceUpdate                    (CPF_OptionalParm | CPF_Parm)

void AREDPawn::SetupMaterials(const class FName& Typename, bool ForceUpdate)
{
	static UFunction* uFnSetupMaterials = nullptr;

	if (!uFnSetupMaterials)
	{
		uFnSetupMaterials = UFunction::FindFunction("Function REDGame.REDPawn.SetupMaterials");
	}

	AREDPawn_execSetupMaterials_Params SetupMaterials_Params;
	memset(&SetupMaterials_Params, 0, sizeof(SetupMaterials_Params));
	memcpy_s(&SetupMaterials_Params.Typename, sizeof(SetupMaterials_Params.Typename), &Typename, sizeof(Typename));
	SetupMaterials_Params.ForceUpdate = ForceUpdate;

	this->ProcessEvent(uFnSetupMaterials, &SetupMaterials_Params, nullptr);
};

// Function REDGame.REDPawn.ForceDestroy
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn::eventForceDestroy()
{
	static UFunction* uFnForceDestroy = nullptr;

	if (!uFnForceDestroy)
	{
		uFnForceDestroy = UFunction::FindFunction("Function REDGame.REDPawn.ForceDestroy");
	}

	AREDPawn_eventForceDestroy_Params ForceDestroy_Params;
	memset(&ForceDestroy_Params, 0, sizeof(ForceDestroy_Params));

	this->ProcessEvent(uFnForceDestroy, &ForceDestroy_Params, nullptr);
};

// Function REDGame.REDPawn.Destroyed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function REDGame.REDPawn.Destroyed");
	}

	AREDPawn_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function REDGame.REDPawn.ReusePawn
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39408])
// Parameter Info:

void AREDPawn::ReusePawn()
{
	static UFunction* uFnReusePawn = nullptr;

	if (!uFnReusePawn)
	{
		uFnReusePawn = UFunction::FindFunction("Function REDGame.REDPawn.ReusePawn");
	}

	AREDPawn_execReusePawn_Params ReusePawn_Params;
	memset(&ReusePawn_Params, 0, sizeof(ReusePawn_Params));

	this->ProcessEvent(uFnReusePawn, &ReusePawn_Params, nullptr);
};

// Function REDGame.REDPawn.ResetOnGame
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn::eventResetOnGame()
{
	static UFunction* uFnResetOnGame = nullptr;

	if (!uFnResetOnGame)
	{
		uFnResetOnGame = UFunction::FindFunction("Function REDGame.REDPawn.ResetOnGame");
	}

	AREDPawn_eventResetOnGame_Params ResetOnGame_Params;
	memset(&ResetOnGame_Params, 0, sizeof(ResetOnGame_Params));

	this->ProcessEvent(uFnResetOnGame, &ResetOnGame_Params, nullptr);
};

// Function REDGame.REDPawn.SetSkeletonUpdateOnCellChange
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39809])
// Parameter Info:
// uint32_t                       bUpdate                        (CPF_Parm)

void AREDPawn::SetSkeletonUpdateOnCellChange(bool bUpdate)
{
	static UFunction* uFnSetSkeletonUpdateOnCellChange = nullptr;

	if (!uFnSetSkeletonUpdateOnCellChange)
	{
		uFnSetSkeletonUpdateOnCellChange = UFunction::FindFunction("Function REDGame.REDPawn.SetSkeletonUpdateOnCellChange");
	}

	AREDPawn_execSetSkeletonUpdateOnCellChange_Params SetSkeletonUpdateOnCellChange_Params;
	memset(&SetSkeletonUpdateOnCellChange_Params, 0, sizeof(SetSkeletonUpdateOnCellChange_Params));
	SetSkeletonUpdateOnCellChange_Params.bUpdate = bUpdate;

	this->ProcessEvent(uFnSetSkeletonUpdateOnCellChange, &SetSkeletonUpdateOnCellChange_Params, nullptr);
};

// Function REDGame.REDPawn.DispMeshOff
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36559])
// Parameter Info:
// uint32_t                       Off                            (CPF_Parm)

void AREDPawn::DispMeshOff(bool Off)
{
	static UFunction* uFnDispMeshOff = nullptr;

	if (!uFnDispMeshOff)
	{
		uFnDispMeshOff = UFunction::FindFunction("Function REDGame.REDPawn.DispMeshOff");
	}

	AREDPawn_execDispMeshOff_Params DispMeshOff_Params;
	memset(&DispMeshOff_Params, 0, sizeof(DispMeshOff_Params));
	DispMeshOff_Params.Off = Off;

	this->ProcessEvent(uFnDispMeshOff, &DispMeshOff_Params, nullptr);
};

// Function REDGame.REDPawn.SetDispMesh
// [0x00024401] (FUNC_Final | FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39731])
// Parameter Info:
// uint32_t                       On                             (CPF_Parm)
// class FName                    MeshName                       (CPF_OptionalParm | CPF_Parm)

void AREDPawn::SetDispMesh(bool On, const class FName& MeshName)
{
	static UFunction* uFnSetDispMesh = nullptr;

	if (!uFnSetDispMesh)
	{
		uFnSetDispMesh = UFunction::FindFunction("Function REDGame.REDPawn.SetDispMesh");
	}

	AREDPawn_execSetDispMesh_Params SetDispMesh_Params;
	memset(&SetDispMesh_Params, 0, sizeof(SetDispMesh_Params));
	SetDispMesh_Params.On = On;
	memcpy_s(&SetDispMesh_Params.MeshName, sizeof(SetDispMesh_Params.MeshName), &MeshName, sizeof(MeshName));

	this->ProcessEvent(uFnSetDispMesh, &SetDispMesh_Params, nullptr);
};

// Function REDGame.REDPawn.ResetMaterialInstanceParam
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39385])
// Parameter Info:

void AREDPawn::ResetMaterialInstanceParam()
{
	static UFunction* uFnResetMaterialInstanceParam = nullptr;

	if (!uFnResetMaterialInstanceParam)
	{
		uFnResetMaterialInstanceParam = UFunction::FindFunction("Function REDGame.REDPawn.ResetMaterialInstanceParam");
	}

	AREDPawn_execResetMaterialInstanceParam_Params ResetMaterialInstanceParam_Params;
	memset(&ResetMaterialInstanceParam_Params, 0, sizeof(ResetMaterialInstanceParam_Params));

	this->ProcessEvent(uFnResetMaterialInstanceParam, &ResetMaterialInstanceParam_Params, nullptr);
};

// Function REDGame.REDPawn.UpdateMaterialInstanceParam
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40772])
// Parameter Info:

void AREDPawn::UpdateMaterialInstanceParam()
{
	static UFunction* uFnUpdateMaterialInstanceParam = nullptr;

	if (!uFnUpdateMaterialInstanceParam)
	{
		uFnUpdateMaterialInstanceParam = UFunction::FindFunction("Function REDGame.REDPawn.UpdateMaterialInstanceParam");
	}

	AREDPawn_execUpdateMaterialInstanceParam_Params UpdateMaterialInstanceParam_Params;
	memset(&UpdateMaterialInstanceParam_Params, 0, sizeof(UpdateMaterialInstanceParam_Params));

	this->ProcessEvent(uFnUpdateMaterialInstanceParam, &UpdateMaterialInstanceParam_Params, nullptr);
};

// Function REDGame.REDPawn.UpdateMaterialOnCharaSelect
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40773])
// Parameter Info:
// float                          inAddColor                     (CPF_Parm | CPF_OutParm)

void AREDPawn::UpdateMaterialOnCharaSelect(float& inAddColor)
{
	static UFunction* uFnUpdateMaterialOnCharaSelect = nullptr;

	if (!uFnUpdateMaterialOnCharaSelect)
	{
		uFnUpdateMaterialOnCharaSelect = UFunction::FindFunction("Function REDGame.REDPawn.UpdateMaterialOnCharaSelect");
	}

	AREDPawn_execUpdateMaterialOnCharaSelect_Params UpdateMaterialOnCharaSelect_Params;
	memset(&UpdateMaterialOnCharaSelect_Params, 0, sizeof(UpdateMaterialOnCharaSelect_Params));
	memcpy_s(&UpdateMaterialOnCharaSelect_Params.inAddColor, sizeof(UpdateMaterialOnCharaSelect_Params.inAddColor), &inAddColor, sizeof(inAddColor));

	this->ProcessEvent(uFnUpdateMaterialOnCharaSelect, &UpdateMaterialOnCharaSelect_Params, nullptr);

	memcpy_s(&inAddColor, sizeof(inAddColor), &UpdateMaterialOnCharaSelect_Params.inAddColor, sizeof(UpdateMaterialOnCharaSelect_Params.inAddColor));
};

// Function REDGame.REDPawn.UpdateMaterialParamDirection
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40775])
// Parameter Info:

void AREDPawn::UpdateMaterialParamDirection()
{
	static UFunction* uFnUpdateMaterialParamDirection = nullptr;

	if (!uFnUpdateMaterialParamDirection)
	{
		uFnUpdateMaterialParamDirection = UFunction::FindFunction("Function REDGame.REDPawn.UpdateMaterialParamDirection");
	}

	AREDPawn_execUpdateMaterialParamDirection_Params UpdateMaterialParamDirection_Params;
	memset(&UpdateMaterialParamDirection_Params, 0, sizeof(UpdateMaterialParamDirection_Params));

	this->ProcessEvent(uFnUpdateMaterialParamDirection, &UpdateMaterialParamDirection_Params, nullptr);
};

// Function REDGame.REDPawn.UpdateCameraParam
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40613])
// Parameter Info:
// float                          InFovTan                       (CPF_Parm)
// struct FVector                 InCameraDir                    (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn::UpdateCameraParam(float InFovTan, struct FVector& InCameraDir)
{
	static UFunction* uFnUpdateCameraParam = nullptr;

	if (!uFnUpdateCameraParam)
	{
		uFnUpdateCameraParam = UFunction::FindFunction("Function REDGame.REDPawn.UpdateCameraParam");
	}

	AREDPawn_execUpdateCameraParam_Params UpdateCameraParam_Params;
	memset(&UpdateCameraParam_Params, 0, sizeof(UpdateCameraParam_Params));
	memcpy_s(&UpdateCameraParam_Params.InFovTan, sizeof(UpdateCameraParam_Params.InFovTan), &InFovTan, sizeof(InFovTan));
	memcpy_s(&UpdateCameraParam_Params.InCameraDir, sizeof(UpdateCameraParam_Params.InCameraDir), &InCameraDir, sizeof(InCameraDir));

	this->ProcessEvent(uFnUpdateCameraParam, &UpdateCameraParam_Params, nullptr);

	memcpy_s(&InCameraDir, sizeof(InCameraDir), &UpdateCameraParam_Params.InCameraDir, sizeof(UpdateCameraParam_Params.InCameraDir));
};

// Function REDGame.REDPawn.UpdateLightVectorFromLightAnime
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40752])
// Parameter Info:
// struct FVector                 lightVec                       (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn::UpdateLightVectorFromLightAnime(struct FVector& lightVec)
{
	static UFunction* uFnUpdateLightVectorFromLightAnime = nullptr;

	if (!uFnUpdateLightVectorFromLightAnime)
	{
		uFnUpdateLightVectorFromLightAnime = UFunction::FindFunction("Function REDGame.REDPawn.UpdateLightVectorFromLightAnime");
	}

	AREDPawn_execUpdateLightVectorFromLightAnime_Params UpdateLightVectorFromLightAnime_Params;
	memset(&UpdateLightVectorFromLightAnime_Params, 0, sizeof(UpdateLightVectorFromLightAnime_Params));
	memcpy_s(&UpdateLightVectorFromLightAnime_Params.lightVec, sizeof(UpdateLightVectorFromLightAnime_Params.lightVec), &lightVec, sizeof(lightVec));

	this->ProcessEvent(uFnUpdateLightVectorFromLightAnime, &UpdateLightVectorFromLightAnime_Params, nullptr);

	memcpy_s(&lightVec, sizeof(lightVec), &UpdateLightVectorFromLightAnime_Params.lightVec, sizeof(UpdateLightVectorFromLightAnime_Params.lightVec));
};

// Function REDGame.REDPawn.UpdateLightVector
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40751])
// Parameter Info:

void AREDPawn::UpdateLightVector()
{
	static UFunction* uFnUpdateLightVector = nullptr;

	if (!uFnUpdateLightVector)
	{
		uFnUpdateLightVector = UFunction::FindFunction("Function REDGame.REDPawn.UpdateLightVector");
	}

	AREDPawn_execUpdateLightVector_Params UpdateLightVector_Params;
	memset(&UpdateLightVector_Params, 0, sizeof(UpdateLightVector_Params));

	this->ProcessEvent(uFnUpdateLightVector, &UpdateLightVector_Params, nullptr);
};

// Function REDGame.REDPawn.SetLightVector
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39765])
// Parameter Info:
// int32_t                        xsiDirX                        (CPF_Parm)
// int32_t                        xsiDirY                        (CPF_Parm)

void AREDPawn::SetLightVector(int32_t xsiDirX, int32_t xsiDirY)
{
	static UFunction* uFnSetLightVector = nullptr;

	if (!uFnSetLightVector)
	{
		uFnSetLightVector = UFunction::FindFunction("Function REDGame.REDPawn.SetLightVector");
	}

	AREDPawn_execSetLightVector_Params SetLightVector_Params;
	memset(&SetLightVector_Params, 0, sizeof(SetLightVector_Params));
	memcpy_s(&SetLightVector_Params.xsiDirX, sizeof(SetLightVector_Params.xsiDirX), &xsiDirX, sizeof(xsiDirX));
	memcpy_s(&SetLightVector_Params.xsiDirY, sizeof(SetLightVector_Params.xsiDirY), &xsiDirY, sizeof(xsiDirY));

	this->ProcessEvent(uFnSetLightVector, &SetLightVector_Params, nullptr);
};

// Function REDGame.REDPawn.SetDefaultLightVector
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39726])
// Parameter Info:

void AREDPawn::SetDefaultLightVector()
{
	static UFunction* uFnSetDefaultLightVector = nullptr;

	if (!uFnSetDefaultLightVector)
	{
		uFnSetDefaultLightVector = UFunction::FindFunction("Function REDGame.REDPawn.SetDefaultLightVector");
	}

	AREDPawn_execSetDefaultLightVector_Params SetDefaultLightVector_Params;
	memset(&SetDefaultLightVector_Params, 0, sizeof(SetDefaultLightVector_Params));

	this->ProcessEvent(uFnSetDefaultLightVector, &SetDefaultLightVector_Params, nullptr);
};

// Function REDGame.REDPawn.GetScreenSpaceZOffset
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37163])
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

float AREDPawn::GetScreenSpaceZOffset()
{
	static UFunction* uFnGetScreenSpaceZOffset = nullptr;

	if (!uFnGetScreenSpaceZOffset)
	{
		uFnGetScreenSpaceZOffset = UFunction::FindFunction("Function REDGame.REDPawn.GetScreenSpaceZOffset");
	}

	AREDPawn_execGetScreenSpaceZOffset_Params GetScreenSpaceZOffset_Params;
	memset(&GetScreenSpaceZOffset_Params, 0, sizeof(GetScreenSpaceZOffset_Params));

	this->ProcessEvent(uFnGetScreenSpaceZOffset, &GetScreenSpaceZOffset_Params, nullptr);

	return GetScreenSpaceZOffset_Params.ReturnValue;
};

// Function REDGame.REDPawn.SetPlayerID
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Id                             (CPF_Parm)

void AREDPawn::SetPlayerID(int32_t Id)
{
	static UFunction* uFnSetPlayerID = nullptr;

	if (!uFnSetPlayerID)
	{
		uFnSetPlayerID = UFunction::FindFunction("Function REDGame.REDPawn.SetPlayerID");
	}

	AREDPawn_execSetPlayerID_Params SetPlayerID_Params;
	memset(&SetPlayerID_Params, 0, sizeof(SetPlayerID_Params));
	memcpy_s(&SetPlayerID_Params.Id, sizeof(SetPlayerID_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnSetPlayerID, &SetPlayerID_Params, nullptr);
};

// Function REDGame.REDPawn.SetEyeHeight
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Height                         (CPF_Parm)

void AREDPawn::eventSetEyeHeight(float Height)
{
	static UFunction* uFnSetEyeHeight = nullptr;

	if (!uFnSetEyeHeight)
	{
		uFnSetEyeHeight = UFunction::FindFunction("Function REDGame.REDPawn.SetEyeHeight");
	}

	AREDPawn_eventSetEyeHeight_Params SetEyeHeight_Params;
	memset(&SetEyeHeight_Params, 0, sizeof(SetEyeHeight_Params));
	memcpy_s(&SetEyeHeight_Params.Height, sizeof(SetEyeHeight_Params.Height), &Height, sizeof(Height));

	this->ProcessEvent(uFnSetEyeHeight, &SetEyeHeight_Params, nullptr);
};

// Function REDGame.REDPawn.ClearMeshSet
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36226])
// Parameter Info:

void AREDPawn::ClearMeshSet()
{
	static UFunction* uFnClearMeshSet = nullptr;

	if (!uFnClearMeshSet)
	{
		uFnClearMeshSet = UFunction::FindFunction("Function REDGame.REDPawn.ClearMeshSet");
	}

	AREDPawn_execClearMeshSet_Params ClearMeshSet_Params;
	memset(&ClearMeshSet_Params, 0, sizeof(ClearMeshSet_Params));

	this->ProcessEvent(uFnClearMeshSet, &ClearMeshSet_Params, nullptr);
};

// Function REDGame.REDPawn.ClearMeshControls
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36225])
// Parameter Info:

void AREDPawn::ClearMeshControls()
{
	static UFunction* uFnClearMeshControls = nullptr;

	if (!uFnClearMeshControls)
	{
		uFnClearMeshControls = UFunction::FindFunction("Function REDGame.REDPawn.ClearMeshControls");
	}

	AREDPawn_execClearMeshControls_Params ClearMeshControls_Params;
	memset(&ClearMeshControls_Params, 0, sizeof(ClearMeshControls_Params));

	this->ProcessEvent(uFnClearMeshControls, &ClearMeshControls_Params, nullptr);
};

// Function REDGame.REDPawn.RestoreMeshSet
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39393])
// Parameter Info:

void AREDPawn::RestoreMeshSet()
{
	static UFunction* uFnRestoreMeshSet = nullptr;

	if (!uFnRestoreMeshSet)
	{
		uFnRestoreMeshSet = UFunction::FindFunction("Function REDGame.REDPawn.RestoreMeshSet");
	}

	AREDPawn_execRestoreMeshSet_Params RestoreMeshSet_Params;
	memset(&RestoreMeshSet_Params, 0, sizeof(RestoreMeshSet_Params));

	this->ProcessEvent(uFnRestoreMeshSet, &RestoreMeshSet_Params, nullptr);
};

// Function REDGame.REDPawn.SaveMeshSet
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39462])
// Parameter Info:

void AREDPawn::SaveMeshSet()
{
	static UFunction* uFnSaveMeshSet = nullptr;

	if (!uFnSaveMeshSet)
	{
		uFnSaveMeshSet = UFunction::FindFunction("Function REDGame.REDPawn.SaveMeshSet");
	}

	AREDPawn_execSaveMeshSet_Params SaveMeshSet_Params;
	memset(&SaveMeshSet_Params, 0, sizeof(SaveMeshSet_Params));

	this->ProcessEvent(uFnSaveMeshSet, &SaveMeshSet_Params, nullptr);
};

// Function REDGame.REDPawn.SwitchMeshSet
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40152])
// Parameter Info:
// class FName                    SetName                        (CPF_Parm)

void AREDPawn::SwitchMeshSet(const class FName& SetName)
{
	static UFunction* uFnSwitchMeshSet = nullptr;

	if (!uFnSwitchMeshSet)
	{
		uFnSwitchMeshSet = UFunction::FindFunction("Function REDGame.REDPawn.SwitchMeshSet");
	}

	AREDPawn_execSwitchMeshSet_Params SwitchMeshSet_Params;
	memset(&SwitchMeshSet_Params, 0, sizeof(SwitchMeshSet_Params));
	memcpy_s(&SwitchMeshSet_Params.SetName, sizeof(SwitchMeshSet_Params.SetName), &SetName, sizeof(SetName));

	this->ProcessEvent(uFnSwitchMeshSet, &SwitchMeshSet_Params, nullptr);
};

// Function REDGame.REDPawn.AddMeshSet
// [0x00420401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[35387])
// Parameter Info:
// struct FMeshSet                Set                            (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn::AddMeshSet(struct FMeshSet& Set)
{
	static UFunction* uFnAddMeshSet = nullptr;

	if (!uFnAddMeshSet)
	{
		uFnAddMeshSet = UFunction::FindFunction("Function REDGame.REDPawn.AddMeshSet");
	}

	AREDPawn_execAddMeshSet_Params AddMeshSet_Params;
	memset(&AddMeshSet_Params, 0, sizeof(AddMeshSet_Params));
	memcpy_s(&AddMeshSet_Params.Set, sizeof(AddMeshSet_Params.Set), &Set, sizeof(Set));

	this->ProcessEvent(uFnAddMeshSet, &AddMeshSet_Params, nullptr);

	memcpy_s(&Set, sizeof(Set), &AddMeshSet_Params.Set, sizeof(AddMeshSet_Params.Set));
};

// Function REDGame.REDPawn.GetMeshSetIndexFromSetName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37109])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    SetName                        (CPF_Parm)

int32_t AREDPawn::GetMeshSetIndexFromSetName(const class FName& SetName)
{
	static UFunction* uFnGetMeshSetIndexFromSetName = nullptr;

	if (!uFnGetMeshSetIndexFromSetName)
	{
		uFnGetMeshSetIndexFromSetName = UFunction::FindFunction("Function REDGame.REDPawn.GetMeshSetIndexFromSetName");
	}

	AREDPawn_execGetMeshSetIndexFromSetName_Params GetMeshSetIndexFromSetName_Params;
	memset(&GetMeshSetIndexFromSetName_Params, 0, sizeof(GetMeshSetIndexFromSetName_Params));
	memcpy_s(&GetMeshSetIndexFromSetName_Params.SetName, sizeof(GetMeshSetIndexFromSetName_Params.SetName), &SetName, sizeof(SetName));

	this->ProcessEvent(uFnGetMeshSetIndexFromSetName, &GetMeshSetIndexFromSetName_Params, nullptr);

	return GetMeshSetIndexFromSetName_Params.ReturnValue;
};

// Function REDGame.REDPawn.UpdateDispState
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40647])
// Parameter Info:

void AREDPawn::UpdateDispState()
{
	static UFunction* uFnUpdateDispState = nullptr;

	if (!uFnUpdateDispState)
	{
		uFnUpdateDispState = UFunction::FindFunction("Function REDGame.REDPawn.UpdateDispState");
	}

	AREDPawn_execUpdateDispState_Params UpdateDispState_Params;
	memset(&UpdateDispState_Params, 0, sizeof(UpdateDispState_Params));

	this->ProcessEvent(uFnUpdateDispState, &UpdateDispState_Params, nullptr);
};

// Function REDGame.REDPawn.FreeSkeletalMeshComponents
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36912])
// Parameter Info:

void AREDPawn::FreeSkeletalMeshComponents()
{
	static UFunction* uFnFreeSkeletalMeshComponents = nullptr;

	if (!uFnFreeSkeletalMeshComponents)
	{
		uFnFreeSkeletalMeshComponents = UFunction::FindFunction("Function REDGame.REDPawn.FreeSkeletalMeshComponents");
	}

	AREDPawn_execFreeSkeletalMeshComponents_Params FreeSkeletalMeshComponents_Params;
	memset(&FreeSkeletalMeshComponents_Params, 0, sizeof(FreeSkeletalMeshComponents_Params));

	this->ProcessEvent(uFnFreeSkeletalMeshComponents, &FreeSkeletalMeshComponents_Params, nullptr);
};

// Function REDGame.REDPawn.FreeLocalMaterialPool
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36909])
// Parameter Info:

void AREDPawn::FreeLocalMaterialPool()
{
	static UFunction* uFnFreeLocalMaterialPool = nullptr;

	if (!uFnFreeLocalMaterialPool)
	{
		uFnFreeLocalMaterialPool = UFunction::FindFunction("Function REDGame.REDPawn.FreeLocalMaterialPool");
	}

	AREDPawn_execFreeLocalMaterialPool_Params FreeLocalMaterialPool_Params;
	memset(&FreeLocalMaterialPool_Params, 0, sizeof(FreeLocalMaterialPool_Params));

	this->ProcessEvent(uFnFreeLocalMaterialPool, &FreeLocalMaterialPool_Params, nullptr);
};

// Function REDGame.REDPawn.InitLocalMaterialPool
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37535])
// Parameter Info:

void AREDPawn::InitLocalMaterialPool()
{
	static UFunction* uFnInitLocalMaterialPool = nullptr;

	if (!uFnInitLocalMaterialPool)
	{
		uFnInitLocalMaterialPool = UFunction::FindFunction("Function REDGame.REDPawn.InitLocalMaterialPool");
	}

	AREDPawn_execInitLocalMaterialPool_Params InitLocalMaterialPool_Params;
	memset(&InitLocalMaterialPool_Params, 0, sizeof(InitLocalMaterialPool_Params));

	this->ProcessEvent(uFnInitLocalMaterialPool, &InitLocalMaterialPool_Params, nullptr);
};

// Function REDGame.REDPawn.GetMeshControlIndexFromName
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37105])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    MeshName                       (CPF_Parm)

int32_t AREDPawn::GetMeshControlIndexFromName(const class FName& MeshName)
{
	static UFunction* uFnGetMeshControlIndexFromName = nullptr;

	if (!uFnGetMeshControlIndexFromName)
	{
		uFnGetMeshControlIndexFromName = UFunction::FindFunction("Function REDGame.REDPawn.GetMeshControlIndexFromName");
	}

	AREDPawn_execGetMeshControlIndexFromName_Params GetMeshControlIndexFromName_Params;
	memset(&GetMeshControlIndexFromName_Params, 0, sizeof(GetMeshControlIndexFromName_Params));
	memcpy_s(&GetMeshControlIndexFromName_Params.MeshName, sizeof(GetMeshControlIndexFromName_Params.MeshName), &MeshName, sizeof(MeshName));

	this->ProcessEvent(uFnGetMeshControlIndexFromName, &GetMeshControlIndexFromName_Params, nullptr);

	return GetMeshControlIndexFromName_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetMeshComponentFromIndex
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37104])
// Parameter Info:
// class USkeletalMeshComponent*  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// int32_t                        Index                          (CPF_Parm)

class USkeletalMeshComponent* AREDPawn::GetMeshComponentFromIndex(int32_t Index)
{
	static UFunction* uFnGetMeshComponentFromIndex = nullptr;

	if (!uFnGetMeshComponentFromIndex)
	{
		uFnGetMeshComponentFromIndex = UFunction::FindFunction("Function REDGame.REDPawn.GetMeshComponentFromIndex");
	}

	AREDPawn_execGetMeshComponentFromIndex_Params GetMeshComponentFromIndex_Params;
	memset(&GetMeshComponentFromIndex_Params, 0, sizeof(GetMeshComponentFromIndex_Params));
	memcpy_s(&GetMeshComponentFromIndex_Params.Index, sizeof(GetMeshComponentFromIndex_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnGetMeshComponentFromIndex, &GetMeshComponentFromIndex_Params, nullptr);

	return GetMeshComponentFromIndex_Params.ReturnValue;
};

// Function REDGame.REDPawn.GetMeshNum
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37108])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn::GetMeshNum()
{
	static UFunction* uFnGetMeshNum = nullptr;

	if (!uFnGetMeshNum)
	{
		uFnGetMeshNum = UFunction::FindFunction("Function REDGame.REDPawn.GetMeshNum");
	}

	AREDPawn_execGetMeshNum_Params GetMeshNum_Params;
	memset(&GetMeshNum_Params, 0, sizeof(GetMeshNum_Params));

	this->ProcessEvent(uFnGetMeshNum, &GetMeshNum_Params, nullptr);

	return GetMeshNum_Params.ReturnValue;
};

// Function REDGame.REDDebugPause.PauserTick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDDebugPause::eventPauserTick(float DeltaTime)
{
	static UFunction* uFnPauserTick = nullptr;

	if (!uFnPauserTick)
	{
		uFnPauserTick = UFunction::FindFunction("Function REDGame.REDDebugPause.PauserTick");
	}

	AREDDebugPause_eventPauserTick_Params PauserTick_Params;
	memset(&PauserTick_Params, 0, sizeof(PauserTick_Params));
	memcpy_s(&PauserTick_Params.DeltaTime, sizeof(PauserTick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnPauserTick, &PauserTick_Params, nullptr);
};

// Function REDGame.REDDebugPause.ToggleDoNotPause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40266])
// Parameter Info:

void AREDDebugPause::ToggleDoNotPause()
{
	static UFunction* uFnToggleDoNotPause = nullptr;

	if (!uFnToggleDoNotPause)
	{
		uFnToggleDoNotPause = UFunction::FindFunction("Function REDGame.REDDebugPause.ToggleDoNotPause");
	}

	AREDDebugPause_execToggleDoNotPause_Params ToggleDoNotPause_Params;
	memset(&ToggleDoNotPause_Params, 0, sizeof(ToggleDoNotPause_Params));

	this->ProcessEvent(uFnToggleDoNotPause, &ToggleDoNotPause_Params, nullptr);
};

// Function REDGame.REDDebugPause.ToggleShowDebugMenu
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDDebugPause::ToggleShowDebugMenu()
{
	static UFunction* uFnToggleShowDebugMenu = nullptr;

	if (!uFnToggleShowDebugMenu)
	{
		uFnToggleShowDebugMenu = UFunction::FindFunction("Function REDGame.REDDebugPause.ToggleShowDebugMenu");
	}

	AREDDebugPause_execToggleShowDebugMenu_Params ToggleShowDebugMenu_Params;
	memset(&ToggleShowDebugMenu_Params, 0, sizeof(ToggleShowDebugMenu_Params));

	this->ProcessEvent(uFnToggleShowDebugMenu, &ToggleShowDebugMenu_Params, nullptr);
};

// Function REDGame.REDDebugPause.Step
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDDebugPause::Step()
{
	static UFunction* uFnStep = nullptr;

	if (!uFnStep)
	{
		uFnStep = UFunction::FindFunction("Function REDGame.REDDebugPause.Step");
	}

	AREDDebugPause_execStep_Params Step_Params;
	memset(&Step_Params, 0, sizeof(Step_Params));

	this->ProcessEvent(uFnStep, &Step_Params, nullptr);
};

// Function REDGame.REDDebugPause.StepToggle
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDDebugPause::StepToggle()
{
	static UFunction* uFnStepToggle = nullptr;

	if (!uFnStepToggle)
	{
		uFnStepToggle = UFunction::FindFunction("Function REDGame.REDDebugPause.StepToggle");
	}

	AREDDebugPause_execStepToggle_Params StepToggle_Params;
	memset(&StepToggle_Params, 0, sizeof(StepToggle_Params));

	this->ProcessEvent(uFnStepToggle, &StepToggle_Params, nullptr);
};

// Function REDGame.REDDebugPause.IsDoNotPause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37641])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDDebugPause::IsDoNotPause()
{
	static UFunction* uFnIsDoNotPause = nullptr;

	if (!uFnIsDoNotPause)
	{
		uFnIsDoNotPause = UFunction::FindFunction("Function REDGame.REDDebugPause.IsDoNotPause");
	}

	AREDDebugPause_execIsDoNotPause_Params IsDoNotPause_Params;
	memset(&IsDoNotPause_Params, 0, sizeof(IsDoNotPause_Params));

	this->ProcessEvent(uFnIsDoNotPause, &IsDoNotPause_Params, nullptr);

	return IsDoNotPause_Params.ReturnValue;
};

// Function REDGame.REDDebugPause.IsShowDebugMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37854])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDDebugPause::IsShowDebugMenu()
{
	static UFunction* uFnIsShowDebugMenu = nullptr;

	if (!uFnIsShowDebugMenu)
	{
		uFnIsShowDebugMenu = UFunction::FindFunction("Function REDGame.REDDebugPause.IsShowDebugMenu");
	}

	AREDDebugPause_execIsShowDebugMenu_Params IsShowDebugMenu_Params;
	memset(&IsShowDebugMenu_Params, 0, sizeof(IsShowDebugMenu_Params));

	this->ProcessEvent(uFnIsShowDebugMenu, &IsShowDebugMenu_Params, nullptr);

	return IsShowDebugMenu_Params.ReturnValue;
};

// Function REDGame.REDDebugPause.UpdateDebugMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40643])
// Parameter Info:

void AREDDebugPause::UpdateDebugMenu()
{
	static UFunction* uFnUpdateDebugMenu = nullptr;

	if (!uFnUpdateDebugMenu)
	{
		uFnUpdateDebugMenu = UFunction::FindFunction("Function REDGame.REDDebugPause.UpdateDebugMenu");
	}

	AREDDebugPause_execUpdateDebugMenu_Params UpdateDebugMenu_Params;
	memset(&UpdateDebugMenu_Params, 0, sizeof(UpdateDebugMenu_Params));

	this->ProcessEvent(uFnUpdateDebugMenu, &UpdateDebugMenu_Params, nullptr);
};

// Function REDGame.REDDebugPause.SetGamePause
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39753])
// Parameter Info:
// uint32_t                       On                             (CPF_Parm)

void AREDDebugPause::SetGamePause(bool On)
{
	static UFunction* uFnSetGamePause = nullptr;

	if (!uFnSetGamePause)
	{
		uFnSetGamePause = UFunction::FindFunction("Function REDGame.REDDebugPause.SetGamePause");
	}

	AREDDebugPause_execSetGamePause_Params SetGamePause_Params;
	memset(&SetGamePause_Params, 0, sizeof(SetGamePause_Params));
	SetGamePause_Params.On = On;

	this->ProcessEvent(uFnSetGamePause, &SetGamePause_Params, nullptr);
};

// Function REDGame.REDDebugPause.ShowDebugMenu
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39895])
// Parameter Info:
// uint32_t                       Show                           (CPF_Parm)

void AREDDebugPause::ShowDebugMenu(bool Show)
{
	static UFunction* uFnShowDebugMenu = nullptr;

	if (!uFnShowDebugMenu)
	{
		uFnShowDebugMenu = UFunction::FindFunction("Function REDGame.REDDebugPause.ShowDebugMenu");
	}

	AREDDebugPause_execShowDebugMenu_Params ShowDebugMenu_Params;
	memset(&ShowDebugMenu_Params, 0, sizeof(ShowDebugMenu_Params));
	ShowDebugMenu_Params.Show = Show;

	this->ProcessEvent(uFnShowDebugMenu, &ShowDebugMenu_Params, nullptr);
};

// Function REDGame.REDDebugPause.GetPlayerController
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class APlayerController* AREDDebugPause::GetPlayerController()
{
	static UFunction* uFnGetPlayerController = nullptr;

	if (!uFnGetPlayerController)
	{
		uFnGetPlayerController = UFunction::FindFunction("Function REDGame.REDDebugPause.GetPlayerController");
	}

	AREDDebugPause_execGetPlayerController_Params GetPlayerController_Params;
	memset(&GetPlayerController_Params, 0, sizeof(GetPlayerController_Params));

	this->ProcessEvent(uFnGetPlayerController, &GetPlayerController_Params, nullptr);

	return GetPlayerController_Params.ReturnValue;
};

// Function REDGame.REDPawn_AdjLightDir.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDPawn_AdjLightDir::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDPawn_AdjLightDir.DisplayDebug");
	}

	AREDPawn_AdjLightDir_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDPawn_AdjLightDir.NativeTick
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[38513])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDPawn_AdjLightDir::NativeTick(float DeltaTime)
{
	static UFunction* uFnNativeTick = nullptr;

	if (!uFnNativeTick)
	{
		uFnNativeTick = UFunction::FindFunction("Function REDGame.REDPawn_AdjLightDir.NativeTick");
	}

	AREDPawn_AdjLightDir_execNativeTick_Params NativeTick_Params;
	memset(&NativeTick_Params, 0, sizeof(NativeTick_Params));
	memcpy_s(&NativeTick_Params.DeltaTime, sizeof(NativeTick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnNativeTick, &NativeTick_Params, nullptr);
};

// Function REDGame.REDPawn_AdjLightDir.IsDisp
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37639])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPawn_AdjLightDir::IsDisp()
{
	static UFunction* uFnIsDisp = nullptr;

	if (!uFnIsDisp)
	{
		uFnIsDisp = UFunction::FindFunction("Function REDGame.REDPawn_AdjLightDir.IsDisp");
	}

	AREDPawn_AdjLightDir_execIsDisp_Params IsDisp_Params;
	memset(&IsDisp_Params, 0, sizeof(IsDisp_Params));

	this->ProcessEvent(uFnIsDisp, &IsDisp_Params, nullptr);

	return IsDisp_Params.ReturnValue;
};

// Function REDGame.REDPawn_AdjLightDir.GetDebugLightRotation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[37053])
// Parameter Info:
// struct FRotator                Rot                            (CPF_Parm | CPF_OutParm)

void AREDPawn_AdjLightDir::GetDebugLightRotation(struct FRotator& Rot)
{
	static UFunction* uFnGetDebugLightRotation = nullptr;

	if (!uFnGetDebugLightRotation)
	{
		uFnGetDebugLightRotation = UFunction::FindFunction("Function REDGame.REDPawn_AdjLightDir.GetDebugLightRotation");
	}

	AREDPawn_AdjLightDir_execGetDebugLightRotation_Params GetDebugLightRotation_Params;
	memset(&GetDebugLightRotation_Params, 0, sizeof(GetDebugLightRotation_Params));
	memcpy_s(&GetDebugLightRotation_Params.Rot, sizeof(GetDebugLightRotation_Params.Rot), &Rot, sizeof(Rot));

	this->ProcessEvent(uFnGetDebugLightRotation, &GetDebugLightRotation_Params, nullptr);

	memcpy_s(&Rot, sizeof(Rot), &GetDebugLightRotation_Params.Rot, sizeof(GetDebugLightRotation_Params.Rot));
};

// Function REDGame.REDPawn_AdvAvatar.GetMotionLengthFrame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37114])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn_AdvAvatar::GetMotionLengthFrame()
{
	static UFunction* uFnGetMotionLengthFrame = nullptr;

	if (!uFnGetMotionLengthFrame)
	{
		uFnGetMotionLengthFrame = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.GetMotionLengthFrame");
	}

	AREDPawn_AdvAvatar_execGetMotionLengthFrame_Params GetMotionLengthFrame_Params;
	memset(&GetMotionLengthFrame_Params, 0, sizeof(GetMotionLengthFrame_Params));

	this->ProcessEvent(uFnGetMotionLengthFrame, &GetMotionLengthFrame_Params, nullptr);

	return GetMotionLengthFrame_Params.ReturnValue;
};

// Function REDGame.REDPawn_AdvAvatar.IsLipPlaying
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPawn_AdvAvatar::eventIsLipPlaying()
{
	static UFunction* uFnIsLipPlaying = nullptr;

	if (!uFnIsLipPlaying)
	{
		uFnIsLipPlaying = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.IsLipPlaying");
	}

	AREDPawn_AdvAvatar_eventIsLipPlaying_Params IsLipPlaying_Params;
	memset(&IsLipPlaying_Params, 0, sizeof(IsLipPlaying_Params));

	this->ProcessEvent(uFnIsLipPlaying, &IsLipPlaying_Params, nullptr);

	return IsLipPlaying_Params.ReturnValue;
};

// Function REDGame.REDPawn_AdvAvatar.ResetFaceScaleController
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39380])
// Parameter Info:

void AREDPawn_AdvAvatar::ResetFaceScaleController()
{
	static UFunction* uFnResetFaceScaleController = nullptr;

	if (!uFnResetFaceScaleController)
	{
		uFnResetFaceScaleController = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.ResetFaceScaleController");
	}

	AREDPawn_AdvAvatar_execResetFaceScaleController_Params ResetFaceScaleController_Params;
	memset(&ResetFaceScaleController_Params, 0, sizeof(ResetFaceScaleController_Params));

	this->ProcessEvent(uFnResetFaceScaleController, &ResetFaceScaleController_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.SetLipSyncType
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39767])
// Parameter Info:
// class FName                    Typename                       (CPF_Parm)

void AREDPawn_AdvAvatar::SetLipSyncType(const class FName& Typename)
{
	static UFunction* uFnSetLipSyncType = nullptr;

	if (!uFnSetLipSyncType)
	{
		uFnSetLipSyncType = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.SetLipSyncType");
	}

	AREDPawn_AdvAvatar_execSetLipSyncType_Params SetLipSyncType_Params;
	memset(&SetLipSyncType_Params, 0, sizeof(SetLipSyncType_Params));
	memcpy_s(&SetLipSyncType_Params.Typename, sizeof(SetLipSyncType_Params.Typename), &Typename, sizeof(Typename));

	this->ProcessEvent(uFnSetLipSyncType, &SetLipSyncType_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.SetExPosAndRot
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39744])
// Parameter Info:
// struct FVector                 InExPos                        (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InExPos2                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot                        (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot2                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot3                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot4                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot5                       (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_AdvAvatar::SetExPosAndRot(struct FVector& InExPos, struct FVector& InExPos2, struct FRotator& InExRot, struct FRotator& InExRot2, struct FRotator& InExRot3, struct FRotator& InExRot4, struct FRotator& InExRot5)
{
	static UFunction* uFnSetExPosAndRot = nullptr;

	if (!uFnSetExPosAndRot)
	{
		uFnSetExPosAndRot = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.SetExPosAndRot");
	}

	AREDPawn_AdvAvatar_execSetExPosAndRot_Params SetExPosAndRot_Params;
	memset(&SetExPosAndRot_Params, 0, sizeof(SetExPosAndRot_Params));
	memcpy_s(&SetExPosAndRot_Params.InExPos, sizeof(SetExPosAndRot_Params.InExPos), &InExPos, sizeof(InExPos));
	memcpy_s(&SetExPosAndRot_Params.InExPos2, sizeof(SetExPosAndRot_Params.InExPos2), &InExPos2, sizeof(InExPos2));
	memcpy_s(&SetExPosAndRot_Params.InExRot, sizeof(SetExPosAndRot_Params.InExRot), &InExRot, sizeof(InExRot));
	memcpy_s(&SetExPosAndRot_Params.InExRot2, sizeof(SetExPosAndRot_Params.InExRot2), &InExRot2, sizeof(InExRot2));
	memcpy_s(&SetExPosAndRot_Params.InExRot3, sizeof(SetExPosAndRot_Params.InExRot3), &InExRot3, sizeof(InExRot3));
	memcpy_s(&SetExPosAndRot_Params.InExRot4, sizeof(SetExPosAndRot_Params.InExRot4), &InExRot4, sizeof(InExRot4));
	memcpy_s(&SetExPosAndRot_Params.InExRot5, sizeof(SetExPosAndRot_Params.InExRot5), &InExRot5, sizeof(InExRot5));

	this->ProcessEvent(uFnSetExPosAndRot, &SetExPosAndRot_Params, nullptr);

	memcpy_s(&InExPos, sizeof(InExPos), &SetExPosAndRot_Params.InExPos, sizeof(SetExPosAndRot_Params.InExPos));
	memcpy_s(&InExPos2, sizeof(InExPos2), &SetExPosAndRot_Params.InExPos2, sizeof(SetExPosAndRot_Params.InExPos2));
	memcpy_s(&InExRot, sizeof(InExRot), &SetExPosAndRot_Params.InExRot, sizeof(SetExPosAndRot_Params.InExRot));
	memcpy_s(&InExRot2, sizeof(InExRot2), &SetExPosAndRot_Params.InExRot2, sizeof(SetExPosAndRot_Params.InExRot2));
	memcpy_s(&InExRot3, sizeof(InExRot3), &SetExPosAndRot_Params.InExRot3, sizeof(SetExPosAndRot_Params.InExRot3));
	memcpy_s(&InExRot4, sizeof(InExRot4), &SetExPosAndRot_Params.InExRot4, sizeof(SetExPosAndRot_Params.InExRot4));
	memcpy_s(&InExRot5, sizeof(InExRot5), &SetExPosAndRot_Params.InExRot5, sizeof(SetExPosAndRot_Params.InExRot5));
};

// Function REDGame.REDPawn_AdvAvatar.SetLipPos
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39766])
// Parameter Info:
// struct FVector                 InLipPos                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InLipScale                     (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_AdvAvatar::SetLipPos(struct FVector& InLipPos, struct FVector& InLipScale)
{
	static UFunction* uFnSetLipPos = nullptr;

	if (!uFnSetLipPos)
	{
		uFnSetLipPos = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.SetLipPos");
	}

	AREDPawn_AdvAvatar_execSetLipPos_Params SetLipPos_Params;
	memset(&SetLipPos_Params, 0, sizeof(SetLipPos_Params));
	memcpy_s(&SetLipPos_Params.InLipPos, sizeof(SetLipPos_Params.InLipPos), &InLipPos, sizeof(InLipPos));
	memcpy_s(&SetLipPos_Params.InLipScale, sizeof(SetLipPos_Params.InLipScale), &InLipScale, sizeof(InLipScale));

	this->ProcessEvent(uFnSetLipPos, &SetLipPos_Params, nullptr);

	memcpy_s(&InLipPos, sizeof(InLipPos), &SetLipPos_Params.InLipPos, sizeof(SetLipPos_Params.InLipPos));
	memcpy_s(&InLipScale, sizeof(InLipScale), &SetLipPos_Params.InLipScale, sizeof(SetLipPos_Params.InLipScale));
};

// Function REDGame.REDPawn_AdvAvatar.SetEyePos
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39746])
// Parameter Info:
// struct FVector                 InEyePosL                      (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InEyeScaleL                    (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InEyePosR                      (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InEyeScaleR                    (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_AdvAvatar::SetEyePos(struct FVector& InEyePosL, struct FVector& InEyeScaleL, struct FVector& InEyePosR, struct FVector& InEyeScaleR)
{
	static UFunction* uFnSetEyePos = nullptr;

	if (!uFnSetEyePos)
	{
		uFnSetEyePos = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.SetEyePos");
	}

	AREDPawn_AdvAvatar_execSetEyePos_Params SetEyePos_Params;
	memset(&SetEyePos_Params, 0, sizeof(SetEyePos_Params));
	memcpy_s(&SetEyePos_Params.InEyePosL, sizeof(SetEyePos_Params.InEyePosL), &InEyePosL, sizeof(InEyePosL));
	memcpy_s(&SetEyePos_Params.InEyeScaleL, sizeof(SetEyePos_Params.InEyeScaleL), &InEyeScaleL, sizeof(InEyeScaleL));
	memcpy_s(&SetEyePos_Params.InEyePosR, sizeof(SetEyePos_Params.InEyePosR), &InEyePosR, sizeof(InEyePosR));
	memcpy_s(&SetEyePos_Params.InEyeScaleR, sizeof(SetEyePos_Params.InEyeScaleR), &InEyeScaleR, sizeof(InEyeScaleR));

	this->ProcessEvent(uFnSetEyePos, &SetEyePos_Params, nullptr);

	memcpy_s(&InEyePosL, sizeof(InEyePosL), &SetEyePos_Params.InEyePosL, sizeof(SetEyePos_Params.InEyePosL));
	memcpy_s(&InEyeScaleL, sizeof(InEyeScaleL), &SetEyePos_Params.InEyeScaleL, sizeof(SetEyePos_Params.InEyeScaleL));
	memcpy_s(&InEyePosR, sizeof(InEyePosR), &SetEyePos_Params.InEyePosR, sizeof(SetEyePos_Params.InEyePosR));
	memcpy_s(&InEyeScaleR, sizeof(InEyeScaleR), &SetEyePos_Params.InEyeScaleR, sizeof(SetEyePos_Params.InEyeScaleR));
};

// Function REDGame.REDPawn_AdvAvatar.SetPupilScale
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39797])
// Parameter Info:
// struct FVector                 InPupilScaleL                  (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InPupilScaleR                  (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_AdvAvatar::SetPupilScale(struct FVector& InPupilScaleL, struct FVector& InPupilScaleR)
{
	static UFunction* uFnSetPupilScale = nullptr;

	if (!uFnSetPupilScale)
	{
		uFnSetPupilScale = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.SetPupilScale");
	}

	AREDPawn_AdvAvatar_execSetPupilScale_Params SetPupilScale_Params;
	memset(&SetPupilScale_Params, 0, sizeof(SetPupilScale_Params));
	memcpy_s(&SetPupilScale_Params.InPupilScaleL, sizeof(SetPupilScale_Params.InPupilScaleL), &InPupilScaleL, sizeof(InPupilScaleL));
	memcpy_s(&SetPupilScale_Params.InPupilScaleR, sizeof(SetPupilScale_Params.InPupilScaleR), &InPupilScaleR, sizeof(InPupilScaleR));

	this->ProcessEvent(uFnSetPupilScale, &SetPupilScale_Params, nullptr);

	memcpy_s(&InPupilScaleL, sizeof(InPupilScaleL), &SetPupilScale_Params.InPupilScaleL, sizeof(SetPupilScale_Params.InPupilScaleL));
	memcpy_s(&InPupilScaleR, sizeof(InPupilScaleR), &SetPupilScale_Params.InPupilScaleR, sizeof(SetPupilScale_Params.InPupilScaleR));
};

// Function REDGame.REDPawn_AdvAvatar.UpdateHand
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40699])
// Parameter Info:

void AREDPawn_AdvAvatar::UpdateHand()
{
	static UFunction* uFnUpdateHand = nullptr;

	if (!uFnUpdateHand)
	{
		uFnUpdateHand = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.UpdateHand");
	}

	AREDPawn_AdvAvatar_execUpdateHand_Params UpdateHand_Params;
	memset(&UpdateHand_Params, 0, sizeof(UpdateHand_Params));

	this->ProcessEvent(uFnUpdateHand, &UpdateHand_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.UpdateHair
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40698])
// Parameter Info:

void AREDPawn_AdvAvatar::UpdateHair()
{
	static UFunction* uFnUpdateHair = nullptr;

	if (!uFnUpdateHair)
	{
		uFnUpdateHair = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.UpdateHair");
	}

	AREDPawn_AdvAvatar_execUpdateHair_Params UpdateHair_Params;
	memset(&UpdateHair_Params, 0, sizeof(UpdateHair_Params));

	this->ProcessEvent(uFnUpdateHair, &UpdateHair_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.SetEyeRotation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39747])
// Parameter Info:
// struct FRotator                InEyeRotL                      (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InEyeRotR                      (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_AdvAvatar::SetEyeRotation(struct FRotator& InEyeRotL, struct FRotator& InEyeRotR)
{
	static UFunction* uFnSetEyeRotation = nullptr;

	if (!uFnSetEyeRotation)
	{
		uFnSetEyeRotation = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.SetEyeRotation");
	}

	AREDPawn_AdvAvatar_execSetEyeRotation_Params SetEyeRotation_Params;
	memset(&SetEyeRotation_Params, 0, sizeof(SetEyeRotation_Params));
	memcpy_s(&SetEyeRotation_Params.InEyeRotL, sizeof(SetEyeRotation_Params.InEyeRotL), &InEyeRotL, sizeof(InEyeRotL));
	memcpy_s(&SetEyeRotation_Params.InEyeRotR, sizeof(SetEyeRotation_Params.InEyeRotR), &InEyeRotR, sizeof(InEyeRotR));

	this->ProcessEvent(uFnSetEyeRotation, &SetEyeRotation_Params, nullptr);

	memcpy_s(&InEyeRotL, sizeof(InEyeRotL), &SetEyeRotation_Params.InEyeRotL, sizeof(SetEyeRotation_Params.InEyeRotL));
	memcpy_s(&InEyeRotR, sizeof(InEyeRotR), &SetEyeRotation_Params.InEyeRotR, sizeof(SetEyeRotation_Params.InEyeRotR));
};

// Function REDGame.REDPawn_AdvAvatar.SetNeckRotation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39779])
// Parameter Info:
// struct FRotator                InNeckRot                      (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_AdvAvatar::SetNeckRotation(struct FRotator& InNeckRot)
{
	static UFunction* uFnSetNeckRotation = nullptr;

	if (!uFnSetNeckRotation)
	{
		uFnSetNeckRotation = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.SetNeckRotation");
	}

	AREDPawn_AdvAvatar_execSetNeckRotation_Params SetNeckRotation_Params;
	memset(&SetNeckRotation_Params, 0, sizeof(SetNeckRotation_Params));
	memcpy_s(&SetNeckRotation_Params.InNeckRot, sizeof(SetNeckRotation_Params.InNeckRot), &InNeckRot, sizeof(InNeckRot));

	this->ProcessEvent(uFnSetNeckRotation, &SetNeckRotation_Params, nullptr);

	memcpy_s(&InNeckRot, sizeof(InNeckRot), &SetNeckRotation_Params.InNeckRot, sizeof(SetNeckRotation_Params.InNeckRot));
};

// Function REDGame.REDPawn_AdvAvatar.UpdateFace
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40670])
// Parameter Info:

void AREDPawn_AdvAvatar::UpdateFace()
{
	static UFunction* uFnUpdateFace = nullptr;

	if (!uFnUpdateFace)
	{
		uFnUpdateFace = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.UpdateFace");
	}

	AREDPawn_AdvAvatar_execUpdateFace_Params UpdateFace_Params;
	memset(&UpdateFace_Params, 0, sizeof(UpdateFace_Params));

	this->ProcessEvent(uFnUpdateFace, &UpdateFace_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.UpdateBlendAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40604])
// Parameter Info:

void AREDPawn_AdvAvatar::UpdateBlendAnim()
{
	static UFunction* uFnUpdateBlendAnim = nullptr;

	if (!uFnUpdateBlendAnim)
	{
		uFnUpdateBlendAnim = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.UpdateBlendAnim");
	}

	AREDPawn_AdvAvatar_execUpdateBlendAnim_Params UpdateBlendAnim_Params;
	memset(&UpdateBlendAnim_Params, 0, sizeof(UpdateBlendAnim_Params));

	this->ProcessEvent(uFnUpdateBlendAnim, &UpdateBlendAnim_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.ChangeAnimeAdv
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36088])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimSeqName                    (CPF_Parm)
// int32_t                        InBlendCount                   (CPF_Parm)
// int32_t                        InBlendInterval                (CPF_Parm)
// int32_t                        InBlendAcc                     (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)
// uint32_t                       BlendAutoPlayAnim              (CPF_Parm)

bool AREDPawn_AdvAvatar::ChangeAnimeAdv(const class FName& AnimSeqName, int32_t InBlendCount, int32_t InBlendInterval, int32_t InBlendAcc, bool isLoop, bool BlendAutoPlayAnim)
{
	static UFunction* uFnChangeAnimeAdv = nullptr;

	if (!uFnChangeAnimeAdv)
	{
		uFnChangeAnimeAdv = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.ChangeAnimeAdv");
	}

	AREDPawn_AdvAvatar_execChangeAnimeAdv_Params ChangeAnimeAdv_Params;
	memset(&ChangeAnimeAdv_Params, 0, sizeof(ChangeAnimeAdv_Params));
	memcpy_s(&ChangeAnimeAdv_Params.AnimSeqName, sizeof(ChangeAnimeAdv_Params.AnimSeqName), &AnimSeqName, sizeof(AnimSeqName));
	memcpy_s(&ChangeAnimeAdv_Params.InBlendCount, sizeof(ChangeAnimeAdv_Params.InBlendCount), &InBlendCount, sizeof(InBlendCount));
	memcpy_s(&ChangeAnimeAdv_Params.InBlendInterval, sizeof(ChangeAnimeAdv_Params.InBlendInterval), &InBlendInterval, sizeof(InBlendInterval));
	memcpy_s(&ChangeAnimeAdv_Params.InBlendAcc, sizeof(ChangeAnimeAdv_Params.InBlendAcc), &InBlendAcc, sizeof(InBlendAcc));
	ChangeAnimeAdv_Params.isLoop = isLoop;
	ChangeAnimeAdv_Params.BlendAutoPlayAnim = BlendAutoPlayAnim;

	this->ProcessEvent(uFnChangeAnimeAdv, &ChangeAnimeAdv_Params, nullptr);

	return ChangeAnimeAdv_Params.ReturnValue;
};

// Function REDGame.REDPawn_AdvAvatar.ChangeHand
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36099])
// Parameter Info:
// int32_t                        InHandType                     (CPF_Parm)
// uint32_t                       isLeft                         (CPF_Parm)
// int32_t                        BlendCount                     (CPF_Parm)
// int32_t                        BlendInterval                  (CPF_Parm)
// int32_t                        InBlendAcc                     (CPF_Parm)

void AREDPawn_AdvAvatar::ChangeHand(int32_t InHandType, bool isLeft, int32_t BlendCount, int32_t BlendInterval, int32_t InBlendAcc)
{
	static UFunction* uFnChangeHand = nullptr;

	if (!uFnChangeHand)
	{
		uFnChangeHand = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.ChangeHand");
	}

	AREDPawn_AdvAvatar_execChangeHand_Params ChangeHand_Params;
	memset(&ChangeHand_Params, 0, sizeof(ChangeHand_Params));
	memcpy_s(&ChangeHand_Params.InHandType, sizeof(ChangeHand_Params.InHandType), &InHandType, sizeof(InHandType));
	ChangeHand_Params.isLeft = isLeft;
	memcpy_s(&ChangeHand_Params.BlendCount, sizeof(ChangeHand_Params.BlendCount), &BlendCount, sizeof(BlendCount));
	memcpy_s(&ChangeHand_Params.BlendInterval, sizeof(ChangeHand_Params.BlendInterval), &BlendInterval, sizeof(BlendInterval));
	memcpy_s(&ChangeHand_Params.InBlendAcc, sizeof(ChangeHand_Params.InBlendAcc), &InBlendAcc, sizeof(InBlendAcc));

	this->ProcessEvent(uFnChangeHand, &ChangeHand_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.ChangeHair
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36098])
// Parameter Info:
// class FString                  InHairAnim                     (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        BlendCount                     (CPF_Parm)
// int32_t                        BlendInterval                  (CPF_Parm)
// int32_t                        InBlendAcc                     (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)
// uint32_t                       IsForceSet                     (CPF_Parm)

void AREDPawn_AdvAvatar::ChangeHair(const class FString& InHairAnim, int32_t BlendCount, int32_t BlendInterval, int32_t InBlendAcc, bool isLoop, bool IsForceSet)
{
	static UFunction* uFnChangeHair = nullptr;

	if (!uFnChangeHair)
	{
		uFnChangeHair = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.ChangeHair");
	}

	AREDPawn_AdvAvatar_execChangeHair_Params ChangeHair_Params;
	memset(&ChangeHair_Params, 0, sizeof(ChangeHair_Params));
	memcpy_s(&ChangeHair_Params.InHairAnim, sizeof(ChangeHair_Params.InHairAnim), &InHairAnim, sizeof(InHairAnim));
	memcpy_s(&ChangeHair_Params.BlendCount, sizeof(ChangeHair_Params.BlendCount), &BlendCount, sizeof(BlendCount));
	memcpy_s(&ChangeHair_Params.BlendInterval, sizeof(ChangeHair_Params.BlendInterval), &BlendInterval, sizeof(BlendInterval));
	memcpy_s(&ChangeHair_Params.InBlendAcc, sizeof(ChangeHair_Params.InBlendAcc), &InBlendAcc, sizeof(InBlendAcc));
	ChangeHair_Params.isLoop = isLoop;
	ChangeHair_Params.IsForceSet = IsForceSet;

	this->ProcessEvent(uFnChangeHair, &ChangeHair_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.UpdateEye
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40669])
// Parameter Info:
// float                          Blend                          (CPF_Parm)

void AREDPawn_AdvAvatar::UpdateEye(float Blend)
{
	static UFunction* uFnUpdateEye = nullptr;

	if (!uFnUpdateEye)
	{
		uFnUpdateEye = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.UpdateEye");
	}

	AREDPawn_AdvAvatar_execUpdateEye_Params UpdateEye_Params;
	memset(&UpdateEye_Params, 0, sizeof(UpdateEye_Params));
	memcpy_s(&UpdateEye_Params.Blend, sizeof(UpdateEye_Params.Blend), &Blend, sizeof(Blend));

	this->ProcessEvent(uFnUpdateEye, &UpdateEye_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.ChangeFace
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36096])
// Parameter Info:
// int32_t                        InFaceType                     (CPF_Parm)
// int32_t                        BlendCount                     (CPF_Parm)
// int32_t                        BlendInterval                  (CPF_Parm)
// int32_t                        InBlendAcc                     (CPF_Parm)
// int32_t                        IsManpuAnimMode                (CPF_Parm)

void AREDPawn_AdvAvatar::ChangeFace(int32_t InFaceType, int32_t BlendCount, int32_t BlendInterval, int32_t InBlendAcc, int32_t IsManpuAnimMode)
{
	static UFunction* uFnChangeFace = nullptr;

	if (!uFnChangeFace)
	{
		uFnChangeFace = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.ChangeFace");
	}

	AREDPawn_AdvAvatar_execChangeFace_Params ChangeFace_Params;
	memset(&ChangeFace_Params, 0, sizeof(ChangeFace_Params));
	memcpy_s(&ChangeFace_Params.InFaceType, sizeof(ChangeFace_Params.InFaceType), &InFaceType, sizeof(InFaceType));
	memcpy_s(&ChangeFace_Params.BlendCount, sizeof(ChangeFace_Params.BlendCount), &BlendCount, sizeof(BlendCount));
	memcpy_s(&ChangeFace_Params.BlendInterval, sizeof(ChangeFace_Params.BlendInterval), &BlendInterval, sizeof(BlendInterval));
	memcpy_s(&ChangeFace_Params.InBlendAcc, sizeof(ChangeFace_Params.InBlendAcc), &InBlendAcc, sizeof(InBlendAcc));
	memcpy_s(&ChangeFace_Params.IsManpuAnimMode, sizeof(ChangeFace_Params.IsManpuAnimMode), &IsManpuAnimMode, sizeof(IsManpuAnimMode));

	this->ProcessEvent(uFnChangeFace, &ChangeFace_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.RootMotionProcessed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm | CPF_EditInline)

void AREDPawn_AdvAvatar::eventRootMotionProcessed(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* uFnRootMotionProcessed = nullptr;

	if (!uFnRootMotionProcessed)
	{
		uFnRootMotionProcessed = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.RootMotionProcessed");
	}

	AREDPawn_AdvAvatar_eventRootMotionProcessed_Params RootMotionProcessed_Params;
	memset(&RootMotionProcessed_Params, 0, sizeof(RootMotionProcessed_Params));
	RootMotionProcessed_Params.SkelComp = SkelComp;

	this->ProcessEvent(uFnRootMotionProcessed, &RootMotionProcessed_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.ChangeShadowMaterialsForAdv
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36105])
// Parameter Info:
// class FString                  CharaName                      (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       isBoyake                       (CPF_Parm)

void AREDPawn_AdvAvatar::ChangeShadowMaterialsForAdv(const class FString& CharaName, bool isBoyake)
{
	static UFunction* uFnChangeShadowMaterialsForAdv = nullptr;

	if (!uFnChangeShadowMaterialsForAdv)
	{
		uFnChangeShadowMaterialsForAdv = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.ChangeShadowMaterialsForAdv");
	}

	AREDPawn_AdvAvatar_execChangeShadowMaterialsForAdv_Params ChangeShadowMaterialsForAdv_Params;
	memset(&ChangeShadowMaterialsForAdv_Params, 0, sizeof(ChangeShadowMaterialsForAdv_Params));
	memcpy_s(&ChangeShadowMaterialsForAdv_Params.CharaName, sizeof(ChangeShadowMaterialsForAdv_Params.CharaName), &CharaName, sizeof(CharaName));
	ChangeShadowMaterialsForAdv_Params.isBoyake = isBoyake;

	this->ProcessEvent(uFnChangeShadowMaterialsForAdv, &ChangeShadowMaterialsForAdv_Params, nullptr);
};

// Function REDGame.REDPawn_AdvAvatar.SetupMeshInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39847])
// Parameter Info:
// class UREDMeshArray*           MeshInfo                       (CPF_Parm)
// class UREDAnimArray*           AnimInfo                       (CPF_Parm)
// class UREDPawnMaterials*       Materials                      (CPF_Parm)

void AREDPawn_AdvAvatar::SetupMeshInstance(class UREDMeshArray* MeshInfo, class UREDAnimArray* AnimInfo, class UREDPawnMaterials* Materials)
{
	static UFunction* uFnSetupMeshInstance = nullptr;

	if (!uFnSetupMeshInstance)
	{
		uFnSetupMeshInstance = UFunction::FindFunction("Function REDGame.REDPawn_AdvAvatar.SetupMeshInstance");
	}

	AREDPawn_AdvAvatar_execSetupMeshInstance_Params SetupMeshInstance_Params;
	memset(&SetupMeshInstance_Params, 0, sizeof(SetupMeshInstance_Params));
	SetupMeshInstance_Params.MeshInfo = MeshInfo;
	SetupMeshInstance_Params.AnimInfo = AnimInfo;
	SetupMeshInstance_Params.Materials = Materials;

	this->ProcessEvent(uFnSetupMeshInstance, &SetupMeshInstance_Params, nullptr);
};

// Function REDGame.REDPawn_DigitalFigureAvatar.SetEyeRotation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39747])
// Parameter Info:
// struct FRotator                InEyeRotL                      (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InEyeRotR                      (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_DigitalFigureAvatar::SetEyeRotation(struct FRotator& InEyeRotL, struct FRotator& InEyeRotR)
{
	static UFunction* uFnSetEyeRotation = nullptr;

	if (!uFnSetEyeRotation)
	{
		uFnSetEyeRotation = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.SetEyeRotation");
	}

	AREDPawn_DigitalFigureAvatar_execSetEyeRotation_Params SetEyeRotation_Params;
	memset(&SetEyeRotation_Params, 0, sizeof(SetEyeRotation_Params));
	memcpy_s(&SetEyeRotation_Params.InEyeRotL, sizeof(SetEyeRotation_Params.InEyeRotL), &InEyeRotL, sizeof(InEyeRotL));
	memcpy_s(&SetEyeRotation_Params.InEyeRotR, sizeof(SetEyeRotation_Params.InEyeRotR), &InEyeRotR, sizeof(InEyeRotR));

	this->ProcessEvent(uFnSetEyeRotation, &SetEyeRotation_Params, nullptr);

	memcpy_s(&InEyeRotL, sizeof(InEyeRotL), &SetEyeRotation_Params.InEyeRotL, sizeof(SetEyeRotation_Params.InEyeRotL));
	memcpy_s(&InEyeRotR, sizeof(InEyeRotR), &SetEyeRotation_Params.InEyeRotR, sizeof(SetEyeRotation_Params.InEyeRotR));
};

// Function REDGame.REDPawn_DigitalFigureAvatar.GetMotionLengthFrame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37114])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn_DigitalFigureAvatar::GetMotionLengthFrame()
{
	static UFunction* uFnGetMotionLengthFrame = nullptr;

	if (!uFnGetMotionLengthFrame)
	{
		uFnGetMotionLengthFrame = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.GetMotionLengthFrame");
	}

	AREDPawn_DigitalFigureAvatar_execGetMotionLengthFrame_Params GetMotionLengthFrame_Params;
	memset(&GetMotionLengthFrame_Params, 0, sizeof(GetMotionLengthFrame_Params));

	this->ProcessEvent(uFnGetMotionLengthFrame, &GetMotionLengthFrame_Params, nullptr);

	return GetMotionLengthFrame_Params.ReturnValue;
};

// Function REDGame.REDPawn_DigitalFigureAvatar.ResetFaceScaleController
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39380])
// Parameter Info:

void AREDPawn_DigitalFigureAvatar::ResetFaceScaleController()
{
	static UFunction* uFnResetFaceScaleController = nullptr;

	if (!uFnResetFaceScaleController)
	{
		uFnResetFaceScaleController = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.ResetFaceScaleController");
	}

	AREDPawn_DigitalFigureAvatar_execResetFaceScaleController_Params ResetFaceScaleController_Params;
	memset(&ResetFaceScaleController_Params, 0, sizeof(ResetFaceScaleController_Params));

	this->ProcessEvent(uFnResetFaceScaleController, &ResetFaceScaleController_Params, nullptr);
};

// Function REDGame.REDPawn_DigitalFigureAvatar.UpdateFace
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40670])
// Parameter Info:

void AREDPawn_DigitalFigureAvatar::UpdateFace()
{
	static UFunction* uFnUpdateFace = nullptr;

	if (!uFnUpdateFace)
	{
		uFnUpdateFace = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.UpdateFace");
	}

	AREDPawn_DigitalFigureAvatar_execUpdateFace_Params UpdateFace_Params;
	memset(&UpdateFace_Params, 0, sizeof(UpdateFace_Params));

	this->ProcessEvent(uFnUpdateFace, &UpdateFace_Params, nullptr);
};

// Function REDGame.REDPawn_DigitalFigureAvatar.UpdateBlendAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40604])
// Parameter Info:

void AREDPawn_DigitalFigureAvatar::UpdateBlendAnim()
{
	static UFunction* uFnUpdateBlendAnim = nullptr;

	if (!uFnUpdateBlendAnim)
	{
		uFnUpdateBlendAnim = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.UpdateBlendAnim");
	}

	AREDPawn_DigitalFigureAvatar_execUpdateBlendAnim_Params UpdateBlendAnim_Params;
	memset(&UpdateBlendAnim_Params, 0, sizeof(UpdateBlendAnim_Params));

	this->ProcessEvent(uFnUpdateBlendAnim, &UpdateBlendAnim_Params, nullptr);
};

// Function REDGame.REDPawn_DigitalFigureAvatar.ChangeAnimeDF
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36089])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimSeqName                    (CPF_Parm)
// int32_t                        InBlendCount                   (CPF_Parm)
// int32_t                        InBlendInterval                (CPF_Parm)
// int32_t                        InBlendAcc                     (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)
// uint32_t                       BlendAutoPlayAnim              (CPF_Parm)

bool AREDPawn_DigitalFigureAvatar::ChangeAnimeDF(const class FName& AnimSeqName, int32_t InBlendCount, int32_t InBlendInterval, int32_t InBlendAcc, bool isLoop, bool BlendAutoPlayAnim)
{
	static UFunction* uFnChangeAnimeDF = nullptr;

	if (!uFnChangeAnimeDF)
	{
		uFnChangeAnimeDF = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.ChangeAnimeDF");
	}

	AREDPawn_DigitalFigureAvatar_execChangeAnimeDF_Params ChangeAnimeDF_Params;
	memset(&ChangeAnimeDF_Params, 0, sizeof(ChangeAnimeDF_Params));
	memcpy_s(&ChangeAnimeDF_Params.AnimSeqName, sizeof(ChangeAnimeDF_Params.AnimSeqName), &AnimSeqName, sizeof(AnimSeqName));
	memcpy_s(&ChangeAnimeDF_Params.InBlendCount, sizeof(ChangeAnimeDF_Params.InBlendCount), &InBlendCount, sizeof(InBlendCount));
	memcpy_s(&ChangeAnimeDF_Params.InBlendInterval, sizeof(ChangeAnimeDF_Params.InBlendInterval), &InBlendInterval, sizeof(InBlendInterval));
	memcpy_s(&ChangeAnimeDF_Params.InBlendAcc, sizeof(ChangeAnimeDF_Params.InBlendAcc), &InBlendAcc, sizeof(InBlendAcc));
	ChangeAnimeDF_Params.isLoop = isLoop;
	ChangeAnimeDF_Params.BlendAutoPlayAnim = BlendAutoPlayAnim;

	this->ProcessEvent(uFnChangeAnimeDF, &ChangeAnimeDF_Params, nullptr);

	return ChangeAnimeDF_Params.ReturnValue;
};

// Function REDGame.REDPawn_DigitalFigureAvatar.ChangeFace
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36096])
// Parameter Info:
// int32_t                        InFaceType                     (CPF_Parm)
// int32_t                        BlendCount                     (CPF_Parm)
// int32_t                        BlendInterval                  (CPF_Parm)
// int32_t                        InBlendAcc                     (CPF_Parm)
// int32_t                        IsManpuAnimMode                (CPF_Parm)

void AREDPawn_DigitalFigureAvatar::ChangeFace(int32_t InFaceType, int32_t BlendCount, int32_t BlendInterval, int32_t InBlendAcc, int32_t IsManpuAnimMode)
{
	static UFunction* uFnChangeFace = nullptr;

	if (!uFnChangeFace)
	{
		uFnChangeFace = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.ChangeFace");
	}

	AREDPawn_DigitalFigureAvatar_execChangeFace_Params ChangeFace_Params;
	memset(&ChangeFace_Params, 0, sizeof(ChangeFace_Params));
	memcpy_s(&ChangeFace_Params.InFaceType, sizeof(ChangeFace_Params.InFaceType), &InFaceType, sizeof(InFaceType));
	memcpy_s(&ChangeFace_Params.BlendCount, sizeof(ChangeFace_Params.BlendCount), &BlendCount, sizeof(BlendCount));
	memcpy_s(&ChangeFace_Params.BlendInterval, sizeof(ChangeFace_Params.BlendInterval), &BlendInterval, sizeof(BlendInterval));
	memcpy_s(&ChangeFace_Params.InBlendAcc, sizeof(ChangeFace_Params.InBlendAcc), &InBlendAcc, sizeof(InBlendAcc));
	memcpy_s(&ChangeFace_Params.IsManpuAnimMode, sizeof(ChangeFace_Params.IsManpuAnimMode), &IsManpuAnimMode, sizeof(IsManpuAnimMode));

	this->ProcessEvent(uFnChangeFace, &ChangeFace_Params, nullptr);
};

// Function REDGame.REDPawn_DigitalFigureAvatar.RootMotionProcessed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm | CPF_EditInline)

void AREDPawn_DigitalFigureAvatar::eventRootMotionProcessed(class USkeletalMeshComponent* SkelComp)
{
	static UFunction* uFnRootMotionProcessed = nullptr;

	if (!uFnRootMotionProcessed)
	{
		uFnRootMotionProcessed = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.RootMotionProcessed");
	}

	AREDPawn_DigitalFigureAvatar_eventRootMotionProcessed_Params RootMotionProcessed_Params;
	memset(&RootMotionProcessed_Params, 0, sizeof(RootMotionProcessed_Params));
	RootMotionProcessed_Params.SkelComp = SkelComp;

	this->ProcessEvent(uFnRootMotionProcessed, &RootMotionProcessed_Params, nullptr);
};

// Function REDGame.REDPawn_DigitalFigureAvatar.SetupMeshInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39847])
// Parameter Info:
// class UREDMeshArray*           MeshInfo                       (CPF_Parm)
// class UREDAnimArray*           AnimInfo                       (CPF_Parm)
// class UREDPawnMaterials*       Materials                      (CPF_Parm)

void AREDPawn_DigitalFigureAvatar::SetupMeshInstance(class UREDMeshArray* MeshInfo, class UREDAnimArray* AnimInfo, class UREDPawnMaterials* Materials)
{
	static UFunction* uFnSetupMeshInstance = nullptr;

	if (!uFnSetupMeshInstance)
	{
		uFnSetupMeshInstance = UFunction::FindFunction("Function REDGame.REDPawn_DigitalFigureAvatar.SetupMeshInstance");
	}

	AREDPawn_DigitalFigureAvatar_execSetupMeshInstance_Params SetupMeshInstance_Params;
	memset(&SetupMeshInstance_Params, 0, sizeof(SetupMeshInstance_Params));
	SetupMeshInstance_Params.MeshInfo = MeshInfo;
	SetupMeshInstance_Params.AnimInfo = AnimInfo;
	SetupMeshInstance_Params.Materials = Materials;

	this->ProcessEvent(uFnSetupMeshInstance, &SetupMeshInstance_Params, nullptr);
};

// Function REDGame.REDPawn_Effect.Destroyed
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn_Effect::eventDestroyed()
{
	static UFunction* uFnDestroyed = nullptr;

	if (!uFnDestroyed)
	{
		uFnDestroyed = UFunction::FindFunction("Function REDGame.REDPawn_Effect.Destroyed");
	}

	AREDPawn_Effect_eventDestroyed_Params Destroyed_Params;
	memset(&Destroyed_Params, 0, sizeof(Destroyed_Params));

	this->ProcessEvent(uFnDestroyed, &Destroyed_Params, nullptr);
};

// Function REDGame.REDPawn_Effect.PostBeginPlay
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn_Effect::eventPostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function REDGame.REDPawn_Effect.PostBeginPlay");
	}

	AREDPawn_Effect_eventPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function REDGame.REDPawn_Effect.GetOwner
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

class AREDPawn_Player* AREDPawn_Effect::GetOwner()
{
	static UFunction* uFnGetOwner = nullptr;

	if (!uFnGetOwner)
	{
		uFnGetOwner = UFunction::FindFunction("Function REDGame.REDPawn_Effect.GetOwner");
	}

	AREDPawn_Effect_execGetOwner_Params GetOwner_Params;
	memset(&GetOwner_Params, 0, sizeof(GetOwner_Params));

	this->ProcessEvent(uFnGetOwner, &GetOwner_Params, nullptr);

	return GetOwner_Params.ReturnValue;
};

// Function REDGame.REDPawn_AdvEffect.GetMotionLengthFrame
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37114])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t AREDPawn_AdvEffect::GetMotionLengthFrame()
{
	static UFunction* uFnGetMotionLengthFrame = nullptr;

	if (!uFnGetMotionLengthFrame)
	{
		uFnGetMotionLengthFrame = UFunction::FindFunction("Function REDGame.REDPawn_AdvEffect.GetMotionLengthFrame");
	}

	AREDPawn_AdvEffect_execGetMotionLengthFrame_Params GetMotionLengthFrame_Params;
	memset(&GetMotionLengthFrame_Params, 0, sizeof(GetMotionLengthFrame_Params));

	this->ProcessEvent(uFnGetMotionLengthFrame, &GetMotionLengthFrame_Params, nullptr);

	return GetMotionLengthFrame_Params.ReturnValue;
};

// Function REDGame.REDPawn_AdvEffect.UpdateBlendAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40604])
// Parameter Info:

void AREDPawn_AdvEffect::UpdateBlendAnim()
{
	static UFunction* uFnUpdateBlendAnim = nullptr;

	if (!uFnUpdateBlendAnim)
	{
		uFnUpdateBlendAnim = UFunction::FindFunction("Function REDGame.REDPawn_AdvEffect.UpdateBlendAnim");
	}

	AREDPawn_AdvEffect_execUpdateBlendAnim_Params UpdateBlendAnim_Params;
	memset(&UpdateBlendAnim_Params, 0, sizeof(UpdateBlendAnim_Params));

	this->ProcessEvent(uFnUpdateBlendAnim, &UpdateBlendAnim_Params, nullptr);
};

// Function REDGame.REDPawn_AdvEffect.ChangeAnimeAdv
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36088])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    AnimSeqName                    (CPF_Parm)
// int32_t                        InBlendCount                   (CPF_Parm)
// int32_t                        InBlendInterval                (CPF_Parm)
// int32_t                        InBlendAcc                     (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)
// uint32_t                       BlendAutoPlayAnim              (CPF_Parm)

bool AREDPawn_AdvEffect::ChangeAnimeAdv(const class FName& AnimSeqName, int32_t InBlendCount, int32_t InBlendInterval, int32_t InBlendAcc, bool isLoop, bool BlendAutoPlayAnim)
{
	static UFunction* uFnChangeAnimeAdv = nullptr;

	if (!uFnChangeAnimeAdv)
	{
		uFnChangeAnimeAdv = UFunction::FindFunction("Function REDGame.REDPawn_AdvEffect.ChangeAnimeAdv");
	}

	AREDPawn_AdvEffect_execChangeAnimeAdv_Params ChangeAnimeAdv_Params;
	memset(&ChangeAnimeAdv_Params, 0, sizeof(ChangeAnimeAdv_Params));
	memcpy_s(&ChangeAnimeAdv_Params.AnimSeqName, sizeof(ChangeAnimeAdv_Params.AnimSeqName), &AnimSeqName, sizeof(AnimSeqName));
	memcpy_s(&ChangeAnimeAdv_Params.InBlendCount, sizeof(ChangeAnimeAdv_Params.InBlendCount), &InBlendCount, sizeof(InBlendCount));
	memcpy_s(&ChangeAnimeAdv_Params.InBlendInterval, sizeof(ChangeAnimeAdv_Params.InBlendInterval), &InBlendInterval, sizeof(InBlendInterval));
	memcpy_s(&ChangeAnimeAdv_Params.InBlendAcc, sizeof(ChangeAnimeAdv_Params.InBlendAcc), &InBlendAcc, sizeof(InBlendAcc));
	ChangeAnimeAdv_Params.isLoop = isLoop;
	ChangeAnimeAdv_Params.BlendAutoPlayAnim = BlendAutoPlayAnim;

	this->ProcessEvent(uFnChangeAnimeAdv, &ChangeAnimeAdv_Params, nullptr);

	return ChangeAnimeAdv_Params.ReturnValue;
};

// Function REDGame.REDPawn_AdvEffect.SetExBoneScale
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39743])
// Parameter Info:
// struct FVector                 InExBone0Scale                 (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InExBone1Scale                 (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InExBone2Scale                 (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InExBone3Scale                 (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InExBone4Scale                 (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_AdvEffect::SetExBoneScale(struct FVector& InExBone0Scale, struct FVector& InExBone1Scale, struct FVector& InExBone2Scale, struct FVector& InExBone3Scale, struct FVector& InExBone4Scale)
{
	static UFunction* uFnSetExBoneScale = nullptr;

	if (!uFnSetExBoneScale)
	{
		uFnSetExBoneScale = UFunction::FindFunction("Function REDGame.REDPawn_AdvEffect.SetExBoneScale");
	}

	AREDPawn_AdvEffect_execSetExBoneScale_Params SetExBoneScale_Params;
	memset(&SetExBoneScale_Params, 0, sizeof(SetExBoneScale_Params));
	memcpy_s(&SetExBoneScale_Params.InExBone0Scale, sizeof(SetExBoneScale_Params.InExBone0Scale), &InExBone0Scale, sizeof(InExBone0Scale));
	memcpy_s(&SetExBoneScale_Params.InExBone1Scale, sizeof(SetExBoneScale_Params.InExBone1Scale), &InExBone1Scale, sizeof(InExBone1Scale));
	memcpy_s(&SetExBoneScale_Params.InExBone2Scale, sizeof(SetExBoneScale_Params.InExBone2Scale), &InExBone2Scale, sizeof(InExBone2Scale));
	memcpy_s(&SetExBoneScale_Params.InExBone3Scale, sizeof(SetExBoneScale_Params.InExBone3Scale), &InExBone3Scale, sizeof(InExBone3Scale));
	memcpy_s(&SetExBoneScale_Params.InExBone4Scale, sizeof(SetExBoneScale_Params.InExBone4Scale), &InExBone4Scale, sizeof(InExBone4Scale));

	this->ProcessEvent(uFnSetExBoneScale, &SetExBoneScale_Params, nullptr);

	memcpy_s(&InExBone0Scale, sizeof(InExBone0Scale), &SetExBoneScale_Params.InExBone0Scale, sizeof(SetExBoneScale_Params.InExBone0Scale));
	memcpy_s(&InExBone1Scale, sizeof(InExBone1Scale), &SetExBoneScale_Params.InExBone1Scale, sizeof(SetExBoneScale_Params.InExBone1Scale));
	memcpy_s(&InExBone2Scale, sizeof(InExBone2Scale), &SetExBoneScale_Params.InExBone2Scale, sizeof(SetExBoneScale_Params.InExBone2Scale));
	memcpy_s(&InExBone3Scale, sizeof(InExBone3Scale), &SetExBoneScale_Params.InExBone3Scale, sizeof(SetExBoneScale_Params.InExBone3Scale));
	memcpy_s(&InExBone4Scale, sizeof(InExBone4Scale), &SetExBoneScale_Params.InExBone4Scale, sizeof(SetExBoneScale_Params.InExBone4Scale));
};

// Function REDGame.REDPawn_AdvEffect.SetExPosAndRot
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39744])
// Parameter Info:
// struct FVector                 InExPos                        (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 InExPos2                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot                        (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot2                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot3                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot4                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                InExRot5                       (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_AdvEffect::SetExPosAndRot(struct FVector& InExPos, struct FVector& InExPos2, struct FRotator& InExRot, struct FRotator& InExRot2, struct FRotator& InExRot3, struct FRotator& InExRot4, struct FRotator& InExRot5)
{
	static UFunction* uFnSetExPosAndRot = nullptr;

	if (!uFnSetExPosAndRot)
	{
		uFnSetExPosAndRot = UFunction::FindFunction("Function REDGame.REDPawn_AdvEffect.SetExPosAndRot");
	}

	AREDPawn_AdvEffect_execSetExPosAndRot_Params SetExPosAndRot_Params;
	memset(&SetExPosAndRot_Params, 0, sizeof(SetExPosAndRot_Params));
	memcpy_s(&SetExPosAndRot_Params.InExPos, sizeof(SetExPosAndRot_Params.InExPos), &InExPos, sizeof(InExPos));
	memcpy_s(&SetExPosAndRot_Params.InExPos2, sizeof(SetExPosAndRot_Params.InExPos2), &InExPos2, sizeof(InExPos2));
	memcpy_s(&SetExPosAndRot_Params.InExRot, sizeof(SetExPosAndRot_Params.InExRot), &InExRot, sizeof(InExRot));
	memcpy_s(&SetExPosAndRot_Params.InExRot2, sizeof(SetExPosAndRot_Params.InExRot2), &InExRot2, sizeof(InExRot2));
	memcpy_s(&SetExPosAndRot_Params.InExRot3, sizeof(SetExPosAndRot_Params.InExRot3), &InExRot3, sizeof(InExRot3));
	memcpy_s(&SetExPosAndRot_Params.InExRot4, sizeof(SetExPosAndRot_Params.InExRot4), &InExRot4, sizeof(InExRot4));
	memcpy_s(&SetExPosAndRot_Params.InExRot5, sizeof(SetExPosAndRot_Params.InExRot5), &InExRot5, sizeof(InExRot5));

	this->ProcessEvent(uFnSetExPosAndRot, &SetExPosAndRot_Params, nullptr);

	memcpy_s(&InExPos, sizeof(InExPos), &SetExPosAndRot_Params.InExPos, sizeof(SetExPosAndRot_Params.InExPos));
	memcpy_s(&InExPos2, sizeof(InExPos2), &SetExPosAndRot_Params.InExPos2, sizeof(SetExPosAndRot_Params.InExPos2));
	memcpy_s(&InExRot, sizeof(InExRot), &SetExPosAndRot_Params.InExRot, sizeof(SetExPosAndRot_Params.InExRot));
	memcpy_s(&InExRot2, sizeof(InExRot2), &SetExPosAndRot_Params.InExRot2, sizeof(SetExPosAndRot_Params.InExRot2));
	memcpy_s(&InExRot3, sizeof(InExRot3), &SetExPosAndRot_Params.InExRot3, sizeof(SetExPosAndRot_Params.InExRot3));
	memcpy_s(&InExRot4, sizeof(InExRot4), &SetExPosAndRot_Params.InExRot4, sizeof(SetExPosAndRot_Params.InExRot4));
	memcpy_s(&InExRot5, sizeof(InExRot5), &SetExPosAndRot_Params.InExRot5, sizeof(SetExPosAndRot_Params.InExRot5));
};

// Function REDGame.REDPawn_AdvEffect.SetupMeshInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39847])
// Parameter Info:
// class UREDMeshArray*           MeshInfo                       (CPF_Parm)
// class UREDAnimArray*           AnimInfo                       (CPF_Parm)
// class UREDPawnMaterials*       Materials                      (CPF_Parm)

void AREDPawn_AdvEffect::SetupMeshInstance(class UREDMeshArray* MeshInfo, class UREDAnimArray* AnimInfo, class UREDPawnMaterials* Materials)
{
	static UFunction* uFnSetupMeshInstance = nullptr;

	if (!uFnSetupMeshInstance)
	{
		uFnSetupMeshInstance = UFunction::FindFunction("Function REDGame.REDPawn_AdvEffect.SetupMeshInstance");
	}

	AREDPawn_AdvEffect_execSetupMeshInstance_Params SetupMeshInstance_Params;
	memset(&SetupMeshInstance_Params, 0, sizeof(SetupMeshInstance_Params));
	SetupMeshInstance_Params.MeshInfo = MeshInfo;
	SetupMeshInstance_Params.AnimInfo = AnimInfo;
	SetupMeshInstance_Params.Materials = Materials;

	this->ProcessEvent(uFnSetupMeshInstance, &SetupMeshInstance_Params, nullptr);
};

// Function REDGame.REDPawn_Matinee.Tick
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDPawn_Matinee::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDPawn_Matinee.Tick");
	}

	AREDPawn_Matinee_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDPawn_Matinee.SetAnimPosition
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    SlotName                       (CPF_Parm)
// int32_t                        ChannelIndex                   (CPF_Parm)
// class FName                    InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// uint32_t                       bFireNotifies                  (CPF_Parm)
// uint32_t                       bLooping                       (CPF_Parm)
// uint32_t                       bEnableRootMotion              (CPF_Parm)

void AREDPawn_Matinee::eventSetAnimPosition(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static UFunction* uFnSetAnimPosition = nullptr;

	if (!uFnSetAnimPosition)
	{
		uFnSetAnimPosition = UFunction::FindFunction("Function REDGame.REDPawn_Matinee.SetAnimPosition");
	}

	AREDPawn_Matinee_eventSetAnimPosition_Params SetAnimPosition_Params;
	memset(&SetAnimPosition_Params, 0, sizeof(SetAnimPosition_Params));
	memcpy_s(&SetAnimPosition_Params.SlotName, sizeof(SetAnimPosition_Params.SlotName), &SlotName, sizeof(SlotName));
	memcpy_s(&SetAnimPosition_Params.ChannelIndex, sizeof(SetAnimPosition_Params.ChannelIndex), &ChannelIndex, sizeof(ChannelIndex));
	memcpy_s(&SetAnimPosition_Params.InAnimSeqName, sizeof(SetAnimPosition_Params.InAnimSeqName), &InAnimSeqName, sizeof(InAnimSeqName));
	memcpy_s(&SetAnimPosition_Params.InPosition, sizeof(SetAnimPosition_Params.InPosition), &InPosition, sizeof(InPosition));
	SetAnimPosition_Params.bFireNotifies = bFireNotifies;
	SetAnimPosition_Params.bLooping = bLooping;
	SetAnimPosition_Params.bEnableRootMotion = bEnableRootMotion;

	this->ProcessEvent(uFnSetAnimPosition, &SetAnimPosition_Params, nullptr);
};

// Function REDGame.REDPawn_Matinee.FinishAnimControl
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AREDPawn_Matinee::eventFinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* uFnFinishAnimControl = nullptr;

	if (!uFnFinishAnimControl)
	{
		uFnFinishAnimControl = UFunction::FindFunction("Function REDGame.REDPawn_Matinee.FinishAnimControl");
	}

	AREDPawn_Matinee_eventFinishAnimControl_Params FinishAnimControl_Params;
	memset(&FinishAnimControl_Params, 0, sizeof(FinishAnimControl_Params));
	FinishAnimControl_Params.InInterpGroup = InInterpGroup;

	this->ProcessEvent(uFnFinishAnimControl, &FinishAnimControl_Params, nullptr);
};

// Function REDGame.REDPawn_Matinee.BeginAnimControl
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AREDPawn_Matinee::eventBeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static UFunction* uFnBeginAnimControl = nullptr;

	if (!uFnBeginAnimControl)
	{
		uFnBeginAnimControl = UFunction::FindFunction("Function REDGame.REDPawn_Matinee.BeginAnimControl");
	}

	AREDPawn_Matinee_eventBeginAnimControl_Params BeginAnimControl_Params;
	memset(&BeginAnimControl_Params, 0, sizeof(BeginAnimControl_Params));
	BeginAnimControl_Params.InInterpGroup = InInterpGroup;

	this->ProcessEvent(uFnBeginAnimControl, &BeginAnimControl_Params, nullptr);
};

// Function REDGame.REDPawn_Matinee.SetAnimPosition_Internal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39693])
// Parameter Info:
// class FName                    SlotName                       (CPF_Parm)
// int32_t                        ChannelIndex                   (CPF_Parm)
// class FName                    InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// uint32_t                       bFireNotifies                  (CPF_Parm)
// uint32_t                       bLooping                       (CPF_Parm)
// uint32_t                       bEnableRootMotion              (CPF_Parm)

void AREDPawn_Matinee::SetAnimPosition_Internal(const class FName& SlotName, int32_t ChannelIndex, const class FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static UFunction* uFnSetAnimPosition_Internal = nullptr;

	if (!uFnSetAnimPosition_Internal)
	{
		uFnSetAnimPosition_Internal = UFunction::FindFunction("Function REDGame.REDPawn_Matinee.SetAnimPosition_Internal");
	}

	AREDPawn_Matinee_execSetAnimPosition_Internal_Params SetAnimPosition_Internal_Params;
	memset(&SetAnimPosition_Internal_Params, 0, sizeof(SetAnimPosition_Internal_Params));
	memcpy_s(&SetAnimPosition_Internal_Params.SlotName, sizeof(SetAnimPosition_Internal_Params.SlotName), &SlotName, sizeof(SlotName));
	memcpy_s(&SetAnimPosition_Internal_Params.ChannelIndex, sizeof(SetAnimPosition_Internal_Params.ChannelIndex), &ChannelIndex, sizeof(ChannelIndex));
	memcpy_s(&SetAnimPosition_Internal_Params.InAnimSeqName, sizeof(SetAnimPosition_Internal_Params.InAnimSeqName), &InAnimSeqName, sizeof(InAnimSeqName));
	memcpy_s(&SetAnimPosition_Internal_Params.InPosition, sizeof(SetAnimPosition_Internal_Params.InPosition), &InPosition, sizeof(InPosition));
	SetAnimPosition_Internal_Params.bFireNotifies = bFireNotifies;
	SetAnimPosition_Internal_Params.bLooping = bLooping;
	SetAnimPosition_Internal_Params.bEnableRootMotion = bEnableRootMotion;

	this->ProcessEvent(uFnSetAnimPosition_Internal, &SetAnimPosition_Internal_Params, nullptr);
};

// Function REDGame.REDPawn_Matinee.FinishAnimControl_Internal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36857])
// Parameter Info:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AREDPawn_Matinee::FinishAnimControl_Internal(class UInterpGroup* InInterpGroup)
{
	static UFunction* uFnFinishAnimControl_Internal = nullptr;

	if (!uFnFinishAnimControl_Internal)
	{
		uFnFinishAnimControl_Internal = UFunction::FindFunction("Function REDGame.REDPawn_Matinee.FinishAnimControl_Internal");
	}

	AREDPawn_Matinee_execFinishAnimControl_Internal_Params FinishAnimControl_Internal_Params;
	memset(&FinishAnimControl_Internal_Params, 0, sizeof(FinishAnimControl_Internal_Params));
	FinishAnimControl_Internal_Params.InInterpGroup = InInterpGroup;

	this->ProcessEvent(uFnFinishAnimControl_Internal, &FinishAnimControl_Internal_Params, nullptr);
};

// Function REDGame.REDPawn_Matinee.BeginAnimControl_Internal
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[35698])
// Parameter Info:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AREDPawn_Matinee::BeginAnimControl_Internal(class UInterpGroup* InInterpGroup)
{
	static UFunction* uFnBeginAnimControl_Internal = nullptr;

	if (!uFnBeginAnimControl_Internal)
	{
		uFnBeginAnimControl_Internal = UFunction::FindFunction("Function REDGame.REDPawn_Matinee.BeginAnimControl_Internal");
	}

	AREDPawn_Matinee_execBeginAnimControl_Internal_Params BeginAnimControl_Internal_Params;
	memset(&BeginAnimControl_Internal_Params, 0, sizeof(BeginAnimControl_Internal_Params));
	BeginAnimControl_Internal_Params.InInterpGroup = InInterpGroup;

	this->ProcessEvent(uFnBeginAnimControl_Internal, &BeginAnimControl_Internal_Params, nullptr);
};

// Function REDGame.REDPawn_Player.Tick
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDPawn_Player::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDPawn_Player.Tick");
	}

	AREDPawn_Player_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDPawn_Player.UpdateScarfSystem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40840])
// Parameter Info:
// uint32_t                       bStopShrink                    (CPF_Parm)

void AREDPawn_Player::UpdateScarfSystem(bool bStopShrink)
{
	static UFunction* uFnUpdateScarfSystem = nullptr;

	if (!uFnUpdateScarfSystem)
	{
		uFnUpdateScarfSystem = UFunction::FindFunction("Function REDGame.REDPawn_Player.UpdateScarfSystem");
	}

	AREDPawn_Player_execUpdateScarfSystem_Params UpdateScarfSystem_Params;
	memset(&UpdateScarfSystem_Params, 0, sizeof(UpdateScarfSystem_Params));
	UpdateScarfSystem_Params.bStopShrink = bStopShrink;

	this->ProcessEvent(uFnUpdateScarfSystem, &UpdateScarfSystem_Params, nullptr);
};

// Function REDGame.REDPawn_Player.StopScarfSystem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40104])
// Parameter Info:
// int32_t                        BlendFrame                     (CPF_Parm)

void AREDPawn_Player::StopScarfSystem(int32_t BlendFrame)
{
	static UFunction* uFnStopScarfSystem = nullptr;

	if (!uFnStopScarfSystem)
	{
		uFnStopScarfSystem = UFunction::FindFunction("Function REDGame.REDPawn_Player.StopScarfSystem");
	}

	AREDPawn_Player_execStopScarfSystem_Params StopScarfSystem_Params;
	memset(&StopScarfSystem_Params, 0, sizeof(StopScarfSystem_Params));
	memcpy_s(&StopScarfSystem_Params.BlendFrame, sizeof(StopScarfSystem_Params.BlendFrame), &BlendFrame, sizeof(BlendFrame));

	this->ProcessEvent(uFnStopScarfSystem, &StopScarfSystem_Params, nullptr);
};

// Function REDGame.REDPawn_Player.StartScarfSystem
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40032])
// Parameter Info:
// int32_t                        BlendFrame                     (CPF_Parm)

void AREDPawn_Player::StartScarfSystem(int32_t BlendFrame)
{
	static UFunction* uFnStartScarfSystem = nullptr;

	if (!uFnStartScarfSystem)
	{
		uFnStartScarfSystem = UFunction::FindFunction("Function REDGame.REDPawn_Player.StartScarfSystem");
	}

	AREDPawn_Player_execStartScarfSystem_Params StartScarfSystem_Params;
	memset(&StartScarfSystem_Params, 0, sizeof(StartScarfSystem_Params));
	memcpy_s(&StartScarfSystem_Params.BlendFrame, sizeof(StartScarfSystem_Params.BlendFrame), &BlendFrame, sizeof(BlendFrame));

	this->ProcessEvent(uFnStartScarfSystem, &StartScarfSystem_Params, nullptr);
};

// Function REDGame.REDPawn_Player.SetupMeshInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39847])
// Parameter Info:
// class UREDMeshArray*           MeshInfo                       (CPF_Parm)
// class UREDAnimArray*           AnimInfo                       (CPF_Parm)
// class UREDPawnMaterials*       Materials                      (CPF_Parm)

void AREDPawn_Player::SetupMeshInstance(class UREDMeshArray* MeshInfo, class UREDAnimArray* AnimInfo, class UREDPawnMaterials* Materials)
{
	static UFunction* uFnSetupMeshInstance = nullptr;

	if (!uFnSetupMeshInstance)
	{
		uFnSetupMeshInstance = UFunction::FindFunction("Function REDGame.REDPawn_Player.SetupMeshInstance");
	}

	AREDPawn_Player_execSetupMeshInstance_Params SetupMeshInstance_Params;
	memset(&SetupMeshInstance_Params, 0, sizeof(SetupMeshInstance_Params));
	SetupMeshInstance_Params.MeshInfo = MeshInfo;
	SetupMeshInstance_Params.AnimInfo = AnimInfo;
	SetupMeshInstance_Params.Materials = Materials;

	this->ProcessEvent(uFnSetupMeshInstance, &SetupMeshInstance_Params, nullptr);
};

// Function REDGame.REDPawn_Player.AllocateSoundPlayer
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPawn_Player::AllocateSoundPlayer()
{
	static UFunction* uFnAllocateSoundPlayer = nullptr;

	if (!uFnAllocateSoundPlayer)
	{
		uFnAllocateSoundPlayer = UFunction::FindFunction("Function REDGame.REDPawn_Player.AllocateSoundPlayer");
	}

	AREDPawn_Player_execAllocateSoundPlayer_Params AllocateSoundPlayer_Params;
	memset(&AllocateSoundPlayer_Params, 0, sizeof(AllocateSoundPlayer_Params));

	this->ProcessEvent(uFnAllocateSoundPlayer, &AllocateSoundPlayer_Params, nullptr);
};

// Function REDGame.REDPawn_Player.StopVoice
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[40110])
// Parameter Info:
// int32_t                        ch                             (CPF_OptionalParm | CPF_Parm)

void AREDPawn_Player::StopVoice(int32_t ch)
{
	static UFunction* uFnStopVoice = nullptr;

	if (!uFnStopVoice)
	{
		uFnStopVoice = UFunction::FindFunction("Function REDGame.REDPawn_Player.StopVoice");
	}

	AREDPawn_Player_execStopVoice_Params StopVoice_Params;
	memset(&StopVoice_Params, 0, sizeof(StopVoice_Params));
	memcpy_s(&StopVoice_Params.ch, sizeof(StopVoice_Params.ch), &ch, sizeof(ch));

	this->ProcessEvent(uFnStopVoice, &StopVoice_Params, nullptr);
};

// Function REDGame.REDPawn_Player.PlayVoice
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39051])
// Parameter Info:
// class AREDPawn*                pPlayPawn                      (CPF_Parm)
// class FName                    cueName                        (CPF_Parm)
// uint32_t                       isSmart                        (CPF_Parm)
// float                          pitchMultiply                  (CPF_OptionalParm | CPF_Parm)
// uint32_t                       onCenter                       (CPF_OptionalParm | CPF_Parm)
// int32_t                        ch                             (CPF_OptionalParm | CPF_Parm)

void AREDPawn_Player::PlayVoice(class AREDPawn* pPlayPawn, const class FName& cueName, bool isSmart, float pitchMultiply, bool onCenter, int32_t ch)
{
	static UFunction* uFnPlayVoice = nullptr;

	if (!uFnPlayVoice)
	{
		uFnPlayVoice = UFunction::FindFunction("Function REDGame.REDPawn_Player.PlayVoice");
	}

	AREDPawn_Player_execPlayVoice_Params PlayVoice_Params;
	memset(&PlayVoice_Params, 0, sizeof(PlayVoice_Params));
	PlayVoice_Params.pPlayPawn = pPlayPawn;
	memcpy_s(&PlayVoice_Params.cueName, sizeof(PlayVoice_Params.cueName), &cueName, sizeof(cueName));
	PlayVoice_Params.isSmart = isSmart;
	memcpy_s(&PlayVoice_Params.pitchMultiply, sizeof(PlayVoice_Params.pitchMultiply), &pitchMultiply, sizeof(pitchMultiply));
	PlayVoice_Params.onCenter = onCenter;
	memcpy_s(&PlayVoice_Params.ch, sizeof(PlayVoice_Params.ch), &ch, sizeof(ch));

	this->ProcessEvent(uFnPlayVoice, &PlayVoice_Params, nullptr);
};

// Function REDGame.REDPawn_Player.PlayPrivateSE
// [0x00024400] (FUNC_Native | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags) (iNative[39039])
// Parameter Info:
// class AREDPawn*                pPlayPawn                      (CPF_Parm)
// class FName                    cueName                        (CPF_Parm)
// uint32_t                       onCenter                       (CPF_OptionalParm | CPF_Parm)

void AREDPawn_Player::PlayPrivateSE(class AREDPawn* pPlayPawn, const class FName& cueName, bool onCenter)
{
	static UFunction* uFnPlayPrivateSE = nullptr;

	if (!uFnPlayPrivateSE)
	{
		uFnPlayPrivateSE = UFunction::FindFunction("Function REDGame.REDPawn_Player.PlayPrivateSE");
	}

	AREDPawn_Player_execPlayPrivateSE_Params PlayPrivateSE_Params;
	memset(&PlayPrivateSE_Params, 0, sizeof(PlayPrivateSE_Params));
	PlayPrivateSE_Params.pPlayPawn = pPlayPawn;
	memcpy_s(&PlayPrivateSE_Params.cueName, sizeof(PlayPrivateSE_Params.cueName), &cueName, sizeof(cueName));
	PlayPrivateSE_Params.onCenter = onCenter;

	this->ProcessEvent(uFnPlayPrivateSE, &PlayPrivateSE_Params, nullptr);
};

// Function REDGame.REDPawn_Player.SpawnEffect
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39942])
// Parameter Info:
// class AREDPawn_Effect*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    EffectName                     (CPF_Parm)

class AREDPawn_Effect* AREDPawn_Player::SpawnEffect(const class FName& EffectName)
{
	static UFunction* uFnSpawnEffect = nullptr;

	if (!uFnSpawnEffect)
	{
		uFnSpawnEffect = UFunction::FindFunction("Function REDGame.REDPawn_Player.SpawnEffect");
	}

	AREDPawn_Player_execSpawnEffect_Params SpawnEffect_Params;
	memset(&SpawnEffect_Params, 0, sizeof(SpawnEffect_Params));
	memcpy_s(&SpawnEffect_Params.EffectName, sizeof(SpawnEffect_Params.EffectName), &EffectName, sizeof(EffectName));

	this->ProcessEvent(uFnSpawnEffect, &SpawnEffect_Params, nullptr);

	return SpawnEffect_Params.ReturnValue;
};

// Function REDGame.REDPawn_Player.GetCameraAnim
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37013])
// Parameter Info:
// class UCameraAnim*             ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    CameraName                     (CPF_Parm)

class UCameraAnim* AREDPawn_Player::GetCameraAnim(const class FName& CameraName)
{
	static UFunction* uFnGetCameraAnim = nullptr;

	if (!uFnGetCameraAnim)
	{
		uFnGetCameraAnim = UFunction::FindFunction("Function REDGame.REDPawn_Player.GetCameraAnim");
	}

	AREDPawn_Player_execGetCameraAnim_Params GetCameraAnim_Params;
	memset(&GetCameraAnim_Params, 0, sizeof(GetCameraAnim_Params));
	memcpy_s(&GetCameraAnim_Params.CameraName, sizeof(GetCameraAnim_Params.CameraName), &CameraName, sizeof(CameraName));

	this->ProcessEvent(uFnGetCameraAnim, &GetCameraAnim_Params, nullptr);

	return GetCameraAnim_Params.ReturnValue;
};

// Function REDGame.REDPawn_Player.StopCameraAnim
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       immediate                      (CPF_Parm)

void AREDPawn_Player::eventStopCameraAnim(bool immediate)
{
	static UFunction* uFnStopCameraAnim = nullptr;

	if (!uFnStopCameraAnim)
	{
		uFnStopCameraAnim = UFunction::FindFunction("Function REDGame.REDPawn_Player.StopCameraAnim");
	}

	AREDPawn_Player_eventStopCameraAnim_Params StopCameraAnim_Params;
	memset(&StopCameraAnim_Params, 0, sizeof(StopCameraAnim_Params));
	StopCameraAnim_Params.immediate = immediate;

	this->ProcessEvent(uFnStopCameraAnim, &StopCameraAnim_Params, nullptr);
};

// Function REDGame.REDPawn_Player.PlayCameraAnimWorldPos
// [0x00424802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FName                    CameraName                     (CPF_Parm)
// int32_t                        BlendInTime                    (CPF_Parm)
// int32_t                        BlendOutTime                   (CPF_Parm)
// uint32_t                       MirrorX                        (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bUpdateOrthoBlend              (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIsOrthoBlendTransversal       (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Center                         (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDPawn_Player::eventPlayCameraAnimWorldPos(const class FName& CameraName, int32_t BlendInTime, int32_t BlendOutTime, bool MirrorX, bool bUpdateOrthoBlend, bool bIsOrthoBlendTransversal, struct FVector& Center)
{
	static UFunction* uFnPlayCameraAnimWorldPos = nullptr;

	if (!uFnPlayCameraAnimWorldPos)
	{
		uFnPlayCameraAnimWorldPos = UFunction::FindFunction("Function REDGame.REDPawn_Player.PlayCameraAnimWorldPos");
	}

	AREDPawn_Player_eventPlayCameraAnimWorldPos_Params PlayCameraAnimWorldPos_Params;
	memset(&PlayCameraAnimWorldPos_Params, 0, sizeof(PlayCameraAnimWorldPos_Params));
	memcpy_s(&PlayCameraAnimWorldPos_Params.CameraName, sizeof(PlayCameraAnimWorldPos_Params.CameraName), &CameraName, sizeof(CameraName));
	memcpy_s(&PlayCameraAnimWorldPos_Params.BlendInTime, sizeof(PlayCameraAnimWorldPos_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayCameraAnimWorldPos_Params.BlendOutTime, sizeof(PlayCameraAnimWorldPos_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayCameraAnimWorldPos_Params.MirrorX = MirrorX;
	PlayCameraAnimWorldPos_Params.bUpdateOrthoBlend = bUpdateOrthoBlend;
	PlayCameraAnimWorldPos_Params.bIsOrthoBlendTransversal = bIsOrthoBlendTransversal;
	memcpy_s(&PlayCameraAnimWorldPos_Params.Center, sizeof(PlayCameraAnimWorldPos_Params.Center), &Center, sizeof(Center));

	this->ProcessEvent(uFnPlayCameraAnimWorldPos, &PlayCameraAnimWorldPos_Params, nullptr);

	memcpy_s(&Center, sizeof(Center), &PlayCameraAnimWorldPos_Params.Center, sizeof(PlayCameraAnimWorldPos_Params.Center));
};

// Function REDGame.REDPawn_Player.PlayCameraAnim
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    CameraName                     (CPF_Parm)
// class AREDPawn*                CenterPawn                     (CPF_Parm)
// int32_t                        BlendInTime                    (CPF_Parm)
// int32_t                        BlendOutTime                   (CPF_Parm)
// uint32_t                       MirrorX                        (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bUpdateOrthoBlend              (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIsOrthoBlendTransversal       (CPF_OptionalParm | CPF_Parm)

void AREDPawn_Player::eventPlayCameraAnim(const class FName& CameraName, class AREDPawn* CenterPawn, int32_t BlendInTime, int32_t BlendOutTime, bool MirrorX, bool bUpdateOrthoBlend, bool bIsOrthoBlendTransversal)
{
	static UFunction* uFnPlayCameraAnim = nullptr;

	if (!uFnPlayCameraAnim)
	{
		uFnPlayCameraAnim = UFunction::FindFunction("Function REDGame.REDPawn_Player.PlayCameraAnim");
	}

	AREDPawn_Player_eventPlayCameraAnim_Params PlayCameraAnim_Params;
	memset(&PlayCameraAnim_Params, 0, sizeof(PlayCameraAnim_Params));
	memcpy_s(&PlayCameraAnim_Params.CameraName, sizeof(PlayCameraAnim_Params.CameraName), &CameraName, sizeof(CameraName));
	PlayCameraAnim_Params.CenterPawn = CenterPawn;
	memcpy_s(&PlayCameraAnim_Params.BlendInTime, sizeof(PlayCameraAnim_Params.BlendInTime), &BlendInTime, sizeof(BlendInTime));
	memcpy_s(&PlayCameraAnim_Params.BlendOutTime, sizeof(PlayCameraAnim_Params.BlendOutTime), &BlendOutTime, sizeof(BlendOutTime));
	PlayCameraAnim_Params.MirrorX = MirrorX;
	PlayCameraAnim_Params.bUpdateOrthoBlend = bUpdateOrthoBlend;
	PlayCameraAnim_Params.bIsOrthoBlendTransversal = bIsOrthoBlendTransversal;

	this->ProcessEvent(uFnPlayCameraAnim, &PlayCameraAnim_Params, nullptr);
};

// Function REDGame.REDPawn_Player.CreateSelfParticle
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36338])
// Parameter Info:
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_EditInline)
// struct FParticleArg            Arg                            (CPF_Const | CPF_Parm | CPF_OutParm)

class UParticleSystemComponent* AREDPawn_Player::CreateSelfParticle(struct FParticleArg& Arg)
{
	static UFunction* uFnCreateSelfParticle = nullptr;

	if (!uFnCreateSelfParticle)
	{
		uFnCreateSelfParticle = UFunction::FindFunction("Function REDGame.REDPawn_Player.CreateSelfParticle");
	}

	AREDPawn_Player_execCreateSelfParticle_Params CreateSelfParticle_Params;
	memset(&CreateSelfParticle_Params, 0, sizeof(CreateSelfParticle_Params));
	memcpy_s(&CreateSelfParticle_Params.Arg, sizeof(CreateSelfParticle_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnCreateSelfParticle, &CreateSelfParticle_Params, nullptr);

	memcpy_s(&Arg, sizeof(Arg), &CreateSelfParticle_Params.Arg, sizeof(CreateSelfParticle_Params.Arg));

	return CreateSelfParticle_Params.ReturnValue;
};

// Function REDGame.REDPawn_Player.SetCharacterColor
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        colorNo                        (CPF_Parm)

void AREDPawn_Player::SetCharacterColor(int32_t colorNo)
{
	static UFunction* uFnSetCharacterColor = nullptr;

	if (!uFnSetCharacterColor)
	{
		uFnSetCharacterColor = UFunction::FindFunction("Function REDGame.REDPawn_Player.SetCharacterColor");
	}

	AREDPawn_Player_execSetCharacterColor_Params SetCharacterColor_Params;
	memset(&SetCharacterColor_Params, 0, sizeof(SetCharacterColor_Params));
	memcpy_s(&SetCharacterColor_Params.colorNo, sizeof(SetCharacterColor_Params.colorNo), &colorNo, sizeof(colorNo));

	this->ProcessEvent(uFnSetCharacterColor, &SetCharacterColor_Params, nullptr);
};

// Function REDGame.REDPlayerController_Battle.SetLocationAndRotation
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39769])
// Parameter Info:
// struct FVector                 NewLocation                    (CPF_Parm)
// struct FRotator                NewRotation                    (CPF_Parm)

void AREDPlayerController_Battle::SetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static UFunction* uFnSetLocationAndRotation = nullptr;

	if (!uFnSetLocationAndRotation)
	{
		uFnSetLocationAndRotation = UFunction::FindFunction("Function REDGame.REDPlayerController_Battle.SetLocationAndRotation");
	}

	AREDPlayerController_Battle_execSetLocationAndRotation_Params SetLocationAndRotation_Params;
	memset(&SetLocationAndRotation_Params, 0, sizeof(SetLocationAndRotation_Params));
	memcpy_s(&SetLocationAndRotation_Params.NewLocation, sizeof(SetLocationAndRotation_Params.NewLocation), &NewLocation, sizeof(NewLocation));
	memcpy_s(&SetLocationAndRotation_Params.NewRotation, sizeof(SetLocationAndRotation_Params.NewRotation), &NewRotation, sizeof(NewRotation));

	this->ProcessEvent(uFnSetLocationAndRotation, &SetLocationAndRotation_Params, nullptr);
};

// Function REDGame.REDCamera.StopShakeCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera::eventStopShakeCamera()
{
	static UFunction* uFnStopShakeCamera = nullptr;

	if (!uFnStopShakeCamera)
	{
		uFnStopShakeCamera = UFunction::FindFunction("Function REDGame.REDCamera.StopShakeCamera");
	}

	AREDCamera_eventStopShakeCamera_Params StopShakeCamera_Params;
	memset(&StopShakeCamera_Params, 0, sizeof(StopShakeCamera_Params));

	this->ProcessEvent(uFnStopShakeCamera, &StopShakeCamera_Params, nullptr);
};

// Function REDGame.REDCamera.ShakeCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    PatternName                    (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// int32_t                        inFrame                        (CPF_Parm)
// int32_t                        stayFrame                      (CPF_Parm)
// int32_t                        outFrame                       (CPF_Parm)

void AREDCamera::eventShakeCamera(const class FName& PatternName, float Scale, int32_t inFrame, int32_t stayFrame, int32_t outFrame)
{
	static UFunction* uFnShakeCamera = nullptr;

	if (!uFnShakeCamera)
	{
		uFnShakeCamera = UFunction::FindFunction("Function REDGame.REDCamera.ShakeCamera");
	}

	AREDCamera_eventShakeCamera_Params ShakeCamera_Params;
	memset(&ShakeCamera_Params, 0, sizeof(ShakeCamera_Params));
	memcpy_s(&ShakeCamera_Params.PatternName, sizeof(ShakeCamera_Params.PatternName), &PatternName, sizeof(PatternName));
	memcpy_s(&ShakeCamera_Params.Scale, sizeof(ShakeCamera_Params.Scale), &Scale, sizeof(Scale));
	memcpy_s(&ShakeCamera_Params.inFrame, sizeof(ShakeCamera_Params.inFrame), &inFrame, sizeof(inFrame));
	memcpy_s(&ShakeCamera_Params.stayFrame, sizeof(ShakeCamera_Params.stayFrame), &stayFrame, sizeof(stayFrame));
	memcpy_s(&ShakeCamera_Params.outFrame, sizeof(ShakeCamera_Params.outFrame), &outFrame, sizeof(outFrame));

	this->ProcessEvent(uFnShakeCamera, &ShakeCamera_Params, nullptr);
};

// Function REDGame.REDCamera.ZoomOut
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera::ZoomOut()
{
	static UFunction* uFnZoomOut = nullptr;

	if (!uFnZoomOut)
	{
		uFnZoomOut = UFunction::FindFunction("Function REDGame.REDCamera.ZoomOut");
	}

	AREDCamera_execZoomOut_Params ZoomOut_Params;
	memset(&ZoomOut_Params, 0, sizeof(ZoomOut_Params));

	this->ProcessEvent(uFnZoomOut, &ZoomOut_Params, nullptr);
};

// Function REDGame.REDCamera.ZoomIn
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera::ZoomIn()
{
	static UFunction* uFnZoomIn = nullptr;

	if (!uFnZoomIn)
	{
		uFnZoomIn = UFunction::FindFunction("Function REDGame.REDCamera.ZoomIn");
	}

	AREDCamera_execZoomIn_Params ZoomIn_Params;
	memset(&ZoomIn_Params, 0, sizeof(ZoomIn_Params));

	this->ProcessEvent(uFnZoomIn, &ZoomIn_Params, nullptr);
};

// Function REDGame.REDCamera.BecomeViewTarget
// [0x00020102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void AREDCamera::BecomeViewTarget(class APlayerController* PC)
{
	static UFunction* uFnBecomeViewTarget = nullptr;

	if (!uFnBecomeViewTarget)
	{
		uFnBecomeViewTarget = UFunction::FindFunction("Function REDGame.REDCamera.BecomeViewTarget");
	}

	AREDCamera_execBecomeViewTarget_Params BecomeViewTarget_Params;
	memset(&BecomeViewTarget_Params, 0, sizeof(BecomeViewTarget_Params));
	BecomeViewTarget_Params.PC = PC;

	this->ProcessEvent(uFnBecomeViewTarget, &BecomeViewTarget_Params, nullptr);
};

// Function REDGame.REDCamera.UpdateViewTarget
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera::UpdateViewTarget(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateViewTarget = nullptr;

	if (!uFnUpdateViewTarget)
	{
		uFnUpdateViewTarget = UFunction::FindFunction("Function REDGame.REDCamera.UpdateViewTarget");
	}

	AREDCamera_execUpdateViewTarget_Params UpdateViewTarget_Params;
	memset(&UpdateViewTarget_Params, 0, sizeof(UpdateViewTarget_Params));
	memcpy_s(&UpdateViewTarget_Params.DeltaTime, sizeof(UpdateViewTarget_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateViewTarget, &UpdateViewTarget_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT));
};

// Function REDGame.REDCamera.UpdateAttachedPawnFromVT
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40597])
// Parameter Info:
// struct FTViewTarget            VT                             (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDCamera::UpdateAttachedPawnFromVT(struct FTViewTarget& VT)
{
	static UFunction* uFnUpdateAttachedPawnFromVT = nullptr;

	if (!uFnUpdateAttachedPawnFromVT)
	{
		uFnUpdateAttachedPawnFromVT = UFunction::FindFunction("Function REDGame.REDCamera.UpdateAttachedPawnFromVT");
	}

	AREDCamera_execUpdateAttachedPawnFromVT_Params UpdateAttachedPawnFromVT_Params;
	memset(&UpdateAttachedPawnFromVT_Params, 0, sizeof(UpdateAttachedPawnFromVT_Params));
	memcpy_s(&UpdateAttachedPawnFromVT_Params.VT, sizeof(UpdateAttachedPawnFromVT_Params.VT), &VT, sizeof(VT));

	this->ProcessEvent(uFnUpdateAttachedPawnFromVT, &UpdateAttachedPawnFromVT_Params, nullptr);

	memcpy_s(&VT, sizeof(VT), &UpdateAttachedPawnFromVT_Params.VT, sizeof(UpdateAttachedPawnFromVT_Params.VT));
};

// Function REDGame.REDCamera.CreateCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDCameraModule*        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class UClass*                  CameraClass                    (CPF_Parm)

class UREDCameraModule* AREDCamera::CreateCamera(class UClass* CameraClass)
{
	static UFunction* uFnCreateCamera = nullptr;

	if (!uFnCreateCamera)
	{
		uFnCreateCamera = UFunction::FindFunction("Function REDGame.REDCamera.CreateCamera");
	}

	AREDCamera_execCreateCamera_Params CreateCamera_Params;
	memset(&CreateCamera_Params, 0, sizeof(CreateCamera_Params));
	CreateCamera_Params.CameraClass = CameraClass;

	this->ProcessEvent(uFnCreateCamera, &CreateCamera_Params, nullptr);

	return CreateCamera_Params.ReturnValue;
};

// Function REDGame.REDCamera.InitializeFor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class APlayerController*       PC                             (CPF_Parm)

void AREDCamera::InitializeFor(class APlayerController* PC)
{
	static UFunction* uFnInitializeFor = nullptr;

	if (!uFnInitializeFor)
	{
		uFnInitializeFor = UFunction::FindFunction("Function REDGame.REDCamera.InitializeFor");
	}

	AREDCamera_execInitializeFor_Params InitializeFor_Params;
	memset(&InitializeFor_Params, 0, sizeof(InitializeFor_Params));
	InitializeFor_Params.PC = PC;

	this->ProcessEvent(uFnInitializeFor, &InitializeFor_Params, nullptr);
};

// Function REDGame.REDCamera.PostBeginPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera::PostBeginPlay()
{
	static UFunction* uFnPostBeginPlay = nullptr;

	if (!uFnPostBeginPlay)
	{
		uFnPostBeginPlay = UFunction::FindFunction("Function REDGame.REDCamera.PostBeginPlay");
	}

	AREDCamera_execPostBeginPlay_Params PostBeginPlay_Params;
	memset(&PostBeginPlay_Params, 0, sizeof(PostBeginPlay_Params));

	this->ProcessEvent(uFnPostBeginPlay, &PostBeginPlay_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.UpdatePawnMaterialInstance
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40807])
// Parameter Info:

void AREDCamera_Battle::UpdatePawnMaterialInstance()
{
	static UFunction* uFnUpdatePawnMaterialInstance = nullptr;

	if (!uFnUpdatePawnMaterialInstance)
	{
		uFnUpdatePawnMaterialInstance = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdatePawnMaterialInstance");
	}

	AREDCamera_Battle_execUpdatePawnMaterialInstance_Params UpdatePawnMaterialInstance_Params;
	memset(&UpdatePawnMaterialInstance_Params, 0, sizeof(UpdatePawnMaterialInstance_Params));

	this->ProcessEvent(uFnUpdatePawnMaterialInstance, &UpdatePawnMaterialInstance_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.UpdatePawnCameraParam
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40804])
// Parameter Info:
// struct FTPOV                   POV                            (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::UpdatePawnCameraParam(struct FTPOV& POV)
{
	static UFunction* uFnUpdatePawnCameraParam = nullptr;

	if (!uFnUpdatePawnCameraParam)
	{
		uFnUpdatePawnCameraParam = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdatePawnCameraParam");
	}

	AREDCamera_Battle_execUpdatePawnCameraParam_Params UpdatePawnCameraParam_Params;
	memset(&UpdatePawnCameraParam_Params, 0, sizeof(UpdatePawnCameraParam_Params));
	memcpy_s(&UpdatePawnCameraParam_Params.POV, sizeof(UpdatePawnCameraParam_Params.POV), &POV, sizeof(POV));

	this->ProcessEvent(uFnUpdatePawnCameraParam, &UpdatePawnCameraParam_Params, nullptr);

	memcpy_s(&POV, sizeof(POV), &UpdatePawnCameraParam_Params.POV, sizeof(UpdatePawnCameraParam_Params.POV));
};

// Function REDGame.REDCamera_Battle.UpdatePawnLightParam
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40805])
// Parameter Info:
// struct FVector                 LightPos                       (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FRotator                LightRot                       (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::UpdatePawnLightParam(struct FVector& LightPos, struct FRotator& LightRot)
{
	static UFunction* uFnUpdatePawnLightParam = nullptr;

	if (!uFnUpdatePawnLightParam)
	{
		uFnUpdatePawnLightParam = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdatePawnLightParam");
	}

	AREDCamera_Battle_execUpdatePawnLightParam_Params UpdatePawnLightParam_Params;
	memset(&UpdatePawnLightParam_Params, 0, sizeof(UpdatePawnLightParam_Params));
	memcpy_s(&UpdatePawnLightParam_Params.LightPos, sizeof(UpdatePawnLightParam_Params.LightPos), &LightPos, sizeof(LightPos));
	memcpy_s(&UpdatePawnLightParam_Params.LightRot, sizeof(UpdatePawnLightParam_Params.LightRot), &LightRot, sizeof(LightRot));

	this->ProcessEvent(uFnUpdatePawnLightParam, &UpdatePawnLightParam_Params, nullptr);

	memcpy_s(&LightPos, sizeof(LightPos), &UpdatePawnLightParam_Params.LightPos, sizeof(UpdatePawnLightParam_Params.LightPos));
	memcpy_s(&LightRot, sizeof(LightRot), &UpdatePawnLightParam_Params.LightRot, sizeof(UpdatePawnLightParam_Params.LightRot));
};

// Function REDGame.REDCamera_Battle.IsSpecialCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDCamera_Battle::eventIsSpecialCamera()
{
	static UFunction* uFnIsSpecialCamera = nullptr;

	if (!uFnIsSpecialCamera)
	{
		uFnIsSpecialCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.IsSpecialCamera");
	}

	AREDCamera_Battle_eventIsSpecialCamera_Params IsSpecialCamera_Params;
	memset(&IsSpecialCamera_Params, 0, sizeof(IsSpecialCamera_Params));

	this->ProcessEvent(uFnIsSpecialCamera, &IsSpecialCamera_Params, nullptr);

	return IsSpecialCamera_Params.ReturnValue;
};

// Function REDGame.REDCamera_Battle.SetAutoUpdate
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bAuto                          (CPF_Parm)

void AREDCamera_Battle::eventSetAutoUpdate(bool bAuto)
{
	static UFunction* uFnSetAutoUpdate = nullptr;

	if (!uFnSetAutoUpdate)
	{
		uFnSetAutoUpdate = UFunction::FindFunction("Function REDGame.REDCamera_Battle.SetAutoUpdate");
	}

	AREDCamera_Battle_eventSetAutoUpdate_Params SetAutoUpdate_Params;
	memset(&SetAutoUpdate_Params, 0, sizeof(SetAutoUpdate_Params));
	SetAutoUpdate_Params.bAuto = bAuto;

	this->ProcessEvent(uFnSetAutoUpdate, &SetAutoUpdate_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.UpdateFromREDGameInfo_Battle
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40679])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDCamera_Battle::UpdateFromREDGameInfo_Battle(float DeltaTime)
{
	static UFunction* uFnUpdateFromREDGameInfo_Battle = nullptr;

	if (!uFnUpdateFromREDGameInfo_Battle)
	{
		uFnUpdateFromREDGameInfo_Battle = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateFromREDGameInfo_Battle");
	}

	AREDCamera_Battle_execUpdateFromREDGameInfo_Battle_Params UpdateFromREDGameInfo_Battle_Params;
	memset(&UpdateFromREDGameInfo_Battle_Params, 0, sizeof(UpdateFromREDGameInfo_Battle_Params));
	memcpy_s(&UpdateFromREDGameInfo_Battle_Params.DeltaTime, sizeof(UpdateFromREDGameInfo_Battle_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateFromREDGameInfo_Battle, &UpdateFromREDGameInfo_Battle_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.UpdateViewTarget
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[29863])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::UpdateViewTarget(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateViewTarget = nullptr;

	if (!uFnUpdateViewTarget)
	{
		uFnUpdateViewTarget = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateViewTarget");
	}

	AREDCamera_Battle_execUpdateViewTarget_Params UpdateViewTarget_Params;
	memset(&UpdateViewTarget_Params, 0, sizeof(UpdateViewTarget_Params));
	memcpy_s(&UpdateViewTarget_Params.DeltaTime, sizeof(UpdateViewTarget_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateViewTarget, &UpdateViewTarget_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT));
};

// Function REDGame.REDCamera_Battle.UpdateViewTargetNative
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40883])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::UpdateViewTargetNative(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateViewTargetNative = nullptr;

	if (!uFnUpdateViewTargetNative)
	{
		uFnUpdateViewTargetNative = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateViewTargetNative");
	}

	AREDCamera_Battle_execUpdateViewTargetNative_Params UpdateViewTargetNative_Params;
	memset(&UpdateViewTargetNative_Params, 0, sizeof(UpdateViewTargetNative_Params));
	memcpy_s(&UpdateViewTargetNative_Params.DeltaTime, sizeof(UpdateViewTargetNative_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateViewTargetNative_Params.OutVT, sizeof(UpdateViewTargetNative_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateViewTargetNative, &UpdateViewTargetNative_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateViewTargetNative_Params.OutVT, sizeof(UpdateViewTargetNative_Params.OutVT));
};

// Function REDGame.REDCamera_Battle.CheckForceUIBackDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[36199])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AREDPawn*                reqPawn                        (CPF_Parm)

bool AREDCamera_Battle::CheckForceUIBackDraw(class AREDPawn* reqPawn)
{
	static UFunction* uFnCheckForceUIBackDraw = nullptr;

	if (!uFnCheckForceUIBackDraw)
	{
		uFnCheckForceUIBackDraw = UFunction::FindFunction("Function REDGame.REDCamera_Battle.CheckForceUIBackDraw");
	}

	AREDCamera_Battle_execCheckForceUIBackDraw_Params CheckForceUIBackDraw_Params;
	memset(&CheckForceUIBackDraw_Params, 0, sizeof(CheckForceUIBackDraw_Params));
	CheckForceUIBackDraw_Params.reqPawn = reqPawn;

	this->ProcessEvent(uFnCheckForceUIBackDraw, &CheckForceUIBackDraw_Params, nullptr);

	return CheckForceUIBackDraw_Params.ReturnValue;
};

// Function REDGame.REDCamera_Battle.IsForceUIBackDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37671])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDCamera_Battle::IsForceUIBackDraw()
{
	static UFunction* uFnIsForceUIBackDraw = nullptr;

	if (!uFnIsForceUIBackDraw)
	{
		uFnIsForceUIBackDraw = UFunction::FindFunction("Function REDGame.REDCamera_Battle.IsForceUIBackDraw");
	}

	AREDCamera_Battle_execIsForceUIBackDraw_Params IsForceUIBackDraw_Params;
	memset(&IsForceUIBackDraw_Params, 0, sizeof(IsForceUIBackDraw_Params));

	this->ProcessEvent(uFnIsForceUIBackDraw, &IsForceUIBackDraw_Params, nullptr);

	return IsForceUIBackDraw_Params.ReturnValue;
};

// Function REDGame.REDCamera_Battle.SetForceUIBackDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39749])
// Parameter Info:
// class AREDPawn*                reqPawn                        (CPF_Parm)
// uint32_t                       flag                           (CPF_Parm)

void AREDCamera_Battle::SetForceUIBackDraw(class AREDPawn* reqPawn, bool flag)
{
	static UFunction* uFnSetForceUIBackDraw = nullptr;

	if (!uFnSetForceUIBackDraw)
	{
		uFnSetForceUIBackDraw = UFunction::FindFunction("Function REDGame.REDCamera_Battle.SetForceUIBackDraw");
	}

	AREDCamera_Battle_execSetForceUIBackDraw_Params SetForceUIBackDraw_Params;
	memset(&SetForceUIBackDraw_Params, 0, sizeof(SetForceUIBackDraw_Params));
	SetForceUIBackDraw_Params.reqPawn = reqPawn;
	SetForceUIBackDraw_Params.flag = flag;

	this->ProcessEvent(uFnSetForceUIBackDraw, &SetForceUIBackDraw_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.BackupMainCamera
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[35529])
// Parameter Info:
// struct FTPOV                   OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::BackupMainCamera(struct FTPOV& OutVT)
{
	static UFunction* uFnBackupMainCamera = nullptr;

	if (!uFnBackupMainCamera)
	{
		uFnBackupMainCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.BackupMainCamera");
	}

	AREDCamera_Battle_execBackupMainCamera_Params BackupMainCamera_Params;
	memset(&BackupMainCamera_Params, 0, sizeof(BackupMainCamera_Params));
	memcpy_s(&BackupMainCamera_Params.OutVT, sizeof(BackupMainCamera_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnBackupMainCamera, &BackupMainCamera_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &BackupMainCamera_Params.OutVT, sizeof(BackupMainCamera_Params.OutVT));
};

// Function REDGame.REDCamera_Battle.UpdateEventCamera
// [0x00C20802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::eventUpdateEventCamera(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateEventCamera = nullptr;

	if (!uFnUpdateEventCamera)
	{
		uFnUpdateEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateEventCamera");
	}

	AREDCamera_Battle_eventUpdateEventCamera_Params UpdateEventCamera_Params;
	memset(&UpdateEventCamera_Params, 0, sizeof(UpdateEventCamera_Params));
	memcpy_s(&UpdateEventCamera_Params.DeltaTime, sizeof(UpdateEventCamera_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateEventCamera_Params.OutVT, sizeof(UpdateEventCamera_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateEventCamera, &UpdateEventCamera_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateEventCamera_Params.OutVT, sizeof(UpdateEventCamera_Params.OutVT));
};

// Function REDGame.REDCamera_Battle.TebureEventCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       On                             (CPF_Parm)
// float                          Mag                            (CPF_Parm)

void AREDCamera_Battle::TebureEventCamera(bool On, float Mag)
{
	static UFunction* uFnTebureEventCamera = nullptr;

	if (!uFnTebureEventCamera)
	{
		uFnTebureEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.TebureEventCamera");
	}

	AREDCamera_Battle_execTebureEventCamera_Params TebureEventCamera_Params;
	memset(&TebureEventCamera_Params, 0, sizeof(TebureEventCamera_Params));
	TebureEventCamera_Params.On = On;
	memcpy_s(&TebureEventCamera_Params.Mag, sizeof(TebureEventCamera_Params.Mag), &Mag, sizeof(Mag));

	this->ProcessEvent(uFnTebureEventCamera, &TebureEventCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.FOVEventCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Start                          (CPF_Parm)
// float                          End                            (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void AREDCamera_Battle::FOVEventCamera(float Start, float End, int32_t frame)
{
	static UFunction* uFnFOVEventCamera = nullptr;

	if (!uFnFOVEventCamera)
	{
		uFnFOVEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.FOVEventCamera");
	}

	AREDCamera_Battle_execFOVEventCamera_Params FOVEventCamera_Params;
	memset(&FOVEventCamera_Params, 0, sizeof(FOVEventCamera_Params));
	memcpy_s(&FOVEventCamera_Params.Start, sizeof(FOVEventCamera_Params.Start), &Start, sizeof(Start));
	memcpy_s(&FOVEventCamera_Params.End, sizeof(FOVEventCamera_Params.End), &End, sizeof(End));
	memcpy_s(&FOVEventCamera_Params.frame, sizeof(FOVEventCamera_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnFOVEventCamera, &FOVEventCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.MoveEventCamera
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Start                          (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)
// uint32_t                       WorldLoc                       (CPF_OptionalParm | CPF_Parm)

void AREDCamera_Battle::MoveEventCamera(const struct FVector& Start, const struct FVector& End, int32_t frame, bool WorldLoc)
{
	static UFunction* uFnMoveEventCamera = nullptr;

	if (!uFnMoveEventCamera)
	{
		uFnMoveEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.MoveEventCamera");
	}

	AREDCamera_Battle_execMoveEventCamera_Params MoveEventCamera_Params;
	memset(&MoveEventCamera_Params, 0, sizeof(MoveEventCamera_Params));
	memcpy_s(&MoveEventCamera_Params.Start, sizeof(MoveEventCamera_Params.Start), &Start, sizeof(Start));
	memcpy_s(&MoveEventCamera_Params.End, sizeof(MoveEventCamera_Params.End), &End, sizeof(End));
	memcpy_s(&MoveEventCamera_Params.frame, sizeof(MoveEventCamera_Params.frame), &frame, sizeof(frame));
	MoveEventCamera_Params.WorldLoc = WorldLoc;

	this->ProcessEvent(uFnMoveEventCamera, &MoveEventCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.RotateEventCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                Start                          (CPF_Parm)
// struct FRotator                End                            (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void AREDCamera_Battle::RotateEventCamera(const struct FRotator& Start, const struct FRotator& End, int32_t frame)
{
	static UFunction* uFnRotateEventCamera = nullptr;

	if (!uFnRotateEventCamera)
	{
		uFnRotateEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.RotateEventCamera");
	}

	AREDCamera_Battle_execRotateEventCamera_Params RotateEventCamera_Params;
	memset(&RotateEventCamera_Params, 0, sizeof(RotateEventCamera_Params));
	memcpy_s(&RotateEventCamera_Params.Start, sizeof(RotateEventCamera_Params.Start), &Start, sizeof(Start));
	memcpy_s(&RotateEventCamera_Params.End, sizeof(RotateEventCamera_Params.End), &End, sizeof(End));
	memcpy_s(&RotateEventCamera_Params.frame, sizeof(RotateEventCamera_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnRotateEventCamera, &RotateEventCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.ShakeEventCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)
// uint32_t                       isFadeout                      (CPF_Parm)

void AREDCamera_Battle::ShakeEventCamera(float X, float Y, int32_t frame, bool isFadeout)
{
	static UFunction* uFnShakeEventCamera = nullptr;

	if (!uFnShakeEventCamera)
	{
		uFnShakeEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.ShakeEventCamera");
	}

	AREDCamera_Battle_execShakeEventCamera_Params ShakeEventCamera_Params;
	memset(&ShakeEventCamera_Params, 0, sizeof(ShakeEventCamera_Params));
	memcpy_s(&ShakeEventCamera_Params.X, sizeof(ShakeEventCamera_Params.X), &X, sizeof(X));
	memcpy_s(&ShakeEventCamera_Params.Y, sizeof(ShakeEventCamera_Params.Y), &Y, sizeof(Y));
	memcpy_s(&ShakeEventCamera_Params.frame, sizeof(ShakeEventCamera_Params.frame), &frame, sizeof(frame));
	ShakeEventCamera_Params.isFadeout = isFadeout;

	this->ProcessEvent(uFnShakeEventCamera, &ShakeEventCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.FastFinishEventCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera_Battle::FastFinishEventCamera()
{
	static UFunction* uFnFastFinishEventCamera = nullptr;

	if (!uFnFastFinishEventCamera)
	{
		uFnFastFinishEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.FastFinishEventCamera");
	}

	AREDCamera_Battle_execFastFinishEventCamera_Params FastFinishEventCamera_Params;
	memset(&FastFinishEventCamera_Params, 0, sizeof(FastFinishEventCamera_Params));

	this->ProcessEvent(uFnFastFinishEventCamera, &FastFinishEventCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.IsPlayingEventCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDCamera_Battle::IsPlayingEventCamera()
{
	static UFunction* uFnIsPlayingEventCamera = nullptr;

	if (!uFnIsPlayingEventCamera)
	{
		uFnIsPlayingEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.IsPlayingEventCamera");
	}

	AREDCamera_Battle_execIsPlayingEventCamera_Params IsPlayingEventCamera_Params;
	memset(&IsPlayingEventCamera_Params, 0, sizeof(IsPlayingEventCamera_Params));

	this->ProcessEvent(uFnIsPlayingEventCamera, &IsPlayingEventCamera_Params, nullptr);

	return IsPlayingEventCamera_Params.ReturnValue;
};

// Function REDGame.REDCamera_Battle.PlayEventCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FTPOV                   _POV                           (CPF_Parm)
// int32_t                        frame                          (CPF_Parm)

void AREDCamera_Battle::PlayEventCamera(const struct FTPOV& _POV, int32_t frame)
{
	static UFunction* uFnPlayEventCamera = nullptr;

	if (!uFnPlayEventCamera)
	{
		uFnPlayEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.PlayEventCamera");
	}

	AREDCamera_Battle_execPlayEventCamera_Params PlayEventCamera_Params;
	memset(&PlayEventCamera_Params, 0, sizeof(PlayEventCamera_Params));
	memcpy_s(&PlayEventCamera_Params._POV, sizeof(PlayEventCamera_Params._POV), &_POV, sizeof(_POV));
	memcpy_s(&PlayEventCamera_Params.frame, sizeof(PlayEventCamera_Params.frame), &frame, sizeof(frame));

	this->ProcessEvent(uFnPlayEventCamera, &PlayEventCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.ResetEventCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera_Battle::ResetEventCamera()
{
	static UFunction* uFnResetEventCamera = nullptr;

	if (!uFnResetEventCamera)
	{
		uFnResetEventCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.ResetEventCamera");
	}

	AREDCamera_Battle_execResetEventCamera_Params ResetEventCamera_Params;
	memset(&ResetEventCamera_Params, 0, sizeof(ResetEventCamera_Params));

	this->ProcessEvent(uFnResetEventCamera, &ResetEventCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.UpdateMoveToPosCamera
// [0x00C20802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::eventUpdateMoveToPosCamera(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateMoveToPosCamera = nullptr;

	if (!uFnUpdateMoveToPosCamera)
	{
		uFnUpdateMoveToPosCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateMoveToPosCamera");
	}

	AREDCamera_Battle_eventUpdateMoveToPosCamera_Params UpdateMoveToPosCamera_Params;
	memset(&UpdateMoveToPosCamera_Params, 0, sizeof(UpdateMoveToPosCamera_Params));
	memcpy_s(&UpdateMoveToPosCamera_Params.DeltaTime, sizeof(UpdateMoveToPosCamera_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateMoveToPosCamera_Params.OutVT, sizeof(UpdateMoveToPosCamera_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateMoveToPosCamera, &UpdateMoveToPosCamera_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateMoveToPosCamera_Params.OutVT, sizeof(UpdateMoveToPosCamera_Params.OutVT));
};

// Function REDGame.REDCamera_Battle.MoveToPosCameraGetNextState
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        CurrentState                   (CPF_Parm)

int32_t AREDCamera_Battle::MoveToPosCameraGetNextState(int32_t CurrentState)
{
	static UFunction* uFnMoveToPosCameraGetNextState = nullptr;

	if (!uFnMoveToPosCameraGetNextState)
	{
		uFnMoveToPosCameraGetNextState = UFunction::FindFunction("Function REDGame.REDCamera_Battle.MoveToPosCameraGetNextState");
	}

	AREDCamera_Battle_execMoveToPosCameraGetNextState_Params MoveToPosCameraGetNextState_Params;
	memset(&MoveToPosCameraGetNextState_Params, 0, sizeof(MoveToPosCameraGetNextState_Params));
	memcpy_s(&MoveToPosCameraGetNextState_Params.CurrentState, sizeof(MoveToPosCameraGetNextState_Params.CurrentState), &CurrentState, sizeof(CurrentState));

	this->ProcessEvent(uFnMoveToPosCameraGetNextState, &MoveToPosCameraGetNextState_Params, nullptr);

	return MoveToPosCameraGetNextState_Params.ReturnValue;
};

// Function REDGame.REDCamera_Battle.StopMoveToPosCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn*                StopRequestPawn                (CPF_Parm)
// int32_t                        outFrame                       (CPF_Parm)

void AREDCamera_Battle::eventStopMoveToPosCamera(class AREDPawn* StopRequestPawn, int32_t outFrame)
{
	static UFunction* uFnStopMoveToPosCamera = nullptr;

	if (!uFnStopMoveToPosCamera)
	{
		uFnStopMoveToPosCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.StopMoveToPosCamera");
	}

	AREDCamera_Battle_eventStopMoveToPosCamera_Params StopMoveToPosCamera_Params;
	memset(&StopMoveToPosCamera_Params, 0, sizeof(StopMoveToPosCamera_Params));
	StopMoveToPosCamera_Params.StopRequestPawn = StopRequestPawn;
	memcpy_s(&StopMoveToPosCamera_Params.outFrame, sizeof(StopMoveToPosCamera_Params.outFrame), &outFrame, sizeof(outFrame));

	this->ProcessEvent(uFnStopMoveToPosCamera, &StopMoveToPosCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.PlayMoveToPosCamera
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FCameraMoveToPosArg     Arg                            (CPF_Const | CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::eventPlayMoveToPosCamera(struct FCameraMoveToPosArg& Arg)
{
	static UFunction* uFnPlayMoveToPosCamera = nullptr;

	if (!uFnPlayMoveToPosCamera)
	{
		uFnPlayMoveToPosCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.PlayMoveToPosCamera");
	}

	AREDCamera_Battle_eventPlayMoveToPosCamera_Params PlayMoveToPosCamera_Params;
	memset(&PlayMoveToPosCamera_Params, 0, sizeof(PlayMoveToPosCamera_Params));
	memcpy_s(&PlayMoveToPosCamera_Params.Arg, sizeof(PlayMoveToPosCamera_Params.Arg), &Arg, sizeof(Arg));

	this->ProcessEvent(uFnPlayMoveToPosCamera, &PlayMoveToPosCamera_Params, nullptr);

	memcpy_s(&Arg, sizeof(Arg), &PlayMoveToPosCamera_Params.Arg, sizeof(PlayMoveToPosCamera_Params.Arg));
};

// Function REDGame.REDCamera_Battle.StopBattleCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       immediate                      (CPF_Parm)

void AREDCamera_Battle::eventStopBattleCamera(bool immediate)
{
	static UFunction* uFnStopBattleCamera = nullptr;

	if (!uFnStopBattleCamera)
	{
		uFnStopBattleCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.StopBattleCamera");
	}

	AREDCamera_Battle_eventStopBattleCamera_Params StopBattleCamera_Params;
	memset(&StopBattleCamera_Params, 0, sizeof(StopBattleCamera_Params));
	StopBattleCamera_Params.immediate = immediate;

	this->ProcessEvent(uFnStopBattleCamera, &StopBattleCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.UpdateBattleCamera
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::eventUpdateBattleCamera(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateBattleCamera = nullptr;

	if (!uFnUpdateBattleCamera)
	{
		uFnUpdateBattleCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateBattleCamera");
	}

	AREDCamera_Battle_eventUpdateBattleCamera_Params UpdateBattleCamera_Params;
	memset(&UpdateBattleCamera_Params, 0, sizeof(UpdateBattleCamera_Params));
	memcpy_s(&UpdateBattleCamera_Params.DeltaTime, sizeof(UpdateBattleCamera_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateBattleCamera_Params.OutVT, sizeof(UpdateBattleCamera_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateBattleCamera, &UpdateBattleCamera_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateBattleCamera_Params.OutVT, sizeof(UpdateBattleCamera_Params.OutVT));
};

// Function REDGame.REDCamera_Battle.UpdateBattleCamera_Func
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[40600])
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::UpdateBattleCamera_Func(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateBattleCamera_Func = nullptr;

	if (!uFnUpdateBattleCamera_Func)
	{
		uFnUpdateBattleCamera_Func = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateBattleCamera_Func");
	}

	AREDCamera_Battle_execUpdateBattleCamera_Func_Params UpdateBattleCamera_Func_Params;
	memset(&UpdateBattleCamera_Func_Params, 0, sizeof(UpdateBattleCamera_Func_Params));
	memcpy_s(&UpdateBattleCamera_Func_Params.DeltaTime, sizeof(UpdateBattleCamera_Func_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateBattleCamera_Func_Params.OutVT, sizeof(UpdateBattleCamera_Func_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateBattleCamera_Func, &UpdateBattleCamera_Func_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateBattleCamera_Func_Params.OutVT, sizeof(UpdateBattleCamera_Func_Params.OutVT));
};

// Function REDGame.REDCamera_Battle.EyesViewPointToBaseViewPoint
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36819])
// Parameter Info:
// struct FTPOV                   EyeViewPoint                   (CPF_Parm | CPF_OutParm)
// struct FTPOV                   BaseEyeViewPoint               (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::EyesViewPointToBaseViewPoint(struct FTPOV& EyeViewPoint, struct FTPOV& BaseEyeViewPoint)
{
	static UFunction* uFnEyesViewPointToBaseViewPoint = nullptr;

	if (!uFnEyesViewPointToBaseViewPoint)
	{
		uFnEyesViewPointToBaseViewPoint = UFunction::FindFunction("Function REDGame.REDCamera_Battle.EyesViewPointToBaseViewPoint");
	}

	AREDCamera_Battle_execEyesViewPointToBaseViewPoint_Params EyesViewPointToBaseViewPoint_Params;
	memset(&EyesViewPointToBaseViewPoint_Params, 0, sizeof(EyesViewPointToBaseViewPoint_Params));
	memcpy_s(&EyesViewPointToBaseViewPoint_Params.EyeViewPoint, sizeof(EyesViewPointToBaseViewPoint_Params.EyeViewPoint), &EyeViewPoint, sizeof(EyeViewPoint));
	memcpy_s(&EyesViewPointToBaseViewPoint_Params.BaseEyeViewPoint, sizeof(EyesViewPointToBaseViewPoint_Params.BaseEyeViewPoint), &BaseEyeViewPoint, sizeof(BaseEyeViewPoint));

	this->ProcessEvent(uFnEyesViewPointToBaseViewPoint, &EyesViewPointToBaseViewPoint_Params, nullptr);

	memcpy_s(&EyeViewPoint, sizeof(EyeViewPoint), &EyesViewPointToBaseViewPoint_Params.EyeViewPoint, sizeof(EyesViewPointToBaseViewPoint_Params.EyeViewPoint));
	memcpy_s(&BaseEyeViewPoint, sizeof(BaseEyeViewPoint), &EyesViewPointToBaseViewPoint_Params.BaseEyeViewPoint, sizeof(EyesViewPointToBaseViewPoint_Params.BaseEyeViewPoint));
};

// Function REDGame.REDCamera_Battle.CalcCenterLocation
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[36045])
// Parameter Info:
// struct FVector                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// float                          Weight                         (CPF_Parm)
// struct FVector                 OutVTLocation                  (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector                 PlayCameraLocation             (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector AREDCamera_Battle::CalcCenterLocation(float Weight, struct FVector& OutVTLocation, struct FVector& PlayCameraLocation)
{
	static UFunction* uFnCalcCenterLocation = nullptr;

	if (!uFnCalcCenterLocation)
	{
		uFnCalcCenterLocation = UFunction::FindFunction("Function REDGame.REDCamera_Battle.CalcCenterLocation");
	}

	AREDCamera_Battle_execCalcCenterLocation_Params CalcCenterLocation_Params;
	memset(&CalcCenterLocation_Params, 0, sizeof(CalcCenterLocation_Params));
	memcpy_s(&CalcCenterLocation_Params.Weight, sizeof(CalcCenterLocation_Params.Weight), &Weight, sizeof(Weight));
	memcpy_s(&CalcCenterLocation_Params.OutVTLocation, sizeof(CalcCenterLocation_Params.OutVTLocation), &OutVTLocation, sizeof(OutVTLocation));
	memcpy_s(&CalcCenterLocation_Params.PlayCameraLocation, sizeof(CalcCenterLocation_Params.PlayCameraLocation), &PlayCameraLocation, sizeof(PlayCameraLocation));

	this->ProcessEvent(uFnCalcCenterLocation, &CalcCenterLocation_Params, nullptr);

	memcpy_s(&OutVTLocation, sizeof(OutVTLocation), &CalcCenterLocation_Params.OutVTLocation, sizeof(CalcCenterLocation_Params.OutVTLocation));
	memcpy_s(&PlayCameraLocation, sizeof(PlayCameraLocation), &CalcCenterLocation_Params.PlayCameraLocation, sizeof(CalcCenterLocation_Params.PlayCameraLocation));

	return CalcCenterLocation_Params.ReturnValue;
};

// Function REDGame.REDCamera_Battle.PlayBattleCamera
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCameraAnim*             Anim                           (CPF_Parm)
// class AREDPawn*                Pawn                           (CPF_Parm)
// class AREDPawn*                LocCenterPawn                  (CPF_Parm)
// int32_t                        BlendInFrame                   (CPF_Parm)
// int32_t                        BlendOutFrame                  (CPF_Parm)
// uint32_t                       MirrorX                        (CPF_OptionalParm | CPF_Parm)
// uint32_t                       useCenterPos                   (CPF_OptionalParm | CPF_Parm)
// struct FVector                 Center                         (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIsUpdateOrthoBlend            (CPF_OptionalParm | CPF_Parm)
// uint32_t                       bIsOrthoBlendTransversal       (CPF_OptionalParm | CPF_Parm)

void AREDCamera_Battle::eventPlayBattleCamera(class UCameraAnim* Anim, class AREDPawn* Pawn, class AREDPawn* LocCenterPawn, int32_t BlendInFrame, int32_t BlendOutFrame, bool MirrorX, bool useCenterPos, const struct FVector& Center, bool bIsUpdateOrthoBlend, bool bIsOrthoBlendTransversal)
{
	static UFunction* uFnPlayBattleCamera = nullptr;

	if (!uFnPlayBattleCamera)
	{
		uFnPlayBattleCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.PlayBattleCamera");
	}

	AREDCamera_Battle_eventPlayBattleCamera_Params PlayBattleCamera_Params;
	memset(&PlayBattleCamera_Params, 0, sizeof(PlayBattleCamera_Params));
	PlayBattleCamera_Params.Anim = Anim;
	PlayBattleCamera_Params.Pawn = Pawn;
	PlayBattleCamera_Params.LocCenterPawn = LocCenterPawn;
	memcpy_s(&PlayBattleCamera_Params.BlendInFrame, sizeof(PlayBattleCamera_Params.BlendInFrame), &BlendInFrame, sizeof(BlendInFrame));
	memcpy_s(&PlayBattleCamera_Params.BlendOutFrame, sizeof(PlayBattleCamera_Params.BlendOutFrame), &BlendOutFrame, sizeof(BlendOutFrame));
	PlayBattleCamera_Params.MirrorX = MirrorX;
	PlayBattleCamera_Params.useCenterPos = useCenterPos;
	memcpy_s(&PlayBattleCamera_Params.Center, sizeof(PlayBattleCamera_Params.Center), &Center, sizeof(Center));
	PlayBattleCamera_Params.bIsUpdateOrthoBlend = bIsUpdateOrthoBlend;
	PlayBattleCamera_Params.bIsOrthoBlendTransversal = bIsOrthoBlendTransversal;

	this->ProcessEvent(uFnPlayBattleCamera, &PlayBattleCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.UpdateCameraOffset
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40612])
// Parameter Info:

void AREDCamera_Battle::UpdateCameraOffset()
{
	static UFunction* uFnUpdateCameraOffset = nullptr;

	if (!uFnUpdateCameraOffset)
	{
		uFnUpdateCameraOffset = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateCameraOffset");
	}

	AREDCamera_Battle_execUpdateCameraOffset_Params UpdateCameraOffset_Params;
	memset(&UpdateCameraOffset_Params, 0, sizeof(UpdateCameraOffset_Params));

	this->ProcessEvent(uFnUpdateCameraOffset, &UpdateCameraOffset_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.GetReplayCameraNum
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37154])
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Type                           (CPF_Parm)

int32_t AREDCamera_Battle::GetReplayCameraNum(int32_t Type)
{
	static UFunction* uFnGetReplayCameraNum = nullptr;

	if (!uFnGetReplayCameraNum)
	{
		uFnGetReplayCameraNum = UFunction::FindFunction("Function REDGame.REDCamera_Battle.GetReplayCameraNum");
	}

	AREDCamera_Battle_execGetReplayCameraNum_Params GetReplayCameraNum_Params;
	memset(&GetReplayCameraNum_Params, 0, sizeof(GetReplayCameraNum_Params));
	memcpy_s(&GetReplayCameraNum_Params.Type, sizeof(GetReplayCameraNum_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnGetReplayCameraNum, &GetReplayCameraNum_Params, nullptr);

	return GetReplayCameraNum_Params.ReturnValue;
};

// Function REDGame.REDCamera_Battle.SetReplayCamera
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39801])
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)

void AREDCamera_Battle::SetReplayCamera(int32_t Index, int32_t Type)
{
	static UFunction* uFnSetReplayCamera = nullptr;

	if (!uFnSetReplayCamera)
	{
		uFnSetReplayCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.SetReplayCamera");
	}

	AREDCamera_Battle_execSetReplayCamera_Params SetReplayCamera_Params;
	memset(&SetReplayCamera_Params, 0, sizeof(SetReplayCamera_Params));
	memcpy_s(&SetReplayCamera_Params.Index, sizeof(SetReplayCamera_Params.Index), &Index, sizeof(Index));
	memcpy_s(&SetReplayCamera_Params.Type, sizeof(SetReplayCamera_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnSetReplayCamera, &SetReplayCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.UpdateFixedCamera
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::UpdateFixedCamera(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateFixedCamera = nullptr;

	if (!uFnUpdateFixedCamera)
	{
		uFnUpdateFixedCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.UpdateFixedCamera");
	}

	AREDCamera_Battle_execUpdateFixedCamera_Params UpdateFixedCamera_Params;
	memset(&UpdateFixedCamera_Params, 0, sizeof(UpdateFixedCamera_Params));
	memcpy_s(&UpdateFixedCamera_Params.DeltaTime, sizeof(UpdateFixedCamera_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateFixedCamera_Params.OutVT, sizeof(UpdateFixedCamera_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateFixedCamera, &UpdateFixedCamera_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateFixedCamera_Params.OutVT, sizeof(UpdateFixedCamera_Params.OutVT));
};

// Function REDGame.REDCamera_Battle.StopFixedCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera_Battle::eventStopFixedCamera()
{
	static UFunction* uFnStopFixedCamera = nullptr;

	if (!uFnStopFixedCamera)
	{
		uFnStopFixedCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.StopFixedCamera");
	}

	AREDCamera_Battle_eventStopFixedCamera_Params StopFixedCamera_Params;
	memset(&StopFixedCamera_Params, 0, sizeof(StopFixedCamera_Params));

	this->ProcessEvent(uFnStopFixedCamera, &StopFixedCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.FixedCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Loc                            (CPF_Parm)
// struct FRotator                Rot                            (CPF_Parm)
// float                          FOV                            (CPF_Parm)

void AREDCamera_Battle::eventFixedCamera(const struct FVector& Loc, const struct FRotator& Rot, float FOV)
{
	static UFunction* uFnFixedCamera = nullptr;

	if (!uFnFixedCamera)
	{
		uFnFixedCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.FixedCamera");
	}

	AREDCamera_Battle_eventFixedCamera_Params FixedCamera_Params;
	memset(&FixedCamera_Params, 0, sizeof(FixedCamera_Params));
	memcpy_s(&FixedCamera_Params.Loc, sizeof(FixedCamera_Params.Loc), &Loc, sizeof(Loc));
	memcpy_s(&FixedCamera_Params.Rot, sizeof(FixedCamera_Params.Rot), &Rot, sizeof(Rot));
	memcpy_s(&FixedCamera_Params.FOV, sizeof(FixedCamera_Params.FOV), &FOV, sizeof(FOV));

	this->ProcessEvent(uFnFixedCamera, &FixedCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.Reset
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera_Battle::Reset()
{
	static UFunction* uFnReset = nullptr;

	if (!uFnReset)
	{
		uFnReset = UFunction::FindFunction("Function REDGame.REDCamera_Battle.Reset");
	}

	AREDCamera_Battle_execReset_Params Reset_Params;
	memset(&Reset_Params, 0, sizeof(Reset_Params));

	this->ProcessEvent(uFnReset, &Reset_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.ResetForceUIBackDraw
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39381])
// Parameter Info:

void AREDCamera_Battle::ResetForceUIBackDraw()
{
	static UFunction* uFnResetForceUIBackDraw = nullptr;

	if (!uFnResetForceUIBackDraw)
	{
		uFnResetForceUIBackDraw = UFunction::FindFunction("Function REDGame.REDCamera_Battle.ResetForceUIBackDraw");
	}

	AREDCamera_Battle_execResetForceUIBackDraw_Params ResetForceUIBackDraw_Params;
	memset(&ResetForceUIBackDraw_Params, 0, sizeof(ResetForceUIBackDraw_Params));

	this->ProcessEvent(uFnResetForceUIBackDraw, &ResetForceUIBackDraw_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.ResetCamera
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDCamera_Battle::eventResetCamera()
{
	static UFunction* uFnResetCamera = nullptr;

	if (!uFnResetCamera)
	{
		uFnResetCamera = UFunction::FindFunction("Function REDGame.REDCamera_Battle.ResetCamera");
	}

	AREDCamera_Battle_eventResetCamera_Params ResetCamera_Params;
	memset(&ResetCamera_Params, 0, sizeof(ResetCamera_Params));

	this->ProcessEvent(uFnResetCamera, &ResetCamera_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.ResetCameraNative
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[39378])
// Parameter Info:

void AREDCamera_Battle::ResetCameraNative()
{
	static UFunction* uFnResetCameraNative = nullptr;

	if (!uFnResetCameraNative)
	{
		uFnResetCameraNative = UFunction::FindFunction("Function REDGame.REDCamera_Battle.ResetCameraNative");
	}

	AREDCamera_Battle_execResetCameraNative_Params ResetCameraNative_Params;
	memset(&ResetCameraNative_Params, 0, sizeof(ResetCameraNative_Params));

	this->ProcessEvent(uFnResetCameraNative, &ResetCameraNative_Params, nullptr);
};

// Function REDGame.REDCamera_Battle.SetPlayBattleCameraAnim
// [0x00420400] (FUNC_Native | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags) (iNative[39791])
// Parameter Info:
// class UCameraAnim*             _Anim                          (CPF_Parm)
// class AREDPawn*                _Pawn                          (CPF_Parm)
// class AREDPawn*                _LocCenterPawn                 (CPF_Parm)
// int32_t                        _BlendInFrame                  (CPF_Parm)
// int32_t                        _BlendOutFrame                 (CPF_Parm)
// uint32_t                       _bMirrorX                      (CPF_Parm)
// uint32_t                       _bIsUpdateOrthoBlend           (CPF_Parm)
// uint32_t                       _bIsOrthoBlendTransversal      (CPF_Parm)
// uint32_t                       _bUseCenterPos                 (CPF_Parm)
// struct FVector                 _Center                        (CPF_Parm)
// struct FPlayBattleCameraAnimInfo structToUpdate                 (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::SetPlayBattleCameraAnim(class UCameraAnim* _Anim, class AREDPawn* _Pawn, class AREDPawn* _LocCenterPawn, int32_t _BlendInFrame, int32_t _BlendOutFrame, bool _bMirrorX, bool _bIsUpdateOrthoBlend, bool _bIsOrthoBlendTransversal, bool _bUseCenterPos, const struct FVector& _Center, struct FPlayBattleCameraAnimInfo& structToUpdate)
{
	static UFunction* uFnSetPlayBattleCameraAnim = nullptr;

	if (!uFnSetPlayBattleCameraAnim)
	{
		uFnSetPlayBattleCameraAnim = UFunction::FindFunction("Function REDGame.REDCamera_Battle.SetPlayBattleCameraAnim");
	}

	AREDCamera_Battle_execSetPlayBattleCameraAnim_Params SetPlayBattleCameraAnim_Params;
	memset(&SetPlayBattleCameraAnim_Params, 0, sizeof(SetPlayBattleCameraAnim_Params));
	SetPlayBattleCameraAnim_Params._Anim = _Anim;
	SetPlayBattleCameraAnim_Params._Pawn = _Pawn;
	SetPlayBattleCameraAnim_Params._LocCenterPawn = _LocCenterPawn;
	memcpy_s(&SetPlayBattleCameraAnim_Params._BlendInFrame, sizeof(SetPlayBattleCameraAnim_Params._BlendInFrame), &_BlendInFrame, sizeof(_BlendInFrame));
	memcpy_s(&SetPlayBattleCameraAnim_Params._BlendOutFrame, sizeof(SetPlayBattleCameraAnim_Params._BlendOutFrame), &_BlendOutFrame, sizeof(_BlendOutFrame));
	SetPlayBattleCameraAnim_Params._bMirrorX = _bMirrorX;
	SetPlayBattleCameraAnim_Params._bIsUpdateOrthoBlend = _bIsUpdateOrthoBlend;
	SetPlayBattleCameraAnim_Params._bIsOrthoBlendTransversal = _bIsOrthoBlendTransversal;
	SetPlayBattleCameraAnim_Params._bUseCenterPos = _bUseCenterPos;
	memcpy_s(&SetPlayBattleCameraAnim_Params._Center, sizeof(SetPlayBattleCameraAnim_Params._Center), &_Center, sizeof(_Center));
	memcpy_s(&SetPlayBattleCameraAnim_Params.structToUpdate, sizeof(SetPlayBattleCameraAnim_Params.structToUpdate), &structToUpdate, sizeof(structToUpdate));

	this->ProcessEvent(uFnSetPlayBattleCameraAnim, &SetPlayBattleCameraAnim_Params, nullptr);

	memcpy_s(&structToUpdate, sizeof(structToUpdate), &SetPlayBattleCameraAnim_Params.structToUpdate, sizeof(SetPlayBattleCameraAnim_Params.structToUpdate));
};

// Function REDGame.REDCamera_Battle.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDCamera_Battle::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDCamera_Battle.DisplayDebug");
	}

	AREDCamera_Battle_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDCamera_Battle.IsOnlineRollback
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[22938])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDCamera_Battle::IsOnlineRollback()
{
	static UFunction* uFnIsOnlineRollback = nullptr;

	if (!uFnIsOnlineRollback)
	{
		uFnIsOnlineRollback = UFunction::FindFunction("Function REDGame.REDCamera_Battle.IsOnlineRollback");
	}

	AREDCamera_Battle_execIsOnlineRollback_Params IsOnlineRollback_Params;
	memset(&IsOnlineRollback_Params, 0, sizeof(IsOnlineRollback_Params));

	this->ProcessEvent(uFnIsOnlineRollback, &IsOnlineRollback_Params, nullptr);

	return IsOnlineRollback_Params.ReturnValue;
};

// Function REDGame.REDCamera_Battle.IsStopBattle
// [0x00020401] (FUNC_Final | FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[37873])
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDCamera_Battle::IsStopBattle()
{
	static UFunction* uFnIsStopBattle = nullptr;

	if (!uFnIsStopBattle)
	{
		uFnIsStopBattle = UFunction::FindFunction("Function REDGame.REDCamera_Battle.IsStopBattle");
	}

	AREDCamera_Battle_execIsStopBattle_Params IsStopBattle_Params;
	memset(&IsStopBattle_Params, 0, sizeof(IsStopBattle_Params));

	this->ProcessEvent(uFnIsStopBattle, &IsStopBattle_Params, nullptr);

	return IsStopBattle_Params.ReturnValue;
};

// Function REDGame.REDCamera_Lobby.UpdateViewTarget
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_Lobby::UpdateViewTarget(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateViewTarget = nullptr;

	if (!uFnUpdateViewTarget)
	{
		uFnUpdateViewTarget = UFunction::FindFunction("Function REDGame.REDCamera_Lobby.UpdateViewTarget");
	}

	AREDCamera_Lobby_execUpdateViewTarget_Params UpdateViewTarget_Params;
	memset(&UpdateViewTarget_Params, 0, sizeof(UpdateViewTarget_Params));
	memcpy_s(&UpdateViewTarget_Params.DeltaTime, sizeof(UpdateViewTarget_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateViewTarget, &UpdateViewTarget_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT));
};

// Function REDGame.REDCamera_Lobby.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDCamera_Lobby::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDCamera_Lobby.DisplayDebug");
	}

	AREDCamera_Lobby_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDCamera_Lobby.UpdatePawn_AfterCamera
// [0x00020400] (FUNC_Native | FUNC_Public | FUNC_AllFlags) (iNative[40803])
// Parameter Info:

void AREDCamera_Lobby::UpdatePawn_AfterCamera()
{
	static UFunction* uFnUpdatePawn_AfterCamera = nullptr;

	if (!uFnUpdatePawn_AfterCamera)
	{
		uFnUpdatePawn_AfterCamera = UFunction::FindFunction("Function REDGame.REDCamera_Lobby.UpdatePawn_AfterCamera");
	}

	AREDCamera_Lobby_execUpdatePawn_AfterCamera_Params UpdatePawn_AfterCamera_Params;
	memset(&UpdatePawn_AfterCamera_Params, 0, sizeof(UpdatePawn_AfterCamera_Params));

	this->ProcessEvent(uFnUpdatePawn_AfterCamera, &UpdatePawn_AfterCamera_Params, nullptr);
};

// Function REDGame.REDCameraShakePatterns.GetShakePatternFromName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UCameraShake*            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    SearchName                     (CPF_Parm)

class UCameraShake* UREDCameraShakePatterns::GetShakePatternFromName(const class FName& SearchName)
{
	static UFunction* uFnGetShakePatternFromName = nullptr;

	if (!uFnGetShakePatternFromName)
	{
		uFnGetShakePatternFromName = UFunction::FindFunction("Function REDGame.REDCameraShakePatterns.GetShakePatternFromName");
	}

	UREDCameraShakePatterns_execGetShakePatternFromName_Params GetShakePatternFromName_Params;
	memset(&GetShakePatternFromName_Params, 0, sizeof(GetShakePatternFromName_Params));
	memcpy_s(&GetShakePatternFromName_Params.SearchName, sizeof(GetShakePatternFromName_Params.SearchName), &SearchName, sizeof(SearchName));

	this->ProcessEvent(uFnGetShakePatternFromName, &GetShakePatternFromName_Params, nullptr);

	return GetShakePatternFromName_Params.ReturnValue;
};

// Function REDGame.Menu_DebugTop.Input_OK
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

int32_t UMenu_DebugTop::Input_OK(int32_t Player)
{
	static UFunction* uFnInput_OK = nullptr;

	if (!uFnInput_OK)
	{
		uFnInput_OK = UFunction::FindFunction("Function REDGame.Menu_DebugTop.Input_OK");
	}

	UMenu_DebugTop_execInput_OK_Params Input_OK_Params;
	memset(&Input_OK_Params, 0, sizeof(Input_OK_Params));
	memcpy_s(&Input_OK_Params.Player, sizeof(Input_OK_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnInput_OK, &Input_OK_Params, nullptr);

	return Input_OK_Params.ReturnValue;
};

// Function REDGame.Menu_DebugTop.Input_Right
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UMenu_DebugTop::Input_Right(int32_t Player)
{
	static UFunction* uFnInput_Right = nullptr;

	if (!uFnInput_Right)
	{
		uFnInput_Right = UFunction::FindFunction("Function REDGame.Menu_DebugTop.Input_Right");
	}

	UMenu_DebugTop_execInput_Right_Params Input_Right_Params;
	memset(&Input_Right_Params, 0, sizeof(Input_Right_Params));
	memcpy_s(&Input_Right_Params.Player, sizeof(Input_Right_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnInput_Right, &Input_Right_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.Input_Left
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UMenu_DebugTop::Input_Left(int32_t Player)
{
	static UFunction* uFnInput_Left = nullptr;

	if (!uFnInput_Left)
	{
		uFnInput_Left = UFunction::FindFunction("Function REDGame.Menu_DebugTop.Input_Left");
	}

	UMenu_DebugTop_execInput_Left_Params Input_Left_Params;
	memset(&Input_Left_Params, 0, sizeof(Input_Left_Params));
	memcpy_s(&Input_Left_Params.Player, sizeof(Input_Left_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnInput_Left, &Input_Left_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.Input_Down
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UMenu_DebugTop::Input_Down(int32_t Player)
{
	static UFunction* uFnInput_Down = nullptr;

	if (!uFnInput_Down)
	{
		uFnInput_Down = UFunction::FindFunction("Function REDGame.Menu_DebugTop.Input_Down");
	}

	UMenu_DebugTop_execInput_Down_Params Input_Down_Params;
	memset(&Input_Down_Params, 0, sizeof(Input_Down_Params));
	memcpy_s(&Input_Down_Params.Player, sizeof(Input_Down_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnInput_Down, &Input_Down_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.Input_Up
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UMenu_DebugTop::Input_Up(int32_t Player)
{
	static UFunction* uFnInput_Up = nullptr;

	if (!uFnInput_Up)
	{
		uFnInput_Up = UFunction::FindFunction("Function REDGame.Menu_DebugTop.Input_Up");
	}

	UMenu_DebugTop_execInput_Up_Params Input_Up_Params;
	memset(&Input_Up_Params, 0, sizeof(Input_Up_Params));
	memcpy_s(&Input_Up_Params.Player, sizeof(Input_Up_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnInput_Up, &Input_Up_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.GetResult
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)

class FString UMenu_DebugTop::GetResult()
{
	static UFunction* uFnGetResult = nullptr;

	if (!uFnGetResult)
	{
		uFnGetResult = UFunction::FindFunction("Function REDGame.Menu_DebugTop.GetResult");
	}

	UMenu_DebugTop_execGetResult_Params GetResult_Params;
	memset(&GetResult_Params, 0, sizeof(GetResult_Params));

	this->ProcessEvent(uFnGetResult, &GetResult_Params, nullptr);

	return GetResult_Params.ReturnValue;
};

// Function REDGame.Menu_DebugTop.IsFinish
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UMenu_DebugTop::IsFinish()
{
	static UFunction* uFnIsFinish = nullptr;

	if (!uFnIsFinish)
	{
		uFnIsFinish = UFunction::FindFunction("Function REDGame.Menu_DebugTop.IsFinish");
	}

	UMenu_DebugTop_execIsFinish_Params IsFinish_Params;
	memset(&IsFinish_Params, 0, sizeof(IsFinish_Params));

	this->ProcessEvent(uFnIsFinish, &IsFinish_Params, nullptr);

	return IsFinish_Params.ReturnValue;
};

// Function REDGame.Menu_DebugTop.AddItem
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ItemName                       (CPF_Parm | CPF_NeedCtorLink)

void UMenu_DebugTop::AddItem(const class FString& ItemName)
{
	static UFunction* uFnAddItem = nullptr;

	if (!uFnAddItem)
	{
		uFnAddItem = UFunction::FindFunction("Function REDGame.Menu_DebugTop.AddItem");
	}

	UMenu_DebugTop_execAddItem_Params AddItem_Params;
	memset(&AddItem_Params, 0, sizeof(AddItem_Params));
	memcpy_s(&AddItem_Params.ItemName, sizeof(AddItem_Params.ItemName), &ItemName, sizeof(ItemName));

	this->ProcessEvent(uFnAddItem, &AddItem_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UMenu_DebugTop::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.Menu_DebugTop.OnUpdate");
	}

	UMenu_DebugTop_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.TransitionScene
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  MenuName                       (CPF_Parm | CPF_NeedCtorLink)

void UMenu_DebugTop::TransitionScene(const class FString& MenuName)
{
	static UFunction* uFnTransitionScene = nullptr;

	if (!uFnTransitionScene)
	{
		uFnTransitionScene = UFunction::FindFunction("Function REDGame.Menu_DebugTop.TransitionScene");
	}

	UMenu_DebugTop_execTransitionScene_Params TransitionScene_Params;
	memset(&TransitionScene_Params, 0, sizeof(TransitionScene_Params));
	memcpy_s(&TransitionScene_Params.MenuName, sizeof(TransitionScene_Params.MenuName), &MenuName, sizeof(MenuName));

	this->ProcessEvent(uFnTransitionScene, &TransitionScene_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.InitGameData
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDGameCommon*          gameData                       (CPF_Parm)

void UMenu_DebugTop::InitGameData(class UREDGameCommon* gameData)
{
	static UFunction* uFnInitGameData = nullptr;

	if (!uFnInitGameData)
	{
		uFnInitGameData = UFunction::FindFunction("Function REDGame.Menu_DebugTop.InitGameData");
	}

	UMenu_DebugTop_execInitGameData_Params InitGameData_Params;
	memset(&InitGameData_Params, 0, sizeof(InitGameData_Params));
	InitGameData_Params.gameData = gameData;

	this->ProcessEvent(uFnInitGameData, &InitGameData_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.OnClickHandler
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FEventData              Params                         (CPF_Parm | CPF_NeedCtorLink)

void UMenu_DebugTop::OnClickHandler(const struct FEventData& Params)
{
	static UFunction* uFnOnClickHandler = nullptr;

	if (!uFnOnClickHandler)
	{
		uFnOnClickHandler = UFunction::FindFunction("Function REDGame.Menu_DebugTop.OnClickHandler");
	}

	UMenu_DebugTop_execOnClickHandler_Params OnClickHandler_Params;
	memset(&OnClickHandler_Params, 0, sizeof(OnClickHandler_Params));
	memcpy_s(&OnClickHandler_Params.Params, sizeof(OnClickHandler_Params.Params), &Params, sizeof(Params));

	this->ProcessEvent(uFnOnClickHandler, &OnClickHandler_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.SetupCallback
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ObjName                        (CPF_Parm | CPF_NeedCtorLink)

void UMenu_DebugTop::SetupCallback(const class FString& ObjName)
{
	static UFunction* uFnSetupCallback = nullptr;

	if (!uFnSetupCallback)
	{
		uFnSetupCallback = UFunction::FindFunction("Function REDGame.Menu_DebugTop.SetupCallback");
	}

	UMenu_DebugTop_execSetupCallback_Params SetupCallback_Params;
	memset(&SetupCallback_Params, 0, sizeof(SetupCallback_Params));
	memcpy_s(&SetupCallback_Params.ObjName, sizeof(SetupCallback_Params.ObjName), &ObjName, sizeof(ObjName));

	this->ProcessEvent(uFnSetupCallback, &SetupCallback_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.SetupDebugMenuButton
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FDebugMenu              menu                           (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        Num                            (CPF_Parm)

void UMenu_DebugTop::SetupDebugMenuButton(const struct FDebugMenu& menu, int32_t Num)
{
	static UFunction* uFnSetupDebugMenuButton = nullptr;

	if (!uFnSetupDebugMenuButton)
	{
		uFnSetupDebugMenuButton = UFunction::FindFunction("Function REDGame.Menu_DebugTop.SetupDebugMenuButton");
	}

	UMenu_DebugTop_execSetupDebugMenuButton_Params SetupDebugMenuButton_Params;
	memset(&SetupDebugMenuButton_Params, 0, sizeof(SetupDebugMenuButton_Params));
	memcpy_s(&SetupDebugMenuButton_Params.menu, sizeof(SetupDebugMenuButton_Params.menu), &menu, sizeof(menu));
	memcpy_s(&SetupDebugMenuButton_Params.Num, sizeof(SetupDebugMenuButton_Params.Num), &Num, sizeof(Num));

	this->ProcessEvent(uFnSetupDebugMenuButton, &SetupDebugMenuButton_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.SetupDebugMenu
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UMenu_DebugTop::SetupDebugMenu()
{
	static UFunction* uFnSetupDebugMenu = nullptr;

	if (!uFnSetupDebugMenu)
	{
		uFnSetupDebugMenu = UFunction::FindFunction("Function REDGame.Menu_DebugTop.SetupDebugMenu");
	}

	UMenu_DebugTop_execSetupDebugMenu_Params SetupDebugMenu_Params;
	memset(&SetupDebugMenu_Params, 0, sizeof(SetupDebugMenu_Params));

	this->ProcessEvent(uFnSetupDebugMenu, &SetupDebugMenu_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.ConfigFrontEnd
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UMenu_DebugTop::ConfigFrontEnd()
{
	static UFunction* uFnConfigFrontEnd = nullptr;

	if (!uFnConfigFrontEnd)
	{
		uFnConfigFrontEnd = UFunction::FindFunction("Function REDGame.Menu_DebugTop.ConfigFrontEnd");
	}

	UMenu_DebugTop_execConfigFrontEnd_Params ConfigFrontEnd_Params;
	memset(&ConfigFrontEnd_Params, 0, sizeof(ConfigFrontEnd_Params));

	this->ProcessEvent(uFnConfigFrontEnd, &ConfigFrontEnd_Params, nullptr);
};

// Function REDGame.Menu_DebugTop.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UMenu_DebugTop::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.Menu_DebugTop.OnInitialize");
	}

	UMenu_DebugTop_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDActor_BattleBackwordHUD.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDActor_BattleBackwordHUD::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDActor_BattleBackwordHUD.Tick");
	}

	AREDActor_BattleBackwordHUD_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDActor_BattleBackwordHUD.UpdateInSpecialCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPlayerController_Battle* PC                             (CPF_Parm)
// class AREDCamera_Battle*       Cam                            (CPF_Parm)

void AREDActor_BattleBackwordHUD::UpdateInSpecialCamera(class AREDPlayerController_Battle* PC, class AREDCamera_Battle* Cam)
{
	static UFunction* uFnUpdateInSpecialCamera = nullptr;

	if (!uFnUpdateInSpecialCamera)
	{
		uFnUpdateInSpecialCamera = UFunction::FindFunction("Function REDGame.REDActor_BattleBackwordHUD.UpdateInSpecialCamera");
	}

	AREDActor_BattleBackwordHUD_execUpdateInSpecialCamera_Params UpdateInSpecialCamera_Params;
	memset(&UpdateInSpecialCamera_Params, 0, sizeof(UpdateInSpecialCamera_Params));
	UpdateInSpecialCamera_Params.PC = PC;
	UpdateInSpecialCamera_Params.Cam = Cam;

	this->ProcessEvent(uFnUpdateInSpecialCamera, &UpdateInSpecialCamera_Params, nullptr);
};

// Function REDGame.REDActor_BattleBackwordHUD.UpdateInNormalCamera
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPlayerController_Battle* PC                             (CPF_Parm)
// class AREDCamera_Battle*       Cam                            (CPF_Parm)

void AREDActor_BattleBackwordHUD::UpdateInNormalCamera(class AREDPlayerController_Battle* PC, class AREDCamera_Battle* Cam)
{
	static UFunction* uFnUpdateInNormalCamera = nullptr;

	if (!uFnUpdateInNormalCamera)
	{
		uFnUpdateInNormalCamera = UFunction::FindFunction("Function REDGame.REDActor_BattleBackwordHUD.UpdateInNormalCamera");
	}

	AREDActor_BattleBackwordHUD_execUpdateInNormalCamera_Params UpdateInNormalCamera_Params;
	memset(&UpdateInNormalCamera_Params, 0, sizeof(UpdateInNormalCamera_Params));
	UpdateInNormalCamera_Params.PC = PC;
	UpdateInNormalCamera_Params.Cam = Cam;

	this->ProcessEvent(uFnUpdateInNormalCamera, &UpdateInNormalCamera_Params, nullptr);
};

// Function REDGame.REDActor_CheckPointLight.SetLightInfo
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// struct FLinearColor            NewColor                       (CPF_Parm)
// uint32_t                       bBGParticle                    (CPF_Parm)
// float                          Range                          (CPF_Parm)

void AREDActor_CheckPointLight::SetLightInfo(const struct FLinearColor& NewColor, bool bBGParticle, float Range)
{
	static UFunction* uFnSetLightInfo = nullptr;

	if (!uFnSetLightInfo)
	{
		uFnSetLightInfo = UFunction::FindFunction("Function REDGame.REDActor_CheckPointLight.SetLightInfo");
	}

	AREDActor_CheckPointLight_execSetLightInfo_Params SetLightInfo_Params;
	memset(&SetLightInfo_Params, 0, sizeof(SetLightInfo_Params));
	memcpy_s(&SetLightInfo_Params.NewColor, sizeof(SetLightInfo_Params.NewColor), &NewColor, sizeof(NewColor));
	SetLightInfo_Params.bBGParticle = bBGParticle;
	memcpy_s(&SetLightInfo_Params.Range, sizeof(SetLightInfo_Params.Range), &Range, sizeof(Range));

	this->ProcessEvent(uFnSetLightInfo, &SetLightInfo_Params, nullptr);
};

// Function REDGame.REDActor_CheckPointLight.SetupMaterial
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDActor_CheckPointLight::SetupMaterial()
{
	static UFunction* uFnSetupMaterial = nullptr;

	if (!uFnSetupMaterial)
	{
		uFnSetupMaterial = UFunction::FindFunction("Function REDGame.REDActor_CheckPointLight.SetupMaterial");
	}

	AREDActor_CheckPointLight_execSetupMaterial_Params SetupMaterial_Params;
	memset(&SetupMaterial_Params, 0, sizeof(SetupMaterial_Params));

	this->ProcessEvent(uFnSetupMaterial, &SetupMaterial_Params, nullptr);
};

// Function REDGame.REDPawnPlayerFactory.UpdateEffectMaterial
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Effect*         EffectPawn                     (CPF_Parm)
// class AREDPawn_Player*         PlayerPawn                     (CPF_Parm)
// class FName                    effName                        (CPF_Parm)

void UREDPawnPlayerFactory::UpdateEffectMaterial(class AREDPawn_Effect* EffectPawn, class AREDPawn_Player* PlayerPawn, const class FName& effName)
{
	static UFunction* uFnUpdateEffectMaterial = nullptr;

	if (!uFnUpdateEffectMaterial)
	{
		uFnUpdateEffectMaterial = UFunction::FindFunction("Function REDGame.REDPawnPlayerFactory.UpdateEffectMaterial");
	}

	UREDPawnPlayerFactory_execUpdateEffectMaterial_Params UpdateEffectMaterial_Params;
	memset(&UpdateEffectMaterial_Params, 0, sizeof(UpdateEffectMaterial_Params));
	UpdateEffectMaterial_Params.EffectPawn = EffectPawn;
	UpdateEffectMaterial_Params.PlayerPawn = PlayerPawn;
	memcpy_s(&UpdateEffectMaterial_Params.effName, sizeof(UpdateEffectMaterial_Params.effName), &effName, sizeof(effName));

	UREDPawnPlayerFactory::StaticClass()->ProcessEvent(uFnUpdateEffectMaterial, &UpdateEffectMaterial_Params, nullptr);
};

// Function REDGame.REDPawnPlayerFactory.UpdateCharaMaterial
// [0x00422002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         Pawn                           (CPF_Parm)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDPawnPlayerFactory::UpdateCharaMaterial(class AREDPawn_Player* Pawn, struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnUpdateCharaMaterial = nullptr;

	if (!uFnUpdateCharaMaterial)
	{
		uFnUpdateCharaMaterial = UFunction::FindFunction("Function REDGame.REDPawnPlayerFactory.UpdateCharaMaterial");
	}

	UREDPawnPlayerFactory_execUpdateCharaMaterial_Params UpdateCharaMaterial_Params;
	memset(&UpdateCharaMaterial_Params, 0, sizeof(UpdateCharaMaterial_Params));
	UpdateCharaMaterial_Params.Pawn = Pawn;
	memcpy_s(&UpdateCharaMaterial_Params.Info, sizeof(UpdateCharaMaterial_Params.Info), &Info, sizeof(Info));

	UREDPawnPlayerFactory::StaticClass()->ProcessEvent(uFnUpdateCharaMaterial, &UpdateCharaMaterial_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &UpdateCharaMaterial_Params.Info, sizeof(UpdateCharaMaterial_Params.Info));
};

// Function REDGame.REDPawnPlayerFactory.SpawnChara
// [0x00422002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AREDGameInfo*            Game                           (CPF_Const | CPF_Parm)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class AREDPawn_Player* UREDPawnPlayerFactory::SpawnChara(class AREDGameInfo* Game, struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnSpawnChara = nullptr;

	if (!uFnSpawnChara)
	{
		uFnSpawnChara = UFunction::FindFunction("Function REDGame.REDPawnPlayerFactory.SpawnChara");
	}

	UREDPawnPlayerFactory_execSpawnChara_Params SpawnChara_Params;
	memset(&SpawnChara_Params, 0, sizeof(SpawnChara_Params));
	SpawnChara_Params.Game = Game;
	memcpy_s(&SpawnChara_Params.Info, sizeof(SpawnChara_Params.Info), &Info, sizeof(Info));

	UREDPawnPlayerFactory::StaticClass()->ProcessEvent(uFnSpawnChara, &SpawnChara_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &SpawnChara_Params.Info, sizeof(SpawnChara_Params.Info));

	return SpawnChara_Params.ReturnValue;
};

// Function REDGame.REDPawnPlayerFactory.SpawnPlayer
// [0x00422002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AREDGameInfo*            Game                           (CPF_Const | CPF_Parm)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class AREDPawn_Player* UREDPawnPlayerFactory::SpawnPlayer(class AREDGameInfo* Game, struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnSpawnPlayer = nullptr;

	if (!uFnSpawnPlayer)
	{
		uFnSpawnPlayer = UFunction::FindFunction("Function REDGame.REDPawnPlayerFactory.SpawnPlayer");
	}

	UREDPawnPlayerFactory_execSpawnPlayer_Params SpawnPlayer_Params;
	memset(&SpawnPlayer_Params, 0, sizeof(SpawnPlayer_Params));
	SpawnPlayer_Params.Game = Game;
	memcpy_s(&SpawnPlayer_Params.Info, sizeof(SpawnPlayer_Params.Info), &Info, sizeof(Info));

	UREDPawnPlayerFactory::StaticClass()->ProcessEvent(uFnSpawnPlayer, &SpawnPlayer_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &SpawnPlayer_Params.Info, sizeof(SpawnPlayer_Params.Info));

	return SpawnPlayer_Params.ReturnValue;
};

// Function REDGame.REDPawnPlayerFactory.SetupForDrama
// [0x00022002] (FUNC_Defined | FUNC_Static | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         MainPawn                       (CPF_Parm)
// class AREDPawn_Player*         EnemyPawn                      (CPF_Parm)
// class FString                  DramaIDString                  (CPF_Parm | CPF_NeedCtorLink)
// class FString                  textLang                       (CPF_Parm | CPF_NeedCtorLink)
// class FString                  voiceLang                      (CPF_Parm | CPF_NeedCtorLink)

void UREDPawnPlayerFactory::SetupForDrama(class AREDPawn_Player* MainPawn, class AREDPawn_Player* EnemyPawn, const class FString& DramaIDString, const class FString& textLang, const class FString& voiceLang)
{
	static UFunction* uFnSetupForDrama = nullptr;

	if (!uFnSetupForDrama)
	{
		uFnSetupForDrama = UFunction::FindFunction("Function REDGame.REDPawnPlayerFactory.SetupForDrama");
	}

	UREDPawnPlayerFactory_execSetupForDrama_Params SetupForDrama_Params;
	memset(&SetupForDrama_Params, 0, sizeof(SetupForDrama_Params));
	SetupForDrama_Params.MainPawn = MainPawn;
	SetupForDrama_Params.EnemyPawn = EnemyPawn;
	memcpy_s(&SetupForDrama_Params.DramaIDString, sizeof(SetupForDrama_Params.DramaIDString), &DramaIDString, sizeof(DramaIDString));
	memcpy_s(&SetupForDrama_Params.textLang, sizeof(SetupForDrama_Params.textLang), &textLang, sizeof(textLang));
	memcpy_s(&SetupForDrama_Params.voiceLang, sizeof(SetupForDrama_Params.voiceLang), &voiceLang, sizeof(voiceLang));

	UREDPawnPlayerFactory::StaticClass()->ProcessEvent(uFnSetupForDrama, &SetupForDrama_Params, nullptr);
};

// Function REDGame.REDPawnPlayerFactory.SetupSpawnedPlayer
// [0x00446003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         NewPlayer                      (CPF_Parm)
// uint32_t                       isCharaSelect                  (CPF_OptionalParm | CPF_Parm)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDPawnPlayerFactory::SetupSpawnedPlayer(class AREDPawn_Player* NewPlayer, bool isCharaSelect, struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnSetupSpawnedPlayer = nullptr;

	if (!uFnSetupSpawnedPlayer)
	{
		uFnSetupSpawnedPlayer = UFunction::FindFunction("Function REDGame.REDPawnPlayerFactory.SetupSpawnedPlayer");
	}

	UREDPawnPlayerFactory_execSetupSpawnedPlayer_Params SetupSpawnedPlayer_Params;
	memset(&SetupSpawnedPlayer_Params, 0, sizeof(SetupSpawnedPlayer_Params));
	SetupSpawnedPlayer_Params.NewPlayer = NewPlayer;
	SetupSpawnedPlayer_Params.isCharaSelect = isCharaSelect;
	memcpy_s(&SetupSpawnedPlayer_Params.Info, sizeof(SetupSpawnedPlayer_Params.Info), &Info, sizeof(Info));

	UREDPawnPlayerFactory::StaticClass()->ProcessEvent(uFnSetupSpawnedPlayer, &SetupSpawnedPlayer_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &SetupSpawnedPlayer_Params.Info, sizeof(SetupSpawnedPlayer_Params.Info));
};

// Function REDGame.REDPawnPlayerFactory.GetPlayerClass
// [0x00442003] (FUNC_Final | FUNC_Defined | FUNC_Static | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class UClass*                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FSpawnPlayerInfo        Info                           (CPF_Const | CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

class UClass* UREDPawnPlayerFactory::GetPlayerClass(struct FSpawnPlayerInfo& Info)
{
	static UFunction* uFnGetPlayerClass = nullptr;

	if (!uFnGetPlayerClass)
	{
		uFnGetPlayerClass = UFunction::FindFunction("Function REDGame.REDPawnPlayerFactory.GetPlayerClass");
	}

	UREDPawnPlayerFactory_execGetPlayerClass_Params GetPlayerClass_Params;
	memset(&GetPlayerClass_Params, 0, sizeof(GetPlayerClass_Params));
	memcpy_s(&GetPlayerClass_Params.Info, sizeof(GetPlayerClass_Params.Info), &Info, sizeof(Info));

	UREDPawnPlayerFactory::StaticClass()->ProcessEvent(uFnGetPlayerClass, &GetPlayerClass_Params, nullptr);

	memcpy_s(&Info, sizeof(Info), &GetPlayerClass_Params.Info, sizeof(GetPlayerClass_Params.Info));

	return GetPlayerClass_Params.ReturnValue;
};

// Function REDGame.REDCameraModule.ZoomOut
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDCameraModule::ZoomOut()
{
	static UFunction* uFnZoomOut = nullptr;

	if (!uFnZoomOut)
	{
		uFnZoomOut = UFunction::FindFunction("Function REDGame.REDCameraModule.ZoomOut");
	}

	UREDCameraModule_execZoomOut_Params ZoomOut_Params;
	memset(&ZoomOut_Params, 0, sizeof(ZoomOut_Params));

	this->ProcessEvent(uFnZoomOut, &ZoomOut_Params, nullptr);
};

// Function REDGame.REDCameraModule.ZoomIn
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDCameraModule::ZoomIn()
{
	static UFunction* uFnZoomIn = nullptr;

	if (!uFnZoomIn)
	{
		uFnZoomIn = UFunction::FindFunction("Function REDGame.REDCameraModule.ZoomIn");
	}

	UREDCameraModule_execZoomIn_Params ZoomIn_Params;
	memset(&ZoomIn_Params, 0, sizeof(ZoomIn_Params));

	this->ProcessEvent(uFnZoomIn, &ZoomIn_Params, nullptr);
};

// Function REDGame.REDCameraModule.BecomeViewTarget
// [0x00020100] (FUNC_Simulated | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class AREDPlayerController*    PC                             (CPF_Parm)

void UREDCameraModule::BecomeViewTarget(class AREDPlayerController* PC)
{
	static UFunction* uFnBecomeViewTarget = nullptr;

	if (!uFnBecomeViewTarget)
	{
		uFnBecomeViewTarget = UFunction::FindFunction("Function REDGame.REDCameraModule.BecomeViewTarget");
	}

	UREDCameraModule_execBecomeViewTarget_Params BecomeViewTarget_Params;
	memset(&BecomeViewTarget_Params, 0, sizeof(BecomeViewTarget_Params));
	BecomeViewTarget_Params.PC = PC;

	this->ProcessEvent(uFnBecomeViewTarget, &BecomeViewTarget_Params, nullptr);
};

// Function REDGame.REDCameraModule.UpdateCamera
// [0x00420000] (FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)
// class AREDCamera*              CameraActor                    (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void UREDCameraModule::UpdateCamera(class APawn* P, class AREDCamera* CameraActor, float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateCamera = nullptr;

	if (!uFnUpdateCamera)
	{
		uFnUpdateCamera = UFunction::FindFunction("Function REDGame.REDCameraModule.UpdateCamera");
	}

	UREDCameraModule_execUpdateCamera_Params UpdateCamera_Params;
	memset(&UpdateCamera_Params, 0, sizeof(UpdateCamera_Params));
	UpdateCamera_Params.P = P;
	UpdateCamera_Params.CameraActor = CameraActor;
	memcpy_s(&UpdateCamera_Params.DeltaTime, sizeof(UpdateCamera_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateCamera_Params.OutVT, sizeof(UpdateCamera_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateCamera, &UpdateCamera_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateCamera_Params.OutVT, sizeof(UpdateCamera_Params.OutVT));
};

// Function REDGame.REDCameraModule.OnBecomeInActive
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDCameraModule*        NewCamera                      (CPF_Parm)

void UREDCameraModule::OnBecomeInActive(class UREDCameraModule* NewCamera)
{
	static UFunction* uFnOnBecomeInActive = nullptr;

	if (!uFnOnBecomeInActive)
	{
		uFnOnBecomeInActive = UFunction::FindFunction("Function REDGame.REDCameraModule.OnBecomeInActive");
	}

	UREDCameraModule_execOnBecomeInActive_Params OnBecomeInActive_Params;
	memset(&OnBecomeInActive_Params, 0, sizeof(OnBecomeInActive_Params));
	OnBecomeInActive_Params.NewCamera = NewCamera;

	this->ProcessEvent(uFnOnBecomeInActive, &OnBecomeInActive_Params, nullptr);
};

// Function REDGame.REDCameraModule.OnBecomeActive
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDCameraModule*        OldCamera                      (CPF_Parm)

void UREDCameraModule::OnBecomeActive(class UREDCameraModule* OldCamera)
{
	static UFunction* uFnOnBecomeActive = nullptr;

	if (!uFnOnBecomeActive)
	{
		uFnOnBecomeActive = UFunction::FindFunction("Function REDGame.REDCameraModule.OnBecomeActive");
	}

	UREDCameraModule_execOnBecomeActive_Params OnBecomeActive_Params;
	memset(&OnBecomeActive_Params, 0, sizeof(OnBecomeActive_Params));
	OnBecomeActive_Params.OldCamera = OldCamera;

	this->ProcessEvent(uFnOnBecomeActive, &OnBecomeActive_Params, nullptr);
};

// Function REDGame.REDCameraModule.Init
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDCameraModule::Init()
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function REDGame.REDCameraModule.Init");
	}

	UREDCameraModule_execInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
};

// Function REDGame.REDCameraModule_Battle.UpdateCamera
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class APawn*                   P                              (CPF_Parm)
// class AREDCamera*              CameraActor                    (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void UREDCameraModule_Battle::UpdateCamera(class APawn* P, class AREDCamera* CameraActor, float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateCamera = nullptr;

	if (!uFnUpdateCamera)
	{
		uFnUpdateCamera = UFunction::FindFunction("Function REDGame.REDCameraModule_Battle.UpdateCamera");
	}

	UREDCameraModule_Battle_execUpdateCamera_Params UpdateCamera_Params;
	memset(&UpdateCamera_Params, 0, sizeof(UpdateCamera_Params));
	UpdateCamera_Params.P = P;
	UpdateCamera_Params.CameraActor = CameraActor;
	memcpy_s(&UpdateCamera_Params.DeltaTime, sizeof(UpdateCamera_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateCamera_Params.OutVT, sizeof(UpdateCamera_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateCamera, &UpdateCamera_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateCamera_Params.OutVT, sizeof(UpdateCamera_Params.OutVT));
};

// Function REDGame.REDCameraModule_Battle.OnBecomeActive
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDCameraModule*        OldCamera                      (CPF_Parm)

void UREDCameraModule_Battle::OnBecomeActive(class UREDCameraModule* OldCamera)
{
	static UFunction* uFnOnBecomeActive = nullptr;

	if (!uFnOnBecomeActive)
	{
		uFnOnBecomeActive = UFunction::FindFunction("Function REDGame.REDCameraModule_Battle.OnBecomeActive");
	}

	UREDCameraModule_Battle_execOnBecomeActive_Params OnBecomeActive_Params;
	memset(&OnBecomeActive_Params, 0, sizeof(OnBecomeActive_Params));
	OnBecomeActive_Params.OldCamera = OldCamera;

	this->ProcessEvent(uFnOnBecomeActive, &OnBecomeActive_Params, nullptr);
};

// Function REDGame.REDCamera_InterludeDrama.UpdateViewTarget
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FTViewTarget            OutVT                          (CPF_Parm | CPF_OutParm)

void AREDCamera_InterludeDrama::UpdateViewTarget(float DeltaTime, struct FTViewTarget& OutVT)
{
	static UFunction* uFnUpdateViewTarget = nullptr;

	if (!uFnUpdateViewTarget)
	{
		uFnUpdateViewTarget = UFunction::FindFunction("Function REDGame.REDCamera_InterludeDrama.UpdateViewTarget");
	}

	AREDCamera_InterludeDrama_execUpdateViewTarget_Params UpdateViewTarget_Params;
	memset(&UpdateViewTarget_Params, 0, sizeof(UpdateViewTarget_Params));
	memcpy_s(&UpdateViewTarget_Params.DeltaTime, sizeof(UpdateViewTarget_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT), &OutVT, sizeof(OutVT));

	this->ProcessEvent(uFnUpdateViewTarget, &UpdateViewTarget_Params, nullptr);

	memcpy_s(&OutVT, sizeof(OutVT), &UpdateViewTarget_Params.OutVT, sizeof(UpdateViewTarget_Params.OutVT));
};

// Function REDGame.REDCamera_InterludeDrama.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDCamera_InterludeDrama::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDCamera_InterludeDrama.DisplayDebug");
	}

	AREDCamera_InterludeDrama_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDControlModule_Menu.UpdateRotation
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDControlModule_Menu::UpdateRotation(float DeltaTime)
{
	static UFunction* uFnUpdateRotation = nullptr;

	if (!uFnUpdateRotation)
	{
		uFnUpdateRotation = UFunction::FindFunction("Function REDGame.REDControlModule_Menu.UpdateRotation");
	}

	UREDControlModule_Menu_execUpdateRotation_Params UpdateRotation_Params;
	memset(&UpdateRotation_Params, 0, sizeof(UpdateRotation_Params));
	memcpy_s(&UpdateRotation_Params.DeltaTime, sizeof(UpdateRotation_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdateRotation, &UpdateRotation_Params, nullptr);
};

// Function REDGame.REDControlModule_Menu.ProcessMove
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// EDoubleClickDir                DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void UREDControlModule_Menu::ProcessMove(float DeltaTime, const struct FVector& newAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot)
{
	static UFunction* uFnProcessMove = nullptr;

	if (!uFnProcessMove)
	{
		uFnProcessMove = UFunction::FindFunction("Function REDGame.REDControlModule_Menu.ProcessMove");
	}

	UREDControlModule_Menu_execProcessMove_Params ProcessMove_Params;
	memset(&ProcessMove_Params, 0, sizeof(ProcessMove_Params));
	memcpy_s(&ProcessMove_Params.DeltaTime, sizeof(ProcessMove_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));
	memcpy_s(&ProcessMove_Params.newAccel, sizeof(ProcessMove_Params.newAccel), &newAccel, sizeof(newAccel));
	memcpy_s(&ProcessMove_Params.DoubleClickMove, sizeof(ProcessMove_Params.DoubleClickMove), &DoubleClickMove, sizeof(DoubleClickMove));
	memcpy_s(&ProcessMove_Params.DeltaRot, sizeof(ProcessMove_Params.DeltaRot), &DeltaRot, sizeof(DeltaRot));

	this->ProcessEvent(uFnProcessMove, &ProcessMove_Params, nullptr);
};

// Function REDGame.REDControlModule_Menu.GetBaseAimRotation
// [0x00820122] (FUNC_Defined | FUNC_Singular | FUNC_Simulated | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FRotator                ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

struct FRotator UREDControlModule_Menu::GetBaseAimRotation()
{
	static UFunction* uFnGetBaseAimRotation = nullptr;

	if (!uFnGetBaseAimRotation)
	{
		uFnGetBaseAimRotation = UFunction::FindFunction("Function REDGame.REDControlModule_Menu.GetBaseAimRotation");
	}

	UREDControlModule_Menu_execGetBaseAimRotation_Params GetBaseAimRotation_Params;
	memset(&GetBaseAimRotation_Params, 0, sizeof(GetBaseAimRotation_Params));

	this->ProcessEvent(uFnGetBaseAimRotation, &GetBaseAimRotation_Params, nullptr);

	return GetBaseAimRotation_Params.ReturnValue;
};

// Function REDGame.REDDebugCameraHUD.PostRender
// [0x00820802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void AREDDebugCameraHUD::eventPostRender()
{
	static UFunction* uFnPostRender = nullptr;

	if (!uFnPostRender)
	{
		uFnPostRender = UFunction::FindFunction("Function REDGame.REDDebugCameraHUD.PostRender");
	}

	AREDDebugCameraHUD_eventPostRender_Params PostRender_Params;
	memset(&PostRender_Params, 0, sizeof(PostRender_Params));

	this->ProcessEvent(uFnPostRender, &PostRender_Params, nullptr);
};

// Function REDGame.REDDebugCameraHUD.GetPlayer
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Id                             (CPF_Parm)

class AREDPawn_Player* AREDDebugCameraHUD::GetPlayer(int32_t Id)
{
	static UFunction* uFnGetPlayer = nullptr;

	if (!uFnGetPlayer)
	{
		uFnGetPlayer = UFunction::FindFunction("Function REDGame.REDDebugCameraHUD.GetPlayer");
	}

	AREDDebugCameraHUD_execGetPlayer_Params GetPlayer_Params;
	memset(&GetPlayer_Params, 0, sizeof(GetPlayer_Params));
	memcpy_s(&GetPlayer_Params.Id, sizeof(GetPlayer_Params.Id), &Id, sizeof(Id));

	this->ProcessEvent(uFnGetPlayer, &GetPlayer_Params, nullptr);

	return GetPlayer_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.AS_SetTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::AS_SetTimer(int32_t Time)
{
	static UFunction* uFnAS_SetTimer = nullptr;

	if (!uFnAS_SetTimer)
	{
		uFnAS_SetTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.AS_SetTimer");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execAS_SetTimer_Params AS_SetTimer_Params;
	memset(&AS_SetTimer_Params, 0, sizeof(AS_SetTimer_Params));
	memcpy_s(&AS_SetTimer_Params.Time, sizeof(AS_SetTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnAS_SetTimer, &AS_SetTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.OnDrawUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateSub_PanelUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::UpdateSub_PanelUpdate()
{
	static UFunction* uFnUpdateSub_PanelUpdate = nullptr;

	if (!uFnUpdateSub_PanelUpdate)
	{
		uFnUpdateSub_PanelUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateSub_PanelUpdate");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execUpdateSub_PanelUpdate_Params UpdateSub_PanelUpdate_Params;
	memset(&UpdateSub_PanelUpdate_Params, 0, sizeof(UpdateSub_PanelUpdate_Params));

	this->ProcessEvent(uFnUpdateSub_PanelUpdate, &UpdateSub_PanelUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.SetBGMPanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::SetBGMPanel()
{
	static UFunction* uFnSetBGMPanel = nullptr;

	if (!uFnSetBGMPanel)
	{
		uFnSetBGMPanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.SetBGMPanel");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execSetBGMPanel_Params SetBGMPanel_Params;
	memset(&SetBGMPanel_Params, 0, sizeof(SetBGMPanel_Params));

	this->ProcessEvent(uFnSetBGMPanel, &SetBGMPanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.SetStagePanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::SetStagePanel(int32_t Index)
{
	static UFunction* uFnSetStagePanel = nullptr;

	if (!uFnSetStagePanel)
	{
		uFnSetStagePanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.SetStagePanel");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execSetStagePanel_Params SetStagePanel_Params;
	memset(&SetStagePanel_Params, 0, sizeof(SetStagePanel_Params));
	memcpy_s(&SetStagePanel_Params.Index, sizeof(SetStagePanel_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnSetStagePanel, &SetStagePanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::UpdateEnd(bool bTrigger)
{
	static UFunction* uFnUpdateEnd = nullptr;

	if (!uFnUpdateEnd)
	{
		uFnUpdateEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateEnd");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execUpdateEnd_Params UpdateEnd_Params;
	memset(&UpdateEnd_Params, 0, sizeof(UpdateEnd_Params));
	UpdateEnd_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateEnd, &UpdateEnd_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateBGMSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::UpdateBGMSelect(bool bTrigger)
{
	static UFunction* uFnUpdateBGMSelect = nullptr;

	if (!uFnUpdateBGMSelect)
	{
		uFnUpdateBGMSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateBGMSelect");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execUpdateBGMSelect_Params UpdateBGMSelect_Params;
	memset(&UpdateBGMSelect_Params, 0, sizeof(UpdateBGMSelect_Params));
	UpdateBGMSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateBGMSelect, &UpdateBGMSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateStageSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::UpdateStageSelect(bool bTrigger)
{
	static UFunction* uFnUpdateStageSelect = nullptr;

	if (!uFnUpdateStageSelect)
	{
		uFnUpdateStageSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateStageSelect");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execUpdateStageSelect_Params UpdateStageSelect_Params;
	memset(&UpdateStageSelect_Params, 0, sizeof(UpdateStageSelect_Params));
	UpdateStageSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateStageSelect, &UpdateStageSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateStart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::UpdateStart(bool bTrigger)
{
	static UFunction* uFnUpdateStart = nullptr;

	if (!uFnUpdateStart)
	{
		uFnUpdateStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateStart");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execUpdateStart_Params UpdateStart_Params;
	memset(&UpdateStart_Params, 0, sizeof(UpdateStart_Params));
	UpdateStart_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateStart, &UpdateStart_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuStageSelect::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.Start");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsBGMSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuStageSelect::IsBGMSelect()
{
	static UFunction* uFnIsBGMSelect = nullptr;

	if (!uFnIsBGMSelect)
	{
		uFnIsBGMSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsBGMSelect");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execIsBGMSelect_Params IsBGMSelect_Params;
	memset(&IsBGMSelect_Params, 0, sizeof(IsBGMSelect_Params));

	this->ProcessEvent(uFnIsBGMSelect, &IsBGMSelect_Params, nullptr);

	return IsBGMSelect_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsStageSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuStageSelect::IsStageSelect()
{
	static UFunction* uFnIsStageSelect = nullptr;

	if (!uFnIsStageSelect)
	{
		uFnIsStageSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsStageSelect");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execIsStageSelect_Params IsStageSelect_Params;
	memset(&IsStageSelect_Params, 0, sizeof(IsStageSelect_Params));

	this->ProcessEvent(uFnIsStageSelect, &IsStageSelect_Params, nullptr);

	return IsStageSelect_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.GetDecideBGMID
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_BGM_ID                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BGM_ID UREDGfxMoviePlayer_MenuStageSelect::GetDecideBGMID()
{
	static UFunction* uFnGetDecideBGMID = nullptr;

	if (!uFnGetDecideBGMID)
	{
		uFnGetDecideBGMID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.GetDecideBGMID");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execGetDecideBGMID_Params GetDecideBGMID_Params;
	memset(&GetDecideBGMID_Params, 0, sizeof(GetDecideBGMID_Params));

	this->ProcessEvent(uFnGetDecideBGMID, &GetDecideBGMID_Params, nullptr);

	return static_cast<EUE_BGM_ID>(GetDecideBGMID_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.GetDecideBGID
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_BG_ID                      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BG_ID UREDGfxMoviePlayer_MenuStageSelect::GetDecideBGID()
{
	static UFunction* uFnGetDecideBGID = nullptr;

	if (!uFnGetDecideBGID)
	{
		uFnGetDecideBGID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.GetDecideBGID");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execGetDecideBGID_Params GetDecideBGID_Params;
	memset(&GetDecideBGID_Params, 0, sizeof(GetDecideBGID_Params));

	this->ProcessEvent(uFnGetDecideBGID, &GetDecideBGID_Params, nullptr);

	return static_cast<EUE_BG_ID>(GetDecideBGID_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.DecideStage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::DecideStage()
{
	static UFunction* uFnDecideStage = nullptr;

	if (!uFnDecideStage)
	{
		uFnDecideStage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.DecideStage");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execDecideStage_Params DecideStage_Params;
	memset(&DecideStage_Params, 0, sizeof(DecideStage_Params));

	this->ProcessEvent(uFnDecideStage, &DecideStage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateBGmName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::UpdateBGmName()
{
	static UFunction* uFnUpdateBGmName = nullptr;

	if (!uFnUpdateBGmName)
	{
		uFnUpdateBGmName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.UpdateBGmName");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execUpdateBGmName_Params UpdateBGmName_Params;
	memset(&UpdateBGmName_Params, 0, sizeof(UpdateBGmName_Params));

	this->ProcessEvent(uFnUpdateBGmName, &UpdateBGmName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.SetBGMCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_BGM_ID                     bgmid                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::SetBGMCursor(EUE_BGM_ID bgmid)
{
	static UFunction* uFnSetBGMCursor = nullptr;

	if (!uFnSetBGMCursor)
	{
		uFnSetBGMCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.SetBGMCursor");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execSetBGMCursor_Params SetBGMCursor_Params;
	memset(&SetBGMCursor_Params, 0, sizeof(SetBGMCursor_Params));
	memcpy_s(&SetBGMCursor_Params.bgmid, sizeof(SetBGMCursor_Params.bgmid), &bgmid, sizeof(bgmid));

	this->ProcessEvent(uFnSetBGMCursor, &SetBGMCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.SetBGCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_BG_ID                      BGID                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::SetBGCursor(EUE_BG_ID BGID)
{
	static UFunction* uFnSetBGCursor = nullptr;

	if (!uFnSetBGCursor)
	{
		uFnSetBGCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.SetBGCursor");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execSetBGCursor_Params SetBGCursor_Params;
	memset(&SetBGCursor_Params, 0, sizeof(SetBGCursor_Params));
	memcpy_s(&SetBGCursor_Params.BGID, sizeof(SetBGCursor_Params.BGID), &BGID, sizeof(BGID));

	this->ProcessEvent(uFnSetBGCursor, &SetBGCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.StopStageSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::StopStageSelect()
{
	static UFunction* uFnStopStageSelect = nullptr;

	if (!uFnStopStageSelect)
	{
		uFnStopStageSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.StopStageSelect");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execStopStageSelect_Params StopStageSelect_Params;
	memset(&StopStageSelect_Params, 0, sizeof(StopStageSelect_Params));

	this->ProcessEvent(uFnStopStageSelect, &StopStageSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.StartStageSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  _selectPlayer                  (CPF_Parm)
// int32_t                        _timeLimit                     (CPF_Parm)
// uint32_t                       _bBGMSelectable                (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageSelect::StartStageSelect(EUE_PLAYER_ID _selectPlayer, int32_t _timeLimit, bool _bBGMSelectable)
{
	static UFunction* uFnStartStageSelect = nullptr;

	if (!uFnStartStageSelect)
	{
		uFnStartStageSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.StartStageSelect");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execStartStageSelect_Params StartStageSelect_Params;
	memset(&StartStageSelect_Params, 0, sizeof(StartStageSelect_Params));
	memcpy_s(&StartStageSelect_Params._selectPlayer, sizeof(StartStageSelect_Params._selectPlayer), &_selectPlayer, sizeof(_selectPlayer));
	memcpy_s(&StartStageSelect_Params._timeLimit, sizeof(StartStageSelect_Params._timeLimit), &_timeLimit, sizeof(_timeLimit));
	StartStageSelect_Params._bBGMSelectable = _bBGMSelectable;

	this->ProcessEvent(uFnStartStageSelect, &StartStageSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsSelectableBGM
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_BGM_ID                     bgmid                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuStageSelect::IsSelectableBGM(EUE_BGM_ID bgmid)
{
	static UFunction* uFnIsSelectableBGM = nullptr;

	if (!uFnIsSelectableBGM)
	{
		uFnIsSelectableBGM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsSelectableBGM");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execIsSelectableBGM_Params IsSelectableBGM_Params;
	memset(&IsSelectableBGM_Params, 0, sizeof(IsSelectableBGM_Params));
	memcpy_s(&IsSelectableBGM_Params.bgmid, sizeof(IsSelectableBGM_Params.bgmid), &bgmid, sizeof(bgmid));

	this->ProcessEvent(uFnIsSelectableBGM, &IsSelectableBGM_Params, nullptr);

	return IsSelectableBGM_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsSelectableStage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_BG_ID                      BGID                           (CPF_Parm)

bool UREDGfxMoviePlayer_MenuStageSelect::IsSelectableStage(EUE_BG_ID BGID)
{
	static UFunction* uFnIsSelectableStage = nullptr;

	if (!uFnIsSelectableStage)
	{
		uFnIsSelectableStage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsSelectableStage");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execIsSelectableStage_Params IsSelectableStage_Params;
	memset(&IsSelectableStage_Params, 0, sizeof(IsSelectableStage_Params));
	memcpy_s(&IsSelectableStage_Params.BGID, sizeof(IsSelectableStage_Params.BGID), &BGID, sizeof(BGID));

	this->ProcessEvent(uFnIsSelectableStage, &IsSelectableStage_Params, nullptr);

	return IsSelectableStage_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.GetRandomBGM
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_BGM_ID                     ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BGM_ID UREDGfxMoviePlayer_MenuStageSelect::GetRandomBGM()
{
	static UFunction* uFnGetRandomBGM = nullptr;

	if (!uFnGetRandomBGM)
	{
		uFnGetRandomBGM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.GetRandomBGM");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execGetRandomBGM_Params GetRandomBGM_Params;
	memset(&GetRandomBGM_Params, 0, sizeof(GetRandomBGM_Params));

	this->ProcessEvent(uFnGetRandomBGM, &GetRandomBGM_Params, nullptr);

	return static_cast<EUE_BGM_ID>(GetRandomBGM_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.GetRandomStage
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_BG_ID                      ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_BG_ID UREDGfxMoviePlayer_MenuStageSelect::GetRandomStage()
{
	static UFunction* uFnGetRandomStage = nullptr;

	if (!uFnGetRandomStage)
	{
		uFnGetRandomStage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.GetRandomStage");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execGetRandomStage_Params GetRandomStage_Params;
	memset(&GetRandomStage_Params, 0, sizeof(GetRandomStage_Params));

	this->ProcessEvent(uFnGetRandomStage, &GetRandomStage_Params, nullptr);

	return static_cast<EUE_BG_ID>(GetRandomStage_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsRunning
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuStageSelect::IsRunning()
{
	static UFunction* uFnIsRunning = nullptr;

	if (!uFnIsRunning)
	{
		uFnIsRunning = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.IsRunning");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execIsRunning_Params IsRunning_Params;
	memset(&IsRunning_Params, 0, sizeof(IsRunning_Params));

	this->ProcessEvent(uFnIsRunning, &IsRunning_Params, nullptr);

	return IsRunning_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.CommonSE_Cursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::CommonSE_Cursor()
{
	static UFunction* uFnCommonSE_Cursor = nullptr;

	if (!uFnCommonSE_Cursor)
	{
		uFnCommonSE_Cursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.CommonSE_Cursor");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execCommonSE_Cursor_Params CommonSE_Cursor_Params;
	memset(&CommonSE_Cursor_Params, 0, sizeof(CommonSE_Cursor_Params));

	this->ProcessEvent(uFnCommonSE_Cursor, &CommonSE_Cursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageSelect.CommonSE_OK
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageSelect::CommonSE_OK()
{
	static UFunction* uFnCommonSE_OK = nullptr;

	if (!uFnCommonSE_OK)
	{
		uFnCommonSE_OK = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageSelect.CommonSE_OK");
	}

	UREDGfxMoviePlayer_MenuStageSelect_execCommonSE_OK_Params CommonSE_OK_Params;
	memset(&CommonSE_OK_Params, 0, sizeof(CommonSE_OK_Params));

	this->ProcessEvent(uFnCommonSE_OK, &CommonSE_OK_Params, nullptr);
};

// Function REDGame.REDGameCommon_Scene.GetNextSceneCommand
// [0x00026002] (FUNC_Defined | FUNC_Static | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_SCENE_ID                   Id                             (CPF_Parm)
// class FString                  bgString                       (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       forSeamlessTravel              (CPF_OptionalParm | CPF_Parm)

class FString UREDGameCommon_Scene::GetNextSceneCommand(EUE_SCENE_ID Id, const class FString& bgString, bool forSeamlessTravel)
{
	static UFunction* uFnGetNextSceneCommand = nullptr;

	if (!uFnGetNextSceneCommand)
	{
		uFnGetNextSceneCommand = UFunction::FindFunction("Function REDGame.REDGameCommon_Scene.GetNextSceneCommand");
	}

	UREDGameCommon_Scene_execGetNextSceneCommand_Params GetNextSceneCommand_Params;
	memset(&GetNextSceneCommand_Params, 0, sizeof(GetNextSceneCommand_Params));
	memcpy_s(&GetNextSceneCommand_Params.Id, sizeof(GetNextSceneCommand_Params.Id), &Id, sizeof(Id));
	memcpy_s(&GetNextSceneCommand_Params.bgString, sizeof(GetNextSceneCommand_Params.bgString), &bgString, sizeof(bgString));
	GetNextSceneCommand_Params.forSeamlessTravel = forSeamlessTravel;

	UREDGameCommon_Scene::StaticClass()->ProcessEvent(uFnGetNextSceneCommand, &GetNextSceneCommand_Params, nullptr);

	return GetNextSceneCommand_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_ActionSnap.PreBeginPlay
// [0x00020902] (FUNC_Defined | FUNC_Simulated | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_ActionSnap::eventPreBeginPlay()
{
	static UFunction* uFnPreBeginPlay = nullptr;

	if (!uFnPreBeginPlay)
	{
		uFnPreBeginPlay = UFunction::FindFunction("Function REDGame.REDGameInfo_ActionSnap.PreBeginPlay");
	}

	AREDGameInfo_ActionSnap_eventPreBeginPlay_Params PreBeginPlay_Params;
	memset(&PreBeginPlay_Params, 0, sizeof(PreBeginPlay_Params));

	this->ProcessEvent(uFnPreBeginPlay, &PreBeginPlay_Params, nullptr);
};

// Function REDGame.REDPlayerController_ActionSnap.DisplayDebug
// [0x00420102] (FUNC_Defined | FUNC_Simulated | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm | CPF_OutParm)
// float                          out_YPos                       (CPF_Parm | CPF_OutParm)

void AREDPlayerController_ActionSnap::DisplayDebug(class AHUD* HUD, float& out_YL, float& out_YPos)
{
	static UFunction* uFnDisplayDebug = nullptr;

	if (!uFnDisplayDebug)
	{
		uFnDisplayDebug = UFunction::FindFunction("Function REDGame.REDPlayerController_ActionSnap.DisplayDebug");
	}

	AREDPlayerController_ActionSnap_execDisplayDebug_Params DisplayDebug_Params;
	memset(&DisplayDebug_Params, 0, sizeof(DisplayDebug_Params));
	DisplayDebug_Params.HUD = HUD;
	memcpy_s(&DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL), &out_YL, sizeof(out_YL));
	memcpy_s(&DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos), &out_YPos, sizeof(out_YPos));

	this->ProcessEvent(uFnDisplayDebug, &DisplayDebug_Params, nullptr);

	memcpy_s(&out_YL, sizeof(out_YL), &DisplayDebug_Params.out_YL, sizeof(DisplayDebug_Params.out_YL));
	memcpy_s(&out_YPos, sizeof(out_YPos), &DisplayDebug_Params.out_YPos, sizeof(DisplayDebug_Params.out_YPos));
};

// Function REDGame.REDPlayerController_ActionSnap.ASStop
// [0x00020202] (FUNC_Defined | FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPlayerController_ActionSnap::ASStop()
{
	static UFunction* uFnASStop = nullptr;

	if (!uFnASStop)
	{
		uFnASStop = UFunction::FindFunction("Function REDGame.REDPlayerController_ActionSnap.ASStop");
	}

	AREDPlayerController_ActionSnap_execASStop_Params ASStop_Params;
	memset(&ASStop_Params, 0, sizeof(ASStop_Params));

	this->ProcessEvent(uFnASStop, &ASStop_Params, nullptr);
};

// Function REDGame.REDPlayerController_ActionSnap.ASStart
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    chara                          (CPF_Parm)
// class FName                    anime                          (CPF_OptionalParm | CPF_Parm)
// int32_t                        InColorID                      (CPF_OptionalParm | CPF_Parm)
// int32_t                        InMeshID                       (CPF_OptionalParm | CPF_Parm)

void AREDPlayerController_ActionSnap::ASStart(const class FName& chara, const class FName& anime, int32_t InColorID, int32_t InMeshID)
{
	static UFunction* uFnASStart = nullptr;

	if (!uFnASStart)
	{
		uFnASStart = UFunction::FindFunction("Function REDGame.REDPlayerController_ActionSnap.ASStart");
	}

	AREDPlayerController_ActionSnap_execASStart_Params ASStart_Params;
	memset(&ASStart_Params, 0, sizeof(ASStart_Params));
	memcpy_s(&ASStart_Params.chara, sizeof(ASStart_Params.chara), &chara, sizeof(chara));
	memcpy_s(&ASStart_Params.anime, sizeof(ASStart_Params.anime), &anime, sizeof(anime));
	memcpy_s(&ASStart_Params.InColorID, sizeof(ASStart_Params.InColorID), &InColorID, sizeof(InColorID));
	memcpy_s(&ASStart_Params.InMeshID, sizeof(ASStart_Params.InMeshID), &InMeshID, sizeof(InMeshID));

	this->ProcessEvent(uFnASStart, &ASStart_Params, nullptr);
};

// Function REDGame.REDPlayerController_ActionSnap.ASStartEf
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    chara                          (CPF_Parm)
// class FName                    EffectName                     (CPF_OptionalParm | CPF_Parm)
// class FName                    animeName                      (CPF_OptionalParm | CPF_Parm)
// int32_t                        InColorID                      (CPF_OptionalParm | CPF_Parm)
// int32_t                        InMeshID                       (CPF_OptionalParm | CPF_Parm)

void AREDPlayerController_ActionSnap::ASStartEf(const class FName& chara, const class FName& EffectName, const class FName& animeName, int32_t InColorID, int32_t InMeshID)
{
	static UFunction* uFnASStartEf = nullptr;

	if (!uFnASStartEf)
	{
		uFnASStartEf = UFunction::FindFunction("Function REDGame.REDPlayerController_ActionSnap.ASStartEf");
	}

	AREDPlayerController_ActionSnap_execASStartEf_Params ASStartEf_Params;
	memset(&ASStartEf_Params, 0, sizeof(ASStartEf_Params));
	memcpy_s(&ASStartEf_Params.chara, sizeof(ASStartEf_Params.chara), &chara, sizeof(chara));
	memcpy_s(&ASStartEf_Params.EffectName, sizeof(ASStartEf_Params.EffectName), &EffectName, sizeof(EffectName));
	memcpy_s(&ASStartEf_Params.animeName, sizeof(ASStartEf_Params.animeName), &animeName, sizeof(animeName));
	memcpy_s(&ASStartEf_Params.InColorID, sizeof(ASStartEf_Params.InColorID), &InColorID, sizeof(InColorID));
	memcpy_s(&ASStartEf_Params.InMeshID, sizeof(ASStartEf_Params.InMeshID), &InMeshID, sizeof(InMeshID));

	this->ProcessEvent(uFnASStartEf, &ASStartEf_Params, nullptr);
};

// Function REDGame.REDPlayerController_ActionSnap.SetAnime
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    anime                          (CPF_Parm)

void AREDPlayerController_ActionSnap::SetAnime(const class FName& anime)
{
	static UFunction* uFnSetAnime = nullptr;

	if (!uFnSetAnime)
	{
		uFnSetAnime = UFunction::FindFunction("Function REDGame.REDPlayerController_ActionSnap.SetAnime");
	}

	AREDPlayerController_ActionSnap_execSetAnime_Params SetAnime_Params;
	memset(&SetAnime_Params, 0, sizeof(SetAnime_Params));
	memcpy_s(&SetAnime_Params.anime, sizeof(SetAnime_Params.anime), &anime, sizeof(anime));

	this->ProcessEvent(uFnSetAnime, &SetAnime_Params, nullptr);
};

// Function REDGame.REDPlayerController_ActionSnap.ASChara
// [0x00024202] (FUNC_Defined | FUNC_Exec | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FName                    InCharaName                    (CPF_Parm)
// uint32_t                       _EffectMode                    (CPF_OptionalParm | CPF_Parm)
// int32_t                        InColorID                      (CPF_OptionalParm | CPF_Parm)
// int32_t                        InMeshID                       (CPF_OptionalParm | CPF_Parm)

void AREDPlayerController_ActionSnap::ASChara(const class FName& InCharaName, bool _EffectMode, int32_t InColorID, int32_t InMeshID)
{
	static UFunction* uFnASChara = nullptr;

	if (!uFnASChara)
	{
		uFnASChara = UFunction::FindFunction("Function REDGame.REDPlayerController_ActionSnap.ASChara");
	}

	AREDPlayerController_ActionSnap_execASChara_Params ASChara_Params;
	memset(&ASChara_Params, 0, sizeof(ASChara_Params));
	memcpy_s(&ASChara_Params.InCharaName, sizeof(ASChara_Params.InCharaName), &InCharaName, sizeof(InCharaName));
	ASChara_Params._EffectMode = _EffectMode;
	memcpy_s(&ASChara_Params.InColorID, sizeof(ASChara_Params.InColorID), &InColorID, sizeof(InColorID));
	memcpy_s(&ASChara_Params.InMeshID, sizeof(ASChara_Params.InMeshID), &InMeshID, sizeof(InMeshID));

	this->ProcessEvent(uFnASChara, &ASChara_Params, nullptr);
};

// Function REDGame.REDPlayerController_ActionSnap.LoadAndSpawnChara
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class AREDPawn_Player*         ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        InMeshID                       (CPF_Parm)
// int32_t                        InColorID                      (CPF_Parm)

class AREDPawn_Player* AREDPlayerController_ActionSnap::LoadAndSpawnChara(const class FString& CharaID, int32_t InMeshID, int32_t InColorID)
{
	static UFunction* uFnLoadAndSpawnChara = nullptr;

	if (!uFnLoadAndSpawnChara)
	{
		uFnLoadAndSpawnChara = UFunction::FindFunction("Function REDGame.REDPlayerController_ActionSnap.LoadAndSpawnChara");
	}

	AREDPlayerController_ActionSnap_execLoadAndSpawnChara_Params LoadAndSpawnChara_Params;
	memset(&LoadAndSpawnChara_Params, 0, sizeof(LoadAndSpawnChara_Params));
	memcpy_s(&LoadAndSpawnChara_Params.CharaID, sizeof(LoadAndSpawnChara_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&LoadAndSpawnChara_Params.InMeshID, sizeof(LoadAndSpawnChara_Params.InMeshID), &InMeshID, sizeof(InMeshID));
	memcpy_s(&LoadAndSpawnChara_Params.InColorID, sizeof(LoadAndSpawnChara_Params.InColorID), &InColorID, sizeof(InColorID));

	this->ProcessEvent(uFnLoadAndSpawnChara, &LoadAndSpawnChara_Params, nullptr);

	return LoadAndSpawnChara_Params.ReturnValue;
};

// Function REDGame.REDPreBattleEventManager.IsRequestEventSkip
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPreBattleEventManager::IsRequestEventSkip()
{
	static UFunction* uFnIsRequestEventSkip = nullptr;

	if (!uFnIsRequestEventSkip)
	{
		uFnIsRequestEventSkip = UFunction::FindFunction("Function REDGame.REDPreBattleEventManager.IsRequestEventSkip");
	}

	AREDPreBattleEventManager_execIsRequestEventSkip_Params IsRequestEventSkip_Params;
	memset(&IsRequestEventSkip_Params, 0, sizeof(IsRequestEventSkip_Params));

	this->ProcessEvent(uFnIsRequestEventSkip, &IsRequestEventSkip_Params, nullptr);

	return IsRequestEventSkip_Params.ReturnValue;
};

// Function REDGame.REDPreBattleEventManager.RequestEventSkip
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPreBattleEventManager::RequestEventSkip()
{
	static UFunction* uFnRequestEventSkip = nullptr;

	if (!uFnRequestEventSkip)
	{
		uFnRequestEventSkip = UFunction::FindFunction("Function REDGame.REDPreBattleEventManager.RequestEventSkip");
	}

	AREDPreBattleEventManager_execRequestEventSkip_Params RequestEventSkip_Params;
	memset(&RequestEventSkip_Params, 0, sizeof(RequestEventSkip_Params));

	this->ProcessEvent(uFnRequestEventSkip, &RequestEventSkip_Params, nullptr);
};

// Function REDGame.REDPreBattleEventManager.IsBGEventFinish
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPreBattleEventManager::IsBGEventFinish()
{
	static UFunction* uFnIsBGEventFinish = nullptr;

	if (!uFnIsBGEventFinish)
	{
		uFnIsBGEventFinish = UFunction::FindFunction("Function REDGame.REDPreBattleEventManager.IsBGEventFinish");
	}

	AREDPreBattleEventManager_execIsBGEventFinish_Params IsBGEventFinish_Params;
	memset(&IsBGEventFinish_Params, 0, sizeof(IsBGEventFinish_Params));

	this->ProcessEvent(uFnIsBGEventFinish, &IsBGEventFinish_Params, nullptr);

	return IsBGEventFinish_Params.ReturnValue;
};

// Function REDGame.REDPreBattleEventManager.BGEventFinish
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPreBattleEventManager::BGEventFinish()
{
	static UFunction* uFnBGEventFinish = nullptr;

	if (!uFnBGEventFinish)
	{
		uFnBGEventFinish = UFunction::FindFunction("Function REDGame.REDPreBattleEventManager.BGEventFinish");
	}

	AREDPreBattleEventManager_execBGEventFinish_Params BGEventFinish_Params;
	memset(&BGEventFinish_Params, 0, sizeof(BGEventFinish_Params));

	this->ProcessEvent(uFnBGEventFinish, &BGEventFinish_Params, nullptr);
};

// Function REDGame.REDPreBattleEventManager.BGEventStart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPreBattleEventManager::BGEventStart()
{
	static UFunction* uFnBGEventStart = nullptr;

	if (!uFnBGEventStart)
	{
		uFnBGEventStart = UFunction::FindFunction("Function REDGame.REDPreBattleEventManager.BGEventStart");
	}

	AREDPreBattleEventManager_execBGEventStart_Params BGEventStart_Params;
	memset(&BGEventStart_Params, 0, sizeof(BGEventStart_Params));

	this->ProcessEvent(uFnBGEventStart, &BGEventStart_Params, nullptr);

	return BGEventStart_Params.ReturnValue;
};

// Function REDGame.REDPreBattleEventManager.IsEntryEventFinish
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool AREDPreBattleEventManager::IsEntryEventFinish()
{
	static UFunction* uFnIsEntryEventFinish = nullptr;

	if (!uFnIsEntryEventFinish)
	{
		uFnIsEntryEventFinish = UFunction::FindFunction("Function REDGame.REDPreBattleEventManager.IsEntryEventFinish");
	}

	AREDPreBattleEventManager_execIsEntryEventFinish_Params IsEntryEventFinish_Params;
	memset(&IsEntryEventFinish_Params, 0, sizeof(IsEntryEventFinish_Params));

	this->ProcessEvent(uFnIsEntryEventFinish, &IsEntryEventFinish_Params, nullptr);

	return IsEntryEventFinish_Params.ReturnValue;
};

// Function REDGame.REDPreBattleEventManager.EntryEventFinish
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDPreBattleEventManager::EntryEventFinish()
{
	static UFunction* uFnEntryEventFinish = nullptr;

	if (!uFnEntryEventFinish)
	{
		uFnEntryEventFinish = UFunction::FindFunction("Function REDGame.REDPreBattleEventManager.EntryEventFinish");
	}

	AREDPreBattleEventManager_execEntryEventFinish_Params EntryEventFinish_Params;
	memset(&EntryEventFinish_Params, 0, sizeof(EntryEventFinish_Params));

	this->ProcessEvent(uFnEntryEventFinish, &EntryEventFinish_Params, nullptr);
};

// Function REDGame.REDPreBattleEventManager.EntryEventStart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class APawn*                   PlayerPawn                     (CPF_Parm)
// class APawn*                   EnemyPawn                      (CPF_Parm)

bool AREDPreBattleEventManager::EntryEventStart(class APawn* PlayerPawn, class APawn* EnemyPawn)
{
	static UFunction* uFnEntryEventStart = nullptr;

	if (!uFnEntryEventStart)
	{
		uFnEntryEventStart = UFunction::FindFunction("Function REDGame.REDPreBattleEventManager.EntryEventStart");
	}

	AREDPreBattleEventManager_execEntryEventStart_Params EntryEventStart_Params;
	memset(&EntryEventStart_Params, 0, sizeof(EntryEventStart_Params));
	EntryEventStart_Params.PlayerPawn = PlayerPawn;
	EntryEventStart_Params.EnemyPawn = EnemyPawn;

	this->ProcessEvent(uFnEntryEventStart, &EntryEventStart_Params, nullptr);

	return EntryEventStart_Params.ReturnValue;
};

// Function REDGame.REDGameInfo_Briefing.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Briefing::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Briefing.InitGame");
	}

	AREDGameInfo_Briefing_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_CharaSelect.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_CharaSelect::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_CharaSelect.InitGame");
	}

	AREDGameInfo_CharaSelect_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDLobbyCollisionActor_Floor.GetFloorInfo
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector                 Pos1                           (CPF_Parm | CPF_OutParm)
// struct FVector                 Pos2                           (CPF_Parm | CPF_OutParm)
// struct FVector                 pos3                           (CPF_Parm | CPF_OutParm)
// struct FVector                 pos4                           (CPF_Parm | CPF_OutParm)
// float                          Radius                         (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Floor::GetFloorInfo(struct FVector& Pos1, struct FVector& Pos2, struct FVector& pos3, struct FVector& pos4, float& Radius)
{
	static UFunction* uFnGetFloorInfo = nullptr;

	if (!uFnGetFloorInfo)
	{
		uFnGetFloorInfo = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Floor.GetFloorInfo");
	}

	AREDLobbyCollisionActor_Floor_execGetFloorInfo_Params GetFloorInfo_Params;
	memset(&GetFloorInfo_Params, 0, sizeof(GetFloorInfo_Params));
	memcpy_s(&GetFloorInfo_Params.Pos1, sizeof(GetFloorInfo_Params.Pos1), &Pos1, sizeof(Pos1));
	memcpy_s(&GetFloorInfo_Params.Pos2, sizeof(GetFloorInfo_Params.Pos2), &Pos2, sizeof(Pos2));
	memcpy_s(&GetFloorInfo_Params.pos3, sizeof(GetFloorInfo_Params.pos3), &pos3, sizeof(pos3));
	memcpy_s(&GetFloorInfo_Params.pos4, sizeof(GetFloorInfo_Params.pos4), &pos4, sizeof(pos4));
	memcpy_s(&GetFloorInfo_Params.Radius, sizeof(GetFloorInfo_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnGetFloorInfo, &GetFloorInfo_Params, nullptr);

	memcpy_s(&Pos1, sizeof(Pos1), &GetFloorInfo_Params.Pos1, sizeof(GetFloorInfo_Params.Pos1));
	memcpy_s(&Pos2, sizeof(Pos2), &GetFloorInfo_Params.Pos2, sizeof(GetFloorInfo_Params.Pos2));
	memcpy_s(&pos3, sizeof(pos3), &GetFloorInfo_Params.pos3, sizeof(GetFloorInfo_Params.pos3));
	memcpy_s(&pos4, sizeof(pos4), &GetFloorInfo_Params.pos4, sizeof(GetFloorInfo_Params.pos4));
	memcpy_s(&Radius, sizeof(Radius), &GetFloorInfo_Params.Radius, sizeof(GetFloorInfo_Params.Radius));
};

// Function REDGame.REDLobbyCollisionActor_Rect.GetRectPos
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               Pos1                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               Pos2                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               pos3                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               pos4                           (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Rect::GetRectPos(struct FVector2D& Pos1, struct FVector2D& Pos2, struct FVector2D& pos3, struct FVector2D& pos4)
{
	static UFunction* uFnGetRectPos = nullptr;

	if (!uFnGetRectPos)
	{
		uFnGetRectPos = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Rect.GetRectPos");
	}

	AREDLobbyCollisionActor_Rect_execGetRectPos_Params GetRectPos_Params;
	memset(&GetRectPos_Params, 0, sizeof(GetRectPos_Params));
	memcpy_s(&GetRectPos_Params.Pos1, sizeof(GetRectPos_Params.Pos1), &Pos1, sizeof(Pos1));
	memcpy_s(&GetRectPos_Params.Pos2, sizeof(GetRectPos_Params.Pos2), &Pos2, sizeof(Pos2));
	memcpy_s(&GetRectPos_Params.pos3, sizeof(GetRectPos_Params.pos3), &pos3, sizeof(pos3));
	memcpy_s(&GetRectPos_Params.pos4, sizeof(GetRectPos_Params.pos4), &pos4, sizeof(pos4));

	this->ProcessEvent(uFnGetRectPos, &GetRectPos_Params, nullptr);

	memcpy_s(&Pos1, sizeof(Pos1), &GetRectPos_Params.Pos1, sizeof(GetRectPos_Params.Pos1));
	memcpy_s(&Pos2, sizeof(Pos2), &GetRectPos_Params.Pos2, sizeof(GetRectPos_Params.Pos2));
	memcpy_s(&pos3, sizeof(pos3), &GetRectPos_Params.pos3, sizeof(GetRectPos_Params.pos3));
	memcpy_s(&pos4, sizeof(pos4), &GetRectPos_Params.pos4, sizeof(GetRectPos_Params.pos4));
};

// Function REDGame.REDLobbyCollisionActor_Rect.CalcOffsetPos
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               offset                         (CPF_Parm)
// struct FVector2D               pos                            (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Rect::CalcOffsetPos(const struct FVector2D& offset, struct FVector2D& pos)
{
	static UFunction* uFnCalcOffsetPos = nullptr;

	if (!uFnCalcOffsetPos)
	{
		uFnCalcOffsetPos = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Rect.CalcOffsetPos");
	}

	AREDLobbyCollisionActor_Rect_execCalcOffsetPos_Params CalcOffsetPos_Params;
	memset(&CalcOffsetPos_Params, 0, sizeof(CalcOffsetPos_Params));
	memcpy_s(&CalcOffsetPos_Params.offset, sizeof(CalcOffsetPos_Params.offset), &offset, sizeof(offset));
	memcpy_s(&CalcOffsetPos_Params.pos, sizeof(CalcOffsetPos_Params.pos), &pos, sizeof(pos));

	this->ProcessEvent(uFnCalcOffsetPos, &CalcOffsetPos_Params, nullptr);

	memcpy_s(&pos, sizeof(pos), &CalcOffsetPos_Params.pos, sizeof(CalcOffsetPos_Params.pos));
};

// Function REDGame.REDLobbyCollisionActor_Circle.GetLobbyEvent
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FLobby_Collision_Event  EventData                      (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Circle::GetLobbyEvent(struct FLobby_Collision_Event& EventData)
{
	static UFunction* uFnGetLobbyEvent = nullptr;

	if (!uFnGetLobbyEvent)
	{
		uFnGetLobbyEvent = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Circle.GetLobbyEvent");
	}

	AREDLobbyCollisionActor_Circle_execGetLobbyEvent_Params GetLobbyEvent_Params;
	memset(&GetLobbyEvent_Params, 0, sizeof(GetLobbyEvent_Params));
	memcpy_s(&GetLobbyEvent_Params.EventData, sizeof(GetLobbyEvent_Params.EventData), &EventData, sizeof(EventData));

	this->ProcessEvent(uFnGetLobbyEvent, &GetLobbyEvent_Params, nullptr);

	memcpy_s(&EventData, sizeof(EventData), &GetLobbyEvent_Params.EventData, sizeof(GetLobbyEvent_Params.EventData));
};

// Function REDGame.REDLobbyCollisionActor_Circle.GetPosAndRadius
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               pos                            (CPF_Parm | CPF_OutParm)
// float                          Radius                         (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Circle::GetPosAndRadius(struct FVector2D& pos, float& Radius)
{
	static UFunction* uFnGetPosAndRadius = nullptr;

	if (!uFnGetPosAndRadius)
	{
		uFnGetPosAndRadius = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Circle.GetPosAndRadius");
	}

	AREDLobbyCollisionActor_Circle_execGetPosAndRadius_Params GetPosAndRadius_Params;
	memset(&GetPosAndRadius_Params, 0, sizeof(GetPosAndRadius_Params));
	memcpy_s(&GetPosAndRadius_Params.pos, sizeof(GetPosAndRadius_Params.pos), &pos, sizeof(pos));
	memcpy_s(&GetPosAndRadius_Params.Radius, sizeof(GetPosAndRadius_Params.Radius), &Radius, sizeof(Radius));

	this->ProcessEvent(uFnGetPosAndRadius, &GetPosAndRadius_Params, nullptr);

	memcpy_s(&pos, sizeof(pos), &GetPosAndRadius_Params.pos, sizeof(GetPosAndRadius_Params.pos));
	memcpy_s(&Radius, sizeof(Radius), &GetPosAndRadius_Params.Radius, sizeof(GetPosAndRadius_Params.Radius));
};

// Function REDGame.REDLobbyCollisionActor_Kyoutai.GetKyoutaiInfo
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FLobby_KyoutaiInfo      info1P                         (CPF_Parm | CPF_OutParm)
// struct FLobby_KyoutaiInfo      info2P                         (CPF_Parm | CPF_OutParm)
// struct FLobby_WaitLineInfo     WaitLineInfo                   (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Kyoutai::GetKyoutaiInfo(struct FLobby_KyoutaiInfo& info1P, struct FLobby_KyoutaiInfo& info2P, struct FLobby_WaitLineInfo& WaitLineInfo)
{
	static UFunction* uFnGetKyoutaiInfo = nullptr;

	if (!uFnGetKyoutaiInfo)
	{
		uFnGetKyoutaiInfo = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Kyoutai.GetKyoutaiInfo");
	}

	AREDLobbyCollisionActor_Kyoutai_execGetKyoutaiInfo_Params GetKyoutaiInfo_Params;
	memset(&GetKyoutaiInfo_Params, 0, sizeof(GetKyoutaiInfo_Params));
	memcpy_s(&GetKyoutaiInfo_Params.info1P, sizeof(GetKyoutaiInfo_Params.info1P), &info1P, sizeof(info1P));
	memcpy_s(&GetKyoutaiInfo_Params.info2P, sizeof(GetKyoutaiInfo_Params.info2P), &info2P, sizeof(info2P));
	memcpy_s(&GetKyoutaiInfo_Params.WaitLineInfo, sizeof(GetKyoutaiInfo_Params.WaitLineInfo), &WaitLineInfo, sizeof(WaitLineInfo));

	this->ProcessEvent(uFnGetKyoutaiInfo, &GetKyoutaiInfo_Params, nullptr);

	memcpy_s(&info1P, sizeof(info1P), &GetKyoutaiInfo_Params.info1P, sizeof(GetKyoutaiInfo_Params.info1P));
	memcpy_s(&info2P, sizeof(info2P), &GetKyoutaiInfo_Params.info2P, sizeof(GetKyoutaiInfo_Params.info2P));
	memcpy_s(&WaitLineInfo, sizeof(WaitLineInfo), &GetKyoutaiInfo_Params.WaitLineInfo, sizeof(GetKyoutaiInfo_Params.WaitLineInfo));
};

// Function REDGame.REDLobbyCollisionActor_Kyoutai.GetLobbyEvent
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// int32_t                        kyoutaiID                      (CPF_Parm)
// class TArray<struct FLobby_Collision_Event> CollisionList                  (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDLobbyCollisionActor_Kyoutai::GetLobbyEvent(int32_t kyoutaiID, class TArray<struct FLobby_Collision_Event>& CollisionList)
{
	static UFunction* uFnGetLobbyEvent = nullptr;

	if (!uFnGetLobbyEvent)
	{
		uFnGetLobbyEvent = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Kyoutai.GetLobbyEvent");
	}

	AREDLobbyCollisionActor_Kyoutai_execGetLobbyEvent_Params GetLobbyEvent_Params;
	memset(&GetLobbyEvent_Params, 0, sizeof(GetLobbyEvent_Params));
	memcpy_s(&GetLobbyEvent_Params.kyoutaiID, sizeof(GetLobbyEvent_Params.kyoutaiID), &kyoutaiID, sizeof(kyoutaiID));
	memcpy_s(&GetLobbyEvent_Params.CollisionList, sizeof(GetLobbyEvent_Params.CollisionList), &CollisionList, sizeof(CollisionList));

	this->ProcessEvent(uFnGetLobbyEvent, &GetLobbyEvent_Params, nullptr);

	memcpy_s(&CollisionList, sizeof(CollisionList), &GetLobbyEvent_Params.CollisionList, sizeof(GetLobbyEvent_Params.CollisionList));
};

// Function REDGame.REDLobbyCollisionActor_Kyoutai.GetRectPos
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               Pos1                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               Pos2                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               pos3                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               pos4                           (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Kyoutai::GetRectPos(struct FVector2D& Pos1, struct FVector2D& Pos2, struct FVector2D& pos3, struct FVector2D& pos4)
{
	static UFunction* uFnGetRectPos = nullptr;

	if (!uFnGetRectPos)
	{
		uFnGetRectPos = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Kyoutai.GetRectPos");
	}

	AREDLobbyCollisionActor_Kyoutai_execGetRectPos_Params GetRectPos_Params;
	memset(&GetRectPos_Params, 0, sizeof(GetRectPos_Params));
	memcpy_s(&GetRectPos_Params.Pos1, sizeof(GetRectPos_Params.Pos1), &Pos1, sizeof(Pos1));
	memcpy_s(&GetRectPos_Params.Pos2, sizeof(GetRectPos_Params.Pos2), &Pos2, sizeof(Pos2));
	memcpy_s(&GetRectPos_Params.pos3, sizeof(GetRectPos_Params.pos3), &pos3, sizeof(pos3));
	memcpy_s(&GetRectPos_Params.pos4, sizeof(GetRectPos_Params.pos4), &pos4, sizeof(pos4));

	this->ProcessEvent(uFnGetRectPos, &GetRectPos_Params, nullptr);

	memcpy_s(&Pos1, sizeof(Pos1), &GetRectPos_Params.Pos1, sizeof(GetRectPos_Params.Pos1));
	memcpy_s(&Pos2, sizeof(Pos2), &GetRectPos_Params.Pos2, sizeof(GetRectPos_Params.Pos2));
	memcpy_s(&pos3, sizeof(pos3), &GetRectPos_Params.pos3, sizeof(GetRectPos_Params.pos3));
	memcpy_s(&pos4, sizeof(pos4), &GetRectPos_Params.pos4, sizeof(GetRectPos_Params.pos4));
};

// Function REDGame.REDLobbyCollisionActor_Kyoutai.CalcOffsetPos
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               offset                         (CPF_Parm)
// struct FVector2D               pos                            (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Kyoutai::CalcOffsetPos(const struct FVector2D& offset, struct FVector2D& pos)
{
	static UFunction* uFnCalcOffsetPos = nullptr;

	if (!uFnCalcOffsetPos)
	{
		uFnCalcOffsetPos = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Kyoutai.CalcOffsetPos");
	}

	AREDLobbyCollisionActor_Kyoutai_execCalcOffsetPos_Params CalcOffsetPos_Params;
	memset(&CalcOffsetPos_Params, 0, sizeof(CalcOffsetPos_Params));
	memcpy_s(&CalcOffsetPos_Params.offset, sizeof(CalcOffsetPos_Params.offset), &offset, sizeof(offset));
	memcpy_s(&CalcOffsetPos_Params.pos, sizeof(CalcOffsetPos_Params.pos), &pos, sizeof(pos));

	this->ProcessEvent(uFnCalcOffsetPos, &CalcOffsetPos_Params, nullptr);

	memcpy_s(&pos, sizeof(pos), &CalcOffsetPos_Params.pos, sizeof(CalcOffsetPos_Params.pos));
};

// Function REDGame.REDLobbyCollisionActor_Wall.GetLinePosNormal
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               Normal                         (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Wall::GetLinePosNormal(struct FVector2D& Normal)
{
	static UFunction* uFnGetLinePosNormal = nullptr;

	if (!uFnGetLinePosNormal)
	{
		uFnGetLinePosNormal = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Wall.GetLinePosNormal");
	}

	AREDLobbyCollisionActor_Wall_execGetLinePosNormal_Params GetLinePosNormal_Params;
	memset(&GetLinePosNormal_Params, 0, sizeof(GetLinePosNormal_Params));
	memcpy_s(&GetLinePosNormal_Params.Normal, sizeof(GetLinePosNormal_Params.Normal), &Normal, sizeof(Normal));

	this->ProcessEvent(uFnGetLinePosNormal, &GetLinePosNormal_Params, nullptr);

	memcpy_s(&Normal, sizeof(Normal), &GetLinePosNormal_Params.Normal, sizeof(GetLinePosNormal_Params.Normal));
};

// Function REDGame.REDLobbyCollisionActor_Wall.GetLinePos
// [0x00420002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               Pos1                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               Pos2                           (CPF_Parm | CPF_OutParm)

void AREDLobbyCollisionActor_Wall::GetLinePos(struct FVector2D& Pos1, struct FVector2D& Pos2)
{
	static UFunction* uFnGetLinePos = nullptr;

	if (!uFnGetLinePos)
	{
		uFnGetLinePos = UFunction::FindFunction("Function REDGame.REDLobbyCollisionActor_Wall.GetLinePos");
	}

	AREDLobbyCollisionActor_Wall_execGetLinePos_Params GetLinePos_Params;
	memset(&GetLinePos_Params, 0, sizeof(GetLinePos_Params));
	memcpy_s(&GetLinePos_Params.Pos1, sizeof(GetLinePos_Params.Pos1), &Pos1, sizeof(Pos1));
	memcpy_s(&GetLinePos_Params.Pos2, sizeof(GetLinePos_Params.Pos2), &Pos2, sizeof(Pos2));

	this->ProcessEvent(uFnGetLinePos, &GetLinePos_Params, nullptr);

	memcpy_s(&Pos1, sizeof(Pos1), &GetLinePos_Params.Pos1, sizeof(GetLinePos_Params.Pos1));
	memcpy_s(&Pos2, sizeof(Pos2), &GetLinePos_Params.Pos2, sizeof(GetLinePos_Params.Pos2));
};

// Function REDGame.REDGameInfo_Gallery.BGMVolume
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        setFrame                       (CPF_Parm)
// float                          Volume                         (CPF_Parm)

void AREDGameInfo_Gallery::eventBGMVolume(int32_t setFrame, float Volume)
{
	static UFunction* uFnBGMVolume = nullptr;

	if (!uFnBGMVolume)
	{
		uFnBGMVolume = UFunction::FindFunction("Function REDGame.REDGameInfo_Gallery.BGMVolume");
	}

	AREDGameInfo_Gallery_eventBGMVolume_Params BGMVolume_Params;
	memset(&BGMVolume_Params, 0, sizeof(BGMVolume_Params));
	memcpy_s(&BGMVolume_Params.setFrame, sizeof(BGMVolume_Params.setFrame), &setFrame, sizeof(setFrame));
	memcpy_s(&BGMVolume_Params.Volume, sizeof(BGMVolume_Params.Volume), &Volume, sizeof(Volume));

	this->ProcessEvent(uFnBGMVolume, &BGMVolume_Params, nullptr);
};

// Function REDGame.REDGameInfo_Gallery.BGMStop
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        fadeOutFrame                   (CPF_Parm)

void AREDGameInfo_Gallery::eventBGMStop(int32_t fadeOutFrame)
{
	static UFunction* uFnBGMStop = nullptr;

	if (!uFnBGMStop)
	{
		uFnBGMStop = UFunction::FindFunction("Function REDGame.REDGameInfo_Gallery.BGMStop");
	}

	AREDGameInfo_Gallery_eventBGMStop_Params BGMStop_Params;
	memset(&BGMStop_Params, 0, sizeof(BGMStop_Params));
	memcpy_s(&BGMStop_Params.fadeOutFrame, sizeof(BGMStop_Params.fadeOutFrame), &fadeOutFrame, sizeof(fadeOutFrame));

	this->ProcessEvent(uFnBGMStop, &BGMStop_Params, nullptr);
};

// Function REDGame.REDGameInfo_Gallery.BGMRequest
// [0x00024802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  cueName                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  PackageName                    (CPF_Parm | CPF_NeedCtorLink)
// float                          FadeInTime                     (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Gallery::eventBGMRequest(const class FString& cueName, const class FString& PackageName, float FadeInTime)
{
	static UFunction* uFnBGMRequest = nullptr;

	if (!uFnBGMRequest)
	{
		uFnBGMRequest = UFunction::FindFunction("Function REDGame.REDGameInfo_Gallery.BGMRequest");
	}

	AREDGameInfo_Gallery_eventBGMRequest_Params BGMRequest_Params;
	memset(&BGMRequest_Params, 0, sizeof(BGMRequest_Params));
	memcpy_s(&BGMRequest_Params.cueName, sizeof(BGMRequest_Params.cueName), &cueName, sizeof(cueName));
	memcpy_s(&BGMRequest_Params.PackageName, sizeof(BGMRequest_Params.PackageName), &PackageName, sizeof(PackageName));
	memcpy_s(&BGMRequest_Params.FadeInTime, sizeof(BGMRequest_Params.FadeInTime), &FadeInTime, sizeof(FadeInTime));

	this->ProcessEvent(uFnBGMRequest, &BGMRequest_Params, nullptr);
};

// Function REDGame.REDGameInfo_Gallery.BGMRequestFromCue
// [0x00824802] (FUNC_Defined | FUNC_Event | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// class USoundCue*               Cue                            (CPF_Parm)
// float                          FadeInTime                     (CPF_OptionalParm | CPF_Parm)

void AREDGameInfo_Gallery::eventBGMRequestFromCue(class USoundCue* Cue, float FadeInTime)
{
	static UFunction* uFnBGMRequestFromCue = nullptr;

	if (!uFnBGMRequestFromCue)
	{
		uFnBGMRequestFromCue = UFunction::FindFunction("Function REDGame.REDGameInfo_Gallery.BGMRequestFromCue");
	}

	AREDGameInfo_Gallery_eventBGMRequestFromCue_Params BGMRequestFromCue_Params;
	memset(&BGMRequestFromCue_Params, 0, sizeof(BGMRequestFromCue_Params));
	BGMRequestFromCue_Params.Cue = Cue;
	memcpy_s(&BGMRequestFromCue_Params.FadeInTime, sizeof(BGMRequestFromCue_Params.FadeInTime), &FadeInTime, sizeof(FadeInTime));

	this->ProcessEvent(uFnBGMRequestFromCue, &BGMRequestFromCue_Params, nullptr);
};

// Function REDGame.REDGameInfo_Gallery.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Gallery::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Gallery.InitGame");
	}

	AREDGameInfo_Gallery_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGfxMoviePlayer_MenuBG.OnFinalize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuBG::OnFinalize()
{
	static UFunction* uFnOnFinalize = nullptr;

	if (!uFnOnFinalize)
	{
		uFnOnFinalize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBG.OnFinalize");
	}

	UREDGfxMoviePlayer_MenuBG_execOnFinalize_Params OnFinalize_Params;
	memset(&OnFinalize_Params, 0, sizeof(OnFinalize_Params));

	this->ProcessEvent(uFnOnFinalize, &OnFinalize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBG.OnDrawUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuBG::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBG.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuBG_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBG.OnUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuBG::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBG.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuBG_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBG.OnInitialize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuBG::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBG.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuBG_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBG.ActionStart
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuBG::ActionStart()
{
	static UFunction* uFnActionStart = nullptr;

	if (!uFnActionStart)
	{
		uFnActionStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBG.ActionStart");
	}

	UREDGfxMoviePlayer_MenuBG_execActionStart_Params ActionStart_Params;
	memset(&ActionStart_Params, 0, sizeof(ActionStart_Params));

	this->ProcessEvent(uFnActionStart, &ActionStart_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBG.SetBGColor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ECMN_BG_COLOR_TYPE             Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuBG::SetBGColor(ECMN_BG_COLOR_TYPE Type)
{
	static UFunction* uFnSetBGColor = nullptr;

	if (!uFnSetBGColor)
	{
		uFnSetBGColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBG.SetBGColor");
	}

	UREDGfxMoviePlayer_MenuBG_execSetBGColor_Params SetBGColor_Params;
	memset(&SetBGColor_Params, 0, sizeof(SetBGColor_Params));
	memcpy_s(&SetBGColor_Params.Type, sizeof(SetBGColor_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnSetBGColor, &SetBGColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuBG.SetHeadText
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  txt                            (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuBG::SetHeadText(const class FString& txt)
{
	static UFunction* uFnSetHeadText = nullptr;

	if (!uFnSetHeadText)
	{
		uFnSetHeadText = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuBG.SetHeadText");
	}

	UREDGfxMoviePlayer_MenuBG_execSetHeadText_Params SetHeadText_Params;
	memset(&SetHeadText_Params, 0, sizeof(SetHeadText_Params));
	memcpy_s(&SetHeadText_Params.txt, sizeof(SetHeadText_Params.txt), &txt, sizeof(txt));

	this->ProcessEvent(uFnSetHeadText, &SetHeadText_Params, nullptr);
};

// Function REDGame.REDGameInfo_PreInterlude.DestroyOnSeamlessTravel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_PreInterlude::eventDestroyOnSeamlessTravel()
{
	static UFunction* uFnDestroyOnSeamlessTravel = nullptr;

	if (!uFnDestroyOnSeamlessTravel)
	{
		uFnDestroyOnSeamlessTravel = UFunction::FindFunction("Function REDGame.REDGameInfo_PreInterlude.DestroyOnSeamlessTravel");
	}

	AREDGameInfo_PreInterlude_eventDestroyOnSeamlessTravel_Params DestroyOnSeamlessTravel_Params;
	memset(&DestroyOnSeamlessTravel_Params, 0, sizeof(DestroyOnSeamlessTravel_Params));

	this->ProcessEvent(uFnDestroyOnSeamlessTravel, &DestroyOnSeamlessTravel_Params, nullptr);
};

// Function REDGame.REDGameInfo_PreInterlude.Tick
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void AREDGameInfo_PreInterlude::eventTick(float DeltaTime)
{
	static UFunction* uFnTick = nullptr;

	if (!uFnTick)
	{
		uFnTick = UFunction::FindFunction("Function REDGame.REDGameInfo_PreInterlude.Tick");
	}

	AREDGameInfo_PreInterlude_eventTick_Params Tick_Params;
	memset(&Tick_Params, 0, sizeof(Tick_Params));
	memcpy_s(&Tick_Params.DeltaTime, sizeof(Tick_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnTick, &Tick_Params, nullptr);
};

// Function REDGame.REDGameInfo_PreInterlude.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_PreInterlude::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_PreInterlude.InitGame");
	}

	AREDGameInfo_PreInterlude_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_Replay.GameEnding
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void AREDGameInfo_Replay::eventGameEnding()
{
	static UFunction* uFnGameEnding = nullptr;

	if (!uFnGameEnding)
	{
		uFnGameEnding = UFunction::FindFunction("Function REDGame.REDGameInfo_Replay.GameEnding");
	}

	AREDGameInfo_Replay_eventGameEnding_Params GameEnding_Params;
	memset(&GameEnding_Params, 0, sizeof(GameEnding_Params));

	this->ProcessEvent(uFnGameEnding, &GameEnding_Params, nullptr);
};

// Function REDGame.REDGameInfo_Replay.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Replay::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Replay.InitGame");
	}

	AREDGameInfo_Replay_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGameInfo_StoryMenu.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_StoryMenu::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_StoryMenu.InitGame");
	}

	AREDGameInfo_StoryMenu_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGfxMoviePlayer_MenuStaffRoll_Story.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStaffRoll_Story::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStaffRoll_Story.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuStaffRoll_Story_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGameInfo_Title.InitGame
// [0x00420802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  Options                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  ErrorMessage                   (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void AREDGameInfo_Title::eventInitGame(const class FString& Options, class FString& ErrorMessage)
{
	static UFunction* uFnInitGame = nullptr;

	if (!uFnInitGame)
	{
		uFnInitGame = UFunction::FindFunction("Function REDGame.REDGameInfo_Title.InitGame");
	}

	AREDGameInfo_Title_eventInitGame_Params InitGame_Params;
	memset(&InitGame_Params, 0, sizeof(InitGame_Params));
	memcpy_s(&InitGame_Params.Options, sizeof(InitGame_Params.Options), &Options, sizeof(Options));
	memcpy_s(&InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage), &ErrorMessage, sizeof(ErrorMessage));

	this->ProcessEvent(uFnInitGame, &InitGame_Params, nullptr);

	memcpy_s(&ErrorMessage, sizeof(ErrorMessage), &InitGame_Params.ErrorMessage, sizeof(InitGame_Params.ErrorMessage));
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.Update
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_NetworkForMainmenu::Update()
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.Update");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_NextScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_NextScene(bool bTrigger)
{
	static UFunction* uFnstateUpdate_NextScene = nullptr;

	if (!uFnstateUpdate_NextScene)
	{
		uFnstateUpdate_NextScene = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_NextScene");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_NextScene_Params stateUpdate_NextScene_Params;
	memset(&stateUpdate_NextScene_Params, 0, sizeof(stateUpdate_NextScene_Params));
	stateUpdate_NextScene_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_NextScene, &stateUpdate_NextScene_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_Error
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_Error(bool bTrigger)
{
	static UFunction* uFnstateUpdate_Error = nullptr;

	if (!uFnstateUpdate_Error)
	{
		uFnstateUpdate_Error = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_Error");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_Error_Params stateUpdate_Error_Params;
	memset(&stateUpdate_Error_Params, 0, sizeof(stateUpdate_Error_Params));
	stateUpdate_Error_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_Error, &stateUpdate_Error_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_ErrorWait2
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_ErrorWait2(bool bTrigger)
{
	static UFunction* uFnstateUpdate_ErrorWait2 = nullptr;

	if (!uFnstateUpdate_ErrorWait2)
	{
		uFnstateUpdate_ErrorWait2 = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_ErrorWait2");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_ErrorWait2_Params stateUpdate_ErrorWait2_Params;
	memset(&stateUpdate_ErrorWait2_Params, 0, sizeof(stateUpdate_ErrorWait2_Params));
	stateUpdate_ErrorWait2_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_ErrorWait2, &stateUpdate_ErrorWait2_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_ErrorWait
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_ErrorWait(bool bTrigger)
{
	static UFunction* uFnstateUpdate_ErrorWait = nullptr;

	if (!uFnstateUpdate_ErrorWait)
	{
		uFnstateUpdate_ErrorWait = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_ErrorWait");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_ErrorWait_Params stateUpdate_ErrorWait_Params;
	memset(&stateUpdate_ErrorWait_Params, 0, sizeof(stateUpdate_ErrorWait_Params));
	stateUpdate_ErrorWait_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_ErrorWait, &stateUpdate_ErrorWait_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_Ranking
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_Ranking(bool bTrigger)
{
	static UFunction* uFnstateUpdate_Ranking = nullptr;

	if (!uFnstateUpdate_Ranking)
	{
		uFnstateUpdate_Ranking = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_Ranking");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_Ranking_Params stateUpdate_Ranking_Params;
	memset(&stateUpdate_Ranking_Params, 0, sizeof(stateUpdate_Ranking_Params));
	stateUpdate_Ranking_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_Ranking, &stateUpdate_Ranking_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_PlayerMatchSearch
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_PlayerMatchSearch(bool bTrigger)
{
	static UFunction* uFnstateUpdate_PlayerMatchSearch = nullptr;

	if (!uFnstateUpdate_PlayerMatchSearch)
	{
		uFnstateUpdate_PlayerMatchSearch = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_PlayerMatchSearch");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_PlayerMatchSearch_Params stateUpdate_PlayerMatchSearch_Params;
	memset(&stateUpdate_PlayerMatchSearch_Params, 0, sizeof(stateUpdate_PlayerMatchSearch_Params));
	stateUpdate_PlayerMatchSearch_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_PlayerMatchSearch, &stateUpdate_PlayerMatchSearch_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_RankMatchSearch
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_RankMatchSearch(bool bTrigger)
{
	static UFunction* uFnstateUpdate_RankMatchSearch = nullptr;

	if (!uFnstateUpdate_RankMatchSearch)
	{
		uFnstateUpdate_RankMatchSearch = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_RankMatchSearch");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_RankMatchSearch_Params stateUpdate_RankMatchSearch_Params;
	memset(&stateUpdate_RankMatchSearch_Params, 0, sizeof(stateUpdate_RankMatchSearch_Params));
	stateUpdate_RankMatchSearch_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_RankMatchSearch, &stateUpdate_RankMatchSearch_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_NetworkMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_NetworkMain(bool bTrigger)
{
	static UFunction* uFnstateUpdate_NetworkMain = nullptr;

	if (!uFnstateUpdate_NetworkMain)
	{
		uFnstateUpdate_NetworkMain = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_NetworkMain");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_NetworkMain_Params stateUpdate_NetworkMain_Params;
	memset(&stateUpdate_NetworkMain_Params, 0, sizeof(stateUpdate_NetworkMain_Params));
	stateUpdate_NetworkMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_NetworkMain, &stateUpdate_NetworkMain_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_NetworkWelcome
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_NetworkWelcome(bool bTrigger)
{
	static UFunction* uFnstateUpdate_NetworkWelcome = nullptr;

	if (!uFnstateUpdate_NetworkWelcome)
	{
		uFnstateUpdate_NetworkWelcome = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_NetworkWelcome");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_NetworkWelcome_Params stateUpdate_NetworkWelcome_Params;
	memset(&stateUpdate_NetworkWelcome_Params, 0, sizeof(stateUpdate_NetworkWelcome_Params));
	stateUpdate_NetworkWelcome_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_NetworkWelcome, &stateUpdate_NetworkWelcome_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_NetworkInit
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::stateUpdate_NetworkInit(bool bTrigger)
{
	static UFunction* uFnstateUpdate_NetworkInit = nullptr;

	if (!uFnstateUpdate_NetworkInit)
	{
		uFnstateUpdate_NetworkInit = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.stateUpdate_NetworkInit");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execstateUpdate_NetworkInit_Params stateUpdate_NetworkInit_Params;
	memset(&stateUpdate_NetworkInit_Params, 0, sizeof(stateUpdate_NetworkInit_Params));
	stateUpdate_NetworkInit_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnstateUpdate_NetworkInit, &stateUpdate_NetworkInit_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.rankingMenu_IsEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_NetworkForMainmenu::rankingMenu_IsEnd()
{
	static UFunction* uFnrankingMenu_IsEnd = nullptr;

	if (!uFnrankingMenu_IsEnd)
	{
		uFnrankingMenu_IsEnd = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.rankingMenu_IsEnd");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execrankingMenu_IsEnd_Params rankingMenu_IsEnd_Params;
	memset(&rankingMenu_IsEnd_Params, 0, sizeof(rankingMenu_IsEnd_Params));

	this->ProcessEvent(uFnrankingMenu_IsEnd, &rankingMenu_IsEnd_Params, nullptr);

	return rankingMenu_IsEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.rankingMenu
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_NetworkForMainmenu::rankingMenu()
{
	static UFunction* uFnrankingMenu = nullptr;

	if (!uFnrankingMenu)
	{
		uFnrankingMenu = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.rankingMenu");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execrankingMenu_Params rankingMenu_Params;
	memset(&rankingMenu_Params, 0, sizeof(rankingMenu_Params));

	this->ProcessEvent(uFnrankingMenu, &rankingMenu_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.playerMatchSearch_IsEnd
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isGotoRoom                     (CPF_Parm | CPF_OutParm)

bool UREDGfxMovieManager_NetworkForMainmenu::playerMatchSearch_IsEnd(int32_t& isGotoRoom)
{
	static UFunction* uFnplayerMatchSearch_IsEnd = nullptr;

	if (!uFnplayerMatchSearch_IsEnd)
	{
		uFnplayerMatchSearch_IsEnd = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.playerMatchSearch_IsEnd");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execplayerMatchSearch_IsEnd_Params playerMatchSearch_IsEnd_Params;
	memset(&playerMatchSearch_IsEnd_Params, 0, sizeof(playerMatchSearch_IsEnd_Params));
	memcpy_s(&playerMatchSearch_IsEnd_Params.isGotoRoom, sizeof(playerMatchSearch_IsEnd_Params.isGotoRoom), &isGotoRoom, sizeof(isGotoRoom));

	this->ProcessEvent(uFnplayerMatchSearch_IsEnd, &playerMatchSearch_IsEnd_Params, nullptr);

	memcpy_s(&isGotoRoom, sizeof(isGotoRoom), &playerMatchSearch_IsEnd_Params.isGotoRoom, sizeof(playerMatchSearch_IsEnd_Params.isGotoRoom));

	return playerMatchSearch_IsEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.playerMatchSearch
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_NetworkForMainmenu::playerMatchSearch()
{
	static UFunction* uFnplayerMatchSearch = nullptr;

	if (!uFnplayerMatchSearch)
	{
		uFnplayerMatchSearch = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.playerMatchSearch");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execplayerMatchSearch_Params playerMatchSearch_Params;
	memset(&playerMatchSearch_Params, 0, sizeof(playerMatchSearch_Params));

	this->ProcessEvent(uFnplayerMatchSearch, &playerMatchSearch_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.rankMatchSearch_IsEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_NetworkForMainmenu::rankMatchSearch_IsEnd()
{
	static UFunction* uFnrankMatchSearch_IsEnd = nullptr;

	if (!uFnrankMatchSearch_IsEnd)
	{
		uFnrankMatchSearch_IsEnd = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.rankMatchSearch_IsEnd");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execrankMatchSearch_IsEnd_Params rankMatchSearch_IsEnd_Params;
	memset(&rankMatchSearch_IsEnd_Params, 0, sizeof(rankMatchSearch_IsEnd_Params));

	this->ProcessEvent(uFnrankMatchSearch_IsEnd, &rankMatchSearch_IsEnd_Params, nullptr);

	return rankMatchSearch_IsEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.rankMatchSearch
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_NetworkForMainmenu::rankMatchSearch()
{
	static UFunction* uFnrankMatchSearch = nullptr;

	if (!uFnrankMatchSearch)
	{
		uFnrankMatchSearch = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.rankMatchSearch");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execrankMatchSearch_Params rankMatchSearch_Params;
	memset(&rankMatchSearch_Params, 0, sizeof(rankMatchSearch_Params));

	this->ProcessEvent(uFnrankMatchSearch, &rankMatchSearch_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.networkTopMenu_IsEnd
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isRankMatchSearch              (CPF_Parm | CPF_OutParm)
// int32_t                        isPlayerMatchSearch            (CPF_Parm | CPF_OutParm)
// int32_t                        isRanking                      (CPF_Parm | CPF_OutParm)

bool UREDGfxMovieManager_NetworkForMainmenu::networkTopMenu_IsEnd(int32_t& isRankMatchSearch, int32_t& isPlayerMatchSearch, int32_t& isRanking)
{
	static UFunction* uFnnetworkTopMenu_IsEnd = nullptr;

	if (!uFnnetworkTopMenu_IsEnd)
	{
		uFnnetworkTopMenu_IsEnd = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.networkTopMenu_IsEnd");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execnetworkTopMenu_IsEnd_Params networkTopMenu_IsEnd_Params;
	memset(&networkTopMenu_IsEnd_Params, 0, sizeof(networkTopMenu_IsEnd_Params));
	memcpy_s(&networkTopMenu_IsEnd_Params.isRankMatchSearch, sizeof(networkTopMenu_IsEnd_Params.isRankMatchSearch), &isRankMatchSearch, sizeof(isRankMatchSearch));
	memcpy_s(&networkTopMenu_IsEnd_Params.isPlayerMatchSearch, sizeof(networkTopMenu_IsEnd_Params.isPlayerMatchSearch), &isPlayerMatchSearch, sizeof(isPlayerMatchSearch));
	memcpy_s(&networkTopMenu_IsEnd_Params.isRanking, sizeof(networkTopMenu_IsEnd_Params.isRanking), &isRanking, sizeof(isRanking));

	this->ProcessEvent(uFnnetworkTopMenu_IsEnd, &networkTopMenu_IsEnd_Params, nullptr);

	memcpy_s(&isRankMatchSearch, sizeof(isRankMatchSearch), &networkTopMenu_IsEnd_Params.isRankMatchSearch, sizeof(networkTopMenu_IsEnd_Params.isRankMatchSearch));
	memcpy_s(&isPlayerMatchSearch, sizeof(isPlayerMatchSearch), &networkTopMenu_IsEnd_Params.isPlayerMatchSearch, sizeof(networkTopMenu_IsEnd_Params.isPlayerMatchSearch));
	memcpy_s(&isRanking, sizeof(isRanking), &networkTopMenu_IsEnd_Params.isRanking, sizeof(networkTopMenu_IsEnd_Params.isRanking));

	return networkTopMenu_IsEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.networkTopMenu
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       _bFromSearch                   (CPF_Parm)
// uint32_t                       _bFromSearchRankMatch          (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::networkTopMenu(bool _bFromSearch, bool _bFromSearchRankMatch)
{
	static UFunction* uFnnetworkTopMenu = nullptr;

	if (!uFnnetworkTopMenu)
	{
		uFnnetworkTopMenu = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.networkTopMenu");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execnetworkTopMenu_Params networkTopMenu_Params;
	memset(&networkTopMenu_Params, 0, sizeof(networkTopMenu_Params));
	networkTopMenu_Params._bFromSearch = _bFromSearch;
	networkTopMenu_Params._bFromSearchRankMatch = _bFromSearchRankMatch;

	this->ProcessEvent(uFnnetworkTopMenu, &networkTopMenu_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.welcomeScene_IsEnd
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_NetworkForMainmenu::welcomeScene_IsEnd()
{
	static UFunction* uFnwelcomeScene_IsEnd = nullptr;

	if (!uFnwelcomeScene_IsEnd)
	{
		uFnwelcomeScene_IsEnd = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.welcomeScene_IsEnd");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execwelcomeScene_IsEnd_Params welcomeScene_IsEnd_Params;
	memset(&welcomeScene_IsEnd_Params, 0, sizeof(welcomeScene_IsEnd_Params));

	this->ProcessEvent(uFnwelcomeScene_IsEnd, &welcomeScene_IsEnd_Params, nullptr);

	return welcomeScene_IsEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.welcomeScene
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_NetworkForMainmenu::welcomeScene()
{
	static UFunction* uFnwelcomeScene = nullptr;

	if (!uFnwelcomeScene)
	{
		uFnwelcomeScene = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.welcomeScene");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execwelcomeScene_Params welcomeScene_Params;
	memset(&welcomeScene_Params, 0, sizeof(welcomeScene_Params));

	this->ProcessEvent(uFnwelcomeScene, &welcomeScene_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.networkInit_IsEnd
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        isError                        (CPF_Parm | CPF_OutParm)

bool UREDGfxMovieManager_NetworkForMainmenu::networkInit_IsEnd(int32_t& isError)
{
	static UFunction* uFnnetworkInit_IsEnd = nullptr;

	if (!uFnnetworkInit_IsEnd)
	{
		uFnnetworkInit_IsEnd = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.networkInit_IsEnd");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execnetworkInit_IsEnd_Params networkInit_IsEnd_Params;
	memset(&networkInit_IsEnd_Params, 0, sizeof(networkInit_IsEnd_Params));
	memcpy_s(&networkInit_IsEnd_Params.isError, sizeof(networkInit_IsEnd_Params.isError), &isError, sizeof(isError));

	this->ProcessEvent(uFnnetworkInit_IsEnd, &networkInit_IsEnd_Params, nullptr);

	memcpy_s(&isError, sizeof(isError), &networkInit_IsEnd_Params.isError, sizeof(networkInit_IsEnd_Params.isError));

	return networkInit_IsEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.NetworkInit
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_NetworkForMainmenu::NetworkInit()
{
	static UFunction* uFnNetworkInit = nullptr;

	if (!uFnNetworkInit)
	{
		uFnNetworkInit = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.NetworkInit");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execNetworkInit_Params NetworkInit_Params;
	memset(&NetworkInit_Params, 0, sizeof(NetworkInit_Params));

	this->ProcessEvent(uFnNetworkInit, &NetworkInit_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.IsNetworkEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMovieManager_NetworkForMainmenu::IsNetworkEnd()
{
	static UFunction* uFnIsNetworkEnd = nullptr;

	if (!uFnIsNetworkEnd)
	{
		uFnIsNetworkEnd = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.IsNetworkEnd");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execIsNetworkEnd_Params IsNetworkEnd_Params;
	memset(&IsNetworkEnd_Params, 0, sizeof(IsNetworkEnd_Params));

	this->ProcessEvent(uFnIsNetworkEnd, &IsNetworkEnd_Params, nullptr);

	return IsNetworkEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.StartNetwork
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMovieManager_NetworkForMainmenu::StartNetwork()
{
	static UFunction* uFnStartNetwork = nullptr;

	if (!uFnStartNetwork)
	{
		uFnStartNetwork = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.StartNetwork");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execStartNetwork_Params StartNetwork_Params;
	memset(&StartNetwork_Params, 0, sizeof(StartNetwork_Params));

	this->ProcessEvent(uFnStartNetwork, &StartNetwork_Params, nullptr);
};

// Function REDGame.REDGfxMovieManager_NetworkForMainmenu.SetState
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ENETMANAGER_MM_STATE           State                          (CPF_Parm)

void UREDGfxMovieManager_NetworkForMainmenu::SetState(ENETMANAGER_MM_STATE State)
{
	static UFunction* uFnSetState = nullptr;

	if (!uFnSetState)
	{
		uFnSetState = UFunction::FindFunction("Function REDGame.REDGfxMovieManager_NetworkForMainmenu.SetState");
	}

	UREDGfxMovieManager_NetworkForMainmenu_execSetState_Params SetState_Params;
	memset(&SetState_Params, 0, sizeof(SetState_Params));
	memcpy_s(&SetState_Params.State, sizeof(SetState_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnSetState, &SetState_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.Update
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow_AC::Update(float DeltaTime)
{
	static UFunction* uFnUpdate = nullptr;

	if (!uFnUpdate)
	{
		uFnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.Update");
	}

	UREDGfxMoviePlayer_BattleResultWindow_AC_execUpdate_Params Update_Params;
	memset(&Update_Params, 0, sizeof(Update_Params));
	memcpy_s(&Update_Params.DeltaTime, sizeof(Update_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdate, &Update_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.SkipDemote
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow_AC::SkipDemote(int32_t Player)
{
	static UFunction* uFnSkipDemote = nullptr;

	if (!uFnSkipDemote)
	{
		uFnSkipDemote = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.SkipDemote");
	}

	UREDGfxMoviePlayer_BattleResultWindow_AC_execSkipDemote_Params SkipDemote_Params;
	memset(&SkipDemote_Params, 0, sizeof(SkipDemote_Params));
	memcpy_s(&SkipDemote_Params.Player, sizeof(SkipDemote_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSkipDemote, &SkipDemote_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.SetDan
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)
// int32_t                        val                            (CPF_Parm)
// int32_t                        val_after                      (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow_AC::SetDan(int32_t Player, int32_t val, int32_t val_after)
{
	static UFunction* uFnSetDan = nullptr;

	if (!uFnSetDan)
	{
		uFnSetDan = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.SetDan");
	}

	UREDGfxMoviePlayer_BattleResultWindow_AC_execSetDan_Params SetDan_Params;
	memset(&SetDan_Params, 0, sizeof(SetDan_Params));
	memcpy_s(&SetDan_Params.Player, sizeof(SetDan_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetDan_Params.val, sizeof(SetDan_Params.val), &val, sizeof(val));
	memcpy_s(&SetDan_Params.val_after, sizeof(SetDan_Params.val_after), &val_after, sizeof(val_after));

	this->ProcessEvent(uFnSetDan, &SetDan_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.IsShowAnimEnd
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

int32_t UREDGfxMoviePlayer_BattleResultWindow_AC::IsShowAnimEnd()
{
	static UFunction* uFnIsShowAnimEnd = nullptr;

	if (!uFnIsShowAnimEnd)
	{
		uFnIsShowAnimEnd = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.IsShowAnimEnd");
	}

	UREDGfxMoviePlayer_BattleResultWindow_AC_execIsShowAnimEnd_Params IsShowAnimEnd_Params;
	memset(&IsShowAnimEnd_Params, 0, sizeof(IsShowAnimEnd_Params));

	this->ProcessEvent(uFnIsShowAnimEnd, &IsShowAnimEnd_Params, nullptr);

	return IsShowAnimEnd_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.Show
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Player                         (CPF_Parm)

void UREDGfxMoviePlayer_BattleResultWindow_AC::Show(int32_t Player)
{
	static UFunction* uFnShow = nullptr;

	if (!uFnShow)
	{
		uFnShow = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.Show");
	}

	UREDGfxMoviePlayer_BattleResultWindow_AC_execShow_Params Show_Params;
	memset(&Show_Params, 0, sizeof(Show_Params));
	memcpy_s(&Show_Params.Player, sizeof(Show_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnShow, &Show_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.PlayRankDownCheckSE
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_BattleResultWindow_AC::PlayRankDownCheckSE()
{
	static UFunction* uFnPlayRankDownCheckSE = nullptr;

	if (!uFnPlayRankDownCheckSE)
	{
		uFnPlayRankDownCheckSE = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.PlayRankDownCheckSE");
	}

	UREDGfxMoviePlayer_BattleResultWindow_AC_execPlayRankDownCheckSE_Params PlayRankDownCheckSE_Params;
	memset(&PlayRankDownCheckSE_Params, 0, sizeof(PlayRankDownCheckSE_Params));

	this->ProcessEvent(uFnPlayRankDownCheckSE, &PlayRankDownCheckSE_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.Amulet_RankDownCheck
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_BattleResultWindow_AC::Amulet_RankDownCheck(int32_t Player)
{
	static UFunction* uFnAmulet_RankDownCheck = nullptr;

	if (!uFnAmulet_RankDownCheck)
	{
		uFnAmulet_RankDownCheck = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_BattleResultWindow_AC.Amulet_RankDownCheck");
	}

	UREDGfxMoviePlayer_BattleResultWindow_AC_execAmulet_RankDownCheck_Params Amulet_RankDownCheck_Params;
	memset(&Amulet_RankDownCheck_Params, 0, sizeof(Amulet_RankDownCheck_Params));
	memcpy_s(&Amulet_RankDownCheck_Params.Player, sizeof(Amulet_RankDownCheck_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnAmulet_RankDownCheck, &Amulet_RankDownCheck_Params, nullptr);

	return Amulet_RankDownCheck_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaIntro.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaIntro::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaIntro.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuCharaIntro_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaIntro.UpdateMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaIntro::UpdateMain(bool bTrigger)
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaIntro.UpdateMain");
	}

	UREDGfxMoviePlayer_MenuCharaIntro_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));
	UpdateMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaIntro.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaIntro::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaIntro.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuCharaIntro_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Vect2dIntersection
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               A1                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               A2                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               b1                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               b2                             (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector2D UREDGfxMoviePlayer_MenuCharaSelect::Vect2dIntersection(struct FVector2D& A1, struct FVector2D& A2, struct FVector2D& b1, struct FVector2D& b2)
{
	static UFunction* uFnVect2dIntersection = nullptr;

	if (!uFnVect2dIntersection)
	{
		uFnVect2dIntersection = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Vect2dIntersection");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execVect2dIntersection_Params Vect2dIntersection_Params;
	memset(&Vect2dIntersection_Params, 0, sizeof(Vect2dIntersection_Params));
	memcpy_s(&Vect2dIntersection_Params.A1, sizeof(Vect2dIntersection_Params.A1), &A1, sizeof(A1));
	memcpy_s(&Vect2dIntersection_Params.A2, sizeof(Vect2dIntersection_Params.A2), &A2, sizeof(A2));
	memcpy_s(&Vect2dIntersection_Params.b1, sizeof(Vect2dIntersection_Params.b1), &b1, sizeof(b1));
	memcpy_s(&Vect2dIntersection_Params.b2, sizeof(Vect2dIntersection_Params.b2), &b2, sizeof(b2));

	this->ProcessEvent(uFnVect2dIntersection, &Vect2dIntersection_Params, nullptr);

	memcpy_s(&A1, sizeof(A1), &Vect2dIntersection_Params.A1, sizeof(Vect2dIntersection_Params.A1));
	memcpy_s(&A2, sizeof(A2), &Vect2dIntersection_Params.A2, sizeof(Vect2dIntersection_Params.A2));
	memcpy_s(&b1, sizeof(b1), &Vect2dIntersection_Params.b1, sizeof(Vect2dIntersection_Params.b1));
	memcpy_s(&b2, sizeof(b2), &Vect2dIntersection_Params.b2, sizeof(Vect2dIntersection_Params.b2));

	return Vect2dIntersection_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.cross2d
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               A                              (CPF_Parm)
// struct FVector2D               B                              (CPF_Parm)

float UREDGfxMoviePlayer_MenuCharaSelect::cross2d(const struct FVector2D& A, const struct FVector2D& B)
{
	static UFunction* uFncross2d = nullptr;

	if (!uFncross2d)
	{
		uFncross2d = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.cross2d");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execcross2d_Params cross2d_Params;
	memset(&cross2d_Params, 0, sizeof(cross2d_Params));
	memcpy_s(&cross2d_Params.A, sizeof(cross2d_Params.A), &A, sizeof(A));
	memcpy_s(&cross2d_Params.B, sizeof(cross2d_Params.B), &B, sizeof(B));

	this->ProcessEvent(uFncross2d, &cross2d_Params, nullptr);

	return cross2d_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.PosIncludeRectangle
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               tp1                            (CPF_Parm)
// struct FVector2D               tp2                            (CPF_Parm)
// struct FVector2D               tp3                            (CPF_Parm)
// struct FVector2D               tp4                            (CPF_Parm)
// struct FVector2D               xp                             (CPF_Const | CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuCharaSelect::PosIncludeRectangle(const struct FVector2D& tp1, const struct FVector2D& tp2, const struct FVector2D& tp3, const struct FVector2D& tp4, struct FVector2D& xp)
{
	static UFunction* uFnPosIncludeRectangle = nullptr;

	if (!uFnPosIncludeRectangle)
	{
		uFnPosIncludeRectangle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.PosIncludeRectangle");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPosIncludeRectangle_Params PosIncludeRectangle_Params;
	memset(&PosIncludeRectangle_Params, 0, sizeof(PosIncludeRectangle_Params));
	memcpy_s(&PosIncludeRectangle_Params.tp1, sizeof(PosIncludeRectangle_Params.tp1), &tp1, sizeof(tp1));
	memcpy_s(&PosIncludeRectangle_Params.tp2, sizeof(PosIncludeRectangle_Params.tp2), &tp2, sizeof(tp2));
	memcpy_s(&PosIncludeRectangle_Params.tp3, sizeof(PosIncludeRectangle_Params.tp3), &tp3, sizeof(tp3));
	memcpy_s(&PosIncludeRectangle_Params.tp4, sizeof(PosIncludeRectangle_Params.tp4), &tp4, sizeof(tp4));
	memcpy_s(&PosIncludeRectangle_Params.xp, sizeof(PosIncludeRectangle_Params.xp), &xp, sizeof(xp));

	this->ProcessEvent(uFnPosIncludeRectangle, &PosIncludeRectangle_Params, nullptr);

	memcpy_s(&xp, sizeof(xp), &PosIncludeRectangle_Params.xp, sizeof(PosIncludeRectangle_Params.xp));

	return PosIncludeRectangle_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.PosIncludeTriangle
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               tp1                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               tp2                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               tp3                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               xp                             (CPF_Const | CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuCharaSelect::PosIncludeTriangle(struct FVector2D& tp1, struct FVector2D& tp2, struct FVector2D& tp3, struct FVector2D& xp)
{
	static UFunction* uFnPosIncludeTriangle = nullptr;

	if (!uFnPosIncludeTriangle)
	{
		uFnPosIncludeTriangle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.PosIncludeTriangle");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPosIncludeTriangle_Params PosIncludeTriangle_Params;
	memset(&PosIncludeTriangle_Params, 0, sizeof(PosIncludeTriangle_Params));
	memcpy_s(&PosIncludeTriangle_Params.tp1, sizeof(PosIncludeTriangle_Params.tp1), &tp1, sizeof(tp1));
	memcpy_s(&PosIncludeTriangle_Params.tp2, sizeof(PosIncludeTriangle_Params.tp2), &tp2, sizeof(tp2));
	memcpy_s(&PosIncludeTriangle_Params.tp3, sizeof(PosIncludeTriangle_Params.tp3), &tp3, sizeof(tp3));
	memcpy_s(&PosIncludeTriangle_Params.xp, sizeof(PosIncludeTriangle_Params.xp), &xp, sizeof(xp));

	this->ProcessEvent(uFnPosIncludeTriangle, &PosIncludeTriangle_Params, nullptr);

	memcpy_s(&tp1, sizeof(tp1), &PosIncludeTriangle_Params.tp1, sizeof(PosIncludeTriangle_Params.tp1));
	memcpy_s(&tp2, sizeof(tp2), &PosIncludeTriangle_Params.tp2, sizeof(PosIncludeTriangle_Params.tp2));
	memcpy_s(&tp3, sizeof(tp3), &PosIncludeTriangle_Params.tp3, sizeof(PosIncludeTriangle_Params.tp3));
	memcpy_s(&xp, sizeof(xp), &PosIncludeTriangle_Params.xp, sizeof(PosIncludeTriangle_Params.xp));

	return PosIncludeTriangle_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.CheckIntersect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               P1                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               P2                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               p3                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               p4                             (CPF_Const | CPF_Parm | CPF_OutParm)

float UREDGfxMoviePlayer_MenuCharaSelect::CheckIntersect(struct FVector2D& P1, struct FVector2D& P2, struct FVector2D& p3, struct FVector2D& p4)
{
	static UFunction* uFnCheckIntersect = nullptr;

	if (!uFnCheckIntersect)
	{
		uFnCheckIntersect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.CheckIntersect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execCheckIntersect_Params CheckIntersect_Params;
	memset(&CheckIntersect_Params, 0, sizeof(CheckIntersect_Params));
	memcpy_s(&CheckIntersect_Params.P1, sizeof(CheckIntersect_Params.P1), &P1, sizeof(P1));
	memcpy_s(&CheckIntersect_Params.P2, sizeof(CheckIntersect_Params.P2), &P2, sizeof(P2));
	memcpy_s(&CheckIntersect_Params.p3, sizeof(CheckIntersect_Params.p3), &p3, sizeof(p3));
	memcpy_s(&CheckIntersect_Params.p4, sizeof(CheckIntersect_Params.p4), &p4, sizeof(p4));

	this->ProcessEvent(uFnCheckIntersect, &CheckIntersect_Params, nullptr);

	memcpy_s(&P1, sizeof(P1), &CheckIntersect_Params.P1, sizeof(CheckIntersect_Params.P1));
	memcpy_s(&P2, sizeof(P2), &CheckIntersect_Params.P2, sizeof(CheckIntersect_Params.P2));
	memcpy_s(&p3, sizeof(p3), &CheckIntersect_Params.p3, sizeof(CheckIntersect_Params.p3));
	memcpy_s(&p4, sizeof(p4), &CheckIntersect_Params.p4, sizeof(CheckIntersect_Params.p4));

	return CheckIntersect_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_SetTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::AS_SetTimer(int32_t Time)
{
	static UFunction* uFnAS_SetTimer = nullptr;

	if (!uFnAS_SetTimer)
	{
		uFnAS_SetTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_SetTimer");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAS_SetTimer_Params AS_SetTimer_Params;
	memset(&AS_SetTimer_Params, 0, sizeof(AS_SetTimer_Params));
	memcpy_s(&AS_SetTimer_Params.Time, sizeof(AS_SetTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnAS_SetTimer, &AS_SetTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_SetCharaIconVisible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// uint32_t                       Visible                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::AS_SetCharaIconVisible(int32_t Index, bool Visible)
{
	static UFunction* uFnAS_SetCharaIconVisible = nullptr;

	if (!uFnAS_SetCharaIconVisible)
	{
		uFnAS_SetCharaIconVisible = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_SetCharaIconVisible");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAS_SetCharaIconVisible_Params AS_SetCharaIconVisible_Params;
	memset(&AS_SetCharaIconVisible_Params, 0, sizeof(AS_SetCharaIconVisible_Params));
	memcpy_s(&AS_SetCharaIconVisible_Params.Index, sizeof(AS_SetCharaIconVisible_Params.Index), &Index, sizeof(Index));
	AS_SetCharaIconVisible_Params.Visible = Visible;

	this->ProcessEvent(uFnAS_SetCharaIconVisible, &AS_SetCharaIconVisible_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_SetCharaIcon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::AS_SetCharaIcon(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaIcon = nullptr;

	if (!uFnAS_SetCharaIcon)
	{
		uFnAS_SetCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_SetCharaIcon");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAS_SetCharaIcon_Params AS_SetCharaIcon_Params;
	memset(&AS_SetCharaIcon_Params, 0, sizeof(AS_SetCharaIcon_Params));
	memcpy_s(&AS_SetCharaIcon_Params.Label, sizeof(AS_SetCharaIcon_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaIcon, &AS_SetCharaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_SetCharaIconsLabel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::AS_SetCharaIconsLabel(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaIconsLabel = nullptr;

	if (!uFnAS_SetCharaIconsLabel)
	{
		uFnAS_SetCharaIconsLabel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_SetCharaIconsLabel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAS_SetCharaIconsLabel_Params AS_SetCharaIconsLabel_Params;
	memset(&AS_SetCharaIconsLabel_Params, 0, sizeof(AS_SetCharaIconsLabel_Params));
	memcpy_s(&AS_SetCharaIconsLabel_Params.Label, sizeof(AS_SetCharaIconsLabel_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaIconsLabel, &AS_SetCharaIconsLabel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_FocusCharaIconPanelStop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::AS_FocusCharaIconPanelStop(const class FString& Label)
{
	static UFunction* uFnAS_FocusCharaIconPanelStop = nullptr;

	if (!uFnAS_FocusCharaIconPanelStop)
	{
		uFnAS_FocusCharaIconPanelStop = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_FocusCharaIconPanelStop");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAS_FocusCharaIconPanelStop_Params AS_FocusCharaIconPanelStop_Params;
	memset(&AS_FocusCharaIconPanelStop_Params, 0, sizeof(AS_FocusCharaIconPanelStop_Params));
	memcpy_s(&AS_FocusCharaIconPanelStop_Params.Label, sizeof(AS_FocusCharaIconPanelStop_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_FocusCharaIconPanelStop, &AS_FocusCharaIconPanelStop_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_FocusCharaIconStop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::AS_FocusCharaIconStop(const class FString& Label)
{
	static UFunction* uFnAS_FocusCharaIconStop = nullptr;

	if (!uFnAS_FocusCharaIconStop)
	{
		uFnAS_FocusCharaIconStop = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_FocusCharaIconStop");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAS_FocusCharaIconStop_Params AS_FocusCharaIconStop_Params;
	memset(&AS_FocusCharaIconStop_Params, 0, sizeof(AS_FocusCharaIconStop_Params));
	memcpy_s(&AS_FocusCharaIconStop_Params.Label, sizeof(AS_FocusCharaIconStop_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_FocusCharaIconStop, &AS_FocusCharaIconStop_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_FocusCharaIconPanelPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::AS_FocusCharaIconPanelPlay(const class FString& Label)
{
	static UFunction* uFnAS_FocusCharaIconPanelPlay = nullptr;

	if (!uFnAS_FocusCharaIconPanelPlay)
	{
		uFnAS_FocusCharaIconPanelPlay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_FocusCharaIconPanelPlay");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAS_FocusCharaIconPanelPlay_Params AS_FocusCharaIconPanelPlay_Params;
	memset(&AS_FocusCharaIconPanelPlay_Params, 0, sizeof(AS_FocusCharaIconPanelPlay_Params));
	memcpy_s(&AS_FocusCharaIconPanelPlay_Params.Label, sizeof(AS_FocusCharaIconPanelPlay_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_FocusCharaIconPanelPlay, &AS_FocusCharaIconPanelPlay_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_FocusCharaIconPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::AS_FocusCharaIconPlay(const class FString& Label)
{
	static UFunction* uFnAS_FocusCharaIconPlay = nullptr;

	if (!uFnAS_FocusCharaIconPlay)
	{
		uFnAS_FocusCharaIconPlay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AS_FocusCharaIconPlay");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAS_FocusCharaIconPlay_Params AS_FocusCharaIconPlay_Params;
	memset(&AS_FocusCharaIconPlay_Params, 0, sizeof(AS_FocusCharaIconPlay_Params));
	memcpy_s(&AS_FocusCharaIconPlay_Params.Label, sizeof(AS_FocusCharaIconPlay_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_FocusCharaIconPlay, &AS_FocusCharaIconPlay_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.IndexToDan
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelect::IndexToDan(int32_t Index)
{
	static UFunction* uFnIndexToDan = nullptr;

	if (!uFnIndexToDan)
	{
		uFnIndexToDan = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.IndexToDan");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execIndexToDan_Params IndexToDan_Params;
	memset(&IndexToDan_Params, 0, sizeof(IndexToDan_Params));
	memcpy_s(&IndexToDan_Params.Index, sizeof(IndexToDan_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIndexToDan, &IndexToDan_Params, nullptr);

	return IndexToDan_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.GetKismetObject
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    VarName                        (CPF_Parm)

class UObject* UREDGfxMoviePlayer_MenuCharaSelect::GetKismetObject(const class FName& VarName)
{
	static UFunction* uFnGetKismetObject = nullptr;

	if (!uFnGetKismetObject)
	{
		uFnGetKismetObject = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.GetKismetObject");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execGetKismetObject_Params GetKismetObject_Params;
	memset(&GetKismetObject_Params, 0, sizeof(GetKismetObject_Params));
	memcpy_s(&GetKismetObject_Params.VarName, sizeof(GetKismetObject_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetObject, &GetKismetObject_Params, nullptr);

	return GetKismetObject_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateGlobe
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateGlobe()
{
	static UFunction* uFnUpdateGlobe = nullptr;

	if (!uFnUpdateGlobe)
	{
		uFnUpdateGlobe = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateGlobe");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateGlobe_Params UpdateGlobe_Params;
	memset(&UpdateGlobe_Params, 0, sizeof(UpdateGlobe_Params));

	this->ProcessEvent(uFnUpdateGlobe, &UpdateGlobe_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.DecideGlobe
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::DecideGlobe()
{
	static UFunction* uFnDecideGlobe = nullptr;

	if (!uFnDecideGlobe)
	{
		uFnDecideGlobe = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.DecideGlobe");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execDecideGlobe_Params DecideGlobe_Params;
	memset(&DecideGlobe_Params, 0, sizeof(DecideGlobe_Params));

	this->ProcessEvent(uFnDecideGlobe, &DecideGlobe_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateTimer(int32_t Time)
{
	static UFunction* uFnUpdateTimer = nullptr;

	if (!uFnUpdateTimer)
	{
		uFnUpdateTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateTimer");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateTimer_Params UpdateTimer_Params;
	memset(&UpdateTimer_Params, 0, sizeof(UpdateTimer_Params));
	memcpy_s(&UpdateTimer_Params.Time, sizeof(UpdateTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateTimer, &UpdateTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetCharaIconFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::SetCharaIconFocus(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnSetCharaIconFocus = nullptr;

	if (!uFnSetCharaIconFocus)
	{
		uFnSetCharaIconFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetCharaIconFocus");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSetCharaIconFocus_Params SetCharaIconFocus_Params;
	memset(&SetCharaIconFocus_Params, 0, sizeof(SetCharaIconFocus_Params));
	memcpy_s(&SetCharaIconFocus_Params.Player, sizeof(SetCharaIconFocus_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCharaIconFocus_Params.CharaID, sizeof(SetCharaIconFocus_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSetCharaIconFocus, &SetCharaIconFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetCharaIconVisible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// uint32_t                       Visible                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::SetCharaIconVisible(int32_t Index, bool Visible)
{
	static UFunction* uFnSetCharaIconVisible = nullptr;

	if (!uFnSetCharaIconVisible)
	{
		uFnSetCharaIconVisible = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetCharaIconVisible");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSetCharaIconVisible_Params SetCharaIconVisible_Params;
	memset(&SetCharaIconVisible_Params, 0, sizeof(SetCharaIconVisible_Params));
	memcpy_s(&SetCharaIconVisible_Params.Index, sizeof(SetCharaIconVisible_Params.Index), &Index, sizeof(Index));
	SetCharaIconVisible_Params.Visible = Visible;

	this->ProcessEvent(uFnSetCharaIconVisible, &SetCharaIconVisible_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetupCharaIcon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::SetupCharaIcon(int32_t Index, const class FString& CharaID)
{
	static UFunction* uFnSetupCharaIcon = nullptr;

	if (!uFnSetupCharaIcon)
	{
		uFnSetupCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetupCharaIcon");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSetupCharaIcon_Params SetupCharaIcon_Params;
	memset(&SetupCharaIcon_Params, 0, sizeof(SetupCharaIcon_Params));
	memcpy_s(&SetupCharaIcon_Params.Index, sizeof(SetupCharaIcon_Params.Index), &Index, sizeof(Index));
	memcpy_s(&SetupCharaIcon_Params.CharaID, sizeof(SetupCharaIcon_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSetupCharaIcon, &SetupCharaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.IsExistCharaIcon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelect::IsExistCharaIcon(int32_t Index)
{
	static UFunction* uFnIsExistCharaIcon = nullptr;

	if (!uFnIsExistCharaIcon)
	{
		uFnIsExistCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.IsExistCharaIcon");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execIsExistCharaIcon_Params IsExistCharaIcon_Params;
	memset(&IsExistCharaIcon_Params, 0, sizeof(IsExistCharaIcon_Params));
	memcpy_s(&IsExistCharaIcon_Params.Index, sizeof(IsExistCharaIcon_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIsExistCharaIcon, &IsExistCharaIcon_Params, nullptr);

	return IsExistCharaIcon_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.EndAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::EndAnim()
{
	static UFunction* uFnEndAnim = nullptr;

	if (!uFnEndAnim)
	{
		uFnEndAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.EndAnim");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execEndAnim_Params EndAnim_Params;
	memset(&EndAnim_Params, 0, sizeof(EndAnim_Params));

	this->ProcessEvent(uFnEndAnim, &EndAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.StartAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::StartAnim()
{
	static UFunction* uFnStartAnim = nullptr;

	if (!uFnStartAnim)
	{
		uFnStartAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.StartAnim");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execStartAnim_Params StartAnim_Params;
	memset(&StartAnim_Params, 0, sizeof(StartAnim_Params));

	this->ProcessEvent(uFnStartAnim, &StartAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetCursorPos
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::SetCursorPos(EUE_PLAYER_ID Player, float X, float Y)
{
	static UFunction* uFnSetCursorPos = nullptr;

	if (!uFnSetCursorPos)
	{
		uFnSetCursorPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetCursorPos");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSetCursorPos_Params SetCursorPos_Params;
	memset(&SetCursorPos_Params, 0, sizeof(SetCursorPos_Params));
	memcpy_s(&SetCursorPos_Params.Player, sizeof(SetCursorPos_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCursorPos_Params.X, sizeof(SetCursorPos_Params.X), &X, sizeof(X));
	memcpy_s(&SetCursorPos_Params.Y, sizeof(SetCursorPos_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnSetCursorPos, &SetCursorPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.ShowCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       On                             (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::ShowCursor(EUE_PLAYER_ID Player, bool On)
{
	static UFunction* uFnShowCursor = nullptr;

	if (!uFnShowCursor)
	{
		uFnShowCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.ShowCursor");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execShowCursor_Params ShowCursor_Params;
	memset(&ShowCursor_Params, 0, sizeof(ShowCursor_Params));
	memcpy_s(&ShowCursor_Params.Player, sizeof(ShowCursor_Params.Player), &Player, sizeof(Player));
	ShowCursor_Params.On = On;

	this->ProcessEvent(uFnShowCursor, &ShowCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.ChangeCharaPicture
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// ECharaPictureState             State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::ChangeCharaPicture(EUE_PLAYER_ID Player, const class FString& CharaID, ECharaPictureState State)
{
	static UFunction* uFnChangeCharaPicture = nullptr;

	if (!uFnChangeCharaPicture)
	{
		uFnChangeCharaPicture = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.ChangeCharaPicture");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execChangeCharaPicture_Params ChangeCharaPicture_Params;
	memset(&ChangeCharaPicture_Params, 0, sizeof(ChangeCharaPicture_Params));
	memcpy_s(&ChangeCharaPicture_Params.Player, sizeof(ChangeCharaPicture_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ChangeCharaPicture_Params.CharaID, sizeof(ChangeCharaPicture_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&ChangeCharaPicture_Params.State, sizeof(ChangeCharaPicture_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnChangeCharaPicture, &ChangeCharaPicture_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateNewChallenger
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateNewChallenger()
{
	static UFunction* uFnUpdateNewChallenger = nullptr;

	if (!uFnUpdateNewChallenger)
	{
		uFnUpdateNewChallenger = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateNewChallenger");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateNewChallenger_Params UpdateNewChallenger_Params;
	memset(&UpdateNewChallenger_Params, 0, sizeof(UpdateNewChallenger_Params));

	this->ProcessEvent(uFnUpdateNewChallenger, &UpdateNewChallenger_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateCharaModel
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateCharaModel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnUpdateCharaModel = nullptr;

	if (!uFnUpdateCharaModel)
	{
		uFnUpdateCharaModel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateCharaModel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateCharaModel_Params UpdateCharaModel_Params;
	memset(&UpdateCharaModel_Params, 0, sizeof(UpdateCharaModel_Params));
	memcpy_s(&UpdateCharaModel_Params.Player, sizeof(UpdateCharaModel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateCharaModel, &UpdateCharaModel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetupEffect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        effIndex                       (CPF_Parm)
// struct FVector                 Loc                            (CPF_Parm)
// class FName                    effName                        (CPF_Parm)
// class FName                    motionName                     (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::SetupEffect(EUE_PLAYER_ID Player, int32_t effIndex, const struct FVector& Loc, const class FName& effName, const class FName& motionName, bool isLoop)
{
	static UFunction* uFnSetupEffect = nullptr;

	if (!uFnSetupEffect)
	{
		uFnSetupEffect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetupEffect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSetupEffect_Params SetupEffect_Params;
	memset(&SetupEffect_Params, 0, sizeof(SetupEffect_Params));
	memcpy_s(&SetupEffect_Params.Player, sizeof(SetupEffect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetupEffect_Params.effIndex, sizeof(SetupEffect_Params.effIndex), &effIndex, sizeof(effIndex));
	memcpy_s(&SetupEffect_Params.Loc, sizeof(SetupEffect_Params.Loc), &Loc, sizeof(Loc));
	memcpy_s(&SetupEffect_Params.effName, sizeof(SetupEffect_Params.effName), &effName, sizeof(effName));
	memcpy_s(&SetupEffect_Params.motionName, sizeof(SetupEffect_Params.motionName), &motionName, sizeof(motionName));
	SetupEffect_Params.isLoop = isLoop;

	this->ProcessEvent(uFnSetupEffect, &SetupEffect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateAsyncLoad
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  _CharaID                       (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        _ColorID                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateAsyncLoad(EUE_PLAYER_ID Player, const class FString& _CharaID, int32_t _ColorID)
{
	static UFunction* uFnUpdateAsyncLoad = nullptr;

	if (!uFnUpdateAsyncLoad)
	{
		uFnUpdateAsyncLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateAsyncLoad");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateAsyncLoad_Params UpdateAsyncLoad_Params;
	memset(&UpdateAsyncLoad_Params, 0, sizeof(UpdateAsyncLoad_Params));
	memcpy_s(&UpdateAsyncLoad_Params.Player, sizeof(UpdateAsyncLoad_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateAsyncLoad_Params._CharaID, sizeof(UpdateAsyncLoad_Params._CharaID), &_CharaID, sizeof(_CharaID));
	memcpy_s(&UpdateAsyncLoad_Params._ColorID, sizeof(UpdateAsyncLoad_Params._ColorID), &_ColorID, sizeof(_ColorID));

	this->ProcessEvent(uFnUpdateAsyncLoad, &UpdateAsyncLoad_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateReturnToMainMenu
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::Player_UpdateReturnToMainMenu(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateReturnToMainMenu = nullptr;

	if (!uFnPlayer_UpdateReturnToMainMenu)
	{
		uFnPlayer_UpdateReturnToMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateReturnToMainMenu");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPlayer_UpdateReturnToMainMenu_Params Player_UpdateReturnToMainMenu_Params;
	memset(&Player_UpdateReturnToMainMenu_Params, 0, sizeof(Player_UpdateReturnToMainMenu_Params));
	memcpy_s(&Player_UpdateReturnToMainMenu_Params.Player, sizeof(Player_UpdateReturnToMainMenu_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateReturnToMainMenu_Params.Param, sizeof(Player_UpdateReturnToMainMenu_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateReturnToMainMenu, &Player_UpdateReturnToMainMenu_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateReturnToMainMenu_Params.Param, sizeof(Player_UpdateReturnToMainMenu_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateBGSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::Player_UpdateBGSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateBGSelect = nullptr;

	if (!uFnPlayer_UpdateBGSelect)
	{
		uFnPlayer_UpdateBGSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateBGSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPlayer_UpdateBGSelect_Params Player_UpdateBGSelect_Params;
	memset(&Player_UpdateBGSelect_Params, 0, sizeof(Player_UpdateBGSelect_Params));
	memcpy_s(&Player_UpdateBGSelect_Params.Player, sizeof(Player_UpdateBGSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateBGSelect_Params.Param, sizeof(Player_UpdateBGSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateBGSelect, &Player_UpdateBGSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateBGSelect_Params.Param, sizeof(Player_UpdateBGSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateCustomMenu
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::Player_UpdateCustomMenu(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateCustomMenu = nullptr;

	if (!uFnPlayer_UpdateCustomMenu)
	{
		uFnPlayer_UpdateCustomMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateCustomMenu");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPlayer_UpdateCustomMenu_Params Player_UpdateCustomMenu_Params;
	memset(&Player_UpdateCustomMenu_Params, 0, sizeof(Player_UpdateCustomMenu_Params));
	memcpy_s(&Player_UpdateCustomMenu_Params.Player, sizeof(Player_UpdateCustomMenu_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateCustomMenu_Params.Param, sizeof(Player_UpdateCustomMenu_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateCustomMenu, &Player_UpdateCustomMenu_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateCustomMenu_Params.Param, sizeof(Player_UpdateCustomMenu_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateTrialSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::Player_UpdateTrialSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateTrialSelect = nullptr;

	if (!uFnPlayer_UpdateTrialSelect)
	{
		uFnPlayer_UpdateTrialSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateTrialSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPlayer_UpdateTrialSelect_Params Player_UpdateTrialSelect_Params;
	memset(&Player_UpdateTrialSelect_Params, 0, sizeof(Player_UpdateTrialSelect_Params));
	memcpy_s(&Player_UpdateTrialSelect_Params.Player, sizeof(Player_UpdateTrialSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateTrialSelect_Params.Param, sizeof(Player_UpdateTrialSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateTrialSelect, &Player_UpdateTrialSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateTrialSelect_Params.Param, sizeof(Player_UpdateTrialSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateCharaSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::Player_UpdateCharaSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateCharaSelect = nullptr;

	if (!uFnPlayer_UpdateCharaSelect)
	{
		uFnPlayer_UpdateCharaSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateCharaSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPlayer_UpdateCharaSelect_Params Player_UpdateCharaSelect_Params;
	memset(&Player_UpdateCharaSelect_Params, 0, sizeof(Player_UpdateCharaSelect_Params));
	memcpy_s(&Player_UpdateCharaSelect_Params.Player, sizeof(Player_UpdateCharaSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateCharaSelect_Params.Param, sizeof(Player_UpdateCharaSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateCharaSelect, &Player_UpdateCharaSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateCharaSelect_Params.Param, sizeof(Player_UpdateCharaSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_PrepareUpdateCharaSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::Player_PrepareUpdateCharaSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_PrepareUpdateCharaSelect = nullptr;

	if (!uFnPlayer_PrepareUpdateCharaSelect)
	{
		uFnPlayer_PrepareUpdateCharaSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_PrepareUpdateCharaSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPlayer_PrepareUpdateCharaSelect_Params Player_PrepareUpdateCharaSelect_Params;
	memset(&Player_PrepareUpdateCharaSelect_Params, 0, sizeof(Player_PrepareUpdateCharaSelect_Params));
	memcpy_s(&Player_PrepareUpdateCharaSelect_Params.Player, sizeof(Player_PrepareUpdateCharaSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_PrepareUpdateCharaSelect_Params.Param, sizeof(Player_PrepareUpdateCharaSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_PrepareUpdateCharaSelect, &Player_PrepareUpdateCharaSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_PrepareUpdateCharaSelect_Params.Param, sizeof(Player_PrepareUpdateCharaSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateCardLoad
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::Player_UpdateCardLoad(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateCardLoad = nullptr;

	if (!uFnPlayer_UpdateCardLoad)
	{
		uFnPlayer_UpdateCardLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_UpdateCardLoad");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPlayer_UpdateCardLoad_Params Player_UpdateCardLoad_Params;
	memset(&Player_UpdateCardLoad_Params, 0, sizeof(Player_UpdateCardLoad_Params));
	memcpy_s(&Player_UpdateCardLoad_Params.Player, sizeof(Player_UpdateCardLoad_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateCardLoad_Params.Param, sizeof(Player_UpdateCardLoad_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateCardLoad, &Player_UpdateCardLoad_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateCardLoad_Params.Param, sizeof(Player_UpdateCardLoad_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_InitCardLoad
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::Player_InitCardLoad(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_InitCardLoad = nullptr;

	if (!uFnPlayer_InitCardLoad)
	{
		uFnPlayer_InitCardLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.Player_InitCardLoad");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execPlayer_InitCardLoad_Params Player_InitCardLoad_Params;
	memset(&Player_InitCardLoad_Params, 0, sizeof(Player_InitCardLoad_Params));
	memcpy_s(&Player_InitCardLoad_Params.Player, sizeof(Player_InitCardLoad_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_InitCardLoad_Params.Param, sizeof(Player_InitCardLoad_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_InitCardLoad, &Player_InitCardLoad_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_InitCardLoad_Params.Param, sizeof(Player_InitCardLoad_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateFinish
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelect::UpdateFinish(bool bTrigger)
{
	static UFunction* uFnUpdateFinish = nullptr;

	if (!uFnUpdateFinish)
	{
		uFnUpdateFinish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateFinish");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateFinish_Params UpdateFinish_Params;
	memset(&UpdateFinish_Params, 0, sizeof(UpdateFinish_Params));
	UpdateFinish_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateFinish, &UpdateFinish_Params, nullptr);

	return UpdateFinish_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateModeSelect
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateModeSelect(bool bTrigger)
{
	static UFunction* uFnUpdateModeSelect = nullptr;

	if (!uFnUpdateModeSelect)
	{
		uFnUpdateModeSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateModeSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateModeSelect_Params UpdateModeSelect_Params;
	memset(&UpdateModeSelect_Params, 0, sizeof(UpdateModeSelect_Params));
	UpdateModeSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateModeSelect, &UpdateModeSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateCursorAnim
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateCursorAnim()
{
	static UFunction* uFnUpdateCursorAnim = nullptr;

	if (!uFnUpdateCursorAnim)
	{
		uFnUpdateCursorAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateCursorAnim");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateCursorAnim_Params UpdateCursorAnim_Params;
	memset(&UpdateCursorAnim_Params, 0, sizeof(UpdateCursorAnim_Params));

	this->ProcessEvent(uFnUpdateCursorAnim, &UpdateCursorAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateCharaSelect
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateCharaSelect(bool bTrigger)
{
	static UFunction* uFnUpdateCharaSelect = nullptr;

	if (!uFnUpdateCharaSelect)
	{
		uFnUpdateCharaSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateCharaSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateCharaSelect_Params UpdateCharaSelect_Params;
	memset(&UpdateCharaSelect_Params, 0, sizeof(UpdateCharaSelect_Params));
	UpdateCharaSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateCharaSelect, &UpdateCharaSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateStartDemo
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::UpdateStartDemo(bool bTrigger)
{
	static UFunction* uFnUpdateStartDemo = nullptr;

	if (!uFnUpdateStartDemo)
	{
		uFnUpdateStartDemo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.UpdateStartDemo");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execUpdateStartDemo_Params UpdateStartDemo_Params;
	memset(&UpdateStartDemo_Params, 0, sizeof(UpdateStartDemo_Params));
	UpdateStartDemo_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateStartDemo, &UpdateStartDemo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.FinalizeScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::FinalizeScene()
{
	static UFunction* uFnFinalizeScene = nullptr;

	if (!uFnFinalizeScene)
	{
		uFnFinalizeScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.FinalizeScene");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execFinalizeScene_Params FinalizeScene_Params;
	memset(&FinalizeScene_Params, 0, sizeof(FinalizeScene_Params));

	this->ProcessEvent(uFnFinalizeScene, &FinalizeScene_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.InitializeScene
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::InitializeScene()
{
	static UFunction* uFnInitializeScene = nullptr;

	if (!uFnInitializeScene)
	{
		uFnInitializeScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.InitializeScene");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execInitializeScene_Params InitializeScene_Params;
	memset(&InitializeScene_Params, 0, sizeof(InitializeScene_Params));

	this->ProcessEvent(uFnInitializeScene, &InitializeScene_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.CancelExecCommon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       IsFinish                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::CancelExecCommon(EUE_PLAYER_ID Player, bool IsFinish)
{
	static UFunction* uFnCancelExecCommon = nullptr;

	if (!uFnCancelExecCommon)
	{
		uFnCancelExecCommon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.CancelExecCommon");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execCancelExecCommon_Params CancelExecCommon_Params;
	memset(&CancelExecCommon_Params, 0, sizeof(CancelExecCommon_Params));
	memcpy_s(&CancelExecCommon_Params.Player, sizeof(CancelExecCommon_Params.Player), &Player, sizeof(Player));
	CancelExecCommon_Params.IsFinish = IsFinish;

	this->ProcessEvent(uFnCancelExecCommon, &CancelExecCommon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.IsCancelTrig
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelect::IsCancelTrig(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsCancelTrig = nullptr;

	if (!uFnIsCancelTrig)
	{
		uFnIsCancelTrig = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.IsCancelTrig");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execIsCancelTrig_Params IsCancelTrig_Params;
	memset(&IsCancelTrig_Params, 0, sizeof(IsCancelTrig_Params));
	memcpy_s(&IsCancelTrig_Params.Player, sizeof(IsCancelTrig_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsCancelTrig, &IsCancelTrig_Params, nullptr);

	return IsCancelTrig_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.ResetAsyncData
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::ResetAsyncData(EUE_PLAYER_ID Player)
{
	static UFunction* uFnResetAsyncData = nullptr;

	if (!uFnResetAsyncData)
	{
		uFnResetAsyncData = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.ResetAsyncData");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execResetAsyncData_Params ResetAsyncData_Params;
	memset(&ResetAsyncData_Params, 0, sizeof(ResetAsyncData_Params));
	memcpy_s(&ResetAsyncData_Params.Player, sizeof(ResetAsyncData_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnResetAsyncData, &ResetAsyncData_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.IsTimeLimit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelect::IsTimeLimit()
{
	static UFunction* uFnIsTimeLimit = nullptr;

	if (!uFnIsTimeLimit)
	{
		uFnIsTimeLimit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.IsTimeLimit");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execIsTimeLimit_Params IsTimeLimit_Params;
	memset(&IsTimeLimit_Params, 0, sizeof(IsTimeLimit_Params));

	this->ProcessEvent(uFnIsTimeLimit, &IsTimeLimit_Params, nullptr);

	return IsTimeLimit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetupCharaCursorFromChara
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::SetupCharaCursorFromChara(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnSetupCharaCursorFromChara = nullptr;

	if (!uFnSetupCharaCursorFromChara)
	{
		uFnSetupCharaCursorFromChara = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetupCharaCursorFromChara");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSetupCharaCursorFromChara_Params SetupCharaCursorFromChara_Params;
	memset(&SetupCharaCursorFromChara_Params, 0, sizeof(SetupCharaCursorFromChara_Params));
	memcpy_s(&SetupCharaCursorFromChara_Params.Player, sizeof(SetupCharaCursorFromChara_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetupCharaCursorFromChara_Params.CharaID, sizeof(SetupCharaCursorFromChara_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSetupCharaCursorFromChara, &SetupCharaCursorFromChara_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetupCharaCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::SetupCharaCursor(EUE_PLAYER_ID Player)
{
	static UFunction* uFnSetupCharaCursor = nullptr;

	if (!uFnSetupCharaCursor)
	{
		uFnSetupCharaCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetupCharaCursor");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSetupCharaCursor_Params SetupCharaCursor_Params;
	memset(&SetupCharaCursor_Params, 0, sizeof(SetupCharaCursor_Params));
	memcpy_s(&SetupCharaCursor_Params.Player, sizeof(SetupCharaCursor_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSetupCharaCursor, &SetupCharaCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AddCharacterParam
// [0x00424002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        PanelIndex                     (CPF_Parm)
// uint32_t                       isRandom                       (CPF_OptionalParm | CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectCharacterParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect::AddCharacterParam(const class FString& CharaID, int32_t PanelIndex, bool isRandom, struct UREDGfxMoviePlayer_MenuCharaSelect_FCharaSelectCharacterParam& Param)
{
	static UFunction* uFnAddCharacterParam = nullptr;

	if (!uFnAddCharacterParam)
	{
		uFnAddCharacterParam = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AddCharacterParam");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAddCharacterParam_Params AddCharacterParam_Params;
	memset(&AddCharacterParam_Params, 0, sizeof(AddCharacterParam_Params));
	memcpy_s(&AddCharacterParam_Params.CharaID, sizeof(AddCharacterParam_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&AddCharacterParam_Params.PanelIndex, sizeof(AddCharacterParam_Params.PanelIndex), &PanelIndex, sizeof(PanelIndex));
	AddCharacterParam_Params.isRandom = isRandom;
	memcpy_s(&AddCharacterParam_Params.Param, sizeof(AddCharacterParam_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnAddCharacterParam, &AddCharacterParam_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &AddCharacterParam_Params.Param, sizeof(AddCharacterParam_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SearchAsyncLoadColorCache
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDCharaAsset*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

class UREDCharaAsset* UREDGfxMoviePlayer_MenuCharaSelect::SearchAsyncLoadColorCache(const class FString& CharaID)
{
	static UFunction* uFnSearchAsyncLoadColorCache = nullptr;

	if (!uFnSearchAsyncLoadColorCache)
	{
		uFnSearchAsyncLoadColorCache = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SearchAsyncLoadColorCache");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSearchAsyncLoadColorCache_Params SearchAsyncLoadColorCache_Params;
	memset(&SearchAsyncLoadColorCache_Params, 0, sizeof(SearchAsyncLoadColorCache_Params));
	memcpy_s(&SearchAsyncLoadColorCache_Params.CharaID, sizeof(SearchAsyncLoadColorCache_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSearchAsyncLoadColorCache, &SearchAsyncLoadColorCache_Params, nullptr);

	return SearchAsyncLoadColorCache_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AddAsyncLoadColorCache
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// class UREDCharaAsset*          Asset                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::AddAsyncLoadColorCache(const class FString& CharaID, class UREDCharaAsset* Asset)
{
	static UFunction* uFnAddAsyncLoadColorCache = nullptr;

	if (!uFnAddAsyncLoadColorCache)
	{
		uFnAddAsyncLoadColorCache = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AddAsyncLoadColorCache");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAddAsyncLoadColorCache_Params AddAsyncLoadColorCache_Params;
	memset(&AddAsyncLoadColorCache_Params, 0, sizeof(AddAsyncLoadColorCache_Params));
	memcpy_s(&AddAsyncLoadColorCache_Params.CharaID, sizeof(AddAsyncLoadColorCache_Params.CharaID), &CharaID, sizeof(CharaID));
	AddAsyncLoadColorCache_Params.Asset = Asset;

	this->ProcessEvent(uFnAddAsyncLoadColorCache, &AddAsyncLoadColorCache_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SearchAsyncLoadCharaCache
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDCharaAsset*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

class UREDCharaAsset* UREDGfxMoviePlayer_MenuCharaSelect::SearchAsyncLoadCharaCache(const class FString& CharaID)
{
	static UFunction* uFnSearchAsyncLoadCharaCache = nullptr;

	if (!uFnSearchAsyncLoadCharaCache)
	{
		uFnSearchAsyncLoadCharaCache = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SearchAsyncLoadCharaCache");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSearchAsyncLoadCharaCache_Params SearchAsyncLoadCharaCache_Params;
	memset(&SearchAsyncLoadCharaCache_Params, 0, sizeof(SearchAsyncLoadCharaCache_Params));
	memcpy_s(&SearchAsyncLoadCharaCache_Params.CharaID, sizeof(SearchAsyncLoadCharaCache_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSearchAsyncLoadCharaCache, &SearchAsyncLoadCharaCache_Params, nullptr);

	return SearchAsyncLoadCharaCache_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AddAsyncLoadCharaCache
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// class UREDCharaAsset*          Asset                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect::AddAsyncLoadCharaCache(const class FString& CharaID, class UREDCharaAsset* Asset)
{
	static UFunction* uFnAddAsyncLoadCharaCache = nullptr;

	if (!uFnAddAsyncLoadCharaCache)
	{
		uFnAddAsyncLoadCharaCache = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.AddAsyncLoadCharaCache");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execAddAsyncLoadCharaCache_Params AddAsyncLoadCharaCache_Params;
	memset(&AddAsyncLoadCharaCache_Params, 0, sizeof(AddAsyncLoadCharaCache_Params));
	memcpy_s(&AddAsyncLoadCharaCache_Params.CharaID, sizeof(AddAsyncLoadCharaCache_Params.CharaID), &CharaID, sizeof(CharaID));
	AddAsyncLoadCharaCache_Params.Asset = Asset;

	this->ProcessEvent(uFnAddAsyncLoadCharaCache, &AddAsyncLoadCharaCache_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.OnClose");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetNetworkNextScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_SCENE_ID                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_SCENE_ID UREDGfxMoviePlayer_MenuCharaSelect::SetNetworkNextScene()
{
	static UFunction* uFnSetNetworkNextScene = nullptr;

	if (!uFnSetNetworkNextScene)
	{
		uFnSetNetworkNextScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.SetNetworkNextScene");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execSetNetworkNextScene_Params SetNetworkNextScene_Params;
	memset(&SetNetworkNextScene_Params, 0, sizeof(SetNetworkNextScene_Params));

	this->ProcessEvent(uFnSetNetworkNextScene, &SetNetworkNextScene_Params, nullptr);

	return static_cast<EUE_SCENE_ID>(SetNetworkNextScene_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.GetSelectCharaID
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

class FString UREDGfxMoviePlayer_MenuCharaSelect::eventGetSelectCharaID(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetSelectCharaID = nullptr;

	if (!uFnGetSelectCharaID)
	{
		uFnGetSelectCharaID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.GetSelectCharaID");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_eventGetSelectCharaID_Params GetSelectCharaID_Params;
	memset(&GetSelectCharaID_Params, 0, sizeof(GetSelectCharaID_Params));
	memcpy_s(&GetSelectCharaID_Params.Player, sizeof(GetSelectCharaID_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetSelectCharaID, &GetSelectCharaID_Params, nullptr);

	return GetSelectCharaID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.ReqGarbageCollection
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect::ReqGarbageCollection()
{
	static UFunction* uFnReqGarbageCollection = nullptr;

	if (!uFnReqGarbageCollection)
	{
		uFnReqGarbageCollection = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect.ReqGarbageCollection");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_execReqGarbageCollection_Params ReqGarbageCollection_Params;
	memset(&ReqGarbageCollection_Params, 0, sizeof(ReqGarbageCollection_Params));

	this->ProcessEvent(uFnReqGarbageCollection, &ReqGarbageCollection_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCursorPos
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_SetCursorPos(EUE_PLAYER_ID Player, float X, float Y)
{
	static UFunction* uFnAS_SetCursorPos = nullptr;

	if (!uFnAS_SetCursorPos)
	{
		uFnAS_SetCursorPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCursorPos");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_SetCursorPos_Params AS_SetCursorPos_Params;
	memset(&AS_SetCursorPos_Params, 0, sizeof(AS_SetCursorPos_Params));
	memcpy_s(&AS_SetCursorPos_Params.Player, sizeof(AS_SetCursorPos_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AS_SetCursorPos_Params.X, sizeof(AS_SetCursorPos_Params.X), &X, sizeof(X));
	memcpy_s(&AS_SetCursorPos_Params.Y, sizeof(AS_SetCursorPos_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnAS_SetCursorPos, &AS_SetCursorPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_ShowCursorLabelStop2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_ShowCursorLabelStop2P(const class FString& Label)
{
	static UFunction* uFnAS_ShowCursorLabelStop2P = nullptr;

	if (!uFnAS_ShowCursorLabelStop2P)
	{
		uFnAS_ShowCursorLabelStop2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_ShowCursorLabelStop2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_ShowCursorLabelStop2P_Params AS_ShowCursorLabelStop2P_Params;
	memset(&AS_ShowCursorLabelStop2P_Params, 0, sizeof(AS_ShowCursorLabelStop2P_Params));
	memcpy_s(&AS_ShowCursorLabelStop2P_Params.Label, sizeof(AS_ShowCursorLabelStop2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_ShowCursorLabelStop2P, &AS_ShowCursorLabelStop2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_ShowCursorLabelStop1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_ShowCursorLabelStop1P(const class FString& Label)
{
	static UFunction* uFnAS_ShowCursorLabelStop1P = nullptr;

	if (!uFnAS_ShowCursorLabelStop1P)
	{
		uFnAS_ShowCursorLabelStop1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_ShowCursorLabelStop1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_ShowCursorLabelStop1P_Params AS_ShowCursorLabelStop1P_Params;
	memset(&AS_ShowCursorLabelStop1P_Params, 0, sizeof(AS_ShowCursorLabelStop1P_Params));
	memcpy_s(&AS_ShowCursorLabelStop1P_Params.Label, sizeof(AS_ShowCursorLabelStop1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_ShowCursorLabelStop1P, &AS_ShowCursorLabelStop1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_ShowCursorLabelPlay2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_ShowCursorLabelPlay2P(const class FString& Label)
{
	static UFunction* uFnAS_ShowCursorLabelPlay2P = nullptr;

	if (!uFnAS_ShowCursorLabelPlay2P)
	{
		uFnAS_ShowCursorLabelPlay2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_ShowCursorLabelPlay2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_ShowCursorLabelPlay2P_Params AS_ShowCursorLabelPlay2P_Params;
	memset(&AS_ShowCursorLabelPlay2P_Params, 0, sizeof(AS_ShowCursorLabelPlay2P_Params));
	memcpy_s(&AS_ShowCursorLabelPlay2P_Params.Label, sizeof(AS_ShowCursorLabelPlay2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_ShowCursorLabelPlay2P, &AS_ShowCursorLabelPlay2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_ShowCursorLabelPlay1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_ShowCursorLabelPlay1P(const class FString& Label)
{
	static UFunction* uFnAS_ShowCursorLabelPlay1P = nullptr;

	if (!uFnAS_ShowCursorLabelPlay1P)
	{
		uFnAS_ShowCursorLabelPlay1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_ShowCursorLabelPlay1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_ShowCursorLabelPlay1P_Params AS_ShowCursorLabelPlay1P_Params;
	memset(&AS_ShowCursorLabelPlay1P_Params, 0, sizeof(AS_ShowCursorLabelPlay1P_Params));
	memcpy_s(&AS_ShowCursorLabelPlay1P_Params.Label, sizeof(AS_ShowCursorLabelPlay1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_ShowCursorLabelPlay1P, &AS_ShowCursorLabelPlay1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCharaPictureLabelStop2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_SetCharaPictureLabelStop2P(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaPictureLabelStop2P = nullptr;

	if (!uFnAS_SetCharaPictureLabelStop2P)
	{
		uFnAS_SetCharaPictureLabelStop2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCharaPictureLabelStop2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_SetCharaPictureLabelStop2P_Params AS_SetCharaPictureLabelStop2P_Params;
	memset(&AS_SetCharaPictureLabelStop2P_Params, 0, sizeof(AS_SetCharaPictureLabelStop2P_Params));
	memcpy_s(&AS_SetCharaPictureLabelStop2P_Params.Label, sizeof(AS_SetCharaPictureLabelStop2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaPictureLabelStop2P, &AS_SetCharaPictureLabelStop2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCharaPictureLabelStop1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_SetCharaPictureLabelStop1P(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaPictureLabelStop1P = nullptr;

	if (!uFnAS_SetCharaPictureLabelStop1P)
	{
		uFnAS_SetCharaPictureLabelStop1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCharaPictureLabelStop1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_SetCharaPictureLabelStop1P_Params AS_SetCharaPictureLabelStop1P_Params;
	memset(&AS_SetCharaPictureLabelStop1P_Params, 0, sizeof(AS_SetCharaPictureLabelStop1P_Params));
	memcpy_s(&AS_SetCharaPictureLabelStop1P_Params.Label, sizeof(AS_SetCharaPictureLabelStop1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaPictureLabelStop1P, &AS_SetCharaPictureLabelStop1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCharaPictureLabelPlay2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_SetCharaPictureLabelPlay2P(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaPictureLabelPlay2P = nullptr;

	if (!uFnAS_SetCharaPictureLabelPlay2P)
	{
		uFnAS_SetCharaPictureLabelPlay2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCharaPictureLabelPlay2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_SetCharaPictureLabelPlay2P_Params AS_SetCharaPictureLabelPlay2P_Params;
	memset(&AS_SetCharaPictureLabelPlay2P_Params, 0, sizeof(AS_SetCharaPictureLabelPlay2P_Params));
	memcpy_s(&AS_SetCharaPictureLabelPlay2P_Params.Label, sizeof(AS_SetCharaPictureLabelPlay2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaPictureLabelPlay2P, &AS_SetCharaPictureLabelPlay2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCharaPictureLabelPlay1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_SetCharaPictureLabelPlay1P(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaPictureLabelPlay1P = nullptr;

	if (!uFnAS_SetCharaPictureLabelPlay1P)
	{
		uFnAS_SetCharaPictureLabelPlay1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_SetCharaPictureLabelPlay1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_SetCharaPictureLabelPlay1P_Params AS_SetCharaPictureLabelPlay1P_Params;
	memset(&AS_SetCharaPictureLabelPlay1P_Params, 0, sizeof(AS_SetCharaPictureLabelPlay1P_Params));
	memcpy_s(&AS_SetCharaPictureLabelPlay1P_Params.Label, sizeof(AS_SetCharaPictureLabelPlay1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaPictureLabelPlay1P, &AS_SetCharaPictureLabelPlay1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_CharaNameLabelStop2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_CharaNameLabelStop2P(const class FString& CharaID)
{
	static UFunction* uFnAS_CharaNameLabelStop2P = nullptr;

	if (!uFnAS_CharaNameLabelStop2P)
	{
		uFnAS_CharaNameLabelStop2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_CharaNameLabelStop2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_CharaNameLabelStop2P_Params AS_CharaNameLabelStop2P_Params;
	memset(&AS_CharaNameLabelStop2P_Params, 0, sizeof(AS_CharaNameLabelStop2P_Params));
	memcpy_s(&AS_CharaNameLabelStop2P_Params.CharaID, sizeof(AS_CharaNameLabelStop2P_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnAS_CharaNameLabelStop2P, &AS_CharaNameLabelStop2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_CharaNameLabelStop1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_CharaNameLabelStop1P(const class FString& CharaID)
{
	static UFunction* uFnAS_CharaNameLabelStop1P = nullptr;

	if (!uFnAS_CharaNameLabelStop1P)
	{
		uFnAS_CharaNameLabelStop1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_CharaNameLabelStop1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_CharaNameLabelStop1P_Params AS_CharaNameLabelStop1P_Params;
	memset(&AS_CharaNameLabelStop1P_Params, 0, sizeof(AS_CharaNameLabelStop1P_Params));
	memcpy_s(&AS_CharaNameLabelStop1P_Params.CharaID, sizeof(AS_CharaNameLabelStop1P_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnAS_CharaNameLabelStop1P, &AS_CharaNameLabelStop1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_CharaNameLabelPlay2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_CharaNameLabelPlay2P(const class FString& CharaID)
{
	static UFunction* uFnAS_CharaNameLabelPlay2P = nullptr;

	if (!uFnAS_CharaNameLabelPlay2P)
	{
		uFnAS_CharaNameLabelPlay2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_CharaNameLabelPlay2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_CharaNameLabelPlay2P_Params AS_CharaNameLabelPlay2P_Params;
	memset(&AS_CharaNameLabelPlay2P_Params, 0, sizeof(AS_CharaNameLabelPlay2P_Params));
	memcpy_s(&AS_CharaNameLabelPlay2P_Params.CharaID, sizeof(AS_CharaNameLabelPlay2P_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnAS_CharaNameLabelPlay2P, &AS_CharaNameLabelPlay2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_CharaNameLabelPlay1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::AS_CharaNameLabelPlay1P(const class FString& CharaID)
{
	static UFunction* uFnAS_CharaNameLabelPlay1P = nullptr;

	if (!uFnAS_CharaNameLabelPlay1P)
	{
		uFnAS_CharaNameLabelPlay1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.AS_CharaNameLabelPlay1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execAS_CharaNameLabelPlay1P_Params AS_CharaNameLabelPlay1P_Params;
	memset(&AS_CharaNameLabelPlay1P_Params, 0, sizeof(AS_CharaNameLabelPlay1P_Params));
	memcpy_s(&AS_CharaNameLabelPlay1P_Params.CharaID, sizeof(AS_CharaNameLabelPlay1P_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnAS_CharaNameLabelPlay1P, &AS_CharaNameLabelPlay1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.EndChallengeAchievementRate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectFront::EndChallengeAchievementRate()
{
	static UFunction* uFnEndChallengeAchievementRate = nullptr;

	if (!uFnEndChallengeAchievementRate)
	{
		uFnEndChallengeAchievementRate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.EndChallengeAchievementRate");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execEndChallengeAchievementRate_Params EndChallengeAchievementRate_Params;
	memset(&EndChallengeAchievementRate_Params, 0, sizeof(EndChallengeAchievementRate_Params));

	this->ProcessEvent(uFnEndChallengeAchievementRate, &EndChallengeAchievementRate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.ShowChallengeAchievementRate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Num                            (CPF_Parm)
// int32_t                        numAll                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectFront::ShowChallengeAchievementRate(int32_t Num, int32_t numAll)
{
	static UFunction* uFnShowChallengeAchievementRate = nullptr;

	if (!uFnShowChallengeAchievementRate)
	{
		uFnShowChallengeAchievementRate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.ShowChallengeAchievementRate");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execShowChallengeAchievementRate_Params ShowChallengeAchievementRate_Params;
	memset(&ShowChallengeAchievementRate_Params, 0, sizeof(ShowChallengeAchievementRate_Params));
	memcpy_s(&ShowChallengeAchievementRate_Params.Num, sizeof(ShowChallengeAchievementRate_Params.Num), &Num, sizeof(Num));
	memcpy_s(&ShowChallengeAchievementRate_Params.numAll, sizeof(ShowChallengeAchievementRate_Params.numAll), &numAll, sizeof(numAll));

	this->ProcessEvent(uFnShowChallengeAchievementRate, &ShowChallengeAchievementRate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.SetCursorPos
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectFront::SetCursorPos(EUE_PLAYER_ID Player, float X, float Y)
{
	static UFunction* uFnSetCursorPos = nullptr;

	if (!uFnSetCursorPos)
	{
		uFnSetCursorPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.SetCursorPos");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execSetCursorPos_Params SetCursorPos_Params;
	memset(&SetCursorPos_Params, 0, sizeof(SetCursorPos_Params));
	memcpy_s(&SetCursorPos_Params.Player, sizeof(SetCursorPos_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCursorPos_Params.X, sizeof(SetCursorPos_Params.X), &X, sizeof(X));
	memcpy_s(&SetCursorPos_Params.Y, sizeof(SetCursorPos_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnSetCursorPos, &SetCursorPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.ShowCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       On                             (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectFront::ShowCursor(EUE_PLAYER_ID Player, bool On)
{
	static UFunction* uFnShowCursor = nullptr;

	if (!uFnShowCursor)
	{
		uFnShowCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.ShowCursor");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execShowCursor_Params ShowCursor_Params;
	memset(&ShowCursor_Params, 0, sizeof(ShowCursor_Params));
	memcpy_s(&ShowCursor_Params.Player, sizeof(ShowCursor_Params.Player), &Player, sizeof(Player));
	ShowCursor_Params.On = On;

	this->ProcessEvent(uFnShowCursor, &ShowCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.SetCharaPictureLabel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bStop                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectFront::SetCharaPictureLabel(EUE_PLAYER_ID Player, const class FString& Label, bool bStop)
{
	static UFunction* uFnSetCharaPictureLabel = nullptr;

	if (!uFnSetCharaPictureLabel)
	{
		uFnSetCharaPictureLabel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.SetCharaPictureLabel");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execSetCharaPictureLabel_Params SetCharaPictureLabel_Params;
	memset(&SetCharaPictureLabel_Params, 0, sizeof(SetCharaPictureLabel_Params));
	memcpy_s(&SetCharaPictureLabel_Params.Player, sizeof(SetCharaPictureLabel_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCharaPictureLabel_Params.Label, sizeof(SetCharaPictureLabel_Params.Label), &Label, sizeof(Label));
	SetCharaPictureLabel_Params.bStop = bStop;

	this->ProcessEvent(uFnSetCharaPictureLabel, &SetCharaPictureLabel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.ChangeCharaName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelectFront::ChangeCharaName(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnChangeCharaName = nullptr;

	if (!uFnChangeCharaName)
	{
		uFnChangeCharaName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.ChangeCharaName");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execChangeCharaName_Params ChangeCharaName_Params;
	memset(&ChangeCharaName_Params, 0, sizeof(ChangeCharaName_Params));
	memcpy_s(&ChangeCharaName_Params.Player, sizeof(ChangeCharaName_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ChangeCharaName_Params.CharaID, sizeof(ChangeCharaName_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnChangeCharaName, &ChangeCharaName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.OnUpdate
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelectFront::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.OnInitialize
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelectFront::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelectFront.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuCharaSelectFront_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ExternalMOMSetEnemyCursor
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventExternalMOMSetEnemyCursor(const class FString& CharaID)
{
	static UFunction* uFnExternalMOMSetEnemyCursor = nullptr;

	if (!uFnExternalMOMSetEnemyCursor)
	{
		uFnExternalMOMSetEnemyCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ExternalMOMSetEnemyCursor");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventExternalMOMSetEnemyCursor_Params ExternalMOMSetEnemyCursor_Params;
	memset(&ExternalMOMSetEnemyCursor_Params, 0, sizeof(ExternalMOMSetEnemyCursor_Params));
	memcpy_s(&ExternalMOMSetEnemyCursor_Params.CharaID, sizeof(ExternalMOMSetEnemyCursor_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnExternalMOMSetEnemyCursor, &ExternalMOMSetEnemyCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.DrawDebugHitRect
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::DrawDebugHitRect()
{
	static UFunction* uFnDrawDebugHitRect = nullptr;

	if (!uFnDrawDebugHitRect)
	{
		uFnDrawDebugHitRect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.DrawDebugHitRect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execDrawDebugHitRect_Params DrawDebugHitRect_Params;
	memset(&DrawDebugHitRect_Params, 0, sizeof(DrawDebugHitRect_Params));

	this->ProcessEvent(uFnDrawDebugHitRect, &DrawDebugHitRect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Vect2dIntersection
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// struct FVector2D               ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               A1                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               A2                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               b1                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               b2                             (CPF_Const | CPF_Parm | CPF_OutParm)

struct FVector2D UREDGfxMoviePlayer_MenuCharaSelect_AC20::Vect2dIntersection(struct FVector2D& A1, struct FVector2D& A2, struct FVector2D& b1, struct FVector2D& b2)
{
	static UFunction* uFnVect2dIntersection = nullptr;

	if (!uFnVect2dIntersection)
	{
		uFnVect2dIntersection = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Vect2dIntersection");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execVect2dIntersection_Params Vect2dIntersection_Params;
	memset(&Vect2dIntersection_Params, 0, sizeof(Vect2dIntersection_Params));
	memcpy_s(&Vect2dIntersection_Params.A1, sizeof(Vect2dIntersection_Params.A1), &A1, sizeof(A1));
	memcpy_s(&Vect2dIntersection_Params.A2, sizeof(Vect2dIntersection_Params.A2), &A2, sizeof(A2));
	memcpy_s(&Vect2dIntersection_Params.b1, sizeof(Vect2dIntersection_Params.b1), &b1, sizeof(b1));
	memcpy_s(&Vect2dIntersection_Params.b2, sizeof(Vect2dIntersection_Params.b2), &b2, sizeof(b2));

	this->ProcessEvent(uFnVect2dIntersection, &Vect2dIntersection_Params, nullptr);

	memcpy_s(&A1, sizeof(A1), &Vect2dIntersection_Params.A1, sizeof(Vect2dIntersection_Params.A1));
	memcpy_s(&A2, sizeof(A2), &Vect2dIntersection_Params.A2, sizeof(Vect2dIntersection_Params.A2));
	memcpy_s(&b1, sizeof(b1), &Vect2dIntersection_Params.b1, sizeof(Vect2dIntersection_Params.b1));
	memcpy_s(&b2, sizeof(b2), &Vect2dIntersection_Params.b2, sizeof(Vect2dIntersection_Params.b2));

	return Vect2dIntersection_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.cross2d
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               A                              (CPF_Parm)
// struct FVector2D               B                              (CPF_Parm)

float UREDGfxMoviePlayer_MenuCharaSelect_AC20::cross2d(const struct FVector2D& A, const struct FVector2D& B)
{
	static UFunction* uFncross2d = nullptr;

	if (!uFncross2d)
	{
		uFncross2d = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.cross2d");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execcross2d_Params cross2d_Params;
	memset(&cross2d_Params, 0, sizeof(cross2d_Params));
	memcpy_s(&cross2d_Params.A, sizeof(cross2d_Params.A), &A, sizeof(A));
	memcpy_s(&cross2d_Params.B, sizeof(cross2d_Params.B), &B, sizeof(B));

	this->ProcessEvent(uFncross2d, &cross2d_Params, nullptr);

	return cross2d_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.PosIncludeRectangle
// [0x00C40003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPanelRectParam Param                          (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               xp                             (CPF_Const | CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::PosIncludeRectangle(struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPanelRectParam& Param, struct FVector2D& xp)
{
	static UFunction* uFnPosIncludeRectangle = nullptr;

	if (!uFnPosIncludeRectangle)
	{
		uFnPosIncludeRectangle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.PosIncludeRectangle");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPosIncludeRectangle_Params PosIncludeRectangle_Params;
	memset(&PosIncludeRectangle_Params, 0, sizeof(PosIncludeRectangle_Params));
	memcpy_s(&PosIncludeRectangle_Params.Param, sizeof(PosIncludeRectangle_Params.Param), &Param, sizeof(Param));
	memcpy_s(&PosIncludeRectangle_Params.xp, sizeof(PosIncludeRectangle_Params.xp), &xp, sizeof(xp));

	this->ProcessEvent(uFnPosIncludeRectangle, &PosIncludeRectangle_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &PosIncludeRectangle_Params.Param, sizeof(PosIncludeRectangle_Params.Param));
	memcpy_s(&xp, sizeof(xp), &PosIncludeRectangle_Params.xp, sizeof(PosIncludeRectangle_Params.xp));

	return PosIncludeRectangle_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.GetHitRectangle
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bRandom                        (CPF_Parm)
// struct FVector2D               Pos1                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               Pos2                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               pos3                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               pos4                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               pos5                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               pos6                           (CPF_Parm | CPF_OutParm)
// struct FVector2D               Origin                         (CPF_Const | CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::GetHitRectangle(bool bRandom, struct FVector2D& Pos1, struct FVector2D& Pos2, struct FVector2D& pos3, struct FVector2D& pos4, struct FVector2D& pos5, struct FVector2D& pos6, struct FVector2D& Origin)
{
	static UFunction* uFnGetHitRectangle = nullptr;

	if (!uFnGetHitRectangle)
	{
		uFnGetHitRectangle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.GetHitRectangle");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execGetHitRectangle_Params GetHitRectangle_Params;
	memset(&GetHitRectangle_Params, 0, sizeof(GetHitRectangle_Params));
	GetHitRectangle_Params.bRandom = bRandom;
	memcpy_s(&GetHitRectangle_Params.Pos1, sizeof(GetHitRectangle_Params.Pos1), &Pos1, sizeof(Pos1));
	memcpy_s(&GetHitRectangle_Params.Pos2, sizeof(GetHitRectangle_Params.Pos2), &Pos2, sizeof(Pos2));
	memcpy_s(&GetHitRectangle_Params.pos3, sizeof(GetHitRectangle_Params.pos3), &pos3, sizeof(pos3));
	memcpy_s(&GetHitRectangle_Params.pos4, sizeof(GetHitRectangle_Params.pos4), &pos4, sizeof(pos4));
	memcpy_s(&GetHitRectangle_Params.pos5, sizeof(GetHitRectangle_Params.pos5), &pos5, sizeof(pos5));
	memcpy_s(&GetHitRectangle_Params.pos6, sizeof(GetHitRectangle_Params.pos6), &pos6, sizeof(pos6));
	memcpy_s(&GetHitRectangle_Params.Origin, sizeof(GetHitRectangle_Params.Origin), &Origin, sizeof(Origin));

	this->ProcessEvent(uFnGetHitRectangle, &GetHitRectangle_Params, nullptr);

	memcpy_s(&Pos1, sizeof(Pos1), &GetHitRectangle_Params.Pos1, sizeof(GetHitRectangle_Params.Pos1));
	memcpy_s(&Pos2, sizeof(Pos2), &GetHitRectangle_Params.Pos2, sizeof(GetHitRectangle_Params.Pos2));
	memcpy_s(&pos3, sizeof(pos3), &GetHitRectangle_Params.pos3, sizeof(GetHitRectangle_Params.pos3));
	memcpy_s(&pos4, sizeof(pos4), &GetHitRectangle_Params.pos4, sizeof(GetHitRectangle_Params.pos4));
	memcpy_s(&pos5, sizeof(pos5), &GetHitRectangle_Params.pos5, sizeof(GetHitRectangle_Params.pos5));
	memcpy_s(&pos6, sizeof(pos6), &GetHitRectangle_Params.pos6, sizeof(GetHitRectangle_Params.pos6));
	memcpy_s(&Origin, sizeof(Origin), &GetHitRectangle_Params.Origin, sizeof(GetHitRectangle_Params.Origin));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.PosIncludeTriangle
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               tp1                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               tp2                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               tp3                            (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               xp                             (CPF_Const | CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::PosIncludeTriangle(struct FVector2D& tp1, struct FVector2D& tp2, struct FVector2D& tp3, struct FVector2D& xp)
{
	static UFunction* uFnPosIncludeTriangle = nullptr;

	if (!uFnPosIncludeTriangle)
	{
		uFnPosIncludeTriangle = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.PosIncludeTriangle");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPosIncludeTriangle_Params PosIncludeTriangle_Params;
	memset(&PosIncludeTriangle_Params, 0, sizeof(PosIncludeTriangle_Params));
	memcpy_s(&PosIncludeTriangle_Params.tp1, sizeof(PosIncludeTriangle_Params.tp1), &tp1, sizeof(tp1));
	memcpy_s(&PosIncludeTriangle_Params.tp2, sizeof(PosIncludeTriangle_Params.tp2), &tp2, sizeof(tp2));
	memcpy_s(&PosIncludeTriangle_Params.tp3, sizeof(PosIncludeTriangle_Params.tp3), &tp3, sizeof(tp3));
	memcpy_s(&PosIncludeTriangle_Params.xp, sizeof(PosIncludeTriangle_Params.xp), &xp, sizeof(xp));

	this->ProcessEvent(uFnPosIncludeTriangle, &PosIncludeTriangle_Params, nullptr);

	memcpy_s(&tp1, sizeof(tp1), &PosIncludeTriangle_Params.tp1, sizeof(PosIncludeTriangle_Params.tp1));
	memcpy_s(&tp2, sizeof(tp2), &PosIncludeTriangle_Params.tp2, sizeof(PosIncludeTriangle_Params.tp2));
	memcpy_s(&tp3, sizeof(tp3), &PosIncludeTriangle_Params.tp3, sizeof(PosIncludeTriangle_Params.tp3));
	memcpy_s(&xp, sizeof(xp), &PosIncludeTriangle_Params.xp, sizeof(PosIncludeTriangle_Params.xp));

	return PosIncludeTriangle_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.CheckIntersect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// float                          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               P1                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               P2                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               p3                             (CPF_Const | CPF_Parm | CPF_OutParm)
// struct FVector2D               p4                             (CPF_Const | CPF_Parm | CPF_OutParm)

float UREDGfxMoviePlayer_MenuCharaSelect_AC20::CheckIntersect(struct FVector2D& P1, struct FVector2D& P2, struct FVector2D& p3, struct FVector2D& p4)
{
	static UFunction* uFnCheckIntersect = nullptr;

	if (!uFnCheckIntersect)
	{
		uFnCheckIntersect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.CheckIntersect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execCheckIntersect_Params CheckIntersect_Params;
	memset(&CheckIntersect_Params, 0, sizeof(CheckIntersect_Params));
	memcpy_s(&CheckIntersect_Params.P1, sizeof(CheckIntersect_Params.P1), &P1, sizeof(P1));
	memcpy_s(&CheckIntersect_Params.P2, sizeof(CheckIntersect_Params.P2), &P2, sizeof(P2));
	memcpy_s(&CheckIntersect_Params.p3, sizeof(CheckIntersect_Params.p3), &p3, sizeof(p3));
	memcpy_s(&CheckIntersect_Params.p4, sizeof(CheckIntersect_Params.p4), &p4, sizeof(p4));

	this->ProcessEvent(uFnCheckIntersect, &CheckIntersect_Params, nullptr);

	memcpy_s(&P1, sizeof(P1), &CheckIntersect_Params.P1, sizeof(CheckIntersect_Params.P1));
	memcpy_s(&P2, sizeof(P2), &CheckIntersect_Params.P2, sizeof(CheckIntersect_Params.P2));
	memcpy_s(&p3, sizeof(p3), &CheckIntersect_Params.p3, sizeof(CheckIntersect_Params.p3));
	memcpy_s(&p4, sizeof(p4), &CheckIntersect_Params.p4, sizeof(CheckIntersect_Params.p4));

	return CheckIntersect_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.CharaIconCollisionFunc
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// struct FVector2D               CursorPos                      (CPF_Parm)
// uint32_t                       bRandomSelect                  (CPF_Parm)
// int32_t                        setCursor                      (CPF_Parm | CPF_OutParm)
// int32_t                        randCounter                    (CPF_Parm | CPF_OutParm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::CharaIconCollisionFunc(const struct FVector2D& CursorPos, bool bRandomSelect, int32_t& setCursor, int32_t& randCounter)
{
	static UFunction* uFnCharaIconCollisionFunc = nullptr;

	if (!uFnCharaIconCollisionFunc)
	{
		uFnCharaIconCollisionFunc = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.CharaIconCollisionFunc");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execCharaIconCollisionFunc_Params CharaIconCollisionFunc_Params;
	memset(&CharaIconCollisionFunc_Params, 0, sizeof(CharaIconCollisionFunc_Params));
	memcpy_s(&CharaIconCollisionFunc_Params.CursorPos, sizeof(CharaIconCollisionFunc_Params.CursorPos), &CursorPos, sizeof(CursorPos));
	CharaIconCollisionFunc_Params.bRandomSelect = bRandomSelect;
	memcpy_s(&CharaIconCollisionFunc_Params.setCursor, sizeof(CharaIconCollisionFunc_Params.setCursor), &setCursor, sizeof(setCursor));
	memcpy_s(&CharaIconCollisionFunc_Params.randCounter, sizeof(CharaIconCollisionFunc_Params.randCounter), &randCounter, sizeof(randCounter));

	this->ProcessEvent(uFnCharaIconCollisionFunc, &CharaIconCollisionFunc_Params, nullptr);

	memcpy_s(&setCursor, sizeof(setCursor), &CharaIconCollisionFunc_Params.setCursor, sizeof(CharaIconCollisionFunc_Params.setCursor));
	memcpy_s(&randCounter, sizeof(randCounter), &CharaIconCollisionFunc_Params.randCounter, sizeof(CharaIconCollisionFunc_Params.randCounter));

	return CharaIconCollisionFunc_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCursorFunc
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Side                           (CPF_Parm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct FVector2D               CursorPos                      (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateCursorFunc(EUE_PLAYER_ID Side, EUE_PLAYER_ID Player, struct FVector2D& CursorPos)
{
	static UFunction* uFnUpdateCursorFunc = nullptr;

	if (!uFnUpdateCursorFunc)
	{
		uFnUpdateCursorFunc = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCursorFunc");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateCursorFunc_Params UpdateCursorFunc_Params;
	memset(&UpdateCursorFunc_Params, 0, sizeof(UpdateCursorFunc_Params));
	memcpy_s(&UpdateCursorFunc_Params.Side, sizeof(UpdateCursorFunc_Params.Side), &Side, sizeof(Side));
	memcpy_s(&UpdateCursorFunc_Params.Player, sizeof(UpdateCursorFunc_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateCursorFunc_Params.CursorPos, sizeof(UpdateCursorFunc_Params.CursorPos), &CursorPos, sizeof(CursorPos));

	this->ProcessEvent(uFnUpdateCursorFunc, &UpdateCursorFunc_Params, nullptr);

	memcpy_s(&CursorPos, sizeof(CursorPos), &UpdateCursorFunc_Params.CursorPos, sizeof(UpdateCursorFunc_Params.CursorPos));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FinishMOMMedal
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventFinishMOMMedal()
{
	static UFunction* uFnFinishMOMMedal = nullptr;

	if (!uFnFinishMOMMedal)
	{
		uFnFinishMOMMedal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FinishMOMMedal");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventFinishMOMMedal_Params FinishMOMMedal_Params;
	memset(&FinishMOMMedal_Params, 0, sizeof(FinishMOMMedal_Params));

	this->ProcessEvent(uFnFinishMOMMedal, &FinishMOMMedal_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartMOMMedal
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// float                          baseRate                       (CPF_Parm)
// float                          targetRate                     (CPF_Parm)
// int32_t                        volumeLevel                    (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventStartMOMMedal(EUE_PLAYER_ID Player, float baseRate, float targetRate, int32_t volumeLevel)
{
	static UFunction* uFnStartMOMMedal = nullptr;

	if (!uFnStartMOMMedal)
	{
		uFnStartMOMMedal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartMOMMedal");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventStartMOMMedal_Params StartMOMMedal_Params;
	memset(&StartMOMMedal_Params, 0, sizeof(StartMOMMedal_Params));
	memcpy_s(&StartMOMMedal_Params.Player, sizeof(StartMOMMedal_Params.Player), &Player, sizeof(Player));
	memcpy_s(&StartMOMMedal_Params.baseRate, sizeof(StartMOMMedal_Params.baseRate), &baseRate, sizeof(baseRate));
	memcpy_s(&StartMOMMedal_Params.targetRate, sizeof(StartMOMMedal_Params.targetRate), &targetRate, sizeof(targetRate));
	memcpy_s(&StartMOMMedal_Params.volumeLevel, sizeof(StartMOMMedal_Params.volumeLevel), &volumeLevel, sizeof(volumeLevel));

	this->ProcessEvent(uFnStartMOMMedal, &StartMOMMedal_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FinishMOMPreset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventFinishMOMPreset()
{
	static UFunction* uFnFinishMOMPreset = nullptr;

	if (!uFnFinishMOMPreset)
	{
		uFnFinishMOMPreset = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FinishMOMPreset");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventFinishMOMPreset_Params FinishMOMPreset_Params;
	memset(&FinishMOMPreset_Params, 0, sizeof(FinishMOMPreset_Params));

	this->ProcessEvent(uFnFinishMOMPreset, &FinishMOMPreset_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsMOMPresetCancel
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventIsMOMPresetCancel()
{
	static UFunction* uFnIsMOMPresetCancel = nullptr;

	if (!uFnIsMOMPresetCancel)
	{
		uFnIsMOMPresetCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsMOMPresetCancel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventIsMOMPresetCancel_Params IsMOMPresetCancel_Params;
	memset(&IsMOMPresetCancel_Params, 0, sizeof(IsMOMPresetCancel_Params));

	this->ProcessEvent(uFnIsMOMPresetCancel, &IsMOMPresetCancel_Params, nullptr);

	return IsMOMPresetCancel_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsMOMPreset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventIsMOMPreset()
{
	static UFunction* uFnIsMOMPreset = nullptr;

	if (!uFnIsMOMPreset)
	{
		uFnIsMOMPreset = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsMOMPreset");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventIsMOMPreset_Params IsMOMPreset_Params;
	memset(&IsMOMPreset_Params, 0, sizeof(IsMOMPreset_Params));

	this->ProcessEvent(uFnIsMOMPreset, &IsMOMPreset_Params, nullptr);

	return IsMOMPreset_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartMOMPreset
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventStartMOMPreset()
{
	static UFunction* uFnStartMOMPreset = nullptr;

	if (!uFnStartMOMPreset)
	{
		uFnStartMOMPreset = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartMOMPreset");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventStartMOMPreset_Params StartMOMPreset_Params;
	memset(&StartMOMPreset_Params, 0, sizeof(StartMOMPreset_Params));

	this->ProcessEvent(uFnStartMOMPreset, &StartMOMPreset_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.EndHandicapPanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::EndHandicapPanel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnEndHandicapPanel = nullptr;

	if (!uFnEndHandicapPanel)
	{
		uFnEndHandicapPanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.EndHandicapPanel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execEndHandicapPanel_Params EndHandicapPanel_Params;
	memset(&EndHandicapPanel_Params, 0, sizeof(EndHandicapPanel_Params));
	memcpy_s(&EndHandicapPanel_Params.Player, sizeof(EndHandicapPanel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnEndHandicapPanel, &EndHandicapPanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FocusHandicapPanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       Focus                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::FocusHandicapPanel(EUE_PLAYER_ID Player, bool Focus)
{
	static UFunction* uFnFocusHandicapPanel = nullptr;

	if (!uFnFocusHandicapPanel)
	{
		uFnFocusHandicapPanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FocusHandicapPanel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execFocusHandicapPanel_Params FocusHandicapPanel_Params;
	memset(&FocusHandicapPanel_Params, 0, sizeof(FocusHandicapPanel_Params));
	memcpy_s(&FocusHandicapPanel_Params.Player, sizeof(FocusHandicapPanel_Params.Player), &Player, sizeof(Player));
	FocusHandicapPanel_Params.Focus = Focus;

	this->ProcessEvent(uFnFocusHandicapPanel, &FocusHandicapPanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.BlinkHandicapPanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       blink                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::BlinkHandicapPanel(EUE_PLAYER_ID Player, bool blink)
{
	static UFunction* uFnBlinkHandicapPanel = nullptr;

	if (!uFnBlinkHandicapPanel)
	{
		uFnBlinkHandicapPanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.BlinkHandicapPanel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execBlinkHandicapPanel_Params BlinkHandicapPanel_Params;
	memset(&BlinkHandicapPanel_Params, 0, sizeof(BlinkHandicapPanel_Params));
	memcpy_s(&BlinkHandicapPanel_Params.Player, sizeof(BlinkHandicapPanel_Params.Player), &Player, sizeof(Player));
	BlinkHandicapPanel_Params.blink = blink;

	this->ProcessEvent(uFnBlinkHandicapPanel, &BlinkHandicapPanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateHandicapPanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateHandicapPanel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnUpdateHandicapPanel = nullptr;

	if (!uFnUpdateHandicapPanel)
	{
		uFnUpdateHandicapPanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateHandicapPanel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateHandicapPanel_Params UpdateHandicapPanel_Params;
	memset(&UpdateHandicapPanel_Params, 0, sizeof(UpdateHandicapPanel_Params));
	memcpy_s(&UpdateHandicapPanel_Params.Player, sizeof(UpdateHandicapPanel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateHandicapPanel, &UpdateHandicapPanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartHandicapPanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::StartHandicapPanel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnStartHandicapPanel = nullptr;

	if (!uFnStartHandicapPanel)
	{
		uFnStartHandicapPanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartHandicapPanel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execStartHandicapPanel_Params StartHandicapPanel_Params;
	memset(&StartHandicapPanel_Params, 0, sizeof(StartHandicapPanel_Params));
	memcpy_s(&StartHandicapPanel_Params.Player, sizeof(StartHandicapPanel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnStartHandicapPanel, &StartHandicapPanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.EndCustomPanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::EndCustomPanel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnEndCustomPanel = nullptr;

	if (!uFnEndCustomPanel)
	{
		uFnEndCustomPanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.EndCustomPanel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execEndCustomPanel_Params EndCustomPanel_Params;
	memset(&EndCustomPanel_Params, 0, sizeof(EndCustomPanel_Params));
	memcpy_s(&EndCustomPanel_Params.Player, sizeof(EndCustomPanel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnEndCustomPanel, &EndCustomPanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCustomPanelCostume
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateCustomPanelCostume(EUE_PLAYER_ID Player)
{
	static UFunction* uFnUpdateCustomPanelCostume = nullptr;

	if (!uFnUpdateCustomPanelCostume)
	{
		uFnUpdateCustomPanelCostume = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCustomPanelCostume");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateCustomPanelCostume_Params UpdateCustomPanelCostume_Params;
	memset(&UpdateCustomPanelCostume_Params, 0, sizeof(UpdateCustomPanelCostume_Params));
	memcpy_s(&UpdateCustomPanelCostume_Params.Player, sizeof(UpdateCustomPanelCostume_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateCustomPanelCostume, &UpdateCustomPanelCostume_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCustomPanelFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateCustomPanelFocus(EUE_PLAYER_ID Player)
{
	static UFunction* uFnUpdateCustomPanelFocus = nullptr;

	if (!uFnUpdateCustomPanelFocus)
	{
		uFnUpdateCustomPanelFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCustomPanelFocus");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateCustomPanelFocus_Params UpdateCustomPanelFocus_Params;
	memset(&UpdateCustomPanelFocus_Params, 0, sizeof(UpdateCustomPanelFocus_Params));
	memcpy_s(&UpdateCustomPanelFocus_Params.Player, sizeof(UpdateCustomPanelFocus_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateCustomPanelFocus, &UpdateCustomPanelFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCustomPanelColor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateCustomPanelColor(EUE_PLAYER_ID Player)
{
	static UFunction* uFnUpdateCustomPanelColor = nullptr;

	if (!uFnUpdateCustomPanelColor)
	{
		uFnUpdateCustomPanelColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCustomPanelColor");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateCustomPanelColor_Params UpdateCustomPanelColor_Params;
	memset(&UpdateCustomPanelColor_Params, 0, sizeof(UpdateCustomPanelColor_Params));
	memcpy_s(&UpdateCustomPanelColor_Params.Player, sizeof(UpdateCustomPanelColor_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateCustomPanelColor, &UpdateCustomPanelColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartCustomPanel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::StartCustomPanel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnStartCustomPanel = nullptr;

	if (!uFnStartCustomPanel)
	{
		uFnStartCustomPanel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartCustomPanel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execStartCustomPanel_Params StartCustomPanel_Params;
	memset(&StartCustomPanel_Params, 0, sizeof(StartCustomPanel_Params));
	memcpy_s(&StartCustomPanel_Params.Player, sizeof(StartCustomPanel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnStartCustomPanel, &StartCustomPanel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        digit1                         (CPF_Parm)
// int32_t                        digit10                        (CPF_Parm)
// int32_t                        digit100                       (CPF_Parm)
// int32_t                        digitNum                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetTimer(int32_t digit1, int32_t digit10, int32_t digit100, int32_t digitNum)
{
	static UFunction* uFnAS_SetTimer = nullptr;

	if (!uFnAS_SetTimer)
	{
		uFnAS_SetTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetTimer");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetTimer_Params AS_SetTimer_Params;
	memset(&AS_SetTimer_Params, 0, sizeof(AS_SetTimer_Params));
	memcpy_s(&AS_SetTimer_Params.digit1, sizeof(AS_SetTimer_Params.digit1), &digit1, sizeof(digit1));
	memcpy_s(&AS_SetTimer_Params.digit10, sizeof(AS_SetTimer_Params.digit10), &digit10, sizeof(digit10));
	memcpy_s(&AS_SetTimer_Params.digit100, sizeof(AS_SetTimer_Params.digit100), &digit100, sizeof(digit100));
	memcpy_s(&AS_SetTimer_Params.digitNum, sizeof(AS_SetTimer_Params.digitNum), &digitNum, sizeof(digitNum));

	this->ProcessEvent(uFnAS_SetTimer, &AS_SetTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetMOMStar
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// int32_t                        Type                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetMOMStar(int32_t Index, int32_t Type)
{
	static UFunction* uFnSetMOMStar = nullptr;

	if (!uFnSetMOMStar)
	{
		uFnSetMOMStar = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetMOMStar");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetMOMStar_Params SetMOMStar_Params;
	memset(&SetMOMStar_Params, 0, sizeof(SetMOMStar_Params));
	memcpy_s(&SetMOMStar_Params.Index, sizeof(SetMOMStar_Params.Index), &Index, sizeof(Index));
	memcpy_s(&SetMOMStar_Params.Type, sizeof(SetMOMStar_Params.Type), &Type, sizeof(Type));

	this->ProcessEvent(uFnSetMOMStar, &SetMOMStar_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ChangeCharaName
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::ChangeCharaName(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnChangeCharaName = nullptr;

	if (!uFnChangeCharaName)
	{
		uFnChangeCharaName = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ChangeCharaName");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execChangeCharaName_Params ChangeCharaName_Params;
	memset(&ChangeCharaName_Params, 0, sizeof(ChangeCharaName_Params));
	memcpy_s(&ChangeCharaName_Params.Player, sizeof(ChangeCharaName_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ChangeCharaName_Params.CharaID, sizeof(ChangeCharaName_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnChangeCharaName, &ChangeCharaName_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_CharaNameLabelStop2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_CharaNameLabelStop2P(const class FString& CharaID)
{
	static UFunction* uFnAS_CharaNameLabelStop2P = nullptr;

	if (!uFnAS_CharaNameLabelStop2P)
	{
		uFnAS_CharaNameLabelStop2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_CharaNameLabelStop2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_CharaNameLabelStop2P_Params AS_CharaNameLabelStop2P_Params;
	memset(&AS_CharaNameLabelStop2P_Params, 0, sizeof(AS_CharaNameLabelStop2P_Params));
	memcpy_s(&AS_CharaNameLabelStop2P_Params.CharaID, sizeof(AS_CharaNameLabelStop2P_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnAS_CharaNameLabelStop2P, &AS_CharaNameLabelStop2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_CharaNameLabelStop1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_CharaNameLabelStop1P(const class FString& CharaID)
{
	static UFunction* uFnAS_CharaNameLabelStop1P = nullptr;

	if (!uFnAS_CharaNameLabelStop1P)
	{
		uFnAS_CharaNameLabelStop1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_CharaNameLabelStop1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_CharaNameLabelStop1P_Params AS_CharaNameLabelStop1P_Params;
	memset(&AS_CharaNameLabelStop1P_Params, 0, sizeof(AS_CharaNameLabelStop1P_Params));
	memcpy_s(&AS_CharaNameLabelStop1P_Params.CharaID, sizeof(AS_CharaNameLabelStop1P_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnAS_CharaNameLabelStop1P, &AS_CharaNameLabelStop1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_CharaNameLabelPlay2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_CharaNameLabelPlay2P(const class FString& CharaID)
{
	static UFunction* uFnAS_CharaNameLabelPlay2P = nullptr;

	if (!uFnAS_CharaNameLabelPlay2P)
	{
		uFnAS_CharaNameLabelPlay2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_CharaNameLabelPlay2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_CharaNameLabelPlay2P_Params AS_CharaNameLabelPlay2P_Params;
	memset(&AS_CharaNameLabelPlay2P_Params, 0, sizeof(AS_CharaNameLabelPlay2P_Params));
	memcpy_s(&AS_CharaNameLabelPlay2P_Params.CharaID, sizeof(AS_CharaNameLabelPlay2P_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnAS_CharaNameLabelPlay2P, &AS_CharaNameLabelPlay2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_CharaNameLabelPlay1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_CharaNameLabelPlay1P(const class FString& CharaID)
{
	static UFunction* uFnAS_CharaNameLabelPlay1P = nullptr;

	if (!uFnAS_CharaNameLabelPlay1P)
	{
		uFnAS_CharaNameLabelPlay1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_CharaNameLabelPlay1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_CharaNameLabelPlay1P_Params AS_CharaNameLabelPlay1P_Params;
	memset(&AS_CharaNameLabelPlay1P_Params, 0, sizeof(AS_CharaNameLabelPlay1P_Params));
	memcpy_s(&AS_CharaNameLabelPlay1P_Params.CharaID, sizeof(AS_CharaNameLabelPlay1P_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnAS_CharaNameLabelPlay1P, &AS_CharaNameLabelPlay1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCharaPictureLabel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)
// uint32_t                       bStop                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetCharaPictureLabel(EUE_PLAYER_ID Player, const class FString& Label, bool bStop)
{
	static UFunction* uFnSetCharaPictureLabel = nullptr;

	if (!uFnSetCharaPictureLabel)
	{
		uFnSetCharaPictureLabel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCharaPictureLabel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetCharaPictureLabel_Params SetCharaPictureLabel_Params;
	memset(&SetCharaPictureLabel_Params, 0, sizeof(SetCharaPictureLabel_Params));
	memcpy_s(&SetCharaPictureLabel_Params.Player, sizeof(SetCharaPictureLabel_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCharaPictureLabel_Params.Label, sizeof(SetCharaPictureLabel_Params.Label), &Label, sizeof(Label));
	SetCharaPictureLabel_Params.bStop = bStop;

	this->ProcessEvent(uFnSetCharaPictureLabel, &SetCharaPictureLabel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaPictureLabelStop2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetCharaPictureLabelStop2P(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaPictureLabelStop2P = nullptr;

	if (!uFnAS_SetCharaPictureLabelStop2P)
	{
		uFnAS_SetCharaPictureLabelStop2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaPictureLabelStop2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetCharaPictureLabelStop2P_Params AS_SetCharaPictureLabelStop2P_Params;
	memset(&AS_SetCharaPictureLabelStop2P_Params, 0, sizeof(AS_SetCharaPictureLabelStop2P_Params));
	memcpy_s(&AS_SetCharaPictureLabelStop2P_Params.Label, sizeof(AS_SetCharaPictureLabelStop2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaPictureLabelStop2P, &AS_SetCharaPictureLabelStop2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaPictureLabelStop1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetCharaPictureLabelStop1P(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaPictureLabelStop1P = nullptr;

	if (!uFnAS_SetCharaPictureLabelStop1P)
	{
		uFnAS_SetCharaPictureLabelStop1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaPictureLabelStop1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetCharaPictureLabelStop1P_Params AS_SetCharaPictureLabelStop1P_Params;
	memset(&AS_SetCharaPictureLabelStop1P_Params, 0, sizeof(AS_SetCharaPictureLabelStop1P_Params));
	memcpy_s(&AS_SetCharaPictureLabelStop1P_Params.Label, sizeof(AS_SetCharaPictureLabelStop1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaPictureLabelStop1P, &AS_SetCharaPictureLabelStop1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaPictureLabelPlay2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetCharaPictureLabelPlay2P(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaPictureLabelPlay2P = nullptr;

	if (!uFnAS_SetCharaPictureLabelPlay2P)
	{
		uFnAS_SetCharaPictureLabelPlay2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaPictureLabelPlay2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetCharaPictureLabelPlay2P_Params AS_SetCharaPictureLabelPlay2P_Params;
	memset(&AS_SetCharaPictureLabelPlay2P_Params, 0, sizeof(AS_SetCharaPictureLabelPlay2P_Params));
	memcpy_s(&AS_SetCharaPictureLabelPlay2P_Params.Label, sizeof(AS_SetCharaPictureLabelPlay2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaPictureLabelPlay2P, &AS_SetCharaPictureLabelPlay2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaPictureLabelPlay1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetCharaPictureLabelPlay1P(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaPictureLabelPlay1P = nullptr;

	if (!uFnAS_SetCharaPictureLabelPlay1P)
	{
		uFnAS_SetCharaPictureLabelPlay1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaPictureLabelPlay1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetCharaPictureLabelPlay1P_Params AS_SetCharaPictureLabelPlay1P_Params;
	memset(&AS_SetCharaPictureLabelPlay1P_Params, 0, sizeof(AS_SetCharaPictureLabelPlay1P_Params));
	memcpy_s(&AS_SetCharaPictureLabelPlay1P_Params.Label, sizeof(AS_SetCharaPictureLabelPlay1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaPictureLabelPlay1P, &AS_SetCharaPictureLabelPlay1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaIconVisible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// uint32_t                       Visible                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetCharaIconVisible(int32_t Index, bool Visible)
{
	static UFunction* uFnAS_SetCharaIconVisible = nullptr;

	if (!uFnAS_SetCharaIconVisible)
	{
		uFnAS_SetCharaIconVisible = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaIconVisible");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetCharaIconVisible_Params AS_SetCharaIconVisible_Params;
	memset(&AS_SetCharaIconVisible_Params, 0, sizeof(AS_SetCharaIconVisible_Params));
	memcpy_s(&AS_SetCharaIconVisible_Params.Index, sizeof(AS_SetCharaIconVisible_Params.Index), &Index, sizeof(Index));
	AS_SetCharaIconVisible_Params.Visible = Visible;

	this->ProcessEvent(uFnAS_SetCharaIconVisible, &AS_SetCharaIconVisible_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaIcon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetCharaIcon(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaIcon = nullptr;

	if (!uFnAS_SetCharaIcon)
	{
		uFnAS_SetCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaIcon");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetCharaIcon_Params AS_SetCharaIcon_Params;
	memset(&AS_SetCharaIcon_Params, 0, sizeof(AS_SetCharaIcon_Params));
	memcpy_s(&AS_SetCharaIcon_Params.Label, sizeof(AS_SetCharaIcon_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaIcon, &AS_SetCharaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCursorPos
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetCursorPos(EUE_PLAYER_ID Player, float X, float Y)
{
	static UFunction* uFnAS_SetCursorPos = nullptr;

	if (!uFnAS_SetCursorPos)
	{
		uFnAS_SetCursorPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCursorPos");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetCursorPos_Params AS_SetCursorPos_Params;
	memset(&AS_SetCursorPos_Params, 0, sizeof(AS_SetCursorPos_Params));
	memcpy_s(&AS_SetCursorPos_Params.Player, sizeof(AS_SetCursorPos_Params.Player), &Player, sizeof(Player));
	memcpy_s(&AS_SetCursorPos_Params.X, sizeof(AS_SetCursorPos_Params.X), &X, sizeof(X));
	memcpy_s(&AS_SetCursorPos_Params.Y, sizeof(AS_SetCursorPos_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnAS_SetCursorPos, &AS_SetCursorPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_ShowCursorLabelStop2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_ShowCursorLabelStop2P(const class FString& Label)
{
	static UFunction* uFnAS_ShowCursorLabelStop2P = nullptr;

	if (!uFnAS_ShowCursorLabelStop2P)
	{
		uFnAS_ShowCursorLabelStop2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_ShowCursorLabelStop2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_ShowCursorLabelStop2P_Params AS_ShowCursorLabelStop2P_Params;
	memset(&AS_ShowCursorLabelStop2P_Params, 0, sizeof(AS_ShowCursorLabelStop2P_Params));
	memcpy_s(&AS_ShowCursorLabelStop2P_Params.Label, sizeof(AS_ShowCursorLabelStop2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_ShowCursorLabelStop2P, &AS_ShowCursorLabelStop2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_ShowCursorLabelStop1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_ShowCursorLabelStop1P(const class FString& Label)
{
	static UFunction* uFnAS_ShowCursorLabelStop1P = nullptr;

	if (!uFnAS_ShowCursorLabelStop1P)
	{
		uFnAS_ShowCursorLabelStop1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_ShowCursorLabelStop1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_ShowCursorLabelStop1P_Params AS_ShowCursorLabelStop1P_Params;
	memset(&AS_ShowCursorLabelStop1P_Params, 0, sizeof(AS_ShowCursorLabelStop1P_Params));
	memcpy_s(&AS_ShowCursorLabelStop1P_Params.Label, sizeof(AS_ShowCursorLabelStop1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_ShowCursorLabelStop1P, &AS_ShowCursorLabelStop1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_ShowCursorLabelPlay2P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_ShowCursorLabelPlay2P(const class FString& Label)
{
	static UFunction* uFnAS_ShowCursorLabelPlay2P = nullptr;

	if (!uFnAS_ShowCursorLabelPlay2P)
	{
		uFnAS_ShowCursorLabelPlay2P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_ShowCursorLabelPlay2P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_ShowCursorLabelPlay2P_Params AS_ShowCursorLabelPlay2P_Params;
	memset(&AS_ShowCursorLabelPlay2P_Params, 0, sizeof(AS_ShowCursorLabelPlay2P_Params));
	memcpy_s(&AS_ShowCursorLabelPlay2P_Params.Label, sizeof(AS_ShowCursorLabelPlay2P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_ShowCursorLabelPlay2P, &AS_ShowCursorLabelPlay2P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_ShowCursorLabelPlay1P
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_ShowCursorLabelPlay1P(const class FString& Label)
{
	static UFunction* uFnAS_ShowCursorLabelPlay1P = nullptr;

	if (!uFnAS_ShowCursorLabelPlay1P)
	{
		uFnAS_ShowCursorLabelPlay1P = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_ShowCursorLabelPlay1P");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_ShowCursorLabelPlay1P_Params AS_ShowCursorLabelPlay1P_Params;
	memset(&AS_ShowCursorLabelPlay1P_Params, 0, sizeof(AS_ShowCursorLabelPlay1P_Params));
	memcpy_s(&AS_ShowCursorLabelPlay1P_Params.Label, sizeof(AS_ShowCursorLabelPlay1P_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_ShowCursorLabelPlay1P, &AS_ShowCursorLabelPlay1P_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaIconsLabel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_SetCharaIconsLabel(const class FString& Label)
{
	static UFunction* uFnAS_SetCharaIconsLabel = nullptr;

	if (!uFnAS_SetCharaIconsLabel)
	{
		uFnAS_SetCharaIconsLabel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_SetCharaIconsLabel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_SetCharaIconsLabel_Params AS_SetCharaIconsLabel_Params;
	memset(&AS_SetCharaIconsLabel_Params, 0, sizeof(AS_SetCharaIconsLabel_Params));
	memcpy_s(&AS_SetCharaIconsLabel_Params.Label, sizeof(AS_SetCharaIconsLabel_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_SetCharaIconsLabel, &AS_SetCharaIconsLabel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_FocusCharaIconPanelStop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_FocusCharaIconPanelStop(const class FString& Label)
{
	static UFunction* uFnAS_FocusCharaIconPanelStop = nullptr;

	if (!uFnAS_FocusCharaIconPanelStop)
	{
		uFnAS_FocusCharaIconPanelStop = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_FocusCharaIconPanelStop");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_FocusCharaIconPanelStop_Params AS_FocusCharaIconPanelStop_Params;
	memset(&AS_FocusCharaIconPanelStop_Params, 0, sizeof(AS_FocusCharaIconPanelStop_Params));
	memcpy_s(&AS_FocusCharaIconPanelStop_Params.Label, sizeof(AS_FocusCharaIconPanelStop_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_FocusCharaIconPanelStop, &AS_FocusCharaIconPanelStop_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_FocusCharaIconStop
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_FocusCharaIconStop(const class FString& Label)
{
	static UFunction* uFnAS_FocusCharaIconStop = nullptr;

	if (!uFnAS_FocusCharaIconStop)
	{
		uFnAS_FocusCharaIconStop = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_FocusCharaIconStop");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_FocusCharaIconStop_Params AS_FocusCharaIconStop_Params;
	memset(&AS_FocusCharaIconStop_Params, 0, sizeof(AS_FocusCharaIconStop_Params));
	memcpy_s(&AS_FocusCharaIconStop_Params.Label, sizeof(AS_FocusCharaIconStop_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_FocusCharaIconStop, &AS_FocusCharaIconStop_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_FocusCharaIconPanelPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_FocusCharaIconPanelPlay(const class FString& Label)
{
	static UFunction* uFnAS_FocusCharaIconPanelPlay = nullptr;

	if (!uFnAS_FocusCharaIconPanelPlay)
	{
		uFnAS_FocusCharaIconPanelPlay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_FocusCharaIconPanelPlay");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_FocusCharaIconPanelPlay_Params AS_FocusCharaIconPanelPlay_Params;
	memset(&AS_FocusCharaIconPanelPlay_Params, 0, sizeof(AS_FocusCharaIconPanelPlay_Params));
	memcpy_s(&AS_FocusCharaIconPanelPlay_Params.Label, sizeof(AS_FocusCharaIconPanelPlay_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_FocusCharaIconPanelPlay, &AS_FocusCharaIconPanelPlay_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_FocusCharaIconPlay
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  Label                          (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AS_FocusCharaIconPlay(const class FString& Label)
{
	static UFunction* uFnAS_FocusCharaIconPlay = nullptr;

	if (!uFnAS_FocusCharaIconPlay)
	{
		uFnAS_FocusCharaIconPlay = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AS_FocusCharaIconPlay");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAS_FocusCharaIconPlay_Params AS_FocusCharaIconPlay_Params;
	memset(&AS_FocusCharaIconPlay_Params, 0, sizeof(AS_FocusCharaIconPlay_Params));
	memcpy_s(&AS_FocusCharaIconPlay_Params.Label, sizeof(AS_FocusCharaIconPlay_Params.Label), &Label, sizeof(Label));

	this->ProcessEvent(uFnAS_FocusCharaIconPlay, &AS_FocusCharaIconPlay_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IndexToDan
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

int32_t UREDGfxMoviePlayer_MenuCharaSelect_AC20::IndexToDan(int32_t Index)
{
	static UFunction* uFnIndexToDan = nullptr;

	if (!uFnIndexToDan)
	{
		uFnIndexToDan = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IndexToDan");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execIndexToDan_Params IndexToDan_Params;
	memset(&IndexToDan_Params, 0, sizeof(IndexToDan_Params));
	memcpy_s(&IndexToDan_Params.Index, sizeof(IndexToDan_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIndexToDan, &IndexToDan_Params, nullptr);

	return IndexToDan_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.GetKismetObject
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UObject*                 ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FName                    VarName                        (CPF_Parm)

class UObject* UREDGfxMoviePlayer_MenuCharaSelect_AC20::GetKismetObject(const class FName& VarName)
{
	static UFunction* uFnGetKismetObject = nullptr;

	if (!uFnGetKismetObject)
	{
		uFnGetKismetObject = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.GetKismetObject");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execGetKismetObject_Params GetKismetObject_Params;
	memset(&GetKismetObject_Params, 0, sizeof(GetKismetObject_Params));
	memcpy_s(&GetKismetObject_Params.VarName, sizeof(GetKismetObject_Params.VarName), &VarName, sizeof(VarName));

	this->ProcessEvent(uFnGetKismetObject, &GetKismetObject_Params, nullptr);

	return GetKismetObject_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateGlobe
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateGlobe()
{
	static UFunction* uFnUpdateGlobe = nullptr;

	if (!uFnUpdateGlobe)
	{
		uFnUpdateGlobe = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateGlobe");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateGlobe_Params UpdateGlobe_Params;
	memset(&UpdateGlobe_Params, 0, sizeof(UpdateGlobe_Params));

	this->ProcessEvent(uFnUpdateGlobe, &UpdateGlobe_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.DecideGlobe
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::DecideGlobe()
{
	static UFunction* uFnDecideGlobe = nullptr;

	if (!uFnDecideGlobe)
	{
		uFnDecideGlobe = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.DecideGlobe");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execDecideGlobe_Params DecideGlobe_Params;
	memset(&DecideGlobe_Params, 0, sizeof(DecideGlobe_Params));

	this->ProcessEvent(uFnDecideGlobe, &DecideGlobe_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateTimer
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Time                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateTimer(int32_t Time)
{
	static UFunction* uFnUpdateTimer = nullptr;

	if (!uFnUpdateTimer)
	{
		uFnUpdateTimer = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateTimer");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateTimer_Params UpdateTimer_Params;
	memset(&UpdateTimer_Params, 0, sizeof(UpdateTimer_Params));
	memcpy_s(&UpdateTimer_Params.Time, sizeof(UpdateTimer_Params.Time), &Time, sizeof(Time));

	this->ProcessEvent(uFnUpdateTimer, &UpdateTimer_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCharaIconFocus
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetCharaIconFocus(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnSetCharaIconFocus = nullptr;

	if (!uFnSetCharaIconFocus)
	{
		uFnSetCharaIconFocus = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCharaIconFocus");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetCharaIconFocus_Params SetCharaIconFocus_Params;
	memset(&SetCharaIconFocus_Params, 0, sizeof(SetCharaIconFocus_Params));
	memcpy_s(&SetCharaIconFocus_Params.Player, sizeof(SetCharaIconFocus_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCharaIconFocus_Params.CharaID, sizeof(SetCharaIconFocus_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSetCharaIconFocus, &SetCharaIconFocus_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCharaIconVisible
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// uint32_t                       Visible                        (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetCharaIconVisible(int32_t Index, bool Visible)
{
	static UFunction* uFnSetCharaIconVisible = nullptr;

	if (!uFnSetCharaIconVisible)
	{
		uFnSetCharaIconVisible = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCharaIconVisible");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetCharaIconVisible_Params SetCharaIconVisible_Params;
	memset(&SetCharaIconVisible_Params, 0, sizeof(SetCharaIconVisible_Params));
	memcpy_s(&SetCharaIconVisible_Params.Index, sizeof(SetCharaIconVisible_Params.Index), &Index, sizeof(Index));
	SetCharaIconVisible_Params.Visible = Visible;

	this->ProcessEvent(uFnSetCharaIconVisible, &SetCharaIconVisible_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupCharaIcon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetupCharaIcon(int32_t Index, const class FString& CharaID)
{
	static UFunction* uFnSetupCharaIcon = nullptr;

	if (!uFnSetupCharaIcon)
	{
		uFnSetupCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupCharaIcon");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetupCharaIcon_Params SetupCharaIcon_Params;
	memset(&SetupCharaIcon_Params, 0, sizeof(SetupCharaIcon_Params));
	memcpy_s(&SetupCharaIcon_Params.Index, sizeof(SetupCharaIcon_Params.Index), &Index, sizeof(Index));
	memcpy_s(&SetupCharaIcon_Params.CharaID, sizeof(SetupCharaIcon_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSetupCharaIcon, &SetupCharaIcon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsExistCharaIcon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Index                          (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::IsExistCharaIcon(int32_t Index)
{
	static UFunction* uFnIsExistCharaIcon = nullptr;

	if (!uFnIsExistCharaIcon)
	{
		uFnIsExistCharaIcon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsExistCharaIcon");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execIsExistCharaIcon_Params IsExistCharaIcon_Params;
	memset(&IsExistCharaIcon_Params, 0, sizeof(IsExistCharaIcon_Params));
	memcpy_s(&IsExistCharaIcon_Params.Index, sizeof(IsExistCharaIcon_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnIsExistCharaIcon, &IsExistCharaIcon_Params, nullptr);

	return IsExistCharaIcon_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.EndAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::EndAnim()
{
	static UFunction* uFnEndAnim = nullptr;

	if (!uFnEndAnim)
	{
		uFnEndAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.EndAnim");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execEndAnim_Params EndAnim_Params;
	memset(&EndAnim_Params, 0, sizeof(EndAnim_Params));

	this->ProcessEvent(uFnEndAnim, &EndAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::StartAnim()
{
	static UFunction* uFnStartAnim = nullptr;

	if (!uFnStartAnim)
	{
		uFnStartAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.StartAnim");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execStartAnim_Params StartAnim_Params;
	memset(&StartAnim_Params, 0, sizeof(StartAnim_Params));

	this->ProcessEvent(uFnStartAnim, &StartAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCursorPos
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetCursorPos(EUE_PLAYER_ID Player, float X, float Y)
{
	static UFunction* uFnSetCursorPos = nullptr;

	if (!uFnSetCursorPos)
	{
		uFnSetCursorPos = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCursorPos");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetCursorPos_Params SetCursorPos_Params;
	memset(&SetCursorPos_Params, 0, sizeof(SetCursorPos_Params));
	memcpy_s(&SetCursorPos_Params.Player, sizeof(SetCursorPos_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetCursorPos_Params.X, sizeof(SetCursorPos_Params.X), &X, sizeof(X));
	memcpy_s(&SetCursorPos_Params.Y, sizeof(SetCursorPos_Params.Y), &Y, sizeof(Y));

	this->ProcessEvent(uFnSetCursorPos, &SetCursorPos_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ShowCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       On                             (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::ShowCursor(EUE_PLAYER_ID Player, bool On)
{
	static UFunction* uFnShowCursor = nullptr;

	if (!uFnShowCursor)
	{
		uFnShowCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ShowCursor");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execShowCursor_Params ShowCursor_Params;
	memset(&ShowCursor_Params, 0, sizeof(ShowCursor_Params));
	memcpy_s(&ShowCursor_Params.Player, sizeof(ShowCursor_Params.Player), &Player, sizeof(Player));
	ShowCursor_Params.On = On;

	this->ProcessEvent(uFnShowCursor, &ShowCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ChangeCharaPicture
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// ECharaPictureState             State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::ChangeCharaPicture(EUE_PLAYER_ID Player, const class FString& CharaID, ECharaPictureState State)
{
	static UFunction* uFnChangeCharaPicture = nullptr;

	if (!uFnChangeCharaPicture)
	{
		uFnChangeCharaPicture = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ChangeCharaPicture");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execChangeCharaPicture_Params ChangeCharaPicture_Params;
	memset(&ChangeCharaPicture_Params, 0, sizeof(ChangeCharaPicture_Params));
	memcpy_s(&ChangeCharaPicture_Params.Player, sizeof(ChangeCharaPicture_Params.Player), &Player, sizeof(Player));
	memcpy_s(&ChangeCharaPicture_Params.CharaID, sizeof(ChangeCharaPicture_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&ChangeCharaPicture_Params.State, sizeof(ChangeCharaPicture_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnChangeCharaPicture, &ChangeCharaPicture_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.OnDrawUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::OnDrawUpdate()
{
	static UFunction* uFnOnDrawUpdate = nullptr;

	if (!uFnOnDrawUpdate)
	{
		uFnOnDrawUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.OnDrawUpdate");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execOnDrawUpdate_Params OnDrawUpdate_Params;
	memset(&OnDrawUpdate_Params, 0, sizeof(OnDrawUpdate_Params));

	this->ProcessEvent(uFnOnDrawUpdate, &OnDrawUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateNewChallenger
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateNewChallenger()
{
	static UFunction* uFnUpdateNewChallenger = nullptr;

	if (!uFnUpdateNewChallenger)
	{
		uFnUpdateNewChallenger = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateNewChallenger");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateNewChallenger_Params UpdateNewChallenger_Params;
	memset(&UpdateNewChallenger_Params, 0, sizeof(UpdateNewChallenger_Params));

	this->ProcessEvent(uFnUpdateNewChallenger, &UpdateNewChallenger_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCharaModel
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateCharaModel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnUpdateCharaModel = nullptr;

	if (!uFnUpdateCharaModel)
	{
		uFnUpdateCharaModel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCharaModel");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateCharaModel_Params UpdateCharaModel_Params;
	memset(&UpdateCharaModel_Params, 0, sizeof(UpdateCharaModel_Params));
	memcpy_s(&UpdateCharaModel_Params.Player, sizeof(UpdateCharaModel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnUpdateCharaModel, &UpdateCharaModel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupEffect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// int32_t                        effIndex                       (CPF_Parm)
// struct FVector                 Loc                            (CPF_Parm)
// class FName                    effName                        (CPF_Parm)
// class FName                    motionName                     (CPF_Parm)
// uint32_t                       isLoop                         (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetupEffect(EUE_PLAYER_ID Player, int32_t effIndex, const struct FVector& Loc, const class FName& effName, const class FName& motionName, bool isLoop, float Scale)
{
	static UFunction* uFnSetupEffect = nullptr;

	if (!uFnSetupEffect)
	{
		uFnSetupEffect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupEffect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetupEffect_Params SetupEffect_Params;
	memset(&SetupEffect_Params, 0, sizeof(SetupEffect_Params));
	memcpy_s(&SetupEffect_Params.Player, sizeof(SetupEffect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetupEffect_Params.effIndex, sizeof(SetupEffect_Params.effIndex), &effIndex, sizeof(effIndex));
	memcpy_s(&SetupEffect_Params.Loc, sizeof(SetupEffect_Params.Loc), &Loc, sizeof(Loc));
	memcpy_s(&SetupEffect_Params.effName, sizeof(SetupEffect_Params.effName), &effName, sizeof(effName));
	memcpy_s(&SetupEffect_Params.motionName, sizeof(SetupEffect_Params.motionName), &motionName, sizeof(motionName));
	SetupEffect_Params.isLoop = isLoop;
	memcpy_s(&SetupEffect_Params.Scale, sizeof(SetupEffect_Params.Scale), &Scale, sizeof(Scale));

	this->ProcessEvent(uFnSetupEffect, &SetupEffect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateAsyncLoad
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  _CharaID                       (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        _ColorID                       (CPF_Parm)
// int32_t                        _CostumeID                     (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateAsyncLoad(EUE_PLAYER_ID Player, const class FString& _CharaID, int32_t _ColorID, int32_t _CostumeID)
{
	static UFunction* uFnUpdateAsyncLoad = nullptr;

	if (!uFnUpdateAsyncLoad)
	{
		uFnUpdateAsyncLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateAsyncLoad");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateAsyncLoad_Params UpdateAsyncLoad_Params;
	memset(&UpdateAsyncLoad_Params, 0, sizeof(UpdateAsyncLoad_Params));
	memcpy_s(&UpdateAsyncLoad_Params.Player, sizeof(UpdateAsyncLoad_Params.Player), &Player, sizeof(Player));
	memcpy_s(&UpdateAsyncLoad_Params._CharaID, sizeof(UpdateAsyncLoad_Params._CharaID), &_CharaID, sizeof(_CharaID));
	memcpy_s(&UpdateAsyncLoad_Params._ColorID, sizeof(UpdateAsyncLoad_Params._ColorID), &_ColorID, sizeof(_ColorID));
	memcpy_s(&UpdateAsyncLoad_Params._CostumeID, sizeof(UpdateAsyncLoad_Params._CostumeID), &_CostumeID, sizeof(_CostumeID));

	this->ProcessEvent(uFnUpdateAsyncLoad, &UpdateAsyncLoad_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateReturnToMainMenu
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateReturnToMainMenu(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateReturnToMainMenu = nullptr;

	if (!uFnPlayer_UpdateReturnToMainMenu)
	{
		uFnPlayer_UpdateReturnToMainMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateReturnToMainMenu");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateReturnToMainMenu_Params Player_UpdateReturnToMainMenu_Params;
	memset(&Player_UpdateReturnToMainMenu_Params, 0, sizeof(Player_UpdateReturnToMainMenu_Params));
	memcpy_s(&Player_UpdateReturnToMainMenu_Params.Player, sizeof(Player_UpdateReturnToMainMenu_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateReturnToMainMenu_Params.Param, sizeof(Player_UpdateReturnToMainMenu_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateReturnToMainMenu, &Player_UpdateReturnToMainMenu_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateReturnToMainMenu_Params.Param, sizeof(Player_UpdateReturnToMainMenu_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateBGSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateBGSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateBGSelect = nullptr;

	if (!uFnPlayer_UpdateBGSelect)
	{
		uFnPlayer_UpdateBGSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateBGSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateBGSelect_Params Player_UpdateBGSelect_Params;
	memset(&Player_UpdateBGSelect_Params, 0, sizeof(Player_UpdateBGSelect_Params));
	memcpy_s(&Player_UpdateBGSelect_Params.Player, sizeof(Player_UpdateBGSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateBGSelect_Params.Param, sizeof(Player_UpdateBGSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateBGSelect, &Player_UpdateBGSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateBGSelect_Params.Param, sizeof(Player_UpdateBGSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateCustomMenu
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateCustomMenu(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateCustomMenu = nullptr;

	if (!uFnPlayer_UpdateCustomMenu)
	{
		uFnPlayer_UpdateCustomMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateCustomMenu");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateCustomMenu_Params Player_UpdateCustomMenu_Params;
	memset(&Player_UpdateCustomMenu_Params, 0, sizeof(Player_UpdateCustomMenu_Params));
	memcpy_s(&Player_UpdateCustomMenu_Params.Player, sizeof(Player_UpdateCustomMenu_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateCustomMenu_Params.Param, sizeof(Player_UpdateCustomMenu_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateCustomMenu, &Player_UpdateCustomMenu_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateCustomMenu_Params.Param, sizeof(Player_UpdateCustomMenu_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateTrialSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateTrialSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateTrialSelect = nullptr;

	if (!uFnPlayer_UpdateTrialSelect)
	{
		uFnPlayer_UpdateTrialSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateTrialSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateTrialSelect_Params Player_UpdateTrialSelect_Params;
	memset(&Player_UpdateTrialSelect_Params, 0, sizeof(Player_UpdateTrialSelect_Params));
	memcpy_s(&Player_UpdateTrialSelect_Params.Player, sizeof(Player_UpdateTrialSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateTrialSelect_Params.Param, sizeof(Player_UpdateTrialSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateTrialSelect, &Player_UpdateTrialSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateTrialSelect_Params.Param, sizeof(Player_UpdateTrialSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateHandicapSetting
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateHandicapSetting(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateHandicapSetting = nullptr;

	if (!uFnPlayer_UpdateHandicapSetting)
	{
		uFnPlayer_UpdateHandicapSetting = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateHandicapSetting");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateHandicapSetting_Params Player_UpdateHandicapSetting_Params;
	memset(&Player_UpdateHandicapSetting_Params, 0, sizeof(Player_UpdateHandicapSetting_Params));
	memcpy_s(&Player_UpdateHandicapSetting_Params.Player, sizeof(Player_UpdateHandicapSetting_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateHandicapSetting_Params.Param, sizeof(Player_UpdateHandicapSetting_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateHandicapSetting, &Player_UpdateHandicapSetting_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateHandicapSetting_Params.Param, sizeof(Player_UpdateHandicapSetting_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateCharaSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateCharaSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateCharaSelect = nullptr;

	if (!uFnPlayer_UpdateCharaSelect)
	{
		uFnPlayer_UpdateCharaSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateCharaSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateCharaSelect_Params Player_UpdateCharaSelect_Params;
	memset(&Player_UpdateCharaSelect_Params, 0, sizeof(Player_UpdateCharaSelect_Params));
	memcpy_s(&Player_UpdateCharaSelect_Params.Player, sizeof(Player_UpdateCharaSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateCharaSelect_Params.Param, sizeof(Player_UpdateCharaSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateCharaSelect, &Player_UpdateCharaSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateCharaSelect_Params.Param, sizeof(Player_UpdateCharaSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_PrepareUpdateCharaSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_PrepareUpdateCharaSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_PrepareUpdateCharaSelect = nullptr;

	if (!uFnPlayer_PrepareUpdateCharaSelect)
	{
		uFnPlayer_PrepareUpdateCharaSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_PrepareUpdateCharaSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_PrepareUpdateCharaSelect_Params Player_PrepareUpdateCharaSelect_Params;
	memset(&Player_PrepareUpdateCharaSelect_Params, 0, sizeof(Player_PrepareUpdateCharaSelect_Params));
	memcpy_s(&Player_PrepareUpdateCharaSelect_Params.Player, sizeof(Player_PrepareUpdateCharaSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_PrepareUpdateCharaSelect_Params.Param, sizeof(Player_PrepareUpdateCharaSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_PrepareUpdateCharaSelect, &Player_PrepareUpdateCharaSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_PrepareUpdateCharaSelect_Params.Param, sizeof(Player_PrepareUpdateCharaSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateStyleSelectExe
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateStyleSelectExe(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateStyleSelectExe = nullptr;

	if (!uFnPlayer_UpdateStyleSelectExe)
	{
		uFnPlayer_UpdateStyleSelectExe = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateStyleSelectExe");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateStyleSelectExe_Params Player_UpdateStyleSelectExe_Params;
	memset(&Player_UpdateStyleSelectExe_Params, 0, sizeof(Player_UpdateStyleSelectExe_Params));
	memcpy_s(&Player_UpdateStyleSelectExe_Params.Player, sizeof(Player_UpdateStyleSelectExe_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateStyleSelectExe_Params.Param, sizeof(Player_UpdateStyleSelectExe_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateStyleSelectExe, &Player_UpdateStyleSelectExe_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateStyleSelectExe_Params.Param, sizeof(Player_UpdateStyleSelectExe_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateStyleSelect
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateStyleSelect(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateStyleSelect = nullptr;

	if (!uFnPlayer_UpdateStyleSelect)
	{
		uFnPlayer_UpdateStyleSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateStyleSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateStyleSelect_Params Player_UpdateStyleSelect_Params;
	memset(&Player_UpdateStyleSelect_Params, 0, sizeof(Player_UpdateStyleSelect_Params));
	memcpy_s(&Player_UpdateStyleSelect_Params.Player, sizeof(Player_UpdateStyleSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateStyleSelect_Params.Param, sizeof(Player_UpdateStyleSelect_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateStyleSelect, &Player_UpdateStyleSelect_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateStyleSelect_Params.Param, sizeof(Player_UpdateStyleSelect_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateSkipCheckExe
// [0x00C40003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateSkipCheckExe(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateSkipCheckExe = nullptr;

	if (!uFnPlayer_UpdateSkipCheckExe)
	{
		uFnPlayer_UpdateSkipCheckExe = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateSkipCheckExe");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateSkipCheckExe_Params Player_UpdateSkipCheckExe_Params;
	memset(&Player_UpdateSkipCheckExe_Params, 0, sizeof(Player_UpdateSkipCheckExe_Params));
	memcpy_s(&Player_UpdateSkipCheckExe_Params.Player, sizeof(Player_UpdateSkipCheckExe_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateSkipCheckExe_Params.Param, sizeof(Player_UpdateSkipCheckExe_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateSkipCheckExe, &Player_UpdateSkipCheckExe_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateSkipCheckExe_Params.Param, sizeof(Player_UpdateSkipCheckExe_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateSkipCheck
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateSkipCheck(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateSkipCheck = nullptr;

	if (!uFnPlayer_UpdateSkipCheck)
	{
		uFnPlayer_UpdateSkipCheck = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateSkipCheck");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateSkipCheck_Params Player_UpdateSkipCheck_Params;
	memset(&Player_UpdateSkipCheck_Params, 0, sizeof(Player_UpdateSkipCheck_Params));
	memcpy_s(&Player_UpdateSkipCheck_Params.Player, sizeof(Player_UpdateSkipCheck_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateSkipCheck_Params.Param, sizeof(Player_UpdateSkipCheck_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateSkipCheck, &Player_UpdateSkipCheck_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateSkipCheck_Params.Param, sizeof(Player_UpdateSkipCheck_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateQuestConfirm
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateQuestConfirm(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateQuestConfirm = nullptr;

	if (!uFnPlayer_UpdateQuestConfirm)
	{
		uFnPlayer_UpdateQuestConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateQuestConfirm");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateQuestConfirm_Params Player_UpdateQuestConfirm_Params;
	memset(&Player_UpdateQuestConfirm_Params, 0, sizeof(Player_UpdateQuestConfirm_Params));
	memcpy_s(&Player_UpdateQuestConfirm_Params.Player, sizeof(Player_UpdateQuestConfirm_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateQuestConfirm_Params.Param, sizeof(Player_UpdateQuestConfirm_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateQuestConfirm, &Player_UpdateQuestConfirm_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateQuestConfirm_Params.Param, sizeof(Player_UpdateQuestConfirm_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateCardLoad
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_UpdateCardLoad(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_UpdateCardLoad = nullptr;

	if (!uFnPlayer_UpdateCardLoad)
	{
		uFnPlayer_UpdateCardLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_UpdateCardLoad");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_UpdateCardLoad_Params Player_UpdateCardLoad_Params;
	memset(&Player_UpdateCardLoad_Params, 0, sizeof(Player_UpdateCardLoad_Params));
	memcpy_s(&Player_UpdateCardLoad_Params.Player, sizeof(Player_UpdateCardLoad_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_UpdateCardLoad_Params.Param, sizeof(Player_UpdateCardLoad_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_UpdateCardLoad, &Player_UpdateCardLoad_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_UpdateCardLoad_Params.Param, sizeof(Player_UpdateCardLoad_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_InitCardLoad
// [0x00440003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::Player_InitCardLoad(EUE_PLAYER_ID Player, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectPlayerParam& Param)
{
	static UFunction* uFnPlayer_InitCardLoad = nullptr;

	if (!uFnPlayer_InitCardLoad)
	{
		uFnPlayer_InitCardLoad = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.Player_InitCardLoad");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execPlayer_InitCardLoad_Params Player_InitCardLoad_Params;
	memset(&Player_InitCardLoad_Params, 0, sizeof(Player_InitCardLoad_Params));
	memcpy_s(&Player_InitCardLoad_Params.Player, sizeof(Player_InitCardLoad_Params.Player), &Player, sizeof(Player));
	memcpy_s(&Player_InitCardLoad_Params.Param, sizeof(Player_InitCardLoad_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnPlayer_InitCardLoad, &Player_InitCardLoad_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &Player_InitCardLoad_Params.Param, sizeof(Player_InitCardLoad_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateFinish
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       bTrigger                       (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateFinish(bool bTrigger)
{
	static UFunction* uFnUpdateFinish = nullptr;

	if (!uFnUpdateFinish)
	{
		uFnUpdateFinish = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateFinish");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateFinish_Params UpdateFinish_Params;
	memset(&UpdateFinish_Params, 0, sizeof(UpdateFinish_Params));
	UpdateFinish_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateFinish, &UpdateFinish_Params, nullptr);

	return UpdateFinish_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateRannyuToSelect
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateRannyuToSelect(bool bTrigger)
{
	static UFunction* uFnUpdateRannyuToSelect = nullptr;

	if (!uFnUpdateRannyuToSelect)
	{
		uFnUpdateRannyuToSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateRannyuToSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateRannyuToSelect_Params UpdateRannyuToSelect_Params;
	memset(&UpdateRannyuToSelect_Params, 0, sizeof(UpdateRannyuToSelect_Params));
	UpdateRannyuToSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateRannyuToSelect, &UpdateRannyuToSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateMOMStage
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateMOMStage(bool bTrigger)
{
	static UFunction* uFnUpdateMOMStage = nullptr;

	if (!uFnUpdateMOMStage)
	{
		uFnUpdateMOMStage = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateMOMStage");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateMOMStage_Params UpdateMOMStage_Params;
	memset(&UpdateMOMStage_Params, 0, sizeof(UpdateMOMStage_Params));
	UpdateMOMStage_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMOMStage, &UpdateMOMStage_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateMOMMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateMOMMain(bool bTrigger)
{
	static UFunction* uFnUpdateMOMMain = nullptr;

	if (!uFnUpdateMOMMain)
	{
		uFnUpdateMOMMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateMOMMain");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateMOMMain_Params UpdateMOMMain_Params;
	memset(&UpdateMOMMain_Params, 0, sizeof(UpdateMOMMain_Params));
	UpdateMOMMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMOMMain, &UpdateMOMMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateMOMHelp
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateMOMHelp(bool bTrigger)
{
	static UFunction* uFnUpdateMOMHelp = nullptr;

	if (!uFnUpdateMOMHelp)
	{
		uFnUpdateMOMHelp = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateMOMHelp");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateMOMHelp_Params UpdateMOMHelp_Params;
	memset(&UpdateMOMHelp_Params, 0, sizeof(UpdateMOMHelp_Params));
	UpdateMOMHelp_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMOMHelp, &UpdateMOMHelp_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateMOMPreset
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateMOMPreset(bool bTrigger)
{
	static UFunction* uFnUpdateMOMPreset = nullptr;

	if (!uFnUpdateMOMPreset)
	{
		uFnUpdateMOMPreset = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateMOMPreset");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateMOMPreset_Params UpdateMOMPreset_Params;
	memset(&UpdateMOMPreset_Params, 0, sizeof(UpdateMOMPreset_Params));
	UpdateMOMPreset_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMOMPreset, &UpdateMOMPreset_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateModeSelect
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateModeSelect(bool bTrigger)
{
	static UFunction* uFnUpdateModeSelect = nullptr;

	if (!uFnUpdateModeSelect)
	{
		uFnUpdateModeSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateModeSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateModeSelect_Params UpdateModeSelect_Params;
	memset(&UpdateModeSelect_Params, 0, sizeof(UpdateModeSelect_Params));
	UpdateModeSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateModeSelect, &UpdateModeSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCursorAnim
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateCursorAnim()
{
	static UFunction* uFnUpdateCursorAnim = nullptr;

	if (!uFnUpdateCursorAnim)
	{
		uFnUpdateCursorAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCursorAnim");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateCursorAnim_Params UpdateCursorAnim_Params;
	memset(&UpdateCursorAnim_Params, 0, sizeof(UpdateCursorAnim_Params));

	this->ProcessEvent(uFnUpdateCursorAnim, &UpdateCursorAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCharaSelect
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateCharaSelect(bool bTrigger)
{
	static UFunction* uFnUpdateCharaSelect = nullptr;

	if (!uFnUpdateCharaSelect)
	{
		uFnUpdateCharaSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateCharaSelect");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateCharaSelect_Params UpdateCharaSelect_Params;
	memset(&UpdateCharaSelect_Params, 0, sizeof(UpdateCharaSelect_Params));
	UpdateCharaSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateCharaSelect, &UpdateCharaSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateStartDemo
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::UpdateStartDemo(bool bTrigger)
{
	static UFunction* uFnUpdateStartDemo = nullptr;

	if (!uFnUpdateStartDemo)
	{
		uFnUpdateStartDemo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.UpdateStartDemo");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execUpdateStartDemo_Params UpdateStartDemo_Params;
	memset(&UpdateStartDemo_Params, 0, sizeof(UpdateStartDemo_Params));
	UpdateStartDemo_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateStartDemo, &UpdateStartDemo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FinalizeScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::FinalizeScene()
{
	static UFunction* uFnFinalizeScene = nullptr;

	if (!uFnFinalizeScene)
	{
		uFnFinalizeScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FinalizeScene");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execFinalizeScene_Params FinalizeScene_Params;
	memset(&FinalizeScene_Params, 0, sizeof(FinalizeScene_Params));

	this->ProcessEvent(uFnFinalizeScene, &FinalizeScene_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.InitializeScene
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::InitializeScene()
{
	static UFunction* uFnInitializeScene = nullptr;

	if (!uFnInitializeScene)
	{
		uFnInitializeScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.InitializeScene");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execInitializeScene_Params InitializeScene_Params;
	memset(&InitializeScene_Params, 0, sizeof(InitializeScene_Params));

	this->ProcessEvent(uFnInitializeScene, &InitializeScene_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FixupCharaDecideInfo
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::FixupCharaDecideInfo(EUE_PLAYER_ID Player)
{
	static UFunction* uFnFixupCharaDecideInfo = nullptr;

	if (!uFnFixupCharaDecideInfo)
	{
		uFnFixupCharaDecideInfo = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.FixupCharaDecideInfo");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execFixupCharaDecideInfo_Params FixupCharaDecideInfo_Params;
	memset(&FixupCharaDecideInfo_Params, 0, sizeof(FixupCharaDecideInfo_Params));
	memcpy_s(&FixupCharaDecideInfo_Params.Player, sizeof(FixupCharaDecideInfo_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnFixupCharaDecideInfo, &FixupCharaDecideInfo_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.CancelExecCommon
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       IsFinish                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::CancelExecCommon(EUE_PLAYER_ID Player, bool IsFinish)
{
	static UFunction* uFnCancelExecCommon = nullptr;

	if (!uFnCancelExecCommon)
	{
		uFnCancelExecCommon = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.CancelExecCommon");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execCancelExecCommon_Params CancelExecCommon_Params;
	memset(&CancelExecCommon_Params, 0, sizeof(CancelExecCommon_Params));
	memcpy_s(&CancelExecCommon_Params.Player, sizeof(CancelExecCommon_Params.Player), &Player, sizeof(Player));
	CancelExecCommon_Params.IsFinish = IsFinish;

	this->ProcessEvent(uFnCancelExecCommon, &CancelExecCommon_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsCancelTrig
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::IsCancelTrig(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsCancelTrig = nullptr;

	if (!uFnIsCancelTrig)
	{
		uFnIsCancelTrig = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsCancelTrig");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execIsCancelTrig_Params IsCancelTrig_Params;
	memset(&IsCancelTrig_Params, 0, sizeof(IsCancelTrig_Params));
	memcpy_s(&IsCancelTrig_Params.Player, sizeof(IsCancelTrig_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsCancelTrig, &IsCancelTrig_Params, nullptr);

	return IsCancelTrig_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ResetAsyncData
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bForMOM                        (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::ResetAsyncData(EUE_PLAYER_ID Player, bool bForMOM)
{
	static UFunction* uFnResetAsyncData = nullptr;

	if (!uFnResetAsyncData)
	{
		uFnResetAsyncData = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ResetAsyncData");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execResetAsyncData_Params ResetAsyncData_Params;
	memset(&ResetAsyncData_Params, 0, sizeof(ResetAsyncData_Params));
	memcpy_s(&ResetAsyncData_Params.Player, sizeof(ResetAsyncData_Params.Player), &Player, sizeof(Player));
	ResetAsyncData_Params.bForMOM = bForMOM;

	this->ProcessEvent(uFnResetAsyncData, &ResetAsyncData_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsTimeLimit
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_MenuCharaSelect_AC20::IsTimeLimit()
{
	static UFunction* uFnIsTimeLimit = nullptr;

	if (!uFnIsTimeLimit)
	{
		uFnIsTimeLimit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.IsTimeLimit");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execIsTimeLimit_Params IsTimeLimit_Params;
	memset(&IsTimeLimit_Params, 0, sizeof(IsTimeLimit_Params));

	this->ProcessEvent(uFnIsTimeLimit, &IsTimeLimit_Params, nullptr);

	return IsTimeLimit_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupCharaCursorFromCharaBase
// [0x00C20002] (FUNC_Defined | FUNC_Public | FUNC_HasOutParms | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// class FString                  outCharaID                     (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)
// struct FVector2D               outCurPos                      (CPF_Parm | CPF_OutParm)
// int32_t                        outCur                         (CPF_Parm | CPF_OutParm)
// int32_t                        outPrevCur                     (CPF_Parm | CPF_OutParm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetupCharaCursorFromCharaBase(EUE_PLAYER_ID Player, const class FString& CharaID, class FString& outCharaID, struct FVector2D& outCurPos, int32_t& outCur, int32_t& outPrevCur)
{
	static UFunction* uFnSetupCharaCursorFromCharaBase = nullptr;

	if (!uFnSetupCharaCursorFromCharaBase)
	{
		uFnSetupCharaCursorFromCharaBase = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupCharaCursorFromCharaBase");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetupCharaCursorFromCharaBase_Params SetupCharaCursorFromCharaBase_Params;
	memset(&SetupCharaCursorFromCharaBase_Params, 0, sizeof(SetupCharaCursorFromCharaBase_Params));
	memcpy_s(&SetupCharaCursorFromCharaBase_Params.Player, sizeof(SetupCharaCursorFromCharaBase_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetupCharaCursorFromCharaBase_Params.CharaID, sizeof(SetupCharaCursorFromCharaBase_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&SetupCharaCursorFromCharaBase_Params.outCharaID, sizeof(SetupCharaCursorFromCharaBase_Params.outCharaID), &outCharaID, sizeof(outCharaID));
	memcpy_s(&SetupCharaCursorFromCharaBase_Params.outCurPos, sizeof(SetupCharaCursorFromCharaBase_Params.outCurPos), &outCurPos, sizeof(outCurPos));
	memcpy_s(&SetupCharaCursorFromCharaBase_Params.outCur, sizeof(SetupCharaCursorFromCharaBase_Params.outCur), &outCur, sizeof(outCur));
	memcpy_s(&SetupCharaCursorFromCharaBase_Params.outPrevCur, sizeof(SetupCharaCursorFromCharaBase_Params.outPrevCur), &outPrevCur, sizeof(outPrevCur));

	this->ProcessEvent(uFnSetupCharaCursorFromCharaBase, &SetupCharaCursorFromCharaBase_Params, nullptr);

	memcpy_s(&outCharaID, sizeof(outCharaID), &SetupCharaCursorFromCharaBase_Params.outCharaID, sizeof(SetupCharaCursorFromCharaBase_Params.outCharaID));
	memcpy_s(&outCurPos, sizeof(outCurPos), &SetupCharaCursorFromCharaBase_Params.outCurPos, sizeof(SetupCharaCursorFromCharaBase_Params.outCurPos));
	memcpy_s(&outCur, sizeof(outCur), &SetupCharaCursorFromCharaBase_Params.outCur, sizeof(SetupCharaCursorFromCharaBase_Params.outCur));
	memcpy_s(&outPrevCur, sizeof(outPrevCur), &SetupCharaCursorFromCharaBase_Params.outPrevCur, sizeof(SetupCharaCursorFromCharaBase_Params.outPrevCur));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupCharaCursorFromChara
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetupCharaCursorFromChara(EUE_PLAYER_ID Player, const class FString& CharaID)
{
	static UFunction* uFnSetupCharaCursorFromChara = nullptr;

	if (!uFnSetupCharaCursorFromChara)
	{
		uFnSetupCharaCursorFromChara = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupCharaCursorFromChara");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetupCharaCursorFromChara_Params SetupCharaCursorFromChara_Params;
	memset(&SetupCharaCursorFromChara_Params, 0, sizeof(SetupCharaCursorFromChara_Params));
	memcpy_s(&SetupCharaCursorFromChara_Params.Player, sizeof(SetupCharaCursorFromChara_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetupCharaCursorFromChara_Params.CharaID, sizeof(SetupCharaCursorFromChara_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSetupCharaCursorFromChara, &SetupCharaCursorFromChara_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupCharaCursor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetupCharaCursor(EUE_PLAYER_ID Player)
{
	static UFunction* uFnSetupCharaCursor = nullptr;

	if (!uFnSetupCharaCursor)
	{
		uFnSetupCharaCursor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupCharaCursor");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetupCharaCursor_Params SetupCharaCursor_Params;
	memset(&SetupCharaCursor_Params, 0, sizeof(SetupCharaCursor_Params));
	memcpy_s(&SetupCharaCursor_Params.Player, sizeof(SetupCharaCursor_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSetupCharaCursor, &SetupCharaCursor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AddCharacterParam
// [0x00424002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_HasOutParms | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// int32_t                        PanelIndex                     (CPF_Parm)
// uint32_t                       isRandom                       (CPF_OptionalParm | CPF_Parm)
// struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectCharacterParam Param                          (CPF_Parm | CPF_OutParm | CPF_NeedCtorLink)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AddCharacterParam(const class FString& CharaID, int32_t PanelIndex, bool isRandom, struct UREDGfxMoviePlayer_MenuCharaSelect_AC20_FCharaSelectCharacterParam& Param)
{
	static UFunction* uFnAddCharacterParam = nullptr;

	if (!uFnAddCharacterParam)
	{
		uFnAddCharacterParam = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AddCharacterParam");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAddCharacterParam_Params AddCharacterParam_Params;
	memset(&AddCharacterParam_Params, 0, sizeof(AddCharacterParam_Params));
	memcpy_s(&AddCharacterParam_Params.CharaID, sizeof(AddCharacterParam_Params.CharaID), &CharaID, sizeof(CharaID));
	memcpy_s(&AddCharacterParam_Params.PanelIndex, sizeof(AddCharacterParam_Params.PanelIndex), &PanelIndex, sizeof(PanelIndex));
	AddCharacterParam_Params.isRandom = isRandom;
	memcpy_s(&AddCharacterParam_Params.Param, sizeof(AddCharacterParam_Params.Param), &Param, sizeof(Param));

	this->ProcessEvent(uFnAddCharacterParam, &AddCharacterParam_Params, nullptr);

	memcpy_s(&Param, sizeof(Param), &AddCharacterParam_Params.Param, sizeof(AddCharacterParam_Params.Param));
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupSelectableChara_MOM
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetupSelectableChara_MOM()
{
	static UFunction* uFnSetupSelectableChara_MOM = nullptr;

	if (!uFnSetupSelectableChara_MOM)
	{
		uFnSetupSelectableChara_MOM = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupSelectableChara_MOM");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetupSelectableChara_MOM_Params SetupSelectableChara_MOM_Params;
	memset(&SetupSelectableChara_MOM_Params, 0, sizeof(SetupSelectableChara_MOM_Params));

	this->ProcessEvent(uFnSetupSelectableChara_MOM, &SetupSelectableChara_MOM_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupSelectableChara
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetupSelectableChara()
{
	static UFunction* uFnSetupSelectableChara = nullptr;

	if (!uFnSetupSelectableChara)
	{
		uFnSetupSelectableChara = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetupSelectableChara");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetupSelectableChara_Params SetupSelectableChara_Params;
	memset(&SetupSelectableChara_Params, 0, sizeof(SetupSelectableChara_Params));

	this->ProcessEvent(uFnSetupSelectableChara, &SetupSelectableChara_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCharaSelectable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)
// uint32_t                       Selectable                     (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetCharaSelectable(int32_t Index, bool Selectable)
{
	static UFunction* uFnSetCharaSelectable = nullptr;

	if (!uFnSetCharaSelectable)
	{
		uFnSetCharaSelectable = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetCharaSelectable");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetCharaSelectable_Params SetCharaSelectable_Params;
	memset(&SetCharaSelectable_Params, 0, sizeof(SetCharaSelectable_Params));
	memcpy_s(&SetCharaSelectable_Params.Index, sizeof(SetCharaSelectable_Params.Index), &Index, sizeof(Index));
	SetCharaSelectable_Params.Selectable = Selectable;

	this->ProcessEvent(uFnSetCharaSelectable, &SetCharaSelectable_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SearchAsyncLoadColorCache
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDCharaAsset*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

class UREDCharaAsset* UREDGfxMoviePlayer_MenuCharaSelect_AC20::SearchAsyncLoadColorCache(const class FString& CharaID)
{
	static UFunction* uFnSearchAsyncLoadColorCache = nullptr;

	if (!uFnSearchAsyncLoadColorCache)
	{
		uFnSearchAsyncLoadColorCache = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SearchAsyncLoadColorCache");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSearchAsyncLoadColorCache_Params SearchAsyncLoadColorCache_Params;
	memset(&SearchAsyncLoadColorCache_Params, 0, sizeof(SearchAsyncLoadColorCache_Params));
	memcpy_s(&SearchAsyncLoadColorCache_Params.CharaID, sizeof(SearchAsyncLoadColorCache_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSearchAsyncLoadColorCache, &SearchAsyncLoadColorCache_Params, nullptr);

	return SearchAsyncLoadColorCache_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AddAsyncLoadColorCache
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// class UREDCharaAsset*          Asset                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AddAsyncLoadColorCache(const class FString& CharaID, class UREDCharaAsset* Asset)
{
	static UFunction* uFnAddAsyncLoadColorCache = nullptr;

	if (!uFnAddAsyncLoadColorCache)
	{
		uFnAddAsyncLoadColorCache = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AddAsyncLoadColorCache");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAddAsyncLoadColorCache_Params AddAsyncLoadColorCache_Params;
	memset(&AddAsyncLoadColorCache_Params, 0, sizeof(AddAsyncLoadColorCache_Params));
	memcpy_s(&AddAsyncLoadColorCache_Params.CharaID, sizeof(AddAsyncLoadColorCache_Params.CharaID), &CharaID, sizeof(CharaID));
	AddAsyncLoadColorCache_Params.Asset = Asset;

	this->ProcessEvent(uFnAddAsyncLoadColorCache, &AddAsyncLoadColorCache_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SearchAsyncLoadCharaCache
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class UREDCharaAsset*          ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)

class UREDCharaAsset* UREDGfxMoviePlayer_MenuCharaSelect_AC20::SearchAsyncLoadCharaCache(const class FString& CharaID)
{
	static UFunction* uFnSearchAsyncLoadCharaCache = nullptr;

	if (!uFnSearchAsyncLoadCharaCache)
	{
		uFnSearchAsyncLoadCharaCache = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SearchAsyncLoadCharaCache");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSearchAsyncLoadCharaCache_Params SearchAsyncLoadCharaCache_Params;
	memset(&SearchAsyncLoadCharaCache_Params, 0, sizeof(SearchAsyncLoadCharaCache_Params));
	memcpy_s(&SearchAsyncLoadCharaCache_Params.CharaID, sizeof(SearchAsyncLoadCharaCache_Params.CharaID), &CharaID, sizeof(CharaID));

	this->ProcessEvent(uFnSearchAsyncLoadCharaCache, &SearchAsyncLoadCharaCache_Params, nullptr);

	return SearchAsyncLoadCharaCache_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AddAsyncLoadCharaCache
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  CharaID                        (CPF_Parm | CPF_NeedCtorLink)
// class UREDCharaAsset*          Asset                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::AddAsyncLoadCharaCache(const class FString& CharaID, class UREDCharaAsset* Asset)
{
	static UFunction* uFnAddAsyncLoadCharaCache = nullptr;

	if (!uFnAddAsyncLoadCharaCache)
	{
		uFnAddAsyncLoadCharaCache = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.AddAsyncLoadCharaCache");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execAddAsyncLoadCharaCache_Params AddAsyncLoadCharaCache_Params;
	memset(&AddAsyncLoadCharaCache_Params, 0, sizeof(AddAsyncLoadCharaCache_Params));
	memcpy_s(&AddAsyncLoadCharaCache_Params.CharaID, sizeof(AddAsyncLoadCharaCache_Params.CharaID), &CharaID, sizeof(CharaID));
	AddAsyncLoadCharaCache_Params.Asset = Asset;

	this->ProcessEvent(uFnAddAsyncLoadCharaCache, &AddAsyncLoadCharaCache_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ChangeBGColor
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Index                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::ChangeBGColor(int32_t Index)
{
	static UFunction* uFnChangeBGColor = nullptr;

	if (!uFnChangeBGColor)
	{
		uFnChangeBGColor = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ChangeBGColor");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execChangeBGColor_Params ChangeBGColor_Params;
	memset(&ChangeBGColor_Params, 0, sizeof(ChangeBGColor_Params));
	memcpy_s(&ChangeBGColor_Params.Index, sizeof(ChangeBGColor_Params.Index), &Index, sizeof(Index));

	this->ProcessEvent(uFnChangeBGColor, &ChangeBGColor_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.OnClose");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetNetworkNextScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_SCENE_ID                   ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

EUE_SCENE_ID UREDGfxMoviePlayer_MenuCharaSelect_AC20::SetNetworkNextScene()
{
	static UFunction* uFnSetNetworkNextScene = nullptr;

	if (!uFnSetNetworkNextScene)
	{
		uFnSetNetworkNextScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.SetNetworkNextScene");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execSetNetworkNextScene_Params SetNetworkNextScene_Params;
	memset(&SetNetworkNextScene_Params, 0, sizeof(SetNetworkNextScene_Params));

	this->ProcessEvent(uFnSetNetworkNextScene, &SetNetworkNextScene_Params, nullptr);

	return static_cast<EUE_SCENE_ID>(SetNetworkNextScene_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.GetSelectCharaID
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

class FString UREDGfxMoviePlayer_MenuCharaSelect_AC20::eventGetSelectCharaID(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetSelectCharaID = nullptr;

	if (!uFnGetSelectCharaID)
	{
		uFnGetSelectCharaID = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.GetSelectCharaID");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_eventGetSelectCharaID_Params GetSelectCharaID_Params;
	memset(&GetSelectCharaID_Params, 0, sizeof(GetSelectCharaID_Params));
	memcpy_s(&GetSelectCharaID_Params.Player, sizeof(GetSelectCharaID_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetSelectCharaID, &GetSelectCharaID_Params, nullptr);

	return GetSelectCharaID_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ReqGarbageCollection
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuCharaSelect_AC20::ReqGarbageCollection()
{
	static UFunction* uFnReqGarbageCollection = nullptr;

	if (!uFnReqGarbageCollection)
	{
		uFnReqGarbageCollection = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuCharaSelect_AC20.ReqGarbageCollection");
	}

	UREDGfxMoviePlayer_MenuCharaSelect_AC20_execReqGarbageCollection_Params ReqGarbageCollection_Params;
	memset(&ReqGarbageCollection_Params, 0, sizeof(ReqGarbageCollection_Params));

	this->ProcessEvent(uFnReqGarbageCollection, &ReqGarbageCollection_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateKeyConfig
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::UpdateKeyConfig(EUE_PLAYER_ID Player, bool bTrigger)
{
	static UFunction* uFnUpdateKeyConfig = nullptr;

	if (!uFnUpdateKeyConfig)
	{
		uFnUpdateKeyConfig = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateKeyConfig");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execUpdateKeyConfig_Params UpdateKeyConfig_Params;
	memset(&UpdateKeyConfig_Params, 0, sizeof(UpdateKeyConfig_Params));
	memcpy_s(&UpdateKeyConfig_Params.Player, sizeof(UpdateKeyConfig_Params.Player), &Player, sizeof(Player));
	UpdateKeyConfig_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateKeyConfig, &UpdateKeyConfig_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateButtonSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::UpdateButtonSelect(EUE_PLAYER_ID Player, bool bTrigger)
{
	static UFunction* uFnUpdateButtonSelect = nullptr;

	if (!uFnUpdateButtonSelect)
	{
		uFnUpdateButtonSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateButtonSelect");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execUpdateButtonSelect_Params UpdateButtonSelect_Params;
	memset(&UpdateButtonSelect_Params, 0, sizeof(UpdateButtonSelect_Params));
	memcpy_s(&UpdateButtonSelect_Params.Player, sizeof(UpdateButtonSelect_Params.Player), &Player, sizeof(Player));
	UpdateButtonSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateButtonSelect, &UpdateButtonSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetupButtonSelect_haichi
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::SetupButtonSelect_haichi(EUE_PLAYER_ID Player)
{
	static UFunction* uFnSetupButtonSelect_haichi = nullptr;

	if (!uFnSetupButtonSelect_haichi)
	{
		uFnSetupButtonSelect_haichi = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetupButtonSelect_haichi");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execSetupButtonSelect_haichi_Params SetupButtonSelect_haichi_Params;
	memset(&SetupButtonSelect_haichi_Params, 0, sizeof(SetupButtonSelect_haichi_Params));
	memcpy_s(&SetupButtonSelect_haichi_Params.Player, sizeof(SetupButtonSelect_haichi_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSetupButtonSelect_haichi, &SetupButtonSelect_haichi_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateButtonSelectConfirm
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::UpdateButtonSelectConfirm(EUE_PLAYER_ID Player, bool bTrigger)
{
	static UFunction* uFnUpdateButtonSelectConfirm = nullptr;

	if (!uFnUpdateButtonSelectConfirm)
	{
		uFnUpdateButtonSelectConfirm = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateButtonSelectConfirm");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execUpdateButtonSelectConfirm_Params UpdateButtonSelectConfirm_Params;
	memset(&UpdateButtonSelectConfirm_Params, 0, sizeof(UpdateButtonSelectConfirm_Params));
	memcpy_s(&UpdateButtonSelectConfirm_Params.Player, sizeof(UpdateButtonSelectConfirm_Params.Player), &Player, sizeof(Player));
	UpdateButtonSelectConfirm_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateButtonSelectConfirm, &UpdateButtonSelectConfirm_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateStyleSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::UpdateStyleSelect(EUE_PLAYER_ID Player, bool bTrigger)
{
	static UFunction* uFnUpdateStyleSelect = nullptr;

	if (!uFnUpdateStyleSelect)
	{
		uFnUpdateStyleSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateStyleSelect");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execUpdateStyleSelect_Params UpdateStyleSelect_Params;
	memset(&UpdateStyleSelect_Params, 0, sizeof(UpdateStyleSelect_Params));
	memcpy_s(&UpdateStyleSelect_Params.Player, sizeof(UpdateStyleSelect_Params.Player), &Player, sizeof(Player));
	UpdateStyleSelect_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateStyleSelect, &UpdateStyleSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateSkipAll
// [0x00820002] (FUNC_Defined | FUNC_Public | FUNC_HasDefaults | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::UpdateSkipAll(EUE_PLAYER_ID Player, bool bTrigger)
{
	static UFunction* uFnUpdateSkipAll = nullptr;

	if (!uFnUpdateSkipAll)
	{
		uFnUpdateSkipAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.UpdateSkipAll");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execUpdateSkipAll_Params UpdateSkipAll_Params;
	memset(&UpdateSkipAll_Params, 0, sizeof(UpdateSkipAll_Params));
	memcpy_s(&UpdateSkipAll_Params.Player, sizeof(UpdateSkipAll_Params.Player), &Player, sizeof(Player));
	UpdateSkipAll_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateSkipAll, &UpdateSkipAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetCancel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::SetCancel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnSetCancel = nullptr;

	if (!uFnSetCancel)
	{
		uFnSetCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetCancel");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execSetCancel_Params SetCancel_Params;
	memset(&SetCancel_Params, 0, sizeof(SetCancel_Params));
	memcpy_s(&SetCancel_Params.Player, sizeof(SetCancel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSetCancel, &SetCancel_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetForceDecide
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::SetForceDecide(EUE_PLAYER_ID Player)
{
	static UFunction* uFnSetForceDecide = nullptr;

	if (!uFnSetForceDecide)
	{
		uFnSetForceDecide = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetForceDecide");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execSetForceDecide_Params SetForceDecide_Params;
	memset(&SetForceDecide_Params, 0, sizeof(SetForceDecide_Params));
	memcpy_s(&SetForceDecide_Params.Player, sizeof(SetForceDecide_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnSetForceDecide, &SetForceDecide_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IsStylishMode
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuStyleSelect::IsStylishMode(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsStylishMode = nullptr;

	if (!uFnIsStylishMode)
	{
		uFnIsStylishMode = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IsStylishMode");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execIsStylishMode_Params IsStylishMode_Params;
	memset(&IsStylishMode_Params, 0, sizeof(IsStylishMode_Params));
	memcpy_s(&IsStylishMode_Params.Player, sizeof(IsStylishMode_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsStylishMode, &IsStylishMode_Params, nullptr);

	return IsStylishMode_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IsCancel
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuStyleSelect::IsCancel(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsCancel = nullptr;

	if (!uFnIsCancel)
	{
		uFnIsCancel = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IsCancel");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execIsCancel_Params IsCancel_Params;
	memset(&IsCancel_Params, 0, sizeof(IsCancel_Params));
	memcpy_s(&IsCancel_Params.Player, sizeof(IsCancel_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsCancel, &IsCancel_Params, nullptr);

	return IsCancel_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IsActive
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuStyleSelect::IsActive(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsActive = nullptr;

	if (!uFnIsActive)
	{
		uFnIsActive = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IsActive");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execIsActive_Params IsActive_Params;
	memset(&IsActive_Params, 0, sizeof(IsActive_Params));
	memcpy_s(&IsActive_Params.Player, sizeof(IsActive_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsActive, &IsActive_Params, nullptr);

	return IsActive_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.StartSelect
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// EUE_PLAYER_ID                  operatePlayer                  (CPF_Parm)
// uint32_t                       isNetworkMode                  (CPF_Parm)
// uint32_t                       isBannedStylish                (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::StartSelect(EUE_PLAYER_ID Player, EUE_PLAYER_ID operatePlayer, bool isNetworkMode, bool isBannedStylish)
{
	static UFunction* uFnStartSelect = nullptr;

	if (!uFnStartSelect)
	{
		uFnStartSelect = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.StartSelect");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execStartSelect_Params StartSelect_Params;
	memset(&StartSelect_Params, 0, sizeof(StartSelect_Params));
	memcpy_s(&StartSelect_Params.Player, sizeof(StartSelect_Params.Player), &Player, sizeof(Player));
	memcpy_s(&StartSelect_Params.operatePlayer, sizeof(StartSelect_Params.operatePlayer), &operatePlayer, sizeof(operatePlayer));
	StartSelect_Params.isNetworkMode = isNetworkMode;
	StartSelect_Params.isBannedStylish = isBannedStylish;

	this->ProcessEvent(uFnStartSelect, &StartSelect_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.StartSkipAll
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::StartSkipAll(EUE_PLAYER_ID Player)
{
	static UFunction* uFnStartSkipAll = nullptr;

	if (!uFnStartSkipAll)
	{
		uFnStartSkipAll = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.StartSkipAll");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execStartSkipAll_Params StartSkipAll_Params;
	memset(&StartSkipAll_Params, 0, sizeof(StartSkipAll_Params));
	memcpy_s(&StartSkipAll_Params.Player, sizeof(StartSkipAll_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnStartSkipAll, &StartSkipAll_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetupData
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// uint32_t                       bUsePrevData                   (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::SetupData(EUE_PLAYER_ID Player, bool bUsePrevData)
{
	static UFunction* uFnSetupData = nullptr;

	if (!uFnSetupData)
	{
		uFnSetupData = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetupData");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execSetupData_Params SetupData_Params;
	memset(&SetupData_Params, 0, sizeof(SetupData_Params));
	memcpy_s(&SetupData_Params.Player, sizeof(SetupData_Params.Player), &Player, sizeof(Player));
	SetupData_Params.bUsePrevData = bUsePrevData;

	this->ProcessEvent(uFnSetupData, &SetupData_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStyleSelect::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuStyleSelect::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.Start");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.KeyConfigTypeToA
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        In                             (CPF_Parm)

class FString UREDGfxMoviePlayer_MenuStyleSelect::KeyConfigTypeToA(int32_t In)
{
	static UFunction* uFnKeyConfigTypeToA = nullptr;

	if (!uFnKeyConfigTypeToA)
	{
		uFnKeyConfigTypeToA = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.KeyConfigTypeToA");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execKeyConfigTypeToA_Params KeyConfigTypeToA_Params;
	memset(&KeyConfigTypeToA_Params, 0, sizeof(KeyConfigTypeToA_Params));
	memcpy_s(&KeyConfigTypeToA_Params.In, sizeof(KeyConfigTypeToA_Params.In), &In, sizeof(In));

	this->ProcessEvent(uFnKeyConfigTypeToA, &KeyConfigTypeToA_Params, nullptr);

	return KeyConfigTypeToA_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IntToA
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class FString                  ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink)
// int32_t                        In                             (CPF_Parm)

class FString UREDGfxMoviePlayer_MenuStyleSelect::IntToA(int32_t In)
{
	static UFunction* uFnIntToA = nullptr;

	if (!uFnIntToA)
	{
		uFnIntToA = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IntToA");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execIntToA_Params IntToA_Params;
	memset(&IntToA_Params, 0, sizeof(IntToA_Params));
	memcpy_s(&IntToA_Params.In, sizeof(IntToA_Params.In), &In, sizeof(In));

	this->ProcessEvent(uFnIntToA, &IntToA_Params, nullptr);

	return IntToA_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.EndAnim
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::EndAnim(EUE_PLAYER_ID Player)
{
	static UFunction* uFnEndAnim = nullptr;

	if (!uFnEndAnim)
	{
		uFnEndAnim = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.EndAnim");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execEndAnim_Params EndAnim_Params;
	memset(&EndAnim_Params, 0, sizeof(EndAnim_Params));
	memcpy_s(&EndAnim_Params.Player, sizeof(EndAnim_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnEndAnim, &EndAnim_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.GetPlayerState
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// ESTYLE_SELECT_STATE            ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

ESTYLE_SELECT_STATE UREDGfxMoviePlayer_MenuStyleSelect::GetPlayerState(EUE_PLAYER_ID Player)
{
	static UFunction* uFnGetPlayerState = nullptr;

	if (!uFnGetPlayerState)
	{
		uFnGetPlayerState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.GetPlayerState");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execGetPlayerState_Params GetPlayerState_Params;
	memset(&GetPlayerState_Params, 0, sizeof(GetPlayerState_Params));
	memcpy_s(&GetPlayerState_Params.Player, sizeof(GetPlayerState_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnGetPlayerState, &GetPlayerState_Params, nullptr);

	return static_cast<ESTYLE_SELECT_STATE>(GetPlayerState_Params.ReturnValue);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetPlayerState
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// ESTYLE_SELECT_STATE            State                          (CPF_Parm)

void UREDGfxMoviePlayer_MenuStyleSelect::SetPlayerState(EUE_PLAYER_ID Player, ESTYLE_SELECT_STATE State)
{
	static UFunction* uFnSetPlayerState = nullptr;

	if (!uFnSetPlayerState)
	{
		uFnSetPlayerState = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.SetPlayerState");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execSetPlayerState_Params SetPlayerState_Params;
	memset(&SetPlayerState_Params, 0, sizeof(SetPlayerState_Params));
	memcpy_s(&SetPlayerState_Params.Player, sizeof(SetPlayerState_Params.Player), &Player, sizeof(Player));
	memcpy_s(&SetPlayerState_Params.State, sizeof(SetPlayerState_Params.State), &State, sizeof(State));

	this->ProcessEvent(uFnSetPlayerState, &SetPlayerState_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IsCancelTrig
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// EUE_PLAYER_ID                  Player                         (CPF_Parm)

bool UREDGfxMoviePlayer_MenuStyleSelect::IsCancelTrig(EUE_PLAYER_ID Player)
{
	static UFunction* uFnIsCancelTrig = nullptr;

	if (!uFnIsCancelTrig)
	{
		uFnIsCancelTrig = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStyleSelect.IsCancelTrig");
	}

	UREDGfxMoviePlayer_MenuStyleSelect_execIsCancelTrig_Params IsCancelTrig_Params;
	memset(&IsCancelTrig_Params, 0, sizeof(IsCancelTrig_Params));
	memcpy_s(&IsCancelTrig_Params.Player, sizeof(IsCancelTrig_Params.Player), &Player, sizeof(Player));

	this->ProcessEvent(uFnIsCancelTrig, &IsCancelTrig_Params, nullptr);

	return IsCancelTrig_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuMOMMedal::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuMOMMedal_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.StartMedal
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// EUE_PLAYER_ID                  Player                         (CPF_Parm)
// float                          Base                           (CPF_Parm)
// float                          Target                         (CPF_Parm)
// int32_t                        volumeLevel                    (CPF_Parm)

void UREDGfxMoviePlayer_MenuMOMMedal::StartMedal(EUE_PLAYER_ID Player, float Base, float Target, int32_t volumeLevel)
{
	static UFunction* uFnStartMedal = nullptr;

	if (!uFnStartMedal)
	{
		uFnStartMedal = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.StartMedal");
	}

	UREDGfxMoviePlayer_MenuMOMMedal_execStartMedal_Params StartMedal_Params;
	memset(&StartMedal_Params, 0, sizeof(StartMedal_Params));
	memcpy_s(&StartMedal_Params.Player, sizeof(StartMedal_Params.Player), &Player, sizeof(Player));
	memcpy_s(&StartMedal_Params.Base, sizeof(StartMedal_Params.Base), &Base, sizeof(Base));
	memcpy_s(&StartMedal_Params.Target, sizeof(StartMedal_Params.Target), &Target, sizeof(Target));
	memcpy_s(&StartMedal_Params.volumeLevel, sizeof(StartMedal_Params.volumeLevel), &volumeLevel, sizeof(volumeLevel));

	this->ProcessEvent(uFnStartMedal, &StartMedal_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.SetMedalRate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          Rate                           (CPF_Parm)

void UREDGfxMoviePlayer_MenuMOMMedal::SetMedalRate(float Rate)
{
	static UFunction* uFnSetMedalRate = nullptr;

	if (!uFnSetMedalRate)
	{
		uFnSetMedalRate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.SetMedalRate");
	}

	UREDGfxMoviePlayer_MenuMOMMedal_execSetMedalRate_Params SetMedalRate_Params;
	memset(&SetMedalRate_Params, 0, sizeof(SetMedalRate_Params));
	memcpy_s(&SetMedalRate_Params.Rate, sizeof(SetMedalRate_Params.Rate), &Rate, sizeof(Rate));

	this->ProcessEvent(uFnSetMedalRate, &SetMedalRate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuMOMMedal::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuMOMMedal_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.Start
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// uint32_t                       StartPaused                    (CPF_OptionalParm | CPF_Parm)

bool UREDGfxMoviePlayer_MenuMOMMedal::Start(bool StartPaused)
{
	static UFunction* uFnStart = nullptr;

	if (!uFnStart)
	{
		uFnStart = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuMOMMedal.Start");
	}

	UREDGfxMoviePlayer_MenuMOMMedal_execStart_Params Start_Params;
	memset(&Start_Params, 0, sizeof(Start_Params));
	Start_Params.StartPaused = StartPaused;

	this->ProcessEvent(uFnStart, &Start_Params, nullptr);

	return Start_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_MenuNews.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuNews::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNews.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuNews_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuNews.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuNews::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuNews.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuNews_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageIntro.OnUpdate
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageIntro::OnUpdate(bool bTrigger)
{
	static UFunction* uFnOnUpdate = nullptr;

	if (!uFnOnUpdate)
	{
		uFnOnUpdate = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageIntro.OnUpdate");
	}

	UREDGfxMoviePlayer_MenuStageIntro_execOnUpdate_Params OnUpdate_Params;
	memset(&OnUpdate_Params, 0, sizeof(OnUpdate_Params));
	OnUpdate_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnOnUpdate, &OnUpdate_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageIntro.UpdateMain
// [0x00040003] (FUNC_Final | FUNC_Defined | FUNC_Private | FUNC_AllFlags)
// Parameter Info:
// uint32_t                       bTrigger                       (CPF_Parm)

void UREDGfxMoviePlayer_MenuStageIntro::UpdateMain(bool bTrigger)
{
	static UFunction* uFnUpdateMain = nullptr;

	if (!uFnUpdateMain)
	{
		uFnUpdateMain = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageIntro.UpdateMain");
	}

	UREDGfxMoviePlayer_MenuStageIntro_execUpdateMain_Params UpdateMain_Params;
	memset(&UpdateMain_Params, 0, sizeof(UpdateMain_Params));
	UpdateMain_Params.bTrigger = bTrigger;

	this->ProcessEvent(uFnUpdateMain, &UpdateMain_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_MenuStageIntro.OnInitialize
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_MenuStageIntro::OnInitialize()
{
	static UFunction* uFnOnInitialize = nullptr;

	if (!uFnOnInitialize)
	{
		uFnOnInitialize = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_MenuStageIntro.OnInitialize");
	}

	UREDGfxMoviePlayer_MenuStageIntro_execOnInitialize_Params OnInitialize_Params;
	memset(&OnInitialize_Params, 0, sizeof(OnInitialize_Params));

	this->ProcessEvent(uFnOnInitialize, &OnInitialize_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_PauseMenu.UnPauseGame
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_PauseMenu::UnPauseGame()
{
	static UFunction* uFnUnPauseGame = nullptr;

	if (!uFnUnPauseGame)
	{
		uFnUnPauseGame = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_PauseMenu.UnPauseGame");
	}

	UREDGfxMoviePlayer_PauseMenu_execUnPauseGame_Params UnPauseGame_Params;
	memset(&UnPauseGame_Params, 0, sizeof(UnPauseGame_Params));

	this->ProcessEvent(uFnUnPauseGame, &UnPauseGame_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_PauseMenu.OnClose
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDGfxMoviePlayer_PauseMenu::eventOnClose()
{
	static UFunction* uFnOnClose = nullptr;

	if (!uFnOnClose)
	{
		uFnOnClose = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_PauseMenu.OnClose");
	}

	UREDGfxMoviePlayer_PauseMenu_eventOnClose_Params OnClose_Params;
	memset(&OnClose_Params, 0, sizeof(OnClose_Params));

	this->ProcessEvent(uFnOnClose, &OnClose_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_PauseMenu.UpdatePauseMenu
// [0x00020003] (FUNC_Final | FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDGfxMoviePlayer_PauseMenu::UpdatePauseMenu(float DeltaTime)
{
	static UFunction* uFnUpdatePauseMenu = nullptr;

	if (!uFnUpdatePauseMenu)
	{
		uFnUpdatePauseMenu = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_PauseMenu.UpdatePauseMenu");
	}

	UREDGfxMoviePlayer_PauseMenu_execUpdatePauseMenu_Params UpdatePauseMenu_Params;
	memset(&UpdatePauseMenu_Params, 0, sizeof(UpdatePauseMenu_Params));
	memcpy_s(&UpdatePauseMenu_Params.DeltaTime, sizeof(UpdatePauseMenu_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnUpdatePauseMenu, &UpdatePauseMenu_Params, nullptr);
};

// Function REDGame.REDGfxMoviePlayer_PauseMenu.ActivatePauseScene
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)

bool UREDGfxMoviePlayer_PauseMenu::ActivatePauseScene()
{
	static UFunction* uFnActivatePauseScene = nullptr;

	if (!uFnActivatePauseScene)
	{
		uFnActivatePauseScene = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_PauseMenu.ActivatePauseScene");
	}

	UREDGfxMoviePlayer_PauseMenu_execActivatePauseScene_Params ActivatePauseScene_Params;
	memset(&ActivatePauseScene_Params, 0, sizeof(ActivatePauseScene_Params));

	this->ProcessEvent(uFnActivatePauseScene, &ActivatePauseScene_Params, nullptr);

	return ActivatePauseScene_Params.ReturnValue;
};

// Function REDGame.REDGfxMoviePlayer_PauseMenu.Init
// [0x00024002] (FUNC_Defined | FUNC_NoExport | FUNC_OptionalParm | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// class ULocalPlayer*            Player                         (CPF_OptionalParm | CPF_Parm)

void UREDGfxMoviePlayer_PauseMenu::Init(class ULocalPlayer* Player)
{
	static UFunction* uFnInit = nullptr;

	if (!uFnInit)
	{
		uFnInit = UFunction::FindFunction("Function REDGame.REDGfxMoviePlayer_PauseMenu.Init");
	}

	UREDGfxMoviePlayer_PauseMenu_execInit_Params Init_Params;
	memset(&Init_Params, 0, sizeof(Init_Params));
	Init_Params.Player = Player;

	this->ProcessEvent(uFnInit, &Init_Params, nullptr);
};

// Function REDGame.REDPlayerInput.Jump
// [0x00020200] (FUNC_Exec | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDPlayerInput::Jump()
{
	static UFunction* uFnJump = nullptr;

	if (!uFnJump)
	{
		uFnJump = UFunction::FindFunction("Function REDGame.REDPlayerInput.Jump");
	}

	UREDPlayerInput_execJump_Params Jump_Params;
	memset(&Jump_Params, 0, sizeof(Jump_Params));

	this->ProcessEvent(uFnJump, &Jump_Params, nullptr);
};

// Function REDGame.REDPlayerInput.PlayerInput
// [0x00020800] (FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// float                          DeltaTime                      (CPF_Parm)

void UREDPlayerInput::eventPlayerInput(float DeltaTime)
{
	static UFunction* uFnPlayerInput = nullptr;

	if (!uFnPlayerInput)
	{
		uFnPlayerInput = UFunction::FindFunction("Function REDGame.REDPlayerInput.PlayerInput");
	}

	UREDPlayerInput_eventPlayerInput_Params PlayerInput_Params;
	memset(&PlayerInput_Params, 0, sizeof(PlayerInput_Params));
	memcpy_s(&PlayerInput_Params.DeltaTime, sizeof(PlayerInput_Params.DeltaTime), &DeltaTime, sizeof(DeltaTime));

	this->ProcessEvent(uFnPlayerInput, &PlayerInput_Params, nullptr);
};

// Function REDGame.REDSeqEvent_BGEffectPosition.ActivateFunction
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// class AActor*                  InOriginator                   (CPF_Parm)
// uint32_t                       bActivate                      (CPF_Parm)

bool UREDSeqEvent_BGEffectPosition::ActivateFunction(class AActor* InOriginator, bool bActivate)
{
	static UFunction* uFnActivateFunction = nullptr;

	if (!uFnActivateFunction)
	{
		uFnActivateFunction = UFunction::FindFunction("Function REDGame.REDSeqEvent_BGEffectPosition.ActivateFunction");
	}

	UREDSeqEvent_BGEffectPosition_execActivateFunction_Params ActivateFunction_Params;
	memset(&ActivateFunction_Params, 0, sizeof(ActivateFunction_Params));
	ActivateFunction_Params.InOriginator = InOriginator;
	ActivateFunction_Params.bActivate = bActivate;

	this->ProcessEvent(uFnActivateFunction, &ActivateFunction_Params, nullptr);

	return ActivateFunction_Params.ReturnValue;
};

// Function REDGame.REDSeqEvent_PlayerBase.SetParam
// [0x00020000] (FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// int32_t                        Param0                         (CPF_Parm)
// int32_t                        Param1                         (CPF_Parm)
// int32_t                        Param2                         (CPF_Parm)

void UREDSeqEvent_PlayerBase::SetParam(int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnSetParam = nullptr;

	if (!uFnSetParam)
	{
		uFnSetParam = UFunction::FindFunction("Function REDGame.REDSeqEvent_PlayerBase.SetParam");
	}

	UREDSeqEvent_PlayerBase_execSetParam_Params SetParam_Params;
	memset(&SetParam_Params, 0, sizeof(SetParam_Params));
	memcpy_s(&SetParam_Params.Param0, sizeof(SetParam_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&SetParam_Params.Param1, sizeof(SetParam_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&SetParam_Params.Param2, sizeof(SetParam_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnSetParam, &SetParam_Params, nullptr);
};

// Function REDGame.REDSeqEvent_PlayerBase.IsActivatable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Param0                         (CPF_Parm)
// int32_t                        Param1                         (CPF_Parm)
// int32_t                        Param2                         (CPF_Parm)

bool UREDSeqEvent_PlayerBase::IsActivatable(int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnIsActivatable = nullptr;

	if (!uFnIsActivatable)
	{
		uFnIsActivatable = UFunction::FindFunction("Function REDGame.REDSeqEvent_PlayerBase.IsActivatable");
	}

	UREDSeqEvent_PlayerBase_execIsActivatable_Params IsActivatable_Params;
	memset(&IsActivatable_Params, 0, sizeof(IsActivatable_Params));
	memcpy_s(&IsActivatable_Params.Param0, sizeof(IsActivatable_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&IsActivatable_Params.Param1, sizeof(IsActivatable_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&IsActivatable_Params.Param2, sizeof(IsActivatable_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnIsActivatable, &IsActivatable_Params, nullptr);

	return IsActivatable_Params.ReturnValue;
};

// Function REDGame.REDSeqEvent_PlayerDraw.IsActivatable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Param0                         (CPF_Parm)
// int32_t                        Param1                         (CPF_Parm)
// int32_t                        Param2                         (CPF_Parm)

bool UREDSeqEvent_PlayerDraw::IsActivatable(int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnIsActivatable = nullptr;

	if (!uFnIsActivatable)
	{
		uFnIsActivatable = UFunction::FindFunction("Function REDGame.REDSeqEvent_PlayerDraw.IsActivatable");
	}

	UREDSeqEvent_PlayerDraw_execIsActivatable_Params IsActivatable_Params;
	memset(&IsActivatable_Params, 0, sizeof(IsActivatable_Params));
	memcpy_s(&IsActivatable_Params.Param0, sizeof(IsActivatable_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&IsActivatable_Params.Param1, sizeof(IsActivatable_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&IsActivatable_Params.Param2, sizeof(IsActivatable_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnIsActivatable, &IsActivatable_Params, nullptr);

	return IsActivatable_Params.ReturnValue;
};

// Function REDGame.REDSeqEvent_PlayerLose.IsActivatable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Param0                         (CPF_Parm)
// int32_t                        Param1                         (CPF_Parm)
// int32_t                        Param2                         (CPF_Parm)

bool UREDSeqEvent_PlayerLose::IsActivatable(int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnIsActivatable = nullptr;

	if (!uFnIsActivatable)
	{
		uFnIsActivatable = UFunction::FindFunction("Function REDGame.REDSeqEvent_PlayerLose.IsActivatable");
	}

	UREDSeqEvent_PlayerLose_execIsActivatable_Params IsActivatable_Params;
	memset(&IsActivatable_Params, 0, sizeof(IsActivatable_Params));
	memcpy_s(&IsActivatable_Params.Param0, sizeof(IsActivatable_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&IsActivatable_Params.Param1, sizeof(IsActivatable_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&IsActivatable_Params.Param2, sizeof(IsActivatable_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnIsActivatable, &IsActivatable_Params, nullptr);

	return IsActivatable_Params.ReturnValue;
};

// Function REDGame.REDSeqEvent_PlayerRightOrLeft.Activated
// [0x00020802] (FUNC_Defined | FUNC_Event | FUNC_Public | FUNC_AllFlags)
// Parameter Info:

void UREDSeqEvent_PlayerRightOrLeft::eventActivated()
{
	static UFunction* uFnActivated = nullptr;

	if (!uFnActivated)
	{
		uFnActivated = UFunction::FindFunction("Function REDGame.REDSeqEvent_PlayerRightOrLeft.Activated");
	}

	UREDSeqEvent_PlayerRightOrLeft_eventActivated_Params Activated_Params;
	memset(&Activated_Params, 0, sizeof(Activated_Params));

	this->ProcessEvent(uFnActivated, &Activated_Params, nullptr);
};

// Function REDGame.REDSeqEvent_PlayerRightOrLeft.IsActivatable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Param0                         (CPF_Parm)
// int32_t                        Param1                         (CPF_Parm)
// int32_t                        Param2                         (CPF_Parm)

bool UREDSeqEvent_PlayerRightOrLeft::IsActivatable(int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnIsActivatable = nullptr;

	if (!uFnIsActivatable)
	{
		uFnIsActivatable = UFunction::FindFunction("Function REDGame.REDSeqEvent_PlayerRightOrLeft.IsActivatable");
	}

	UREDSeqEvent_PlayerRightOrLeft_execIsActivatable_Params IsActivatable_Params;
	memset(&IsActivatable_Params, 0, sizeof(IsActivatable_Params));
	memcpy_s(&IsActivatable_Params.Param0, sizeof(IsActivatable_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&IsActivatable_Params.Param1, sizeof(IsActivatable_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&IsActivatable_Params.Param2, sizeof(IsActivatable_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnIsActivatable, &IsActivatable_Params, nullptr);

	return IsActivatable_Params.ReturnValue;
};

// Function REDGame.REDSeqEvent_PlayerRoundChange.IsActivatable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Param0                         (CPF_Parm)
// int32_t                        Param1                         (CPF_Parm)
// int32_t                        Param2                         (CPF_Parm)

bool UREDSeqEvent_PlayerRoundChange::IsActivatable(int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnIsActivatable = nullptr;

	if (!uFnIsActivatable)
	{
		uFnIsActivatable = UFunction::FindFunction("Function REDGame.REDSeqEvent_PlayerRoundChange.IsActivatable");
	}

	UREDSeqEvent_PlayerRoundChange_execIsActivatable_Params IsActivatable_Params;
	memset(&IsActivatable_Params, 0, sizeof(IsActivatable_Params));
	memcpy_s(&IsActivatable_Params.Param0, sizeof(IsActivatable_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&IsActivatable_Params.Param1, sizeof(IsActivatable_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&IsActivatable_Params.Param2, sizeof(IsActivatable_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnIsActivatable, &IsActivatable_Params, nullptr);

	return IsActivatable_Params.ReturnValue;
};

// Function REDGame.REDSeqEvent_PlayerWin.IsActivatable
// [0x00020002] (FUNC_Defined | FUNC_Public | FUNC_AllFlags)
// Parameter Info:
// bool                           ReturnValue                    (CPF_Parm | CPF_OutParm | CPF_ReturnParm)
// int32_t                        Param0                         (CPF_Parm)
// int32_t                        Param1                         (CPF_Parm)
// int32_t                        Param2                         (CPF_Parm)

bool UREDSeqEvent_PlayerWin::IsActivatable(int32_t Param0, int32_t Param1, int32_t Param2)
{
	static UFunction* uFnIsActivatable = nullptr;

	if (!uFnIsActivatable)
	{
		uFnIsActivatable = UFunction::FindFunction("Function REDGame.REDSeqEvent_PlayerWin.IsActivatable");
	}

	UREDSeqEvent_PlayerWin_execIsActivatable_Params IsActivatable_Params;
	memset(&IsActivatable_Params, 0, sizeof(IsActivatable_Params));
	memcpy_s(&IsActivatable_Params.Param0, sizeof(IsActivatable_Params.Param0), &Param0, sizeof(Param0));
	memcpy_s(&IsActivatable_Params.Param1, sizeof(IsActivatable_Params.Param1), &Param1, sizeof(Param1));
	memcpy_s(&IsActivatable_Params.Param2, sizeof(IsActivatable_Params.Param2), &Param2, sizeof(Param2));

	this->ProcessEvent(uFnIsActivatable, &IsActivatable_Params, nullptr);

	return IsActivatable_Params.ReturnValue;
};

/*
# ========================================================================================= #
#
# ========================================================================================= #
*/

#ifdef _MSC_VER
#pragma pack(pop)
#endif
